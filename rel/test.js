
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
    function fetchRemotePackage(packageName, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        if (event.loaded && event.total) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: event.total
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };
    function handleError(error) {
      console.error('package error:', error);
    };
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage('test.data', function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
  function runWithFS() {
function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'data', true, true);
    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
          this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 14074, 0, 0).open('GET', '/data/efup.pcx');
    new DataRequest(14074, 626051, 0, 0).open('GET', '/data/isja.it');
    new DataRequest(626051, 631250, 0, 0).open('GET', '/data/iso.pcx');
    new DataRequest(631250, 650437, 0, 0).open('GET', '/data/iu.pcx');
    new DataRequest(650437, 678901, 0, 0).open('GET', '/data/kk.pcx');
    new DataRequest(678901, 694720, 0, 0).open('GET', '/data/mand1.pcx');
    new DataRequest(694720, 708952, 0, 0).open('GET', '/data/mand2.pcx');
    new DataRequest(708952, 746760, 0, 0).open('GET', '/data/mapp.pcx');
    new DataRequest(746760, 772962, 0, 0).open('GET', '/data/nunn.pcx');
    new DataRequest(772962, 785249, 0, 0).open('GET', '/data/oo.pcx');
    new DataRequest(785249, 795503, 0, 0).open('GET', '/data/ovi.pcx');
    new DataRequest(795503, 802057, 0, 0).open('GET', '/data/sotku2.pcx');
    new DataRequest(802057, 808420, 0, 0).open('GET', '/data/sotku3.pcx');
    new DataRequest(808420, 821974, 0, 0).open('GET', '/data/talopaa.pcx');
    new DataRequest(821974, 827147, 0, 0).open('GET', '/data/taus.pcx');
    new DataRequest(827147, 832807, 0, 0).open('GET', '/data/taust1.pcx');
    new DataRequest(832807, 841138, 0, 0).open('GET', '/data/tek2.pcx');
    new DataRequest(841138, 847116, 0, 0).open('GET', '/data/teksy.pcx');
    new DataRequest(847116, 873697, 0, 0).open('GET', '/data/tunele.pcx');
    new DataRequest(873697, 884777, 0, 0).open('GET', '/data/tyyp.pcx');
    new DataRequest(884777, 892778, 0, 0).open('GET', '/data/tyypit.pcx');
    new DataRequest(892778, 899439, 0, 0).open('GET', '/data/vass1.pcx');
    new DataRequest(899439, 906677, 0, 0).open('GET', '/data/vass2.pcx');
    new DataRequest(906677, 912771, 0, 0).open('GET', '/data/vass3.pcx');
    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = 'test.data';
    var REMOTE_PACKAGE_NAME = 'test.data';
    var PACKAGE_UUID = 'ba9c819a-b435-48db-868c-323ce71ba6a7';
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/data/efup.pcx"].onload();
          DataRequest.prototype.requests["/data/isja.it"].onload();
          DataRequest.prototype.requests["/data/iso.pcx"].onload();
          DataRequest.prototype.requests["/data/iu.pcx"].onload();
          DataRequest.prototype.requests["/data/kk.pcx"].onload();
          DataRequest.prototype.requests["/data/mand1.pcx"].onload();
          DataRequest.prototype.requests["/data/mand2.pcx"].onload();
          DataRequest.prototype.requests["/data/mapp.pcx"].onload();
          DataRequest.prototype.requests["/data/nunn.pcx"].onload();
          DataRequest.prototype.requests["/data/oo.pcx"].onload();
          DataRequest.prototype.requests["/data/ovi.pcx"].onload();
          DataRequest.prototype.requests["/data/sotku2.pcx"].onload();
          DataRequest.prototype.requests["/data/sotku3.pcx"].onload();
          DataRequest.prototype.requests["/data/talopaa.pcx"].onload();
          DataRequest.prototype.requests["/data/taus.pcx"].onload();
          DataRequest.prototype.requests["/data/taust1.pcx"].onload();
          DataRequest.prototype.requests["/data/tek2.pcx"].onload();
          DataRequest.prototype.requests["/data/teksy.pcx"].onload();
          DataRequest.prototype.requests["/data/tunele.pcx"].onload();
          DataRequest.prototype.requests["/data/tyyp.pcx"].onload();
          DataRequest.prototype.requests["/data/tyypit.pcx"].onload();
          DataRequest.prototype.requests["/data/vass1.pcx"].onload();
          DataRequest.prototype.requests["/data/vass2.pcx"].onload();
          DataRequest.prototype.requests["/data/vass3.pcx"].onload();
          Module['removeRunDependency']('datafile_test.data');
    };
    Module['addRunDependency']('datafile_test.data');
    if (!Module.preloadResults) Module.preloadResults = {};
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }
})();
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 32640;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([87,1,0,0,107,1,0,0,129,1,0,0,152,1,0,0,176,1,0,0,202,1,0,0,229,1,0,0,2,2,0,0,32,2,0,0,65,2,0,0,99,2,0,0,135,2,0,0,174,2,0,0,0,0,0,0,168,83,0,0,120,1,0,0,206,0,0,0,0,0,0,0,118,111,114,98,105,115,0,0,0,1,0,0,128,0,0,0,86,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,65,68,72,77,80,84,91,95,98,103,109,114,120,126,127,200,83,0,0,156,0,0,0,28,2,0,0,0,0,0,0,8,84,0,0,148,1,0,0,118,0,0,0,0,0,0,0,192,100,0,0,232,94,0,0,88,91,0,0,176,88,0,0,88,3,40,3,250,2,208,2,166,2,128,2,92,2,58,2,26,2,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,1,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,113,0,82,3,34,3,245,2,203,2,162,2,125,2,89,2,55,2,23,2,249,1,221,1,194,1,169,1,145,1,123,1,101,1,81,1,62,1,44,1,28,1,12,1,253,0,239,0,225,0,213,0,201,0,189,0,179,0,169,0,159,0,150,0,142,0,134,0,126,0,119,0,113,0,76,3,28,3,240,2,197,2,158,2,120,2,85,2,51,2,20,2,246,1,218,1,191,1,166,1,142,1,120,1,99,1,79,1,60,1,42,1,26,1,10,1,251,0,237,0,224,0,211,0,199,0,188,0,177,0,167,0,158,0,149,0,141,0,133,0,125,0,118,0,112,0,70,3,23,3,234,2,192,2,153,2,116,2,80,2,47,2,16,2,242,1,214,1,188,1,163,1,139,1,117,1,96,1,76,1,58,1,40,1,24,1,8,1,249,0,235,0,222,0,209,0,198,0,187,0,176,0,166,0,157,0,148,0,140,0,132,0,125,0,118,0,111,0,64,3,17,3,229,2,187,2,148,2,111,2,76,2,43,2,12,2,239,1,211,1,185,1,160,1,136,1,114,1,94,1,74,1,56,1,38,1,22,1,6,1,247,0,233,0,220,0,208,0,196,0,185,0,175,0,165,0,156,0,147,0,139,0,131,0,124,0,117,0,110,0,58,3,11,3,224,2,182,2,143,2,107,2,72,2,39,2,8,2,235,1,207,1,181,1,157,1,134,1,112,1,91,1,72,1,53,1,36,1,20,1,4,1,245,0,232,0,219,0,206,0,195,0,184,0,174,0,164,0,155,0,146,0,138,0,130,0,123,0,116,0,109,0,52,3,6,3,218,2,177,2,139,2,102,2,68,2,35,2,4,2,231,1,204,1,178,1,154,1,131,1,109,1,89,1,69,1,51,1,34,1,18,1,2,1,244,0,230,0,217,0,205,0,193,0,183,0,172,0,163,0,154,0,145,0,137,0,129,0,122,0,115,0,109,0,46,3,0,3,213,2,172,2,134,2,98,2,63,2,31,2,1,2,228,1,201,1,175,1,151,1,128,1,107,1,86,1,67,1,49,1,32,1,16,1,0,1,242,0,228,0,216,0,204,0,192,0,181,0,171,0,161,0,152,0,144,0,136,0,128,0,121,0,114,0,108,0,139,3,88,3,40,3,250,2,208,2,166,2,128,2,92,2,58,2,26,2,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,1,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,132,3,82,3,34,3,245,2,203,2,163,2,124,2,89,2,55,2,23,2,249,1,221,1,194,1,169,1,145,1,123,1,101,1,81,1,62,1,44,1,28,1,12,1,253,0,238,0,225,0,212,0,200,0,189,0,179,0,169,0,159,0,150,0,142,0,134,0,126,0,119,0,126,3,76,3,28,3,240,2,197,2,158,2,120,2,85,2,51,2,20,2,246,1,218,1,191,1,166,1,142,1,120,1,99,1,79,1,60,1,42,1,26,1,10,1,251,0,237,0,223,0,211,0,199,0,188,0,177,0,167,0,158,0,149,0,141,0,133,0,125,0,118,0,119,3,70,3,23,3,234,2,192,2,153,2,116,2,80,2,47,2,16,2,242,1,214,1,188,1,163,1,139,1,117,1,96,1,76,1,58,1,40,1,24,1,8,1,249,0,235,0,222,0,209,0,198,0,187,0,176,0,166,0,157,0,148,0,140,0,132,0,125,0,118,0,113,3,64,3,17,3,229,2,187,2,148,2,111,2,76,2,43,2,12,2,238,1,211,1,185,1,160,1,136,1,114,1,94,1,74,1,56,1,38,1,22,1,6,1,247,0,233,0,220,0,208,0,196,0,185,0,175,0,165,0,156,0,147,0,139,0,131,0,123,0,117,0,107,3,58,3,11,3,224,2,182,2,143,2,107,2,72,2,39,2,8,2,235,1,207,1,181,1,157,1,134,1,112,1,91,1,72,1,53,1,36,1,20,1,4,1,245,0,232,0,219,0,206,0,195,0,184,0,174,0,164,0,155,0,146,0,138,0,130,0,123,0,116,0,100,3,52,3,6,3,218,2,177,2,139,2,102,2,68,2,35,2,4,2,231,1,204,1,178,1,154,1,131,1,109,1,89,1,69,1,51,1,34,1,18,1,2,1,244,0,230,0,217,0,205,0,193,0,183,0,172,0,163,0,154,0,145,0,137,0,129,0,122,0,115,0,94,3,46,3,0,3,213,2,172,2,134,2,98,2,63,2,31,2,1,2,228,1,201,1,175,1,151,1,128,1,107,1,86,1,67,1,49,1,32,1,16,1,0,1,242,0,228,0,216,0,203,0,192,0,181,0,171,0,161,0,152,0,144,0,136,0,128,0,121,0,114,0,96,56,96,0,0,160,96,0,1,62,96,0,1,12,72,231,72,84,0,0,154,0,0,0,206,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,0,0,0,0,0,30,1,0,0,230,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,84,1,0,0,222,1,0,0,16,0,0,0,70,0,0,0,60,0,0,0,208,1,0,0,0,0,0,0,104,84,0,0,2,1,0,0,122,1,0,0,0,0,0,0,184,84,0,0,10,0,0,0,240,0,0,0,0,0,0,0,216,84,0,0,200,0,0,0,2,0,0,0,0,0,0,0,240,84,0,0,126,1,0,0,174,0,0,0,0,0,0,0,24,85,0,0,104,0,0,0,32,2,0,0,0,0,0,0,104,80,0,0,92,0,0,0,86,0,0,0,0,0,0,0,128,0,0,0,56,0,0,0,10,1,0,0,138,0,0,0,38,2,0,0,226,1,0,0,146,1,0,0,40,2,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,5,0,0,0,255,255,255,255,255,255,255,255,6,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,9,0,0,0,11,0,0,0,255,255,255,255,255,255,255,255,12,0,0,0,14,0,0,0,16,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,24,0,0,0,49,0,0,0,74,0,0,0,97,0,0,0,120,0,0,0,141,0,0,0,161,0,0,0,180,0,0,0,197,0,0,0,212,0,0,0,224,0,0,0,235,0,0,0,244,0,0,0,250,0,0,0,253,0,0,0,255,0,0,0,253,0,0,0,250,0,0,0,244,0,0,0,235,0,0,0,224,0,0,0,212,0,0,0,197,0,0,0,180,0,0,0,161,0,0,0,141,0,0,0,120,0,0,0,97,0,0,0,74,0,0,0,49,0,0,0,24,0,0,0,0,0,0,0,232,255,255,255,207,255,255,255,182,255,255,255,159,255,255,255,136,255,255,255,115,255,255,255,95,255,255,255,76,255,255,255,59,255,255,255,44,255,255,255,32,255,255,255,21,255,255,255,12,255,255,255,6,255,255,255,3,255,255,255,1,255,255,255,3,255,255,255,6,255,255,255,12,255,255,255,21,255,255,255,32,255,255,255,44,255,255,255,59,255,255,255,76,255,255,255,95,255,255,255,115,255,255,255,136,255,255,255,159,255,255,255,182,255,255,255,207,255,255,255,232,255,255,255,0,0,0,0,49,0,0,0,97,0,0,0,141,0,0,0,180,0,0,0,212,0,0,0,235,0,0,0,250,0,0,0,255,0,0,0,250,0,0,0,235,0,0,0,212,0,0,0,180,0,0,0,141,0,0,0,97,0,0,0,49,0,0,0,0,0,0,0,207,255,255,255,159,255,255,255,115,255,255,255,76,255,255,255,44,255,255,255,21,255,255,255,6,255,255,255,1,255,255,255,6,255,255,255,21,255,255,255,44,255,255,255,76,255,255,255,115,255,255,255,159,255,255,255,207,255,255,255,40,85,0,0,98,0,0,0,32,0,0,0,0,0,0,0,112,85,0,0,46,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,248,255,255,255,1,0,0,0,1,0,0,0,240,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,144,85,0,0,32,1,0,0,68,0,0,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,32,0,0,0,32,0,0,0,64,0,0,0,64,0,0,0,96,0,0,0,96,0,0,0,128,0,0,0,128,0,0,0,224,0,0,0,224,0,0,0,192,0,0,0,0,0,0,0,224,85,0,0,70,1,0,0,106,0,0,0,0,0,0,0,160,86,0,0,106,1,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,86,0,0,74,1,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,87,0,0,126,0,0,0,78,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,102,0,0,246,0,0,0,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,87,0,0,144,1,0,0,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,95,0,0,6,0,0,0,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,87,0,0,146,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,87,0,0,0,2,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,87,0,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,87,0,0,36,0,0,0,12,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,88,0,0,190,0,0,0,60,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,88,0,0,152,1,0,0,44,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,88,0,0,100,0,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,88,0,0,156,1,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,107,0,0,160,1,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,58,2,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,78,0,0,158,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,102,0,0,238,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,87,0,0,124,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,78,0,0,52,2,0,0,142,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,107,0,0,180,1,0,0,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,107,0,0,202,1,0,0,12,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,78,0,0,100,1,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,78,0,0,48,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,78,0,0,46,1,0,0,28,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,78,0,0,250,1,0,0,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,78,0,0,70,2,0,0,24,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,99,0,0,214,1,0,0,172,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,78,0,0,82,0,0,0,172,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,86,0,0,134,1,0,0,104,1,0,0,0,0,0,0,232,78,0,0,238,1,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,214,0,0,0,30,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,79,0,0,88,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,79,0,0,44,0,0,0,78,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,79,0,0,124,1,0,0,68,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,16,0,0,8,16,0,0,240,15,0,0,48,15,0,0,0,15,0,0,232,14,0,0,208,14,0,0,168,14,0,0,24,14,0,0,232,13,0,0,0,14,0,0,64,13,0,0,40,13,0,0,112,13,0,0,56,12,0,0,104,12,0,0,176,12,0,0,16,13,0,0,32,12,0,0,144,14,0,0,56,16,0,0,32,16,0,0,208,13,0,0,88,13,0,0,184,13,0,0,160,13,0,0,136,13,0,0,48,14,0,0,96,14,0,0,120,14,0,0,72,14,0,0,8,12,0,0,128,12,0,0,80,12,0,0,152,12,0,0,80,16,0,0,224,12,0,0,248,12,0,0,24,15,0,0,200,12,0,0,0,0,0,0,0,0,0,0,176,79,0,0,194,0,0,0,138,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,79,0,0,236,0,0,0,62,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,79,0,0,54,2,0,0,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,79,0,0,116,1,0,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,79,0,0,250,0,0,0,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,79,0,0,60,2,0,0,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,15,0,0,0,17,0,0,0,18,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,58,0,0,0,59,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,63,0,0,0,64,0,0,0,64,0,0,0,0,0,0,0,48,86,0,0,82,1,0,0,204,1,0,0,0,0,0,0,0,0,3,88,3,40,2,250,2,208,2,166,2,128,2,92,2,58,2,26,1,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,0,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,113,0,0,0,0,0,0,88,86,0,0,14,2,0,0,152,0,0,0,0,0,0,0,120,86,0,0,218,1,0,0,162,0,0,0,0,0,0,0,86,28,0,0,34,28,0,0,238,27,0,0,187,27,0,0,135,27,0,0,85,27,0,0,34,27,0,0,240,26,0,0,191,26,0,0,142,26,0,0,93,26,0,0,44,26,0,0,252,25,0,0,204,25,0,0,156,25,0,0,109,25,0,0,62,25,0,0,16,25,0,0,226,24,0,0,180,24,0,0,134,24,0,0,89,24,0,0,44,24,0,0,0,24,0,0,212,23,0,0,168,23,0,0,124,23,0,0,81,23,0,0,38,23,0,0,251,22,0,0,209,22,0,0,167,22,0,0,125,22,0,0,84,22,0,0,43,22,0,0,2,22,0,0,217,21,0,0,177,21,0,0,137,21,0,0,98,21,0,0,58,21,0,0,19,21,0,0,236,20,0,0,198,20,0,0,159,20,0,0,121,20,0,0,84,20,0,0,46,20,0,0,9,20,0,0,228,19,0,0,192,19,0,0,155,19,0,0,119,19,0,0,83,19,0,0,48,19,0,0,12,19,0,0,233,18,0,0,198,18,0,0,164,18,0,0,130,18,0,0,95,18,0,0,62,18,0,0,28,18,0,0,251,17,0,0,218,17,0,0,185,17,0,0,152,17,0,0,120,17,0,0,87,17,0,0,55,17,0,0,24,17,0,0,248,16,0,0,217,16,0,0,186,16,0,0,155,16,0,0,125,16,0,0,94,16,0,0,64,16,0,0,34,16,0,0,4,16,0,0,231,15,0,0,202,15,0,0,173,15,0,0,144,15,0,0,115,15,0,0,87,15,0,0,58,15,0,0,30,15,0,0,2,15,0,0,231,14,0,0,203,14,0,0,176,14,0,0,149,14,0,0,122,14,0,0,95,14,0,0,69,14,0,0,43,14,0,0,17,14,0,0,247,13,0,0,221,13,0,0,195,13,0,0,170,13,0,0,145,13,0,0,120,13,0,0,88,3,0,0,40,3,0,0,250,2,0,0,208,2,0,0,166,2,0,0,128,2,0,0,92,2,0,0,58,2,0,0,26,2,0,0,252,1,0,0,224,1,0,0,197,1,0,0,172,1,0,0,148,1,0,0,125,1,0,0,104,1,0,0,83,1,0,0,64,1,0,0,46,1,0,0,29,1,0,0,13,1,0,0,254,0,0,0,240,0,0,0,226,0,0,0,214,0,0,0,202,0,0,0,190,0,0,0,180,0,0,0,170,0,0,0,160,0,0,0,151,0,0,0,143,0,0,0,135,0,0,0,127,0,0,0,120,0,0,0,113,0,0,0,255,255,255,255,0,0,0,0,184,88,0,0,84,0,0,0,130,0,0,0,0,0,0,0,248,88,0,0,150,0,0,0,6,2,0,0,0,0,0,0,24,0,0,0,226,0,0,0,52,0,0,0,36,2,0,0,24,0,0,0,226,0,0,0,52,0,0,0,36,2,0,0,64,89,0,0,132,0,0,0,236,1,0,0,0,0,0,0,54,110,192,250,150,42,235,238,3,74,162,219,170,73,170,234,2,0,0,0,147,241,70,174,183,88,195,157,139,95,188,152,191,35,122,67,4,0,0,0,112,170,3,77,251,47,31,115,217,253,186,254,19,27,183,1,1,0,0,0,233,152,1,44,112,14,180,58,240,50,23,17,48,88,41,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,90,0,0,0,0,0,0,0,0,0,0,4,0,0,0,96,103,0,0,1,0,0,0,0,0,0,0,4,0,0,0,80,96,0,0,1,0,0,0,1,0,0,0,4,0,0,0,16,92,0,0,1,0,0,0,1,0,0,0,4,0,0,0,112,89,0,0,0,0,0,0,3,0,0,0,6,0,0,0,80,86,0,0,0,0,0,0,3,0,0,0,8,0,0,0,216,83,0,0,1,0,0,0,5,0,0,0,6,0,0,0,136,82,0,0,1,0,0,0,5,0,0,0,8,0,0,0,224,80,0,0,1,0,0,0,6,0,0,0,4,0,0,0,192,79,0,0,1,0,0,0,7,0,0,0,4,0,0,0,72,107,0,0,1,0,0,0,7,0,0,0,6,0,0,0,104,106,0,0,1,0,0,0,7,0,0,0,8,0,0,0,64,105,0,0,1,0,0,0,99,0,0,0,4,0,0,0,104,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,103,0,0,72,2,0,0,26,0,0,0,0,0,0,0,80,90,0,0,64,2,0,0,116,0,0,0,0,0,0,0,120,90,0,0,160,0,0,0,240,1,0,0,0,0,0,0,144,90,0,0,188,0,0,0,198,0,0,0,0,0,0,0,208,90,0,0,184,1,0,0,180,0,0,0,0,0,0,0,16,91,0,0,164,0,0,0,252,1,0,0,0,0,0,0,32,91,0,0,142,0,0,0,154,1,0,0,0,0,0,0,48,91,0,0,118,1,0,0,202,0,0,0,0,0,0,0,232,91,0,0,132,1,0,0,182,1,0,0,0,0,0,0,24,92,0,0,192,1,0,0,114,1,0,0,0,0,0,0,184,92,0,0,122,0,0,0,54,1,0,0,0,0,0,0,220,1,0,0,170,1,0,0,164,1,0,0,84,2,0,0,34,1,0,0,94,0,0,0,218,0,0,0,6,1,0,0,0,72,100,116,130,138,146,154,162,166,170,174,178,182,234,190,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,254,254,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,144,93,0,0,8,2,0,0,24,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,16,0,0,0,19,0,0,0,22,0,0,0,26,0,0,0,32,0,0,0,43,0,0,0,64,0,0,0,128,0,0,0,62,180,228,51,9,145,243,51,139,178,1,52,60,32,10,52,35,26,19,52,96,169,28,52,167,215,38,52,75,175,49,52,80,59,61,52,112,135,73,52,35,160,86,52,184,146,100,52,85,109,115,52,136,159,129,52,252,11,138,52,147,4,147,52,105,146,156,52,50,191,166,52,63,149,177,52,147,31,189,52,228,105,201,52,173,128,214,52,54,113,228,52,166,73,243,52,136,140,1,53,192,247,9,53,6,239,18,53,118,123,28,53,192,166,38,53,55,123,49,53,218,3,61,53,94,76,73,53,59,97,86,53,185,79,100,53,252,37,115,53,138,121,129,53,134,227,137,53,124,217,146,53,133,100,156,53,82,142,166,53,51,97,177,53,37,232,188,53,220,46,201,53,206,65,214,53,65,46,228,53,87,2,243,53,143,102,1,54,79,207,9,54,245,195,18,54,152,77,28,54,232,117,38,54,50,71,49,54,116,204,60,54,94,17,73,54,101,34,86,54,206,12,100,54,184,222,114,54,151,83,129,54,28,187,137,54,114,174,146,54,175,54,156,54,129,93,166,54,53,45,177,54,199,176,188,54,228,243,200,54,1,3,214,54,96,235,227,54,30,187,242,54,162,64,1,55,235,166,9,55,241,152,18,55,201,31,28,55,30,69,38,55,61,19,49,55,30,149,60,55,111,214,72,55,162,227,85,55,247,201,99,55,137,151,114,55,175,45,129,55,190,146,137,55,116,131,146,55,230,8,156,55,190,44,166,55,71,249,176,55,121,121,188,55,254,184,200,55,71,196,213,55,146,168,227,55,248,115,242,55,192,26,1,56,147,126,9,56,249,109,18,56,6,242,27,56,98,20,38,56,86,223,48,56,216,93,60,56,146,155,72,56,242,164,85,56,51,135,99,56,110,80,114,56,211,7,129,56,107,106,137,56,130,88,146,56,42,219,155,56,9,252,165,56,104,197,176,56,59,66,188,56,41,126,200,56,160,133,213,56,217,101,227,56,232,44,242,56,233,244,0,57,70,86,9,57,14,67,18,57,81,196,27,57,181,227,37,57,127,171,48,57,162,38,60,57,197,96,72,57,83,102,85,57,131,68,99,57,104,9,114,57,1,226,128,57,36,66,137,57,157,45,146,57,123,173,155,57,99,203,165,57,153,145,176,57,13,11,188,57,102,67,200,57,11,71,213,57,50,35,227,57,237,229,241,57,29,207,0,58,5,46,9,58,48,24,18,58,169,150,27,58,21,179,37,58,183,119,48,58,124,239,59,58,10,38,72,58,199,39,85,58,230,1,99,58,120,194,113,58,59,188,128,58,233,25,137,58,198,2,146,58,219,127,155,58,203,154,165,58,216,93,176,58,239,211,187,58,179,8,200,58,136,8,213,58,159,224,226,58,7,159,241,58,92,169,0,59,208,5,9,59,94,237,17,59,15,105,27,59,132,130,37,59,253,67,48,59,103,184,59,59,97,235,71,59,77,233,84,59,93,191,98,59,156,123,113,59,127,150,128,59,186,241,136,59,249,215,145,59,71,82,155,59,65,106,165,59,39,42,176,59,226,156,187,59,18,206,199,59,23,202,212,59,32,158,226,59,53,88,241,59,166,131,0,60,167,221,8,60,152,194,17,60,130,59,27,60,1,82,37,60,84,16,48,60,97,129,59,60,200,176,71,60,229,170,84,60,232,124,98,60,212,52,113,60,207,112,128,60,150,201,136,60,58,173,145,60,192,36,155,60,197,57,165,60,133,246,175,60,229,101,187,60,130,147,199,60,185,139,212,60,180,91,226,60,121,17,241,60,251,93,0,61,137,181,8,61,223,151,17,61,2,14,27,61,141,33,37,61,185,220,47,61,109,74,59,61,64,118,71,61,145,108,84,61,133,58,98,61,34,238,112,61,42,75,128,61,127,161,136,61,136,130,145,61,72,247,154,61,88,9,165,61,242,194,175,61,248,46,187,61,3,89,199,61,109,77,212,61,92,25,226,61,209,202,240,61,91,56,0,62,119,141,8,62,51,109,17,62,144,224,26,62,39,241,36,62,46,169,47,62,135,19,59,62,202,59,71,62,77,46,84,62,55,248,97,62,132,167,112,62,143,37,128,62,115,121,136,62,226,87,145,62,220,201,154,62,249,216,164,62,109,143,175,62,27,248,186,62,149,30,199,62,51,15,212,62,23,215,225,62,61,132,240,62,198,18,0,63,114,101,8,63,147,66,17,63,43,179,26,63,206,192,36,63,177,117,47,63,178,220,58,63,101,1,71,63,29,240,83,63,251,181,97,63,251,96,112,63,0,0,128,63,208,93,0,0,56,2,0,0,246,1,0,0,0,0,0,0,248,93,0,0,176,1,0,0,222,0,0,0,0,0,0,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,144,94,0,0,220,0,0,0,86,2,0,0,0,0,0,0,176,94,0,0,4,2,0,0,108,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,80,95,0,0,176,0,0,0,234,0,0,0,0,0,0,0,200,95,0,0,108,1,0,0,94,1,0,0,0,0,0,0,47,116,109,112,0,0,0,0,47,0,0,0,43,0,0,0,40,0,0,0,37,0,0,0,35,0,0,0,32,0,0,0,30,0,0,0,29,0,0,0,27,0,0,0,26,0,0,0,24,96,0,0,48,2,0,0,186,0,0,0,0,0,0,0,224,96,0,0,232,1,0,0,96,1,0,0,0,0,0,0,184,97,0,0,166,0,0,0,50,2,0,0,0,0,0,0,255,15,11,13,10,2,1,3,4,29,0,0,0,0,0,0,255,15,11,13,10,2,1,3,4,29,0,0,0,0,0,0,255,163,11,13,10,2,1,3,4,29,0,6,5,255,255,9,255,27,7,254,171,172,16,255,255,255,255,0,0,0,0,0,255,0,0,0,1,0,0,0,2,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,156,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,157,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,117,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,11,0,0,0,255,0,0,0,255,0,0,0,15,0,0,0,255,0,0,0,118,0,0,0,12,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,13,2,255,172,255,255,255,11,255,10,14,3,9,255,255,255,163,7,1,4,255,5,6,0,0,0,0,0,0,0,255,163,11,13,10,2,1,3,4,29,0,6,5,128,129,9,137,27,7,254,135,172,16,17,22,138,132,0,0,0,0,0,255,163,171,3,5,4,6,172,7,0,8,25,12,10,165,166,157,156,1,2,254,253,132,133,9,255,20,27,29,11,13,16,17,14,169,170,0,0,0,0,255,249,248,122,251,254,4,253,252,123,255,255,250,255,255,15,121,120,122,166,123,126,0,0,64,0,0,0,216,21,0,0,120,31,0,0,64,7,0,0,224,23,0,0,144,9,0,0,32,7,0,0,16,7,0,0,128,20,0,0,112,28,0,0,80,28,0,0,136,17,0,0,88,22,0,0,248,0,0,0,120,22,0,0,80,20,0,0,104,22,0,0,24,29,0,0,40,29,0,0,248,17,0,0,136,77,0,0,96,73,0,0,8,29,0,0,248,21,0,0,232,21,0,0,72,22,0,0,56,22,0,0,40,22,0,0,152,39,0,0,112,10,0,0,232,17,0,0,168,5,0,0,136,37,0,0,200,28,0,0,120,37,0,0,8,22,0,0,120,77,0,0,0,7,0,0,152,40,0,0,168,40,0,0,24,37,0,0,64,20,0,0,128,9,0,0,168,36,0,0,232,0,0,0,184,28,0,0,48,7,0,0,64,28,0,0,80,7,0,0,104,31,0,0,152,77,0,0,248,11,0,0,128,28,0,0,24,22,0,0,192,14,0,0,0,0,0,0,32,98,0,0,18,0,0,0,88,2,0,0,0,0,0,0,176,98,0,0,252,0,0,0,96,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,12,0,0,0,24,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,6,0,0,0,13,0,0,0,31,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,255,0,0,112,255,0,0,40,255,0,0,224,254,0,0,152,254,0,0,80,254,0,0,8,254,0,0,192,253,0,0,120,253,0,0,48,253,0,0,232,252,0,0,160,252,0,0,88,252,0,0,16,252,0,0,200,251,0,0,19,208,2,67,43,183,4,67,89,165,6,67,183,154,8,67,96,151,10,67,112,155,12,67,0,167,14,67,47,186,16,67,23,213,18,67,214,247,20,67,137,34,23,67,77,85,25,67,65,144,27,67,131,211,29,67,50,31,32,67,109,115,34,67,84,208,36,67,7,54,39,67,168,164,41,67,87,28,44,67,55,157,46,67,104,39,49,67,15,187,51,67,78,88,54,67,73,255,56,67,37,176,59,67,5,107,62,67,16,48,65,67,106,255,67,67,60,217,70,67,171,189,73,67,223,172,76,67,0,167,79,67,55,172,82,67,174,188,85,67,141,216,88,67,0,0,92,67,49,51,95,67,77,114,98,67,128,189,101,67,246,20,105,67,222,120,108,67,101,233,111,67,187,102,115,67,16,241,118,67,147,136,122,67,119,45,126,67,246,239,128,67,19,208,130,67,43,183,132,67,89,165,134,67,183,154,136,67,96,151,138,67,112,155,140,67,0,167,142,67,47,186,144,67,23,213,146,67,214,247,148,67,137,34,151,67,77,85,153,67,65,144,155,67,131,211,157,67,50,31,160,67,109,115,162,67,84,208,164,67,7,54,167,67,168,164,169,67,87,28,172,67,55,157,174,67,104,39,177,67,15,187,179,67,78,88,182,67,73,255,184,67,37,176,187,67,5,107,190,67,16,48,193,67,106,255,195,67,60,217,198,67,171,189,201,67,223,172,204,67,0,167,207,67,55,172,210,67,174,188,213,67,141,216,216,67,0,0,220,67,49,51,223,67,77,114,226,67,128,189,229,67,246,20,233,67,222,120,236,67,101,233,239,67,187,102,243,67,16,241,246,67,147,136,250,67,119,45,254,67,246,239,0,68,19,208,2,68,43,183,4,68,89,165,6,68,183,154,8,68,96,151,10,68,112,155,12,68,0,167,14,68,47,186,16,68,23,213,18,68,214,247,20,68,137,34,23,68,77,85,25,68,65,144,27,68,131,211,29,68,50,31,32,68,109,115,34,68,84,208,36,68,7,54,39,68,168,164,41,68,87,28,44,68,55,157,46,68,104,39,49,68,15,187,51,68,78,88,54,68,73,255,56,68,37,176,59,68,5,107,62,68,16,48,65,68,106,255,67,68,60,217,70,68,171,189,73,68,223,172,76,68,0,167,79,68,55,172,82,68,174,188,85,68,141,216,88,68,0,0,92,68,49,51,95,68,77,114,98,68,128,189,101,68,246,20,105,68,222,120,108,68,101,233,111,68,187,102,115,68,16,241,118,68,147,136,122,68,119,45,126,68,246,239,128,68,19,208,130,68,43,183,132,68,89,165,134,68,183,154,136,68,96,151,138,68,112,155,140,68,0,167,142,68,47,186,144,68,23,213,146,68,214,247,148,68,137,34,151,68,77,85,153,68,65,144,155,68,131,211,157,68,50,31,160,68,109,115,162,68,84,208,164,68,7,54,167,68,168,164,169,68,87,28,172,68,55,157,174,68,104,39,177,68,15,187,179,68,78,88,182,68,73,255,184,68,37,176,187,68,5,107,190,68,16,48,193,68,106,255,195,68,60,217,198,68,171,189,201,68,223,172,204,68,0,167,207,68,55,172,210,68,174,188,213,68,141,216,216,68,0,0,220,68,49,51,223,68,77,114,226,68,128,189,229,68,246,20,233,68,222,120,236,68,101,233,239,68,187,102,243,68,16,241,246,68,147,136,250,68,119,45,254,68,246,239,0,69,19,208,2,69,43,183,4,69,89,165,6,69,183,154,8,69,96,151,10,69,112,155,12,69,0,167,14,69,47,186,16,69,23,213,18,69,214,247,20,69,137,34,23,69,77,85,25,69,65,144,27,69,131,211,29,69,50,31,32,69,109,115,34,69,84,208,36,69,7,54,39,69,168,164,41,69,87,28,44,69,55,157,46,69,104,39,49,69,15,187,51,69,78,88,54,69,73,255,56,69,37,176,59,69,5,107,62,69,16,48,65,69,106,255,67,69,60,217,70,69,171,189,73,69,223,172,76,69,0,167,79,69,55,172,82,69,174,188,85,69,141,216,88,69,0,0,92,69,49,51,95,69,77,114,98,69,128,189,101,69,246,20,105,69,222,120,108,69,101,233,111,69,187,102,115,69,16,241,118,69,147,136,122,69,119,45,126,69,246,239,128,69,19,208,130,69,43,183,132,69,89,165,134,69,183,154,136,69,96,151,138,69,112,155,140,69,0,167,142,69,47,186,144,69,23,213,146,69,214,247,148,69,137,34,151,69,77,85,153,69,65,144,155,69,131,211,157,69,50,31,160,69,109,115,162,69,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,99,0,0,210,0,0,0,230,1,0,0,0,0,0,0,96,84,0,0,200,100,0,0,208,94,0,0,64,91,0,0,144,88,0,0,136,85,0,0,104,83,0,0,8,82,0,0,144,80,0,0,200,78,0,0,24,107,0,0,40,106,0,0,216,104,0,0,0,104,0,0,208,102,0,0,168,101,0,0,120,100,0,0,48,100,0,0,120,99,0,0,16,99,0,0,144,98,0,0,16,98,0,0,0,0,0,0,0,0,0,0,136,99,0,0,242,0,0,0,46,2,0,0,0,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,168,99,0,0,110,1,0,0,82,2,0,0,0,0,0,0,88,100,0,0,102,1,0,0,42,2,0,0,0,0,0,0,0,0,128,63,191,53,123,63,113,130,118,63,166,229,113,63,243,94,109,63,238,237,104,63,48,146,100,63,82,75,96,63,241,24,92,63,170,250,87,63,29,240,83,63,236,248,79,63,185,20,76,63,42,67,72,63,230,131,68,63,149,214,64,63,225,58,61,63,117,176,57,63,255,54,54,63,46,206,50,63,177,117,47,63,59,45,44,63,127,244,40,63,50,203,37,63,9,177,34,63,188,165,31,63,4,169,28,63,155,186,25,63,60,218,22,63,165,7,20,63,147,66,17,63,198,138,14,63,253,223,11,63,251,65,9,63,131,176,6,63,87,43,4,63,62,178,1,63,252,137,254,62,187,198,249,62,74,26,245,62,60,132,240,62,38,4,236,62,159,153,231,62,63,68,227,62,161,3,223,62,97,215,218,62,30,191,214,62,121,186,210,62,19,201,206,62,144,234,202,62,149,30,199,62,202,100,195,62,216,188,191,62,106,38,188,62,42,161,184,62,200,44,181,62,242,200,177,62,88,117,174,62,174,49,171,62,167,253,167,62,248,216,164,62,87,195,161,62,125,188,158,62,34,196,155,62,2,218,152,62,215,253,149,62,96,47,147,62,90,110,144,62,133,186,141,62,162,19,139,62,115,121,136,62,187,235,133,62,62,106,131,62,194,244,128,62,26,22,125,62,207,89,120,62,50,180,115,62,216,36,111,62,85,171,106,62,65,71,102,62,54,248,97,62,206,189,93,62,167,151,89,62,96,133,85,62,153,134,81,62,246,154,77,62,26,194,73,62,171,251,69,62,82,71,66,62,183,164,62,62,135,19,59,62,108,147,55,62,22,36,52,62,51,197,48,62,118,118,45,62,145,55,42,62,56,8,39,62,33,232,35,62,2,215,32,62,147,212,29,62,143,224,26,62,177,250,23,62,180,34,21,62,86,88,18,62,86,155,15,62,116,235,12,62,113,72,10,62,15,178,7,62,18,40,5,62,63,170,2,62,90,56,0,62,88,164,251,61,248,238,246,61,37,80,242,61,116,199,237,61,123,84,233,61,209,246,228,61,17,174,224,61,215,121,220,61,192,89,216,61,108,77,212,61,123,84,208,61,146,110,204,61,85,155,200,61,107,218,196,61,123,43,193,61,48,142,189,61,53,2,186,61,56,101,0,0,74,2,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0].concat([11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,200,101,0,0,34,0,0,0,14,1,0,0,0,0,0,0,24,103,0,0,216,1,0,0,92,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,254,255,254,255,254,255,254,255,254,255,253,255,253,255,253,255,252,255,252,255,252,255,251,255,251,255,250,255,250,255,250,255,249,255,249,255,248,255,248,255,247,255,247,255,246,255,246,255,245,255,245,255,244,255,243,255,243,255,242,255,242,255,241,255,240,255,240,255,239,255,238,255,237,255,237,255,236,255,235,255,234,255,234,255,233,255,232,255,231,255,230,255,230,255,229,255,228,255,227,255,226,255,225,255,224,255,223,255,222,255,221,255,220,255,219,255,218,255,217,255,216,255,215,255,214,255,213,255,212,255,211,255,210,255,209,255,208,255,207,255,205,255,204,255,203,255,202,255,201,255,199,255,198,255,197,255,196,255,195,255,193,255,192,255,191,255,189,255,188,255,187,255,186,255,184,255,183,255,181,255,180,255,179,255,177,255,176,255,174,255,173,255,172,255,170,255,169,255,167,255,166,255,164,255,163,255,161,255,160,255,158,255,157,255,155,255,154,255,152,255,150,255,149,255,147,255,146,255,144,255,142,255,141,255,139,255,137,255,136,255,134,255,132,255,131,255,129,255,127,255,126,255,124,255,122,255,120,255,119,255,117,255,115,255,113,255,111,255,110,255,108,255,106,255,104,255,102,255,100,255,99,255,97,255,95,255,93,255,91,255,89,255,87,255,85,255,83,255,81,255,80,255,78,255,76,255,74,255,72,255,70,255,68,255,66,255,64,255,62,255,60,255,58,255,56,255,54,255,51,255,49,255,47,255,45,255,43,255,41,255,39,255,37,255,35,255,33,255,31,255,28,255,26,255,24,255,22,255,20,255,18,255,16,255,13,255,11,255,9,255,7,255,5,255,2,255,0,255,254,254,252,254,249,254,247,254,245,254,243,254,240,254,238,254,236,254,234,254,231,254,229,254,227,254,224,254,222,254,220,254,217,254,215,254,213,254,210,254,208,254,206,254,203,254,201,254,199,254,196,254,194,254,192,254,189,254,187,254,184,254,182,254,180,254,177,254,175,254,172,254,170,254,167,254,165,254,163,254,160,254,158,254,155,254,153,254,150,254,148,254,145,254,143,254,140,254,138,254,135,254,133,254,130,254,128,254,125,254,123,254,120,254,118,254,115,254,113,254,110,254,108,254,105,254,103,254,100,254,98,254,95,254,93,254,90,254,88,254,85,254,82,254,80,254,77,254,75,254,72,254,70,254,67,254,64,254,62,254,59,254,57,254,54,254,51,254,49,254,46,254,44,254,41,254,38,254,36,254,33,254,31,254,28,254,25,254,23,254,20,254,17,254,15,254,12,254,10,254,7,254,4,254,2,254,255,253,252,253,250,253,247,253,245,253,242,253,239,253,237,253,234,253,231,253,229,253,226,253,223,253,221,253,218,253,215,253,213,253,210,253,207,253,205,253,202,253,199,253,197,253,194,253,191,253,189,253,186,253,183,253,181,253,178,253,175,253,173,253,170,253,167,253,165,253,162,253,159,253,157,253,154,253,151,253,149,253,146,253,143,253,141,253,138,253,135,253,133,253,130,253,127,253,125,253,122,253,119,253,117,253,114,253,111,253,109,253,106,253,103,253,101,253,98,253,96,253,93,253,90,253,88,253,85,253,82,253,80,253,77,253,74,253,72,253,69,253,66,253,64,253,61,253,59,253,56,253,53,253,51,253,48,253,45,253,43,253,40,253,38,253,35,253,32,253,30,253,27,253,24,253,22,253,19,253,17,253,14,253,11,253,9,253,6,253,4,253,1,253,255,252,252,252,249,252,247,252,244,252,242,252,239,252,237,252,234,252,231,252,229,252,226,252,224,252,221,252,219,252,216,252,214,252,211,252,209,252,206,252,204,252,201,252,199,252,196,252,194,252,191,252,189,252,186,252,184,252,181,252,179,252,176,252,174,252,171,252,169,252,166,252,164,252,161,252,159,252,157,252,154,252,152,252,149,252,147,252,144,252,142,252,140,252,137,252,135,252,132,252,130,252,128,252,125,252,123,252,121,252,118,252,116,252,113,252,111,252,109,252,106,252,104,252,102,252,100,252,97,252,95,252,93,252,90,252,88,252,86,252,83,252,81,252,79,252,77,252,74,252,72,252,70,252,68,252,66,252,63,252,61,252,59,252,57,252,55,252,52,252,50,252,48,252,46,252,44,252,42,252,39,252,37,252,35,252,33,252,31,252,29,252,27,252,25,252,22,252,20,252,18,252,16,252,14,252,12,252,10,252,8,252,6,252,4,252,2,252,0,252,254,251,252,251,250,251,248,251,246,251,244,251,242,251,240,251,238,251,236,251,234,251,233,251,231,251,229,251,227,251,225,251,223,251,221,251,219,251,218,251,216,251,214,251,212,251,210,251,209,251,207,251,205,251,203,251,201,251,200,251,198,251,196,251,195,251,193,251,191,251,189,251,188,251,186,251,184,251,183,251,181,251,179,251,178,251,176,251,175,251,173,251,171,251,170,251,168,251,167,251,165,251,164,251,162,251,161,251,159,251,158,251,156,251,155,251,153,251,152,251,150,251,149,251,147,251,146,251,145,251,143,251,142,251,140,251,139,251,138,251,136,251,135,251,134,251,132,251,131,251,130,251,129,251,127,251,126,251,125,251,124,251,122,251,121,251,120,251,119,251,118,251,117,251,115,251,114,251,113,251,112,251,111,251,110,251,109,251,108,251,107,251,106,251,105,251,104,251,103,251,102,251,101,251,100,251,99,251,98,251,97,251,96,251,95,251,94,251,93,251,93,251,92,251,91,251,90,251,89,251,88,251,88,251,87,251,86,251,85,251,85,251,84,251,83,251,83,251,82,251,81,251,81,251,80,251,79,251,79,251,78,251,78,251,77,251,76,251,76,251,75,251,75,251,74,251,74,251,73,251,73,251,73,251,72,251,72,251,71,251,71,251,71,251,70,251,70,251,70,251,69,251,69,251,69,251,69,251,68,251,68,251,68,251,68,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,68,251,68,251,68,251,68,251,68,251,69,251,69,251,69,251,70,251,70,251,70,251,71,251,71,251,72,251,72,251,72,251,73,251,73,251,74,251,74,251,75,251,75,251,76,251,76,251,77,251,78,251,78,251,79,251,80,251,80,251,81,251,82,251,82,251,83,251,84,251,85,251,85,251,86,251,87,251,88,251,89,251,90,251,91,251,92,251,93,251,93,251,94,251,95,251,96,251,98,251,99,251,100,251,101,251,102,251,103,251,104,251,105,251,106,251,108,251,109,251,110,251,111,251,113,251,114,251,115,251,117,251,118,251,119,251,121,251,122,251,124,251,125,251,127,251,128,251,130,251,131,251,133,251,134,251,136,251,137,251,139,251,141,251,142,251,144,251,146,251,147,251,149,251,151,251,153,251,155,251,156,251,158,251,160,251,162,251,164,251,166,251,168,251,170,251,172,251,174,251,176,251,178,251,180,251,182,251,184,251,186,251,188,251,191,251,193,251,195,251,197,251,200,251,202,251,204,251,206,251,209,251,211,251,214,251,216,251,218,251,221,251,223,251,226,251,228,251,231,251,233,251,236,251,239,251,241,251,244,251,247,251,249,251,252,251,255,251,2,252,4,252,7,252,10,252,13,252,16,252,19,252,22,252,25,252,27,252,30,252,33,252,37,252,40,252,43,252,46,252,49,252,52,252,55,252,58,252,62,252,65,252,68,252,71,252,75,252,78,252,81,252,85,252,88,252,92,252,95,252,99,252,102,252,106,252,109,252,113,252,116,252,120,252,124,252,127,252,131,252,135,252,138,252,142,252,146,252,150,252,154,252,158,252,161,252,165,252,169,252,173,252,177,252,181,252,185,252,189,252,193,252,198,252,202,252,206,252,210,252,214,252,218,252,223,252,227,252,231,252,236,252,240,252,244,252,249,252,253,252,2,253,6,253,11,253,15,253,20,253,24,253,29,253,34,253,38,253,43,253,48,253,53,253,57,253,62,253,67,253,72,253,77,253,82,253,86,253,91,253,96,253,101,253,106,253,112,253,117,253,122,253,127,253,132,253,137,253,142,253,148,253,153,253,158,253,164,253,169,253,174,253,180,253,185,253,191,253,196,253,202,253,207,253,213,253,218,253,224,253,230,253,235,253,241,253,247,253,253,253,2,254,8,254,14,254,20,254,26,254,32,254,38,254,44,254,50,254,56,254,62,254,68,254,74,254,80,254,87,254,93,254,99,254,105,254,112,254,118,254,124,254,131,254,137,254,144,254,150,254,157,254,163,254,170,254,176,254,183,254,190,254,196,254,203,254,210,254,217,254,223,254,230,254,237,254,244,254,251,254,2,255,9,255,16,255,23,255,30,255,37,255,44,255,51,255,58,255,66,255,73,255,80,255,87,255,95,255,102,255,110,255,117,255,124,255,132,255,139,255,147,255,155,255,162,255,170,255,178,255,185,255,193,255,201,255,209,255,216,255,224,255,232,255,240,255,248,255,0,0,8,0,16,0,24,0,32,0,41,0,49,0,58,0,66,0,75,0,83,0,92,0,100,0,109,0,118,0,127,0,136,0,145,0,154,0,163,0,172,0,182,0,191,0,200,0,210,0,219,0,229,0,238,0,248,0,2,1,12,1,21,1,31,1,41,1,51,1,61,1,71,1,82,1,92,1,102,1,113,1,123,1,133,1,144,1,155,1,165,1,176,1,187,1,197,1,208,1,219,1,230,1,241,1,252,1,8,2,19,2,30,2,41,2,53,2,64,2,76,2,87,2,99,2,110,2,122,2,134,2,146,2,157,2,169,2,181,2,193,2,205,2,217,2,230,2,242,2,254,2,10,3,23,3,35,3,48,3,60,3,73,3,86,3,98,3,111,3,124,3,137,3,149,3,162,3,175,3,188,3,202,3,215,3,228,3,241,3,254,3,12,4,25,4,39,4,52,4,66,4,79,4,93,4,107,4,120,4,134,4,148,4,162,4,176,4,190,4,204,4,218,4,232,4,246,4,4,5,18,5,33,5,47,5,62,5,76,5,90,5,105,5,120,5,134,5,149,5,164,5,178,5,193,5,208,5,223,5,238,5,253,5,12,6,27,6,42,6,57,6,72,6,88,6,103,6,118,6,134,6,149,6,165,6,180,6,196,6,211,6,227,6,243,6,2,7,18,7,34,7,50,7,66,7,82,7,98,7,114,7,130,7,146,7,162,7,178,7,194,7,211,7,227,7,243,7,4,8,20,8,36,8,53,8,69,8,86,8,103,8,119,8,136,8,153,8,170,8,186,8,203,8,220,8,237,8,254,8,15,9,32,9,49,9,66,9,83,9,101,9,118,9,135,9,152,9,170,9,187,9,205,9,222,9,239,9,1,10,19,10,36,10,54,10,71,10,89,10,107,10,125,10,142,10,160,10,178,10,196,10,214,10,232,10,250,10,12,11,30,11,48,11,66,11,85,11,103,11,121,11,139,11,158,11,176,11,194,11,213,11,231,11,250,11,12,12,31,12,49,12,68,12,87,12,105,12,124,12,143,12,161,12,180,12,199,12,218,12,237,12,0,13,19,13,38,13,57,13,76,13,95,13,114,13,133,13,152,13,171,13,190,13,210,13,229,13,248,13,11,14,31,14,50,14,70,14,89,14,109,14,128,14,148,14,167,14,187,14,206,14,226,14,245,14,9,15,29,15,49,15,68,15,88,15,108,15,128,15,148,15,167,15,187,15,207,15,227,15,247,15,11,16,31,16,51,16,71,16,92,16,112,16,132,16,152,16,172,16,192,16,213,16,233,16,253,16,18,17,38,17,58,17,79,17,99,17,119,17,140,17,160,17,181,17,201,17,222,17,243,17,7,18,28,18,48,18,69,18,90,18,110,18,131,18,152,18,172,18,193,18,214,18,235,18,0,19,21,19,41,19,62,19,83,19,104,19,125,19,146,19,167,19,188,19,209,19,230,19,251,19,16,20,37,20,58,20,79,20,101,20,122,20,143,20,164,20,185,20,207,20,228,20,249,20,14,21,36,21,57,21,78,21,100,21,121,21,142,21,164,21,185,21,206,21,228,21,249,21,15,22,36,22,58,22,79,22,101,22,122,22,144,22,165,22,187,22,209,22,230,22,252,22,17,23,39,23,61,23,82,23,104,23,126,23,147,23,169,23,191,23,213,23,234,23,0,24,22,24,44,24,65,24,87,24,109,24,131,24,153,24,174,24,196,24,218,24,240,24,6,25,28,25,50,25,72,25,93,25,115,25,137,25,159,25,181,25,203,25,225,25,247,25,13,26,35,26,57,26,79,26,101,26,123,26,145,26,167,26,189,26,211,26,233,26,255,26,22,27,44,27,66,27,88,27,110,27,132,27,154,27,176,27,198,27,220,27,243,27,9,28,31,28,53,28,75,28,97,28,120,28,142,28,164,28,186,28,208,28,230,28,253,28,19,29,41,29,63,29,85,29,107,29,130,29,152,29,174,29,196,29,219,29,241,29,7,30,29,30,51,30,74,30,96,30,118,30,140,30,162,30,185,30,207,30,229,30,251,30,18,31,40,31,62,31,84,31,106,31,129,31,151,31,173,31,195,31,218,31,240,31,6,32,28,32,50,32,73,32,95,32,117,32,139,32,161,32,184,32,206,32,228,32,250,32,16,33,39,33,61,33,83,33,105,33,127,33,149,33,172,33,194,33,216,33,238,33,4,34,26,34,48,34,71,34,93,34,115,34,137,34,159,34,181,34,203,34,225,34,247,34,14,35,36,35,58,35,80,35,102,35,124,35,146,35,168,35,190,35,212,35,234,35,0,36,22,36,44,36,66,36,88,36,110,36,132,36,154,36,176,36,198,36,220,36,242,36,7,37,29,37,51,37,73,37,95,37,117,37,139,37,161,37,181,37,204,37,226,37,248,37,14,38,35,38,56,38,78,38,101,38,123,38,144,38,165,38,187,38,208,38,231,38,253,38,18,39,39,39,61,39,84,39,104,39,126,39,148,39,168,39,191,39,212,39,233,39,255,39,20,40,43,40,63,40,85,40,106,40,128,40,149,40,170,40,191,40,213,40,234,40,0,41,21,41,42,41,64,41,85,41,106,41,127,41,148,41,170,41,191,41,212,41,232,41,254,41,20,42,40,42,62,42,82,42,104,42,124,42,146,42,166,42,187,42,207,42,230,42,250,42,15,43,35,43,56,43,76,43,99,43,119,43,140,43,160,43,181,43,201,43,223,43,243,43,8,44,28,44,49,44,69,44,90,44,110,44,130,44,151,44,172,44,193,44,213,44,234,44,254,44,18,45,39,45,58,45,79,45,99,45,120,45,140,45,160,45,180,45,200,45,221,45,241,45,4,46,25,46,45,46,63,46,84,46,104,46,124,46,144,46,164,46,184,46,204,46,222,46,243,46,7,47,27,47,47,47,65,47,86,47,105,47,125,47,144,47,163,47,183,47,203,47,222,47,241,47,5,48,24,48,44,48,63,48,82,48,102,48,120,48,139,48,160,48,178,48,197,48,216,48,236,48,254,48,18,49,36,49,55,49,74,49,93,49,111,49,131,49,150,49,168,49,187,49,206,49,224,49,243,49,6,50,23,50,42,50,60,50,79,50,98,50,116,50,134,50,153,50,171,50,189,50,208,50,226,50,244,50,6,51,24,51,42,51,60,51,78,51,96,51,114,51,132,51,149,51,168,51,185,51,202,51,221,51,238,51,0,52,18,52,35,52,53,52,71,52,87,52,105,52,123,52,139,52,157,52,174,52,192,52,209,52,226,52,244,52,4,53,21,53,39,53,55,53,73,53,89,53,105,53,123,53,139,53,156,53,173,53,190,53,207,53,223,53,240,53,255,53,16,54,33,54,49,54,66,54,82,54,99,54,115,54,131,54,147,54,162,54,179,54,195,54,211,54,227,54,243,54,2,55,19,55,35,55,50,55,66,55,81,55,97,55,112,55,128,55,143,55,159,55,174,55,190,55,205,55,221,55,236,55,250,55,10,56,25,56,40,56,55,56,70,56,84,56,99,56,114,56,129,56,144,56,158,56,173,56,187,56,202,56,217,56,231,56,246,56,3,57,18,57,33,57,46,57,61,57,76,57,89,57,104,57,117,57,131,57,145,57,160,57,172,57,186,57,201,57,214,57,227,57,241,57,254,57,12,58,26,58,39,58,52,58,65,58,79,58,92,58,105,58,118,58,131,58,144,58,156,58,169,58,183,58,195,58,208,58,219,58,233,58,246,58,2,59,14,59,27,59,39,59,51,59,63,59,76,59,88,59,101,59,112,59,124,59,136,59,148,59,160,59,172,59,183,59,195,59,206,59,217,59,229,59,241,59,252,59,7,60,19,60,30,60,41,60,52,60,63,60,73,60,86,60,96,60,107,60,118,60,129,60,139,60,149,60,160,60,170,60,180,60,192,60,202,60,212,60,222,60,232,60,242,60,253,60,7,61,17,61,26,61,36,61,46,61,56,61,65,61,75,61,84,61,93,61,103,61,113,61,122,61,131,61,140,61,149,61,158,61,167,61,176,61,185,61,194,61,202,61,211,61,220,61,227,61,237,61,245,61,254,61,5,62,14,62,22,62,31,62,38,62,46,62,54,62,62,62,69,62,77,62,85,62,92,62,101,62,108,62,116,62,123,62,130,62,137,62,143,62,151,62,158,62,166,62,172,62,180,62,186,62,192,62,199,62,205,62,213,62,220,62,225,62,232,62,237,62,244,62,250,62,0,63,5,63,12,63,18,63,23,63,30,63,35,63,41,63,46,63,52,63,57,63,63,63,68,63,73,63,78,63,83,63,88,63,92,63,97,63,102,63,107,63,111,63,116,63,119,63,125,63,129,63,134,63,137,63,141,63,146,63,150,63,154,63,157,63,162,63,165,63,169,63,171,63,176,63,179,63,181,63,186,63,189,63,192,63,194,63,198,63,201,63,203,63,207,63,209,63,212,63,214,63,217,63,219,63,221,63,223,63,226,63,229,63,230,63,232,63,233,63,236,63,238,63,238,63,241,63,242,63,243,63,245,63,246,63,248,63,249,63,249,63,251,63,251,63,252,63,253,63,253,63,253,63,254,63,255,63,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,255,63,254,63,253,63,253,63,253,63,252,63,251,63,251,63,249,63,249,63,248,63,246,63,245,63,243,63,242,63,241,63,238,63,238,63,236,63,233,63,232,63,230,63,229,63,226,63,223,63,221,63,219,63,217,63,214,63,212,63,209,63,207,63,203,63,201,63,198,63,194,63,192,63,189,63,186,63,181,63,179,63,176,63,171,63,169,63,165,63,162,63,157,63,154,63,150,63,146,63,141,63,137,63,134,63,129,63,125,63,119,63,116,63,111,63,107,63,102,63,97,63,92,63,88,63,83,63,78,63,73,63,68,63,63,63,57,63,52,63,46,63,41,63,35,63,30,63,23,63,18,63,12,63,5,63,0,63,250,62,244,62,237,62,232,62,225,62,220,62,213,62,205,62,199,62,192,62,186,62,180,62,172,62,166,62,158,62,151,62,143,62,137,62,130,62,123,62,116,62,108,62,101,62,92,62,85,62,77,62,69,62,62,62,54,62,46,62,38,62,31,62,22,62,14,62,5,62,254,61,245,61,237,61,227,61,220,61,211,61,202,61,194,61,185,61,176,61,167,61,158,61,149,61,140,61,131,61,122,61,113,61,103,61,93,61,84,61,75,61,65,61,56,61,46,61,36,61,26,61,17,61,7,61,253,60,242,60,232,60,222,60,212,60,202,60,192,60,180,60,170,60,160,60,149,60,139,60,129,60,118,60,107,60,96,60,86,60,73,60,63,60,52,60,41,60,30,60,19,60,7,60,252,59,241,59,229,59,217,59,206,59,195,59,183,59,172,59,160,59,148,59,136,59,124,59,112,59,101,59,88,59,76,59,63,59,51,59,39,59,27,59,14,59,2,59,246,58,233,58,219,58,208,58,195,58,183,58,169,58,156,58,144,58,131,58,118,58,105,58,92,58,79,58,65,58,52,58,39,58,26,58,12,58,254,57,241,57,227,57,214,57,201,57,186,57,172,57,160,57,145,57,131,57,117,57,104,57,89,57,76,57,61,57,46,57,33,57,18,57,3,57,246,56,231,56,217,56,202,56,187,56,173,56,158,56,144,56,129,56,114,56,99,56,84,56,70,56,55,56,40,56,25,56,10,56,250,55,236,55,221,55,205,55,190,55,174,55,159,55,143,55,128,55,112,55,97,55,81,55,66,55,50,55,35,55,19,55,2,55,243,54,227,54,211,54,195,54,179,54,162,54,147,54,131,54,115,54,99,54,82,54,66,54,49,54,33,54,16,54,255,53,240,53,223,53,207,53,190,53,173,53,156,53,139,53,123,53,105,53,89,53,73,53,55,53,39,53,21,53,4,53,244,52,226,52,209,52,192,52,174,52,157,52,139,52,123,52,105,52,87,52,71,52,53,52,35,52,18,52,0,52,238,51,221,51,202,51,185,51,168,51,149,51,132,51,114,51,96,51,78,51,60,51,42,51,24,51,6,51,244,50,226,50,208,50,189,50,171,50,153,50,134,50,116,50,98,50,79,50,60,50,42,50,23,50,6,50,243,49,224,49,206,49,187,49,168,49,150,49,131,49,111,49,93,49,74,49,55,49,36,49,18,49,254,48,236,48,216,48,197,48,178,48,160,48,139,48,120,48,102,48,82,48,63,48,44,48,24,48,5,48,241,47,222,47,203,47,183,47,163,47,144,47,125,47,105,47,86,47,65,47,47,47,27,47,7,47,243,46,222,46,204,46,184,46,164,46,144,46,124,46,104,46,84,46,63,46,45,46,25,46,4,46,241,45,221,45,200,45,180,45,160,45,140,45,120,45,99,45,79,45,58,45,39,45,18,45,254,44,234,44,213,44,193,44,172,44,151,44,130,44,110,44,90,44,69,44,49,44,28,44,8,44,243,43,223,43,201,43,181,43,160,43,140,43,119,43,99,43,76,43,56,43,35,43,15,43,250,42,230,42,207,42,187,42,166,42,146,42,124,42,104,42,82,42,62,42,40,42,20,42,254,41,232,41,212,41,191,41,170,41,148,41,127,41,106,41,85,41,64,41,42,41,21,41,0,41,234,40,213,40,191,40,170,40,149,40,128,40,106,40,85,40,63,40,43,40,20,40,255,39,233,39,212,39,191,39,168,39,148,39,126,39,104,39,84,39,61,39,39,39,18,39,253,38,231,38,208,38,187,38,165,38,144,38,123,38,101,38,78,38,56,38,35,38,14,38,248,37,226,37,204,37,181,37,161,37,139,37,117,37,95,37,73,37,51,37,29,37,7,37,242,36,220,36,198,36,176,36,154,36,132,36,110,36,88,36,66,36,44,36,22,36,0,36,234,35,212,35,190,35,168,35,146,35,124,35,102,35,80,35,58,35,36,35,14,35,247,34,225,34,203,34,181,34,159,34,137,34,115,34,93,34,71,34,48,34,26,34,4,34,238,33,216,33,194,33,172,33,149,33,127,33,105,33,83,33,61,33,39,33,16,33,250,32,228,32,206,32,184,32,161,32,139,32,117,32,95,32,73,32,50,32,28,32,6,32,240,31,218,31,195,31,173,31,151,31,129,31,106,31,84,31,62,31,40,31,18,31,251,30,229,30,207,30,185,30,162,30,140,30,118,30,96,30,74,30,51,30,29,30,7,30,241,29,219,29,196,29,174,29,152,29,130,29,107,29,85,29,63,29,41,29,19,29,253,28,230,28,208,28,186,28,164,28,142,28,120,28,97,28,75,28,53,28,31,28,9,28,243,27,220,27,198,27,176,27,154,27,132,27,110,27,88,27,66,27,44,27,22,27,255,26,233,26,211,26,189,26,167,26,145,26,123,26,101,26,79,26,57,26,35,26,13,26,247,25,225,25,203,25,181,25,159,25,137,25,115,25,93,25,72,25,50,25,28,25,6,25,240,24,218,24,196,24,174,24,153,24,131,24,109,24,87,24,65,24,44,24,22,24,0,24,234,23,213,23,191,23,169,23,147,23,126,23,104,23,82,23,61,23,39,23,17,23,252,22,230,22,209,22,187,22,165,22,144,22,122,22,101,22,79,22,58,22,36,22,15,22,249,21,228,21,206,21,185,21,164,21,142,21,121,21,100,21,78,21,57,21,36,21,14,21,249,20,228,20,207,20,185,20,164,20,143,20,122,20,101,20,79,20,58,20,37,20,16,20,251,19,230,19,209,19,188,19,167,19,146,19,125,19,104,19,83,19,62,19,41,19,21,19,0,19,235,18,214,18,193,18,172,18,152,18,131,18,110,18,90,18,69,18,48,18,28,18,7,18,243,17,222,17,201,17,181,17,160,17,140,17,119,17,99,17,79,17,58,17,38,17,18,17,253,16,233,16,213,16,192,16,172,16,152,16,132,16,112,16,92,16,71,16,51,16,31,16,11,16,247,15,227,15,207,15,187,15,167,15,148,15,128,15,108,15,88,15,68,15,49,15,29,15,9,15,245,14,226,14,206,14,187,14,167,14,148,14,128,14,109,14,89,14,70,14,50,14,31,14,11,14,248,13,229,13,210,13,190,13,171,13,152,13,133,13,114,13,95,13,76,13,57,13,38,13,19,13,0,13,237,12,218,12,199,12,180,12,161,12,143,12,124,12,105,12,87,12,68,12,49,12,31,12,12,12,250,11,231,11,213,11,194,11,176,11,158,11,139,11,121,11,103,11,85,11,66,11,48,11,30,11,12,11,250,10,232,10,214,10,196,10,178,10,160,10,142,10,125,10,107,10,89,10,71,10,54,10,36,10,19,10,1,10,239,9,222,9,205,9,187,9,170,9,152,9,135,9,118,9,101,9,83,9,66,9,49,9,32,9,15,9,254,8,237,8,220,8,203,8,186,8,170,8,153,8,136,8,119,8,103,8,86,8,69,8,53,8,36,8,20,8,4,8,243,7,227,7,211,7,194,7,178,7,162,7,146,7,130,7,114,7,98,7,82,7,66,7,50,7,34,7,18,7,2,7,243,6,227,6,211,6,196,6,180,6,165,6,149,6,134,6,118,6,103,6,88,6,72,6,57,6,42,6,27,6,12,6,253,5,238,5,223,5,208,5,193,5,178,5,164,5,149,5,134,5,120,5,105,5,90,5,76,5,62,5,47,5,33,5,18,5,4,5,246,4,232,4,218,4,204,4,190,4,176,4,162,4,148,4,134,4,120,4,107,4,93,4,79,4,66,4,52,4,39,4,25,4,12,4,254,3,241,3,228,3,215,3,202,3,188,3,175,3,162,3,149,3,137,3,124,3,111,3,98,3,86,3,73,3,60,3,48,3,35,3,23,3,10,3,254,2,242,2,230,2,217,2,205,2,193,2,181,2,169,2,157,2,146,2,134,2,122,2,110,2,99,2,87,2,76,2,64,2,53,2,41,2,30,2,19,2,8,2,252,1,241,1,230,1,219,1,208,1,197,1,187,1,176,1,165,1,155,1,144,1,133,1,123,1,113,1,102,1,92,1,82,1,71,1,61,1,51,1,41,1,31,1,21,1,12,1,2,1,248,0,238,0,229,0,219,0,210,0,200,0,191,0,182,0,172,0,163,0,154,0,145,0,136,0,127,0,118,0,109,0,100,0,92,0,83,0,75,0,66,0,58,0,49,0,41,0,32,0,24,0,16,0,8,0,0,0,248,255,240,255,232,255,224,255,216,255,209,255,201,255,193,255,185,255,178,255,170,255,162,255,155,255,147,255,139,255,132,255,124,255,117,255,110,255,102,255,95,255,87,255,80,255,73,255,66,255,58,255,51,255,44,255,37,255,30,255,23,255,16,255,9,255,2,255,251,254,244,254,237,254,230,254,223,254,217,254,210,254,203,254,196,254,190,254,183,254,176,254,170,254,163,254,157,254,150,254,144,254,137,254,131,254,124,254,118,254,112,254,105,254,99,254,93,254,87,254,80,254,74,254,68,254,62,254,56,254,50,254,44,254,38,254,32,254,26,254,20,254,14,254,8,254,2,254,253,253,247,253,241,253,235,253,230,253,224,253,218,253,213,253,207,253,202,253,196,253,191,253,185,253,180,253,174,253,169,253,164,253,158,253,153,253,148,253,142,253,137,253,132,253,127,253,122,253,117,253,112,253,106,253,101,253,96,253,91,253,86,253,82,253,77,253,72,253,67,253,62,253,57,253,53,253,48,253,43,253,38,253,34,253,29,253,24,253,20,253,15,253,11,253,6,253,2,253,253,252,249,252,244,252,240,252,236,252,231,252,227,252,223,252,218,252,214,252,210,252,206,252,202,252,198,252,193,252,189,252,185,252,181,252,177,252,173,252,169,252,165,252,161,252,158,252,154,252,150,252,146,252,142,252,138,252,135,252,131,252,127,252,124,252,120,252,116,252,113,252,109,252,106,252,102,252,99,252,95,252,92,252,88,252,85,252,81,252,78,252,75,252,71,252,68,252,65,252,62,252,58,252,55,252,52,252,49,252,46,252,43,252,40,252,37,252,33,252,30,252,27,252,25,252,22,252,19,252,16,252,13,252,10,252,7,252,4,252,2,252,255,251,252,251,249,251,247,251,244,251,241,251,239,251,236,251,233,251,231,251,228,251,226,251,223,251,221,251,218,251,216,251,214,251,211,251,209,251,206,251,204,251,202,251,200,251,197,251,195,251,193,251,191,251,188,251,186,251,184,251,182,251,180,251,178,251,176,251,174,251,172,251,170,251,168,251,166,251,164,251,162,251,160,251,158,251,156,251,155,251,153,251,151,251,149,251,147,251,146,251,144,251,142,251,141,251,139,251,137,251,136,251,134,251,133,251,131,251,130,251,128,251,127,251,125,251,124,251,122,251,121,251,119,251,118,251,117,251,115,251,114,251,113,251,111,251,110,251,109,251,108,251,106,251,105,251,104,251,103,251,102,251,101,251,100,251,99,251,98,251,96,251,95,251,94,251,93,251,93,251,92,251,91,251,90,251,89,251,88,251,87,251,86,251,85,251,85,251,84,251,83,251,82,251,82,251,81,251,80,251,80,251,79,251,78,251,78,251,77,251,76,251,76,251,75,251,75,251,74,251,74,251,73,251,73,251,72,251,72,251,72,251,71,251,71,251,70,251,70,251,70,251,69,251,69,251,69,251,68,251,68,251,68,251,68,251,68,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,68,251,68,251,68,251,68,251,69,251,69,251,69,251,69,251,70,251,70,251,70,251,71,251,71,251,71,251,72,251,72,251,73,251,73,251,73,251,74,251,74,251,75,251,75,251,76,251,76,251,77,251,78,251,78,251,79,251,79,251,80,251,81,251,81,251,82,251,83,251,83,251,84,251,85,251,85,251,86,251,87,251,88,251,88,251,89,251,90,251,91,251,92,251,93,251,93,251,94,251,95,251,96,251,97,251,98,251,99,251,100,251,101,251,102,251,103,251,104,251,105,251,106,251,107,251,108,251,109,251,110,251,111,251,112,251,113,251,114,251,115,251,117,251,118,251,119,251,120,251,121,251,122,251,124,251,125,251,126,251,127,251,129,251,130,251,131,251,132,251,134,251,135,251,136,251,138,251,139,251,140,251,142,251,143,251,145,251,146,251,147,251,149,251,150,251,152,251,153,251,155,251,156,251,158,251,159,251,161,251,162,251,164,251,165,251,167,251,168,251,170,251,171,251,173,251,175,251,176,251,178,251,179,251,181,251,183,251,184,251,186,251,188,251,189,251,191,251,193,251,195,251,196,251,198,251,200,251,201,251,203,251,205,251,207,251,209,251,210,251,212,251,214,251,216,251,218,251,219,251,221,251,223,251,225,251,227,251,229,251,231,251,233,251,234,251,236,251,238,251,240,251,242,251,244,251,246,251,248,251,250,251,252,251,254,251,0,252,2,252,4,252,6,252,8,252,10,252,12,252,14,252,16,252,18,252,20,252,22,252,25,252,27,252,29,252,31,252,33,252,35,252,37,252,39,252,42,252,44,252,46,252,48,252,50,252,52,252,55,252,57,252,59,252,61,252,63,252,66,252,68,252,70,252,72,252,74,252,77,252,79,252,81,252,83,252,86,252,88,252,90,252,93,252,95,252,97,252,100,252,102,252,104,252,106,252,109,252,111,252,113,252,116,252,118,252,121,252,123,252,125,252,128,252,130,252,132,252,135,252,137,252,140,252,142,252,144,252,147,252,149,252,152,252,154,252,157,252,159,252,161,252,164,252,166,252,169,252,171,252,174,252,176,252,179,252,181,252,184,252,186,252,189,252,191,252,194,252,196,252,199,252,201,252,204,252,206,252,209,252,211,252,214,252,216,252,219,252,221,252,224,252,226,252,229,252,231,252,234,252,237,252,239,252,242,252,244,252,247,252,249,252,252,252,255,252,1,253,4,253,6,253,9,253,11,253,14,253,17,253,19,253,22,253,24,253,27,253,30,253,32,253,35,253,38,253,40,253,43,253,45,253,48,253,51,253,53,253,56,253,59,253,61,253,64,253,66,253,69,253,72,253,74,253,77,253,80,253,82,253,85,253,88,253,90,253,93,253,96,253,98,253,101,253,103,253,106,253,109,253,111,253,114,253,117,253,119,253,122,253,125,253,127,253,130,253,133,253,135,253,138,253,141,253,143,253,146,253,149,253,151,253,154,253,157,253,159,253,162,253,165,253,167,253,170,253,173,253,175,253,178,253,181,253,183,253,186,253,189,253,191,253,194,253,197,253,199,253,202,253,205,253,207,253,210,253,213,253,215,253,218,253,221,253,223,253,226,253,229,253,231,253,234,253,237,253,239,253,242,253,245,253,247,253,250,253,252,253,255,253,2,254,4,254,7,254,10,254,12,254,15,254,17,254,20,254,23,254,25,254,28,254,31,254,33,254,36,254,38,254,41,254,44,254,46,254,49,254,51,254,54,254,57,254,59,254,62,254,64,254,67,254,70,254,72,254,75,254,77,254,80,254,82,254,85,254,88,254,90,254,93,254,95,254,98,254,100,254,103,254,105,254,108,254,110,254,113,254,115,254,118,254,120,254,123,254,125,254,128,254,130,254,133,254,135,254,138,254,140,254,143,254,145,254,148,254,150,254,153,254,155,254,158,254,160,254,163,254,165,254,167,254,170,254,172,254,175,254,177,254,180,254,182,254,184,254,187,254,189,254,192,254,194,254,196,254,199,254,201,254,203,254,206,254,208,254,210,254,213,254,215,254,217,254,220,254,222,254,224,254,227,254,229,254,231,254,234,254,236,254,238,254,240,254,243,254,245,254,247,254,249,254,252,254,254,254,0,255,2,255,5,255,7,255,9,255,11,255,13,255,16,255,18,255,20,255,22,255,24,255,26,255,28,255,31,255,33,255,35,255,37,255,39,255,41,255,43,255,45,255,47,255,49,255,51,255,54,255,56,255,58,255,60,255,62,255,64,255,66,255,68,255,70,255,72,255,74,255,76,255,78,255,80,255,81,255,83,255,85,255,87,255,89,255,91,255,93,255,95,255,97,255,99,255,100,255,102,255,104,255,106,255,108,255,110,255,111,255,113,255,115,255,117,255,119,255,120,255,122,255,124,255,126,255,127,255,129,255,131,255,132,255,134,255,136,255,137,255,139,255,141,255,142,255,144,255,146,255,147,255,149,255,150,255,152,255,154,255,155,255,157,255,158,255,160,255,161,255,163,255,164,255,166,255,167,255,169,255,170,255,172,255,173,255,174,255,176,255,177,255,179,255,180,255,181,255,183,255,184,255,186,255,187,255,188,255,189,255,191,255,192,255,193,255,195,255,196,255,197,255,198,255,199,255,201,255,202,255,203,255,204,255,205,255,207,255,208,255,209,255,210,255,211,255,212,255,213,255,214,255,215,255,216,255,217,255,218,255,219,255,220,255,221,255,222,255,223,255,224,255,225,255,226,255,227,255,228,255,229,255,230,255,230,255,231,255,232,255,233,255,234,255,234,255,235,255,236,255,237,255,237,255,238,255,239,255,240,255,240,255,241,255,242,255,242,255,243,255,243,255,244,255,245,255,245,255,246,255,246,255,247,255,247,255,248,255,248,255,249,255,249,255,250,255,250,255,250,255,251,255,251,255,252,255,252,255,252,255,253,255,253,255,253,255,254,255,254,255,254,255,254,255,254,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,0,3,2,4,5,6,7,8,0,4,3,5,2,6,7,8,0,5,4,6,2,3,7,8,0,6,5,7,2,3,4,8,0,7,6,8,2,3,4,5,0,8,7,6,2,3,4,5,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,30,0,0,0,60,0,0,0,120,0,0,0,248,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,30,0,0,0,60,0,0,0,120,0,0,0,240,0,0,0,240,1,0,0,240,3,0,0,240,7,0,0,240,15,0,0,240,31,0,0,240,63,0,0,240,127,0,0,240,255,0,0,0,4,4,4,8,8,8,16,16,16,32,32,32,64,64,64,240,105,0,0,64,1,0,0,90,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,20,0,0,0,21,0,0,0,21,0,0,0,22,0,0,0,22,0,0,0,23,0,0,0,23,0,0,0,24,0,0,0,24,0,0,0,25,0,0,0,25,0,0,0,26,0,0,0,26,0,0,0,27,0,0,0,27,0,0,0,28,0,0,0,28,0,0,0,29,0,0,0,29,0,0,0,30,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,64,0,0,0,65,0,0,0,67,0,0,0,69,0,0,0,71,0,0,0,73,0,0,0,75,0,0,0,77,0,0,0,79,0,0,0,81,0,0,0,83,0,0,0,85,0,0,0,87,0,0,0,89,0,0,0,91,0,0,0,93,0,0,0,96,0,0,0,98,0,0,0,100,0,0,0,102,0,0,0,104,0,0,0,106,0,0,0,108,0,0,0,110,0,0,0,112,0,0,0,114,0,0,0,116,0,0,0,118,0,0,0,120,0,0,0,122,0,0,0,124,0,0,0,126,0,0,0,129,0,0,0,131,0,0,0,135,0,0,0,139,0,0,0,143,0,0,0,147,0,0,0,151,0,0,0,155,0,0,0,160,0,0,0,164,0,0,0,168,0,0,0,172,0,0,0,176,0,0,0,180,0,0,0,184,0,0,0,188,0,0,0,193,0,0,0,197,0,0,0,201,0,0,0,205,0,0,0,209,0,0,0,213,0,0,0,217,0,0,0,221,0,0,0,226,0,0,0,230,0,0,0,234,0,0,0,238,0,0,0,242,0,0,0,246,0,0,0,250,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,48,107,0,0,50,0,0,0,26,2,0,0,0,0,0,0,176,107,0,0,168,1,0,0,148,0,0,0,0,0,0,0,32,79,0,0,76,2,0,0,166,1,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,0,25,49,71,90,106,117,125,127,125,117,106,90,71,49,25,0,231,207,185,166,150,139,131,129,131,139,150,166,185,207,231,128,136,144,152,160,168,176,184,192,200,208,216,224,232,240,248,0,8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,84,104,101,32,80,108,97,121,101,114,32,54,46,49,97,0,84,104,101,32,80,108,97,121,101,114,32,52,46,120,0,0,78,111,105,115,101,112,97,99,107,101,114,32,118,51,0,0,78,111,105,115,101,112,97,99,107,101,114,32,118,50,0,0,97,118,97,105,108,97,98,108,101,91,121,93,32,61,61,32,48,0,0,0,0,0,0,0,78,111,105,115,101,80,97,99,107,101,114,32,118,49,0,0,78,111,118,111,116,114,97,100,101,32,80,97,99,107,101,114,0,0,0,0,0,0,0,0,78,111,105,115,101,82,117,110,110,101,114,0,0,0,0,0,42,46,73,78,70,79,0,0,77,111,100,117,108,101,32,80,114,111,116,101,99,116,111,114,0,0,0,0,0,0,0,0,75,101,102,114,101,110,115,32,83,111,117,110,100,32,77,97,99,104,105,110,101,0,0,0,67,104,105,112,84,114,97,99,107,101,114,0,0,0,0,0,72,111,114,110,101,116,32,80,97,99,107,101,114,0,0,0,65,109,117,115,105,99,32,65,100,108,105,98,32,84,114,97,99,107,101,114,0,0,0,0,117,110,107,110,111,119,110,32,40,37,48,52,120,41,0,0,72,101,97,116,115,101,101,107,101,114,32,49,46,48,0,0,71,97,109,101,32,77,117,115,105,99,32,67,114,101,97,116,111,114,0,0,0,0,0,0,70,117,122,122,97,99,32,80,97,99,107,101,114,0,0,0,122,105,82,67,79,78,105,97,0,0,0,0,0,0,0,0,70,117,99,104,115,32,84,114,97,99,107,101,114,0,0,0,79,75,84,65,83,79,78,71,0,0,0,0,0,0,0,0,70,67,45,77,32,80,97,99,107,101,114,0,0,0,0,0,70,65,48,52,0,0,0,0,69,117,114,101,107,97,32,80,97,99,107,101,114,0,0,0,68,105,103,105,116,97,108,32,73,108,108,117,115,105,111,110,115,0,0,0,0,0,0,0,73,83,0,0,0,0,0,0,65,67,49,68,32,80,97,99,107,101,114,0,0,0,0,0])
.concat([101,118,101,110,116,45,62,110,111,116,101,32,60,61,32,49,48,55,32,124,124,32,101,118,101,110,116,45,62,110,111,116,101,32,61,61,32,88,77,80,95,75,69,89,95,79,70,70,0,0,0,0,0,0,0,0,79,112,101,110,77,80,84,32,49,46,49,55,43,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,49,46,51,0,83,69,81,85,0,0,0,0,67,111,109,112,111,115,101,114,32,54,54,57,0,0,0,0,109,97,112,112,46,112,99,120,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,42,46,100,111,99,0,0,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,32,0,0,0,0,0,0,0,66,101,82,111,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,0,0,0,65,114,99,104,105,118,101,0,0,0,0,0,0,0,0,0,83,66,79,68,0,0,0,0,84,68,90,52,0,0,0,0,80,65,0,0,0,0,0,0,89,90,0,0,0,0,0,0,99,104,97,110,110,101,108,32,37,100,58,32,37,48,50,120,32,37,48,50,120,10,0,0,98,91,48,93,32,61,61,32,39,76,39,32,38,38,32,98,91,49,93,32,61,61,32,39,68,39,32,38,38,32,98,91,50,93,32,61,61,32,39,83,39,32,38,38,32,98,91,51,93,32,61,61,32,39,83,39,0,0,0,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,83,84,49,46,51,32,77,111,100,117,108,101,73,78,70,79,0,0,0,0,0,0,0,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,62,32,48,0,0,0,0,0,80,76,69,78,0,0,0,0,111,108,100,99,111,100,101,58,45,49,32,99,111,100,101,58,37,105,10,0,0,0,0,0,116,97,108,111,112,97,97,46,112,99,120,0,0,0,0,0,100,115,116,32,62,32,111,114,103,100,115,116,0,0,0,0,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,32,61,61,32,48,0,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,0,0,0,0,0,0,0,0,42,46,68,111,99,0,0,0,117,110,122,105,112,58,32,101,114,114,111,114,32,105,110,32,98,105,116,115,116,114,101,97,109,32,114,101,97,100,105,110,103,32,105,110,32,108,105,116,101,114,97,108,32,99,111,100,101,32,108,101,110,103,116,104,32,37,100,10,0,0,0,0,37,115,32,88,77,32,37,100,46,37,48,50,100,0,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,83,81,83,72,0,0,0,0,80,66,79,68,0,0,0,0,67,68,56,49,0,0,0,0,73,73,0,0,0,0,0,0,69,112,105,99,32,77,101,103,97,71,97,109,101,115,32,77,65,83,73,32,80,83,77,0,101,118,101,110,116,45,62,118,111,108,32,60,61,32,54,53,0,0,0,0,0,0,0,0,67,104,105,98,105,32,84,114,97,99,107,101,114,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,49,46,50,0,68,105,103,105,116,97,108,32,84,114,97,99,107,101,114,32,68,84,77,0,0,0,0,0,68,105,103,105,66,111,111,115,116,101,114,32,80,114,111,32,37,100,46,37,48,50,120,32,68,66,77,48,0,0,0,0,80,78,85,77,0,0,0,0,85,110,97,98,108,101,32,116,111,32,115,101,116,32,51,50,48,120,50,48,48,32,118,105,100,101,111,58,32,37,115,10,0,0,0,0,0,0,0,0,108,101,110,32,33,61,32,78,79,95,67,79,68,69,0,0,84,77,80,68,73,82,0,0,42,46,68,79,67,0,0,0,111,108,100,32,77,111,100,80,108,117,103,32,84,114,97,99,107,101,114,0,0,0,0,0,77,65,83,95,85,84,114,97,99,107,95,86,48,48,48,0,79,112,101,110,77,80,84,32,37,100,46,37,48,50,120,0,70,97,115,116,32,84,114,97,99,107,101,114,32,73,73,0,88,80,75,70,0,0,0,0,80,65,84,84,0,0,0,0,69,112,105,99,32,71,97,109,101,115,32,85,77,88,0,0,67,68,54,49,0,0,0,0,108,105,98,120,109,112,58,32,99,97,110,39,116,32,111,112,101,110,32,115,97,109,112,108,101,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,85,108,116,114,97,32,84,114,97,99,107,101,114,0,0,0,70,69,0,0,0,0,0,0,83,105,110,97,114,105,97,32,80,83,77,0,0,0,0,0,101,118,101,110,116,45,62,105,110,115,32,60,61,32,49,48,48,0,0,0,0,0,0,0,84,67,66,32,84,114,97,99,107,101,114,0,0,0,0,0,67,72,66,73,0,0,0,0,82,69,65,68,77,69,0,0,68,105,103,105,116,97,108,32,83,121,109,112,104,111,110,121,0,0,0,0,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,53,46,48,0,83,84,49,46,50,32,77,111,100,117,108,101,73,78,70,79,0,0,0,0,0,0,0,0,68,65,73,84,0,0,0,0,83,84,77,73,75,32,48,46,50,0,0,0,0,0,0,0,86,69,78,86,0,0,0,0,77,76,69,78,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,50,0,0,0,0,0,0,0,0,83,108,97,109,116,105,108,116,0,0,0,0,0,0,0,0,84,117,114,104,97,32,111,110,32,112,111,114,116,116,105,97,32,97,118,97,116,97,0,0,83,111,117,110,100,116,114,97,99,107,101,114,0,0,0,0,83,111,117,110,100,70,88,32,118,49,46,51,47,50,46,48,0,0,0,0,0,0,0,0,65,68,80,67,77,0,0,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,91,120,93,32,61,61,32,99,111,100,101,0,0,83,52,48,52,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,51,0,0,0,0,0,0,0,0,42,46,110,102,111,0,0,0,82,101,97,108,32,84,114,97,99,107,101,114,0,0,0,0,70,97,115,116,84,114,97,99,107,101,114,32,118,32,50,46,48,48,0,0,0,0,0,0,85,108,116,114,97,32,84,114,97,99,107,101,114,32,37,115,32,85,76,84,32,86,37,48,52,100,0,0,0,0,0,0,83,67,82,77,0,0,0,0,82,101,97,108,105,116,121,32,65,100,108,105,98,32,84,114,97,99,107,101,114,0,0,0,37,115,0,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,82,84,83,77,0,0,0,0,112,114,111,119,105,122,97,114,100,0,0,0,0,0,0,0,80,111,108,121,32,84,114,97,99,107,101,114,0,0,0,0,80,76,69,78,0,0,0,0,80,80,50,48,0,0,0,0,56,67,72,78,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,51,0,0,0,0,77,77,68,49,0,0,0,0,114,98,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,83,116,117,100,105,111,0,0,0,0,0,0,0,80,69,0,0,0,0,0,0,80,66,79,68,0,0,0,0,90,101,110,32,80,97,99,107,101,114,0,0,0,0,0,0,101,118,101,110,116,45,62,110,111,116,101,32,60,61,32,49,49,57,32,124,124,32,101,118,101,110,116,45,62,110,111,116,101,32,61,61,32,88,77,80,95,75,69,89,95,79,70,70,0,0,0,0,0,0,0,0,88,65,78,78,32,80,97,99,107,101,114,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,53,0,0,87,97,110,116,111,110,32,80,97,99,107,101,114,0,0,0,85,110,105,99,32,84,114,97,99,107,101,114,32,50,0,0,117,110,107,110,111,119,110,32,101,102,102,101,99,116,32,37,48,50,120,32,37,48,50,120,10,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,101,102,102,101,99,116,32,37,48,50,120,32,37,48,50,120,10,0,0,0,0,0,0,0,37,115,37,115,46,97,115,0,68,65,80,84,0,0,0,0,83,77,80,68,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,0,0,0,0,83,77,80,76,0,0,0,0,84,114,97,99,107,101,114,32,80,97,99,107,101,114,32,118,51,0,0,0,0,0,0,0,65,78,65,77,0,0,0,0,84,105,116,97,110,105,99,115,32,80,108,97,121,101,114,0,84,104,101,32,80,108,97,121,101,114,32,53,46,48,97,0,84,104,101,32,68,97,114,107,32,68,101,109,111,110,0,0,85,110,97,98,108,101,32,116,111,32,105,110,105,116,32,83,68,76,58,32,37,115,10,0,83,116,97,114,116,114,101,107,107,101,114,32,80,97,99,107,101,114,0,0,0,0,0,0,83,75,89,84,32,80,97,99,107,101,114,0,0,0,0,0,80,114,111,114,117,110,110,101,114,32,50,46,48,0,0,0,80,114,111,114,117,110,110,101,114,32,49,46,48,0,0,0,114,98,0,0,0,0,0,0,107,32,61,61,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,40,117,105,110,116,56,32,42,41,98,115,45,62,115,114,99,32,62,61,32,98,115,45,62,111,114,103,115,114,99,0,0,42,46,78,70,79,0,0,0,77,69,68,50,88,77,32,98,121,32,74,46,80,121,110,110,111,110,101,0,0,0,0,0,49,46,54,0,0,0,0,0,79,107,116,97,108,121,122,101,114,0,0,0,0,0,0,0,33,83,99,114,101,97,109,33,0,0,0,0,0,0,0,0,33,83,99,114,101,97,109,33,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,0,76,105,113,117,105,100,32,84,114,97,99,107,101,114,32,78,79,0,0,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,53,0,0,82,84,73,78,0,0,0,0,37,115,0,0,0,0,0,0,80,84,68,84,0,0,0,0,77,117,108,116,105,116,114,97,99,107,101,114,0,0,0,0,83,76,69,78,0,0,0,0,117,110,109,111,51,32,45,115,32,34,37,115,34,32,83,84,68,79,85,84,0,0,0,0,54,67,72,78,0,0,0,0,77,77,68,51,0,0,0,0,77,77,68,48,0,0,0,0,108,105,98,120,109,112,58,32,109,105,115,115,105,110,103,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,0,0,86,69,0,0,0,0,0,0,68,83,77,80,0,0,0,0,101,118,101,110,116,45,62,102,120,116,32,60,61,32,50,54,0,0,0,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,51,0,0,73,78,83,84,0,0,0,0,73,78,83,84,0,0,0,0,37,115,37,115,46,65,83,0,114,98,0,0,0,0,0,0,81,117,97,100,114,97,32,67,111,109,112,111,115,101,114,32,69,77,79,68,32,118,37,100,0,0,0,0,0,0,0,0,77,46,75,46,0,0,0,0,73,78,83,84,0,0,0,0,83,77,80,73,0,0,0,0,80,65,84,84,0,0,0,0,77,78,65,77,0,0,0,0,79,99,116,97,77,69,68,0,37,115,10,0,0,0,0,0,70,97,105,108,32,51,32,111,110,32,109,32,61,32,37,100,0,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,47,79,99,116,97,77,69,68,0,0,0,0,0,0,0,0,77,101,103,97,116,114,97,99,107,101,114,0,0,0,0,0,40,105,110,116,41,32,102,108,111,111,114,40,112,111,119,40,40,102,108,111,97,116,41,32,114,44,32,100,105,109,41,41,32,60,61,32,101,110,116,114,105,101,115,0,0,0,0,0,77,97,103,110,101,116,105,99,32,70,105,101,108,100,115,32,80,97,99,107,101,114,0,0,40,100,115,116,32,43,32,119,32,43,32,49,41,32,60,32,40,111,114,103,100,115,116,32,43,32,100,115,116,95,108,101,110,103,116,104,41,0,0,0,77,69,68,32,50,46,49,48,32,77,69,68,52,0,0,0,77,69,68,32,50,46,48,48,32,77,69,68,51,0,0,0,77,69,68,32,49,46,49,50,32,77,69,68,50,0,0,0,42,46,100,105,122,0,0,0,68,105,103,105,116,114,97,107,107,101,114,0,0,0,0,0,49,46,53,0,0,0,0,0,65,78,32,67,79,79,76,33,0,0,0,0,0,0,0,0,83,84,77,50,83,84,88,32,49,46,37,100,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,100,32,83,84,77,0,0,0,0,0,0,68,46,79,46,67,32,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,48,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,51,0,0,82,84,78,68,0,0,0,0,77,46,75,46,0,0,0,0,67,77,78,84,0,0,0,0,68,105,103,105,116,114,97,107,107,101,114,0,0,0,0,0,83,80,69,69,0,0,0,0,120,109,112,95,88,88,88,88,88,88,0,0,0,0,0,0,78,46,84,46,0,0,0,0,69,112,105,99,32,77,101,103,97,71,97,109,101,115,32,77,65,83,73,0,0,0,0,0,77,77,68,50,0,0,0,0,79,99,116,97,77,69,68,32,52,46,48,48,32,77,77,68,49,0,0,0,0,0,0,0,46,115,101,116,0,0,0,0,83,65,0,0,0,0,0,0,83,79,78,71,0,0,0,0,115,114,99,47,108,111,97,100,101,114,115,47,108,105,113,95,108,111,97,100,46,99,0,0,77,111,100,80,108,117,103,32,84,114,97,99,107,101,114,32,49,46,49,54,0,0,0,0,114,98,0,0,0,0,0,0,77,117,112,112,32,37,48,50,120,32,37,48,50,120,32,37,48,50,120,0,0,0,0,0,76,105,113,117,105,100,32,84,114,97,99,107,101,114,0,0,37,115,37,115,0,0,0,0,80,65,84,84,0,0,0,0,80,65,84,84,0,0,0,0,37,115,37,115,46,110,116,0,56,83,77,80,0,0,0,0,80,65,84,84,0,0,0,0,80,65,84,84,0,0,0,0,73,78,83,84,0,0,0,0,37,115,32,37,115,0,0,0,83,84,69,82,0,0,0,0,46,47,105,115,106,97,46,105,116,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,86,65,83,83,51,46,80,67,88,0,0,0,0,0,0,0,101,114,114,111,114,58,32,99,111,108,111,114,109,97,112,39,115,32,102,105,114,115,116,32,98,121,116,101,32,109,117,115,116,32,98,101,32,48,120,48,99,33,32,40,37,35,120,41,10,0,0,0,0,0,0,0,70,97,105,108,32,50,32,111,110,32,109,32,61,32,37,100,0,0,0,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,0,85,78,73,83,32,54,54,57,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,47,99,111,110,118,101,114,116,101,100,0,0,0,0,0,0,0,73,109,97,103,101,115,32,77,117,115,105,99,32,83,121,115,116,101,109,0,0,0,0,0,86,65,83,83,50,46,80,67,88,0,0,0,0,0,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,118,49,46,48,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,99,108,111,110,101,0,0,0,0,0,0,0,0,112,111,119,40,40,102,108,111,97,116,41,32,114,43,49,44,32,100,105,109,41,32,62,32,101,110,116,114,105,101,115,0,86,65,83,83,49,46,80,67,88,0,0,0,0,0,0,0,100,115,116,32,62,61,32,111,114,103,100,115,116,0,0,0,99,111,110,118,101,114,116,101,100,0,0,0,0,0,0,0,82,73,70,70,0,0,0,0,77,65,78,68,50,46,80,67,88,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,54,47,73,99,101,32,84,114,97,99,107,101,114,0,0,0,0,72,83,67,45,84,114,97,99,107,101,114,0,0,0,0,0,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,0,42,46,68,73,90,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,0,0,49,46,52,0,0,0,0,0,65,78,32,67,79,79,76,46,0,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,32,83,84,88,0,0,0,0,66,77,79,68,50,83,84,77,32,83,84,77,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,73,88,0,77,65,78,68,49,46,80,67,88,0,0,0,0,0,0,0,83,111,117,110,100,70,88,32,50,46,48,0,0,0,0,0,72,105,115,32,77,97,115,116,101,114,39,115,32,78,111,105,115,101,0,0,0,0,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,37,100,46,37,48,50,120,0,0,0,37,115,32,82,84,77,32,37,120,46,37,48,50,120,0,0,82,65,68,32,98,121,32,82,69,65,76,105,84,89,33,33,0,0,0,0,0,0,0,0,119,43,98,0,0,0,0,0,73,78,70,79,0,0,0,0,77,111,100,39,115,32,71,114,97,118,101,0,0,0,0,0,71,114,97,111,117,109,102,32,84,114,97,99,107,101,114,0,85,78,73,67,32,84,114,97,99,107,101,114,32,105,100,48,0,0,0,0,0,0,0,0,73,83,79,46,80,67,88,0,67,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,0,0,0,0,0,0,0,0,71,101,110,101,114,105,99,32,68,105,103,105,116,97,108,32,77,117,115,105,99,0,0,0,83,65,77,80,0,0,0,0,77,84,77,0,0,0,0,0,70,108,101,120,116,114,97,120,0,0,0,0,0,0,0,0,77,38,75,33,0,0,0,0,79,99,116,97,77,69,68,32,83,111,117,110,100,115,116,117,100,105,111,32,77,77,68,37,99,0,0,0,0,0,0,0,84,69,75,50,46,80,67,88,0,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,32,77,77,68,48,0,0,0,37,115,37,115,0,0,0,0,77,69,68,32,37,100,46,37,48,50,100,32,77,69,68,52,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,84,82,0,0,0,0,0,0,83,68,70,84,0,0,0,0,68,105,103,105,116,97,108,32,84,114,97,99,107,101,114,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,53,46,48,32,40,74,50,66,41,0,0,0,104,105,111,95,116,101,108,108,32,40,102,41,32,45,32,99,111,117,110,116,32,61,61,32,108,112,46,115,105,122,101,0,79,112,101,110,83,80,67,32,99,111,110,118,101,114,115,105,111,110,0,0,0,0,0,0,84,89,89,80,46,80,67,88,0,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,54,32,77,84,78,0,0,0,0,37,115,32,40,37,52,46,52,115,41,0,0,0,0,0,0,71,84,75,0,0,0,0,0,71,68,77,32,37,100,46,37,48,50,100,32,40,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,32,37,100,46,37,48,50,100,41,0,0,0,79,99,116,97,108,121,115,101,114,0,0,0,0,0,0,0,79,82,68,82,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,52,46,48,0,79,82,68,82,0,0,0,0,70,117,110,107,116,114,97,99,107,101,114,32,68,79,83,51,50,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,78,85,78,78,46,80,67,88,0,0,0,0,0,0,0,0,80,65,84,84,0,0,0,0,42,46,82,101,97,100,77,101,0,0,0,0,0,0,0,0,70,117,110,107,116,114,97,99,107,101,114,0,0,0,0,0,83,46,81,46,0,0,0,0,83,69,81,85,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,32,109,111,100,117,108,101,0,0,0,0,0,83,79,78,71,0,0,0,0,70,97,115,116,32,84,114,97,99,107,101,114,0,0,0,0,77,86,79,88,0,0,0,0,82,111,82,0,0,0,0,0,84,85,78,69,76,69,46,80,67,88,0,0,0,0,0,0,42,46,82,101,97,100,109,101,0,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,0,0,0,0,0,79,86,73,46,80,67,88,0,101,114,114,111,114,58,32,98,97,100,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,33,32,40,37,105,41,10,0,0,0,0,0,0,0,0,60,111,0,0,0,0,0,0,70,97,105,108,32,49,32,111,110,32,109,32,61,32,37,100,10,0,0,0,0,0,0,0,42,46,114,101,97,100,109,101,0,0,0,0,0,0,0,0,77,111,100,117,108,101,32,80,114,111,116,101,99,116,111,114,32,110,111,73,68,0,0,0,70,97,114,97,110,100,111,108,101,32,67,111,109,112,111,115,101,114,0,0,0,0,0,0,78,111,105,115,101,116,114,97,99,107,101,114,0,0,0,0,105,102,0,0,0,0,0,0,84,65,85,83,46,80,67,88,0,0,0,0,0,0,0,0,42,46,82,69,65,68,77,69,0,0,0,0,0,0,0,0,81,117,97,100,114,97,32,67,111,109,112,111,115,101,114,0,80,114,111,116,114,97,99,107,101,114,0,0,0,0,0,0,68,101,115,107,116,111,112,32,84,114,97,99,107,101,114,0,253,55,122,88,90,0,0,0,37,115,32,73,84,32,37,100,46,37,48,50,120,0,0,0,115,114,99,47,100,101,112,97,99,107,101,114,115,47,118,111,114,98,105,115,46,99,0,0,117,110,99,111,109,112,114,101,115,115,58,32,99,111,114,114,117,112,116,32,105,110,112,117,116,10,0,0,0,0,0,0,79,79,46,80,67,88,0,0,115,114,99,47,100,101,112,97,99,107,101,114,115,47,115,52,48,52,95,100,101,99,46,99,0,0,0,0,0,0,0,0,42,46,99,111,109,0,0,0,70,76,69,88,0,0,0,0,66,101,82,111,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,0,0,0,68,105,103,105,116,97,108,32,84,114,97,99,107,101,114,0,84,89,89,80,73,84,46,80,67,88,0,0,0,0,0,0,42,46,67,79,77,0,0,0,47,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,37,45,50,48,46,50,48,115,0,0,0,0,0,0,0,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,0,0,0,0,0,0,0,0,67,72,78,0,0,0,0,0,60,32,49,46,52,0,0,0,114,101,97,100,109,101,0,0,45,45,45,62,32,37,48,50,120,10,0,0,0,0,0,0,32,40,99,111,109,112,97,116,46,41,0,0,0,0,0,0,108,105,98,120,109,112,58,32,117,110,115,117,112,112,111,114,116,101,100,32,115,97,109,112,108,101,32,116,121,112,101,10,0,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,0,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,0,0,0,0,0,0,0,0,88,45,84,114,97,99,107,101,114,0,0,0,0,0,0,0,85,108,116,105,109,97,116,101,32,83,111,117,110,100,116,114,97,99,107,101,114,0,0,0,83,79,84,75,85,51,46,80,67,88,0,0,0,0,0,0,83,111,117,110,100,70,88,32,49,46,51,0,0,0,0,0,33,99,45,62,115,112,97,114,115,101,0,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,42,46,101,120,101,0,0,0,82,84,77,77,0,0,0,0,82,65,68,32,37,100,46,37,100,0,0,0,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,0,0,0,0,119,43,98,0,0,0,0,0,120,109,112,95,88,88,88,88,88,88,0,0,0,0,0,0,80,111,108,121,32,84,114,97,99,107,101,114,32,80,84,77,32,37,100,46,37,48,50,120,0,0,0,0,0,0,0,0,37,45,54,46,54,115,32,73,70,70,77,79,68,76,0,0,67,72,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,83,116,117,100,105,111,32,80,83,77,32,37,100,46,37,48,50,100,0,0,0,79,77,80,84,0,0,0,0,69,88,79,0,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,32,110,111,105,100,0,0,0,0,0,0,0,67,80,76,88,95,84,80,51,0,0,0,0,0,0,0,0,84,104,101,32,80,108,97,121,101,114,32,54,46,48,97,0,83,79,84,75,85,50,46,80,67,88,0,0,0,0,0,0,119,43,98,0,0,0,0,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,32,124,124,32,99,45,62,99,111,100,101,119,111,114,100,115,0,0,0,0,0,42,46,69,88,69,0,0,0,67,77,79,68,0,0,0,0,76,105,113,117,105,100,32,84,114,97,99,107,101,114,0,0,77,117,108,116,105,84,114,97,99,107,101,114,32,37,100,46,37,48,50,100,32,77,84,77,0,0,0,0,0,0,0,0,83,52,48,52,0,0,0,0,68,105,103,105,66,111,111,115,116,101,114,32,80,114,111,0,65,109,105,103,97,32,80,114,111,116,114,97,99,107,101,114,47,67,111,109,112,97,116,105,98,108,101,0,0,0,0,0,79,112,101,110,77,80,84,32,37,100,46,37,48,50,120,0,70,76,84,0,0,0,0,0,77,33,75,33,0,0,0,0,79,99,116,97,77,69,68,32,118,53,32,77,77,68,50,0,84,69,75,83,89,46,80,67,88,0,0,0,0,0,0,0,79,99,116,97,77,69,68,32,50,46,48,48,32,77,77,68,48,0,0,0,0,0,0,0,77,101,103,97,116,114,97,99,107,101,114,32,77,71,84,32,118,37,100,46,37,100,0,0,108,105,98,120,109,112,58,32,105,110,118,97,108,105,100,32,102,105,108,101,110,97,109,101,32,37,115,10,0,0,0,0,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,0,77,69,68,86,0,0,0,4,0,0,0,0,0,0,0,0,42,46,116,120,116,0,0,0,37,115,47,37,115,0,0,0,73,78,0,0,0,0,0,0,117,110,114,97,114,32,112,32,45,105,110,117,108,32,45,120,114,101,97,100,109,101,32,45,120,42,46,100,105,122,32,45,120,42,46,110,102,111,32,45,120,42,46,116,120,116,32,45,120,42,46,101,120,101,32,45,120,42,46,99,111,109,32,34,37,115,34,0,0,0,0,0,84,73,84,76,0,0,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,48,46,37,120,0,0,0,0,0,37,115,32,76,73,81,32,37,100,46,37,48,50,100,0,0,65,77,0,0,0,0,0,0,117,110,109,111,51,0,0,0,84,65,85,83,84,49,46,80,67,88,0,0,0,0,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,49,46,48,32,73,77,70,0,0,0,40,110,32,38,32,51,41,32,61,61,32,48,0,0,0,0,42,46,84,88,84,0,0,0,73,99,101,32,84,114,97,99,107,101,114,32,73,84,49,48,0,0,0,0,0,0,0,0,77,117,112,112,0,0,0,0,71,114,97,111,117,109,102,32,84,114,97,99,107,101,114,32,71,84,75,32,118,37,100,0,82,97,114,0,0,0,0,0,71,68,77,32,37,100,46,37,48,50,100,32,40,50,71,68,77,32,37,100,46,37,48,50,100,41,0,0,0,0,0,0,78,83,77,83,0,0,0,0,73,78,73,84,0,0,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,37,48,52,100,45,37,48,50,100,45,37,48,50,100,0,0,0,88,77,80,95,73,78,83,84,82,85,77,69,78,84,95,80,65,84,72,0,0,0,0,0,77,65,73,78,0,0,0,0,37,115,32,40,37,52,46,52,115,41,0,0,0,0,0,0,70,117,110,107,116,114,97,99,107,101,114,71,79,76,68,0,37,115,37,115,46,78,84,0,69,70,85,80,46,80,67,88,0,0,0,0,0,0,0,0,70,97,114,97,110,100,111,108,101,32,67,111,109,112,111,115,101,114,32,37,100,46,37,100,0,0,0,0,0,0,0,0,69,77,73,67,0,0,0,0,65,115,121,108,117,109,32,77,117,115,105,99,32,70,111,114,109,97,116,32,118,49,46,48,0,0,0,0,0,0,0,0,118,32,61,61,32,98,117,102,50,0,0,0,0,0,0,0,68,46,84,46,0,0,0,0,42,46,73,110,102,111,0,0,37,115,32,68,77,70,32,118,37,100,0,0,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,32,37,45,52,46,52,115,0,0,0,0,0,76,90,88,0,0,0,0,0,73,78,70,79,0,0,0,0,70,65,48,56,0,0,0,0,76,105,113,117,105,100,32,77,111,100,117,108,101,58,0,0,117,110,107,110,111,119,110,32,40,37,48,52,120,41,0,0,46,0,0,0,0,0,0,0,65,83,89,76,85,77,32,77,117,115,105,99,32,70,111,114,109,97,116,32,86,49,46,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,117,100,105,111,83,99,117,108,112,116,117,114,101,32,49,46,48,0,0,0,0,0,0,83,65,77,80,0,0,0,0,84,73,78,70,0,0,0,0,68,83,77,73,32,37,100,46,37,100,32,65,77,70,0,0,73,85,46,80,67,88,0,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,61,61,32,48,0,0,0,0,42,46,105,110,102,111,0,0,37,115,32,83,51,77,0,0,77,85,83,69,0,0,0,0,65,114,99,104,105,109,101,100,101,115,32,84,114,97,99,107,101,114,0,0,0,0,0,0,70,65,48,54,0,0,0,0,68,105,103,105,116,114,97,107,107,101,114,32,77,68,76,32,37,100,46,37,100,0,0,0,101,118,101,110,116,45,62,118,111,108,32,60,61,32,54,52,0,0,0,0,0,0,0,0,109,117,110,99,104,46,112,121,0,0,0,0,0,0,0,0,65,117,100,105,111,83,99,117,108,112,116,117,114,101,49,48,0,0,0,0,0,0,0,0,80,65,84,84,0,0,0,0,68,83,77,73,32,65,100,118,97,110,99,101,100,32,77,111,100,117,108,101,32,70,111,114,109,97,116,0,0,0,0,0,80,114,111,80,97,99,107,101,114,32,50,46,49,0,0,0,80,114,111,109,105,122,101,114,32,49,46,56,97,0,0,0,80,114,111,109,105,122,101,114,32,49,46,48,99,0,0,0,80,104,97,32,80,97,99,107,101,114,0,0,0,0,0,0,75,75,46,80,67,88,0,0,101,114,114,111,114,58,32,99,111,117,108,100,110,39,116,32,111,112,101,110,32,34,37,115,34,33,10,0,0,0,0,0,114,98,0,0,0,0,0,0,110,101,120,116,95,115,101,103,109,101,110,116,0,0,0,0,108,111,111,107,117,112,49,95,118,97,108,117,101,115,0,0,108,105,113,95,108,111,97,100,0,0,0,0,0,0,0,0,105,110,118,101,114,115,101,95,109,100,99,116,0,0,0,0,105,110,99,108,117,100,101,95,105,110,95,115,111,114,116,0,105,109,100,99,116,95,115,116,101,112,51,95,105,116,101,114,48,95,108,111,111,112,0,0,103,101,116,98,0,0,0,0,103,101,116,95,119,105,110,100,111,119,0,0,0,0,0,0,103,101,116,56,95,112,97,99,107,101,116,95,114,97,119,0,100,101,99,111,109,112,114,101,115,115,83,52,48,52,0,0,100,101,99,111,100,101,95,101,118,101,110,116,0,0,0,0,99,111,109,112,117,116,101,95,115,111,114,116,101,100,95,104,117,102,102,109,97,110,0,0,99,111,109,112,117,116,101,95,99,111,100,101,119,111,114,100,115,0,0,0,0,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,116,97,114,116,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,99,97,108,97,114,95,114,97,119,0,0,0,0,0,0,0,0,0,16,0,0,128,16,0,0,0,17,0,0,128,17,0,0,0,18,0,0,128,18,0,0,0,19,0,0,128,19,0,0,0,20,0,0,128,20,0,0,0,21,0,0,128,21,0,0,0,22,0,0,128,22,0,0,0,23,0,0,128,31,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,18,0,0,0,20,0,0,0,20,0,0,0,24,0,0,0,24,0,0,0,30,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,160,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,96,1,0,0,128,1,0,0,160,1,0,0,192,1,0,0,224,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,1,0,0,96,1,0,0,160,1,0,0,224,1,0,0,0,2,0,0,64,2,0,0,96,2,0,0,128,2,0,0,160,2,0,0,192,2,0,0,224,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,160,1,0,0,0,2,0,0,96,2,0,0,160,2,0,0,224,2,0,0,0,3,0,0,64,3,0,0,96,3,0,0,128,3,0,0,160,3,0,0,192,3,0,0,224,3,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,160,2,0,0,0,3,0,0,96,3,0,0,160,3,0,0,224,3,0,0,0,4,0,0,64,4,0,0,96,4,0,0,128,4,0,0,160,4,0,0,192,4,0,0,224,4,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,3,0,0,160,3,0,0,0,4,0,0,96,4,0,0,160,4,0,0,224,4,0,0,0,5,0,0,64,5,0,0,96,5,0,0,128,5,0,0,160,5,0,0,192,5,0,0,224,5,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,4,0,0,160,4,0,0,0,5,0,0,96,5,0,0,160,5,0,0,224,5,0,0,0,6,0,0,64,6,0,0,96,6,0,0,128,6,0,0,160,6,0,0,192,6,0,0,224,6,0,0,0,7,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};var SDL={defaults:{width:320,height:200,copyOnLock:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},keyCodes:{16:1249,17:1248,18:1250,33:1099,34:1102,37:1104,38:1106,39:1103,40:1105,46:127,96:1112,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,173:45,188:44,190:46,191:47,192:96},scanCodes:{8:42,9:43,13:40,27:41,32:44,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,305:224,308:226},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var surf = _malloc(60);  // SDL_Surface has 15 fields of quantum size
        var buffer = _malloc(width*height*4); // TODO: only allocate when locked the first time
        var pixelFormat = _malloc(44);
        flags |= 1; // SDL_HWSURFACE - this tells SDL_MUSTLOCK that this needs to be locked
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var is_SDL_HWPALETTE = flags & 0x00200000;  
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        HEAP32[((surf)>>2)]=flags         // SDL_Surface.flags
        HEAP32[(((surf)+(4))>>2)]=pixelFormat // SDL_Surface.format TODO
        HEAP32[(((surf)+(8))>>2)]=width         // SDL_Surface.w
        HEAP32[(((surf)+(12))>>2)]=height        // SDL_Surface.h
        HEAP32[(((surf)+(16))>>2)]=width * bpp       // SDL_Surface.pitch, assuming RGBA or indexed for now,
                                                                                 // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer      // SDL_Surface.pixels
        HEAP32[(((surf)+(36))>>2)]=0      // SDL_Surface.offset
        HEAP32[(((surf)+(56))>>2)]=1
        HEAP32[((pixelFormat)>>2)]=0 /* XXX missing C define SDL_PIXELFORMAT_RGBA8888 */ // SDL_PIXELFORMAT_RGBA8888
        HEAP32[(((pixelFormat)+(4))>>2)]=0 // TODO
        HEAP8[(((pixelFormat)+(8))|0)]=bpp * 8
        HEAP8[(((pixelFormat)+(9))|0)]=bpp
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000
        // Decide if we want to use WebGL or not
        var useWebGL = (flags & 0x04000000) != 0; // SDL_OPENGL
        SDL.GL = SDL.GL || useWebGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        var ctx = Browser.createContext(canvas, useWebGL, usePageCanvas, webGLContextAttributes);
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        var buffer  = surfData.buffer;
        var data    = surfData.image.data;
        var colors  = surfData.colors;
        for (var y = startY; y < endY; ++y) {
          var indexBase = y * fullWidth;
          var colorBase = indexBase * 4;
          for (var x = startX; x < endX; ++x) {
            // HWPALETTE have only 256 colors (not rgba)
            var index = HEAPU8[((buffer + indexBase + x)|0)] * 3;
            var colorOffset = colorBase + x * 4;
            data[colorOffset   ] = colors[index   ];
            data[colorOffset +1] = colors[index +1];
            data[colorOffset +2] = colors[index +2];
            //unused: data[colorOffset +3] = color[index +3];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
      },touchX:0,touchY:0,savedKeydown:null,receiveEvent:function (event) {
        switch(event.type) {
          case 'touchstart':
            event.preventDefault();
            var touch = event.touches[0];
            touchX = touch.pageX;
            touchY = touch.pageY;
            var event = {
              type: 'mousedown',
              button: 0,
              pageX: touchX,
              pageY: touchY
            };
            SDL.DOMButtons[0] = 1;
            SDL.events.push(event);
            break;
          case 'touchmove':
            event.preventDefault();
            var touch = event.touches[0];
            touchX = touch.pageX;
            touchY = touch.pageY;
            event = {
              type: 'mousemove',
              button: 0,
              pageX: touchX,
              pageY: touchY
            };
            SDL.events.push(event);
            break;
          case 'touchend':
            event.preventDefault();
            event = {
              type: 'mouseup',
              button: 0,
              pageX: touchX,
              pageY: touchY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(event);
            break;
          case 'mousemove':
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup': case 'DOMMouseScroll': case 'mousewheel':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
            if (event.type == 'DOMMouseScroll' || event.type == 'mousewheel') {
              var button = (event.type == 'DOMMouseScroll' ? event.detail : -event.wheelDelta) > 0 ? 4 : 3;
              var event2 = {
                type: 'mousedown',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
              SDL.events.push(event2);
              event = {
                type: 'mouseup',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
            } else if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
              SDL.DOMButtons[event.button] = 0;
            }
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'blur':
          case 'visibilitychange': {
            // Un-press all pressed keys: TODO
            for (var code in SDL.keyboardMap) {
              SDL.events.push({
                type: 'keyup',
                keyCode: SDL.keyboardMap[code]
              });
            }
            event.preventDefault();
            break;
          }
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        return;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = event.keyCode;
            if (code >= 65 && code <= 90) {
              code += 32; // make lowercase for SDL
            } else {
              code = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
            HEAP8[(((SDL.keyboardState)+(code))|0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))|0)] ? 0x0040 | 0x0080 : 0) | // KMOD_LCTRL & KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))|0)] ? 0x0001 | 0x0002 : 0) | // KMOD_LSHIFT & KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))|0)] ? 0x0100 | 0x0200 : 0); // KMOD_LALT & KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28); // XXX
          return;
        }
        SDL.handleEvent(event);
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = event.keyCode;
            if (key >= 65 && key <= 90) {
              key += 32; // make lowercase for SDL
            } else {
              key = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type]
            HEAP8[(((ptr)+(8))|0)]=down ? 1 : 0
            HEAP8[(((ptr)+(9))|0)]=0 // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan
            HEAP32[(((ptr)+(16))>>2)]=key
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type]
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))|0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP8[(((ptr)+(8))|0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(9))|0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(12))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(16))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP8[(((ptr)+(8))|0)]=SDL.buttonState;
              HEAP32[(((ptr)+(12))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(16))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))|0)]=event.index;
            HEAP8[(((ptr)+(5))|0)]=event.button;
            HEAP8[(((ptr)+(6))|0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))|0)]=event.index;
            HEAP8[(((ptr)+(5))|0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = volume / 128;
          if (info.audio) info.audio.volume = info.volume;
        }
        return ret;
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
      surfData.locked++;
      if (surfData.locked > 1) return 0;
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
      surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      if (surf == SDL.screen) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
      if (SDL.defaults.copyOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))|0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
        HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
      return 0;
    }
  function _SDL_GetTicks() {
      return Math.floor(Date.now() - SDL.startTime);
    }
  function _SDL_UnlockSurface(surf) {
      assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts
      var surfData = SDL.surfaces[surf];
      surfData.locked--;
      if (surfData.locked > 0) return;
      // Copy pixel data to image
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        SDL.copyIndexedColorData(surfData);
      } else if (!surfData.colors) {
        var data = surfData.image.data;
        var buffer = surfData.buffer;
        assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
        var src = buffer >> 2;
        var dst = 0;
        var isScreen = surf == SDL.screen;
        var data32 = new Uint32Array(data.buffer);
        var num = data32.length;
        while (dst < num) {
          // HEAP32[src++] is an optimization. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
          data32[dst++] = HEAP32[src++] | (isScreen ? 0xff000000 : 0);
        }
      } else {
        var width = Module['canvas'].width;
        var height = Module['canvas'].height;
        var s = surfData.buffer;
        var data = surfData.image.data;
        var colors = surfData.colors;
        for (var y = 0; y < height; y++) {
          var base = y*width*4;
          for (var x = 0; x < width; x++) {
            // See comment above about signs
            var val = HEAPU8[((s++)|0)] * 3;
            var start = base + x*4;
            data[start]   = colors[val];
            data[start+1] = colors[val+1];
            data[start+2] = colors[val+2];
          }
          s += width*3;
        }
      }
      // Copy to canvas
      surfData.ctx.putImageData(surfData.image, 0, 0);
      // Note that we save the image, so future writes are fast. But, memory is not yet released
    }
  function _SDL_UpdateRect(surf, x, y, w, h) {
      // We actually do the whole screen in Unlock...
    }
  function _SDL_SetColors(surf, colors, firstColor, nColors) {
      var surfData = SDL.surfaces[surf];
      // we should create colors array
      // only once cause client code
      // often wants to change portion 
      // of palette not all palette.
      if (!surfData.colors) {
        surfData.colors = new Uint8Array(256 * 3); //256 RGB colors
      } 
      for (var i = 0; i < nColors; ++i) {
        var index = (firstColor + i) * 3;
        surfData.colors[index] = HEAPU8[(((colors)+(i*4))|0)];
        surfData.colors[index + 1] = HEAPU8[(((colors)+(i*4 + 1))|0)];
        surfData.colors[index + 2] = HEAPU8[(((colors)+(i*4 + 2))|0)];
      }
      return 1;
    }function _SDL_SetPalette(surf, flags, colors, firstColor, nColors) {
      return _SDL_SetColors(surf, colors, firstColor, nColors);
    }
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }
  function _fgetpos(stream, pos) {
      // int fgetpos(FILE *restrict stream, fpos_t *restrict pos);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetpos.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      }
      HEAP32[((pos)>>2)]=stream.position
      var state = (stream.eof ? 1 : 0) + (stream.error ? 2 : 0);
      HEAP32[(((pos)+(4))>>2)]=state
      return 0;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  function _fsetpos(stream, pos) {
      // int fsetpos(FILE *stream, const fpos_t *pos);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsetpos.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.EPIPE);
        return -1;
      }
      stream.position = HEAP32[((pos)>>2)];
      var state = HEAP32[(((pos)+(4))>>2)];
      stream.eof = Boolean(state & 1);
      stream.error = Boolean(state & 2);
      return 0;
    }
  var _cos=Math_cos;
  var _sin=Math_sin;
  function _SDL_OpenAudio(desired, obtained) {
      try {
        SDL.audio = {
          freq: HEAPU32[((desired)>>2)],
          format: HEAPU16[(((desired)+(4))>>1)],
          channels: HEAPU8[(((desired)+(6))|0)],
          samples: HEAPU16[(((desired)+(8))>>1)], // Samples in the CB buffer per single sound channel.
          callback: HEAPU32[(((desired)+(16))>>2)],
          userdata: HEAPU32[(((desired)+(20))>>2)],
          paused: true,
          timer: null
        };
        // The .silence field tells the constant sample value that corresponds to the safe un-skewed silence value for the wave data.
        if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
          SDL.audio.silence = 128; // Audio ranges in [0, 255], so silence is half-way in between.
        } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
          SDL.audio.silence = 0; // Signed data in range [-32768, 32767], silence is 0.
        } else {
          throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
        }
        // Round the desired audio frequency up to the next 'common' frequency value.
        // Web Audio API spec states 'An implementation must support sample-rates in at least the range 22050 to 96000.'
        if (SDL.audio.freq <= 0) {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        } else if (SDL.audio.freq <= 22050) {
          SDL.audio.freq = 22050; // Take it safe and clamp everything lower than 22kHz to that.
        } else if (SDL.audio.freq <= 32000) {
          SDL.audio.freq = 32000;
        } else if (SDL.audio.freq <= 44100) {
          SDL.audio.freq = 44100;
        } else if (SDL.audio.freq <= 48000) {
          SDL.audio.freq = 48000;
        } else if (SDL.audio.freq <= 96000) {
          SDL.audio.freq = 96000;
        } else {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        }
        if (SDL.audio.channels == 0) {
          SDL.audio.channels = 1; // In SDL both 0 and 1 mean mono.
        } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
          throw 'Unsupported number of audio channels for SDL audio: ' + SDL.audio.channels + '!';
        } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) { // Unsure what SDL audio spec supports. Web Audio spec supports up to 32 channels.
          console.log('Warning: Using untested number of audio channels ' + SDL.audio.channels);
        }
        if (SDL.audio.samples < 128 || SDL.audio.samples > 524288 /* arbitrary cap */) {
          throw 'Unsupported audio callback buffer size ' + SDL.audio.samples + '!';
        } else if ((SDL.audio.samples & (SDL.audio.samples-1)) != 0) {
          throw 'Audio callback buffer size ' + SDL.audio.samples + ' must be a power-of-two!';
        }
        var totalSamples = SDL.audio.samples*SDL.audio.channels;
        SDL.audio.bytesPerSample = (SDL.audio.format == 0x0008 /*AUDIO_U8*/ || SDL.audio.format == 0x8008 /*AUDIO_S8*/) ? 1 : 2;
        SDL.audio.bufferSize = totalSamples*SDL.audio.bytesPerSample;
        SDL.audio.buffer = _malloc(SDL.audio.bufferSize);
        // To account for jittering in frametimes, always have multiple audio buffers queued up for the audio output device.
        // This helps that we won't starve that easily if a frame takes long to complete.
        SDL.audio.numSimultaneouslyQueuedBuffers = Module['SDL_numSimultaneouslyQueuedBuffers'] || 3;
        // Create a callback function that will be routinely called to ask more audio data from the user application.
        SDL.audio.caller = function SDL_audio_caller() {
          if (!SDL.audio) {
            return;
          }
          Runtime.dynCall('viii', SDL.audio.callback, [SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize]);
          SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize);
        };
        SDL.audio.audioOutput = new Audio();
        // As a workaround use Mozilla Audio Data API on Firefox until it ships with Web Audio and sound quality issues are fixed.
        if (typeof(SDL.audio.audioOutput['mozSetup'])==='function') {
          SDL.audio.audioOutput['mozSetup'](SDL.audio.channels, SDL.audio.freq); // use string attributes on mozOutput for closure compiler
          SDL.audio.mozBuffer = new Float32Array(totalSamples);
          SDL.audio.nextPlayTime = 0;
          SDL.audio.pushAudio = function SDL_audio_pushAudio(ptr, size) {
            --SDL.audio.numAudioTimersPending;
            var mozBuffer = SDL.audio.mozBuffer;
            // The input audio data for SDL audio is either 8-bit or 16-bit interleaved across channels, output for Mozilla Audio Data API
            // needs to be Float32 interleaved, so perform a sample conversion.
            if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
              for (var i = 0; i < totalSamples; i++) {
                mozBuffer[i] = (HEAP16[(((ptr)+(i*2))>>1)]) / 0x8000;
              }
            } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
              for (var i = 0; i < totalSamples; i++) {
                var v = (HEAP8[(((ptr)+(i))|0)]);
                mozBuffer[i] = ((v >= 0) ? v-128 : v+128) /128;
              }
            }
            // Submit the audio data to audio device.
            SDL.audio.audioOutput['mozWriteAudio'](mozBuffer);
            // Compute when the next audio callback should be called.
            var curtime = Date.now() / 1000.0 - SDL.audio.startTime;
            if (curtime > SDL.audio.nextPlayTime && SDL.audio.nextPlayTime != 0) {
              console.log('warning: Audio callback had starved sending audio by ' + (curtime - SDL.audio.nextPlayTime) + ' seconds.');
            }
            var playtime = Math.max(curtime, SDL.audio.nextPlayTime);
            var buffer_duration = SDL.audio.samples / SDL.audio.freq;
            SDL.audio.nextPlayTime = playtime + buffer_duration;
            // Schedule the next audio callback call to occur when the current one finishes.
            SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1000.0 * (playtime-curtime));
            ++SDL.audio.numAudioTimersPending;
            // And also schedule extra buffers _now_ if we have too few in queue.
            if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
              ++SDL.audio.numAudioTimersPending;
              Browser.safeSetTimeout(SDL.audio.caller, 1.0);
            }
          }
        } else {
          // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
          // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
          if (!SDL.audioContext) {
            if (typeof(AudioContext) === 'function') {
              SDL.audioContext = new AudioContext();
            } else if (typeof(webkitAudioContext) === 'function') {
              SDL.audioContext = new webkitAudioContext();
            } else {
              throw 'Web Audio API is not available!';
            }
          }
          SDL.audio.soundSource = new Array(); // Use an array of sound sources as a ring buffer to queue blocks of synthesized audio to Web Audio API.
          SDL.audio.nextSoundSource = 0; // Index of the next sound buffer in the ring buffer queue to play.
          SDL.audio.nextPlayTime = 0; // Time in seconds when the next audio block is due to start.
          // The pushAudio function with a new audio buffer whenever there is new audio data to schedule to be played back on the device.
          SDL.audio.pushAudio=function(ptr,sizeBytes) {
            try {
              --SDL.audio.numAudioTimersPending;
              var sizeSamples = sizeBytes / SDL.audio.bytesPerSample; // How many samples fit in the callback buffer?
              var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
              if (sizeSamplesPerChannel != SDL.audio.samples) {
                throw 'Received mismatching audio buffer size!';
              }
              // Allocate new sound buffer to be played.
              var source = SDL.audioContext['createBufferSource']();
              if (SDL.audio.soundSource[SDL.audio.nextSoundSource]) {
                SDL.audio.soundSource[SDL.audio.nextSoundSource]['disconnect'](); // Explicitly disconnect old source, since we know it shouldn't be running anymore.
              }
              SDL.audio.soundSource[SDL.audio.nextSoundSource] = source;
              var soundBuffer = SDL.audioContext['createBuffer'](SDL.audio.channels,sizeSamplesPerChannel,SDL.audio.freq);
              SDL.audio.soundSource[SDL.audio.nextSoundSource]['connect'](SDL.audioContext['destination']);
              // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
              // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
              // so perform a buffer conversion for the data.
              var numChannels = SDL.audio.channels;
              for(var i = 0; i < numChannels; ++i) {
                var channelData = soundBuffer['getChannelData'](i);
                if (channelData.length != sizeSamplesPerChannel) {
                  throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
                }
                if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
                  for(var j = 0; j < sizeSamplesPerChannel; ++j) {
                    channelData[j] = (HEAP16[(((ptr)+((j*numChannels + i)*2))>>1)]) / 0x8000;
                  }
                } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
                  for(var j = 0; j < sizeSamplesPerChannel; ++j) {
                    var v = (HEAP8[(((ptr)+(j*numChannels + i))|0)]);
                    channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
                  }
                }
              }
              // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=883675 by setting the buffer only after filling. The order is important here!
              source['buffer'] = soundBuffer;
              // Schedule the generated sample buffer to be played out at the correct time right after the previously scheduled
              // sample buffer has finished.
              var curtime = SDL.audioContext['currentTime'];
              if (curtime > SDL.audio.nextPlayTime && SDL.audio.nextPlayTime != 0) {
                console.log('warning: Audio callback had starved sending audio by ' + (curtime - SDL.audio.nextPlayTime) + ' seconds.');
              }
              var playtime = Math.max(curtime, SDL.audio.nextPlayTime);
              SDL.audio.soundSource[SDL.audio.nextSoundSource]['start'](playtime);
              var buffer_duration = sizeSamplesPerChannel / SDL.audio.freq;
              SDL.audio.nextPlayTime = playtime + buffer_duration;
              SDL.audio.nextSoundSource = (SDL.audio.nextSoundSource + 1) % 4;
              var secsUntilNextCall = playtime-curtime;
              // Queue the next audio frame push to be performed when the previously queued buffer has finished playing.
              if (SDL.audio.numAudioTimersPending == 0) {
                var preemptBufferFeedMSecs = buffer_duration/2.0;
                SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, Math.max(0.0, 1000.0*secsUntilNextCall-preemptBufferFeedMSecs));
                ++SDL.audio.numAudioTimersPending;
              }
              // If we are risking starving, immediately queue extra buffers.
              if (secsUntilNextCall <= buffer_duration && SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
                ++SDL.audio.numAudioTimersPending;
                Browser.safeSetTimeout(SDL.audio.caller, 1.0);
              }
            } catch(e) {
              console.log('Web Audio API error playing back audio: ' + e.toString());
            }
          }
        }
        if (obtained) {
          // Report back the initialized audio parameters.
          HEAP32[((obtained)>>2)]=SDL.audio.freq;
          HEAP16[(((obtained)+(4))>>1)]=SDL.audio.format;
          HEAP8[(((obtained)+(6))|0)]=SDL.audio.channels;
          HEAP8[(((obtained)+(7))|0)]=SDL.audio.silence;
          HEAP16[(((obtained)+(8))>>1)]=SDL.audio.samples;
          HEAP32[(((obtained)+(16))>>2)]=SDL.audio.callback;
          HEAP32[(((obtained)+(20))>>2)]=SDL.audio.userdata;
        }
        SDL.allocateChannels(32);
      } catch(e) {
        console.log('Initializing SDL audio threw an exception: "' + e.toString() + '"! Continuing without audio.');
        SDL.audio = null;
        SDL.allocateChannels(0);
        if (obtained) {
          HEAP32[((obtained)>>2)]=0;
          HEAP16[(((obtained)+(4))>>1)]=0;
          HEAP8[(((obtained)+(6))|0)]=0;
          HEAP8[(((obtained)+(7))|0)]=0;
          HEAP16[(((obtained)+(8))>>1)]=0;
          HEAP32[(((obtained)+(16))>>2)]=0;
          HEAP32[(((obtained)+(20))>>2)]=0;
        }
      }
      if (!SDL.audio) {
        return -1;
      }
      return 0;
    }
  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }
  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }
  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        document.addEventListener("keydown", SDL.receiveEvent);
        document.addEventListener("keyup", SDL.receiveEvent);
        document.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown'] = 0x300 /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup'] = 0x301 /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress'] = 0x303 /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown'] = 0x401 /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup'] = 0x402 /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove'] = 0x400 /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['unload'] = 0x100 /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize'] = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }
  function _SDL_Quit() {
      for (var i = 0; i < SDL.numChannels; ++i) {
        if (SDL.channels[i].audio) {
          SDL.channels[i].audio.pause();
        }
      }
      if (SDL.music.audio) {
        SDL.music.audio.pause();
      }
      Module.print('SDL_Quit called (and ignored)');
    }
  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        var canvas = Module['canvas'];
        width = canvas.width;
        height = canvas.height;
      }
      Browser.setCanvasSize(width, height, true);
      // Free the old surface first.
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        SDL.screen = null;
      }
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          SDL.receiveEvent({
            type: 'resize',
            w: w,
            h: h
          });
        });
      }
      return SDL.screen;
    }
  function _SDL_WM_SetCaption(title, icon) {
      title = title && Pointer_stringify(title);
      icon = icon && Pointer_stringify(icon);
    }
  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000000/1000));
    }
  function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
        SDL.audio.startTime = Date.now() / 1000.0; // Only used for Mozilla Audio Data API. Not needed for Web Audio API.
      }
      SDL.audio.paused = pauseOn;
    }
  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
      Module['noExitRuntime'] = true;
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
        try {
          Runtime.dynCall('v', func);
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        }
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        }
      }
      Browser.mainLoop.scheduler();
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }
  function _SDL_CloseAudio() {
      if (SDL.audio) {
        try{
          for(var i = 0; i < SDL.audio.soundSource.length; ++i) {
            if (!(typeof(SDL.audio.soundSource[i]==='undefined'))) {
              SDL.audio.soundSource[i].stop(0);
            }
          }
        } catch(e) {}
        SDL.audio.soundSource = null;
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode
        HEAP32[(((buf)+(16))>>2)]=stat.nlink
        HEAP32[(((buf)+(20))>>2)]=stat.uid
        HEAP32[(((buf)+(24))>>2)]=stat.gid
        HEAP32[(((buf)+(28))>>2)]=stat.rdev
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size
        HEAP32[(((buf)+(40))>>2)]=4096
        HEAP32[(((buf)+(44))>>2)]=stat.blocks
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000)
        HEAP32[(((buf)+(52))>>2)]=0
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000)
        HEAP32[(((buf)+(60))>>2)]=0
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000)
        HEAP32[(((buf)+(68))>>2)]=0
        HEAP32[(((buf)+(72))>>2)]=stat.ino
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
;
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;
  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
;
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }
  function _creat(path, mode) {
      // int creat(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/creat.html
      return _open(path, 1 | 64 | 512, allocate([mode, 0, 0, 0], 'i32', ALLOC_STACK));
    }
  function _mktemp(template) {
      if (!_mktemp.counter) _mktemp.counter = 0;
      var c = (_mktemp.counter++).toString();
      var rep = 'XXXXXX';
      while (c.length < rep.length) c = '0' + c;
      writeArrayToMemory(intArrayFromString(c), template + Pointer_stringify(template).indexOf(rep));
      return template;
    }function _mkstemp(template) {
      return _creat(_mktemp(template), 0600);
    }
  function _fdopen(fildes, mode) {
      // FILE *fdopen(int fildes, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fdopen.html
      mode = Pointer_stringify(mode);
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if ((mode.indexOf('w') != -1 && !stream.isWrite) ||
          (mode.indexOf('r') != -1 && !stream.isRead) ||
          (mode.indexOf('a') != -1 && !stream.isAppend) ||
          (mode.indexOf('+') != -1 && (!stream.isRead || !stream.isWrite))) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else {
        stream.error = false;
        stream.eof = false;
        return fildes;
      }
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _popen(command, mode) {
      // FILE *popen(const char *command, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/popen.html
      // We allow only one process, so no pipes.
      ___setErrNo(ERRNO_CODES.EMFILE);
      return 0;
    }
  function _pclose(stream) {
      // int pclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/pclose.html
      // We allow only one process, so no pipes.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }
;
  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var err = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      // open returns 0 on failure, not -1
      return err === -1 ? 0 : err;
    }
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStream(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var entries;
      try {
        entries = FS.readdir(stream.path);
      } catch (e) {
        return FS.handleFSError(e);
      }
      if (stream.position < 0 || stream.position >= entries.length) {
        HEAP32[((result)>>2)]=0
        return 0;
      }
      var id;
      var type;
      var name = entries[stream.position];
      var offset = stream.position + 1;
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        var child = FS.lookupNode(stream.node, name);
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id
      HEAP32[(((entry)+(4))>>2)]=offset
      HEAP32[(((entry)+(8))>>2)]=name.length + 1
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))|0)]=name.charCodeAt(i)
      }
      HEAP8[(((entry + 11)+(i))|0)]=0
      HEAP8[(((entry)+(10))|0)]=type
      HEAP32[((result)>>2)]=entry
      stream.position++;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStream(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }function _strncasecmp(px, py, n) {
      px = px|0; py = py|0; n = n|0;
      var i = 0, x = 0, y = 0;
      while ((i>>>0) < (n>>>0)) {
        x = _tolower(HEAP8[(((px)+(i))|0)])|0;
        y = _tolower(HEAP8[(((py)+(i))|0)])|0;
        if (((x|0) == (y|0)) & ((x|0) == 0)) return 0;
        if ((x|0) == 0) return -1;
        if ((y|0) == 0) return 1;
        if ((x|0) == (y|0)) {
          i = (i + 1)|0;
          continue;
        } else {
          return ((x>>>0) > (y>>>0) ? 1 : -1)|0;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      px = px|0; py = py|0;
      return _strncasecmp(px, py, -1)|0;
    }
  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      return _close(dirp);
    }
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  var _llvm_va_start=undefined;
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  var _abs=Math_abs;
  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone
      return tmPtr;
    }
  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }
  function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream;
          try {
            newStream = FS.open(stream.path, stream.flags, 0, arg);
          } catch (e) {
            FS.handleFSError(e);
            return -1;
          }
          return newStream.fd;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.flags |= arg;
          return 0;
        case 12:
        case 12:
          var arg = HEAP32[((varargs)>>2)];
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2
          return 0;
        case 13:
        case 14:
        case 13:
        case 14:
          // Pretend that the locking is successful.
          return 0;
        case 8:
        case 9:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }function _dup(fildes) {
      // int dup(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/dup.html
      return _fcntl(fildes, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));  // F_DUPFD.
    }
  function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }
  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return FUNCTION_TABLE[cmp](base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }
  var _llvm_pow_f64=Math_pow;
  function _round(x) {
      return (x < 0) ? -Math.round(-x) : Math.round(x);
    }
  var _log=Math_log;
;
  var _setjmp=undefined;
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  var _getc=_fgetc;
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }
  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStream(stream);
      return Number(stream && stream.error);
    }
  var _floor=Math_floor;
  var _exp=Math_exp;
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
;
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStream(stream);
      return Number(stream && stream.eof);
    }
  function _abort() {
      Module['abort']();
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var FUNCTION_TABLE = [0,0,_stm_load,0,_test_titanics,0,_test_unic_emptyid,0,_decode_c_dyn,0,_stx_test,0,_depack_hrt,0,_depack_pp21,0,_synth_setpatch,0,_fnk_test,0,_synth_reset,0,_get_sdft,0,_smix_mono_8bit_nearest,0,_mod_load,0,_get_pbod_cnt,0,_get_song_2,0,_sfx_load,0,_digi_test,0,_test_tdd,0,_depack_ksm,0,_get_inst183,0,_synth_init731,0,_test_GMC,0,_s3m_test,0,_test_nru,0,_arch_test,0,_smix_stereo_8bit_nearest,0,_depack_p60a,0,_smix_mono_16bit_spline,0,_point_compare,0,_synth_setvol,0,_get_info548,0,_depack_unic2,0,_get_dsmp_cnt,0,_rtm_load,0,_synth_setnote,0,_dmf_load,0,_get_chunk_ve,0,_get_chunk_is,0,_get_sequ169,0,_depack_ntp,0,_test_mp_id,0,_okt_test,0,_ssn_load,0,_test_hrt,0,_get_ordr,0,_ssn_test,0,_smix_mono_16bit_linear_filter,0,_flt_load,0,_sfx_test,0,_test_pru2,0,_get_patt155,0,_st_test,0,_rad_load,0,_hsc_load,0,_get_inst_cnt,0,_get_dsmp,0,_get_patt_cnt,0,_mmd3_load,0,_ult_load,0,_depack_xann,0,_liq_test,0,_test_p50a,0,_test_wn,0,_smix_mono_8bit_spline,0,_okt_load,0,_mtm_test,0,_get_inst_cnt244,0,_depack_eu,0,_smix_stereo_16bit_spline,0,_get_mvox,0,_med3_test,0,_get_patt,0,_test_unic2,0,_amf_load,0,_no_test,0,_pt3_load,0,_tcb_test,0,_umx_test,0,_test_p61a,0,_mmd1_test,0,_psm_load,0,_med4_test,0,_gal4_test,0,_get_chunk_sa,0,_get_mlen,0,_get_patt245,0,_stim_load,0,_hmn_test,0,_get_chunk_p0,0,_mfp_load,0,_get_d_t_,0,_get_plen,0,_gdm_load,0,_mgt_test,0,_test_starpack,0,_depack_p50a,0,_test_fcm,0,_depack_p18a,0,_mgt_load,0,_stm_test,0,_med2_load,0,_depack_pha,0,_xm_load,0,_depack_zen,0,_far_test,0,_depack_nru,0,_test_kris,0,_depack_crb,0,_smix_stereo_8bit_linear_filter,0,_ice_test,0,_imf_load,0,_depack_pru1,0,_smix_mono_16bit_nearest,0,_depack_pru2,0,_synth_deinit,0,_get_chunk_ii,0,_hmn_load,0,_test_fuchs,0,_test_p60a,0,_stx_load,0,_emod_test,0,_get_chunk_pe,0,_test_unic_noid,0,_depack_tp3,0,_test_crb,0,_flt_test,0,_depack_p61a,0,_depack_titanics,0,_sym_test,0,_depack_di,0,_smix_stereo_16bit_linear_filter,0,_get_dait,0,_smix_stereo_8bit_spline,0,_depack_p10c,0,_digi_load,0,_get_ptdt,0,_get_patt231,0,_get_chunk_pa,0,_decode_p_st0,0,_depack_np1,0,_get_inst232,0,_depack_np3,0,_synth_init,0,_rtm_test,0,_smix_mono_8bit_linear_filter,0,_get_mnam,0,_get_sbod,0,_s3m_load,0,_get_song352,0,_depack_skyt,0,_test_np3,0,_get_info,0,_get_patt182,0,_get_samp,0,_liq_load,0,_get_tinf,0,_get_sequ,0,_depack_starpack,0,_get_chunk_i0,0,_asylum_test,0,_get_patt479,0,_get_ster,0,_rad_test,0,_depack_AC1D,0,_test_xann,0,_rawoutput,0,_depack_wn,0,_decode_c_st1,0,_ptm_test,0,_synth_deinit732,0,_get_inst,0,_get_patt_cnt243,0,_get_cmnt,0,_dbm_load,0,_gtk_load,0,_gal5_load,0,_get_smpl,0,_test_ntp,0,_dt_test,0,_pw_load,0,_test_zen,0,_gtk_test,0,_dtt_test,0,_get_samp477,0,_masi_load,0,_test_di,0,_med2_test,0,_xm_test,0,_sym_load,0,_test_fuzz,0,_stim_test,0,_get_ordr242,0,_get_patt194,0,_mdl_test,0,_pw_test,0,_get_chunk_fe,0,_depack_fcm,0,_uint32_compare,0,_depack_p4x,0,_test_unic_id,0,_smix_stereo_8bit_spline_filter,0,_ult_test,0,_get_s_q_,0,_test_skyt,0,_med3_load,0,_test_pru1,0,_depack_unic,0,_test_pp21,0,_depack_np2,0,_smix_stereo_8bit_linear,0,_amd_load,0,_amf_test,0,_smix_mono_16bit_linear,0,_depack_mp,0,_get_chunk_tr,0,_imf_test,0,_get_slen,0,_test_p18a,0,_mdl_load,0,_mfp_test,0,_SDL_Quit,0,_get_chunk_in,0,_get_pnum,0,_masi_test,0,_get_titl,0,_get_spee,0,_decode_start_st1,0,_cmplong,0,_test_p10c,0,_ptm_load,0,_tcb_load,0,_synth_mixer,0,_get_cmod,0,_get_main,0,_test_mp_noid,0,_dbm_test,0,_psm_test,0,_smix_mono_8bit_linear,0,_synth_reset733,0,_get_smpi,0,_smix_mono_16bit_spline_filter,0,_get_init,0,_far_load,0,_gal5_test,0,_get_pbod,0,_mtm_load,0,_test_ksm,0,_mmd1_load,0,_get_dapt,0,_decode_start_fix,0,_ims_load,0,__ZL10fill_audioPvPhi,0,_test_np2,0,_med4_load,0,_get_8smp,0,_test_tp3,0,__Z8mainloopv,0,_hsc_test,0,_no_load,0,_it_test,0,_get_song,0,_depack_tdd,0,_pt3_test,0,_get_pbod480,0,_get_emic,0,_get_plen478,0,_get_inst246,0,_it_load,0,_arch_load,0,_umx_load,0,_depack_kris,0,_st_load,0,_get_anam,0,_smix_stereo_16bit_nearest,0,_smix_mono_8bit_spline_filter,0,_smix_stereo_16bit_spline_filter,0,_dt_load,0,_get_smpd,0,_emod_load,0,_gdm_test,0,_gal4_load,0,_test_p4x,0,_test_eu,0,_ims_test,0,_test_pha,0,_test_AC1D,0,_depack_fuchs,0,_mmd3_test,0,_get_venv,0,_depack_fuzz,0,_test_np1,0,_mod_test,0,_dmf_test,0,_amd_test,0,_depack_GMC,0,_decode_p_st1,0,_dtt_load,0,_smix_stereo_16bit_linear,0,_ice_load,0,_fnk_load,0,_asylum_load,0,_get_patt170,0];
// EMSCRIPTEN_START_FUNCS
function __Z6renderv(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tick;
 var $i;
 var $j;
 var $yofs;
 var $ofs;
 var $pix;
 var $1=HEAP32[((28744)>>2)];
 var $2=_SDL_LockSurface($1);
 var $3=($2|0)<0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 label=12;break;
 case 3: 
 var $6=_SDL_GetTicks();
 $tick=$6;
 $yofs=0;
 $pix=0;
 $i=0;
 label=4;break;
 case 4: 
 var $8=$i;
 var $9=($8|0)<200;
 if($9){label=5;break;}else{label=11;break;}
 case 5: 
 $j=0;
 label=6;break;
 case 6: 
 var $12=$j;
 var $13=($12|0)<320;
 if($13){label=7;break;}else{label=9;break;}
 case 7: 
 var $15=$pix;
 var $16=HEAP32[((28824)>>2)];
 var $17=(($16+$15)|0);
 var $18=HEAP8[($17)];
 var $19=$i;
 var $20=((($19)*(320))&-1);
 var $21=$j;
 var $22=((($20)+($21))|0);
 var $23=HEAP32[((28744)>>2)];
 var $24=(($23+20)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+$22)|0);
 HEAP8[($26)]=$18;
 var $27=$pix;
 var $28=((($27)+(1))|0);
 $pix=$28;
 label=8;break;
 case 8: 
 var $30=$j;
 var $31=((($30)+(1))|0);
 $j=$31;
 label=6;break;
 case 9: 
 label=10;break;
 case 10: 
 var $34=$i;
 var $35=((($34)+(1))|0);
 $i=$35;
 label=4;break;
 case 11: 
 var $37=HEAP32[((28744)>>2)];
 _SDL_UnlockSurface($37);
 var $38=HEAP32[((28744)>>2)];
 _SDL_UpdateRect($38,0,0,320,200);
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z4flipPcS_($source,$desti){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $q;
 $1=$source;
 $2=$desti;
 $q=0;
 label=2;break;
 case 2: 
 var $4=$q;
 var $5=($4|0)<64000;
 if($5){label=3;break;}else{label=5;break;}
 case 3: 
 var $7=$q;
 var $8=$1;
 var $9=(($8+$7)|0);
 var $10=HEAP8[($9)];
 var $11=$q;
 var $12=$2;
 var $13=(($12+$11)|0);
 HEAP8[($13)]=$10;
 label=4;break;
 case 4: 
 var $15=$q;
 var $16=((($15)+(1))|0);
 $q=$16;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z3clsPc($paik){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $a;
 $1=$paik;
 var $2=$1;
 var $3=$2;
 $p=$3;
 $a=0;
 label=2;break;
 case 2: 
 var $5=$a;
 var $6=($5|0)<16000;
 if($6){label=3;break;}else{label=5;break;}
 case 3: 
 var $8=$a;
 var $9=$p;
 var $10=(($9+($8<<2))|0);
 HEAP32[(($10)>>2)]=0;
 label=4;break;
 case 4: 
 var $12=$a;
 var $13=((($12)+(1))|0);
 $a=$13;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z4zoomiiiiiiiiPcS_($sx1,$sy1,$sx2,$sy2,$dx1,$dy1,$dx2,$dy2,$sourc,$desti){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $deltax;
 var $deltay;
 var $deltax2;
 var $deltay2;
 var $q;
 var $w;
 var $e;
 var $aa;
 var $annax;
 var $valmix;
 var $annay;
 var $valmiy;
 var $a;
 var $b;
 $1=$sx1;
 $2=$sy1;
 $3=$sx2;
 $4=$sy2;
 $5=$dx1;
 $6=$dy1;
 $7=$dx2;
 $8=$dy2;
 $9=$sourc;
 $10=$desti;
 var $11=$7;
 var $12=$5;
 var $13=((($11)-($12))|0);
 $deltax=$13;
 var $14=$8;
 var $15=$6;
 var $16=((($14)-($15))|0);
 $deltay=$16;
 var $17=$3;
 var $18=$1;
 var $19=((($17)-($18))|0);
 $deltax2=$19;
 var $20=$4;
 var $21=$2;
 var $22=((($20)-($21))|0);
 $deltay2=$22;
 var $23=$6;
 var $24=((($23)*(320))&-1);
 var $25=$5;
 var $26=((($24)+($25))|0);
 var $27=$10;
 var $28=(($27+$26)|0);
 $10=$28;
 var $29=$deltay2;
 var $30=($29|0);
 var $31=$deltay;
 var $32=($31|0);
 var $33=($30)/($32);
 var $34=($33)*(256);
 var $35=(($34)&-1);
 $aa=$35;
 var $36=$aa;
 $annay=$36;
 var $37=$deltax2;
 var $38=($37|0);
 var $39=$deltax;
 var $40=($39|0);
 var $41=($38)/($40);
 var $42=($41)*(256);
 var $43=(($42)&-1);
 $aa=$43;
 var $44=$aa;
 $annax=$44;
 $valmiy=0;
 var $45=$6;
 $a=$45;
 label=2;break;
 case 2: 
 var $47=$a;
 var $48=$8;
 var $49=((($48)+(1))|0);
 var $50=($47|0)<($49|0);
 if($50){label=3;break;}else{label=9;break;}
 case 3: 
 var $52=$valmiy;
 var $53=$52>>8;
 var $54=$2;
 var $55=((($53)+($54))|0);
 $e=$55;
 var $56=$e;
 var $57=$56<<8;
 var $58=$e;
 var $59=$58<<6;
 var $60=((($57)+($59))|0);
 var $61=$1;
 var $62=((($60)+($61))|0);
 $e=$62;
 $valmix=0;
 var $63=$5;
 $b=$63;
 label=4;break;
 case 4: 
 var $65=$b;
 var $66=$7;
 var $67=((($66)+(1))|0);
 var $68=($65|0)<($67|0);
 if($68){label=5;break;}else{label=7;break;}
 case 5: 
 var $70=$valmix;
 var $71=$70>>8;
 var $72=$e;
 var $73=((($71)+($72))|0);
 $w=$73;
 var $74=$w;
 var $75=$9;
 var $76=(($75+$74)|0);
 var $77=HEAP8[($76)];
 var $78=$10;
 var $79=(($78+1)|0);
 $10=$79;
 HEAP8[($78)]=$77;
 var $80=$valmix;
 var $81=$annax;
 var $82=((($80)+($81))|0);
 $valmix=$82;
 label=6;break;
 case 6: 
 var $84=$b;
 var $85=((($84)+(1))|0);
 $b=$85;
 label=4;break;
 case 7: 
 var $87=$deltax;
 var $88=(((319)-($87))|0);
 var $89=$10;
 var $90=(($89+$88)|0);
 $10=$90;
 var $91=$valmiy;
 var $92=$annay;
 var $93=((($91)+($92))|0);
 $valmiy=$93;
 label=8;break;
 case 8: 
 var $95=$a;
 var $96=((($95)+(1))|0);
 $a=$96;
 label=2;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z9copytransiiiiiiPcS_($sx1,$sy1,$sx2,$sy2,$dx,$dy,$s,$d){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $w;
 var $a;
 var $q;
 var $b;
 var $o;
 $1=$sx1;
 $2=$sy1;
 $3=$sx2;
 $4=$sy2;
 $5=$dx;
 $6=$dy;
 $7=$s;
 $8=$d;
 var $9=$6;
 var $10=((($9)*(320))&-1);
 var $11=$5;
 var $12=((($10)+($11))|0);
 var $13=$1;
 var $14=((($12)-($13))|0);
 $w=$14;
 var $15=$2;
 $a=$15;
 label=2;break;
 case 2: 
 var $17=$a;
 var $18=$4;
 var $19=($17|0)<($18|0);
 if($19){label=3;break;}else{label=11;break;}
 case 3: 
 var $21=$a;
 var $22=$21<<8;
 var $23=$a;
 var $24=$23<<6;
 var $25=((($22)+($24))|0);
 $q=$25;
 var $26=$1;
 $b=$26;
 label=4;break;
 case 4: 
 var $28=$b;
 var $29=$3;
 var $30=($28|0)<($29|0);
 if($30){label=5;break;}else{label=9;break;}
 case 5: 
 var $32=$q;
 var $33=$b;
 var $34=((($32)+($33))|0);
 var $35=$7;
 var $36=(($35+$34)|0);
 var $37=HEAP8[($36)];
 $o=$37;
 var $38=$o;
 var $39=(($38<<24)>>24);
 var $40=($39|0)>0;
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 var $42=$o;
 var $43=$w;
 var $44=$b;
 var $45=((($43)+($44))|0);
 var $46=$8;
 var $47=(($46+$45)|0);
 HEAP8[($47)]=$42;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $50=$b;
 var $51=((($50)+(1))|0);
 $b=$51;
 label=4;break;
 case 9: 
 var $53=$w;
 var $54=((($53)+(320))|0);
 $w=$54;
 label=10;break;
 case 10: 
 var $56=$a;
 var $57=((($56)+(1))|0);
 $a=$57;
 label=2;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z6setpalPc($paletti){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $colors=sp;
 var $co;
 var $i;
 $1=$paletti;
 $co=0;
 $i=0;
 label=2;break;
 case 2: 
 var $3=$i;
 var $4=($3|0)<256;
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 var $6=$co;
 var $7=$1;
 var $8=(($7+$6)|0);
 var $9=HEAP8[($8)];
 var $10=$i;
 var $11=(($colors+($10<<2))|0);
 var $12=(($11)|0);
 HEAP8[($12)]=$9;
 var $13=$co;
 var $14=((($13)+(1))|0);
 var $15=$1;
 var $16=(($15+$14)|0);
 var $17=HEAP8[($16)];
 var $18=$i;
 var $19=(($colors+($18<<2))|0);
 var $20=(($19+1)|0);
 HEAP8[($20)]=$17;
 var $21=$co;
 var $22=((($21)+(2))|0);
 var $23=$1;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=$i;
 var $27=(($colors+($26<<2))|0);
 var $28=(($27+2)|0);
 HEAP8[($28)]=$25;
 var $29=$co;
 var $30=((($29)+(3))|0);
 $co=$30;
 label=4;break;
 case 4: 
 var $32=$i;
 var $33=((($32)+(1))|0);
 $i=$33;
 label=2;break;
 case 5: 
 var $35=HEAP32[((28744)>>2)];
 var $36=(($colors)|0);
 var $37=_SDL_SetPalette($35,3,$36,0,256);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z7katopcxPcS_iiS_($fln,$paikka,$sx,$sy,$paletti){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+912)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $header=sp;
 var $fp;
 var $biter;
 var $rle_counter;
 var $rle_value;
 var $palette=(sp)+(128);
 var $magic;
 var $ptr;
 var $curpos=(sp)+(896);
 var $y;
 var $bytes;
 var $ind;
 $1=$fln;
 $2=$paikka;
 $3=$sx;
 $4=$sy;
 $5=$paletti;
 $fp=0;
 var $6=$1;
 var $7=_fopen($6,27704);
 $fp=$7;
 var $8=$fp;
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=HEAP32[((_stderr)>>2)];
 var $12=$1;
 var $13=_fprintf($11,27672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 3: 
 var $15=$header;
 var $16=$fp;
 var $17=_fread($15,128,1,$16);
 var $18=(($header)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=($20|0)!=10;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=HEAP32[((_stderr)>>2)];
 var $24=(($header)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=_fprintf($23,25288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 5: 
 $rle_counter=0;
 $rle_value=0;
 var $29=$fp;
 var $30=_fgetpos($29,$curpos);
 var $31=$fp;
 var $32=_fseek($31,-769,2);
 var $33=$fp;
 var $34=_fgetc($33);
 var $35=(($34)&255);
 $magic=$35;
 var $36=$magic;
 var $37=($36&255);
 var $38=($37|0)!=12;
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=HEAP32[((_stderr)>>2)];
 var $41=$magic;
 var $42=($41&255);
 var $43=_fprintf($40,23872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$42,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 7: 
 var $45=$5;
 var $46=$fp;
 var $47=_fread($45,1,768,$46);
 var $48=$fp;
 var $49=_fsetpos($48,$curpos);
 $ind=0;
 $y=0;
 label=8;break;
 case 8: 
 var $51=$y;
 var $52=$4;
 var $53=($51|0)<($52|0);
 if($53){label=9;break;}else{label=19;break;}
 case 9: 
 var $55=(($header+66)|0);
 var $56=(((((HEAPU8[($55)])|(HEAPU8[((($55)+(1))|0)]<<8))<<16)>>16));
 var $57=($56&65535);
 $bytes=$57;
 label=10;break;
 case 10: 
 var $59=$bytes;
 var $60=((($59)-(1))|0);
 $bytes=$60;
 var $61=($59|0)!=0;
 if($61){label=11;break;}else{label=17;break;}
 case 11: 
 var $63=$rle_counter;
 var $64=($63|0)==0;
 if($64){label=12;break;}else{label=16;break;}
 case 12: 
 var $66=$fp;
 var $67=_fgetc($66);
 $rle_value=$67;
 var $68=($67|0)<192;
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 $rle_counter=1;
 label=15;break;
 case 14: 
 var $71=$rle_value;
 var $72=((($71)-(192))|0);
 $rle_counter=$72;
 var $73=$fp;
 var $74=_fgetc($73);
 $rle_value=$74;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $77=$rle_counter;
 var $78=((($77)-(1))|0);
 $rle_counter=$78;
 var $79=$rle_value;
 var $80=(($79)&255);
 var $81=$ind;
 var $82=$2;
 var $83=(($82+$81)|0);
 HEAP8[($83)]=$80;
 var $84=$ind;
 var $85=((($84)+(1))|0);
 $ind=$85;
 label=10;break;
 case 17: 
 label=18;break;
 case 18: 
 var $88=$y;
 var $89=((($88)+(1))|0);
 $y=$89;
 label=8;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z12MIDASvuMeteri($i){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$i;
 var $2=$1;
 var $3=($2|0);
 var $4=_SDL_GetTicks();
 var $5=($4>>>0);
 var $6=($5)*((0.01));
 var $7=($3)+($6);
 var $8=Math_cos($7);
 var $9=($8)*(8);
 var $10=$1;
 var $11=($10|0);
 var $12=_SDL_GetTicks();
 var $13=($12>>>0);
 var $14=($13)*((0.02));
 var $15=($11)+($14);
 var $16=Math_sin($15);
 var $17=($9)*($16);
 var $18=($17)+(12);
 var $19=(($18)&-1);
 STACKTOP=sp;return $19;
}
function __Z10sound_initPcii($ctx,$sampling_rate,$channels){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $a=sp;
 $2=$ctx;
 $3=$sampling_rate;
 $4=$channels;
 var $5=$3;
 var $6=(($a)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=(($a+4)|0);
 HEAP16[(($7)>>1)]=-32752;
 var $8=$4;
 var $9=(($8)&255);
 var $10=(($a+6)|0);
 HEAP8[($10)]=$9;
 var $11=(($a+8)|0);
 HEAP16[(($11)>>1)]=2048;
 var $12=(($a+16)|0);
 HEAP32[(($12)>>2)]=504;
 var $13=$2;
 var $14=(($a+20)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=_SDL_OpenAudio($a,0);
 var $16=($15|0)<0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=HEAP32[((_stderr)>>2)];
 var $19=_SDL_GetError();
 var $20=_fprintf($18,23128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=-1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $23=$1;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL10fill_audioPvPhi($udata,$stream,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$udata;
 $2=$stream;
 $3=$len;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_xmp_play_buffer($4,$5,$6,0);
 STACKTOP=sp;return;
}
function __Z8mainloopv(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1608)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $i;
 var $x;
 var $q;
 var $w;
 var $b;
 var $c;
 var $a;
 var $b1;
 var $o;
 var $k;
 var $k2;
 var $a2;
 var $w3;
 var $q4;
 var $a5;
 var $b6;
 var $o7;
 var $k8;
 var $a9;
 var $b10;
 var $o11;
 var $k12;
 var $k213;
 var $q14;
 var $p;
 var $a15;
 var $m;
 var $b16;
 var $o17;
 var $n;
 var $c18;
 var $d;
 var $jo;
 var $ja;
 var $jo19;
 var $ja20;
 var $jo21;
 var $ja22;
 var $jo23;
 var $ja24;
 var $jo25;
 var $ja26;
 var $jo27;
 var $ja28;
 var $jo29;
 var $ja30;
 var $ka;
 var $ko;
 var $q31;
 var $a32;
 var $b33;
 var $o34;
 var $jo35;
 var $ja36;
 var $jo37;
 var $ja38;
 var $jo39;
 var $ja40;
 var $jo41;
 var $ja42;
 var $jo43;
 var $ja44;
 var $jo45;
 var $ja46;
 var $jo47;
 var $ja48;
 var $ka49;
 var $ko50;
 var $q51;
 var $a52;
 var $b53;
 var $o54;
 var $q55;
 var $p56;
 var $a57;
 var $b58;
 var $o59;
 var $q60;
 var $p61;
 var $a62;
 var $b63;
 var $a64;
 var $q65;
 var $a66;
 var $b67;
 var $c68;
 var $1=HEAP32[((28968)>>2)];
 var $2=((($1)+(1))|0);
 HEAP32[((28968)>>2)]=$2;
 var $3=HEAP32[((28984)>>2)];
 _xmp_get_frame_info($3,$info);
 var $4=(($info+8)|0);
 var $5=HEAP32[(($4)>>2)];
 HEAP32[((28752)>>2)]=$5;
 var $6=(($info)|0);
 var $7=HEAP32[(($6)>>2)];
 HEAP32[((28760)>>2)]=$7;
 var $8=HEAP8[(32080)];
 var $9=((($8)+(1))&255);
 HEAP8[(32080)]=$9;
 var $10=HEAP32[((28704)>>2)];
 var $11=($10|0)==1;
 var $12=($11&1);
 var $13=HEAP32[((28760)>>2)];
 var $14=($13>>>0)<1;
 var $15=($14&1);
 var $16=$12&$15;
 var $17=($16|0)!=0;
 if($17){label=2;break;}else{label=11;break;}
 case 2: 
 var $19=HEAP32[((28752)>>2)];
 var $20=(((($19>>>0))/(4))&-1);
 var $21=($20|0)!=0;
 if($21){label=3;break;}else{var $24=0;label=4;break;}
 case 3: 
 var $24=1;label=4;break;
 case 4: 
 var $24;
 var $25=($24&1);
 $i=$25;
 var $26=$i;
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $29=HEAP32[((28936)>>2)];
 var $30=HEAP32[((28824)>>2)];
 __Z4flipPcS_($29,$30);
 label=10;break;
 case 6: 
 var $32=$i;
 var $33=($32|0)==1;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=HEAP32[((28940)>>2)];
 var $36=HEAP32[((28824)>>2)];
 __Z4flipPcS_($35,$36);
 label=9;break;
 case 8: 
 var $38=HEAP32[((28944)>>2)];
 var $39=HEAP32[((28824)>>2)];
 __Z4flipPcS_($38,$39);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=221;break;
 case 11: 
 var $43=HEAP32[((28704)>>2)];
 var $44=($43|0)==1;
 var $45=($44&1);
 var $46=HEAP32[((28760)>>2)];
 var $47=($46>>>0)<3;
 var $48=($47&1);
 var $49=$45&$48;
 var $50=($49|0)!=0;
 if($50){label=12;break;}else{label=33;break;}
 case 12: 
 $x=64;
 var $52=HEAP32[((28760)>>2)];
 var $53=($52|0)==1;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 $x=0;
 label=14;break;
 case 14: 
 var $56=HEAP32[((28752)>>2)];
 var $57=$x;
 var $58=((($57)+($56))|0);
 $x=$58;
 $q=0;
 var $59=$x;
 $w=$59;
 $b=0;
 label=15;break;
 case 15: 
 var $61=$b;
 var $62=($61|0)<200;
 if($62){label=16;break;}else{label=22;break;}
 case 16: 
 $c=0;
 label=17;break;
 case 17: 
 var $65=$c;
 var $66=($65|0)<320;
 if($66){label=18;break;}else{label=20;break;}
 case 18: 
 var $68=$w;
 var $69=HEAP32[((28856)>>2)];
 var $70=(($69+$68)|0);
 var $71=HEAP8[($70)];
 var $72=$q;
 var $73=HEAP32[((28824)>>2)];
 var $74=(($73+$72)|0);
 HEAP8[($74)]=$71;
 var $75=$q;
 var $76=((($75)+(1))|0);
 $q=$76;
 var $77=$w;
 var $78=((($77)+(1))|0);
 $w=$78;
 label=19;break;
 case 19: 
 var $80=$c;
 var $81=((($80)+(1))|0);
 $c=$81;
 label=17;break;
 case 20: 
 var $83=$w;
 var $84=((($83)+(320))|0);
 $w=$84;
 label=21;break;
 case 21: 
 var $86=$b;
 var $87=((($86)+(1))|0);
 $b=$87;
 label=15;break;
 case 22: 
 var $89=$x;
 var $90=($89<<1);
 var $91=((($90)+(32000))|0);
 $q=$91;
 $w=0;
 $a=0;
 label=23;break;
 case 23: 
 var $93=$a;
 var $94=($93|0)<100;
 if($94){label=24;break;}else{label=32;break;}
 case 24: 
 $b1=0;
 label=25;break;
 case 25: 
 var $97=$b1;
 var $98=($97|0)<160;
 if($98){label=26;break;}else{label=30;break;}
 case 26: 
 var $100=$w;
 var $101=HEAP32[((28892)>>2)];
 var $102=(($101+$100)|0);
 var $103=HEAP8[($102)];
 var $104=(($103<<24)>>24);
 $o=$104;
 var $105=$o;
 var $106=($105|0)!=0;
 if($106){label=27;break;}else{label=28;break;}
 case 27: 
 var $108=$o;
 var $109=(($108)&255);
 var $110=$q;
 var $111=HEAP32[((28824)>>2)];
 var $112=(($111+$110)|0);
 HEAP8[($112)]=$109;
 label=28;break;
 case 28: 
 var $114=$q;
 var $115=((($114)+(1))|0);
 $q=$115;
 var $116=$w;
 var $117=((($116)+(1))|0);
 $w=$117;
 label=29;break;
 case 29: 
 var $119=$b1;
 var $120=((($119)+(1))|0);
 $b1=$120;
 label=25;break;
 case 30: 
 var $122=$q;
 var $123=((($122)+(160))|0);
 $q=$123;
 var $124=$w;
 var $125=((($124)+(160))|0);
 $w=$125;
 label=31;break;
 case 31: 
 var $127=$a;
 var $128=((($127)+(1))|0);
 $a=$128;
 label=23;break;
 case 32: 
 label=220;break;
 case 33: 
 var $131=HEAP32[((28704)>>2)];
 var $132=($131|0)==2;
 var $133=($132&1);
 var $134=HEAP32[((28760)>>2)];
 var $135=($134>>>0)<1;
 var $136=($135&1);
 var $137=$133&$136;
 var $138=($137|0)!=0;
 if($138){label=34;break;}else{label=35;break;}
 case 34: 
 var $140=HEAP8[(32080)];
 var $141=($140&255);
 var $142=HEAP32[((28696)>>2)];
 var $143=((($141)+($142))|0);
 $a2=$143;
 var $144=$a2;
 var $145=($144|0);
 var $146=($145)/(20);
 var $147=$146;
 var $148=Math_sin($147);
 var $149=($148)*(10);
 var $150=($149)+(10);
 var $151=(($150)&-1);
 $k=$151;
 var $152=$a2;
 var $153=($152|0);
 var $154=($153)/(20);
 var $155=$154;
 var $156=Math_cos($155);
 var $157=($156)*(13);
 var $158=($157)+(13);
 var $159=(($158)&-1);
 $k2=$159;
 var $160=$k2;
 var $161=$k;
 var $162=$k2;
 var $163=(((319)-($162))|0);
 var $164=$k;
 var $165=(((199)-($164))|0);
 var $166=HEAP32[((28944)>>2)];
 var $167=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($160,$161,319,199,0,0,$163,$165,$166,$167);
 var $168=__Z12MIDASvuMeteri(0);
 var $169=__Z12MIDASvuMeteri(1);
 var $170=((($168)+($169))|0);
 var $171=__Z12MIDASvuMeteri(2);
 var $172=((($170)+($171))|0);
 var $173=HEAP32[((28696)>>2)];
 var $174=((($173)+($172))|0);
 HEAP32[((28696)>>2)]=$174;
 label=219;break;
 case 35: 
 var $176=HEAP32[((28760)>>2)];
 var $177=($176|0)==0;
 if($177){label=36;break;}else{label=65;break;}
 case 36: 
 var $179=HEAP32[((28752)>>2)];
 var $180=($179>>>0)<32;
 if($180){label=37;break;}else{label=57;break;}
 case 37: 
 $q4=16080;
 var $182=HEAP32[((28752)>>2)];
 var $183=($182>>>0)<8;
 if($183){label=38;break;}else{label=39;break;}
 case 38: 
 $w3=0;
 label=48;break;
 case 39: 
 var $186=HEAP32[((28752)>>2)];
 var $187=($186>>>0)<16;
 if($187){label=40;break;}else{label=41;break;}
 case 40: 
 $w3=160;
 label=47;break;
 case 41: 
 var $190=HEAP32[((28752)>>2)];
 var $191=($190>>>0)<24;
 if($191){label=42;break;}else{label=43;break;}
 case 42: 
 $w3=32000;
 label=46;break;
 case 43: 
 var $194=HEAP32[((28752)>>2)];
 var $195=($194>>>0)<32;
 if($195){label=44;break;}else{label=45;break;}
 case 44: 
 $w3=32160;
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 $a5=0;
 label=49;break;
 case 49: 
 var $202=$a5;
 var $203=($202|0)<99;
 if($203){label=50;break;}else{label=56;break;}
 case 50: 
 $b6=0;
 label=51;break;
 case 51: 
 var $206=$b6;
 var $207=($206|0)<159;
 if($207){label=52;break;}else{label=54;break;}
 case 52: 
 var $209=$w3;
 var $210=HEAP32[((28892)>>2)];
 var $211=(($210+$209)|0);
 var $212=HEAP8[($211)];
 $o7=$212;
 var $213=$o7;
 var $214=$q4;
 var $215=HEAP32[((28824)>>2)];
 var $216=(($215+$214)|0);
 HEAP8[($216)]=$213;
 var $217=$q4;
 var $218=((($217)+(1))|0);
 $q4=$218;
 var $219=$w3;
 var $220=((($219)+(1))|0);
 $w3=$220;
 label=53;break;
 case 53: 
 var $222=$b6;
 var $223=((($222)+(1))|0);
 $b6=$223;
 label=51;break;
 case 54: 
 var $225=$q4;
 var $226=((($225)+(161))|0);
 $q4=$226;
 var $227=$w3;
 var $228=((($227)+(161))|0);
 $w3=$228;
 label=55;break;
 case 55: 
 var $230=$a5;
 var $231=((($230)+(1))|0);
 $a5=$231;
 label=49;break;
 case 56: 
 label=64;break;
 case 57: 
 var $234=__Z12MIDASvuMeteri(0);
 var $235=__Z12MIDASvuMeteri(1);
 var $236=((($234)+($235))|0);
 var $237=__Z12MIDASvuMeteri(2);
 var $238=((($236)+($237))|0);
 var $239=((($238)+(20))|0);
 $k8=$239;
 var $240=HEAP32[((28868)>>2)];
 var $241=HEAP32[((28824)>>2)];
 __Z4flipPcS_($240,$241);
 $a9=0;
 label=58;break;
 case 58: 
 var $243=$a9;
 var $244=($243|0)<769;
 if($244){label=59;break;}else{label=63;break;}
 case 59: 
 var $246=$a9;
 var $247=HEAP32[((28776)>>2)];
 var $248=(($247+$246)|0);
 var $249=HEAP8[($248)];
 var $250=(($249<<24)>>24);
 $b10=$250;
 var $251=$b10;
 var $252=$k8;
 var $253=(Math_imul($251,$252)|0);
 var $254=$253>>5;
 $b10=$254;
 var $255=$b10;
 var $256=($255|0)>63;
 if($256){label=60;break;}else{label=61;break;}
 case 60: 
 $b10=63;
 label=61;break;
 case 61: 
 var $259=$b10;
 var $260=(($259)&255);
 var $261=$a9;
 var $262=HEAP32[((28768)>>2)];
 var $263=(($262+$261)|0);
 HEAP8[($263)]=$260;
 label=62;break;
 case 62: 
 var $265=$a9;
 var $266=((($265)+(1))|0);
 $a9=$266;
 label=58;break;
 case 63: 
 var $268=HEAP32[((28768)>>2)];
 __Z6setpalPc($268);
 label=64;break;
 case 64: 
 label=218;break;
 case 65: 
 var $271=HEAP32[((28760)>>2)];
 var $272=($271>>>0)<3;
 if($272){label=66;break;}else{label=74;break;}
 case 66: 
 var $274=HEAP32[((28776)>>2)];
 __Z6setpalPc($274);
 var $275=__Z12MIDASvuMeteri(2);
 $o11=$275;
 var $276=__Z12MIDASvuMeteri(0);
 var $277=__Z12MIDASvuMeteri(1);
 var $278=((($276)+($277))|0);
 var $279=$o11;
 var $280=((($278)+($279))|0);
 $k12=$280;
 var $281=$k12;
 var $282=($281|0);
 var $283=($282)*((1.4));
 var $284=(($283)&-1);
 $k213=$284;
 var $285=$k213;
 var $286=$k12;
 var $287=$k213;
 var $288=(((319)-($287))|0);
 var $289=$k12;
 var $290=(((199)-($289))|0);
 var $291=HEAP32[((28916)>>2)];
 var $292=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($285,$286,$288,$290,0,0,319,199,$291,$292);
 var $293=HEAP32[((28760)>>2)];
 var $294=($293|0)==2;
 if($294){label=67;break;}else{label=73;break;}
 case 67: 
 var $296=$o11;
 var $297=($296|0)>5;
 if($297){label=68;break;}else{label=72;break;}
 case 68: 
 var $299=HEAP32[((28752)>>2)];
 var $300=($299>>>0)<32;
 if($300){label=69;break;}else{label=70;break;}
 case 69: 
 var $302=HEAP32[((28924)>>2)];
 var $303=HEAP32[((28824)>>2)];
 __Z9copytransiiiiiiPcS_(80,80,280,120,0,0,$302,$303);
 label=71;break;
 case 70: 
 var $305=HEAP32[((28924)>>2)];
 var $306=HEAP32[((28824)>>2)];
 __Z9copytransiiiiiiPcS_(80,50,280,110,110,130,$305,$306);
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 label=217;break;
 case 74: 
 var $311=HEAP32[((28760)>>2)];
 var $312=($311>>>0)<5;
 if($312){label=75;break;}else{label=79;break;}
 case 75: 
 var $314=HEAP32[((28752)>>2)];
 var $315=($314>>>0)>39;
 var $316=($315&1);
 var $317=HEAP32[((28752)>>2)];
 var $318=($317>>>0)<53;
 var $319=($318&1);
 var $320=$316&$319;
 var $321=($320|0)!=0;
 if($321){label=76;break;}else{label=77;break;}
 case 76: 
 var $323=HEAP32[((28904)>>2)];
 var $324=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_(30,30,289,169,0,0,319,199,$323,$324);
 label=78;break;
 case 77: 
 var $326=HEAP32[((28904)>>2)];
 var $327=HEAP32[((28824)>>2)];
 __Z4flipPcS_($326,$327);
 label=78;break;
 case 78: 
 label=216;break;
 case 79: 
 var $330=HEAP32[((28760)>>2)];
 var $331=($330>>>0)<7;
 if($331){label=80;break;}else{label=94;break;}
 case 80: 
 var $333=HEAP32[((28872)>>2)];
 var $334=HEAP32[((28824)>>2)];
 __Z4flipPcS_($333,$334);
 $q14=0;
 var $335=HEAP32[((28752)>>2)];
 var $336=$335>>>3;
 var $337=(($336)&255);
 $p=$337;
 $a15=0;
 label=81;break;
 case 81: 
 var $339=$a15;
 var $340=($339|0)<199;
 if($340){label=82;break;}else{label=93;break;}
 case 82: 
 var $342=$a15;
 var $343=HEAP8[(32080)];
 var $344=($343&255);
 var $345=((($342)+($344))|0);
 var $346=($345|0);
 var $347=$346;
 var $348=Math_sin($347);
 var $349=($348)*(127);
 var $350=($349)+(128);
 var $351=(($350)&-1);
 $m=$351;
 $b16=0;
 label=83;break;
 case 83: 
 var $353=$b16;
 var $354=($353|0)<319;
 if($354){label=84;break;}else{label=91;break;}
 case 84: 
 var $356=$q14;
 var $357=HEAP32[((28880)>>2)];
 var $358=(($357+$356)|0);
 var $359=HEAP8[($358)];
 $o17=$359;
 var $360=$o17;
 var $361=(($360<<24)>>24);
 var $362=($361|0)>0;
 var $363=($362&1);
 var $364=$o17;
 var $365=(($364<<24)>>24);
 var $366=$p;
 var $367=(($366<<24)>>24);
 var $368=($365|0)<=($367|0);
 var $369=($368&1);
 var $370=$363&$369;
 var $371=($370|0)!=0;
 if($371){label=85;break;}else{label=86;break;}
 case 85: 
 var $373=$q14;
 var $374=((($373)-(1))|0);
 var $375=HEAP32[((28824)>>2)];
 var $376=(($375+$374)|0);
 HEAP8[($376)]=0;
 var $377=$o17;
 var $378=$q14;
 var $379=HEAP32[((28824)>>2)];
 var $380=(($379+$378)|0);
 HEAP8[($380)]=$377;
 label=89;break;
 case 86: 
 var $382=$q14;
 var $383=HEAP32[((28872)>>2)];
 var $384=(($383+$382)|0);
 var $385=HEAP8[($384)];
 var $386=(($385<<24)>>24);
 var $387=($386|0)==0;
 if($387){label=87;break;}else{label=88;break;}
 case 87: 
 var $389=$b16;
 var $390=HEAP8[(32080)];
 var $391=($390&255);
 var $392=((($389)+($391))|0);
 var $393=($392|0);
 var $394=$393;
 var $395=Math_sin($394);
 var $396=($395)*(127);
 var $397=($396)+(128);
 var $398=(($397)&-1);
 $n=$398;
 var $399=$n;
 var $400=$399<<8;
 var $401=$m;
 var $402=((($400)+($401))|0);
 $c18=$402;
 var $403=$c18;
 var $404=HEAP32[((28800)>>2)];
 var $405=(($404+$403)|0);
 var $406=HEAP8[($405)];
 var $407=$q14;
 var $408=HEAP32[((28824)>>2)];
 var $409=(($408+$407)|0);
 HEAP8[($409)]=$406;
 label=88;break;
 case 88: 
 label=89;break;
 case 89: 
 var $412=$q14;
 var $413=((($412)+(1))|0);
 $q14=$413;
 label=90;break;
 case 90: 
 var $415=$b16;
 var $416=((($415)+(1))|0);
 $b16=$416;
 label=83;break;
 case 91: 
 label=92;break;
 case 92: 
 var $419=$a15;
 var $420=((($419)+(1))|0);
 $a15=$420;
 label=81;break;
 case 93: 
 label=215;break;
 case 94: 
 var $423=HEAP32[((28760)>>2)];
 var $424=($423>>>0)<9;
 if($424){label=95;break;}else{label=96;break;}
 case 95: 
 var $426=__Z12MIDASvuMeteri(3);
 var $427=__Z12MIDASvuMeteri(4);
 var $428=((($426)+($427))|0);
 var $429=__Z12MIDASvuMeteri(5);
 var $430=((($428)+($429))|0);
 $d=$430;
 var $431=$d;
 var $432=$d;
 var $433=(((319)-($432))|0);
 var $434=HEAP32[((28912)>>2)];
 var $435=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($431,0,$433,199,0,0,319,199,$434,$435);
 label=214;break;
 case 96: 
 var $437=HEAP32[((28760)>>2)];
 var $438=($437>>>0)<10;
 if($438){label=97;break;}else{label=129;break;}
 case 97: 
 var $440=HEAP32[((28752)>>2)];
 var $441=($440>>>0)<4;
 if($441){label=98;break;}else{label=99;break;}
 case 98: 
 var $443=_rand();
 var $444=(((($443|0))%(10))&-1);
 $jo=$444;
 var $445=_rand();
 var $446=(((($445|0))%(10))&-1);
 $ja=$446;
 var $447=$jo;
 var $448=$ja;
 var $449=$jo;
 var $450=((($449)+(309))|0);
 var $451=$ja;
 var $452=((($451)+(189))|0);
 var $453=HEAP32[((28884)>>2)];
 var $454=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($447,$448,$450,$452,0,0,319,199,$453,$454);
 label=128;break;
 case 99: 
 var $456=HEAP32[((28752)>>2)];
 var $457=($456>>>0)<8;
 if($457){label=100;break;}else{label=101;break;}
 case 100: 
 var $459=_rand();
 var $460=(((($459|0))%(10))&-1);
 $jo19=$460;
 var $461=_rand();
 var $462=(((($461|0))%(10))&-1);
 $ja20=$462;
 var $463=$jo19;
 var $464=$ja20;
 var $465=$jo19;
 var $466=((($465)+(309))|0);
 var $467=$ja20;
 var $468=((($467)+(189))|0);
 var $469=HEAP32[((28888)>>2)];
 var $470=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($463,$464,$466,$468,0,0,319,199,$469,$470);
 label=127;break;
 case 101: 
 var $472=HEAP32[((28752)>>2)];
 var $473=($472>>>0)<16;
 if($473){label=102;break;}else{label=103;break;}
 case 102: 
 var $475=_rand();
 var $476=(((($475|0))%(10))&-1);
 $jo21=$476;
 var $477=_rand();
 var $478=(((($477|0))%(10))&-1);
 $ja22=$478;
 var $479=$jo21;
 var $480=$ja22;
 var $481=$jo21;
 var $482=((($481)+(309))|0);
 var $483=$ja22;
 var $484=((($483)+(189))|0);
 var $485=HEAP32[((28920)>>2)];
 var $486=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($479,$480,$482,$484,0,0,319,199,$485,$486);
 label=126;break;
 case 103: 
 var $488=HEAP32[((28752)>>2)];
 var $489=($488>>>0)<24;
 if($489){label=104;break;}else{label=105;break;}
 case 104: 
 var $491=_rand();
 var $492=(((($491|0))%(10))&-1);
 $jo23=$492;
 var $493=_rand();
 var $494=(((($493|0))%(10))&-1);
 $ja24=$494;
 var $495=$jo23;
 var $496=$ja24;
 var $497=$jo23;
 var $498=((($497)+(309))|0);
 var $499=$ja24;
 var $500=((($499)+(189))|0);
 var $501=HEAP32[((28884)>>2)];
 var $502=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($495,$496,$498,$500,0,0,319,199,$501,$502);
 label=125;break;
 case 105: 
 var $504=HEAP32[((28752)>>2)];
 var $505=($504>>>0)<28;
 if($505){label=106;break;}else{label=107;break;}
 case 106: 
 var $507=_rand();
 var $508=(((($507|0))%(10))&-1);
 $jo25=$508;
 var $509=_rand();
 var $510=(((($509|0))%(10))&-1);
 $ja26=$510;
 var $511=$jo25;
 var $512=$ja26;
 var $513=$jo25;
 var $514=((($513)+(309))|0);
 var $515=$ja26;
 var $516=((($515)+(189))|0);
 var $517=HEAP32[((28888)>>2)];
 var $518=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($511,$512,$514,$516,0,0,319,199,$517,$518);
 label=124;break;
 case 107: 
 var $520=HEAP32[((28752)>>2)];
 var $521=($520>>>0)<32;
 if($521){label=108;break;}else{label=109;break;}
 case 108: 
 var $523=_rand();
 var $524=(((($523|0))%(10))&-1);
 $jo27=$524;
 var $525=_rand();
 var $526=(((($525|0))%(10))&-1);
 $ja28=$526;
 var $527=$jo27;
 var $528=$ja28;
 var $529=$jo27;
 var $530=((($529)+(309))|0);
 var $531=$ja28;
 var $532=((($531)+(189))|0);
 var $533=HEAP32[((28920)>>2)];
 var $534=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($527,$528,$530,$532,0,0,319,199,$533,$534);
 label=123;break;
 case 109: 
 var $536=HEAP32[((28752)>>2)];
 var $537=($536>>>0)>51;
 var $538=($537&1);
 var $539=HEAP32[((28752)>>2)];
 var $540=($539>>>0)<58;
 var $541=($540&1);
 var $542=$538&$541;
 var $543=($542|0)!=0;
 if($543){label=110;break;}else{label=111;break;}
 case 110: 
 var $545=_rand();
 var $546=(((($545|0))%(10))&-1);
 $jo29=$546;
 var $547=_rand();
 var $548=(((($547|0))%(10))&-1);
 $ja30=$548;
 var $549=$jo29;
 var $550=$ja30;
 var $551=$ja30;
 var $552=((($551)+(309))|0);
 var $553=$jo29;
 var $554=((($553)+(189))|0);
 var $555=HEAP32[((28884)>>2)];
 var $556=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($549,$550,$552,$554,0,0,319,199,$555,$556);
 label=122;break;
 case 111: 
 var $558=_rand();
 var $559=(((($558|0))%(40))&-1);
 $ka=$559;
 var $560=_rand();
 var $561=(((($560|0))%(30))&-1);
 $ko=$561;
 var $562=$ka;
 var $563=$ko;
 var $564=$ka;
 var $565=((($564)+(160))|0);
 var $566=$ko;
 var $567=((($566)+(100))|0);
 var $568=HEAP32[((28904)>>2)];
 var $569=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($562,$563,$565,$567,0,0,319,199,$568,$569);
 $q31=0;
 $a32=0;
 label=112;break;
 case 112: 
 var $571=$a32;
 var $572=($571|0)<100;
 if($572){label=113;break;}else{label=121;break;}
 case 113: 
 $b33=0;
 label=114;break;
 case 114: 
 var $575=$b33;
 var $576=($575|0)<160;
 if($576){label=115;break;}else{label=119;break;}
 case 115: 
 var $578=$q31;
 var $579=((($578)+(32160))|0);
 var $580=HEAP32[((28892)>>2)];
 var $581=(($580+$579)|0);
 var $582=HEAP8[($581)];
 var $583=(($582<<24)>>24);
 $o34=$583;
 var $584=$o34;
 var $585=($584|0)!=0;
 if($585){label=116;break;}else{label=117;break;}
 case 116: 
 var $587=$o34;
 var $588=(($587)&255);
 var $589=$q31;
 var $590=((($589)+(24120))|0);
 var $591=HEAP32[((28824)>>2)];
 var $592=(($591+$590)|0);
 HEAP8[($592)]=$588;
 label=117;break;
 case 117: 
 var $594=$q31;
 var $595=((($594)+(1))|0);
 $q31=$595;
 label=118;break;
 case 118: 
 var $597=$b33;
 var $598=((($597)+(1))|0);
 $b33=$598;
 label=114;break;
 case 119: 
 var $600=$q31;
 var $601=((($600)+(160))|0);
 $q31=$601;
 label=120;break;
 case 120: 
 var $603=$a32;
 var $604=((($603)+(1))|0);
 $a32=$604;
 label=112;break;
 case 121: 
 label=122;break;
 case 122: 
 label=123;break;
 case 123: 
 label=124;break;
 case 124: 
 label=125;break;
 case 125: 
 label=126;break;
 case 126: 
 label=127;break;
 case 127: 
 label=128;break;
 case 128: 
 label=213;break;
 case 129: 
 var $614=HEAP32[((28760)>>2)];
 var $615=($614>>>0)<11;
 if($615){label=130;break;}else{label=167;break;}
 case 130: 
 var $617=HEAP32[((28752)>>2)];
 var $618=($617>>>0)<4;
 if($618){label=131;break;}else{label=132;break;}
 case 131: 
 var $620=_rand();
 var $621=(((($620|0))%(10))&-1);
 $jo35=$621;
 var $622=_rand();
 var $623=(((($622|0))%(10))&-1);
 $ja36=$623;
 var $624=$jo35;
 var $625=$ja36;
 var $626=$jo35;
 var $627=((($626)+(309))|0);
 var $628=$ja36;
 var $629=((($628)+(189))|0);
 var $630=HEAP32[((28868)>>2)];
 var $631=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($624,$625,$627,$629,0,0,319,199,$630,$631);
 label=161;break;
 case 132: 
 var $633=HEAP32[((28752)>>2)];
 var $634=($633>>>0)<8;
 if($634){label=133;break;}else{label=134;break;}
 case 133: 
 var $636=_rand();
 var $637=(((($636|0))%(10))&-1);
 $jo37=$637;
 var $638=_rand();
 var $639=(((($638|0))%(10))&-1);
 $ja38=$639;
 var $640=$jo37;
 var $641=$ja38;
 var $642=$jo37;
 var $643=((($642)+(309))|0);
 var $644=$ja38;
 var $645=((($644)+(189))|0);
 var $646=HEAP32[((28872)>>2)];
 var $647=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($640,$641,$643,$645,0,0,319,199,$646,$647);
 label=160;break;
 case 134: 
 var $649=HEAP32[((28752)>>2)];
 var $650=($649>>>0)<16;
 if($650){label=135;break;}else{label=136;break;}
 case 135: 
 var $652=_rand();
 var $653=(((($652|0))%(10))&-1);
 $jo39=$653;
 var $654=_rand();
 var $655=(((($654|0))%(10))&-1);
 $ja40=$655;
 var $656=$jo39;
 var $657=$ja40;
 var $658=$jo39;
 var $659=((($658)+(309))|0);
 var $660=$ja40;
 var $661=((($660)+(189))|0);
 var $662=HEAP32[((28876)>>2)];
 var $663=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($656,$657,$659,$661,0,0,319,199,$662,$663);
 label=159;break;
 case 136: 
 var $665=HEAP32[((28752)>>2)];
 var $666=($665>>>0)<24;
 if($666){label=137;break;}else{label=138;break;}
 case 137: 
 var $668=_rand();
 var $669=(((($668|0))%(10))&-1);
 $jo41=$669;
 var $670=_rand();
 var $671=(((($670|0))%(10))&-1);
 $ja42=$671;
 var $672=$jo41;
 var $673=$ja42;
 var $674=$jo41;
 var $675=((($674)+(309))|0);
 var $676=$ja42;
 var $677=((($676)+(189))|0);
 var $678=HEAP32[((28880)>>2)];
 var $679=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($672,$673,$675,$677,0,0,319,199,$678,$679);
 label=158;break;
 case 138: 
 var $681=HEAP32[((28752)>>2)];
 var $682=($681>>>0)<28;
 if($682){label=139;break;}else{label=140;break;}
 case 139: 
 var $684=_rand();
 var $685=(((($684|0))%(10))&-1);
 $jo43=$685;
 var $686=_rand();
 var $687=(((($686|0))%(10))&-1);
 $ja44=$687;
 var $688=$jo43;
 var $689=$ja44;
 var $690=$jo43;
 var $691=((($690)+(309))|0);
 var $692=$ja44;
 var $693=((($692)+(189))|0);
 var $694=HEAP32[((28884)>>2)];
 var $695=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($688,$689,$691,$693,0,0,319,199,$694,$695);
 label=157;break;
 case 140: 
 var $697=HEAP32[((28752)>>2)];
 var $698=($697>>>0)<32;
 if($698){label=141;break;}else{label=142;break;}
 case 141: 
 var $700=_rand();
 var $701=(((($700|0))%(10))&-1);
 $jo45=$701;
 var $702=_rand();
 var $703=(((($702|0))%(10))&-1);
 $ja46=$703;
 var $704=$jo45;
 var $705=$ja46;
 var $706=$jo45;
 var $707=((($706)+(309))|0);
 var $708=$ja46;
 var $709=((($708)+(189))|0);
 var $710=HEAP32[((28888)>>2)];
 var $711=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($704,$705,$707,$709,0,0,319,199,$710,$711);
 label=156;break;
 case 142: 
 var $713=HEAP32[((28752)>>2)];
 var $714=($713>>>0)>51;
 var $715=($714&1);
 var $716=HEAP32[((28752)>>2)];
 var $717=($716>>>0)<58;
 var $718=($717&1);
 var $719=$715&$718;
 var $720=($719|0)!=0;
 if($720){label=143;break;}else{label=144;break;}
 case 143: 
 var $722=_rand();
 var $723=(((($722|0))%(10))&-1);
 $jo47=$723;
 var $724=_rand();
 var $725=(((($724|0))%(10))&-1);
 $ja48=$725;
 var $726=$jo47;
 var $727=$ja48;
 var $728=$ja48;
 var $729=((($728)+(309))|0);
 var $730=$jo47;
 var $731=((($730)+(189))|0);
 var $732=HEAP32[((28892)>>2)];
 var $733=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($726,$727,$729,$731,0,0,319,199,$732,$733);
 label=155;break;
 case 144: 
 var $735=_rand();
 var $736=(((($735|0))%(40))&-1);
 $ka49=$736;
 var $737=_rand();
 var $738=(((($737|0))%(30))&-1);
 $ko50=$738;
 var $739=$ka49;
 var $740=$ko50;
 var $741=$ka49;
 var $742=((($741)+(160))|0);
 var $743=$ko50;
 var $744=((($743)+(100))|0);
 var $745=HEAP32[((28904)>>2)];
 var $746=HEAP32[((28824)>>2)];
 __Z4zoomiiiiiiiiPcS_($739,$740,$742,$744,0,0,319,199,$745,$746);
 $q51=0;
 $a52=0;
 label=145;break;
 case 145: 
 var $748=$a52;
 var $749=($748|0)<100;
 if($749){label=146;break;}else{label=154;break;}
 case 146: 
 $b53=0;
 label=147;break;
 case 147: 
 var $752=$b53;
 var $753=($752|0)<160;
 if($753){label=148;break;}else{label=152;break;}
 case 148: 
 var $755=$q51;
 var $756=((($755)+(160))|0);
 var $757=HEAP32[((28892)>>2)];
 var $758=(($757+$756)|0);
 var $759=HEAP8[($758)];
 var $760=(($759<<24)>>24);
 $o54=$760;
 var $761=$o54;
 var $762=($761|0)!=0;
 if($762){label=149;break;}else{label=150;break;}
 case 149: 
 var $764=$o54;
 var $765=(($764)&255);
 var $766=$q51;
 var $767=((($766)+(24120))|0);
 var $768=HEAP32[((28824)>>2)];
 var $769=(($768+$767)|0);
 HEAP8[($769)]=$765;
 label=150;break;
 case 150: 
 var $771=$q51;
 var $772=((($771)+(1))|0);
 $q51=$772;
 label=151;break;
 case 151: 
 var $774=$b53;
 var $775=((($774)+(1))|0);
 $b53=$775;
 label=147;break;
 case 152: 
 var $777=$q51;
 var $778=((($777)+(160))|0);
 $q51=$778;
 label=153;break;
 case 153: 
 var $780=$a52;
 var $781=((($780)+(1))|0);
 $a52=$781;
 label=145;break;
 case 154: 
 label=155;break;
 case 155: 
 label=156;break;
 case 156: 
 label=157;break;
 case 157: 
 label=158;break;
 case 158: 
 label=159;break;
 case 159: 
 label=160;break;
 case 160: 
 label=161;break;
 case 161: 
 var $790=HEAP32[((28952)>>2)];
 var $791=($790|0)==0;
 if($791){label=162;break;}else{label=166;break;}
 case 162: 
 var $793=HEAP32[((28704)>>2)];
 var $794=($793|0)<2;
 if($794){label=163;break;}else{label=164;break;}
 case 163: 
 var $796=HEAP32[((28704)>>2)];
 var $797=((($796)+(1))|0);
 HEAP32[((28704)>>2)]=$797;
 label=165;break;
 case 164: 
 HEAP32[((28704)>>2)]=0;
 label=165;break;
 case 165: 
 HEAP32[((28952)>>2)]=1;
 label=166;break;
 case 166: 
 label=212;break;
 case 167: 
 var $802=HEAP32[((28760)>>2)];
 var $803=($802>>>0)<12;
 if($803){label=168;break;}else{label=179;break;}
 case 168: 
 HEAP32[((28952)>>2)]=0;
 var $805=HEAP32[((28896)>>2)];
 var $806=HEAP32[((28824)>>2)];
 __Z4flipPcS_($805,$806);
 $q55=0;
 var $807=HEAP32[((28752)>>2)];
 var $808=($807<<1);
 var $809=((($808)+(22400))|0);
 $p56=$809;
 $a57=0;
 label=169;break;
 case 169: 
 var $811=$a57;
 var $812=($811|0)<100;
 if($812){label=170;break;}else{label=178;break;}
 case 170: 
 $b58=0;
 label=171;break;
 case 171: 
 var $815=$b58;
 var $816=($815|0)<160;
 if($816){label=172;break;}else{label=176;break;}
 case 172: 
 var $818=$q55;
 var $819=((($818)+(32000))|0);
 var $820=HEAP32[((28892)>>2)];
 var $821=(($820+$819)|0);
 var $822=HEAP8[($821)];
 var $823=(($822<<24)>>24);
 $o59=$823;
 var $824=$o59;
 var $825=($824|0)!=0;
 if($825){label=173;break;}else{label=174;break;}
 case 173: 
 var $827=$o59;
 var $828=(($827)&255);
 var $829=$q55;
 var $830=$p56;
 var $831=((($829)+($830))|0);
 var $832=HEAP32[((28824)>>2)];
 var $833=(($832+$831)|0);
 HEAP8[($833)]=$828;
 label=174;break;
 case 174: 
 var $835=$q55;
 var $836=((($835)+(1))|0);
 $q55=$836;
 label=175;break;
 case 175: 
 var $838=$b58;
 var $839=((($838)+(1))|0);
 $b58=$839;
 label=171;break;
 case 176: 
 var $841=$q55;
 var $842=((($841)+(160))|0);
 $q55=$842;
 label=177;break;
 case 177: 
 var $844=$a57;
 var $845=((($844)+(1))|0);
 $a57=$845;
 label=169;break;
 case 178: 
 label=211;break;
 case 179: 
 var $848=HEAP32[((28760)>>2)];
 var $849=($848>>>0)<13;
 if($849){label=180;break;}else{label=191;break;}
 case 180: 
 var $851=HEAP32[((28896)>>2)];
 var $852=HEAP32[((28824)>>2)];
 __Z4flipPcS_($851,$852);
 $q60=0;
 var $853=HEAP32[((28752)>>2)];
 var $854=($853<<1);
 var $855=(((22560)-($854))|0);
 $p61=$855;
 $a62=0;
 label=181;break;
 case 181: 
 var $857=$a62;
 var $858=($857|0)<100;
 if($858){label=182;break;}else{label=190;break;}
 case 182: 
 $b63=0;
 label=183;break;
 case 183: 
 var $861=$b63;
 var $862=($861|0)<160;
 if($862){label=184;break;}else{label=188;break;}
 case 184: 
 var $864=$q60;
 var $865=$p61;
 var $866=((($864)+($865))|0);
 var $867=HEAP32[((28896)>>2)];
 var $868=(($867+$866)|0);
 var $869=HEAP8[($868)];
 var $870=(($869<<24)>>24);
 var $871=($870|0)==0;
 if($871){label=185;break;}else{label=186;break;}
 case 185: 
 var $873=$q60;
 var $874=((($873)+(32000))|0);
 var $875=HEAP32[((28892)>>2)];
 var $876=(($875+$874)|0);
 var $877=HEAP8[($876)];
 var $878=$q60;
 var $879=$p61;
 var $880=((($878)+($879))|0);
 var $881=HEAP32[((28824)>>2)];
 var $882=(($881+$880)|0);
 HEAP8[($882)]=$877;
 label=186;break;
 case 186: 
 var $884=$q60;
 var $885=((($884)+(1))|0);
 $q60=$885;
 label=187;break;
 case 187: 
 var $887=$b63;
 var $888=((($887)+(1))|0);
 $b63=$888;
 label=183;break;
 case 188: 
 var $890=$q60;
 var $891=((($890)+(160))|0);
 $q60=$891;
 label=189;break;
 case 189: 
 var $893=$a62;
 var $894=((($893)+(1))|0);
 $a62=$894;
 label=181;break;
 case 190: 
 label=210;break;
 case 191: 
 var $897=HEAP32[((28760)>>2)];
 var $898=($897>>>0)<15;
 if($898){label=192;break;}else{label=209;break;}
 case 192: 
 var $900=_rand();
 var $901=(((($900|0))%(2))&-1);
 var $902=($901|0)==1;
 if($902){label=193;break;}else{label=194;break;}
 case 193: 
 var $904=_rand();
 var $905=(((($904|0))%(4))&-1);
 $a64=$905;
 var $906=_rand();
 var $907=(((($906|0))%(2))&-1);
 var $908=$a64;
 var $909=((28712+($908<<2))|0);
 HEAP32[(($909)>>2)]=$907;
 label=194;break;
 case 194: 
 var $911=HEAP32[((28928)>>2)];
 var $912=HEAP32[((28824)>>2)];
 __Z4flipPcS_($911,$912);
 $q65=0;
 $a66=0;
 label=195;break;
 case 195: 
 var $914=$a66;
 var $915=($914|0)<200;
 if($915){label=196;break;}else{label=208;break;}
 case 196: 
 $b67=0;
 label=197;break;
 case 197: 
 var $918=$b67;
 var $919=($918|0)<4;
 if($919){label=198;break;}else{label=206;break;}
 case 198: 
 var $921=$b67;
 var $922=((28712+($921<<2))|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=($923|0)==0;
 if($924){label=199;break;}else{label=204;break;}
 case 199: 
 $c68=0;
 label=200;break;
 case 200: 
 var $927=$c68;
 var $928=($927|0)<80;
 if($928){label=201;break;}else{label=203;break;}
 case 201: 
 var $930=$q65;
 var $931=$c68;
 var $932=((($930)+($931))|0);
 var $933=HEAP32[((28932)>>2)];
 var $934=(($933+$932)|0);
 var $935=HEAP8[($934)];
 var $936=$q65;
 var $937=$c68;
 var $938=((($936)+($937))|0);
 var $939=HEAP32[((28824)>>2)];
 var $940=(($939+$938)|0);
 HEAP8[($940)]=$935;
 label=202;break;
 case 202: 
 var $942=$c68;
 var $943=((($942)+(1))|0);
 $c68=$943;
 label=200;break;
 case 203: 
 label=204;break;
 case 204: 
 var $946=$q65;
 var $947=((($946)+(80))|0);
 $q65=$947;
 label=205;break;
 case 205: 
 var $949=$b67;
 var $950=((($949)+(1))|0);
 $b67=$950;
 label=197;break;
 case 206: 
 label=207;break;
 case 207: 
 var $953=$a66;
 var $954=((($953)+(1))|0);
 $a66=$954;
 label=195;break;
 case 208: 
 label=209;break;
 case 209: 
 label=210;break;
 case 210: 
 label=211;break;
 case 211: 
 label=212;break;
 case 212: 
 label=213;break;
 case 213: 
 label=214;break;
 case 214: 
 label=215;break;
 case 215: 
 label=216;break;
 case 216: 
 label=217;break;
 case 217: 
 label=218;break;
 case 218: 
 label=219;break;
 case 219: 
 label=220;break;
 case 220: 
 label=221;break;
 case 221: 
 __Z6renderv();
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _main($argc,$argv){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cm;
 var $sin1=sp;
 var $kgo;
 var $pff;
 var $time1;
 var $time2;
 $1=0;
 $2=$argc;
 $3=$argv;
 var $4=_SDL_Init(48);
 var $5=($4|0)<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=HEAP32[((_stderr)>>2)];
 var $8=_SDL_GetError();
 var $9=_fprintf($7,22512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$8,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(1);
 throw "Reached an unreachable!";
 case 3: 
 var $11=_atexit(442);
 var $12=_SDL_SetVideoMode(320,200,8,8388608);
 HEAP32[((28744)>>2)]=$12;
 _SDL_WM_SetCaption(21760,0);
 var $13=HEAP32[((28744)>>2)];
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=HEAP32[((_stderr)>>2)];
 var $17=_SDL_GetError();
 var $18=_fprintf($16,21288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(1);
 throw "Reached an unreachable!";
 case 5: 
 var $20=_malloc(768);
 HEAP32[((28776)>>2)]=$20;
 var $21=_malloc(768);
 HEAP32[((28768)>>2)]=$21;
 var $22=_malloc(64000);
 HEAP32[((28960)>>2)]=$22;
 var $23=_malloc(66000);
 HEAP32[((28824)>>2)]=$23;
 var $24=_malloc(66000);
 HEAP32[((28816)>>2)]=$24;
 var $25=_malloc(66000);
 HEAP32[((28800)>>2)]=$25;
 var $26=HEAP32[((28816)>>2)];
 var $27=$26;
 HEAP32[((28808)>>2)]=$27;
 var $28=HEAP32[((28824)>>2)];
 var $29=$28;
 HEAP32[((28784)>>2)]=$29;
 var $30=HEAP32[((28800)>>2)];
 var $31=$30;
 HEAP32[((28792)>>2)]=$31;
 var $32=_malloc(128000);
 HEAP32[((28856)>>2)]=$32;
 $cm=0;
 label=6;break;
 case 6: 
 var $34=$cm;
 var $35=($34|0)<21;
 if($35){label=7;break;}else{label=9;break;}
 case 7: 
 var $37=_malloc(64000);
 var $38=$cm;
 var $39=((28864+($38<<2))|0);
 HEAP32[(($39)>>2)]=$37;
 label=8;break;
 case 8: 
 var $41=$cm;
 var $42=((($41)+(1))|0);
 $cm=$42;
 label=6;break;
 case 9: 
 var $44=HEAP32[((28856)>>2)];
 var $45=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(20920,$44,640,200,$45);
 var $46=HEAP32[((28800)>>2)];
 var $47=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(20600,$46,256,256,$47);
 var $48=HEAP32[((28864)>>2)];
 var $49=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(27664,$48,320,200,$49);
 var $50=HEAP32[((28868)>>2)];
 var $51=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(27384,$50,320,200,$51);
 var $52=HEAP32[((28872)>>2)];
 var $53=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(27064,$52,320,200,$53);
 var $54=HEAP32[((28876)>>2)];
 var $55=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(26784,$54,320,200,$55);
 var $56=HEAP32[((28880)>>2)];
 var $57=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(26488,$56,320,200,$57);
 var $58=HEAP32[((28884)>>2)];
 var $59=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(26256,$58,320,200,$59);
 var $60=HEAP32[((28888)>>2)];
 var $61=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(25952,$60,320,200,$61);
 var $62=HEAP32[((28892)>>2)];
 var $63=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(25704,$62,320,200,$63);
 var $64=HEAP32[((28896)>>2)];
 var $65=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(25608,$64,320,200,$65);
 var $66=HEAP32[((28900)>>2)];
 var $67=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(25448,$66,320,200,$67);
 var $68=HEAP32[((28904)>>2)];
 var $69=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(25280,$68,320,200,$69);
 var $70=HEAP32[((28908)>>2)];
 var $71=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(25216,$70,320,200,$71);
 var $72=HEAP32[((28912)>>2)];
 var $73=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(25080,$72,320,200,$73);
 var $74=HEAP32[((28916)>>2)];
 var $75=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(24888,$74,320,200,$75);
 var $76=HEAP32[((28920)>>2)];
 var $77=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(24696,$76,320,200,$77);
 var $78=HEAP32[((28924)>>2)];
 var $79=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(24560,$78,320,200,$79);
 var $80=HEAP32[((28928)>>2)];
 var $81=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(24368,$80,320,200,$81);
 var $82=HEAP32[((28932)>>2)];
 var $83=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(24192,$82,320,200,$83);
 var $84=HEAP32[((28936)>>2)];
 var $85=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(24136,$84,320,200,$85);
 var $86=HEAP32[((28940)>>2)];
 var $87=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(24040,$86,320,200,$87);
 var $88=HEAP32[((28944)>>2)];
 var $89=HEAP32[((28776)>>2)];
 __Z7katopcxPcS_iiS_(23856,$88,320,200,$89);
 var $90=HEAP32[((28776)>>2)];
 __Z6setpalPc($90);
 $kgo=0;
 label=10;break;
 case 10: 
 var $92=$kgo;
 var $93=($92|0)<255;
 if($93){label=11;break;}else{label=13;break;}
 case 11: 
 var $95=$kgo;
 var $96=($95|0);
 var $97=$96;
 var $98=($97)*((3.141592653589793));
 var $99=($98)/(256);
 var $100=Math_sin($99);
 var $101=$100;
 $pff=$101;
 var $102=$pff;
 var $103=($102)*(32);
 var $104=(($103)&-1);
 var $105=$kgo;
 var $106=(($sin1+($105<<2))|0);
 HEAP32[(($106)>>2)]=$104;
 label=12;break;
 case 12: 
 var $108=$kgo;
 var $109=((($108)+(1))|0);
 $kgo=$109;
 label=10;break;
 case 13: 
 var $111=_xmp_create_context();
 HEAP32[((28984)>>2)]=$111;
 var $112=($111|0)==0;
 if($112){label=14;break;}else{label=15;break;}
 case 14: 
 $1=1;
 label=20;break;
 case 15: 
 var $115=HEAP32[((28984)>>2)];
 var $116=__Z10sound_initPcii($115,44100,2);
 var $117=HEAP32[((28984)>>2)];
 var $118=_xmp_load_module($117,23832);
 var $119=_clock();
 $time1=$119;
 var $120=HEAP32[((28824)>>2)];
 __Z3clsPc($120);
 HEAP32[((32088)>>2)]=0;
 label=16;break;
 case 16: 
 var $122=HEAP32[((32088)>>2)];
 var $123=($122|0)<8;
 if($123){label=17;break;}else{label=19;break;}
 case 17: 
 var $125=HEAP32[((32088)>>2)];
 var $126=((28712+($125<<2))|0);
 HEAP32[(($126)>>2)]=0;
 label=18;break;
 case 18: 
 var $128=HEAP32[((32088)>>2)];
 var $129=((($128)+(1))|0);
 HEAP32[((32088)>>2)]=$129;
 label=16;break;
 case 19: 
 var $131=HEAP32[((28984)>>2)];
 var $132=_xmp_start_player($131,44100,0);
 var $133=HEAP32[((28984)>>2)];
 var $134=_xmp_set_position($133,12);
 _SDL_PauseAudio(0);
 _emscripten_set_main_loop(514,30,0);
 var $135=_clock();
 $time2=$135;
 _SDL_PauseAudio(1);
 var $136=HEAP32[((28984)>>2)];
 _xmp_end_player($136);
 var $137=HEAP32[((28984)>>2)];
 _xmp_release_module($137);
 var $138=HEAP32[((28984)>>2)];
 _xmp_free_context($138);
 _SDL_CloseAudio();
 label=20;break;
 case 20: 
 var $140=$1;
 STACKTOP=sp;return $140;
  default: assert(0, "bad label: " + label);
 }
}
Module["_main"] = _main;
function _xmp_create_context(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ctx;
 var $2=_calloc(1,8144);
 var $3=$2;
 $ctx=$3;
 var $4=$ctx;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 var $8=$ctx;
 var $9=(($8+8140)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$ctx;
 var $11=$10;
 $1=$11;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_free_context($opaque){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ctx;
 $1=$opaque;
 var $2=$1;
 var $3=$2;
 $ctx=$3;
 var $4=$ctx;
 var $5=(($4+8140)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)>0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$1;
 _xmp_release_module($9);
 label=3;break;
 case 3: 
 var $11=$1;
 _free($11);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_position($ctx,$pos,$dir){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $m;
 var $mod;
 var $f;
 var $seq;
 var $start;
 $1=$ctx;
 $2=$pos;
 $3=$dir;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$1;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$m;
 var $9=(($8)|0);
 $mod=$9;
 var $10=$p;
 var $11=(($10+324)|0);
 $f=$11;
 var $12=$3;
 var $13=($12|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$1;
 var $16=$2;
 var $17=_get_sequence($15,$16);
 $seq=$17;
 label=4;break;
 case 3: 
 var $19=$p;
 var $20=(($19+52)|0);
 var $21=HEAP32[(($20)>>2)];
 $seq=$21;
 label=4;break;
 case 4: 
 var $23=$seq;
 var $24=($23|0)==255;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 label=28;break;
 case 6: 
 var $27=$seq;
 var $28=$m;
 var $29=(($28+6416)|0);
 var $30=(($29+($27<<3))|0);
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 $start=$32;
 var $33=$seq;
 var $34=($33|0)>=0;
 if($34){label=7;break;}else{label=28;break;}
 case 7: 
 var $36=$seq;
 var $37=$p;
 var $38=(($37+52)|0);
 HEAP32[(($38)>>2)]=$36;
 var $39=$2;
 var $40=($39|0)>=0;
 if($40){label=8;break;}else{label=22;break;}
 case 8: 
 var $42=$2;
 var $43=$mod;
 var $44=(($43+952)|0);
 var $45=(($44+$42)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=($47|0)==255;
 if($48){label=9;break;}else{label=10;break;}
 case 9: 
 label=28;break;
 case 10: 
 label=11;break;
 case 11: 
 var $52=$2;
 var $53=$mod;
 var $54=(($53+952)|0);
 var $55=(($54+$52)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=($57|0)==254;
 if($58){label=12;break;}else{var $64=0;label=13;break;}
 case 12: 
 var $60=$2;
 var $61=$start;
 var $62=($60|0)>($61|0);
 var $64=$62;label=13;break;
 case 13: 
 var $64;
 if($64){label=14;break;}else{label=18;break;}
 case 14: 
 var $66=$3;
 var $67=($66|0)<0;
 if($67){label=15;break;}else{label=16;break;}
 case 15: 
 var $69=$2;
 var $70=((($69)-(1))|0);
 $2=$70;
 label=17;break;
 case 16: 
 var $72=$2;
 var $73=((($72)+(1))|0);
 $2=$73;
 label=17;break;
 case 17: 
 label=11;break;
 case 18: 
 var $76=$2;
 var $77=$seq;
 var $78=$p;
 var $79=(($78+368)|0);
 var $80=(($79+($77<<4))|0);
 var $81=(($80+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($76|0)>($82|0);
 if($83){label=19;break;}else{label=20;break;}
 case 19: 
 var $85=$f;
 var $86=(($85+32)|0);
 HEAP32[(($86)>>2)]=0;
 label=21;break;
 case 20: 
 var $88=$p;
 var $89=(($88)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$mod;
 var $92=(($91+952)|0);
 var $93=(($92+$90)|0);
 var $94=HEAP8[($93)];
 var $95=($94&255);
 var $96=$mod;
 var $97=(($96+168)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+($95<<2))|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$f;
 var $104=(($103+28)|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=$seq;
 var $106=$p;
 var $107=(($106+368)|0);
 var $108=(($107+($105<<4))|0);
 var $109=(($108+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=$f;
 var $112=(($111+32)|0);
 HEAP32[(($112)>>2)]=$110;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $115=$2;
 var $116=$m;
 var $117=(($116)|0);
 var $118=(($117+156)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($115|0)<($119|0);
 if($120){label=23;break;}else{label=27;break;}
 case 23: 
 var $122=$2;
 var $123=($122|0)==0;
 if($123){label=24;break;}else{label=25;break;}
 case 24: 
 var $125=$p;
 var $126=(($125+4)|0);
 HEAP32[(($126)>>2)]=-1;
 label=26;break;
 case 25: 
 var $128=$2;
 var $129=$p;
 var $130=(($129+4)|0);
 HEAP32[(($130)>>2)]=$128;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_set_position($opaque,$pos){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ctx;
 var $p;
 var $m;
 $2=$opaque;
 $3=$pos;
 var $4=$2;
 var $5=$4;
 $ctx=$5;
 var $6=$ctx;
 var $7=(($6)|0);
 $p=$7;
 var $8=$ctx;
 var $9=(($8+1552)|0);
 $m=$9;
 var $10=$ctx;
 var $11=(($10+8140)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)<2;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-8;
 label=6;break;
 case 3: 
 var $16=$3;
 var $17=$m;
 var $18=(($17)|0);
 var $19=(($18+156)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($16|0)>=($20|0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-7;
 label=6;break;
 case 5: 
 var $24=$ctx;
 var $25=$3;
 _set_position($24,$25,0);
 var $26=$p;
 var $27=(($26+4)|0);
 var $28=HEAP32[(($27)>>2)];
 $1=$28;
 label=6;break;
 case 6: 
 var $30=$1;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch($head,$f,$s,$ttl){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+22528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $b=sp;
 var $cmd;
 var $t;
 var $fd;
 var $builtin;
 var $res;
 var $temp2;
 var $tmp=(sp)+(1024);
 var $temp;
 var $headersize;
 var $x;
 var $i;
 var $flag;
 var $size;
 var $n;
 var $line=(sp)+(5120);
 var $buf=(sp)+(6144);
 var $p;
 $2=$head;
 $3=$f;
 $4=$s;
 $5=$ttl;
 $cmd=0;
 $res=0;
 $builtin=0;
 var $6=(($tmp)|0);
 var $7=_get_temp_dir($6,4096);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=157;break;
 case 3: 
 var $11=(($tmp)|0);
 var $12=_strlcat($11,23552,4096);
 var $13=$3;
 var $14=HEAP32[(($13)>>2)];
 var $15=_fseek($14,0,0);
 var $16=(($b)|0);
 var $17=$3;
 var $18=HEAP32[(($17)>>2)];
 var $19=_fread($16,1,1024,$18);
 $headersize=$19;
 var $20=($19|0)<100;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=157;break;
 case 5: 
 var $23=(($b)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=($25|0)==80;
 if($26){label=6;break;}else{label=16;break;}
 case 6: 
 var $28=(($b+1)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=($30|0)==75;
 if($31){label=7;break;}else{label=16;break;}
 case 7: 
 var $33=(($b+2)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=($35|0)==3;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=(($b+3)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=($40|0)==4;
 if($41){label=15;break;}else{label=9;break;}
 case 9: 
 var $43=(($b+2)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=($45|0)==48;
 if($46){label=10;break;}else{label=16;break;}
 case 10: 
 var $48=(($b+3)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=($50|0)==48;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $53=(($b+4)|0);
 var $54=HEAP8[($53)];
 var $55=($54&255);
 var $56=($55|0)==80;
 if($56){label=12;break;}else{label=16;break;}
 case 12: 
 var $58=(($b+5)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=($60|0)==75;
 if($61){label=13;break;}else{label=16;break;}
 case 13: 
 var $63=(($b+6)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=($65|0)==3;
 if($66){label=14;break;}else{label=16;break;}
 case 14: 
 var $68=(($b+7)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 var $71=($70|0)==4;
 if($71){label=15;break;}else{label=16;break;}
 case 15: 
 $builtin=11;
 label=78;break;
 case 16: 
 var $74=(($b+2)|0);
 var $75=HEAP8[($74)];
 var $76=($75&255);
 var $77=($76|0)==45;
 if($77){label=17;break;}else{label=20;break;}
 case 17: 
 var $79=(($b+3)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=($81|0)==108;
 if($82){label=18;break;}else{label=20;break;}
 case 18: 
 var $84=(($b+4)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=($86|0)==104;
 if($87){label=19;break;}else{label=20;break;}
 case 19: 
 $builtin=16;
 label=77;break;
 case 20: 
 var $90=(($b)|0);
 var $91=HEAP8[($90)];
 var $92=($91&255);
 var $93=($92|0)==31;
 if($93){label=21;break;}else{label=23;break;}
 case 21: 
 var $95=(($b+1)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=($97|0)==139;
 if($98){label=22;break;}else{label=23;break;}
 case 22: 
 $builtin=12;
 label=76;break;
 case 23: 
 var $101=(($b)|0);
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=($103|0)==66;
 if($104){label=24;break;}else{label=27;break;}
 case 24: 
 var $106=(($b+1)|0);
 var $107=HEAP8[($106)];
 var $108=($107&255);
 var $109=($108|0)==90;
 if($109){label=25;break;}else{label=27;break;}
 case 25: 
 var $111=(($b+2)|0);
 var $112=HEAP8[($111)];
 var $113=($112&255);
 var $114=($113|0)==104;
 if($114){label=26;break;}else{label=27;break;}
 case 26: 
 $builtin=14;
 label=75;break;
 case 27: 
 var $117=(($b)|0);
 var $118=HEAP8[($117)];
 var $119=($118&255);
 var $120=($119|0)==253;
 if($120){label=28;break;}else{label=32;break;}
 case 28: 
 var $122=(($b+3)|0);
 var $123=HEAP8[($122)];
 var $124=($123&255);
 var $125=($124|0)==88;
 if($125){label=29;break;}else{label=32;break;}
 case 29: 
 var $127=(($b+4)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=($129|0)==90;
 if($130){label=30;break;}else{label=32;break;}
 case 30: 
 var $132=(($b+5)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=($134|0)==0;
 if($135){label=31;break;}else{label=32;break;}
 case 31: 
 $builtin=15;
 label=74;break;
 case 32: 
 var $138=(($b)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 var $141=($140|0)==77;
 if($141){label=33;break;}else{label=36;break;}
 case 33: 
 var $143=(($b+1)|0);
 var $144=HEAP8[($143)];
 var $145=($144&255);
 var $146=($145|0)==79;
 if($146){label=34;break;}else{label=36;break;}
 case 34: 
 var $148=(($b+2)|0);
 var $149=HEAP8[($148)];
 var $150=($149&255);
 var $151=($150|0)==51;
 if($151){label=35;break;}else{label=36;break;}
 case 35: 
 $cmd=22872;
 label=73;break;
 case 36: 
 var $154=(($b)|0);
 var $155=HEAP8[($154)];
 var $156=($155&255);
 var $157=($156|0)==31;
 if($157){label=37;break;}else{label=39;break;}
 case 37: 
 var $159=(($b+1)|0);
 var $160=HEAP8[($159)];
 var $161=($160&255);
 var $162=($161|0)==157;
 if($162){label=38;break;}else{label=39;break;}
 case 38: 
 $builtin=13;
 label=72;break;
 case 39: 
 var $165=(($b)|0);
 var $166=_memcmp($165,22088,4);
 var $167=($166|0)==0;
 if($167){label=40;break;}else{label=41;break;}
 case 40: 
 $builtin=1;
 label=71;break;
 case 41: 
 var $170=(($b)|0);
 var $171=_memcmp($170,21432,4);
 var $172=($171|0)==0;
 if($172){label=42;break;}else{label=44;break;}
 case 42: 
 var $174=(($b)|0);
 var $175=(($174+8)|0);
 var $176=_memcmp($175,21112,4);
 var $177=($176|0)==0;
 if($177){label=43;break;}else{label=44;break;}
 case 43: 
 $builtin=2;
 label=70;break;
 case 44: 
 var $180=(($b)|0);
 var $181=_memcmp($180,20680,8);
 var $182=($181|0)!=0;
 if($182){label=46;break;}else{label=45;break;}
 case 45: 
 $builtin=5;
 label=69;break;
 case 46: 
 var $185=(($b)|0);
 var $186=_memcmp($185,20352,8);
 var $187=($186|0)==0;
 if($187){label=47;break;}else{label=48;break;}
 case 47: 
 $builtin=3;
 label=68;break;
 case 48: 
 var $190=(($b)|0);
 var $191=_memcmp($190,27432,4);
 var $192=($191|0)==0;
 if($192){label=49;break;}else{label=51;break;}
 case 49: 
 var $194=(($b)|0);
 var $195=(($194+4)|0);
 var $196=_readmem32b($195);
 var $197=($196|0)==-559038801;
 if($197){label=50;break;}else{label=51;break;}
 case 50: 
 $builtin=9;
 label=67;break;
 case 51: 
 var $200=(($b)|0);
 var $201=_memcmp($200,27432,4);
 var $202=($201|0)==0;
 if($202){label=52;break;}else{label=54;break;}
 case 52: 
 var $204=(($b)|0);
 var $205=(($204+4)|0);
 var $206=_readmem32b($205);
 var $207=($206|0)==-559039810;
 if($207){label=53;break;}else{label=54;break;}
 case 53: 
 $builtin=9;
 label=66;break;
 case 54: 
 var $210=(($b)|0);
 var $211=_memcmp($210,27224,3);
 var $212=($211|0)==0;
 if($212){label=55;break;}else{label=56;break;}
 case 55: 
 $builtin=10;
 label=65;break;
 case 56: 
 var $215=(($b)|0);
 var $216=_memcmp($215,26904,3);
 var $217=($216|0)==0;
 if($217){label=57;break;}else{label=58;break;}
 case 57: 
 $cmd=26648;
 label=64;break;
 case 58: 
 var $220=(($b)|0);
 var $221=_memcmp($220,26384,4);
 var $222=($221|0)==0;
 if($222){label=59;break;}else{label=60;break;}
 case 59: 
 $builtin=6;
 label=63;break;
 case 60: 
 var $225=$3;
 var $226=HEAP32[(($225)>>2)];
 var $227=_test_oxm($226);
 var $228=($227|0)==0;
 if($228){label=61;break;}else{label=62;break;}
 case 61: 
 $builtin=7;
 label=62;break;
 case 62: 
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 var $247=$builtin;
 var $248=($247|0)==0;
 if($248){label=79;break;}else{label=104;break;}
 case 79: 
 var $250=$cmd;
 var $251=($250|0)==0;
 if($251){label=80;break;}else{label=104;break;}
 case 80: 
 var $253=(($b)|0);
 var $254=HEAP8[($253)];
 var $255=($254&255);
 var $256=($255|0)==26;
 if($256){label=81;break;}else{label=104;break;}
 case 81: 
 var $258=(($b+1)|0);
 var $259=HEAP8[($258)];
 var $260=($259&255);
 var $261=$260&127;
 $x=$261;
 $flag=0;
 $i=0;
 label=82;break;
 case 82: 
 var $263=$i;
 var $264=($263|0)<13;
 if($264){label=83;break;}else{label=91;break;}
 case 83: 
 var $266=$i;
 var $267=((($266)+(2))|0);
 var $268=(($b+$267)|0);
 var $269=HEAP8[($268)];
 var $270=($269&255);
 var $271=($270|0)==0;
 if($271){label=84;break;}else{label=87;break;}
 case 84: 
 var $273=$i;
 var $274=($273|0)==0;
 if($274){label=85;break;}else{label=86;break;}
 case 85: 
 $flag=1;
 label=86;break;
 case 86: 
 label=91;break;
 case 87: 
 var $278=$i;
 var $279=((($278)+(2))|0);
 var $280=(($b+$279)|0);
 var $281=HEAP8[($280)];
 var $282=($281&255);
 var $283=_isprint($282);
 var $284=($283|0)!=0;
 if($284){label=89;break;}else{label=88;break;}
 case 88: 
 $flag=1;
 label=91;break;
 case 89: 
 label=90;break;
 case 90: 
 var $288=$i;
 var $289=((($288)+(1))|0);
 $i=$289;
 label=82;break;
 case 91: 
 var $291=(($b)|0);
 var $292=(($291+15)|0);
 var $293=_readmem32l($292);
 $size=$293;
 var $294=$size;
 var $295=($294|0)<0;
 if($295){label=93;break;}else{label=92;break;}
 case 92: 
 var $297=$size;
 var $298=($297|0)>524288;
 if($298){label=93;break;}else{label=94;break;}
 case 93: 
 $flag=1;
 label=94;break;
 case 94: 
 var $301=$flag;
 var $302=($301|0)==0;
 if($302){label=95;break;}else{label=103;break;}
 case 95: 
 var $304=$x;
 var $305=($304|0)>=1;
 if($305){label=96;break;}else{label=99;break;}
 case 96: 
 var $307=$x;
 var $308=($307|0)<=9;
 if($308){label=97;break;}else{label=99;break;}
 case 97: 
 var $310=$x;
 var $311=($310|0)!=7;
 if($311){label=98;break;}else{label=99;break;}
 case 98: 
 $builtin=4;
 label=102;break;
 case 99: 
 var $314=$x;
 var $315=($314|0)==127;
 if($315){label=100;break;}else{label=101;break;}
 case 100: 
 $builtin=4;
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 label=104;break;
 case 104: 
 var $321=$3;
 var $322=HEAP32[(($321)>>2)];
 var $323=_fseek($322,0,0);
 var $324=$builtin;
 var $325=($324|0)==0;
 if($325){label=105;break;}else{label=107;break;}
 case 105: 
 var $327=$cmd;
 var $328=($327|0)==0;
 if($328){label=106;break;}else{label=107;break;}
 case 106: 
 $1=0;
 label=157;break;
 case 107: 
 label=108;break;
 case 108: 
 label=109;break;
 case 109: 
 var $333=_calloc(12,1);
 var $334=$333;
 $temp=$334;
 var $335=$temp;
 var $336=($335|0)!=0;
 if($336){label=113;break;}else{label=110;break;}
 case 110: 
 label=111;break;
 case 111: 
 label=112;break;
 case 112: 
 $1=-1;
 label=157;break;
 case 113: 
 var $341=(($tmp)|0);
 var $342=_strdup($341);
 var $343=$temp;
 var $344=(($343)|0);
 HEAP32[(($344)>>2)]=$342;
 var $345=$temp;
 var $346=(($345)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=($347|0)==0;
 if($348){label=115;break;}else{label=114;break;}
 case 114: 
 var $350=$temp;
 var $351=(($350)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=_mkstemp($352);
 $fd=$353;
 var $354=($353|0)<0;
 if($354){label=115;break;}else{label=118;break;}
 case 115: 
 label=116;break;
 case 116: 
 label=117;break;
 case 117: 
 $1=-1;
 label=157;break;
 case 118: 
 var $359=$temp;
 var $360=(($359+4)|0);
 var $361=$2;
 _list_add_tail($360,$361);
 var $362=$fd;
 var $363=_fdopen($362,26072);
 $t=$363;
 var $364=($363|0)==0;
 if($364){label=119;break;}else{label=122;break;}
 case 119: 
 label=120;break;
 case 120: 
 label=121;break;
 case 121: 
 $1=-1;
 label=157;break;
 case 122: 
 var $369=$cmd;
 var $370=($369|0)!=0;
 if($370){label=123;break;}else{label=131;break;}
 case 123: 
 var $372=(($line)|0);
 var $373=$cmd;
 var $374=$4;
 var $375=HEAP32[(($374)>>2)];
 var $376=_snprintf($372,1024,$373,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$375,tempVarArgs)); STACKTOP=tempVarArgs;
 var $377=(($line)|0);
 var $378=_popen($377,25736);
 $p=$378;
 var $379=($378|0)==0;
 if($379){label=124;break;}else{label=127;break;}
 case 124: 
 label=125;break;
 case 125: 
 label=126;break;
 case 126: 
 var $383=$t;
 var $384=_fclose($383);
 $1=-1;
 label=157;break;
 case 127: 
 label=128;break;
 case 128: 
 var $387=(($buf)|0);
 var $388=$p;
 var $389=_fread($387,1,16384,$388);
 $n=$389;
 var $390=($389|0)>0;
 if($390){label=129;break;}else{label=130;break;}
 case 129: 
 var $392=(($buf)|0);
 var $393=$n;
 var $394=$t;
 var $395=_fwrite($392,1,$393,$394);
 label=128;break;
 case 130: 
 var $397=$p;
 var $398=_pclose($397);
 label=148;break;
 case 131: 
 var $400=$builtin;
 switch(($400|0)){case 1:{ label=132;break;}case 4:{ label=133;break;}case 5:{ label=134;break;}case 2:{ label=135;break;}case 3:{ label=136;break;}case 9:{ label=137;break;}case 10:{ label=138;break;}case 6:{ label=139;break;}case 11:{ label=140;break;}case 12:{ label=141;break;}case 13:{ label=142;break;}case 14:{ label=143;break;}case 15:{ label=144;break;}case 16:{ label=145;break;}case 7:{ label=146;break;}default:{label=147;break;}}break;
 case 132: 
 var $402=$3;
 var $403=HEAP32[(($402)>>2)];
 var $404=$t;
 var $405=_decrunch_pp($403,$404);
 $res=$405;
 label=147;break;
 case 133: 
 var $407=$3;
 var $408=HEAP32[(($407)>>2)];
 var $409=$t;
 var $410=_decrunch_arc($408,$409);
 $res=$410;
 label=147;break;
 case 134: 
 var $412=$3;
 var $413=HEAP32[(($412)>>2)];
 var $414=$t;
 var $415=_decrunch_arcfs($413,$414);
 $res=$415;
 label=147;break;
 case 135: 
 var $417=$3;
 var $418=HEAP32[(($417)>>2)];
 var $419=$t;
 var $420=_decrunch_sqsh($418,$419);
 $res=$420;
 label=147;break;
 case 136: 
 var $422=$3;
 var $423=HEAP32[(($422)>>2)];
 var $424=$t;
 var $425=_decrunch_mmcmp($423,$424);
 $res=$425;
 label=147;break;
 case 137: 
 var $427=$3;
 var $428=HEAP32[(($427)>>2)];
 var $429=$t;
 var $430=_decrunch_muse($428,$429);
 $res=$430;
 label=147;break;
 case 138: 
 var $432=$3;
 var $433=HEAP32[(($432)>>2)];
 var $434=$t;
 var $435=_decrunch_lzx($433,$434);
 $res=$435;
 label=147;break;
 case 139: 
 var $437=$3;
 var $438=HEAP32[(($437)>>2)];
 var $439=$t;
 var $440=_decrunch_s404($438,$439);
 $res=$440;
 label=147;break;
 case 140: 
 var $442=$3;
 var $443=HEAP32[(($442)>>2)];
 var $444=$t;
 var $445=_decrunch_zip($443,$444);
 $res=$445;
 label=147;break;
 case 141: 
 var $447=$3;
 var $448=HEAP32[(($447)>>2)];
 var $449=$t;
 var $450=_decrunch_gzip($448,$449);
 $res=$450;
 label=147;break;
 case 142: 
 var $452=$3;
 var $453=HEAP32[(($452)>>2)];
 var $454=$t;
 var $455=_decrunch_compress($453,$454);
 $res=$455;
 label=147;break;
 case 143: 
 var $457=$3;
 var $458=HEAP32[(($457)>>2)];
 var $459=$t;
 var $460=_decrunch_bzip2($458,$459);
 $res=$460;
 label=147;break;
 case 144: 
 var $462=$3;
 var $463=HEAP32[(($462)>>2)];
 var $464=$t;
 var $465=_decrunch_xz($463,$464);
 $res=$465;
 label=147;break;
 case 145: 
 var $467=$3;
 var $468=HEAP32[(($467)>>2)];
 var $469=$t;
 var $470=_decrunch_lha($468,$469);
 $res=$470;
 label=147;break;
 case 146: 
 var $472=$3;
 var $473=HEAP32[(($472)>>2)];
 var $474=$t;
 var $475=_decrunch_oxm($473,$474);
 $res=$475;
 label=147;break;
 case 147: 
 label=148;break;
 case 148: 
 var $478=$res;
 var $479=($478|0)<0;
 if($479){label=149;break;}else{label=152;break;}
 case 149: 
 label=150;break;
 case 150: 
 label=151;break;
 case 151: 
 var $483=$t;
 var $484=_fclose($483);
 $1=-1;
 label=157;break;
 case 152: 
 label=153;break;
 case 153: 
 label=154;break;
 case 154: 
 var $488=$3;
 var $489=HEAP32[(($488)>>2)];
 var $490=_fclose($489);
 var $491=$t;
 var $492=$3;
 HEAP32[(($492)>>2)]=$491;
 var $493=$5;
 var $494=((($493)-(1))|0);
 $5=$494;
 var $495=($494|0)!=0;
 if($495){label=156;break;}else{label=155;break;}
 case 155: 
 $1=-1;
 label=157;break;
 case 156: 
 var $498=$temp;
 var $499=(($498)|0);
 var $500=HEAP32[(($499)>>2)];
 var $501=_strdup($500);
 $temp2=$501;
 var $502=$2;
 var $503=$3;
 var $504=$temp;
 var $505=(($504)|0);
 var $506=$5;
 var $507=_decrunch($502,$503,$505,$506);
 $res=$507;
 var $508=$temp2;
 _free($508);
 var $509=$res;
 $1=$509;
 label=157;break;
 case 157: 
 var $511=$1;
 STACKTOP=sp;return $511;
  default: assert(0, "bad label: " + label);
 }
}
function _unlink_tempfiles($head){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $li;
 var $tmp;
 $1=$head;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 $tmp=$4;
 label=2;break;
 case 2: 
 var $6=$tmp;
 var $7=$1;
 var $8=($6|0)!=($7|0);
 if($8){label=3;break;}else{label=6;break;}
 case 3: 
 var $10=$tmp;
 var $11=$10;
 var $12=((($11)-(4))|0);
 var $13=$12;
 $li=$13;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $16=$li;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=_unlink($18);
 var $20=$li;
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 _free($22);
 var $23=$li;
 var $24=(($23+4)|0);
 _list_del($24);
 var $25=$tmp;
 var $26=(($25)|0);
 var $27=HEAP32[(($26)>>2)];
 $tmp=$27;
 var $28=$li;
 var $29=$28;
 _free($29);
 label=2;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_load_module($opaque,$path){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $ctx;
 var $m;
 var $h;
 var $st=(sp)+(8);
 var $tmpfiles_list=(sp)+(88);
 $2=$opaque;
 HEAP32[(($3)>>2)]=$path;
 var $4=$2;
 var $5=$4;
 $ctx=$5;
 var $6=$ctx;
 var $7=(($6+1552)|0);
 $m=$7;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $10=HEAP32[(($3)>>2)];
 var $11=_stat($10,$st);
 var $12=($11|0)<0;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-6;
 label=27;break;
 case 5: 
 var $15=(($st+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&61440;
 var $18=($17|0)==16384;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=___errno_location();
 HEAP32[(($20)>>2)]=21;
 $1=-6;
 label=27;break;
 case 7: 
 var $22=HEAP32[(($3)>>2)];
 var $23=_hio_open_file($22,23040);
 $h=$23;
 var $24=($23|0)==0;
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-6;
 label=27;break;
 case 9: 
 label=10;break;
 case 10: 
 var $28=(($tmpfiles_list)|0);
 HEAP32[(($28)>>2)]=$tmpfiles_list;
 var $29=(($tmpfiles_list+4)|0);
 HEAP32[(($29)>>2)]=$tmpfiles_list;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $33=$h;
 var $34=(($33+4)|0);
 var $35=_decrunch($tmpfiles_list,$34,$3,5);
 var $36=($35|0)<0;
 if($36){label=14;break;}else{label=15;break;}
 case 14: 
 label=26;break;
 case 15: 
 var $39=$h;
 var $40=_hio_stat($39,$st);
 var $41=($40|0)<0;
 if($41){label=16;break;}else{label=17;break;}
 case 16: 
 label=26;break;
 case 17: 
 var $44=(($st+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)<256;
 if($46){label=18;break;}else{label=19;break;}
 case 18: 
 var $48=$h;
 var $49=_hio_close($48);
 _unlink_tempfiles($tmpfiles_list);
 $1=-3;
 label=27;break;
 case 19: 
 var $51=$ctx;
 var $52=(($51+8140)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)>0;
 if($54){label=20;break;}else{label=21;break;}
 case 20: 
 var $56=$2;
 _xmp_release_module($56);
 label=21;break;
 case 21: 
 var $58=HEAP32[(($3)>>2)];
 var $59=_get_dirname($58);
 var $60=$m;
 var $61=(($60+1208)|0);
 HEAP32[(($61)>>2)]=$59;
 var $62=$m;
 var $63=(($62+1208)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-6;
 label=27;break;
 case 23: 
 var $68=HEAP32[(($3)>>2)];
 var $69=_get_basename($68);
 var $70=$m;
 var $71=(($70+1212)|0);
 HEAP32[(($71)>>2)]=$69;
 var $72=$m;
 var $73=(($72+1212)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($74|0)==0;
 if($75){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-6;
 label=27;break;
 case 25: 
 var $78=HEAP32[(($3)>>2)];
 var $79=$m;
 var $80=(($79+1216)|0);
 HEAP32[(($80)>>2)]=$78;
 var $81=(($st+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$m;
 var $84=(($83+1240)|0);
 HEAP32[(($84)>>2)]=$82;
 var $85=$2;
 var $86=$h;
 var $87=_load_module($85,$86,$tmpfiles_list);
 $1=$87;
 label=27;break;
 case 26: 
 var $89=$h;
 var $90=_hio_close($89);
 _unlink_tempfiles($tmpfiles_list);
 $1=-5;
 label=27;break;
 case 27: 
 var $92=$1;
 STACKTOP=sp;return $92;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_release_module($opaque){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ctx;
 var $m;
 var $mod;
 var $i;
 $1=$opaque;
 var $2=$1;
 var $3=$2;
 $ctx=$3;
 var $4=$ctx;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$ctx;
 var $9=(($8+8140)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$1;
 _xmp_end_player($13);
 label=3;break;
 case 3: 
 var $15=$ctx;
 var $16=(($15+8140)|0);
 HEAP32[(($16)>>2)]=0;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $19=$ctx;
 _release_module_extras($19);
 $i=0;
 label=6;break;
 case 6: 
 var $21=$i;
 var $22=$mod;
 var $23=(($22+132)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($21|0)<($24|0);
 if($25){label=7;break;}else{label=9;break;}
 case 7: 
 var $27=$i;
 var $28=$mod;
 var $29=(($28+172)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+($27<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 _free($33);
 label=8;break;
 case 8: 
 var $35=$i;
 var $36=((($35)+(1))|0);
 $i=$36;
 label=6;break;
 case 9: 
 var $38=$mod;
 var $39=(($38+132)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)>0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=$mod;
 var $44=(($43+172)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$45;
 _free($46);
 label=11;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $49=$i;
 var $50=$mod;
 var $51=(($50+128)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($49|0)<($52|0);
 if($53){label=13;break;}else{label=15;break;}
 case 13: 
 var $55=$i;
 var $56=$mod;
 var $57=(($56+168)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+($55<<2))|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 _free($61);
 label=14;break;
 case 14: 
 var $63=$i;
 var $64=((($63)+(1))|0);
 $i=$64;
 label=12;break;
 case 15: 
 var $66=$mod;
 var $67=(($66+128)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)>0;
 if($69){label=16;break;}else{label=17;break;}
 case 16: 
 var $71=$mod;
 var $72=(($71+168)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$73;
 _free($74);
 label=17;break;
 case 17: 
 $i=0;
 label=18;break;
 case 18: 
 var $77=$i;
 var $78=$mod;
 var $79=(($78+140)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($77|0)<($80|0);
 if($81){label=19;break;}else{label=21;break;}
 case 19: 
 var $83=$i;
 var $84=$mod;
 var $85=(($84+176)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+((($83)*(764))&-1))|0);
 var $88=(($87+756)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$89;
 _free($90);
 var $91=$i;
 var $92=$mod;
 var $93=(($92+176)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+((($91)*(764))&-1))|0);
 var $96=(($95+760)|0);
 var $97=HEAP32[(($96)>>2)];
 _free($97);
 label=20;break;
 case 20: 
 var $99=$i;
 var $100=((($99)+(1))|0);
 $i=$100;
 label=18;break;
 case 21: 
 var $102=$mod;
 var $103=(($102+140)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($104|0)>0;
 if($105){label=22;break;}else{label=23;break;}
 case 22: 
 var $107=$mod;
 var $108=(($107+176)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$109;
 _free($110);
 label=23;break;
 case 23: 
 $i=0;
 label=24;break;
 case 24: 
 var $113=$i;
 var $114=$mod;
 var $115=(($114+144)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($113|0)<($116|0);
 if($117){label=25;break;}else{label=29;break;}
 case 25: 
 var $119=$i;
 var $120=$mod;
 var $121=(($120+180)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($122+((($119)*(52))&-1))|0);
 var $124=(($123+48)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)!=0;
 if($126){label=26;break;}else{label=27;break;}
 case 26: 
 var $128=$i;
 var $129=$mod;
 var $130=(($129+180)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+((($128)*(52))&-1))|0);
 var $133=(($132+48)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=((($134)-(4))|0);
 _free($135);
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $138=$i;
 var $139=((($138)+(1))|0);
 $i=$139;
 label=24;break;
 case 29: 
 var $141=$mod;
 var $142=(($141+144)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)>0;
 if($144){label=30;break;}else{label=31;break;}
 case 30: 
 var $146=$mod;
 var $147=(($146+180)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=$148;
 _free($149);
 label=31;break;
 case 31: 
 var $151=$m;
 var $152=(($151+6560)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)!=0;
 if($154){label=32;break;}else{label=37;break;}
 case 32: 
 $i=0;
 label=33;break;
 case 33: 
 var $157=$i;
 var $158=$mod;
 var $159=(($158+156)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($157|0)<($160|0);
 if($161){label=34;break;}else{label=36;break;}
 case 34: 
 var $163=$i;
 var $164=$m;
 var $165=(($164+6560)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+($163<<2))|0);
 var $168=HEAP32[(($167)>>2)];
 _free($168);
 label=35;break;
 case 35: 
 var $170=$i;
 var $171=((($170)+(1))|0);
 $i=$171;
 label=33;break;
 case 36: 
 var $173=$m;
 var $174=(($173+6560)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=$175;
 _free($176);
 label=37;break;
 case 37: 
 var $178=$m;
 var $179=(($178+1220)|0);
 var $180=HEAP32[(($179)>>2)];
 _free($180);
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $183=$m;
 var $184=(($183+1208)|0);
 var $185=HEAP32[(($184)>>2)];
 _free($185);
 var $186=$m;
 var $187=(($186+1212)|0);
 var $188=HEAP32[(($187)>>2)];
 _free($188);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_dirname($name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $div;
 var $dirname;
 var $len;
 $1=$name;
 var $2=$1;
 var $3=_strrchr($2,47);
 $div=$3;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=5;break;}
 case 2: 
 var $6=$div;
 var $7=$1;
 var $8=$6;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=((($10)+(1))|0);
 $len=$11;
 var $12=$len;
 var $13=((($12)+(1))|0);
 var $14=_malloc($13);
 $dirname=$14;
 var $15=$dirname;
 var $16=($15|0)!=0;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=$dirname;
 var $19=$1;
 var $20=$len;
 assert($20 % 1 === 0);(_memcpy($18, $19, $20)|0);
 var $21=$len;
 var $22=$dirname;
 var $23=(($22+$21)|0);
 HEAP8[($23)]=0;
 label=4;break;
 case 4: 
 label=6;break;
 case 5: 
 var $26=_strdup(32096);
 $dirname=$26;
 label=6;break;
 case 6: 
 var $28=$dirname;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _get_basename($name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $div;
 var $basename;
 $1=$name;
 var $2=$1;
 var $3=_strrchr($2,47);
 $div=$3;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$div;
 var $7=(($6+1)|0);
 var $8=_strdup($7);
 $basename=$8;
 label=4;break;
 case 3: 
 var $10=$1;
 var $11=_strdup($10);
 $basename=$11;
 label=4;break;
 case 4: 
 var $13=$basename;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _load_module($opaque,$h,$tmpfiles_list){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ctx;
 var $m;
 var $i;
 var $ret;
 var $test_result;
 var $load_result;
 $2=$opaque;
 $3=$h;
 $4=$tmpfiles_list;
 var $5=$2;
 var $6=$5;
 $ctx=$6;
 var $7=$ctx;
 var $8=(($7+1552)|0);
 $m=$8;
 var $9=$ctx;
 _load_prologue($9);
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $load_result=-1;
 $test_result=-1;
 $i=0;
 label=4;break;
 case 4: 
 var $13=$i;
 var $14=((7816+($13<<2))|0);
 var $15=((((HEAPU8[($14)])|(HEAPU8[((($14)+(1))|0)]<<8)|(HEAPU8[((($14)+(2))|0)]<<16)|(HEAPU8[((($14)+(3))|0)]<<24))|0));
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=11;break;}
 case 5: 
 var $18=$3;
 var $19=_hio_seek($18,0,0);
 var $20=$i;
 var $21=((7816+($20<<2))|0);
 var $22=((((HEAPU8[($21)])|(HEAPU8[((($21)+(1))|0)]<<8)|(HEAPU8[((($21)+(2))|0)]<<16)|(HEAPU8[((($21)+(3))|0)]<<24))|0));
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$3;
 var $26=FUNCTION_TABLE[$24]($25,0,0);
 $test_result=$26;
 var $27=$test_result;
 var $28=($27|0)==0;
 if($28){label=6;break;}else{label=9;break;}
 case 6: 
 var $30=$3;
 var $31=_hio_seek($30,0,0);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $34=$i;
 var $35=((7816+($34<<2))|0);
 var $36=((((HEAPU8[($35)])|(HEAPU8[((($35)+(1))|0)]<<8)|(HEAPU8[((($35)+(2))|0)]<<16)|(HEAPU8[((($35)+(3))|0)]<<24))|0));
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$m;
 var $40=$3;
 var $41=FUNCTION_TABLE[$38]($39,$40,0);
 $load_result=$41;
 label=11;break;
 case 9: 
 label=10;break;
 case 10: 
 var $44=$i;
 var $45=((($44)+(1))|0);
 $i=$45;
 label=4;break;
 case 11: 
 var $47=$test_result;
 var $48=($47|0)==0;
 if($48){label=12;break;}else{label=14;break;}
 case 12: 
 var $50=$load_result;
 var $51=($50|0)==0;
 if($51){label=13;break;}else{label=14;break;}
 case 13: 
 var $53=$3;
 var $54=$m;
 var $55=(($54+1224)|0);
 var $56=(($55)|0);
 _set_md5sum($53,$56);
 label=14;break;
 case 14: 
 var $58=$3;
 var $59=_hio_close($58);
 var $60=$4;
 var $61=($60|0)!=0;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=$4;
 _unlink_tempfiles($63);
 label=16;break;
 case 16: 
 var $65=$test_result;
 var $66=($65|0)<0;
 if($66){label=17;break;}else{label=18;break;}
 case 17: 
 var $68=$m;
 var $69=(($68+1212)|0);
 var $70=HEAP32[(($69)>>2)];
 _free($70);
 var $71=$m;
 var $72=(($71+1208)|0);
 var $73=HEAP32[(($72)>>2)];
 _free($73);
 $1=-3;
 label=23;break;
 case 18: 
 var $75=$load_result;
 var $76=($75|0)<0;
 if($76){label=19;break;}else{label=20;break;}
 case 19: 
 var $78=$2;
 _xmp_release_module($78);
 $1=-4;
 label=23;break;
 case 20: 
 var $80=$m;
 var $81=(($80)|0);
 var $82=(($81)|0);
 var $83=(($82)|0);
 var $84=_str_adj($83);
 var $85=$ctx;
 _load_epilogue($85);
 var $86=$ctx;
 var $87=_prepare_scan($86);
 $ret=$87;
 var $88=$ret;
 var $89=($88|0)<0;
 if($89){label=21;break;}else{label=22;break;}
 case 21: 
 var $91=$ret;
 $1=$91;
 label=23;break;
 case 22: 
 var $93=$ctx;
 var $94=_scan_sequences($93);
 var $95=$ctx;
 var $96=(($95+8140)|0);
 HEAP32[(($96)>>2)]=1;
 $1=0;
 label=23;break;
 case 23: 
 var $98=$1;
 STACKTOP=sp;return $98;
  default: assert(0, "bad label: " + label);
 }
}
function _set_md5sum($f,$digest){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16552)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $buf=sp;
 var $ctx=(sp)+(16384);
 var $bytes_read;
 var $st=(sp)+(16472);
 $1=$f;
 $2=$digest;
 var $3=$1;
 var $4=_hio_stat($3,$st);
 var $5=($4|0)<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=9;break;
 case 3: 
 var $8=(($st+36)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)<=0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$2;
 _memset($12, 0, 16)|0;
 label=9;break;
 case 5: 
 var $14=$1;
 var $15=_hio_seek($14,0,0);
 _MD5Init($ctx);
 label=6;break;
 case 6: 
 var $17=(($buf)|0);
 var $18=$1;
 var $19=_hio_read($17,1,16384,$18);
 $bytes_read=$19;
 var $20=($19|0)>0;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 var $22=(($buf)|0);
 var $23=$bytes_read;
 _MD5Update($ctx,$22,$23);
 label=6;break;
 case 8: 
 var $25=$2;
 _MD5Final($25,$ctx);
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _list_del($entry){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 ___list_del($4,$7);
 STACKTOP=sp;return;
}
function ___list_del($prev,$next){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$prev;
 $2=$next;
 var $3=$1;
 var $4=$2;
 var $5=(($4+4)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=$1;
 var $8=(($7)|0);
 HEAP32[(($8)>>2)]=$6;
 STACKTOP=sp;return;
}
function _list_add_tail($_new,$head){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$_new;
 $2=$head;
 var $3=$1;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 ___list_add($3,$6,$7);
 STACKTOP=sp;return;
}
function ___list_add($_new,$prev,$next){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$_new;
 $2=$prev;
 $3=$next;
 var $4=$1;
 var $5=$3;
 var $6=(($5+4)|0);
 HEAP32[(($6)>>2)]=$4;
 var $7=$3;
 var $8=$1;
 var $9=(($8)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=$1;
 var $12=(($11+4)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$1;
 var $14=$2;
 var $15=(($14)|0);
 HEAP32[(($15)>>2)]=$13;
 STACKTOP=sp;return;
}
function _exclude_match($name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 $2=$name;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=((9400+($4<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=7;break;}
 case 3: 
 var $9=$i;
 var $10=((9400+($9<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=_fnmatch($11,$12,0);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 var $18=$i;
 var $19=((($18)+(1))|0);
 $i=$19;
 label=2;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $22=$1;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }
}
function _load_prologue($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $m;
 var $i;
 $1=$ctx;
 var $2=$1;
 var $3=(($2+1552)|0);
 $m=$3;
 var $4=$m;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=$6;
 _memset($7, 0, 64)|0;
 var $8=$m;
 var $9=(($8)|0);
 var $10=(($9+64)|0);
 var $11=$10;
 _memset($11, 0, 64)|0;
 var $12=$m;
 var $13=(($12+1248)|0);
 HEAPF64[(($13)>>3)]=250;
 var $14=$m;
 var $15=(($14+1264)|0);
 HEAP32[(($15)>>2)]=8287;
 var $16=$m;
 var $17=(($16+1268)|0);
 HEAP32[(($17)>>2)]=64;
 var $18=$m;
 var $19=(($18+1272)|0);
 HEAP32[(($19)>>2)]=64;
 var $20=$m;
 var $21=(($20+1276)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=$m;
 var $23=(($22+1280)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=$m;
 var $25=(($24+1284)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=$m;
 var $27=(($26+1220)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=$m;
 var $29=(($28+6560)|0);
 HEAP32[(($29)>>2)]=0;
 var $30=$m;
 var $31=(($30)|0);
 var $32=(($31+128)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=$m;
 var $34=(($33)|0);
 var $35=(($34+132)|0);
 HEAP32[(($35)>>2)]=0;
 var $36=$m;
 var $37=(($36)|0);
 var $38=(($37+136)|0);
 HEAP32[(($38)>>2)]=4;
 var $39=$m;
 var $40=(($39)|0);
 var $41=(($40+140)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=$m;
 var $43=(($42)|0);
 var $44=(($43+144)|0);
 HEAP32[(($44)>>2)]=0;
 var $45=$m;
 var $46=(($45)|0);
 var $47=(($46+148)|0);
 HEAP32[(($47)>>2)]=6;
 var $48=$m;
 var $49=(($48)|0);
 var $50=(($49+152)|0);
 HEAP32[(($50)>>2)]=125;
 var $51=$m;
 var $52=(($51)|0);
 var $53=(($52+156)|0);
 HEAP32[(($53)>>2)]=0;
 var $54=$m;
 var $55=(($54)|0);
 var $56=(($55+160)|0);
 HEAP32[(($56)>>2)]=0;
 var $57=$m;
 var $58=(($57+6552)|0);
 HEAP32[(($58)>>2)]=1728;
 var $59=$m;
 var $60=(($59+6548)|0);
 HEAP32[(($60)>>2)]=0;
 var $61=$m;
 var $62=(($61+1256)|0);
 HEAPF64[(($62)>>3)]=10;
 $i=0;
 label=2;break;
 case 2: 
 var $64=$i;
 var $65=($64|0)<64;
 if($65){label=3;break;}else{label=5;break;}
 case 3: 
 var $67=$i;
 var $68=((($67)+(1))|0);
 var $69=(((($68|0))/(2))&-1);
 var $70=(((($69|0))%(2))&-1);
 var $71=((($70)*(255))&-1);
 var $72=$i;
 var $73=$m;
 var $74=(($73)|0);
 var $75=(($74+184)|0);
 var $76=(($75+((($72)*(12))&-1))|0);
 var $77=(($76)|0);
 HEAP32[(($77)>>2)]=$71;
 var $78=$i;
 var $79=$m;
 var $80=(($79)|0);
 var $81=(($80+184)|0);
 var $82=(($81+((($78)*(12))&-1))|0);
 var $83=(($82+4)|0);
 HEAP32[(($83)>>2)]=64;
 var $84=$i;
 var $85=$m;
 var $86=(($85)|0);
 var $87=(($86+184)|0);
 var $88=(($87+((($84)*(12))&-1))|0);
 var $89=(($88+8)|0);
 HEAP32[(($89)>>2)]=0;
 label=4;break;
 case 4: 
 var $91=$i;
 var $92=((($91)+(1))|0);
 $i=$92;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _load_epilogue($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $m;
 var $mod;
 var $i;
 var $j;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$1;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$m;
 var $9=(($8+1272)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$mod;
 var $12=(($11+164)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$mod;
 var $14=(($13+160)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$mod;
 var $17=(($16+156)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($15|0)>=($18|0);
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 var $21=$mod;
 var $22=(($21+160)|0);
 HEAP32[(($22)>>2)]=0;
 label=3;break;
 case 3: 
 var $24=$mod;
 var $25=(($24+148)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $29=$mod;
 var $30=(($29+148)|0);
 HEAP32[(($30)>>2)]=6;
 label=5;break;
 case 5: 
 var $32=$mod;
 var $33=(($32+152)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=$mod;
 var $38=(($37+152)|0);
 HEAP32[(($38)>>2)]=125;
 label=7;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $41=$i;
 var $42=$mod;
 var $43=(($42+140)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($41|0)<($44|0);
 if($45){label=9;break;}else{label=19;break;}
 case 9: 
 var $47=$m;
 var $48=(($47+1280)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$49^-1;
 var $51=$50&16384;
 var $52=($51|0)!=0;
 if($52){label=10;break;}else{label=11;break;}
 case 10: 
 var $54=$m;
 var $55=(($54+1268)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$i;
 var $58=$mod;
 var $59=(($58+176)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+((($57)*(764))&-1))|0);
 var $62=(($61+32)|0);
 HEAP32[(($62)>>2)]=$56;
 label=11;break;
 case 11: 
 $j=0;
 label=12;break;
 case 12: 
 var $65=$j;
 var $66=$i;
 var $67=$mod;
 var $68=(($67+176)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+((($66)*(764))&-1))|0);
 var $71=(($70+36)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($65|0)<($72|0);
 if($73){label=13;break;}else{label=17;break;}
 case 13: 
 var $75=$m;
 var $76=(($75+1280)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=$77^-1;
 var $79=$78&16384;
 var $80=($79|0)!=0;
 if($80){label=14;break;}else{label=15;break;}
 case 14: 
 var $82=$m;
 var $83=(($82+1268)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$j;
 var $86=$i;
 var $87=$mod;
 var $88=(($87+176)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+((($86)*(764))&-1))|0);
 var $91=(($90+756)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+($85<<6))|0);
 var $94=(($93+4)|0);
 HEAP32[(($94)>>2)]=$84;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $97=$j;
 var $98=((($97)+(1))|0);
 $j=$98;
 label=12;break;
 case 17: 
 label=18;break;
 case 18: 
 var $101=$i;
 var $102=((($101)+(1))|0);
 $i=$102;
 label=8;break;
 case 19: 
 $i=0;
 label=20;break;
 case 20: 
 var $105=$i;
 var $106=$mod;
 var $107=(($106+140)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($105|0)<($108|0);
 if($109){label=21;break;}else{label=23;break;}
 case 21: 
 var $111=$i;
 var $112=$mod;
 var $113=(($112+176)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+((($111)*(764))&-1))|0);
 var $116=(($115+44)|0);
 _check_envelope($116);
 var $117=$i;
 var $118=$mod;
 var $119=(($118+176)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+((($117)*(764))&-1))|0);
 var $122=(($121+356)|0);
 _check_envelope($122);
 var $123=$i;
 var $124=$mod;
 var $125=(($124+176)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+((($123)*(764))&-1))|0);
 var $128=(($127+200)|0);
 _check_envelope($128);
 label=22;break;
 case 22: 
 var $130=$i;
 var $131=((($130)+(1))|0);
 $i=$131;
 label=20;break;
 case 23: 
 var $133=$p;
 var $134=(($133+24)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$p;
 var $137=(($136+28)|0);
 HEAP32[(($137)>>2)]=$135;
 var $138=$1;
 _module_quirks($138);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _check_envelope($env){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$env;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)<=0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$1;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9|0)>=($12|0);
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=$1;
 var $16=(($15+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$1;
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($17|0)>=($20|0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$1;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25&-5;
 HEAP32[(($24)>>2)]=$26;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _module_quirks($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $m;
 var $i;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$1;
 var $5=(($4+1552)|0);
 $m=$5;
 $i=0;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=((5264+((($7)*(20))&-1))|0);
 var $9=(($8+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=7;break;}
 case 3: 
 var $13=$m;
 var $14=(($13+1224)|0);
 var $15=(($14)|0);
 var $16=$i;
 var $17=((5264+((($16)*(20))&-1))|0);
 var $18=(($17)|0);
 var $19=(($18)|0);
 var $20=_memcmp($15,$19,16);
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=$i;
 var $24=((5264+((($23)*(20))&-1))|0);
 var $25=(($24+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$p;
 var $28=(($27+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29|$26;
 HEAP32[(($28)>>2)]=$30;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $33=$i;
 var $34=((($33)+(1))|0);
 $i=$34;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _prepare_scan($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $m;
 var $mod;
 var $i;
 var $ord;
 var $pat_idx;
 var $pat;
 $2=$ctx;
 var $3=$2;
 var $4=(($3+1552)|0);
 $m=$4;
 var $5=$m;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7+952)|0);
 var $9=(($8)|0);
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=2;break;}
 case 2: 
 var $12=$mod;
 var $13=(($12+168)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=3;break;}
 case 3: 
 var $17=$mod;
 var $18=(($17+172)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-4;
 label=33;break;
 case 5: 
 $ord=0;
 label=6;break;
 case 6: 
 var $24=$ord;
 var $25=$mod;
 var $26=(($25+156)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($24|0)<($27|0);
 if($28){label=7;break;}else{var $41=0;label=8;break;}
 case 7: 
 var $30=$ord;
 var $31=$mod;
 var $32=(($31+952)|0);
 var $33=(($32+$30)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$mod;
 var $37=(($36+128)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($35|0)>=($38|0);
 var $41=$39;label=8;break;
 case 8: 
 var $41;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 var $43=$ord;
 var $44=((($43)+(1))|0);
 $ord=$44;
 label=6;break;
 case 10: 
 var $46=$ord;
 var $47=$mod;
 var $48=(($47+156)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($46|0)>=($49|0);
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=$mod;
 var $53=(($52+156)|0);
 HEAP32[(($53)>>2)]=0;
 label=12;break;
 case 12: 
 var $55=$mod;
 var $56=(($55+156)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=_calloc(4,$57);
 var $59=$58;
 var $60=$m;
 var $61=(($60+6560)|0);
 HEAP32[(($61)>>2)]=$59;
 var $62=$m;
 var $63=(($62+6560)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-6;
 label=33;break;
 case 14: 
 $i=0;
 label=15;break;
 case 15: 
 var $69=$i;
 var $70=$mod;
 var $71=(($70+156)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($69|0)<($72|0);
 if($73){label=16;break;}else{label=32;break;}
 case 16: 
 var $75=$i;
 var $76=$mod;
 var $77=(($76+952)|0);
 var $78=(($77+$75)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 $pat_idx=$80;
 var $81=$pat_idx;
 var $82=$mod;
 var $83=(($82+128)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($81|0)<($84|0);
 if($85){label=17;break;}else{label=21;break;}
 case 17: 
 var $87=$pat_idx;
 var $88=$mod;
 var $89=(($88+168)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+($87<<2))|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)!=0;
 if($93){label=21;break;}else{label=18;break;}
 case 18: 
 var $95=$mod;
 var $96=$pat_idx;
 var $97=_pattern_alloc($95,$96);
 var $98=($97|0)<0;
 if($98){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-6;
 label=33;break;
 case 20: 
 label=21;break;
 case 21: 
 var $102=$pat_idx;
 var $103=$mod;
 var $104=(($103+128)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($102|0)>=($105|0);
 if($106){label=22;break;}else{label=23;break;}
 case 22: 
 var $116=0;label=24;break;
 case 23: 
 var $109=$pat_idx;
 var $110=$mod;
 var $111=(($110+168)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+($109<<2))|0);
 var $114=HEAP32[(($113)>>2)];
 var $116=$114;label=24;break;
 case 24: 
 var $116;
 $pat=$116;
 var $117=$pat;
 var $118=($117|0)!=0;
 if($118){label=25;break;}else{label=27;break;}
 case 25: 
 var $120=$pat;
 var $121=(($120)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($122|0)!=0;
 if($123){label=26;break;}else{label=27;break;}
 case 26: 
 var $125=$pat;
 var $126=(($125)|0);
 var $127=HEAP32[(($126)>>2)];
 var $130=$127;label=28;break;
 case 27: 
 var $130=1;label=28;break;
 case 28: 
 var $130;
 var $131=_calloc(1,$130);
 var $132=$i;
 var $133=$m;
 var $134=(($133+6560)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135+($132<<2))|0);
 HEAP32[(($136)>>2)]=$131;
 var $137=$i;
 var $138=$m;
 var $139=(($138+6560)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+($137<<2))|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-6;
 label=33;break;
 case 30: 
 label=31;break;
 case 31: 
 var $147=$i;
 var $148=((($147)+(1))|0);
 $i=$148;
 label=15;break;
 case 32: 
 $1=0;
 label=33;break;
 case 33: 
 var $151=$1;
 STACKTOP=sp;return $151;
  default: assert(0, "bad label: " + label);
 }
}
function _ssn_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $id;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read16b($5);
 $id=$6;
 var $7=$id;
 var $8=($7&65535);
 var $9=($8|0)!=26982;
 if($9){label=2;break;}else{label=4;break;}
 case 2: 
 var $11=$id;
 var $12=($11&65535);
 var $13=($12|0)!=19022;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=7;break;
 case 4: 
 var $16=$2;
 var $17=_hio_seek($16,238,1);
 var $18=$2;
 var $19=_hio_read8($18);
 var $20=($19&255);
 var $21=($20|0)!=255;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=7;break;
 case 6: 
 var $24=$2;
 var $25=$4;
 var $26=((($25)+(2))|0);
 var $27=_hio_seek($24,$26,0);
 var $28=$2;
 var $29=$3;
 _read_title($28,$29,36);
 $1=0;
 label=7;break;
 case 7: 
 var $31=$1;
 STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }
}
function _ssn_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $sfh=sp;
 var $sih=(sp)+(504);
 var $ev=(sp)+(536);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($sfh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,2,1,$14);
 var $16=(($sfh+2)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,108,1,$18);
 var $20=$3;
 var $21=_hio_read8($20);
 var $22=(($sfh+110)|0);
 HEAP8[($22)]=$21;
 var $23=$3;
 var $24=_hio_read8($23);
 var $25=(($sfh+111)|0);
 HEAP8[($25)]=$24;
 var $26=$3;
 var $27=_hio_read8($26);
 var $28=(($sfh+112)|0);
 HEAP8[($28)]=$27;
 var $29=(($sfh+113)|0);
 var $30=$29;
 var $31=$3;
 var $32=_hio_read($30,128,1,$31);
 var $33=(($sfh+241)|0);
 var $34=$33;
 var $35=$3;
 var $36=_hio_read($34,128,1,$35);
 var $37=(($sfh+369)|0);
 var $38=$37;
 var $39=$3;
 var $40=_hio_read($38,128,1,$39);
 var $41=$mod;
 var $42=(($41+136)|0);
 HEAP32[(($42)>>2)]=8;
 var $43=(($sfh+110)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=$mod;
 var $47=(($46+140)|0);
 HEAP32[(($47)>>2)]=$45;
 var $48=(($sfh+111)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=$mod;
 var $52=(($51+128)|0);
 HEAP32[(($52)>>2)]=$50;
 var $53=$mod;
 var $54=(($53+136)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$mod;
 var $57=(($56+128)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(Math_imul($55,$58)|0);
 var $60=$mod;
 var $61=(($60+132)|0);
 HEAP32[(($61)>>2)]=$59;
 $i=0;
 label=4;break;
 case 4: 
 var $63=$i;
 var $64=($63|0)<128;
 if($64){label=5;break;}else{label=9;break;}
 case 5: 
 var $66=$i;
 var $67=(($sfh+113)|0);
 var $68=(($67+$66)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 var $71=(($sfh+111)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=($70|0)>($73|0);
 if($74){label=6;break;}else{label=7;break;}
 case 6: 
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $78=$i;
 var $79=((($78)+(1))|0);
 $i=$79;
 label=4;break;
 case 9: 
 var $81=$i;
 var $82=$mod;
 var $83=(($82+156)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=$mod;
 var $85=(($84+952)|0);
 var $86=$85;
 var $87=(($sfh+113)|0);
 var $88=$87;
 var $89=$mod;
 var $90=(($89+156)|0);
 var $91=HEAP32[(($90)>>2)];
 assert($91 % 1 === 0);(_memcpy($86, $88, $91)|0);
 var $92=$mod;
 var $93=(($92+148)|0);
 HEAP32[(($93)>>2)]=6;
 var $94=$mod;
 var $95=(($94+152)|0);
 HEAP32[(($95)>>2)]=76;
 var $96=$mod;
 var $97=(($96+140)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$mod;
 var $100=(($99+144)|0);
 HEAP32[(($100)>>2)]=$98;
 var $101=$2;
 var $102=(($101+1280)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=$103|4096;
 HEAP32[(($102)>>2)]=$104;
 var $105=$mod;
 var $106=(($105)|0);
 var $107=(($106)|0);
 var $108=(($sfh+2)|0);
 var $109=(($108)|0);
 var $110=_copy_adjust($107,$109,36);
 var $111=$2;
 var $112=(($sfh)|0);
 var $113=(($112)|0);
 var $114=_strncmp($113,25440,2);
 var $115=($114|0)!=0;
 var $116=($115?23968:20584);
 _set_type($111,$116,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $123=_malloc(109);
 var $124=$2;
 var $125=(($124+1220)|0);
 HEAP32[(($125)>>2)]=$123;
 var $126=$2;
 var $127=(($126+1220)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($sfh+2)|0);
 var $130=$129;
 assert(108 % 1 === 0);(_memcpy($128, $130, 108)|0);
 var $131=$2;
 var $132=(($131+1220)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+108)|0);
 HEAP8[($134)]=0;
 var $135=$mod;
 var $136=_instrument_init($135);
 var $137=($136|0)<0;
 if($137){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=77;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 $i=0;
 label=20;break;
 case 20: 
 var $143=$i;
 var $144=$mod;
 var $145=(($144+140)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($143|0)<($146|0);
 if($147){label=21;break;}else{label=32;break;}
 case 21: 
 var $149=$mod;
 var $150=$i;
 var $151=_subinstrument_alloc($149,$150,1);
 var $152=($151|0)<0;
 if($152){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=77;break;
 case 23: 
 var $155=(($sih)|0);
 var $156=$155;
 var $157=$3;
 var $158=_hio_read($156,13,1,$157);
 var $159=$3;
 var $160=_hio_read32l($159);
 var $161=(($sih+16)|0);
 HEAP32[(($161)>>2)]=$160;
 var $162=$3;
 var $163=_hio_read32l($162);
 var $164=(($sih+20)|0);
 HEAP32[(($164)>>2)]=$163;
 var $165=$3;
 var $166=_hio_read32l($165);
 var $167=(($sih+24)|0);
 HEAP32[(($167)>>2)]=$166;
 var $168=(($sih+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$i;
 var $171=$mod;
 var $172=(($171+180)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+((($170)*(52))&-1))|0);
 var $175=(($174+32)|0);
 HEAP32[(($175)>>2)]=$169;
 var $176=(($sih+20)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=$i;
 var $179=$mod;
 var $180=(($179+180)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+((($178)*(52))&-1))|0);
 var $183=(($182+36)|0);
 HEAP32[(($183)>>2)]=$177;
 var $184=(($sih+24)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($185>>>0)>=1048575;
 if($186){label=24;break;}else{label=25;break;}
 case 24: 
 var $192=0;label=26;break;
 case 25: 
 var $189=(($sih+24)|0);
 var $190=HEAP32[(($189)>>2)];
 var $192=$190;label=26;break;
 case 26: 
 var $192;
 var $193=$i;
 var $194=$mod;
 var $195=(($194+180)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+((($193)*(52))&-1))|0);
 var $198=(($197+40)|0);
 HEAP32[(($198)>>2)]=$192;
 var $199=$i;
 var $200=$mod;
 var $201=(($200+180)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+((($199)*(52))&-1))|0);
 var $204=(($203+40)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($205|0)!=0;
 var $207=($206?2:0);
 var $208=$i;
 var $209=$mod;
 var $210=(($209+180)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+((($208)*(52))&-1))|0);
 var $213=(($212+44)|0);
 HEAP32[(($213)>>2)]=$207;
 var $214=$i;
 var $215=$mod;
 var $216=(($215+176)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+((($214)*(764))&-1))|0);
 var $219=(($218+756)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220)|0);
 var $222=(($221)|0);
 HEAP32[(($222)>>2)]=64;
 var $223=$i;
 var $224=$mod;
 var $225=(($224+176)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+((($223)*(764))&-1))|0);
 var $228=(($227+756)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229)|0);
 var $231=(($230+8)|0);
 HEAP32[(($231)>>2)]=128;
 var $232=$i;
 var $233=$i;
 var $234=$mod;
 var $235=(($234+176)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+((($233)*(764))&-1))|0);
 var $238=(($237+756)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239)|0);
 var $241=(($240+40)|0);
 HEAP32[(($241)>>2)]=$232;
 var $242=$i;
 var $243=$mod;
 var $244=(($243+180)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+((($242)*(52))&-1))|0);
 var $247=(($246+32)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248|0)>0;
 if($249){label=27;break;}else{label=28;break;}
 case 27: 
 var $251=$i;
 var $252=$mod;
 var $253=(($252+176)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+((($251)*(764))&-1))|0);
 var $256=(($255+36)|0);
 HEAP32[(($256)>>2)]=1;
 label=28;break;
 case 28: 
 var $258=$mod;
 var $259=$i;
 var $260=(($sih)|0);
 var $261=(($260)|0);
 var $262=_instrument_name($258,$259,$261,13);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $266=$i;
 var $267=((($266)+(1))|0);
 $i=$267;
 label=20;break;
 case 32: 
 var $269=$mod;
 var $270=_pattern_init($269);
 var $271=($270|0)<0;
 if($271){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=77;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 $i=0;
 label=37;break;
 case 37: 
 var $277=$i;
 var $278=$mod;
 var $279=(($278+128)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=($277|0)<($280|0);
 if($281){label=38;break;}else{label=62;break;}
 case 38: 
 var $283=$mod;
 var $284=$i;
 var $285=_pattern_tracks_alloc($283,$284,64);
 var $286=($285|0)<0;
 if($286){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=77;break;
 case 40: 
 var $289=$i;
 var $290=$2;
 var $291=(($290)|0);
 var $292=(($291+168)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293+($289<<2))|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=(($295+4)|0);
 var $297=(($296)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=$2;
 var $300=(($299)|0);
 var $301=(($300+172)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+($298<<2))|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(($304+4)|0);
 var $306=(($305)|0);
 var $307=(($306+5)|0);
 HEAP8[($307)]=126;
 var $308=$i;
 var $309=(($sfh+241)|0);
 var $310=(($309+$308)|0);
 var $311=HEAP8[($310)];
 var $312=$i;
 var $313=$2;
 var $314=(($313)|0);
 var $315=(($314+168)|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=(($316+($312<<2))|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=(($318+4)|0);
 var $320=(($319)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=$2;
 var $323=(($322)|0);
 var $324=(($323+172)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=(($325+($321<<2))|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(($327+4)|0);
 var $329=(($328)|0);
 var $330=(($329+6)|0);
 HEAP8[($330)]=$311;
 var $331=$i;
 var $332=(($sfh+369)|0);
 var $333=(($332+$331)|0);
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=$i;
 var $337=$2;
 var $338=(($337)|0);
 var $339=(($338+168)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=(($340+($336<<2))|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($342+4)|0);
 var $344=(($343+4)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=$2;
 var $347=(($346)|0);
 var $348=(($347+172)|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=(($349+($345<<2))|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=(($351+4)|0);
 var $353=(($352+($335<<3))|0);
 var $354=(($353+5)|0);
 HEAP8[($354)]=13;
 var $355=$i;
 var $356=(($sfh+369)|0);
 var $357=(($356+$355)|0);
 var $358=HEAP8[($357)];
 var $359=($358&255);
 var $360=$i;
 var $361=$2;
 var $362=(($361)|0);
 var $363=(($362+168)|0);
 var $364=HEAP32[(($363)>>2)];
 var $365=(($364+($360<<2))|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(($366+4)|0);
 var $368=(($367+4)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=$2;
 var $371=(($370)|0);
 var $372=(($371+172)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373+($369<<2))|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+4)|0);
 var $377=(($376+($359<<3))|0);
 var $378=(($377+6)|0);
 HEAP8[($378)]=0;
 $j=0;
 label=41;break;
 case 41: 
 var $380=$j;
 var $381=($380|0)<512;
 if($381){label=42;break;}else{label=60;break;}
 case 42: 
 var $383=$j;
 var $384=(((($383|0))/(8))&-1);
 var $385=$j;
 var $386=(((($385|0))%(8))&-1);
 var $387=$i;
 var $388=$2;
 var $389=(($388)|0);
 var $390=(($389+168)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=(($391+($387<<2))|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=(($393+4)|0);
 var $395=(($394+($386<<2))|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=$2;
 var $398=(($397)|0);
 var $399=(($398+172)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=(($400+($396<<2))|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=(($402+4)|0);
 var $404=(($403+($384<<3))|0);
 $event=$404;
 var $405=$ev;
 var $406=$3;
 var $407=_hio_read($405,1,3,$406);
 var $408=(($ev)|0);
 var $409=HEAP8[($408)];
 var $410=($409&255);
 var $411=$410&254;
 var $412=($411|0)!=254;
 if($412){label=43;break;}else{label=44;break;}
 case 43: 
 var $414=(($ev)|0);
 var $415=HEAP8[($414)];
 var $416=($415&255);
 var $417=$416>>2;
 var $418=((($417)+(37))|0);
 var $419=(($418)&255);
 var $420=$event;
 var $421=(($420)|0);
 HEAP8[($421)]=$419;
 var $422=(($ev+1)|0);
 var $423=HEAP8[($422)];
 var $424=($423&255);
 var $425=$424&240;
 var $426=$425>>4;
 var $427=((($426)+(1))|0);
 var $428=(($ev)|0);
 var $429=HEAP8[($428)];
 var $430=($429&255);
 var $431=$430&3;
 var $432=$431<<4;
 var $433=((($427)+($432))|0);
 var $434=(($433)&255);
 var $435=$event;
 var $436=(($435+1)|0);
 HEAP8[($436)]=$434;
 label=44;break;
 case 44: 
 var $438=(($ev)|0);
 var $439=HEAP8[($438)];
 var $440=($439&255);
 var $441=($440|0)!=255;
 if($441){label=45;break;}else{label=46;break;}
 case 45: 
 var $443=(($ev+1)|0);
 var $444=HEAP8[($443)];
 var $445=($444&255);
 var $446=$445&15;
 var $447=$446<<2;
 var $448=((($447)+(1))|0);
 var $449=(($448)&255);
 var $450=$event;
 var $451=(($450+2)|0);
 HEAP8[($451)]=$449;
 label=46;break;
 case 46: 
 var $453=(($ev+2)|0);
 var $454=HEAP8[($453)];
 var $455=($454&255);
 var $456=($455|0)!=255;
 if($456){label=47;break;}else{label=58;break;}
 case 47: 
 var $458=(($ev+2)|0);
 var $459=HEAP8[($458)];
 var $460=($459&255);
 var $461=$460&240;
 var $462=$461>>4;
 var $463=($462|0)>5;
 if($463){label=48;break;}else{label=49;break;}
 case 48: 
 label=59;break;
 case 49: 
 var $466=(($ev+2)|0);
 var $467=HEAP8[($466)];
 var $468=($467&255);
 var $469=($468|0)<5;
 var $470=($469&1);
 var $471=$470&240;
 var $472=$471>>4;
 var $473=($472|0)!=0;
 if($473){label=50;break;}else{label=52;break;}
 case 50: 
 var $475=$event;
 var $476=(($475+1)|0);
 var $477=HEAP8[($476)];
 var $478=(($477<<24)>>24)!=0;
 if($478){label=52;break;}else{label=51;break;}
 case 51: 
 label=59;break;
 case 52: 
 var $481=(($ev+2)|0);
 var $482=HEAP8[($481)];
 var $483=($482&255);
 var $484=$483&240;
 var $485=$484>>4;
 var $486=((7808+$485)|0);
 var $487=HEAP8[($486)];
 var $488=$event;
 var $489=(($488+3)|0);
 HEAP8[($489)]=$487;
 var $490=$event;
 var $491=(($490+3)|0);
 var $492=HEAP8[($491)];
 var $493=($492&255);
 switch(($493|0)){case 121:case 120:case 122:{ label=53;break;}case 123:{ label=54;break;}case 166:{ label=55;break;}case 126:{ label=56;break;}default:{label=57;break;}}break;
 case 53: 
 var $495=(($ev+2)|0);
 var $496=HEAP8[($495)];
 var $497=($496&255);
 var $498=$497&15;
 var $499=(($498)&255);
 var $500=$event;
 var $501=(($500+4)|0);
 HEAP8[($501)]=$499;
 label=57;break;
 case 54: 
 var $503=$event;
 var $504=(($503+4)|0);
 HEAP8[($504)]=1;
 label=57;break;
 case 55: 
 var $506=(($ev+2)|0);
 var $507=HEAP8[($506)];
 var $508=($507&255);
 var $509=$508&15;
 var $510=$509<<4;
 var $511=((($510)+(128))|0);
 var $512=(($511)&255);
 var $513=$event;
 var $514=(($513+4)|0);
 HEAP8[($514)]=$512;
 label=57;break;
 case 56: 
 var $516=(($ev+2)|0);
 var $517=HEAP8[($516)];
 var $518=($517&255);
 var $519=$518&15;
 var $520=(($519)&255);
 var $521=$event;
 var $522=(($521+4)|0);
 HEAP8[($522)]=$520;
 var $523=$event;
 var $524=(($523+5)|0);
 HEAP8[($524)]=127;
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 var $528=$j;
 var $529=((($528)+(1))|0);
 $j=$529;
 label=41;break;
 case 60: 
 label=61;break;
 case 61: 
 var $532=$i;
 var $533=((($532)+(1))|0);
 $i=$533;
 label=37;break;
 case 62: 
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 $i=0;
 label=65;break;
 case 65: 
 var $538=$i;
 var $539=$mod;
 var $540=(($539+140)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=($538|0)<($541|0);
 if($542){label=66;break;}else{label=72;break;}
 case 66: 
 var $544=$i;
 var $545=$mod;
 var $546=(($545+180)|0);
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547+((($544)*(52))&-1))|0);
 var $549=(($548+32)|0);
 var $550=HEAP32[(($549)>>2)];
 var $551=($550|0)<=2;
 if($551){label=67;break;}else{label=68;break;}
 case 67: 
 label=71;break;
 case 68: 
 var $554=$2;
 var $555=$3;
 var $556=$i;
 var $557=$mod;
 var $558=(($557+180)|0);
 var $559=HEAP32[(($558)>>2)];
 var $560=(($559+((($556)*(52))&-1))|0);
 var $561=_load_sample($554,$555,2,$560,0);
 var $562=($561|0)<0;
 if($562){label=69;break;}else{label=70;break;}
 case 69: 
 $1=-1;
 label=77;break;
 case 70: 
 label=71;break;
 case 71: 
 var $566=$i;
 var $567=((($566)+(1))|0);
 $i=$567;
 label=65;break;
 case 72: 
 $i=0;
 label=73;break;
 case 73: 
 var $570=$i;
 var $571=$mod;
 var $572=(($571+136)|0);
 var $573=HEAP32[(($572)>>2)];
 var $574=($570|0)<($573|0);
 if($574){label=74;break;}else{label=76;break;}
 case 74: 
 var $576=$i;
 var $577=(((($576|0))%(2))&-1);
 var $578=((($577)*(255))&-1);
 var $579=$i;
 var $580=$mod;
 var $581=(($580+184)|0);
 var $582=(($581+((($579)*(12))&-1))|0);
 var $583=(($582)|0);
 HEAP32[(($583)>>2)]=$578;
 label=75;break;
 case 75: 
 var $585=$i;
 var $586=((($585)+(1))|0);
 $i=$586;
 label=73;break;
 case 76: 
 var $588=$2;
 var $589=(($588+1280)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=$590|256;
 HEAP32[(($589)>>2)]=$591;
 $1=0;
 label=77;break;
 case 77: 
 var $593=$1;
 STACKTOP=sp;return $593;
  default: assert(0, "bad label: " + label);
 }
}
function _amd_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(1062))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=(($buf)|0);
 var $10=$2;
 var $11=_hio_read($9,1,9,$10);
 var $12=($11>>>0)<9;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=7;break;
 case 3: 
 var $15=(($buf)|0);
 var $16=_memcmp($15,25328,2);
 var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=4;break;}
 case 4: 
 var $19=(($buf)|0);
 var $20=(($19+6)|0);
 var $21=_memcmp($20,25208,3);
 var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=7;break;
 case 6: 
 var $25=$2;
 var $26=$4;
 var $27=(($26)|0);
 var $28=_hio_seek($25,$27,0);
 var $29=$2;
 var $30=$3;
 _read_title($29,$30,24);
 $1=0;
 label=7;break;
 case 7: 
 var $32=$1;
 STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }
}
function _amd_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1088)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $afh=sp;
 var $regs=(sp)+(1072);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($afh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,24,1,$14);
 var $16=(($afh+24)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,24,1,$18);
 $i=0;
 label=4;break;
 case 4: 
 var $21=$i;
 var $22=($21|0)<26;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=$i;
 var $25=(($afh+48)|0);
 var $26=(($25+((($24)*(34))&-1))|0);
 var $27=(($26)|0);
 var $28=$27;
 var $29=$3;
 var $30=_hio_read($28,23,1,$29);
 var $31=$i;
 var $32=(($afh+48)|0);
 var $33=(($32+((($31)*(34))&-1))|0);
 var $34=(($33+23)|0);
 var $35=$34;
 var $36=$3;
 var $37=_hio_read($35,11,1,$36);
 label=6;break;
 case 6: 
 var $39=$i;
 var $40=((($39)+(1))|0);
 $i=$40;
 label=4;break;
 case 7: 
 var $42=$3;
 var $43=_hio_read8($42);
 var $44=(($afh+932)|0);
 HEAP8[($44)]=$43;
 var $45=$3;
 var $46=_hio_read8($45);
 var $47=(($afh+933)|0);
 HEAP8[($47)]=$46;
 var $48=(($afh+934)|0);
 var $49=$48;
 var $50=$3;
 var $51=_hio_read($49,128,1,$50);
 var $52=(($afh+1062)|0);
 var $53=$52;
 var $54=$3;
 var $55=_hio_read($53,9,1,$54);
 var $56=$3;
 var $57=_hio_read8($56);
 var $58=(($afh+1071)|0);
 HEAP8[($58)]=$57;
 var $59=(($afh+1071)|0);
 var $60=HEAP8[($59)];
 var $61=($60&255);
 var $62=($61|0)!=16;
 if($62){label=8;break;}else{label=10;break;}
 case 8: 
 var $64=(($afh+1071)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=($66|0)!=17;
 if($67){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=46;break;
 case 10: 
 var $70=$mod;
 var $71=(($70+136)|0);
 HEAP32[(($71)>>2)]=9;
 var $72=$mod;
 var $73=(($72+152)|0);
 HEAP32[(($73)>>2)]=125;
 var $74=$mod;
 var $75=(($74+148)|0);
 HEAP32[(($75)>>2)]=6;
 var $76=(($afh+932)|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=$mod;
 var $80=(($79+156)|0);
 HEAP32[(($80)>>2)]=$78;
 var $81=(($afh+933)|0);
 var $82=HEAP8[($81)];
 var $83=($82&255);
 var $84=((($83)+(1))|0);
 var $85=$mod;
 var $86=(($85+128)|0);
 HEAP32[(($86)>>2)]=$84;
 var $87=$mod;
 var $88=(($87+140)|0);
 HEAP32[(($88)>>2)]=26;
 var $89=$mod;
 var $90=(($89+140)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$mod;
 var $93=(($92+144)|0);
 HEAP32[(($93)>>2)]=$91;
 var $94=$mod;
 var $95=(($94+952)|0);
 var $96=$95;
 var $97=(($afh+934)|0);
 var $98=$97;
 var $99=$mod;
 var $100=(($99+156)|0);
 var $101=HEAP32[(($100)>>2)];
 assert($101 % 1 === 0);(_memcpy($96, $98, $101)|0);
 var $102=$2;
 _set_type($102,20256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $103=$mod;
 var $104=(($103)|0);
 var $105=(($104)|0);
 var $106=(($afh)|0);
 var $107=(($106)|0);
 var $108=_strlcpy($105,$107,24);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $117=$mod;
 var $118=_instrument_init($117);
 var $119=($118|0)<0;
 if($119){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=46;break;
 case 20: 
 $i=0;
 label=21;break;
 case 21: 
 var $123=$i;
 var $124=$mod;
 var $125=(($124+140)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($123|0)<($126|0);
 if($127){label=22;break;}else{label=34;break;}
 case 22: 
 var $129=$mod;
 var $130=$i;
 var $131=_subinstrument_alloc($129,$130,1);
 var $132=($131|0)<0;
 if($132){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=46;break;
 case 24: 
 var $135=$mod;
 var $136=$i;
 var $137=$i;
 var $138=(($afh+48)|0);
 var $139=(($138+((($137)*(34))&-1))|0);
 var $140=(($139)|0);
 var $141=(($140)|0);
 var $142=_instrument_name($135,$136,$141,23);
 var $143=$i;
 var $144=$mod;
 var $145=(($144+176)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+((($143)*(764))&-1))|0);
 var $148=(($147+756)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149)|0);
 var $151=(($150)|0);
 HEAP32[(($151)>>2)]=64;
 var $152=$i;
 var $153=$mod;
 var $154=(($153+176)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+((($152)*(764))&-1))|0);
 var $157=(($156+756)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158)|0);
 var $160=(($159+8)|0);
 HEAP32[(($160)>>2)]=128;
 var $161=$i;
 var $162=$i;
 var $163=$mod;
 var $164=(($163+176)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+((($162)*(764))&-1))|0);
 var $167=(($166+756)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168)|0);
 var $170=(($169+40)|0);
 HEAP32[(($170)>>2)]=$161;
 var $171=$i;
 var $172=$mod;
 var $173=(($172+176)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+((($171)*(764))&-1))|0);
 var $176=(($175+36)|0);
 HEAP32[(($176)>>2)]=1;
 $j=0;
 label=25;break;
 case 25: 
 var $178=$j;
 var $179=($178|0)<11;
 if($179){label=26;break;}else{label=28;break;}
 case 26: 
 var $181=$j;
 var $182=((19880+($181<<2))|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=$i;
 var $185=(($afh+48)|0);
 var $186=(($185+((($184)*(34))&-1))|0);
 var $187=(($186+23)|0);
 var $188=(($187+$183)|0);
 var $189=HEAP8[($188)];
 var $190=$j;
 var $191=(($regs+$190)|0);
 HEAP8[($191)]=$189;
 label=27;break;
 case 27: 
 var $193=$j;
 var $194=((($193)+(1))|0);
 $j=$194;
 label=25;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $198=$2;
 var $199=$3;
 var $200=$i;
 var $201=$mod;
 var $202=(($201+180)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+((($200)*(52))&-1))|0);
 var $205=(($regs)|0);
 var $206=_load_sample($198,$199,4096,$204,$205);
 var $207=($206|0)<0;
 if($207){label=31;break;}else{label=32;break;}
 case 31: 
 $1=-1;
 label=46;break;
 case 32: 
 label=33;break;
 case 33: 
 var $211=$i;
 var $212=((($211)+(1))|0);
 $i=$212;
 label=21;break;
 case 34: 
 var $214=(($afh+1071)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=($216|0)==16;
 if($217){label=35;break;}else{label=38;break;}
 case 35: 
 var $219=$2;
 var $220=$3;
 var $221=_load_unpacked_patterns($219,$220);
 var $222=($221|0)<0;
 if($222){label=36;break;}else{label=37;break;}
 case 36: 
 $1=-1;
 label=46;break;
 case 37: 
 label=41;break;
 case 38: 
 var $226=$2;
 var $227=$3;
 var $228=_load_packed_patterns($226,$227);
 var $229=($228|0)<0;
 if($229){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=46;break;
 case 40: 
 label=41;break;
 case 41: 
 $i=0;
 label=42;break;
 case 42: 
 var $234=$i;
 var $235=$mod;
 var $236=(($235+136)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=($234|0)<($237|0);
 if($238){label=43;break;}else{label=45;break;}
 case 43: 
 var $240=$i;
 var $241=$mod;
 var $242=(($241+184)|0);
 var $243=(($242+((($240)*(12))&-1))|0);
 var $244=(($243)|0);
 HEAP32[(($244)>>2)]=128;
 var $245=$i;
 var $246=$mod;
 var $247=(($246+184)|0);
 var $248=(($247+((($245)*(12))&-1))|0);
 var $249=(($248+8)|0);
 HEAP32[(($249)>>2)]=1;
 label=44;break;
 case 44: 
 var $251=$i;
 var $252=((($251)+(1))|0);
 $i=$252;
 label=42;break;
 case 45: 
 var $254=$2;
 var $255=(($254+6552)|0);
 HEAP32[(($255)>>2)]=1760;
 $1=0;
 label=46;break;
 case 46: 
 var $257=$1;
 STACKTOP=sp;return $257;
  default: assert(0, "bad label: " + label);
 }
}
function _load_unpacked_patterns($m,$f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $mod;
 var $i;
 var $j;
 var $tmode;
 var $b;
 var $event;
 $2=$m;
 $3=$f;
 var $4=$2;
 var $5=(($4)|0);
 $mod=$5;
 $tmode=1;
 var $6=$mod;
 var $7=(($6+128)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)*(9))&-1);
 var $10=$mod;
 var $11=(($10+132)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$mod;
 var $13=_pattern_init($12);
 var $14=($13|0)<0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=16;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $18=$i;
 var $19=$mod;
 var $20=(($19+128)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($18|0)<($21|0);
 if($22){label=5;break;}else{label=15;break;}
 case 5: 
 var $24=$mod;
 var $25=$i;
 var $26=_pattern_tracks_alloc($24,$25,64);
 var $27=($26|0)<0;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=16;break;
 case 7: 
 $j=0;
 label=8;break;
 case 8: 
 var $31=$j;
 var $32=$mod;
 var $33=(($32+136)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34<<6);
 var $36=($31|0)<($35|0);
 if($36){label=9;break;}else{label=13;break;}
 case 9: 
 var $38=$j;
 var $39=$mod;
 var $40=(($39+136)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(((($38|0))/(($41|0)))&-1);
 var $43=$j;
 var $44=$mod;
 var $45=(($44+136)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(((($43|0))%(($46|0)))&-1);
 var $48=$i;
 var $49=$2;
 var $50=(($49)|0);
 var $51=(($50+168)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+($48<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+4)|0);
 var $56=(($55+($47<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$2;
 var $59=(($58)|0);
 var $60=(($59+172)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+($57<<2))|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+4)|0);
 var $65=(($64+($42<<3))|0);
 $event=$65;
 var $66=$3;
 var $67=_hio_read8($66);
 $b=$67;
 var $68=$b;
 var $69=$event;
 var $70=$3;
 _read_event693($68,$69,$70);
 var $71=$event;
 var $72=(($71+4)|0);
 var $73=HEAP8[($72)];
 var $74=($73&255);
 var $75=($74|0)==15;
 if($75){label=10;break;}else{label=11;break;}
 case 10: 
 $tmode=3;
 label=11;break;
 case 11: 
 var $78=$tmode;
 var $79=$event;
 var $80=(($79+4)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=(Math_imul($82,$78)|0);
 var $84=(($83)&255);
 HEAP8[($80)]=$84;
 label=12;break;
 case 12: 
 var $86=$j;
 var $87=((($86)+(1))|0);
 $j=$87;
 label=8;break;
 case 13: 
 label=14;break;
 case 14: 
 var $90=$i;
 var $91=((($90)+(1))|0);
 $i=$91;
 label=4;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $94=$1;
 STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }
}
function _load_packed_patterns($m,$f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $mod;
 var $i;
 var $j;
 var $r;
 var $tmode;
 var $stored_tracks;
 var $event;
 var $b;
 var $w;
 var $w1;
 $2=$m;
 $3=$f;
 var $4=$2;
 var $5=(($4)|0);
 $mod=$5;
 $tmode=1;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $8=$mod;
 var $9=(($8+128)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)+(1))|0);
 var $12=_calloc(4,$11);
 var $13=$12;
 var $14=$mod;
 var $15=(($14+168)|0);
 HEAP32[(($15)>>2)]=$13;
 var $16=$mod;
 var $17=(($16+168)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=36;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $23=$i;
 var $24=$mod;
 var $25=(($24+128)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($23|0)<($26|0);
 if($27){label=7;break;}else{label=17;break;}
 case 7: 
 var $29=$mod;
 var $30=$i;
 var $31=_pattern_alloc($29,$30);
 var $32=($31|0)<0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=36;break;
 case 9: 
 $j=0;
 label=10;break;
 case 10: 
 var $36=$j;
 var $37=($36|0)<9;
 if($37){label=11;break;}else{label=15;break;}
 case 11: 
 var $39=$3;
 var $40=_hio_read16l($39);
 $w1=$40;
 var $41=$w1;
 var $42=($41&65535);
 var $43=$j;
 var $44=$i;
 var $45=$mod;
 var $46=(($45+168)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+($44<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+4)|0);
 var $51=(($50+($43<<2))|0);
 HEAP32[(($51)>>2)]=$42;
 var $52=$w1;
 var $53=($52&65535);
 var $54=$mod;
 var $55=(($54+132)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($53|0)>($56|0);
 if($57){label=12;break;}else{label=13;break;}
 case 12: 
 var $59=$w1;
 var $60=($59&65535);
 var $61=$mod;
 var $62=(($61+132)|0);
 HEAP32[(($62)>>2)]=$60;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $65=$j;
 var $66=((($65)+(1))|0);
 $j=$66;
 label=10;break;
 case 15: 
 var $68=$i;
 var $69=$mod;
 var $70=(($69+168)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+($68<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73)|0);
 HEAP32[(($74)>>2)]=64;
 label=16;break;
 case 16: 
 var $76=$i;
 var $77=((($76)+(1))|0);
 $i=$77;
 label=6;break;
 case 17: 
 var $79=$mod;
 var $80=(($79+132)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=((($81)+(1))|0);
 HEAP32[(($80)>>2)]=$82;
 var $83=$3;
 var $84=_hio_read16l($83);
 var $85=($84&65535);
 $stored_tracks=$85;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $88=$mod;
 var $89=(($88+132)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=_calloc(4,$90);
 var $92=$91;
 var $93=$mod;
 var $94=(($93+172)|0);
 HEAP32[(($94)>>2)]=$92;
 var $95=$mod;
 var $96=(($95+172)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($97|0)==0;
 if($98){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=36;break;
 case 21: 
 $i=0;
 label=22;break;
 case 22: 
 var $102=$i;
 var $103=$stored_tracks;
 var $104=($102|0)<($103|0);
 if($104){label=23;break;}else{label=35;break;}
 case 23: 
 var $106=$3;
 var $107=_hio_read16l($106);
 $w=$107;
 var $108=$mod;
 var $109=$w;
 var $110=($109&65535);
 var $111=_track_alloc($108,$110,64);
 var $112=($111|0)<0;
 if($112){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=36;break;
 case 25: 
 $r=0;
 label=26;break;
 case 26: 
 var $116=$r;
 var $117=($116|0)<64;
 if($117){label=27;break;}else{label=33;break;}
 case 27: 
 var $119=$r;
 var $120=$w;
 var $121=($120&65535);
 var $122=$mod;
 var $123=(($122+172)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+($121<<2))|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+4)|0);
 var $128=(($127+($119<<3))|0);
 $event=$128;
 var $129=$3;
 var $130=_hio_read8($129);
 $b=$130;
 var $131=$b;
 var $132=($131&255);
 var $133=$132&128;
 var $134=($133|0)!=0;
 if($134){label=28;break;}else{label=29;break;}
 case 28: 
 var $136=$b;
 var $137=($136&255);
 var $138=$137&127;
 var $139=((($138)-(1))|0);
 var $140=$r;
 var $141=((($140)+($139))|0);
 $r=$141;
 label=32;break;
 case 29: 
 var $143=$b;
 var $144=$event;
 var $145=$3;
 _read_event693($143,$144,$145);
 var $146=$event;
 var $147=(($146+4)|0);
 var $148=HEAP8[($147)];
 var $149=($148&255);
 var $150=($149|0)==15;
 if($150){label=30;break;}else{label=31;break;}
 case 30: 
 $tmode=3;
 label=31;break;
 case 31: 
 var $153=$tmode;
 var $154=$event;
 var $155=(($154+4)|0);
 var $156=HEAP8[($155)];
 var $157=($156&255);
 var $158=(Math_imul($157,$153)|0);
 var $159=(($158)&255);
 HEAP8[($155)]=$159;
 label=32;break;
 case 32: 
 var $161=$r;
 var $162=((($161)+(1))|0);
 $r=$162;
 label=26;break;
 case 33: 
 label=34;break;
 case 34: 
 var $165=$i;
 var $166=((($165)+(1))|0);
 $i=$166;
 label=22;break;
 case 35: 
 $1=0;
 label=36;break;
 case 36: 
 var $169=$1;
 STACKTOP=sp;return $169;
  default: assert(0, "bad label: " + label);
 }
}
function _read_event693($b,$event,$f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$b;
 $2=$event;
 $3=$f;
 var $4=$1;
 var $5=$2;
 var $6=(($5+4)|0);
 HEAP8[($6)]=$4;
 var $7=$3;
 var $8=_hio_read8($7);
 $1=$8;
 var $9=$1;
 var $10=($9&255);
 var $11=$10&240;
 var $12=$11>>4;
 var $13=(($12)&255);
 var $14=$2;
 var $15=(($14+1)|0);
 HEAP8[($15)]=$13;
 var $16=$1;
 var $17=($16&255);
 var $18=$17&15;
 var $19=(($18)&255);
 $1=$19;
 var $20=($19&255);
 switch(($20|0)){case 0:case 1:case 2:{ label=2;break;}case 8:{ label=3;break;}case 4:{ label=4;break;}case 3:case 9:{ label=5;break;}case 5:{ label=6;break;}case 6:{ label=7;break;}case 7:{ label=8;break;}default:{label=11;break;}}break;
 case 2: 
 label=11;break;
 case 3: 
 $1=3;
 label=11;break;
 case 4: 
 $1=12;
 label=11;break;
 case 5: 
 $1=0;
 var $25=$2;
 var $26=(($25+4)|0);
 HEAP8[($26)]=0;
 label=11;break;
 case 6: 
 $1=11;
 label=11;break;
 case 7: 
 $1=13;
 label=11;break;
 case 8: 
 var $30=$2;
 var $31=(($30+4)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=($33|0)>31;
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 var $36=$2;
 var $37=(($36+4)|0);
 HEAP8[($37)]=0;
 label=11;break;
 case 10: 
 $1=15;
 label=11;break;
 case 11: 
 var $40=$1;
 var $41=$2;
 var $42=(($41+3)|0);
 HEAP8[($42)]=$40;
 var $43=$3;
 var $44=_hio_read8($43);
 $1=$44;
 var $45=$1;
 var $46=($45&255);
 var $47=$46&1;
 var $48=$47<<4;
 var $49=$2;
 var $50=(($49+1)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=$52|$48;
 var $54=(($53)&255);
 HEAP8[($50)]=$54;
 var $55=$1;
 var $56=($55&255);
 var $57=$56&240;
 var $58=$57>>4;
 var $59=(($58)&255);
 var $60=$2;
 var $61=(($60)|0);
 HEAP8[($61)]=$59;
 var $62=(($59<<24)>>24)!=0;
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 var $64=$1;
 var $65=($64&255);
 var $66=$65&14;
 var $67=$66>>1;
 var $68=((($67)+(2))|0);
 var $69=((($68)*(12))&-1);
 var $70=$2;
 var $71=(($70)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=((($73)+($69))|0);
 var $75=(($74)&255);
 HEAP8[($71)]=$75;
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _amf_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 var $ver;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,3,$6);
 var $8=($7>>>0)<3;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=11;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=HEAP8[($11)];
 var $13=(($12<<24)>>24);
 var $14=($13|0)!=65;
 if($14){label=6;break;}else{label=4;break;}
 case 4: 
 var $16=(($buf+1)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 var $19=($18|0)!=77;
 if($19){label=6;break;}else{label=5;break;}
 case 5: 
 var $21=(($buf+2)|0);
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24);
 var $24=($23|0)!=70;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=11;break;
 case 7: 
 var $27=$2;
 var $28=_hio_read8($27);
 var $29=($28&255);
 $ver=$29;
 var $30=$ver;
 var $31=($30|0)<10;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=$ver;
 var $34=($33|0)>14;
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=11;break;
 case 10: 
 var $37=$2;
 var $38=$3;
 _read_title($37,$38,32);
 $1=0;
 label=11;break;
 case 11: 
 var $40=$1;
 STACKTOP=sp;return $40;
  default: assert(0, "bad label: " + label);
 }
}
function _amf_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $buf=sp;
 var $trkmap;
 var $newtrk;
 var $ver;
 var $t;
 var $b;
 var $len;
 var $start1;
 var $end;
 var $pos;
 var $b2;
 var $c2spd;
 var $t3;
 var $k;
 var $t1;
 var $t2;
 var $t34;
 var $size;
 var $fxp;
 var $fxt;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($buf)|0);
 var $13=$3;
 var $14=_hio_read($12,1,3,$13);
 var $15=$3;
 var $16=_hio_read8($15);
 var $17=($16&255);
 $ver=$17;
 var $18=(($buf)|0);
 var $19=$3;
 var $20=_hio_read($18,1,32,$19);
 var $21=$mod;
 var $22=(($21)|0);
 var $23=(($22)|0);
 var $24=(($buf)|0);
 var $25=_strlcpy($23,$24,32);
 var $26=$2;
 var $27=$ver;
 var $28=(((($27|0))/(10))&-1);
 var $29=$ver;
 var $30=(((($29|0))%(10))&-1);
 _set_type($26,27368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$28,HEAP32[(((tempVarArgs)+(8))>>2)]=$30,tempVarArgs)); STACKTOP=tempVarArgs;
 var $31=$3;
 var $32=_hio_read8($31);
 var $33=($32&255);
 var $34=$mod;
 var $35=(($34+140)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=$3;
 var $37=_hio_read8($36);
 var $38=($37&255);
 var $39=$mod;
 var $40=(($39+156)|0);
 HEAP32[(($40)>>2)]=$38;
 var $41=$3;
 var $42=_hio_read16l($41);
 var $43=($42&65535);
 var $44=$mod;
 var $45=(($44+132)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$3;
 var $47=_hio_read8($46);
 var $48=($47&255);
 var $49=$mod;
 var $50=(($49+136)|0);
 HEAP32[(($50)>>2)]=$48;
 var $51=$mod;
 var $52=(($51+140)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$mod;
 var $55=(($54+144)|0);
 HEAP32[(($55)>>2)]=$53;
 var $56=$mod;
 var $57=(($56+156)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$mod;
 var $60=(($59+128)|0);
 HEAP32[(($60)>>2)]=$58;
 var $61=$ver;
 var $62=($61|0)==10;
 if($62){label=4;break;}else{label=5;break;}
 case 4: 
 var $64=(($buf)|0);
 var $65=$3;
 var $66=_hio_read($64,1,16,$65);
 label=5;break;
 case 5: 
 var $68=$ver;
 var $69=($68|0)>=13;
 if($69){label=6;break;}else{label=11;break;}
 case 6: 
 var $71=(($buf)|0);
 var $72=$3;
 var $73=_hio_read($71,1,32,$72);
 $i=0;
 label=7;break;
 case 7: 
 var $75=$i;
 var $76=($75|0)<32;
 if($76){label=8;break;}else{label=10;break;}
 case 8: 
 var $78=$i;
 var $79=(($buf+$78)|0);
 var $80=HEAP8[($79)];
 var $81=(($80<<24)>>24);
 var $82=($81<<1);
 var $83=((($82)+(128))|0);
 var $84=$mod;
 var $85=(($84+184)|0);
 var $86=(($85)|0);
 var $87=(($86)|0);
 HEAP32[(($87)>>2)]=$83;
 label=9;break;
 case 9: 
 var $89=$i;
 var $90=((($89)+(1))|0);
 $i=$90;
 label=7;break;
 case 10: 
 var $92=$3;
 var $93=_hio_read8($92);
 var $94=($93&255);
 var $95=$mod;
 var $96=(($95+152)|0);
 HEAP32[(($96)>>2)]=$94;
 var $97=$3;
 var $98=_hio_read8($97);
 var $99=($98&255);
 var $100=$mod;
 var $101=(($100+148)|0);
 HEAP32[(($101)>>2)]=$99;
 label=14;break;
 case 11: 
 var $103=$ver;
 var $104=($103|0)>=11;
 if($104){label=12;break;}else{label=13;break;}
 case 12: 
 var $106=(($buf)|0);
 var $107=$3;
 var $108=_hio_read($106,1,16,$107);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 $i=0;
 label=21;break;
 case 21: 
 var $118=$i;
 var $119=$mod;
 var $120=(($119+156)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($118|0)<($121|0);
 if($122){label=22;break;}else{label=24;break;}
 case 22: 
 var $124=$i;
 var $125=(($124)&255);
 var $126=$i;
 var $127=$mod;
 var $128=(($127+952)|0);
 var $129=(($128+$126)|0);
 HEAP8[($129)]=$125;
 label=23;break;
 case 23: 
 var $131=$i;
 var $132=((($131)+(1))|0);
 $i=$132;
 label=21;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $136=$mod;
 var $137=(($136+128)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=((($138)+(1))|0);
 var $140=_calloc(4,$139);
 var $141=$140;
 var $142=$mod;
 var $143=(($142+168)|0);
 HEAP32[(($143)>>2)]=$141;
 var $144=$mod;
 var $145=(($144+168)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-1;
 label=186;break;
 case 28: 
 $i=0;
 label=29;break;
 case 29: 
 var $151=$i;
 var $152=$mod;
 var $153=(($152+128)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($151|0)<($154|0);
 if($155){label=30;break;}else{label=41;break;}
 case 30: 
 var $157=$mod;
 var $158=$i;
 var $159=_pattern_alloc($157,$158);
 var $160=($159|0)<0;
 if($160){label=31;break;}else{label=32;break;}
 case 31: 
 $1=-1;
 label=186;break;
 case 32: 
 var $163=$ver;
 var $164=($163|0)>=14;
 if($164){label=33;break;}else{label=34;break;}
 case 33: 
 var $166=$3;
 var $167=_hio_read16l($166);
 var $168=($167&65535);
 var $171=$168;label=35;break;
 case 34: 
 var $171=64;label=35;break;
 case 35: 
 var $171;
 var $172=$i;
 var $173=$mod;
 var $174=(($173+168)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+($172<<2))|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177)|0);
 HEAP32[(($178)>>2)]=$171;
 $j=0;
 label=36;break;
 case 36: 
 var $180=$j;
 var $181=$mod;
 var $182=(($181+136)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($180|0)<($183|0);
 if($184){label=37;break;}else{label=39;break;}
 case 37: 
 var $186=$3;
 var $187=_hio_read16l($186);
 $t=$187;
 var $188=$t;
 var $189=($188&65535);
 var $190=$j;
 var $191=$i;
 var $192=$mod;
 var $193=(($192+168)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194+($191<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+4)|0);
 var $198=(($197+($190<<2))|0);
 HEAP32[(($198)>>2)]=$189;
 label=38;break;
 case 38: 
 var $200=$j;
 var $201=((($200)+(1))|0);
 $j=$201;
 label=36;break;
 case 39: 
 label=40;break;
 case 40: 
 var $204=$i;
 var $205=((($204)+(1))|0);
 $i=$205;
 label=29;break;
 case 41: 
 var $207=$mod;
 var $208=_instrument_init($207);
 var $209=($208|0)<0;
 if($209){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=186;break;
 case 43: 
 var $212=$ver;
 var $213=($212|0)<=10;
 if($213){label=44;break;}else{label=64;break;}
 case 44: 
 var $215=$3;
 var $216=_hio_tell($215);
 $pos=$216;
 $i=0;
 label=45;break;
 case 45: 
 var $218=$i;
 var $219=$mod;
 var $220=(($219+140)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($218|0)<($221|0);
 if($222){label=46;break;}else{label=63;break;}
 case 46: 
 var $224=$3;
 var $225=_hio_read8($224);
 $b=$225;
 var $226=$b;
 var $227=($226&255);
 var $228=($227|0)!=0;
 if($228){label=47;break;}else{label=49;break;}
 case 47: 
 var $230=$b;
 var $231=($230&255);
 var $232=($231|0)!=1;
 if($232){label=48;break;}else{label=49;break;}
 case 48: 
 $ver=9;
 label=63;break;
 case 49: 
 var $235=$3;
 var $236=_hio_seek($235,45,1);
 var $237=$3;
 var $238=_hio_read32l($237);
 var $239=($238>>>0)>1048576;
 if($239){label=50;break;}else{label=51;break;}
 case 50: 
 $ver=9;
 label=63;break;
 case 51: 
 var $242=$3;
 var $243=_hio_read32l($242);
 $len=$243;
 var $244=$len;
 var $245=($244>>>0)>1048576;
 if($245){label=52;break;}else{label=53;break;}
 case 52: 
 $ver=9;
 label=63;break;
 case 53: 
 var $248=$3;
 var $249=_hio_read16l($248);
 var $250=($249&65535);
 var $251=($250|0)==0;
 if($251){label=54;break;}else{label=55;break;}
 case 54: 
 $ver=9;
 label=63;break;
 case 55: 
 var $254=$3;
 var $255=_hio_read8($254);
 var $256=($255&255);
 var $257=($256|0)>64;
 if($257){label=56;break;}else{label=57;break;}
 case 56: 
 $ver=9;
 label=63;break;
 case 57: 
 var $260=$3;
 var $261=_hio_read32l($260);
 $start1=$261;
 var $262=$start1;
 var $263=$len;
 var $264=($262>>>0)>($263>>>0);
 if($264){label=58;break;}else{label=59;break;}
 case 58: 
 $ver=9;
 label=63;break;
 case 59: 
 var $267=$3;
 var $268=_hio_read32l($267);
 $end=$268;
 var $269=$end;
 var $270=$len;
 var $271=($269>>>0)>($270>>>0);
 if($271){label=60;break;}else{label=61;break;}
 case 60: 
 $ver=9;
 label=63;break;
 case 61: 
 label=62;break;
 case 62: 
 var $275=$i;
 var $276=((($275)+(1))|0);
 $i=$276;
 label=45;break;
 case 63: 
 var $278=$3;
 var $279=$pos;
 var $280=_hio_seek($278,$279,0);
 label=64;break;
 case 64: 
 $i=0;
 label=65;break;
 case 65: 
 var $283=$i;
 var $284=$mod;
 var $285=(($284+140)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($283|0)<($286|0);
 if($287){label=66;break;}else{label=78;break;}
 case 66: 
 var $289=$mod;
 var $290=$i;
 var $291=_subinstrument_alloc($289,$290,1);
 var $292=($291|0)<0;
 if($292){label=67;break;}else{label=68;break;}
 case 67: 
 $1=-1;
 label=186;break;
 case 68: 
 var $295=$3;
 var $296=_hio_read8($295);
 $b2=$296;
 var $297=(($buf)|0);
 var $298=$3;
 var $299=_hio_read($297,1,32,$298);
 var $300=$mod;
 var $301=$i;
 var $302=(($buf)|0);
 var $303=_instrument_name($300,$301,$302,32);
 var $304=(($buf)|0);
 var $305=$3;
 var $306=_hio_read($304,1,13,$305);
 var $307=$3;
 var $308=_hio_read32l($307);
 var $309=$i;
 var $310=$mod;
 var $311=(($310+176)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=(($312+((($309)*(764))&-1))|0);
 var $314=(($313+36)|0);
 HEAP32[(($314)>>2)]=1;
 var $315=$i;
 var $316=$i;
 var $317=$mod;
 var $318=(($317+176)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($319+((($316)*(764))&-1))|0);
 var $321=(($320+756)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322)|0);
 var $324=(($323+40)|0);
 HEAP32[(($324)>>2)]=$315;
 var $325=$i;
 var $326=$mod;
 var $327=(($326+176)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($328+((($325)*(764))&-1))|0);
 var $330=(($329+756)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($331)|0);
 var $333=(($332+8)|0);
 HEAP32[(($333)>>2)]=128;
 var $334=$3;
 var $335=_hio_read32l($334);
 var $336=$i;
 var $337=$mod;
 var $338=(($337+180)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339+((($336)*(52))&-1))|0);
 var $341=(($340+32)|0);
 HEAP32[(($341)>>2)]=$335;
 var $342=$3;
 var $343=_hio_read16l($342);
 var $344=($343&65535);
 $c2spd=$344;
 var $345=$c2spd;
 var $346=$i;
 var $347=$mod;
 var $348=(($347+176)|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=(($349+((($346)*(764))&-1))|0);
 var $351=(($350+756)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=(($352)|0);
 var $354=(($353+12)|0);
 var $355=$i;
 var $356=$mod;
 var $357=(($356+176)|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=(($358+((($355)*(764))&-1))|0);
 var $360=(($359+756)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=(($361)|0);
 var $363=(($362+16)|0);
 _c2spd_to_note($345,$354,$363);
 var $364=$3;
 var $365=_hio_read8($364);
 var $366=($365&255);
 var $367=$i;
 var $368=$mod;
 var $369=(($368+176)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=(($370+((($367)*(764))&-1))|0);
 var $372=(($371+756)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373)|0);
 var $375=(($374)|0);
 HEAP32[(($375)>>2)]=$366;
 var $376=$ver;
 var $377=($376|0)<10;
 if($377){label=69;break;}else{label=70;break;}
 case 69: 
 var $379=$3;
 var $380=_hio_read16l($379);
 var $381=($380&65535);
 var $382=$i;
 var $383=$mod;
 var $384=(($383+180)|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=(($385+((($382)*(52))&-1))|0);
 var $387=(($386+36)|0);
 HEAP32[(($387)>>2)]=$381;
 var $388=$i;
 var $389=$mod;
 var $390=(($389+180)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=(($391+((($388)*(52))&-1))|0);
 var $393=(($392+32)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=((($394)-(1))|0);
 var $396=$i;
 var $397=$mod;
 var $398=(($397+180)|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=(($399+((($396)*(52))&-1))|0);
 var $401=(($400+40)|0);
 HEAP32[(($401)>>2)]=$395;
 label=71;break;
 case 70: 
 var $403=$3;
 var $404=_hio_read32l($403);
 var $405=$i;
 var $406=$mod;
 var $407=(($406+180)|0);
 var $408=HEAP32[(($407)>>2)];
 var $409=(($408+((($405)*(52))&-1))|0);
 var $410=(($409+36)|0);
 HEAP32[(($410)>>2)]=$404;
 var $411=$3;
 var $412=_hio_read32l($411);
 var $413=$i;
 var $414=$mod;
 var $415=(($414+180)|0);
 var $416=HEAP32[(($415)>>2)];
 var $417=(($416+((($413)*(52))&-1))|0);
 var $418=(($417+40)|0);
 HEAP32[(($418)>>2)]=$412;
 label=71;break;
 case 71: 
 var $420=$ver;
 var $421=($420|0)<10;
 if($421){label=72;break;}else{label=73;break;}
 case 72: 
 var $423=$i;
 var $424=$mod;
 var $425=(($424+180)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=(($426+((($423)*(52))&-1))|0);
 var $428=(($427+36)|0);
 var $429=HEAP32[(($428)>>2)];
 var $430=($429|0)>0;
 var $431=($430?2:0);
 var $432=$i;
 var $433=$mod;
 var $434=(($433+180)|0);
 var $435=HEAP32[(($434)>>2)];
 var $436=(($435+((($432)*(52))&-1))|0);
 var $437=(($436+44)|0);
 HEAP32[(($437)>>2)]=$431;
 label=74;break;
 case 73: 
 var $439=$i;
 var $440=$mod;
 var $441=(($440+180)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=(($442+((($439)*(52))&-1))|0);
 var $444=(($443+40)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=$i;
 var $447=$mod;
 var $448=(($447+180)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=(($449+((($446)*(52))&-1))|0);
 var $451=(($450+36)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($445|0)>($452|0);
 var $454=($453?2:0);
 var $455=$i;
 var $456=$mod;
 var $457=(($456+180)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=(($458+((($455)*(52))&-1))|0);
 var $460=(($459+44)|0);
 HEAP32[(($460)>>2)]=$454;
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 var $465=$i;
 var $466=((($465)+(1))|0);
 $i=$466;
 label=65;break;
 case 78: 
 var $468=$mod;
 var $469=(($468+132)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=_calloc(4,$470);
 var $472=$471;
 $trkmap=$472;
 var $473=$trkmap;
 var $474=($473|0)==0;
 if($474){label=79;break;}else{label=80;break;}
 case 79: 
 $1=-1;
 label=186;break;
 case 80: 
 $newtrk=0;
 $i=0;
 label=81;break;
 case 81: 
 var $478=$i;
 var $479=$mod;
 var $480=(($479+132)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=($478|0)<($481|0);
 if($482){label=82;break;}else{label=86;break;}
 case 82: 
 var $484=$3;
 var $485=_hio_read16l($484);
 $t3=$485;
 var $486=$t3;
 var $487=($486&65535);
 var $488=$i;
 var $489=$trkmap;
 var $490=(($489+($488<<2))|0);
 HEAP32[(($490)>>2)]=$487;
 var $491=$t3;
 var $492=($491&65535);
 var $493=$newtrk;
 var $494=($492|0)>($493|0);
 if($494){label=83;break;}else{label=84;break;}
 case 83: 
 var $496=$t3;
 var $497=($496&65535);
 $newtrk=$497;
 label=84;break;
 case 84: 
 label=85;break;
 case 85: 
 var $500=$i;
 var $501=((($500)+(1))|0);
 $i=$501;
 label=81;break;
 case 86: 
 $i=0;
 label=87;break;
 case 87: 
 var $504=$i;
 var $505=$mod;
 var $506=(($505+128)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=($504|0)<($507|0);
 if($508){label=88;break;}else{label=97;break;}
 case 88: 
 $j=0;
 label=89;break;
 case 89: 
 var $511=$j;
 var $512=$mod;
 var $513=(($512+136)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=($511|0)<($514|0);
 if($515){label=90;break;}else{label=95;break;}
 case 90: 
 var $517=$j;
 var $518=$i;
 var $519=$mod;
 var $520=(($519+168)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(($521+($518<<2))|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=(($523+4)|0);
 var $525=(($524+($517<<2))|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=((($526)-(1))|0);
 $k=$527;
 var $528=$k;
 var $529=($528|0)<0;
 if($529){label=92;break;}else{label=91;break;}
 case 91: 
 var $531=$k;
 var $532=$mod;
 var $533=(($532+132)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=($531|0)>=($534|0);
 if($535){label=92;break;}else{label=93;break;}
 case 92: 
 $k=0;
 label=93;break;
 case 93: 
 var $538=$k;
 var $539=$trkmap;
 var $540=(($539+($538<<2))|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=$j;
 var $543=$i;
 var $544=$mod;
 var $545=(($544+168)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=(($546+($543<<2))|0);
 var $548=HEAP32[(($547)>>2)];
 var $549=(($548+4)|0);
 var $550=(($549+($542<<2))|0);
 HEAP32[(($550)>>2)]=$541;
 label=94;break;
 case 94: 
 var $552=$j;
 var $553=((($552)+(1))|0);
 $j=$553;
 label=89;break;
 case 95: 
 label=96;break;
 case 96: 
 var $556=$i;
 var $557=((($556)+(1))|0);
 $i=$557;
 label=87;break;
 case 97: 
 var $559=$newtrk;
 var $560=$mod;
 var $561=(($560+132)|0);
 HEAP32[(($561)>>2)]=$559;
 var $562=$trkmap;
 var $563=$562;
 _free($563);
 label=98;break;
 case 98: 
 label=99;break;
 case 99: 
 var $566=$mod;
 var $567=(($566+132)|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=((($568)+(1))|0);
 HEAP32[(($567)>>2)]=$569;
 var $570=$mod;
 var $571=(($570+132)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=_calloc(4,$572);
 var $574=$573;
 var $575=$mod;
 var $576=(($575+172)|0);
 HEAP32[(($576)>>2)]=$574;
 var $577=$mod;
 var $578=(($577+172)|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=($579|0)==0;
 if($580){label=100;break;}else{label=101;break;}
 case 100: 
 $1=-1;
 label=186;break;
 case 101: 
 var $583=$mod;
 var $584=_track_alloc($583,0,64);
 var $585=($584|0)<0;
 if($585){label=102;break;}else{label=103;break;}
 case 102: 
 $1=-1;
 label=186;break;
 case 103: 
 $i=1;
 label=104;break;
 case 104: 
 var $589=$i;
 var $590=$mod;
 var $591=(($590+132)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=($589|0)<($592|0);
 if($593){label=105;break;}else{label=177;break;}
 case 105: 
 var $595=$mod;
 var $596=$i;
 var $597=_track_alloc($595,$596,64);
 var $598=($597|0)<0;
 if($598){label=106;break;}else{label=107;break;}
 case 106: 
 $1=-1;
 label=186;break;
 case 107: 
 var $601=$3;
 var $602=_hio_read24l($601);
 $size=$602;
 $j=0;
 label=108;break;
 case 108: 
 var $604=$j;
 var $605=$size;
 var $606=($604|0)<($605|0);
 if($606){label=109;break;}else{label=175;break;}
 case 109: 
 var $608=$3;
 var $609=_hio_read8($608);
 $t1=$609;
 var $610=$3;
 var $611=_hio_read8($610);
 $t2=$611;
 var $612=$3;
 var $613=_hio_read8($612);
 $t34=$613;
 var $614=$t1;
 var $615=($614&255);
 var $616=($615|0)==255;
 if($616){label=110;break;}else{label=113;break;}
 case 110: 
 var $618=$t2;
 var $619=($618&255);
 var $620=($619|0)==255;
 if($620){label=111;break;}else{label=113;break;}
 case 111: 
 var $622=$t34;
 var $623=($622&255);
 var $624=($623|0)==255;
 if($624){label=112;break;}else{label=113;break;}
 case 112: 
 label=175;break;
 case 113: 
 var $627=$t1;
 var $628=($627&255);
 var $629=$i;
 var $630=$mod;
 var $631=(($630+172)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=(($632+($629<<2))|0);
 var $634=HEAP32[(($633)>>2)];
 var $635=(($634+4)|0);
 var $636=(($635+($628<<3))|0);
 $event=$636;
 var $637=$t2;
 var $638=($637&255);
 var $639=($638|0)<127;
 if($639){label=114;break;}else{label=117;break;}
 case 114: 
 var $641=$t2;
 var $642=($641&255);
 var $643=($642|0)>0;
 if($643){label=115;break;}else{label=116;break;}
 case 115: 
 var $645=$t2;
 var $646=($645&255);
 var $647=((($646)+(1))|0);
 var $648=(($647)&255);
 var $649=$event;
 var $650=(($649)|0);
 HEAP8[($650)]=$648;
 label=116;break;
 case 116: 
 var $652=$t34;
 var $653=$event;
 var $654=(($653+2)|0);
 HEAP8[($654)]=$652;
 label=173;break;
 case 117: 
 var $656=$t2;
 var $657=($656&255);
 var $658=($657|0)==127;
 if($658){label=118;break;}else{label=119;break;}
 case 118: 
 var $660=$event;
 var $661=$660;
 var $662=$t1;
 var $663=($662&255);
 var $664=((($663)-(1))|0);
 var $665=$i;
 var $666=$mod;
 var $667=(($666+172)|0);
 var $668=HEAP32[(($667)>>2)];
 var $669=(($668+($665<<2))|0);
 var $670=HEAP32[(($669)>>2)];
 var $671=(($670+4)|0);
 var $672=(($671+($664<<3))|0);
 var $673=$672;
 assert(8 % 1 === 0);(_memcpy($661, $673, 8)|0);
 label=172;break;
 case 119: 
 var $675=$t2;
 var $676=($675&255);
 var $677=($676|0)==128;
 if($677){label=120;break;}else{label=121;break;}
 case 120: 
 var $679=$t34;
 var $680=($679&255);
 var $681=((($680)+(1))|0);
 var $682=(($681)&255);
 var $683=$event;
 var $684=(($683+1)|0);
 HEAP8[($684)]=$682;
 label=171;break;
 case 121: 
 $fxt=0;
 $fxp=0;
 var $686=$t2;
 var $687=($686&255);
 switch(($687|0)){case 129:{ label=122;break;}case 130:{ label=123;break;}case 131:{ label=127;break;}case 132:{ label=128;break;}case 133:{ label=134;break;}case 134:{ label=135;break;}case 135:{ label=136;break;}case 136:{ label=137;break;}case 137:{ label=138;break;}case 138:{ label=139;break;}case 139:{ label=143;break;}case 140:{ label=147;break;}case 141:{ label=148;break;}case 142:{ label=149;break;}case 143:{ label=150;break;}case 144:{ label=151;break;}case 145:{ label=152;break;}case 146:{ label=156;break;}case 147:{ label=160;break;}case 148:{ label=161;break;}case 149:{ label=162;break;}case 150:{ label=165;break;}case 151:{ label=169;break;}default:{label=170;break;}}break;
 case 122: 
 $fxt=15;
 var $689=$t34;
 $fxp=$689;
 label=170;break;
 case 123: 
 var $691=$t34;
 var $692=(($691<<24)>>24);
 var $693=($692|0)>0;
 if($693){label=124;break;}else{label=125;break;}
 case 124: 
 $fxt=10;
 var $695=$t34;
 var $696=($695&255);
 var $697=$696<<4;
 var $698=(($697)&255);
 $fxp=$698;
 label=126;break;
 case 125: 
 $fxt=10;
 var $700=$t34;
 var $701=(($700<<24)>>24);
 var $702=(((-$701))|0);
 var $703=$702&15;
 var $704=(($703)&255);
 $fxp=$704;
 label=126;break;
 case 126: 
 label=170;break;
 case 127: 
 var $707=$t34;
 var $708=$event;
 var $709=(($708+2)|0);
 HEAP8[($709)]=$707;
 label=170;break;
 case 128: 
 var $711=$t34;
 var $712=(($711<<24)>>24);
 var $713=($712|0)>=0;
 if($713){label=129;break;}else{label=130;break;}
 case 129: 
 $fxt=2;
 var $715=$t34;
 $fxp=$715;
 label=130;break;
 case 130: 
 var $717=$t34;
 var $718=($717&255);
 var $719=($718|0)==128;
 if($719){label=131;break;}else{label=132;break;}
 case 131: 
 $fxt=1;
 $fxp=0;
 label=133;break;
 case 132: 
 $fxt=1;
 var $722=$t34;
 var $723=(($722<<24)>>24);
 var $724=(((-$723))|0);
 var $725=(($724)&255);
 $fxp=$725;
 label=133;break;
 case 133: 
 label=170;break;
 case 134: 
 label=170;break;
 case 135: 
 $fxt=3;
 var $729=$t34;
 $fxp=$729;
 label=170;break;
 case 136: 
 $fxt=7;
 var $731=$t34;
 $fxp=$731;
 label=170;break;
 case 137: 
 $fxt=0;
 var $733=$t34;
 $fxp=$733;
 label=170;break;
 case 138: 
 $fxt=4;
 var $735=$t34;
 $fxp=$735;
 label=170;break;
 case 139: 
 var $737=$t34;
 var $738=(($737<<24)>>24);
 var $739=($738|0)>0;
 if($739){label=140;break;}else{label=141;break;}
 case 140: 
 $fxt=5;
 var $741=$t34;
 var $742=($741&255);
 var $743=$742<<4;
 var $744=(($743)&255);
 $fxp=$744;
 label=142;break;
 case 141: 
 $fxt=5;
 var $746=$t34;
 var $747=(($746<<24)>>24);
 var $748=(((-$747))|0);
 var $749=$748&15;
 var $750=(($749)&255);
 $fxp=$750;
 label=142;break;
 case 142: 
 label=170;break;
 case 143: 
 var $753=$t34;
 var $754=(($753<<24)>>24);
 var $755=($754|0)>0;
 if($755){label=144;break;}else{label=145;break;}
 case 144: 
 $fxt=6;
 var $757=$t34;
 var $758=($757&255);
 var $759=$758<<4;
 var $760=(($759)&255);
 $fxp=$760;
 label=146;break;
 case 145: 
 $fxt=6;
 var $762=$t34;
 var $763=(($762<<24)>>24);
 var $764=(((-$763))|0);
 var $765=$764&15;
 var $766=(($765)&255);
 $fxp=$766;
 label=146;break;
 case 146: 
 label=170;break;
 case 147: 
 $fxt=13;
 var $769=$t34;
 $fxp=$769;
 label=170;break;
 case 148: 
 $fxt=11;
 var $771=$t34;
 $fxp=$771;
 label=170;break;
 case 149: 
 label=170;break;
 case 150: 
 $fxt=14;
 var $774=$t34;
 var $775=($774&255);
 var $776=$775&15;
 var $777=144|$776;
 var $778=(($777)&255);
 $fxp=$778;
 label=170;break;
 case 151: 
 $fxt=9;
 var $780=$t34;
 $fxp=$780;
 label=170;break;
 case 152: 
 var $782=$t34;
 var $783=(($782<<24)>>24);
 var $784=($783|0)>0;
 if($784){label=153;break;}else{label=154;break;}
 case 153: 
 $fxt=14;
 var $786=$t34;
 var $787=($786&255);
 var $788=$787&15;
 var $789=160|$788;
 var $790=(($789)&255);
 $fxp=$790;
 label=155;break;
 case 154: 
 $fxt=14;
 var $792=$t34;
 var $793=($792&255);
 var $794=$793&15;
 var $795=176|$794;
 var $796=(($795)&255);
 $fxp=$796;
 label=155;break;
 case 155: 
 label=170;break;
 case 156: 
 var $799=$t34;
 var $800=(($799<<24)>>24);
 var $801=($800|0)>0;
 if($801){label=157;break;}else{label=158;break;}
 case 157: 
 $fxt=2;
 var $803=$fxp;
 var $804=($803&255);
 var $805=$804&15;
 var $806=240|$805;
 var $807=(($806)&255);
 $fxp=$807;
 label=159;break;
 case 158: 
 $fxt=1;
 var $809=$fxp;
 var $810=($809&255);
 var $811=$810&15;
 var $812=240|$811;
 var $813=(($812)&255);
 $fxp=$813;
 label=159;break;
 case 159: 
 label=170;break;
 case 160: 
 $fxt=14;
 var $816=$t34;
 var $817=($816&255);
 var $818=$817&15;
 var $819=208|$818;
 var $820=(($819)&255);
 $fxp=$820;
 label=170;break;
 case 161: 
 $fxt=14;
 var $822=$t34;
 var $823=($822&255);
 var $824=$823&15;
 var $825=192|$824;
 var $826=(($825)&255);
 $fxp=$826;
 label=170;break;
 case 162: 
 $fxt=15;
 var $828=$t34;
 var $829=($828&255);
 var $830=($829|0)<33;
 if($830){label=163;break;}else{label=164;break;}
 case 163: 
 $t34=33;
 label=164;break;
 case 164: 
 var $833=$t34;
 $fxp=$833;
 label=170;break;
 case 165: 
 var $835=$t34;
 var $836=(($835<<24)>>24);
 var $837=($836|0)>0;
 if($837){label=166;break;}else{label=167;break;}
 case 166: 
 $fxt=2;
 var $839=$fxp;
 var $840=($839&255);
 var $841=$840&15;
 var $842=224|$841;
 var $843=(($842)&255);
 $fxp=$843;
 label=168;break;
 case 167: 
 $fxt=1;
 var $845=$fxp;
 var $846=($845&255);
 var $847=$846&15;
 var $848=224|$847;
 var $849=(($848)&255);
 $fxp=$849;
 label=168;break;
 case 168: 
 label=170;break;
 case 169: 
 $fxt=8;
 var $852=$t34;
 var $853=(($852<<24)>>24);
 var $854=($853<<1);
 var $855=((($854)+(128))|0);
 var $856=(($855)&255);
 $fxp=$856;
 label=170;break;
 case 170: 
 var $858=$fxt;
 var $859=$event;
 var $860=(($859+3)|0);
 HEAP8[($860)]=$858;
 var $861=$fxp;
 var $862=$event;
 var $863=(($862+4)|0);
 HEAP8[($863)]=$861;
 label=171;break;
 case 171: 
 label=172;break;
 case 172: 
 label=173;break;
 case 173: 
 label=174;break;
 case 174: 
 var $868=$j;
 var $869=((($868)+(1))|0);
 $j=$869;
 label=108;break;
 case 175: 
 label=176;break;
 case 176: 
 var $872=$i;
 var $873=((($872)+(1))|0);
 $i=$873;
 label=104;break;
 case 177: 
 label=178;break;
 case 178: 
 label=179;break;
 case 179: 
 $i=0;
 label=180;break;
 case 180: 
 var $878=$i;
 var $879=$mod;
 var $880=(($879+140)|0);
 var $881=HEAP32[(($880)>>2)];
 var $882=($878|0)<($881|0);
 if($882){label=181;break;}else{label=185;break;}
 case 181: 
 var $884=$2;
 var $885=$3;
 var $886=$i;
 var $887=$mod;
 var $888=(($887+180)|0);
 var $889=HEAP32[(($888)>>2)];
 var $890=(($889+((($886)*(52))&-1))|0);
 var $891=_load_sample($884,$885,2,$890,0);
 var $892=($891|0)<0;
 if($892){label=182;break;}else{label=183;break;}
 case 182: 
 $1=-1;
 label=186;break;
 case 183: 
 label=184;break;
 case 184: 
 var $896=$i;
 var $897=((($896)+(1))|0);
 $i=$897;
 label=180;break;
 case 185: 
 var $899=$2;
 var $900=(($899+1280)|0);
 var $901=HEAP32[(($900)>>2)];
 var $902=$901|32;
 HEAP32[(($900)>>2)]=$902;
 $1=0;
 label=186;break;
 case 186: 
 var $904=$1;
 STACKTOP=sp;return $904;
  default: assert(0, "bad label: " + label);
 }
}
function _arch_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $id;
 var $len;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1297437528;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=9;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read32l($10);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=_hio_eof($13);
 var $15=($14|0)!=0;
 var $16=$15^1;
 if($16){label=5;break;}else{label=8;break;}
 case 5: 
 var $18=$2;
 var $19=_hio_read32b($18);
 $id=$19;
 var $20=$2;
 var $21=_hio_read32l($20);
 $len=$21;
 var $22=$id;
 var $23=($22|0)==1296974157;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$2;
 var $26=$3;
 _read_title($25,$26,32);
 $1=0;
 label=9;break;
 case 7: 
 var $28=$2;
 var $29=$len;
 var $30=_hio_seek($28,$29,1);
 label=4;break;
 case 8: 
 var $32=$2;
 var $33=$3;
 _read_title($32,$33,0);
 $1=0;
 label=9;break;
 case 9: 
 var $35=$1;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }
}
function _arch_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $handle;
 var $i;
 var $data=sp;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$3;
 var $15=_hio_read32b($14);
 var $16=(($data+16)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($data+12)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=(($data+8)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=(($data+4)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=(($data)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=_iff_new();
 $handle=$21;
 var $22=$handle;
 var $23=($22|0)==0;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=12;break;
 case 5: 
 var $26=$handle;
 var $27=_iff_register($26,27360,312);
 var $28=$handle;
 var $29=_iff_register($28,25200,140);
 var $30=$handle;
 var $31=_iff_register($30,23824,324);
 var $32=$handle;
 var $33=_iff_register($32,23112,292);
 var $34=$handle;
 var $35=_iff_register($34,22456,546);
 var $36=$handle;
 var $37=_iff_register($36,21712,170);
 var $38=$handle;
 var $39=_iff_register($38,21280,446);
 var $40=$handle;
 var $41=_iff_register($40,20888,184);
 var $42=$handle;
 var $43=_iff_register($42,20576,314);
 var $44=$handle;
 var $45=_iff_register($44,27560,144);
 var $46=$handle;
 var $47=_iff_register($46,27352,308);
 var $48=$handle;
 _iff_set_quirk($48,1);
 var $49=$handle;
 var $50=$2;
 var $51=$3;
 var $52=$data;
 var $53=_iff_load($49,$50,$51,$52);
 var $54=($53|0)<0;
 if($54){label=6;break;}else{label=7;break;}
 case 6: 
 var $56=$handle;
 _iff_release($56);
 $1=-1;
 label=12;break;
 case 7: 
 var $58=$handle;
 _iff_release($58);
 $i=0;
 label=8;break;
 case 8: 
 var $60=$i;
 var $61=$mod;
 var $62=(($61+136)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($60|0)<($63|0);
 if($64){label=9;break;}else{label=11;break;}
 case 9: 
 var $66=$i;
 var $67=((($66)+(3))|0);
 var $68=(((($67|0))/(2))&-1);
 var $69=(((($68|0))%(2))&-1);
 var $70=((($69)*(255))&-1);
 var $71=$i;
 var $72=$mod;
 var $73=(($72+184)|0);
 var $74=(($73+((($71)*(12))&-1))|0);
 var $75=(($74)|0);
 HEAP32[(($75)>>2)]=$70;
 label=10;break;
 case 10: 
 var $77=$i;
 var $78=((($77)+(1))|0);
 $i=$78;
 label=8;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 var $81=$1;
 STACKTOP=sp;return $81;
  default: assert(0, "bad label: " + label);
 }
}
function _get_tinf($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $data;
 var $x;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$4;
 var $6=$5;
 $data=$6;
 var $7=$3;
 var $8=_hio_read8($7);
 var $9=($8&255);
 $x=$9;
 var $10=$x;
 var $11=$10&240;
 var $12=$11>>4;
 var $13=((($12)*(10))&-1);
 var $14=$x;
 var $15=$14&15;
 var $16=((($13)+($15))|0);
 var $17=$data;
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$3;
 var $20=_hio_read8($19);
 var $21=($20&255);
 $x=$21;
 var $22=$x;
 var $23=$22&240;
 var $24=$23>>4;
 var $25=((($24)*(1000))&-1);
 var $26=$x;
 var $27=$26&15;
 var $28=((($27)*(100))&-1);
 var $29=((($25)+($28))|0);
 var $30=$data;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+($29))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=$3;
 var $35=_hio_read8($34);
 var $36=($35&255);
 $x=$36;
 var $37=$x;
 var $38=$37&240;
 var $39=$38>>4;
 var $40=((($39)*(10))&-1);
 var $41=$x;
 var $42=$41&15;
 var $43=((($40)+($42))|0);
 var $44=$data;
 var $45=(($44+4)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$3;
 var $47=_hio_read8($46);
 var $48=($47&255);
 $x=$48;
 var $49=$x;
 var $50=$49&240;
 var $51=$50>>4;
 var $52=((($51)*(10))&-1);
 var $53=$x;
 var $54=$53&15;
 var $55=((($52)+($54))|0);
 var $56=$data;
 var $57=(($56+8)|0);
 HEAP32[(($57)>>2)]=$55;
 STACKTOP=sp;return 0;
}
function _get_mvox($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read32l($7);
 var $9=$mod;
 var $10=(($9+136)|0);
 HEAP32[(($10)>>2)]=$8;
 STACKTOP=sp;return 0;
}
function _get_ster($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $data;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$4;
 var $8=$7;
 $data=$8;
 var $9=$data;
 var $10=(($9+28)|0);
 var $11=(($10)|0);
 var $12=$3;
 var $13=_hio_read($11,1,8,$12);
 $i=0;
 label=2;break;
 case 2: 
 var $15=$i;
 var $16=$mod;
 var $17=(($16+136)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($15|0)<($18|0);
 if($19){label=3;break;}else{label=8;break;}
 case 3: 
 var $21=$i;
 var $22=$data;
 var $23=(($22+28)|0);
 var $24=(($23+$21)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=($26|0)>0;
 if($27){label=4;break;}else{label=6;break;}
 case 4: 
 var $29=$i;
 var $30=$data;
 var $31=(($30+28)|0);
 var $32=(($31+$29)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=($34|0)<8;
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=$i;
 var $38=$data;
 var $39=(($38+28)|0);
 var $40=(($39+$37)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=((($42)*(42))&-1);
 var $44=((($43)-(40))|0);
 var $45=$i;
 var $46=$mod;
 var $47=(($46+184)|0);
 var $48=(($47+((($45)*(12))&-1))|0);
 var $49=(($48)|0);
 HEAP32[(($49)>>2)]=$44;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $52=$i;
 var $53=((($52)+(1))|0);
 $i=$53;
 label=2;break;
 case 8: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_mnam($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=$3;
 var $11=_hio_read($9,1,32,$10);
 STACKTOP=sp;return 0;
}
function _get_anam($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 STACKTOP=sp;return 0;
}
function _get_mlen($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read32l($7);
 var $9=$mod;
 var $10=(($9+156)|0);
 HEAP32[(($10)>>2)]=$8;
 STACKTOP=sp;return 0;
}
function _get_pnum($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read32l($7);
 var $9=$mod;
 var $10=(($9+128)|0);
 HEAP32[(($10)>>2)]=$8;
 STACKTOP=sp;return 0;
}
function _get_plen($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $data;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$4;
 var $6=$5;
 $data=$6;
 var $7=$data;
 var $8=(($7+36)|0);
 var $9=(($8)|0);
 var $10=$3;
 var $11=_hio_read($9,1,64,$10);
 STACKTOP=sp;return 0;
}
function _get_sequ($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7+952)|0);
 var $9=(($8)|0);
 var $10=$3;
 var $11=_hio_read($9,1,128,$10);
 var $12=$1;
 _set_type($12,27440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $j;
 var $k;
 var $event;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$data;
 var $11=(($10+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 if($13){label=7;break;}else{label=2;break;}
 case 2: 
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $17=$data;
 var $18=(($17+12)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=$data;
 var $20=(($19+24)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=$mod;
 var $22=(($21+128)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$mod;
 var $25=(($24+136)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(Math_imul($23,$26)|0);
 var $28=$mod;
 var $29=(($28+132)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$mod;
 var $31=_pattern_init($30);
 var $32=($31|0)<0;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=20;break;
 case 6: 
 label=7;break;
 case 7: 
 var $36=$data;
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 $i=$38;
 var $39=$mod;
 var $40=$i;
 var $41=$i;
 var $42=$data;
 var $43=(($42+36)|0);
 var $44=(($43+$41)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=_pattern_tracks_alloc($39,$40,$46);
 var $48=($47|0)<0;
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=20;break;
 case 9: 
 $j=0;
 label=10;break;
 case 10: 
 var $52=$j;
 var $53=$i;
 var $54=$data;
 var $55=(($54+36)|0);
 var $56=(($55+$53)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=($52|0)<($58|0);
 if($59){label=11;break;}else{label=19;break;}
 case 11: 
 $k=0;
 label=12;break;
 case 12: 
 var $62=$k;
 var $63=$mod;
 var $64=(($63+136)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($62|0)<($65|0);
 if($66){label=13;break;}else{label=17;break;}
 case 13: 
 var $68=$j;
 var $69=$k;
 var $70=$i;
 var $71=$2;
 var $72=(($71)|0);
 var $73=(($72+168)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+($70<<2))|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+4)|0);
 var $78=(($77+($69<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$2;
 var $81=(($80)|0);
 var $82=(($81+172)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+($79<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+4)|0);
 var $87=(($86+($68<<3))|0);
 $event=$87;
 var $88=$4;
 var $89=_hio_read8($88);
 var $90=$event;
 var $91=(($90+4)|0);
 HEAP8[($91)]=$89;
 var $92=$4;
 var $93=_hio_read8($92);
 var $94=$event;
 var $95=(($94+3)|0);
 HEAP8[($95)]=$93;
 var $96=$4;
 var $97=_hio_read8($96);
 var $98=$event;
 var $99=(($98+1)|0);
 HEAP8[($99)]=$97;
 var $100=$4;
 var $101=_hio_read8($100);
 var $102=$event;
 var $103=(($102)|0);
 HEAP8[($103)]=$101;
 var $104=$event;
 var $105=(($104)|0);
 var $106=HEAP8[($105)];
 var $107=(($106<<24)>>24)!=0;
 if($107){label=14;break;}else{label=15;break;}
 case 14: 
 var $109=$event;
 var $110=(($109)|0);
 var $111=HEAP8[($110)];
 var $112=($111&255);
 var $113=((($112)+(48))|0);
 var $114=(($113)&255);
 HEAP8[($110)]=$114;
 label=15;break;
 case 15: 
 var $116=$event;
 _fix_effect253($116);
 label=16;break;
 case 16: 
 var $118=$k;
 var $119=((($118)+(1))|0);
 $k=$119;
 label=12;break;
 case 17: 
 label=18;break;
 case 18: 
 var $122=$j;
 var $123=((($122)+(1))|0);
 $j=$123;
 label=10;break;
 case 19: 
 var $125=$data;
 var $126=(($125+24)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($126)>>2)]=$128;
 $1=0;
 label=20;break;
 case 20: 
 var $130=$1;
 STACKTOP=sp;return $130;
  default: assert(0, "bad label: " + label);
 }
}
function _get_samp($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $name_len;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$data;
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 if($13){label=7;break;}else{label=2;break;}
 case 2: 
 var $15=$mod;
 var $16=(($15+140)|0);
 HEAP32[(($16)>>2)]=36;
 var $17=$mod;
 var $18=(($17+144)|0);
 HEAP32[(($18)>>2)]=36;
 var $19=$mod;
 var $20=_instrument_init($19);
 var $21=($20|0)<0;
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=24;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $26=$data;
 var $27=(($26+16)|0);
 HEAP32[(($27)>>2)]=1;
 var $28=$data;
 var $29=(($28+20)|0);
 HEAP32[(($29)>>2)]=0;
 label=7;break;
 case 7: 
 var $31=$data;
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)>=36;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=24;break;
 case 9: 
 var $37=$data;
 var $38=(($37+20)|0);
 var $39=HEAP32[(($38)>>2)];
 $i=$39;
 var $40=$i;
 var $41=$mod;
 var $42=(($41+176)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+((($40)*(764))&-1))|0);
 var $45=(($44+36)|0);
 HEAP32[(($45)>>2)]=1;
 var $46=$mod;
 var $47=$i;
 var $48=_subinstrument_alloc($46,$47,1);
 var $49=($48|0)<0;
 if($49){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=24;break;
 case 11: 
 var $52=$4;
 var $53=_hio_read32l($52);
 var $54=$4;
 var $55=_hio_read32l($54);
 $name_len=$55;
 var $56=$name_len;
 var $57=($56|0)<32;
 if($57){label=12;break;}else{label=13;break;}
 case 12: 
 var $59=$i;
 var $60=$mod;
 var $61=(($60+176)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+((($59)*(764))&-1))|0);
 var $64=(($63)|0);
 var $65=(($64)|0);
 var $66=$name_len;
 var $67=$4;
 var $68=_hio_read($65,1,$66,$67);
 label=13;break;
 case 13: 
 var $70=$4;
 var $71=_hio_read32l($70);
 var $72=$4;
 var $73=_hio_read32l($72);
 var $74=$4;
 var $75=_hio_read32l($74);
 var $76=$75&255;
 var $77=$i;
 var $78=$mod;
 var $79=(($78+176)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+((($77)*(764))&-1))|0);
 var $82=(($81+756)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83)|0);
 var $85=(($84)|0);
 HEAP32[(($85)>>2)]=$76;
 var $86=$4;
 var $87=_hio_read32l($86);
 var $88=$4;
 var $89=_hio_read32l($88);
 var $90=$4;
 var $91=_hio_read32l($90);
 var $92=$i;
 var $93=$mod;
 var $94=(($93+180)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+((($92)*(52))&-1))|0);
 var $97=(($96+32)|0);
 HEAP32[(($97)>>2)]=$91;
 var $98=$4;
 var $99=_hio_read32l($98);
 var $100=$4;
 var $101=_hio_read32l($100);
 var $102=$4;
 var $103=_hio_read32l($102);
 var $104=$i;
 var $105=$mod;
 var $106=(($105+180)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+((($104)*(52))&-1))|0);
 var $109=(($108+36)|0);
 HEAP32[(($109)>>2)]=$103;
 var $110=$4;
 var $111=_hio_read32l($110);
 var $112=$4;
 var $113=_hio_read32l($112);
 var $114=$4;
 var $115=_hio_read32l($114);
 var $116=$i;
 var $117=$mod;
 var $118=(($117+180)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+((($116)*(52))&-1))|0);
 var $121=(($120+40)|0);
 HEAP32[(($121)>>2)]=$115;
 var $122=$4;
 var $123=_hio_read32l($122);
 var $124=$4;
 var $125=_hio_read32l($124);
 var $126=$4;
 var $127=_hio_read32l($126);
 var $128=$i;
 var $129=$i;
 var $130=$mod;
 var $131=(($130+176)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+((($129)*(764))&-1))|0);
 var $134=(($133+756)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=(($136+40)|0);
 HEAP32[(($137)>>2)]=$128;
 var $138=$i;
 var $139=$mod;
 var $140=(($139+176)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+((($138)*(764))&-1))|0);
 var $143=(($142+756)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144)|0);
 var $146=(($145+8)|0);
 HEAP32[(($146)>>2)]=128;
 var $147=$2;
 var $148=(($147+1276)|0);
 HEAP32[(($148)>>2)]=18800;
 var $149=$2;
 var $150=(($149+1268)|0);
 HEAP32[(($150)>>2)]=255;
 var $151=$i;
 var $152=$mod;
 var $153=(($152+180)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+((($151)*(52))&-1))|0);
 var $156=(($155+40)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($157|0)>2;
 if($158){label=14;break;}else{label=15;break;}
 case 14: 
 var $160=$i;
 var $161=$mod;
 var $162=(($161+180)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+((($160)*(52))&-1))|0);
 var $165=(($164+44)|0);
 HEAP32[(($165)>>2)]=2;
 var $166=$i;
 var $167=$mod;
 var $168=(($167+180)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+((($166)*(52))&-1))|0);
 var $171=(($170+36)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=$i;
 var $174=$mod;
 var $175=(($174+180)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+((($173)*(52))&-1))|0);
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=((($172)+($179))|0);
 var $181=$i;
 var $182=$mod;
 var $183=(($182+180)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+((($181)*(52))&-1))|0);
 var $186=(($185+40)|0);
 HEAP32[(($186)>>2)]=$180;
 label=19;break;
 case 15: 
 var $188=$i;
 var $189=$mod;
 var $190=(($189+180)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+((($188)*(52))&-1))|0);
 var $193=(($192+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($194|0)==2;
 if($195){label=16;break;}else{label=18;break;}
 case 16: 
 var $197=$i;
 var $198=$mod;
 var $199=(($198+180)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+((($197)*(52))&-1))|0);
 var $202=(($201+36)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)>0;
 if($204){label=17;break;}else{label=18;break;}
 case 17: 
 var $206=$i;
 var $207=$mod;
 var $208=(($207+180)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+((($206)*(52))&-1))|0);
 var $211=(($210+44)|0);
 HEAP32[(($211)>>2)]=2;
 var $212=$i;
 var $213=$mod;
 var $214=(($213+180)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+((($212)*(52))&-1))|0);
 var $217=(($216+32)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$i;
 var $220=$mod;
 var $221=(($220+180)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($222+((($219)*(52))&-1))|0);
 var $224=(($223+40)|0);
 HEAP32[(($224)>>2)]=$218;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $227=$2;
 var $228=$4;
 var $229=$i;
 var $230=$mod;
 var $231=(($230+180)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+((($229)*(52))&-1))|0);
 var $234=_load_sample($227,$228,128,$233,0);
 var $235=($234|0)<0;
 if($235){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=24;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $240=$data;
 var $241=(($240+20)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=((($242)+(1))|0);
 HEAP32[(($241)>>2)]=$243;
 $1=0;
 label=24;break;
 case 24: 
 var $245=$1;
 STACKTOP=sp;return $245;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_effect253($e){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$e;
 var $2=$1;
 var $3=(($2+3)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 switch(($5|0)){case 14:case 25:{ label=11;break;}case 16:{ label=16;break;}case 17:{ label=17;break;}case 19:{ label=18;break;}case 21:{ label=19;break;}case 0:{ label=2;break;}case 28:{ label=20;break;}case 31:{ label=21;break;}case 1:{ label=3;break;}case 2:{ label=4;break;}case 3:{ label=5;break;}case 11:{ label=6;break;}case 12:{ label=7;break;}default:{label=22;break;}}break;
 case 2: 
 var $7=$1;
 var $8=(($7+3)|0);
 HEAP8[($8)]=0;
 label=23;break;
 case 3: 
 var $10=$1;
 var $11=(($10+3)|0);
 HEAP8[($11)]=1;
 label=23;break;
 case 4: 
 var $13=$1;
 var $14=(($13+3)|0);
 HEAP8[($14)]=2;
 label=23;break;
 case 5: 
 var $16=$1;
 var $17=(($16+3)|0);
 HEAP8[($17)]=3;
 label=23;break;
 case 6: 
 var $19=$1;
 var $20=(($19+3)|0);
 HEAP8[($20)]=13;
 label=23;break;
 case 7: 
 var $22=$1;
 var $23=(($22+4)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=($25|0)<=64;
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$1;
 var $29=(($28+3)|0);
 HEAP8[($29)]=12;
 var $30=$1;
 var $31=(($30+4)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=((5800+$33)|0);
 var $35=HEAP8[($34)];
 var $36=$1;
 var $37=(($36+4)|0);
 HEAP8[($37)]=$35;
 label=10;break;
 case 9: 
 var $39=$1;
 var $40=(($39+3)|0);
 HEAP8[($40)]=0;
 var $41=$1;
 var $42=(($41+4)|0);
 HEAP8[($42)]=0;
 label=10;break;
 case 10: 
 label=23;break;
 case 11: 
 var $45=$1;
 var $46=(($45+4)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=($48|0)>0;
 if($49){label=12;break;}else{label=14;break;}
 case 12: 
 var $51=$1;
 var $52=(($51+4)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=($54|0)<8;
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 var $57=$1;
 var $58=(($57+3)|0);
 HEAP8[($58)]=8;
 var $59=$1;
 var $60=(($59+4)|0);
 var $61=HEAP8[($60)];
 var $62=($61&255);
 var $63=((($62)*(42))&-1);
 var $64=((($63)-(40))|0);
 var $65=(($64)&255);
 var $66=$1;
 var $67=(($66+4)|0);
 HEAP8[($67)]=$65;
 label=15;break;
 case 14: 
 var $69=$1;
 var $70=(($69+4)|0);
 HEAP8[($70)]=0;
 var $71=$1;
 var $72=(($71+3)|0);
 HEAP8[($72)]=0;
 label=15;break;
 case 15: 
 label=23;break;
 case 16: 
 var $75=$1;
 var $76=(($75+3)|0);
 HEAP8[($76)]=-96;
 label=23;break;
 case 17: 
 var $78=$1;
 var $79=(($78+3)|0);
 HEAP8[($79)]=-95;
 label=23;break;
 case 18: 
 var $81=$1;
 var $82=(($81+3)|0);
 HEAP8[($82)]=11;
 label=23;break;
 case 19: 
 var $84=$1;
 var $85=(($84+4)|0);
 HEAP8[($85)]=0;
 var $86=$1;
 var $87=(($86+3)|0);
 HEAP8[($87)]=0;
 label=23;break;
 case 20: 
 var $89=$1;
 var $90=(($89+3)|0);
 HEAP8[($90)]=15;
 label=23;break;
 case 21: 
 var $92=$1;
 var $93=(($92+3)|0);
 HEAP8[($93)]=12;
 label=23;break;
 case 22: 
 var $95=$1;
 var $96=(($95+4)|0);
 HEAP8[($96)]=0;
 var $97=$1;
 var $98=(($97+3)|0);
 HEAP8[($98)]=0;
 label=23;break;
 case 23: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _asylum_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,32,$6);
 var $8=($7>>>0)<32;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,27288,32);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $16=$2;
 var $17=$3;
 _read_title($16,$17,0);
 $1=0;
 label=6;break;
 case 6: 
 var $19=$1;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _asylum_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $insbuf=sp;
 var $note;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_seek($12,32,1);
 var $14=$3;
 var $15=_hio_read8($14);
 var $16=($15&255);
 var $17=$mod;
 var $18=(($17+148)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$3;
 var $20=_hio_read8($19);
 var $21=($20&255);
 var $22=$mod;
 var $23=(($22+152)|0);
 HEAP32[(($23)>>2)]=$21;
 var $24=$3;
 var $25=_hio_read8($24);
 var $26=($25&255);
 var $27=$mod;
 var $28=(($27+140)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$3;
 var $30=_hio_read8($29);
 var $31=($30&255);
 var $32=$mod;
 var $33=(($32+128)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=$3;
 var $35=_hio_read8($34);
 var $36=($35&255);
 var $37=$mod;
 var $38=(($37+156)|0);
 HEAP32[(($38)>>2)]=$36;
 var $39=$3;
 var $40=_hio_read8($39);
 var $41=$mod;
 var $42=(($41+952)|0);
 var $43=(($42)|0);
 var $44=$mod;
 var $45=(($44+156)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$3;
 var $48=_hio_read($43,1,$46,$47);
 var $49=$3;
 var $50=$4;
 var $51=((($50)+(294))|0);
 var $52=_hio_seek($49,$51,0);
 var $53=$mod;
 var $54=(($53+136)|0);
 HEAP32[(($54)>>2)]=8;
 var $55=$mod;
 var $56=(($55+140)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$mod;
 var $59=(($58+144)|0);
 HEAP32[(($59)>>2)]=$57;
 var $60=$mod;
 var $61=(($60+128)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$mod;
 var $64=(($63+136)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(Math_imul($62,$65)|0);
 var $67=$mod;
 var $68=(($67+132)|0);
 HEAP32[(($68)>>2)]=$66;
 var $69=$mod;
 var $70=(($69+64)|0);
 var $71=(($70)|0);
 var $72=_snprintf($71,64,27120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $79=$mod;
 var $80=_instrument_init($79);
 var $81=($80|0)<0;
 if($81){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=48;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $85=$i;
 var $86=$mod;
 var $87=(($86+140)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($85|0)<($88|0);
 if($89){label=13;break;}else{label=19;break;}
 case 13: 
 var $91=$mod;
 var $92=$i;
 var $93=_subinstrument_alloc($91,$92,1);
 var $94=($93|0)<0;
 if($94){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=48;break;
 case 15: 
 var $97=(($insbuf)|0);
 var $98=$3;
 var $99=_hio_read($97,1,37,$98);
 var $100=$mod;
 var $101=$i;
 var $102=(($insbuf)|0);
 var $103=_instrument_name($100,$101,$102,22);
 var $104=(($insbuf+22)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 var $107=$106<<4;
 var $108=(($107)&255);
 var $109=(($108<<24)>>24);
 var $110=$i;
 var $111=$mod;
 var $112=(($111+176)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+((($110)*(764))&-1))|0);
 var $115=(($114+756)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116)|0);
 var $118=(($117+16)|0);
 HEAP32[(($118)>>2)]=$109;
 var $119=(($insbuf+23)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=$i;
 var $123=$mod;
 var $124=(($123+176)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+((($122)*(764))&-1))|0);
 var $127=(($126+756)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128)|0);
 var $130=(($129)|0);
 HEAP32[(($130)>>2)]=$121;
 var $131=(($insbuf+24)|0);
 var $132=HEAP8[($131)];
 var $133=(($132<<24)>>24);
 var $134=$i;
 var $135=$mod;
 var $136=(($135+176)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+((($134)*(764))&-1))|0);
 var $139=(($138+756)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140)|0);
 var $142=(($141+12)|0);
 HEAP32[(($142)>>2)]=$133;
 var $143=$i;
 var $144=$mod;
 var $145=(($144+176)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+((($143)*(764))&-1))|0);
 var $148=(($147+756)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149)|0);
 var $151=(($150+8)|0);
 HEAP32[(($151)>>2)]=128;
 var $152=$i;
 var $153=$i;
 var $154=$mod;
 var $155=(($154+176)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+((($153)*(764))&-1))|0);
 var $158=(($157+756)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159)|0);
 var $161=(($160+40)|0);
 HEAP32[(($161)>>2)]=$152;
 var $162=(($insbuf)|0);
 var $163=(($162+25)|0);
 var $164=_readmem32l($163);
 var $165=$i;
 var $166=$mod;
 var $167=(($166+180)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+((($165)*(52))&-1))|0);
 var $170=(($169+32)|0);
 HEAP32[(($170)>>2)]=$164;
 var $171=(($insbuf)|0);
 var $172=(($171+29)|0);
 var $173=_readmem32l($172);
 var $174=$i;
 var $175=$mod;
 var $176=(($175+180)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+((($174)*(52))&-1))|0);
 var $179=(($178+36)|0);
 HEAP32[(($179)>>2)]=$173;
 var $180=$i;
 var $181=$mod;
 var $182=(($181+180)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+((($180)*(52))&-1))|0);
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($insbuf)|0);
 var $188=(($187+33)|0);
 var $189=_readmem32l($188);
 var $190=((($186)+($189))|0);
 var $191=$i;
 var $192=$mod;
 var $193=(($192+180)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194+((($191)*(52))&-1))|0);
 var $196=(($195+40)|0);
 HEAP32[(($196)>>2)]=$190;
 var $197=$i;
 var $198=$mod;
 var $199=(($198+180)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+((($197)*(52))&-1))|0);
 var $202=(($201+40)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)>2;
 var $205=($204?2:0);
 var $206=$i;
 var $207=$mod;
 var $208=(($207+180)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+((($206)*(52))&-1))|0);
 var $211=(($210+44)|0);
 HEAP32[(($211)>>2)]=$205;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $215=$i;
 var $216=((($215)+(1))|0);
 $i=$216;
 label=12;break;
 case 19: 
 var $218=$3;
 var $219=$mod;
 var $220=(($219+140)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(((64)-($221))|0);
 var $223=((($222)*(37))&-1);
 var $224=_hio_seek($218,$223,1);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $227=$mod;
 var $228=_pattern_init($227);
 var $229=($228|0)<0;
 if($229){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=48;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 var $235=$i;
 var $236=$mod;
 var $237=(($236+128)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=($235|0)<($238|0);
 if($239){label=27;break;}else{label=37;break;}
 case 27: 
 var $241=$mod;
 var $242=$i;
 var $243=_pattern_tracks_alloc($241,$242,64);
 var $244=($243|0)<0;
 if($244){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=48;break;
 case 29: 
 $j=0;
 label=30;break;
 case 30: 
 var $248=$j;
 var $249=$mod;
 var $250=(($249+136)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($251<<6);
 var $253=($248|0)<($252|0);
 if($253){label=31;break;}else{label=35;break;}
 case 31: 
 var $255=$j;
 var $256=$mod;
 var $257=(($256+136)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(((($255|0))/(($258|0)))&-1);
 var $260=$j;
 var $261=$mod;
 var $262=(($261+136)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(((($260|0))%(($263|0)))&-1);
 var $265=$i;
 var $266=$2;
 var $267=(($266)|0);
 var $268=(($267+168)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($269+($265<<2))|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($271+4)|0);
 var $273=(($272+($264<<2))|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=$2;
 var $276=(($275)|0);
 var $277=(($276+172)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($278+($274<<2))|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($280+4)|0);
 var $282=(($281+($259<<3))|0);
 $event=$282;
 var $283=$event;
 var $284=$283;
 _memset($284, 0, 8)|0;
 var $285=$3;
 var $286=_hio_read8($285);
 $note=$286;
 var $287=$note;
 var $288=($287&255);
 var $289=($288|0)!=0;
 if($289){label=32;break;}else{label=33;break;}
 case 32: 
 var $291=$note;
 var $292=($291&255);
 var $293=((($292)+(13))|0);
 var $294=(($293)&255);
 var $295=$event;
 var $296=(($295)|0);
 HEAP8[($296)]=$294;
 label=33;break;
 case 33: 
 var $298=$3;
 var $299=_hio_read8($298);
 var $300=$event;
 var $301=(($300+1)|0);
 HEAP8[($301)]=$299;
 var $302=$3;
 var $303=_hio_read8($302);
 var $304=$event;
 var $305=(($304+3)|0);
 HEAP8[($305)]=$303;
 var $306=$3;
 var $307=_hio_read8($306);
 var $308=$event;
 var $309=(($308+4)|0);
 HEAP8[($309)]=$307;
 label=34;break;
 case 34: 
 var $311=$j;
 var $312=((($311)+(1))|0);
 $j=$312;
 label=30;break;
 case 35: 
 label=36;break;
 case 36: 
 var $315=$i;
 var $316=((($315)+(1))|0);
 $i=$316;
 label=26;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 $i=0;
 label=40;break;
 case 40: 
 var $321=$i;
 var $322=$mod;
 var $323=(($322+140)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=($321|0)<($324|0);
 if($325){label=41;break;}else{label=47;break;}
 case 41: 
 var $327=$i;
 var $328=$mod;
 var $329=(($328+180)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($330+((($327)*(52))&-1))|0);
 var $332=(($331+32)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=($333|0)>1;
 if($334){label=42;break;}else{label=45;break;}
 case 42: 
 var $336=$2;
 var $337=$3;
 var $338=$i;
 var $339=$mod;
 var $340=(($339+180)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($341+((($338)*(52))&-1))|0);
 var $343=_load_sample($336,$337,0,$342,0);
 var $344=($343|0)<0;
 if($344){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=48;break;
 case 44: 
 var $347=$i;
 var $348=$mod;
 var $349=(($348+176)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=(($350+((($347)*(764))&-1))|0);
 var $352=(($351+36)|0);
 HEAP32[(($352)>>2)]=1;
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 var $355=$i;
 var $356=((($355)+(1))|0);
 $i=$356;
 label=40;break;
 case 47: 
 $1=0;
 label=48;break;
 case 48: 
 var $359=$1;
 STACKTOP=sp;return $359;
  default: assert(0, "bad label: " + label);
 }
}
function _instrument_init($mod){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$mod;
 var $3=$2;
 var $4=(($3+140)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_calloc(764,$5);
 var $7=$6;
 var $8=$2;
 var $9=(($8+176)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=(($10+176)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 var $16=$2;
 var $17=(($16+144)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=7;break;}
 case 4: 
 var $21=$2;
 var $22=(($21+144)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=_calloc(52,$23);
 var $25=$24;
 var $26=$2;
 var $27=(($26+180)|0);
 HEAP32[(($27)>>2)]=$25;
 var $28=$2;
 var $29=(($28+180)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $36=$1;
 STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _subinstrument_alloc($mod,$i,$num){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$mod;
 $3=$i;
 $4=$num;
 var $5=$4;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $9=$4;
 var $10=_calloc(64,$9);
 var $11=$10;
 var $12=$3;
 var $13=$2;
 var $14=(($13+176)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+((($12)*(764))&-1))|0);
 var $17=(($16+756)|0);
 HEAP32[(($17)>>2)]=$11;
 var $18=$3;
 var $19=$2;
 var $20=(($19+176)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+((($18)*(764))&-1))|0);
 var $23=(($22+756)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _pattern_init($mod){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$mod;
 var $3=$2;
 var $4=(($3+132)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_calloc(4,$5);
 var $7=$6;
 var $8=$2;
 var $9=(($8+172)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=(($10+172)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $16=$2;
 var $17=(($16+128)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=_calloc(4,$18);
 var $20=$19;
 var $21=$2;
 var $22=(($21+168)|0);
 HEAP32[(($22)>>2)]=$20;
 var $23=$2;
 var $24=(($23+168)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $30=$1;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _pattern_alloc($mod,$num){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$mod;
 $3=$num;
 var $4=$2;
 var $5=(($4+136)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)-(1))|0);
 var $8=($7<<2);
 var $9=((($8)+(8))|0);
 var $10=_calloc(1,$9);
 var $11=$10;
 var $12=$3;
 var $13=$2;
 var $14=(($13+168)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+($12<<2))|0);
 HEAP32[(($16)>>2)]=$11;
 var $17=$3;
 var $18=$2;
 var $19=(($18+168)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+($17<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _track_alloc($mod,$num,$rows){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$mod;
 $3=$num;
 $4=$rows;
 var $5=$4;
 var $6=((($5)-(1))|0);
 var $7=($6<<3);
 var $8=((($7)+(12))|0);
 var $9=_calloc($8,1);
 var $10=$9;
 var $11=$3;
 var $12=$2;
 var $13=(($12+172)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+($11<<2))|0);
 HEAP32[(($15)>>2)]=$10;
 var $16=$3;
 var $17=$2;
 var $18=(($17+172)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+($16<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $25=$4;
 var $26=$3;
 var $27=$2;
 var $28=(($27+172)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+($26<<2))|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31)|0);
 HEAP32[(($32)>>2)]=$25;
 $1=0;
 label=4;break;
 case 4: 
 var $34=$1;
 STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _tracks_in_pattern_alloc($mod,$num){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $t;
 var $rows;
 $2=$mod;
 $3=$num;
 $i=0;
 label=2;break;
 case 2: 
 var $5=$i;
 var $6=$2;
 var $7=(($6+136)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($5|0)<($8|0);
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 var $11=$3;
 var $12=$2;
 var $13=(($12+136)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(Math_imul($11,$14)|0);
 var $16=$i;
 var $17=((($15)+($16))|0);
 $t=$17;
 var $18=$3;
 var $19=$2;
 var $20=(($19+168)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 $rows=$25;
 var $26=$2;
 var $27=$t;
 var $28=$rows;
 var $29=_track_alloc($26,$27,$28);
 var $30=($29|0)<0;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=8;break;
 case 5: 
 var $33=$t;
 var $34=$i;
 var $35=$3;
 var $36=$2;
 var $37=(($36+168)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+($35<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+4)|0);
 var $42=(($41+($34<<2))|0);
 HEAP32[(($42)>>2)]=$33;
 label=6;break;
 case 6: 
 var $44=$i;
 var $45=((($44)+(1))|0);
 $i=$45;
 label=2;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $48=$1;
 STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }
}
function _pattern_tracks_alloc($mod,$num,$rows){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$mod;
 $3=$num;
 $4=$rows;
 var $5=$2;
 var $6=$3;
 var $7=_pattern_alloc($5,$6);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $11=$4;
 var $12=$3;
 var $13=$2;
 var $14=(($13+168)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+($12<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=$11;
 var $19=$2;
 var $20=$3;
 var $21=_tracks_in_pattern_alloc($19,$20);
 var $22=($21|0)<0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $26=$1;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }
}
function _realloc_samples($buf,$size,$new_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$buf;
 $3=$size;
 $4=$new_size;
 var $5=$2;
 var $6=$5;
 var $7=$4;
 var $8=((($7)*(52))&-1);
 var $9=_realloc($6,$8);
 var $10=$9;
 $2=$10;
 var $11=$2;
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $15=$4;
 var $16=$3;
 var $17=HEAP32[(($16)>>2)];
 var $18=($15|0)>($17|0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$2;
 var $21=$3;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($20+((($22)*(52))&-1))|0);
 var $24=$23;
 var $25=$4;
 var $26=$3;
 var $27=HEAP32[(($26)>>2)];
 var $28=((($25)-($27))|0);
 var $29=((($28)*(52))&-1);
 _memset($24, 0, $29)|0;
 label=5;break;
 case 5: 
 var $31=$4;
 var $32=$3;
 HEAP32[(($32)>>2)]=$31;
 var $33=$2;
 $1=$33;
 label=6;break;
 case 6: 
 var $35=$1;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }
}
function _instrument_name($mod,$i,$r,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$mod;
 $2=$i;
 $3=$r;
 $4=$n;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 $4=0;
 label=7;break;
 case 4: 
 var $10=$4;
 var $11=($10|0)>31;
 if($11){label=5;break;}else{label=6;break;}
 case 5: 
 $4=31;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $16=$2;
 var $17=$1;
 var $18=(($17+176)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+((($16)*(764))&-1))|0);
 var $21=(($20)|0);
 var $22=(($21)|0);
 var $23=$3;
 var $24=$4;
 var $25=_copy_adjust($22,$23,$24);
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _copy_adjust($s,$r,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 $1=$s;
 $2=$r;
 $3=$n;
 var $4=$1;
 var $5=$3;
 var $6=((($5)+(1))|0);
 _memset($4, 0, $6)|0;
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=_strlcpy($7,$8,$9);
 $i=0;
 label=2;break;
 case 2: 
 var $12=$i;
 var $13=$1;
 var $14=(($13+$12)|0);
 var $15=HEAP8[($14)];
 var $16=(($15<<24)>>24);
 var $17=($16|0)!=0;
 if($17){label=3;break;}else{var $23=0;label=4;break;}
 case 3: 
 var $19=$i;
 var $20=$3;
 var $21=($19|0)<($20|0);
 var $23=$21;label=4;break;
 case 4: 
 var $23;
 if($23){label=5;break;}else{label=10;break;}
 case 5: 
 var $25=$i;
 var $26=$1;
 var $27=(($26+$25)|0);
 var $28=HEAP8[($27)];
 var $29=(($28<<24)>>24);
 var $30=_isprint($29);
 var $31=($30|0)!=0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 var $33=$i;
 var $34=$1;
 var $35=(($34+$33)|0);
 var $36=HEAP8[($35)];
 var $37=($36&255);
 var $38=($37|0)>127;
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 var $40=$i;
 var $41=$1;
 var $42=(($41+$40)|0);
 HEAP8[($42)]=46;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $45=$i;
 var $46=((($45)+(1))|0);
 $i=$46;
 label=2;break;
 case 10: 
 label=11;break;
 case 11: 
 var $49=$1;
 var $50=HEAP8[($49)];
 var $51=(($50<<24)>>24);
 var $52=($51|0)!=0;
 if($52){label=12;break;}else{var $63=0;label=13;break;}
 case 12: 
 var $54=$1;
 var $55=_strlen($54);
 var $56=((($55)-(1))|0);
 var $57=$1;
 var $58=(($57+$56)|0);
 var $59=HEAP8[($58)];
 var $60=(($59<<24)>>24);
 var $61=($60|0)==32;
 var $63=$61;label=13;break;
 case 13: 
 var $63;
 if($63){label=14;break;}else{label=15;break;}
 case 14: 
 var $65=$1;
 var $66=_strlen($65);
 var $67=((($66)-(1))|0);
 var $68=$1;
 var $69=(($68+$67)|0);
 HEAP8[($69)]=0;
 label=11;break;
 case 15: 
 var $71=$1;
 STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }
}
function _test_name($s,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 $2=$s;
 $3=$n;
 $i=0;
 label=2;break;
 case 2: 
 var $5=$i;
 var $6=$3;
 var $7=($5|0)<($6|0);
 if($7){label=3;break;}else{label=11;break;}
 case 3: 
 var $9=$i;
 var $10=$2;
 var $11=(($10+$9)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=($13|0)>127;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=12;break;
 case 5: 
 var $17=$i;
 var $18=$2;
 var $19=(($18+$17)|0);
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=($21|0)>0;
 if($22){label=6;break;}else{label=9;break;}
 case 6: 
 var $24=$i;
 var $25=$2;
 var $26=(($25+$24)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 var $29=($28|0)<32;
 if($29){label=7;break;}else{label=9;break;}
 case 7: 
 var $31=$i;
 var $32=$2;
 var $33=(($32+$31)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=($35|0)!=8;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=12;break;
 case 9: 
 label=10;break;
 case 10: 
 var $40=$i;
 var $41=((($40)+(1))|0);
 $i=$41;
 label=2;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 var $44=$1;
 STACKTOP=sp;return $44;
  default: assert(0, "bad label: " + label);
 }
}
function _read_title($f,$t,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 $1=$f;
 $2=$t;
 $3=$s;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=6;break;
 case 3: 
 var $8=$3;
 var $9=($8|0)>=64;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 $3=63;
 label=5;break;
 case 5: 
 var $12=$2;
 var $13=$3;
 var $14=((($13)+(1))|0);
 _memset($12, 0, $14)|0;
 var $15=(($buf)|0);
 var $16=$3;
 var $17=$1;
 var $18=_hio_read($15,1,$16,$17);
 var $19=$3;
 var $20=(($buf+$19)|0);
 HEAP8[($20)]=0;
 var $21=$2;
 var $22=(($buf)|0);
 var $23=$3;
 var $24=_copy_adjust($21,$22,$23);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_noisetracker_event($event,$mod_event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $fxt;
 $1=$event;
 $2=$mod_event;
 var $3=$1;
 var $4=$3;
 _memset($4, 0, 8)|0;
 var $5=$2;
 var $6=(($5)|0);
 var $7=HEAP8[($6)];
 var $8=($7&255);
 var $9=$8&15;
 var $10=$9<<8;
 var $11=$2;
 var $12=(($11+1)|0);
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=((($10)+($14))|0);
 var $16=_period_to_note($15);
 var $17=(($16)&255);
 var $18=$1;
 var $19=(($18)|0);
 HEAP8[($19)]=$17;
 var $20=$2;
 var $21=(($20)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23&240;
 var $25=$24>>4;
 var $26=$25<<4;
 var $27=$2;
 var $28=(($27+2)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&240;
 var $32=$31>>4;
 var $33=$26|$32;
 var $34=(($33)&255);
 var $35=$1;
 var $36=(($35+1)|0);
 HEAP8[($36)]=$34;
 var $37=$2;
 var $38=(($37+2)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=$40&15;
 $fxt=$41;
 var $42=$fxt;
 var $43=($42|0)<=6;
 if($43){label=4;break;}else{label=2;break;}
 case 2: 
 var $45=$fxt;
 var $46=($45|0)>=10;
 if($46){label=3;break;}else{label=5;break;}
 case 3: 
 var $48=$fxt;
 var $49=($48|0)!=14;
 if($49){label=4;break;}else{label=5;break;}
 case 4: 
 var $51=$fxt;
 var $52=(($51)&255);
 var $53=$1;
 var $54=(($53+3)|0);
 HEAP8[($54)]=$52;
 var $55=$2;
 var $56=(($55+3)|0);
 var $57=HEAP8[($56)];
 var $58=$1;
 var $59=(($58+4)|0);
 HEAP8[($59)]=$57;
 label=5;break;
 case 5: 
 var $61=$1;
 _disable_continue_fx($61);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _disable_continue_fx($event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$event;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP8[($3)];
 var $5=(($4<<24)>>24)!=0;
 if($5){label=7;break;}else{label=2;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+3)|0);
 var $9=HEAP8[($8)];
 var $10=($9&255);
 switch(($10|0)){case 5:{ label=3;break;}case 6:{ label=4;break;}case 1:case 2:case 10:{ label=5;break;}default:{label=6;break;}}break;
 case 3: 
 var $12=$1;
 var $13=(($12+3)|0);
 HEAP8[($13)]=3;
 label=6;break;
 case 4: 
 var $15=$1;
 var $16=(($15+3)|0);
 HEAP8[($16)]=4;
 label=6;break;
 case 5: 
 var $18=$1;
 var $19=(($18+3)|0);
 HEAP8[($19)]=0;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_protracker_event($event,$mod_event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$event;
 $2=$mod_event;
 var $3=$1;
 var $4=$3;
 _memset($4, 0, 8)|0;
 var $5=$2;
 var $6=(($5)|0);
 var $7=HEAP8[($6)];
 var $8=($7&255);
 var $9=$8&15;
 var $10=$9<<8;
 var $11=$2;
 var $12=(($11+1)|0);
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=((($10)+($14))|0);
 var $16=_period_to_note($15);
 var $17=(($16)&255);
 var $18=$1;
 var $19=(($18)|0);
 HEAP8[($19)]=$17;
 var $20=$2;
 var $21=(($20)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23&240;
 var $25=$24>>4;
 var $26=$25<<4;
 var $27=$2;
 var $28=(($27+2)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&240;
 var $32=$31>>4;
 var $33=$26|$32;
 var $34=(($33)&255);
 var $35=$1;
 var $36=(($35+1)|0);
 HEAP8[($36)]=$34;
 var $37=$1;
 var $38=(($37+3)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=($40|0)!=8;
 if($41){label=2;break;}else{label=3;break;}
 case 2: 
 var $43=$2;
 var $44=(($43+2)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=$46&15;
 var $48=(($47)&255);
 var $49=$1;
 var $50=(($49+3)|0);
 HEAP8[($50)]=$48;
 var $51=$2;
 var $52=(($51+3)|0);
 var $53=HEAP8[($52)];
 var $54=$1;
 var $55=(($54+4)|0);
 HEAP8[($55)]=$53;
 label=3;break;
 case 3: 
 var $57=$1;
 _disable_continue_fx($57);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _check_filename_case($dir,$name,$new_name,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $found;
 var $dirfd;
 var $d;
 $2=$dir;
 $3=$name;
 $4=$new_name;
 $5=$size;
 $found=0;
 var $6=$2;
 var $7=_opendir($6);
 $dirfd=$7;
 var $8=$dirfd;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=11;break;
 case 3: 
 label=4;break;
 case 4: 
 var $13=$dirfd;
 var $14=_readdir($13);
 $d=$14;
 var $15=($14|0)!=0;
 if($15){label=5;break;}else{label=8;break;}
 case 5: 
 var $17=$d;
 var $18=(($17+11)|0);
 var $19=(($18)|0);
 var $20=$3;
 var $21=_strcasecmp($19,$20);
 var $22=($21|0)!=0;
 if($22){label=7;break;}else{label=6;break;}
 case 6: 
 $found=1;
 label=8;break;
 case 7: 
 label=4;break;
 case 8: 
 var $26=$found;
 var $27=($26|0)!=0;
 if($27){label=9;break;}else{label=10;break;}
 case 9: 
 var $29=$4;
 var $30=$d;
 var $31=(($30+11)|0);
 var $32=(($31)|0);
 var $33=$5;
 var $34=_strlcpy($29,$32,$33);
 label=10;break;
 case 10: 
 var $36=$dirfd;
 var $37=_closedir($36);
 var $38=$found;
 $1=$38;
 label=11;break;
 case 11: 
 var $40=$1;
 STACKTOP=sp;return $40;
  default: assert(0, "bad label: " + label);
 }
}
function _get_instrument_path($m,$path,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$m;
 $2=$path;
 $3=$size;
 var $4=$1;
 var $5=(($4+6544)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$2;
 var $10=$1;
 var $11=(($10+6544)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$3;
 var $14=_strlcpy($9,$12,$13);
 label=7;break;
 case 3: 
 var $16=_getenv(26992);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$2;
 var $20=_getenv(26992);
 var $21=$3;
 var $22=_strlcpy($19,$20,$21);
 label=6;break;
 case 5: 
 var $24=$2;
 var $25=$3;
 var $26=_strlcpy($24,27280,$25);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_type($m,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $ap=sp;
 $1=$m;
 $2=$fmt;
 var $3=(($ap)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+64)|0);
 var $8=(($7)|0);
 var $9=$2;
 var $10=(($ap)|0);
 var $11=_vsnprintf($8,64,$9,$10);
 var $12=(($ap)|0);
 var $13=$12;
 STACKTOP=sp;return;
}
function _dbm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1145195824;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=_hio_seek($10,12,1);
 var $12=$2;
 var $13=$3;
 _read_title($12,$13,44);
 $1=0;
 label=4;break;
 case 4: 
 var $15=$1;
 STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }
}
function _dbm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $handle;
 var $name=sp;
 var $version;
 var $i;
 var $ret;
 var $data=(sp)+(48);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=(($data)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$3;
 var $16=_hio_read16b($15);
 $version=$16;
 var $17=$3;
 var $18=_hio_seek($17,10,1);
 var $19=(($name)|0);
 var $20=$3;
 var $21=_hio_read($19,1,44,$20);
 var $22=_iff_new();
 $handle=$22;
 var $23=$handle;
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=20;break;
 case 5: 
 var $27=$handle;
 var $28=_iff_register($27,27232,304);
 $ret=$28;
 var $29=$handle;
 var $30=_iff_register($29,25176,522);
 var $31=$ret;
 var $32=$31|$30;
 $ret=$32;
 var $33=$handle;
 var $34=_iff_register($33,23808,342);
 var $35=$ret;
 var $36=$35|$34;
 $ret=$36;
 var $37=$handle;
 var $38=_iff_register($37,23104,102);
 var $39=$ret;
 var $40=$39|$38;
 $ret=$40;
 var $41=$handle;
 var $42=_iff_register($41,22424,354);
 var $43=$ret;
 var $44=$43|$42;
 $ret=$44;
 var $45=$handle;
 var $46=_iff_register($45,21704,578);
 var $47=$ret;
 var $48=$47|$46;
 $ret=$48;
 var $49=$ret;
 var $50=($49|0)!=0;
 if($50){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=20;break;
 case 7: 
 var $53=$mod;
 var $54=(($53)|0);
 var $55=(($54)|0);
 var $56=(($name)|0);
 var $57=_strlcpy($55,$56,64);
 var $58=$mod;
 var $59=(($58+64)|0);
 var $60=(($59)|0);
 var $61=$version;
 var $62=($61&65535);
 var $63=$62>>8;
 var $64=$version;
 var $65=($64&65535);
 var $66=$65&255;
 var $67=_snprintf($60,64,21248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$63,HEAP32[(((tempVarArgs)+(8))>>2)]=$66,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $74=$handle;
 var $75=$2;
 var $76=$3;
 var $77=$data;
 var $78=_iff_load($74,$75,$76,$77);
 var $79=($78|0)<0;
 if($79){label=14;break;}else{label=15;break;}
 case 14: 
 var $81=$handle;
 _iff_release($81);
 $1=-1;
 label=20;break;
 case 15: 
 var $83=$handle;
 _iff_release($83);
 $i=0;
 label=16;break;
 case 16: 
 var $85=$i;
 var $86=$mod;
 var $87=(($86+136)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($85|0)<($88|0);
 if($89){label=17;break;}else{label=19;break;}
 case 17: 
 var $91=$i;
 var $92=$mod;
 var $93=(($92+184)|0);
 var $94=(($93+((($91)*(12))&-1))|0);
 var $95=(($94)|0);
 HEAP32[(($95)>>2)]=128;
 label=18;break;
 case 18: 
 var $97=$i;
 var $98=((($97)+(1))|0);
 $i=$98;
 label=16;break;
 case 19: 
 $1=0;
 label=20;break;
 case 20: 
 var $101=$1;
 STACKTOP=sp;return $101;
  default: assert(0, "bad label: " + label);
 }
}
function _get_info($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read16b($8);
 var $10=($9&65535);
 var $11=$mod;
 var $12=(($11+140)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$4;
 var $14=_hio_read16b($13);
 var $15=($14&65535);
 var $16=$mod;
 var $17=(($16+144)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$4;
 var $19=_hio_read16b($18);
 var $20=$4;
 var $21=_hio_read16b($20);
 var $22=($21&65535);
 var $23=$mod;
 var $24=(($23+128)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=$4;
 var $26=_hio_read16b($25);
 var $27=($26&65535);
 var $28=$mod;
 var $29=(($28+136)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$mod;
 var $31=(($30+128)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$mod;
 var $34=(($33+136)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(Math_imul($32,$35)|0);
 var $37=$mod;
 var $38=(($37+132)|0);
 HEAP32[(($38)>>2)]=$36;
 var $39=$mod;
 var $40=_instrument_init($39);
 var $41=($40|0)<0;
 if($41){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $45=$1;
 STACKTOP=sp;return $45;
  default: assert(0, "bad label: " + label);
 }
}
function _get_song($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $buffer=sp;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$data;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=12;break;
 case 3: 
 var $16=$data;
 var $17=(($16)|0);
 HEAP32[(($17)>>2)]=1;
 var $18=(($buffer)|0);
 var $19=$4;
 var $20=_hio_read($18,44,1,$19);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $23=$4;
 var $24=_hio_read16b($23);
 var $25=($24&65535);
 var $26=$mod;
 var $27=(($26+156)|0);
 HEAP32[(($27)>>2)]=$25;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $31=$i;
 var $32=$mod;
 var $33=(($32+156)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($31|0)<($34|0);
 if($35){label=9;break;}else{label=11;break;}
 case 9: 
 var $37=$4;
 var $38=_hio_read16b($37);
 var $39=(($38)&255);
 var $40=$i;
 var $41=$mod;
 var $42=(($41+952)|0);
 var $43=(($42+$40)|0);
 HEAP8[($43)]=$39;
 label=10;break;
 case 10: 
 var $45=$i;
 var $46=((($45)+(1))|0);
 $i=$46;
 label=8;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 var $49=$1;
 STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }
}
function _get_inst($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $c2spd;
 var $flags;
 var $snum;
 var $buffer=sp;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $11=$i;
 var $12=$mod;
 var $13=(($12+140)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11|0)<($14|0);
 if($15){label=5;break;}else{label=16;break;}
 case 5: 
 var $17=$i;
 var $18=$mod;
 var $19=(($18+176)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+((($17)*(764))&-1))|0);
 var $22=(($21+36)|0);
 HEAP32[(($22)>>2)]=1;
 var $23=$mod;
 var $24=$i;
 var $25=_subinstrument_alloc($23,$24,1);
 var $26=($25|0)<0;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=17;break;
 case 7: 
 var $29=(($buffer)|0);
 var $30=$4;
 var $31=_hio_read($29,30,1,$30);
 var $32=$mod;
 var $33=$i;
 var $34=(($buffer)|0);
 var $35=_instrument_name($32,$33,$34,30);
 var $36=$4;
 var $37=_hio_read16b($36);
 var $38=($37&65535);
 $snum=$38;
 var $39=$snum;
 var $40=($39|0)==0;
 if($40){label=9;break;}else{label=8;break;}
 case 8: 
 var $42=$snum;
 var $43=$mod;
 var $44=(($43+144)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($42|0)>($45|0);
 if($46){label=9;break;}else{label=10;break;}
 case 9: 
 label=15;break;
 case 10: 
 var $49=$snum;
 var $50=((($49)-(1))|0);
 $snum=$50;
 var $51=$i;
 var $52=$mod;
 var $53=(($52+176)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+((($51)*(764))&-1))|0);
 var $56=(($55+756)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=(($58+40)|0);
 HEAP32[(($59)>>2)]=$50;
 var $60=$4;
 var $61=_hio_read16b($60);
 var $62=($61&65535);
 var $63=$i;
 var $64=$mod;
 var $65=(($64+176)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+((($63)*(764))&-1))|0);
 var $68=(($67+756)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69)|0);
 var $71=(($70)|0);
 HEAP32[(($71)>>2)]=$62;
 var $72=$4;
 var $73=_hio_read32b($72);
 $c2spd=$73;
 var $74=$4;
 var $75=_hio_read32b($74);
 var $76=$snum;
 var $77=$mod;
 var $78=(($77+180)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+((($76)*(52))&-1))|0);
 var $81=(($80+36)|0);
 HEAP32[(($81)>>2)]=$75;
 var $82=$i;
 var $83=$mod;
 var $84=(($83+180)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+((($82)*(52))&-1))|0);
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$4;
 var $90=_hio_read32b($89);
 var $91=((($88)+($90))|0);
 var $92=$snum;
 var $93=$mod;
 var $94=(($93+180)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+((($92)*(52))&-1))|0);
 var $97=(($96+40)|0);
 HEAP32[(($97)>>2)]=$91;
 var $98=$4;
 var $99=_hio_read16b($98);
 var $100=(($99<<16)>>16);
 var $101=((($100)+(128))|0);
 var $102=$i;
 var $103=$mod;
 var $104=(($103+176)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+((($102)*(764))&-1))|0);
 var $107=(($106+756)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108)|0);
 var $110=(($109+8)|0);
 HEAP32[(($110)>>2)]=$101;
 var $111=$i;
 var $112=$mod;
 var $113=(($112+176)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+((($111)*(764))&-1))|0);
 var $116=(($115+756)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117)|0);
 var $119=(($118+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($120|0)>255;
 if($121){label=11;break;}else{label=12;break;}
 case 11: 
 var $123=$i;
 var $124=$mod;
 var $125=(($124+176)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+((($123)*(764))&-1))|0);
 var $128=(($127+756)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129)|0);
 var $131=(($130+8)|0);
 HEAP32[(($131)>>2)]=255;
 label=12;break;
 case 12: 
 var $133=$4;
 var $134=_hio_read16b($133);
 var $135=($134&65535);
 $flags=$135;
 var $136=$flags;
 var $137=$136&3;
 var $138=($137|0)!=0;
 var $139=($138?2:0);
 var $140=$snum;
 var $141=$mod;
 var $142=(($141+180)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($143+((($140)*(52))&-1))|0);
 var $145=(($144+44)|0);
 HEAP32[(($145)>>2)]=$139;
 var $146=$flags;
 var $147=$146&2;
 var $148=($147|0)!=0;
 var $149=($148?4:0);
 var $150=$snum;
 var $151=$mod;
 var $152=(($151+180)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+((($150)*(52))&-1))|0);
 var $155=(($154+44)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$156|$149;
 HEAP32[(($155)>>2)]=$157;
 var $158=$c2spd;
 var $159=$i;
 var $160=$mod;
 var $161=(($160+176)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+((($159)*(764))&-1))|0);
 var $164=(($163+756)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165)|0);
 var $167=(($166+12)|0);
 var $168=$i;
 var $169=$mod;
 var $170=(($169+176)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+((($168)*(764))&-1))|0);
 var $173=(($172+756)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174)|0);
 var $176=(($175+16)|0);
 _c2spd_to_note($158,$167,$176);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $180=$i;
 var $181=((($180)+(1))|0);
 $i=$181;
 label=4;break;
 case 16: 
 $1=0;
 label=17;break;
 case 17: 
 var $184=$1;
 STACKTOP=sp;return $184;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt155($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $c;
 var $r;
 var $n;
 var $sz;
 var $event;
 var $dummy=sp;
 var $x;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$mod;
 var $9=_pattern_init($8);
 var $10=($9|0)<0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=57;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $16=$i;
 var $17=$mod;
 var $18=(($17+128)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($16|0)<($19|0);
 if($20){label=7;break;}else{label=56;break;}
 case 7: 
 var $22=$mod;
 var $23=$i;
 var $24=$4;
 var $25=_hio_read16b($24);
 var $26=($25&65535);
 var $27=_pattern_tracks_alloc($22,$23,$26);
 var $28=($27|0)<0;
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=57;break;
 case 9: 
 var $31=$4;
 var $32=_hio_read32b($31);
 $sz=$32;
 $r=0;
 $c=-1;
 label=10;break;
 case 10: 
 var $34=$sz;
 var $35=($34|0)>0;
 if($35){label=11;break;}else{label=54;break;}
 case 11: 
 var $37=$4;
 var $38=_hio_read8($37);
 var $39=($38&255);
 $c=$39;
 var $40=$sz;
 var $41=((($40)-(1))|0);
 $sz=$41;
 var $42=($41|0)<=0;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 label=54;break;
 case 13: 
 var $45=$c;
 var $46=($45|0)==0;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$r;
 var $49=((($48)+(1))|0);
 $r=$49;
 $c=-1;
 label=10;break;
 case 15: 
 var $51=$c;
 var $52=((($51)-(1))|0);
 $c=$52;
 var $53=$4;
 var $54=_hio_read8($53);
 var $55=($54&255);
 $n=$55;
 var $56=$sz;
 var $57=((($56)-(1))|0);
 $sz=$57;
 var $58=($57|0)<=0;
 if($58){label=16;break;}else{label=17;break;}
 case 16: 
 label=54;break;
 case 17: 
 var $61=$c;
 var $62=$mod;
 var $63=(($62+136)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($61|0)>=($64|0);
 if($65){label=19;break;}else{label=18;break;}
 case 18: 
 var $67=$r;
 var $68=$i;
 var $69=$mod;
 var $70=(($69+168)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+($68<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($67|0)>=($75|0);
 if($76){label=19;break;}else{label=20;break;}
 case 19: 
 $event=$dummy;
 label=21;break;
 case 20: 
 var $79=$r;
 var $80=$c;
 var $81=$i;
 var $82=$2;
 var $83=(($82)|0);
 var $84=(($83+168)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+($81<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+4)|0);
 var $89=(($88+($80<<2))|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$2;
 var $92=(($91)|0);
 var $93=(($92+172)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+($90<<2))|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+4)|0);
 var $98=(($97+($79<<3))|0);
 $event=$98;
 label=21;break;
 case 21: 
 var $100=$n;
 var $101=$100&1;
 var $102=($101|0)!=0;
 if($102){label=22;break;}else{label=25;break;}
 case 22: 
 var $104=$4;
 var $105=_hio_read8($104);
 $x=$105;
 var $106=$x;
 var $107=($106&255);
 var $108=$107&240;
 var $109=$108>>4;
 var $110=((($109)*(12))&-1);
 var $111=((($110)+(13))|0);
 var $112=$x;
 var $113=($112&255);
 var $114=$113&15;
 var $115=((($111)+($114))|0);
 var $116=(($115)&255);
 var $117=$event;
 var $118=(($117)|0);
 HEAP8[($118)]=$116;
 var $119=$sz;
 var $120=((($119)-(1))|0);
 $sz=$120;
 var $121=($120|0)<=0;
 if($121){label=23;break;}else{label=24;break;}
 case 23: 
 label=54;break;
 case 24: 
 label=25;break;
 case 25: 
 var $125=$n;
 var $126=$125&2;
 var $127=($126|0)!=0;
 if($127){label=26;break;}else{label=29;break;}
 case 26: 
 var $129=$4;
 var $130=_hio_read8($129);
 var $131=$event;
 var $132=(($131+1)|0);
 HEAP8[($132)]=$130;
 var $133=$sz;
 var $134=((($133)-(1))|0);
 $sz=$134;
 var $135=($134|0)<=0;
 if($135){label=27;break;}else{label=28;break;}
 case 27: 
 label=54;break;
 case 28: 
 label=29;break;
 case 29: 
 var $139=$n;
 var $140=$139&4;
 var $141=($140|0)!=0;
 if($141){label=30;break;}else{label=33;break;}
 case 30: 
 var $143=$4;
 var $144=_hio_read8($143);
 var $145=$event;
 var $146=(($145+3)|0);
 HEAP8[($146)]=$144;
 var $147=$sz;
 var $148=((($147)-(1))|0);
 $sz=$148;
 var $149=($148|0)<=0;
 if($149){label=31;break;}else{label=32;break;}
 case 31: 
 label=54;break;
 case 32: 
 label=33;break;
 case 33: 
 var $153=$n;
 var $154=$153&8;
 var $155=($154|0)!=0;
 if($155){label=34;break;}else{label=37;break;}
 case 34: 
 var $157=$4;
 var $158=_hio_read8($157);
 var $159=$event;
 var $160=(($159+4)|0);
 HEAP8[($160)]=$158;
 var $161=$sz;
 var $162=((($161)-(1))|0);
 $sz=$162;
 var $163=($162|0)<=0;
 if($163){label=35;break;}else{label=36;break;}
 case 35: 
 label=54;break;
 case 36: 
 label=37;break;
 case 37: 
 var $167=$n;
 var $168=$167&16;
 var $169=($168|0)!=0;
 if($169){label=38;break;}else{label=41;break;}
 case 38: 
 var $171=$4;
 var $172=_hio_read8($171);
 var $173=$event;
 var $174=(($173+5)|0);
 HEAP8[($174)]=$172;
 var $175=$sz;
 var $176=((($175)-(1))|0);
 $sz=$176;
 var $177=($176|0)<=0;
 if($177){label=39;break;}else{label=40;break;}
 case 39: 
 label=54;break;
 case 40: 
 label=41;break;
 case 41: 
 var $181=$n;
 var $182=$181&32;
 var $183=($182|0)!=0;
 if($183){label=42;break;}else{label=45;break;}
 case 42: 
 var $185=$4;
 var $186=_hio_read8($185);
 var $187=$event;
 var $188=(($187+6)|0);
 HEAP8[($188)]=$186;
 var $189=$sz;
 var $190=((($189)-(1))|0);
 $sz=$190;
 var $191=($190|0)<=0;
 if($191){label=43;break;}else{label=44;break;}
 case 43: 
 label=54;break;
 case 44: 
 label=45;break;
 case 45: 
 var $195=$event;
 var $196=(($195+3)|0);
 var $197=HEAP8[($196)];
 var $198=($197&255);
 var $199=($198|0)==28;
 if($199){label=46;break;}else{label=47;break;}
 case 46: 
 var $201=$event;
 var $202=(($201+3)|0);
 HEAP8[($202)]=-85;
 label=47;break;
 case 47: 
 var $204=$event;
 var $205=(($204+3)|0);
 var $206=HEAP8[($205)];
 var $207=($206&255);
 var $208=($207|0)>28;
 if($208){label=48;break;}else{label=49;break;}
 case 48: 
 var $210=$event;
 var $211=(($210+6)|0);
 HEAP8[($211)]=0;
 var $212=$event;
 var $213=(($212+3)|0);
 HEAP8[($213)]=0;
 label=49;break;
 case 49: 
 var $215=$event;
 var $216=(($215+5)|0);
 var $217=HEAP8[($216)];
 var $218=($217&255);
 var $219=($218|0)==28;
 if($219){label=50;break;}else{label=51;break;}
 case 50: 
 var $221=$event;
 var $222=(($221+5)|0);
 HEAP8[($222)]=-85;
 label=51;break;
 case 51: 
 var $224=$event;
 var $225=(($224+5)|0);
 var $226=HEAP8[($225)];
 var $227=($226&255);
 var $228=($227|0)>28;
 if($228){label=52;break;}else{label=53;break;}
 case 52: 
 var $230=$event;
 var $231=(($230+6)|0);
 HEAP8[($231)]=0;
 var $232=$event;
 var $233=(($232+5)|0);
 HEAP8[($233)]=0;
 label=53;break;
 case 53: 
 label=10;break;
 case 54: 
 label=55;break;
 case 55: 
 var $237=$i;
 var $238=((($237)+(1))|0);
 $i=$238;
 label=6;break;
 case 56: 
 $1=0;
 label=57;break;
 case 57: 
 var $241=$1;
 STACKTOP=sp;return $241;
  default: assert(0, "bad label: " + label);
 }
}
function _get_smpl($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $flags;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $11=$i;
 var $12=$mod;
 var $13=(($12+144)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11|0)<($14|0);
 if($15){label=5;break;}else{label=17;break;}
 case 5: 
 var $17=$4;
 var $18=_hio_read32b($17);
 $flags=$18;
 var $19=$4;
 var $20=_hio_read32b($19);
 var $21=$i;
 var $22=$mod;
 var $23=(($22+180)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+((($21)*(52))&-1))|0);
 var $26=(($25+32)|0);
 HEAP32[(($26)>>2)]=$20;
 var $27=$flags;
 var $28=$27&2;
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$i;
 var $32=$mod;
 var $33=(($32+180)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+((($31)*(52))&-1))|0);
 var $36=(($35+44)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$37|1;
 HEAP32[(($36)>>2)]=$38;
 label=7;break;
 case 7: 
 var $40=$flags;
 var $41=$40&4;
 var $42=($41|0)!=0;
 if($42){label=8;break;}else{label=9;break;}
 case 8: 
 var $44=$i;
 var $45=$mod;
 var $46=(($45+180)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+((($44)*(52))&-1))|0);
 var $49=(($48+32)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$50<<2;
 HEAP32[(($49)>>2)]=$51;
 var $52=$4;
 var $53=$i;
 var $54=$mod;
 var $55=(($54+180)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+((($53)*(52))&-1))|0);
 var $58=(($57+32)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=_hio_seek($52,$59,1);
 label=16;break;
 case 9: 
 var $62=$2;
 var $63=$4;
 var $64=$i;
 var $65=$mod;
 var $66=(($65+180)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+((($64)*(52))&-1))|0);
 var $69=_load_sample($62,$63,64,$68,0);
 var $70=($69|0)<0;
 if($70){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=18;break;
 case 11: 
 var $73=$i;
 var $74=$mod;
 var $75=(($74+180)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+((($73)*(52))&-1))|0);
 var $78=(($77+32)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){label=12;break;}else{label=13;break;}
 case 12: 
 label=16;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $86=$i;
 var $87=((($86)+(1))|0);
 $i=$87;
 label=4;break;
 case 17: 
 $1=0;
 label=18;break;
 case 18: 
 var $90=$1;
 STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }
}
function _get_venv($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $nenv;
 var $ins;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read16b($7);
 var $9=($8&65535);
 $nenv=$9;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $13=$i;
 var $14=$nenv;
 var $15=($13|0)<($14|0);
 if($15){label=5;break;}else{label=11;break;}
 case 5: 
 var $17=$3;
 var $18=_hio_read16b($17);
 var $19=($18&65535);
 var $20=((($19)-(1))|0);
 $ins=$20;
 var $21=$3;
 var $22=_hio_read8($21);
 var $23=($22&255);
 var $24=$23&7;
 var $25=$ins;
 var $26=$mod;
 var $27=(($26+176)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+((($25)*(764))&-1))|0);
 var $30=(($29+44)|0);
 var $31=(($30)|0);
 HEAP32[(($31)>>2)]=$24;
 var $32=$3;
 var $33=_hio_read8($32);
 var $34=($33&255);
 var $35=$ins;
 var $36=$mod;
 var $37=(($36+176)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+((($35)*(764))&-1))|0);
 var $40=(($39+44)|0);
 var $41=(($40+4)|0);
 HEAP32[(($41)>>2)]=$34;
 var $42=$3;
 var $43=_hio_read8($42);
 var $44=($43&255);
 var $45=$ins;
 var $46=$mod;
 var $47=(($46+176)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+((($45)*(764))&-1))|0);
 var $50=(($49+44)|0);
 var $51=(($50+12)|0);
 HEAP32[(($51)>>2)]=$44;
 var $52=$3;
 var $53=_hio_read8($52);
 var $54=($53&255);
 var $55=$ins;
 var $56=$mod;
 var $57=(($56+176)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+((($55)*(764))&-1))|0);
 var $60=(($59+44)|0);
 var $61=(($60+20)|0);
 HEAP32[(($61)>>2)]=$54;
 var $62=$3;
 var $63=_hio_read8($62);
 var $64=($63&255);
 var $65=$ins;
 var $66=$mod;
 var $67=(($66+176)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+((($65)*(764))&-1))|0);
 var $70=(($69+44)|0);
 var $71=(($70+24)|0);
 HEAP32[(($71)>>2)]=$64;
 var $72=$3;
 var $73=_hio_read8($72);
 $j=0;
 label=6;break;
 case 6: 
 var $75=$j;
 var $76=($75|0)<32;
 if($76){label=7;break;}else{label=9;break;}
 case 7: 
 var $78=$3;
 var $79=_hio_read16b($78);
 var $80=$j;
 var $81=($80<<1);
 var $82=(($81)|0);
 var $83=$ins;
 var $84=$mod;
 var $85=(($84+176)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+((($83)*(764))&-1))|0);
 var $88=(($87+44)|0);
 var $89=(($88+28)|0);
 var $90=(($89+($82<<1))|0);
 HEAP16[(($90)>>1)]=$79;
 var $91=$3;
 var $92=_hio_read16b($91);
 var $93=$j;
 var $94=($93<<1);
 var $95=((($94)+(1))|0);
 var $96=$ins;
 var $97=$mod;
 var $98=(($97+176)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+((($96)*(764))&-1))|0);
 var $101=(($100+44)|0);
 var $102=(($101+28)|0);
 var $103=(($102+($95<<1))|0);
 HEAP16[(($103)>>1)]=$92;
 label=8;break;
 case 8: 
 var $105=$j;
 var $106=((($105)+(1))|0);
 $j=$106;
 label=6;break;
 case 9: 
 label=10;break;
 case 10: 
 var $109=$i;
 var $110=((($109)+(1))|0);
 $i=$110;
 label=4;break;
 case 11: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _digi_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,20,$6);
 var $8=($7>>>0)<20;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,25152,19);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $16=$2;
 var $17=_hio_seek($16,156,1);
 var $18=$2;
 var $19=_hio_seek($18,384,1);
 var $20=$2;
 var $21=_hio_seek($20,64,1);
 var $22=$2;
 var $23=$3;
 _read_title($22,$23,32);
 $1=0;
 label=6;break;
 case 6: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _digi_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1648)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $dh=sp;
 var $digi_event=(sp)+(1576);
 var $chn_table=(sp)+(1584);
 var $w;
 var $i;
 var $j;
 var $k;
 var $c;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $event=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($dh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,20,1,$14);
 var $16=(($dh+20)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,4,1,$18);
 var $20=$3;
 var $21=_hio_read8($20);
 var $22=(($dh+24)|0);
 HEAP8[($22)]=$21;
 var $23=$3;
 var $24=_hio_read8($23);
 var $25=(($dh+25)|0);
 HEAP8[($25)]=$24;
 var $26=$3;
 var $27=_hio_read8($26);
 var $28=(($dh+26)|0);
 HEAP8[($28)]=$27;
 var $29=(($dh+27)|0);
 var $30=$29;
 var $31=$3;
 var $32=_hio_read($30,19,1,$31);
 var $33=$3;
 var $34=_hio_read8($33);
 var $35=(($dh+46)|0);
 HEAP8[($35)]=$34;
 var $36=$3;
 var $37=_hio_read8($36);
 var $38=(($dh+47)|0);
 HEAP8[($38)]=$37;
 var $39=(($dh+48)|0);
 var $40=$39;
 var $41=$3;
 var $42=_hio_read($40,128,1,$41);
 $i=0;
 label=4;break;
 case 4: 
 var $44=$i;
 var $45=($44|0)<31;
 if($45){label=5;break;}else{label=7;break;}
 case 5: 
 var $47=$3;
 var $48=_hio_read32b($47);
 var $49=$i;
 var $50=(($dh+176)|0);
 var $51=(($50+($49<<2))|0);
 HEAP32[(($51)>>2)]=$48;
 label=6;break;
 case 6: 
 var $53=$i;
 var $54=((($53)+(1))|0);
 $i=$54;
 label=4;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $57=$i;
 var $58=($57|0)<31;
 if($58){label=9;break;}else{label=11;break;}
 case 9: 
 var $60=$3;
 var $61=_hio_read32b($60);
 var $62=$i;
 var $63=(($dh+300)|0);
 var $64=(($63+($62<<2))|0);
 HEAP32[(($64)>>2)]=$61;
 label=10;break;
 case 10: 
 var $66=$i;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=8;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $70=$i;
 var $71=($70|0)<31;
 if($71){label=13;break;}else{label=15;break;}
 case 13: 
 var $73=$3;
 var $74=_hio_read32b($73);
 var $75=$i;
 var $76=(($dh+424)|0);
 var $77=(($76+($75<<2))|0);
 HEAP32[(($77)>>2)]=$74;
 label=14;break;
 case 14: 
 var $79=$i;
 var $80=((($79)+(1))|0);
 $i=$80;
 label=12;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $83=$i;
 var $84=($83|0)<31;
 if($84){label=17;break;}else{label=19;break;}
 case 17: 
 var $86=$3;
 var $87=_hio_read8($86);
 var $88=$i;
 var $89=(($dh+548)|0);
 var $90=(($89+$88)|0);
 HEAP8[($90)]=$87;
 label=18;break;
 case 18: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=16;break;
 case 19: 
 $i=0;
 label=20;break;
 case 20: 
 var $96=$i;
 var $97=($96|0)<31;
 if($97){label=21;break;}else{label=23;break;}
 case 21: 
 var $99=$3;
 var $100=_hio_read8s($99);
 var $101=$i;
 var $102=(($dh+579)|0);
 var $103=(($102+$101)|0);
 HEAP8[($103)]=$100;
 label=22;break;
 case 22: 
 var $105=$i;
 var $106=((($105)+(1))|0);
 $i=$106;
 label=20;break;
 case 23: 
 var $108=(($dh+610)|0);
 var $109=$108;
 var $110=$3;
 var $111=_hio_read($109,32,1,$110);
 $i=0;
 label=24;break;
 case 24: 
 var $113=$i;
 var $114=($113|0)<31;
 if($114){label=25;break;}else{label=27;break;}
 case 25: 
 var $116=$i;
 var $117=(($dh+642)|0);
 var $118=(($117+((($116)*(30))&-1))|0);
 var $119=$118;
 var $120=$3;
 var $121=_hio_read($119,30,1,$120);
 label=26;break;
 case 26: 
 var $123=$i;
 var $124=((($123)+(1))|0);
 $i=$124;
 label=24;break;
 case 27: 
 var $126=$mod;
 var $127=(($126+140)|0);
 HEAP32[(($127)>>2)]=31;
 var $128=$mod;
 var $129=(($128+140)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$mod;
 var $132=(($131+144)|0);
 HEAP32[(($132)>>2)]=$130;
 var $133=(($dh+46)|0);
 var $134=HEAP8[($133)];
 var $135=($134&255);
 var $136=((($135)+(1))|0);
 var $137=$mod;
 var $138=(($137+128)|0);
 HEAP32[(($138)>>2)]=$136;
 var $139=(($dh+25)|0);
 var $140=HEAP8[($139)];
 var $141=($140&255);
 var $142=$mod;
 var $143=(($142+136)|0);
 HEAP32[(($143)>>2)]=$141;
 var $144=$mod;
 var $145=(($144+128)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$mod;
 var $148=(($147+136)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(Math_imul($146,$149)|0);
 var $151=$mod;
 var $152=(($151+132)|0);
 HEAP32[(($152)>>2)]=$150;
 var $153=(($dh+47)|0);
 var $154=HEAP8[($153)];
 var $155=($154&255);
 var $156=((($155)+(1))|0);
 var $157=$mod;
 var $158=(($157+156)|0);
 HEAP32[(($158)>>2)]=$156;
 var $159=$2;
 var $160=(($159+1280)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=$161|8192;
 HEAP32[(($160)>>2)]=$162;
 var $163=$mod;
 var $164=(($163)|0);
 var $165=(($164)|0);
 var $166=(($dh+610)|0);
 var $167=(($166)|0);
 var $168=_copy_adjust($165,$167,32);
 var $169=$2;
 var $170=(($dh+20)|0);
 var $171=(($170)|0);
 _set_type($169,27200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$171,tempVarArgs)); STACKTOP=tempVarArgs;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 $i=0;
 label=34;break;
 case 34: 
 var $179=$i;
 var $180=$mod;
 var $181=(($180+156)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($179|0)<($182|0);
 if($183){label=35;break;}else{label=37;break;}
 case 35: 
 var $185=$i;
 var $186=(($dh+48)|0);
 var $187=(($186+$185)|0);
 var $188=HEAP8[($187)];
 var $189=$i;
 var $190=$mod;
 var $191=(($190+952)|0);
 var $192=(($191+$189)|0);
 HEAP8[($192)]=$188;
 label=36;break;
 case 36: 
 var $194=$i;
 var $195=((($194)+(1))|0);
 $i=$195;
 label=34;break;
 case 37: 
 var $197=$mod;
 var $198=_instrument_init($197);
 var $199=($198|0)<0;
 if($199){label=38;break;}else{label=39;break;}
 case 38: 
 $1=-1;
 label=91;break;
 case 39: 
 $i=0;
 label=40;break;
 case 40: 
 var $203=$i;
 var $204=$mod;
 var $205=(($204+140)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($203|0)<($206|0);
 if($207){label=41;break;}else{label=49;break;}
 case 41: 
 var $209=$mod;
 var $210=$i;
 var $211=_subinstrument_alloc($209,$210,1);
 var $212=($211|0)<0;
 if($212){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=91;break;
 case 43: 
 var $215=$i;
 var $216=(($dh+176)|0);
 var $217=(($216+($215<<2))|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$i;
 var $220=$mod;
 var $221=(($220+180)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($222+((($219)*(52))&-1))|0);
 var $224=(($223+32)|0);
 HEAP32[(($224)>>2)]=$218;
 var $225=$i;
 var $226=(($dh+300)|0);
 var $227=(($226+($225<<2))|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=$i;
 var $230=$mod;
 var $231=(($230+180)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+((($229)*(52))&-1))|0);
 var $234=(($233+36)|0);
 HEAP32[(($234)>>2)]=$228;
 var $235=$i;
 var $236=(($dh+300)|0);
 var $237=(($236+($235<<2))|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=$i;
 var $240=(($dh+424)|0);
 var $241=(($240+($239<<2))|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=((($238)+($242))|0);
 var $244=$i;
 var $245=$mod;
 var $246=(($245+180)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+((($244)*(52))&-1))|0);
 var $249=(($248+40)|0);
 HEAP32[(($249)>>2)]=$243;
 var $250=$i;
 var $251=$mod;
 var $252=(($251+180)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+((($250)*(52))&-1))|0);
 var $255=(($254+40)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=($256|0)>0;
 var $258=($257?2:0);
 var $259=$i;
 var $260=$mod;
 var $261=(($260+180)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262+((($259)*(52))&-1))|0);
 var $264=(($263+44)|0);
 HEAP32[(($264)>>2)]=$258;
 var $265=$i;
 var $266=(($dh+548)|0);
 var $267=(($266+$265)|0);
 var $268=HEAP8[($267)];
 var $269=($268&255);
 var $270=$i;
 var $271=$mod;
 var $272=(($271+176)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+((($270)*(764))&-1))|0);
 var $275=(($274+756)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($276)|0);
 var $278=(($277)|0);
 HEAP32[(($278)>>2)]=$269;
 var $279=$i;
 var $280=(($dh+579)|0);
 var $281=(($280+$279)|0);
 var $282=HEAP8[($281)];
 var $283=(($282<<24)>>24);
 var $284=$i;
 var $285=$mod;
 var $286=(($285+176)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+((($284)*(764))&-1))|0);
 var $289=(($288+756)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=(($290)|0);
 var $292=(($291+16)|0);
 HEAP32[(($292)>>2)]=$283;
 var $293=$i;
 var $294=$mod;
 var $295=(($294+176)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296+((($293)*(764))&-1))|0);
 var $298=(($297+756)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299)|0);
 var $301=(($300+8)|0);
 HEAP32[(($301)>>2)]=128;
 var $302=$i;
 var $303=$i;
 var $304=$mod;
 var $305=(($304+176)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=(($306+((($303)*(764))&-1))|0);
 var $308=(($307+756)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(($309)|0);
 var $311=(($310+40)|0);
 HEAP32[(($311)>>2)]=$302;
 var $312=$i;
 var $313=$mod;
 var $314=(($313+180)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=(($315+((($312)*(52))&-1))|0);
 var $317=(($316+32)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($318|0)>0;
 if($319){label=44;break;}else{label=45;break;}
 case 44: 
 var $321=$i;
 var $322=$mod;
 var $323=(($322+176)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($324+((($321)*(764))&-1))|0);
 var $326=(($325+36)|0);
 HEAP32[(($326)>>2)]=1;
 label=45;break;
 case 45: 
 var $328=$mod;
 var $329=$i;
 var $330=$i;
 var $331=(($dh+642)|0);
 var $332=(($331+((($330)*(30))&-1))|0);
 var $333=(($332)|0);
 var $334=_instrument_name($328,$329,$333,30);
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $338=$i;
 var $339=((($338)+(1))|0);
 $i=$339;
 label=40;break;
 case 49: 
 var $341=$mod;
 var $342=_pattern_init($341);
 var $343=($342|0)<0;
 if($343){label=50;break;}else{label=51;break;}
 case 50: 
 $1=-1;
 label=91;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 $i=0;
 label=54;break;
 case 54: 
 var $349=$i;
 var $350=$mod;
 var $351=(($350+128)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=($349|0)<($352|0);
 if($353){label=55;break;}else{label=82;break;}
 case 55: 
 var $355=$mod;
 var $356=$i;
 var $357=_pattern_tracks_alloc($355,$356,64);
 var $358=($357|0)<0;
 if($358){label=56;break;}else{label=57;break;}
 case 56: 
 $1=-1;
 label=91;break;
 case 57: 
 var $361=(($dh+26)|0);
 var $362=HEAP8[($361)];
 var $363=(($362<<24)>>24)!=0;
 if($363){label=58;break;}else{label=59;break;}
 case 58: 
 var $365=$3;
 var $366=_hio_read16b($365);
 var $367=($366&65535);
 var $368=((($367)-(64))|0);
 var $369=$368>>2;
 var $370=(($369)&65535);
 $w=$370;
 var $371=(($chn_table)|0);
 var $372=$3;
 var $373=_hio_read($371,1,64,$372);
 label=60;break;
 case 59: 
 var $375=$mod;
 var $376=(($375+136)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=($377<<6);
 var $379=(($378)&65535);
 $w=$379;
 var $380=$chn_table;
 _memset($380, -1, 64)|0;
 label=60;break;
 case 60: 
 $j=0;
 label=61;break;
 case 61: 
 var $383=$j;
 var $384=($383|0)<64;
 if($384){label=62;break;}else{label=76;break;}
 case 62: 
 $c=0;
 $k=128;
 label=63;break;
 case 63: 
 var $387=$c;
 var $388=$mod;
 var $389=(($388+136)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=($387|0)<($390|0);
 if($391){label=64;break;}else{label=74;break;}
 case 64: 
 var $393=$j;
 var $394=(($chn_table+$393)|0);
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=$k;
 var $398=$396&$397;
 var $399=($398|0)!=0;
 if($399){label=65;break;}else{label=72;break;}
 case 65: 
 var $401=(($digi_event)|0);
 var $402=$3;
 var $403=_hio_read($401,4,1,$402);
 var $404=$j;
 var $405=$c;
 var $406=$i;
 var $407=$2;
 var $408=(($407)|0);
 var $409=(($408+168)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($410+($406<<2))|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($412+4)|0);
 var $414=(($413+($405<<2))|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=$2;
 var $417=(($416)|0);
 var $418=(($417+172)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=(($419+($415<<2))|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=(($421+4)|0);
 var $423=(($422+($404<<3))|0);
 $event=$423;
 var $424=$event;
 var $425=(($digi_event)|0);
 _decode_protracker_event($424,$425);
 var $426=$event;
 var $427=(($426+3)|0);
 var $428=HEAP8[($427)];
 var $429=($428&255);
 if(($429|0)==8){ label=66;break;}else if(($429|0)==14){ label=67;break;}else{label=71;break;}
 case 66: 
 var $431=$event;
 var $432=(($431+4)|0);
 HEAP8[($432)]=0;
 var $433=$event;
 var $434=(($433+3)|0);
 HEAP8[($434)]=0;
 label=71;break;
 case 67: 
 var $436=$event;
 var $437=(($436+4)|0);
 var $438=HEAP8[($437)];
 var $439=($438&255);
 var $440=$439&240;
 var $441=$440>>4;
 switch(($441|0)){case 0:case 3:case 8:case 9:{ label=68;break;}case 4:{ label=69;break;}default:{label=70;break;}}break;
 case 68: 
 var $443=$event;
 var $444=(($443+4)|0);
 HEAP8[($444)]=0;
 var $445=$event;
 var $446=(($445+3)|0);
 HEAP8[($446)]=0;
 label=70;break;
 case 69: 
 var $448=$event;
 var $449=(($448+3)|0);
 HEAP8[($449)]=12;
 var $450=$event;
 var $451=(($450+4)|0);
 HEAP8[($451)]=0;
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 var $454=$w;
 var $455=((($454)-(1))&65535);
 $w=$455;
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 var $458=$c;
 var $459=((($458)+(1))|0);
 $c=$459;
 var $460=$k;
 var $461=$460>>1;
 $k=$461;
 label=63;break;
 case 74: 
 label=75;break;
 case 75: 
 var $464=$j;
 var $465=((($464)+(1))|0);
 $j=$465;
 label=61;break;
 case 76: 
 var $467=$w;
 var $468=(($467<<16)>>16)!=0;
 if($468){label=77;break;}else{label=80;break;}
 case 77: 
 label=78;break;
 case 78: 
 label=79;break;
 case 79: 
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 var $474=$i;
 var $475=((($474)+(1))|0);
 $i=$475;
 label=54;break;
 case 82: 
 label=83;break;
 case 83: 
 label=84;break;
 case 84: 
 $i=0;
 label=85;break;
 case 85: 
 var $480=$i;
 var $481=$mod;
 var $482=(($481+140)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($480|0)<($483|0);
 if($484){label=86;break;}else{label=90;break;}
 case 86: 
 var $486=$2;
 var $487=$3;
 var $488=$i;
 var $489=$mod;
 var $490=(($489+180)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=(($491+((($488)*(52))&-1))|0);
 var $493=_load_sample($486,$487,0,$492,0);
 var $494=($493|0)<0;
 if($494){label=87;break;}else{label=88;break;}
 case 87: 
 $1=-1;
 label=91;break;
 case 88: 
 label=89;break;
 case 89: 
 var $498=$i;
 var $499=((($498)+(1))|0);
 $i=$499;
 label=85;break;
 case 90: 
 $1=0;
 label=91;break;
 case 91: 
 var $502=$1;
 STACKTOP=sp;return $502;
  default: assert(0, "bad label: " + label);
 }
}
function _dmf_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1145326918;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=_hio_seek($10,9,1);
 var $12=$2;
 var $13=$3;
 _read_title($12,$13,30);
 $1=0;
 label=4;break;
 case 4: 
 var $15=$1;
 STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }
}
function _dmf_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $handle;
 var $date=sp;
 var $tracker_name=(sp)+(8);
 var $data=(sp)+(24);
 var $ret;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$3;
 var $15=_hio_read8($14);
 var $16=($15&255);
 var $17=(($data)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($tracker_name)|0);
 var $19=$3;
 var $20=_hio_read($18,8,1,$19);
 var $21=(($tracker_name+8)|0);
 HEAP8[($21)]=0;
 var $22=$mod;
 var $23=(($22+64)|0);
 var $24=(($23)|0);
 var $25=(($tracker_name)|0);
 var $26=(($data)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=_snprintf($24,64,27184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$25,HEAP32[(((tempVarArgs)+(8))>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 var $29=(($tracker_name+8)|0);
 HEAP8[($29)]=0;
 var $30=$mod;
 var $31=(($30)|0);
 var $32=(($31)|0);
 var $33=$3;
 var $34=_hio_read($32,30,1,$33);
 var $35=$3;
 var $36=_hio_seek($35,20,1);
 var $37=(($date)|0);
 var $38=$3;
 var $39=_hio_read($37,3,1,$38);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $48=_iff_new();
 $handle=$48;
 var $49=$handle;
 var $50=($49|0)==0;
 if($50){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=18;break;
 case 13: 
 var $53=$handle;
 var $54=_iff_register($53,25144,78);
 $ret=$54;
 var $55=$handle;
 var $56=_iff_register($55,23800,604);
 var $57=$ret;
 var $58=$57|$56;
 $ret=$58;
 var $59=$handle;
 var $60=_iff_register($59,23096,480);
 var $61=$ret;
 var $62=$61|$60;
 $ret=$62;
 var $63=$handle;
 var $64=_iff_register($63,22400,556);
 var $65=$ret;
 var $66=$65|$64;
 $ret=$66;
 var $67=$ret;
 var $68=($67|0)!=0;
 if($68){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=18;break;
 case 15: 
 var $71=$handle;
 _iff_set_quirk($71,1);
 var $72=$handle;
 var $73=$2;
 var $74=$3;
 var $75=$data;
 var $76=_iff_load($72,$73,$74,$75);
 var $77=($76|0)<0;
 if($77){label=16;break;}else{label=17;break;}
 case 16: 
 var $79=$handle;
 _iff_release($79);
 $1=-1;
 label=18;break;
 case 17: 
 var $81=$2;
 var $82=(($81+1268)|0);
 HEAP32[(($82)>>2)]=255;
 var $83=$handle;
 _iff_release($83);
 $1=0;
 label=18;break;
 case 18: 
 var $85=$1;
 STACKTOP=sp;return $85;
  default: assert(0, "bad label: " + label);
 }
}
function _get_sequ169($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read16l($7);
 var $9=$3;
 var $10=_hio_read16l($9);
 var $11=$2;
 var $12=((($11)-(4))|0);
 var $13=(((($12|0))/(2))&-1);
 var $14=$mod;
 var $15=(($14+156)|0);
 HEAP32[(($15)>>2)]=$13;
 var $16=$mod;
 var $17=(($16+156)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)>255;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 var $21=$mod;
 var $22=(($21+156)|0);
 HEAP32[(($22)>>2)]=255;
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $25=$i;
 var $26=$mod;
 var $27=(($26+156)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($25|0)<($28|0);
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 var $31=$3;
 var $32=_hio_read16l($31);
 var $33=(($32)&255);
 var $34=$i;
 var $35=$mod;
 var $36=(($35+952)|0);
 var $37=(($36+$34)|0);
 HEAP8[($37)]=$33;
 label=6;break;
 case 6: 
 var $39=$i;
 var $40=((($39)+(1))|0);
 $i=$40;
 label=4;break;
 case 7: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt170($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $j;
 var $r;
 var $chn;
 var $patsize;
 var $info;
 var $counter;
 var $data;
 var $track_counter=sp;
 var $event;
 var $b;
 var $fxt;
 var $fxp;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read16l($8);
 var $10=($9&65535);
 var $11=$mod;
 var $12=(($11+128)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$4;
 var $14=_hio_read8($13);
 var $15=($14&255);
 var $16=$mod;
 var $17=(($16+136)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$mod;
 var $19=(($18+136)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$mod;
 var $22=(($21+128)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(Math_imul($20,$23)|0);
 var $25=$mod;
 var $26=(($25+132)|0);
 HEAP32[(($26)>>2)]=$24;
 var $27=$mod;
 var $28=_pattern_init($27);
 var $29=($28|0)<0;
 if($29){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=52;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $35=$i;
 var $36=$mod;
 var $37=(($36+128)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($35|0)<($38|0);
 if($39){label=7;break;}else{label=51;break;}
 case 7: 
 var $41=$4;
 var $42=_hio_read8($41);
 var $43=($42&255);
 $chn=$43;
 var $44=$4;
 var $45=_hio_read8($44);
 var $46=$mod;
 var $47=$i;
 var $48=$4;
 var $49=_hio_read16l($48);
 var $50=($49&65535);
 var $51=_pattern_tracks_alloc($46,$47,$50);
 var $52=($51|0)<0;
 if($52){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=52;break;
 case 9: 
 var $55=$4;
 var $56=_hio_read32l($55);
 $patsize=$56;
 $j=0;
 label=10;break;
 case 10: 
 var $58=$j;
 var $59=$chn;
 var $60=($58|0)<($59|0);
 if($60){label=11;break;}else{label=13;break;}
 case 11: 
 var $62=$j;
 var $63=(($track_counter+($62<<2))|0);
 HEAP32[(($63)>>2)]=0;
 label=12;break;
 case 12: 
 var $65=$j;
 var $66=((($65)+(1))|0);
 $j=$66;
 label=10;break;
 case 13: 
 $r=0;
 $counter=0;
 label=14;break;
 case 14: 
 var $69=$r;
 var $70=$i;
 var $71=$mod;
 var $72=(($71+168)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+($70<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($69|0)<($77|0);
 if($78){label=15;break;}else{label=49;break;}
 case 15: 
 var $80=$counter;
 var $81=($80|0)==0;
 if($81){label=16;break;}else{label=23;break;}
 case 16: 
 var $83=$4;
 var $84=_hio_read8($83);
 var $85=($84&255);
 $info=$85;
 var $86=$info;
 var $87=$86&128;
 var $88=($87|0)!=0;
 if($88){label=17;break;}else{label=18;break;}
 case 17: 
 var $90=$4;
 var $91=_hio_read8($90);
 var $92=($91&255);
 var $95=$92;label=19;break;
 case 18: 
 var $95=0;label=19;break;
 case 19: 
 var $95;
 $counter=$95;
 var $96=$info;
 var $97=$96&63;
 var $98=($97|0)!=0;
 if($98){label=20;break;}else{label=21;break;}
 case 20: 
 var $100=$4;
 var $101=_hio_read8($100);
 var $102=($101&255);
 var $105=$102;label=22;break;
 case 21: 
 var $105=0;label=22;break;
 case 22: 
 var $105;
 $data=$105;
 label=24;break;
 case 23: 
 var $107=$counter;
 var $108=((($107)-(1))|0);
 $counter=$108;
 label=24;break;
 case 24: 
 $j=0;
 label=25;break;
 case 25: 
 var $111=$j;
 var $112=$chn;
 var $113=($111|0)<($112|0);
 if($113){label=26;break;}else{label=47;break;}
 case 26: 
 var $115=$r;
 var $116=$j;
 var $117=$i;
 var $118=$2;
 var $119=(($118)|0);
 var $120=(($119+168)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+($117<<2))|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+4)|0);
 var $125=(($124+($116<<2))|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=$2;
 var $128=(($127)|0);
 var $129=(($128+172)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+($126<<2))|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+4)|0);
 var $134=(($133+($115<<3))|0);
 $event=$134;
 var $135=$j;
 var $136=(($track_counter+($135<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($137|0)==0;
 if($138){label=27;break;}else{label=44;break;}
 case 27: 
 var $140=$4;
 var $141=_hio_read8($140);
 var $142=($141&255);
 $b=$142;
 var $143=$b;
 var $144=$143&128;
 var $145=($144|0)!=0;
 if($145){label=28;break;}else{label=29;break;}
 case 28: 
 var $147=$4;
 var $148=_hio_read8($147);
 var $149=($148&255);
 var $150=$j;
 var $151=(($track_counter+($150<<2))|0);
 HEAP32[(($151)>>2)]=$149;
 label=29;break;
 case 29: 
 var $153=$b;
 var $154=$153&64;
 var $155=($154|0)!=0;
 if($155){label=30;break;}else{label=31;break;}
 case 30: 
 var $157=$4;
 var $158=_hio_read8($157);
 var $159=$event;
 var $160=(($159+1)|0);
 HEAP8[($160)]=$158;
 label=31;break;
 case 31: 
 var $162=$b;
 var $163=$162&32;
 var $164=($163|0)!=0;
 if($164){label=32;break;}else{label=33;break;}
 case 32: 
 var $166=$4;
 var $167=_hio_read8($166);
 var $168=($167&255);
 var $169=((($168)+(24))|0);
 var $170=(($169)&255);
 var $171=$event;
 var $172=(($171)|0);
 HEAP8[($172)]=$170;
 label=33;break;
 case 33: 
 var $174=$b;
 var $175=$174&16;
 var $176=($175|0)!=0;
 if($176){label=34;break;}else{label=35;break;}
 case 34: 
 var $178=$4;
 var $179=_hio_read8($178);
 var $180=$event;
 var $181=(($180+2)|0);
 HEAP8[($181)]=$179;
 label=35;break;
 case 35: 
 var $183=$b;
 var $184=$183&8;
 var $185=($184|0)!=0;
 if($185){label=36;break;}else{label=37;break;}
 case 36: 
 var $187=$4;
 var $188=_hio_read8($187);
 var $189=($188&255);
 $fxt=$189;
 var $190=$4;
 var $191=_hio_read8($190);
 var $192=($191&255);
 $fxp=$192;
 label=37;break;
 case 37: 
 var $194=$b;
 var $195=$194&4;
 var $196=($195|0)!=0;
 if($196){label=38;break;}else{label=39;break;}
 case 38: 
 var $198=$4;
 var $199=_hio_read8($198);
 var $200=($199&255);
 $fxt=$200;
 var $201=$4;
 var $202=_hio_read8($201);
 var $203=($202&255);
 $fxp=$203;
 label=39;break;
 case 39: 
 var $205=$b;
 var $206=$205&2;
 var $207=($206|0)!=0;
 if($207){label=40;break;}else{label=43;break;}
 case 40: 
 var $209=$4;
 var $210=_hio_read8($209);
 var $211=($210&255);
 $fxt=$211;
 var $212=$4;
 var $213=_hio_read8($212);
 var $214=($213&255);
 $fxp=$214;
 var $215=$fxt;
 if(($215|0)==2){ label=41;break;}else{label=42;break;}
 case 41: 
 var $217=$event;
 var $218=(($217+3)|0);
 HEAP8[($218)]=-95;
 var $219=$fxp;
 var $220=(($219)&255);
 var $221=$event;
 var $222=(($221+4)|0);
 HEAP8[($222)]=$220;
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=45;break;
 case 44: 
 var $226=$j;
 var $227=(($track_counter+($226<<2))|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=((($228)-(1))|0);
 HEAP32[(($227)>>2)]=$229;
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 var $232=$j;
 var $233=((($232)+(1))|0);
 $j=$233;
 label=25;break;
 case 47: 
 label=48;break;
 case 48: 
 var $236=$r;
 var $237=((($236)+(1))|0);
 $r=$237;
 label=14;break;
 case 49: 
 label=50;break;
 case 50: 
 var $240=$i;
 var $241=((($240)+(1))|0);
 $i=$241;
 label=6;break;
 case 51: 
 $1=0;
 label=52;break;
 case 52: 
 var $244=$1;
 STACKTOP=sp;return $244;
  default: assert(0, "bad label: " + label);
 }
}
function _get_smpi($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $namelen;
 var $c3spd;
 var $flag;
 var $name=sp;
 var $x;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$4;
 var $11=_hio_read8($10);
 var $12=($11&255);
 var $13=$mod;
 var $14=(($13+144)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$mod;
 var $16=(($15+140)|0);
 HEAP32[(($16)>>2)]=$12;
 var $17=$mod;
 var $18=_instrument_init($17);
 var $19=($18|0)<0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=22;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $25=$i;
 var $26=$mod;
 var $27=(($26+140)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($25|0)<($28|0);
 if($29){label=7;break;}else{label=21;break;}
 case 7: 
 var $31=$mod;
 var $32=$i;
 var $33=_subinstrument_alloc($31,$32,1);
 var $34=($33|0)<0;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=22;break;
 case 9: 
 var $37=$4;
 var $38=_hio_read8($37);
 var $39=($38&255);
 $namelen=$39;
 var $40=$namelen;
 var $41=(($name)|0);
 var $42=$namelen;
 var $43=($42|0)>30;
 if($43){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=30;label=12;break;
 case 11: 
 var $46=$namelen;
 var $48=$46;label=12;break;
 case 12: 
 var $48;
 var $49=$4;
 var $50=_hio_read($41,1,$48,$49);
 var $51=((($40)-($50))|0);
 $x=$51;
 var $52=$mod;
 var $53=$i;
 var $54=(($name)|0);
 var $55=$namelen;
 var $56=_instrument_name($52,$53,$54,$55);
 var $57=$namelen;
 var $58=(($name+$57)|0);
 HEAP8[($58)]=0;
 label=13;break;
 case 13: 
 var $60=$x;
 var $61=((($60)-(1))|0);
 $x=$61;
 var $62=($60|0)!=0;
 if($62){label=14;break;}else{label=15;break;}
 case 14: 
 var $64=$4;
 var $65=_hio_read8($64);
 label=13;break;
 case 15: 
 var $67=$4;
 var $68=_hio_read32l($67);
 var $69=$i;
 var $70=$mod;
 var $71=(($70+180)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+((($69)*(52))&-1))|0);
 var $74=(($73+32)|0);
 HEAP32[(($74)>>2)]=$68;
 var $75=$4;
 var $76=_hio_read32l($75);
 var $77=$i;
 var $78=$mod;
 var $79=(($78+180)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+((($77)*(52))&-1))|0);
 var $82=(($81+36)|0);
 HEAP32[(($82)>>2)]=$76;
 var $83=$4;
 var $84=_hio_read32l($83);
 var $85=$i;
 var $86=$mod;
 var $87=(($86+180)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+((($85)*(52))&-1))|0);
 var $90=(($89+40)|0);
 HEAP32[(($90)>>2)]=$84;
 var $91=$i;
 var $92=$mod;
 var $93=(($92+180)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+((($91)*(52))&-1))|0);
 var $96=(($95+32)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($97|0)!=0;
 var $99=$98^1;
 var $100=$99^1;
 var $101=($100&1);
 var $102=$i;
 var $103=$mod;
 var $104=(($103+176)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+((($102)*(764))&-1))|0);
 var $107=(($106+36)|0);
 HEAP32[(($107)>>2)]=$101;
 var $108=$4;
 var $109=_hio_read16l($108);
 var $110=($109&65535);
 $c3spd=$110;
 var $111=$c3spd;
 var $112=$i;
 var $113=$mod;
 var $114=(($113+176)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+((($112)*(764))&-1))|0);
 var $117=(($116+756)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118)|0);
 var $120=(($119+12)|0);
 var $121=$i;
 var $122=$mod;
 var $123=(($122+176)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+((($121)*(764))&-1))|0);
 var $126=(($125+756)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127)|0);
 var $129=(($128+16)|0);
 _c2spd_to_note($111,$120,$129);
 var $130=$4;
 var $131=_hio_read8($130);
 var $132=($131&255);
 var $133=$i;
 var $134=$mod;
 var $135=(($134+176)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+((($133)*(764))&-1))|0);
 var $138=(($137+756)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139)|0);
 var $141=(($140)|0);
 HEAP32[(($141)>>2)]=$132;
 var $142=$i;
 var $143=$mod;
 var $144=(($143+176)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+((($142)*(764))&-1))|0);
 var $147=(($146+756)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148)|0);
 var $150=(($149+8)|0);
 HEAP32[(($150)>>2)]=128;
 var $151=$i;
 var $152=$i;
 var $153=$mod;
 var $154=(($153+176)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+((($152)*(764))&-1))|0);
 var $157=(($156+756)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158)|0);
 var $160=(($159+40)|0);
 HEAP32[(($160)>>2)]=$151;
 var $161=$4;
 var $162=_hio_read8($161);
 var $163=($162&255);
 $flag=$163;
 var $164=$flag;
 var $165=$164&1;
 var $166=($165|0)!=0;
 var $167=($166?2:0);
 var $168=$i;
 var $169=$mod;
 var $170=(($169+180)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+((($168)*(52))&-1))|0);
 var $173=(($172+44)|0);
 HEAP32[(($173)>>2)]=$167;
 var $174=$data;
 var $175=(($174)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($176|0)>=8;
 if($177){label=16;break;}else{label=17;break;}
 case 16: 
 var $179=$4;
 var $180=_hio_seek($179,8,1);
 label=17;break;
 case 17: 
 var $182=$4;
 var $183=_hio_read16l($182);
 var $184=$4;
 var $185=_hio_read32l($184);
 var $186=$flag;
 var $187=$186&12;
 var $188=$187>>2;
 var $189=(($188)&255);
 var $190=$i;
 var $191=$data;
 var $192=(($191+4)|0);
 var $193=(($192+$190)|0);
 HEAP8[($193)]=$189;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $197=$i;
 var $198=((($197)+(1))|0);
 $i=$198;
 label=6;break;
 case 21: 
 $1=0;
 label=22;break;
 case 22: 
 var $201=$1;
 STACKTOP=sp;return $201;
  default: assert(0, "bad label: " + label);
 }
}
function _get_smpd($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $sbuf=sp;
 var $ibuf=(sp)+(8);
 var $samplesize;
 var $datasize;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$sbuf;
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0;
 var $11=$ibuf;
 HEAP32[(($11)>>2)]=0; HEAP32[((($11)+(4))>>2)]=0;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $15=$i;
 var $16=$mod;
 var $17=(($16+144)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($15|0)<($18|0);
 if($19){label=5;break;}else{label=23;break;}
 case 5: 
 var $21=$i;
 var $22=$mod;
 var $23=(($22+180)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+((($21)*(52))&-1))|0);
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 $samplesize=$27;
 var $28=$4;
 var $29=_hio_read32l($28);
 $datasize=$29;
 var $30=$datasize;
 var $31=($30|0)==0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 label=22;break;
 case 7: 
 var $34=$i;
 var $35=$data;
 var $36=(($35+4)|0);
 var $37=(($36+$34)|0);
 var $38=HEAP8[($37)];
 var $39=($38&255);
 if(($39|0)==1){ label=11;break;}else if(($39|0)==0){ label=8;break;}else{label=20;break;}
 case 8: 
 var $41=$2;
 var $42=$4;
 var $43=$i;
 var $44=$mod;
 var $45=(($44+180)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+((($43)*(52))&-1))|0);
 var $48=_load_sample($41,$42,0,$47,0);
 var $49=($48|0)<0;
 if($49){label=9;break;}else{label=10;break;}
 case 9: 
 label=24;break;
 case 10: 
 label=21;break;
 case 11: 
 var $53=$datasize;
 var $54=_dynamic_buffer_alloc($ibuf,$53);
 var $55=($54|0)<0;
 if($55){label=12;break;}else{label=13;break;}
 case 12: 
 label=24;break;
 case 13: 
 var $58=(($ibuf+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$datasize;
 var $61=$4;
 var $62=_hio_read($59,1,$60,$61);
 var $63=$datasize;
 var $64=($62|0)!=($63|0);
 if($64){label=14;break;}else{label=15;break;}
 case 14: 
 label=24;break;
 case 15: 
 var $67=$samplesize;
 var $68=_dynamic_buffer_alloc($sbuf,$67);
 var $69=($68|0)<0;
 if($69){label=16;break;}else{label=17;break;}
 case 16: 
 label=24;break;
 case 17: 
 var $72=(($sbuf+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($ibuf+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($ibuf+4)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=$datasize;
 var $79=(($77+$78)|0);
 var $80=$samplesize;
 var $81=_unpack($73,$75,$79,$80);
 var $82=$2;
 var $83=$i;
 var $84=$mod;
 var $85=(($84+180)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+((($83)*(52))&-1))|0);
 var $88=(($sbuf+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=_load_sample($82,0,16,$87,$89);
 var $91=($90|0)<0;
 if($91){label=18;break;}else{label=19;break;}
 case 18: 
 label=24;break;
 case 19: 
 label=21;break;
 case 20: 
 var $95=$4;
 var $96=$datasize;
 var $97=_hio_seek($95,$96,1);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $100=$i;
 var $101=((($100)+(1))|0);
 $i=$101;
 label=4;break;
 case 23: 
 _dynamic_buffer_free($ibuf);
 _dynamic_buffer_free($sbuf);
 $1=0;
 label=25;break;
 case 24: 
 _dynamic_buffer_free($ibuf);
 _dynamic_buffer_free($sbuf);
 $1=-1;
 label=25;break;
 case 25: 
 var $105=$1;
 STACKTOP=sp;return $105;
  default: assert(0, "bad label: " + label);
 }
}
function _dynamic_buffer_alloc($buf,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $data;
 $2=$buf;
 $3=$size;
 var $4=$2;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=($6>>>0)>=($7>>>0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 var $11=$2;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $16=$3;
 var $17=_malloc($16);
 $data=$17;
 label=6;break;
 case 5: 
 var $19=$2;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$3;
 var $23=_realloc($21,$22);
 $data=$23;
 label=6;break;
 case 6: 
 var $25=$data;
 var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=$data;
 var $29=$2;
 var $30=(($29+4)|0);
 HEAP32[(($30)>>2)]=$28;
 var $31=$3;
 var $32=$2;
 var $33=(($32)|0);
 HEAP32[(($33)>>2)]=$31;
 $1=0;
 label=9;break;
 case 8: 
 $1=-1;
 label=9;break;
 case 9: 
 var $36=$1;
 STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _unpack($psample,$ibuf,$ibufmax,$maxlen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1560)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $tree=sp;
 var $i;
 var $actnode;
 var $value;
 var $sign;
 var $delta;
 $1=$psample;
 $2=$ibuf;
 $3=$ibufmax;
 $4=$maxlen;
 $delta=0;
 var $5=$tree;
 _memset($5, 0, 1560)|0;
 var $6=$2;
 var $7=(($tree)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=$3;
 var $9=(($tree+4)|0);
 HEAP32[(($9)>>2)]=$8;
 _new_node($tree);
 $value=0;
 $i=0;
 label=2;break;
 case 2: 
 var $11=$i;
 var $12=$4;
 var $13=($11>>>0)<($12>>>0);
 if($13){label=3;break;}else{label=23;break;}
 case 3: 
 $actnode=0;
 var $15=_read_bits($tree,1);
 $sign=$15;
 label=4;break;
 case 4: 
 var $17=_read_bits($tree,1);
 var $18=(($17<<24)>>24)!=0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$actnode;
 var $21=(($tree+24)|0);
 var $22=(($21+((($20)*(6))&-1))|0);
 var $23=(($22+2)|0);
 var $24=HEAP16[(($23)>>1)];
 var $25=(($24<<16)>>16);
 $actnode=$25;
 label=7;break;
 case 6: 
 var $27=$actnode;
 var $28=(($tree+24)|0);
 var $29=(($28+((($27)*(6))&-1))|0);
 var $30=(($29)|0);
 var $31=HEAP16[(($30)>>1)];
 var $32=(($31<<16)>>16);
 $actnode=$32;
 label=7;break;
 case 7: 
 var $34=$actnode;
 var $35=($34|0)>255;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 label=16;break;
 case 9: 
 var $38=$actnode;
 var $39=(($tree+24)|0);
 var $40=(($39+((($38)*(6))&-1))|0);
 var $41=(($40+4)|0);
 var $42=HEAP8[($41)];
 $delta=$42;
 var $43=(($tree)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($tree+4)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($44>>>0)>=($46>>>0);
 if($47){label=10;break;}else{label=12;break;}
 case 10: 
 var $49=(($tree+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)!=0;
 if($51){label=12;break;}else{label=11;break;}
 case 11: 
 label=16;break;
 case 12: 
 label=13;break;
 case 13: 
 var $55=$actnode;
 var $56=(($tree+24)|0);
 var $57=(($56+((($55)*(6))&-1))|0);
 var $58=(($57)|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=(($59<<16)>>16);
 var $61=($60|0)>=0;
 if($61){label=14;break;}else{var $71=0;label=15;break;}
 case 14: 
 var $63=$actnode;
 var $64=(($tree+24)|0);
 var $65=(($64+((($63)*(6))&-1))|0);
 var $66=(($65+2)|0);
 var $67=HEAP16[(($66)>>1)];
 var $68=(($67<<16)>>16);
 var $69=($68|0)>=0;
 var $71=$69;label=15;break;
 case 15: 
 var $71;
 if($71){label=4;break;}else{label=16;break;}
 case 16: 
 var $73=$sign;
 var $74=(($73<<24)>>24)!=0;
 if($74){label=17;break;}else{label=18;break;}
 case 17: 
 var $76=$delta;
 var $77=($76&255);
 var $78=$77^255;
 var $79=(($78)&255);
 $delta=$79;
 label=18;break;
 case 18: 
 var $81=$delta;
 var $82=($81&255);
 var $83=$value;
 var $84=($83&255);
 var $85=((($84)+($82))|0);
 var $86=(($85)&255);
 $value=$86;
 var $87=$i;
 var $88=($87|0)!=0;
 if($88){label=19;break;}else{label=20;break;}
 case 19: 
 var $90=$value;
 var $91=($90&255);
 var $94=$91;label=21;break;
 case 20: 
 var $94=0;label=21;break;
 case 21: 
 var $94;
 var $95=(($94)&255);
 var $96=$i;
 var $97=$1;
 var $98=(($97+$96)|0);
 HEAP8[($98)]=$95;
 label=22;break;
 case 22: 
 var $100=$i;
 var $101=((($100)+(1))|0);
 $i=$101;
 label=2;break;
 case 23: 
 var $103=(($tree)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=$2;
 var $106=$104;
 var $107=$105;
 var $108=((($106)-($107))|0);
 STACKTOP=sp;return $108;
  default: assert(0, "bad label: " + label);
 }
}
function _dynamic_buffer_free($buf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$buf;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 _free($4);
 STACKTOP=sp;return;
}
function _new_node($tree){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $isleft;
 var $isright;
 var $actnode;
 $1=$tree;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 $actnode=$4;
 var $5=$actnode;
 var $6=($5|0)>255;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 label=11;break;
 case 3: 
 var $9=$1;
 var $10=_read_bits($9,7);
 var $11=$actnode;
 var $12=$1;
 var $13=(($12+24)|0);
 var $14=(($13+((($11)*(6))&-1))|0);
 var $15=(($14+4)|0);
 HEAP8[($15)]=$10;
 var $16=$1;
 var $17=_read_bits($16,1);
 $isleft=$17;
 var $18=$1;
 var $19=_read_bits($18,1);
 $isright=$19;
 var $20=$1;
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 $actnode=$22;
 var $23=$actnode;
 var $24=($23|0)>255;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 label=11;break;
 case 5: 
 var $27=$1;
 var $28=(($27+20)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)+(1))|0);
 HEAP32[(($28)>>2)]=$30;
 var $31=$1;
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$1;
 var $35=(($34+16)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=$isleft;
 var $37=(($36<<24)>>24)!=0;
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 var $39=$1;
 var $40=(($39+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41)&65535);
 var $43=$actnode;
 var $44=$1;
 var $45=(($44+24)|0);
 var $46=(($45+((($43)*(6))&-1))|0);
 var $47=(($46)|0);
 HEAP16[(($47)>>1)]=$42;
 var $48=$1;
 _new_node($48);
 label=8;break;
 case 7: 
 var $50=$actnode;
 var $51=$1;
 var $52=(($51+24)|0);
 var $53=(($52+((($50)*(6))&-1))|0);
 var $54=(($53)|0);
 HEAP16[(($54)>>1)]=-1;
 label=8;break;
 case 8: 
 var $56=$1;
 var $57=(($56+20)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$1;
 var $60=(($59+16)|0);
 HEAP32[(($60)>>2)]=$58;
 var $61=$isright;
 var $62=(($61<<24)>>24)!=0;
 if($62){label=9;break;}else{label=10;break;}
 case 9: 
 var $64=$1;
 var $65=(($64+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66)&65535);
 var $68=$actnode;
 var $69=$1;
 var $70=(($69+24)|0);
 var $71=(($70+((($68)*(6))&-1))|0);
 var $72=(($71+2)|0);
 HEAP16[(($72)>>1)]=$67;
 var $73=$1;
 _new_node($73);
 label=11;break;
 case 10: 
 var $75=$actnode;
 var $76=$1;
 var $77=(($76+24)|0);
 var $78=(($77+((($75)*(6))&-1))|0);
 var $79=(($78+2)|0);
 HEAP16[(($79)>>1)]=-1;
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _read_bits($tree,$nbits){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $x;
 var $bitv;
 $1=$tree;
 $2=$nbits;
 $x=0;
 $bitv=1;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=((($4)-(1))|0);
 $2=$5;
 var $6=($4|0)!=0;
 if($6){label=3;break;}else{label=12;break;}
 case 3: 
 var $8=$1;
 var $9=(($8+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)!=0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$1;
 var $14=(($13+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=((($15)-(1))|0);
 HEAP32[(($14)>>2)]=$16;
 label=9;break;
 case 5: 
 var $18=$1;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$1;
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($20>>>0)<($23>>>0);
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$1;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+1)|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=HEAP8[($28)];
 var $31=($30&255);
 var $34=$31;label=8;break;
 case 7: 
 var $34=0;label=8;break;
 case 8: 
 var $34;
 var $35=$1;
 var $36=(($35+8)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$1;
 var $38=(($37+12)|0);
 HEAP32[(($38)>>2)]=7;
 label=9;break;
 case 9: 
 var $40=$1;
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42&1;
 var $44=($43|0)!=0;
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=$bitv;
 var $47=($46&255);
 var $48=$x;
 var $49=($48&255);
 var $50=$49|$47;
 var $51=(($50)&255);
 $x=$51;
 label=11;break;
 case 11: 
 var $53=$bitv;
 var $54=($53&255);
 var $55=$54<<1;
 var $56=(($55)&255);
 $bitv=$56;
 var $57=$1;
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$59>>>1;
 HEAP32[(($58)>>2)]=$60;
 label=2;break;
 case 12: 
 var $62=$x;
 STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _dt_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1143886894;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read32b($10);
 var $12=$2;
 var $13=_hio_read16b($12);
 var $14=$2;
 var $15=_hio_read16b($14);
 var $16=$2;
 var $17=_hio_read16b($16);
 var $18=$2;
 var $19=_hio_read16b($18);
 var $20=$2;
 var $21=_hio_read16b($20);
 var $22=$2;
 var $23=_hio_read32b($22);
 var $24=$2;
 var $25=$3;
 _read_title($24,$25,32);
 $1=0;
 label=4;break;
 case 4: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _dt_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $handle;
 var $data=sp;
 var $ret;
 var $i;
 $2=$m;
 $3=$f;
 $4=$start;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=$4;
 var $8=_hio_seek($6,$7,0);
 label=3;break;
 case 3: 
 var $10=(($data+4)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($data)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=_iff_new();
 $handle=$12;
 var $13=$handle;
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=16;break;
 case 5: 
 var $17=$handle;
 var $18=_iff_register($17,27168,182);
 $ret=$18;
 var $19=$handle;
 var $20=_iff_register($19,25136,406);
 var $21=$ret;
 var $22=$21|$20;
 $ret=$22;
 var $23=$handle;
 var $24=_iff_register($23,23792,306);
 var $25=$ret;
 var $26=$25|$24;
 $ret=$26;
 var $27=$handle;
 var $28=_iff_register($27,23088,40);
 var $29=$ret;
 var $30=$29|$28;
 $ret=$30;
 var $31=$handle;
 var $32=_iff_register($31,22392,498);
 var $33=$ret;
 var $34=$33|$32;
 $ret=$34;
 var $35=$handle;
 var $36=_iff_register($35,21680,264);
 var $37=$ret;
 var $38=$37|$36;
 $ret=$38;
 var $39=$ret;
 var $40=($39|0)!=0;
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=16;break;
 case 7: 
 var $43=$handle;
 var $44=$2;
 var $45=$3;
 var $46=$data;
 var $47=_iff_load($43,$44,$45,$46);
 $ret=$47;
 var $48=$handle;
 _iff_release($48);
 var $49=$ret;
 var $50=($49|0)<0;
 if($50){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=16;break;
 case 9: 
 var $53=(($data+12)|0);
 var $54=HEAP32[(($53)>>2)];
 $i=$54;
 label=10;break;
 case 10: 
 var $56=$i;
 var $57=$2;
 var $58=(($57)|0);
 var $59=(($58+128)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($56|0)<($60|0);
 if($61){label=11;break;}else{label=15;break;}
 case 11: 
 var $63=$2;
 var $64=(($63)|0);
 var $65=$i;
 var $66=_pattern_tracks_alloc($64,$65,64);
 var $67=($66|0)<0;
 if($67){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=16;break;
 case 13: 
 label=14;break;
 case 14: 
 var $71=$i;
 var $72=((($71)+(1))|0);
 $i=$72;
 label=10;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $75=$1;
 STACKTOP=sp;return $75;
  default: assert(0, "bad label: " + label);
 }
}
function _get_d_t_($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $b;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read16b($7);
 var $9=$3;
 var $10=_hio_read16b($9);
 var $11=$3;
 var $12=_hio_read16b($11);
 var $13=$3;
 var $14=_hio_read16b($13);
 var $15=($14&65535);
 var $16=$mod;
 var $17=(($16+148)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$3;
 var $19=_hio_read16b($18);
 var $20=($19&65535);
 $b=$20;
 var $21=($20|0)>0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$b;
 var $24=$mod;
 var $25=(($24+152)|0);
 HEAP32[(($25)>>2)]=$23;
 label=3;break;
 case 3: 
 var $27=$3;
 var $28=_hio_read32b($27);
 var $29=$mod;
 var $30=(($29)|0);
 var $31=(($30)|0);
 var $32=$3;
 var $33=_hio_read($31,32,1,$32);
 var $34=$1;
 _set_type($34,21224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_s_q_($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $maxpat;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read16b($7);
 var $9=($8&65535);
 var $10=$mod;
 var $11=(($10+156)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$3;
 var $13=_hio_read16b($12);
 var $14=($13&65535);
 var $15=$mod;
 var $16=(($15+160)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$3;
 var $18=_hio_read32b($17);
 $i=0;
 $maxpat=0;
 label=2;break;
 case 2: 
 var $20=$i;
 var $21=($20|0)<128;
 if($21){label=3;break;}else{label=7;break;}
 case 3: 
 var $23=$3;
 var $24=_hio_read8($23);
 var $25=$i;
 var $26=$mod;
 var $27=(($26+952)|0);
 var $28=(($27+$25)|0);
 HEAP8[($28)]=$24;
 var $29=$i;
 var $30=$mod;
 var $31=(($30+952)|0);
 var $32=(($31+$29)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=$maxpat;
 var $36=($34|0)>($35|0);
 if($36){label=4;break;}else{label=5;break;}
 case 4: 
 var $38=$i;
 var $39=$mod;
 var $40=(($39+952)|0);
 var $41=(($40+$38)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 $maxpat=$43;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $46=$i;
 var $47=((($46)+(1))|0);
 $i=$47;
 label=2;break;
 case 7: 
 var $49=$maxpat;
 var $50=((($49)+(1))|0);
 var $51=$mod;
 var $52=(($51+128)|0);
 HEAP32[(($52)>>2)]=$50;
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt182($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $data;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$4;
 var $8=$7;
 $data=$8;
 var $9=$3;
 var $10=_hio_read16b($9);
 var $11=($10&65535);
 var $12=$mod;
 var $13=(($12+136)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$3;
 var $15=_hio_read16b($14);
 var $16=($15&65535);
 var $17=$data;
 var $18=(($17+8)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$mod;
 var $20=(($19+136)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$mod;
 var $23=(($22+128)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(Math_imul($21,$24)|0);
 var $26=$mod;
 var $27=(($26+132)|0);
 HEAP32[(($27)>>2)]=$25;
 STACKTOP=sp;return 0;
}
function _get_inst183($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $c2spd;
 var $name=sp;
 var $fine;
 var $replen;
 var $flag;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read16b($8);
 var $10=($9&65535);
 var $11=$mod;
 var $12=(($11+144)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$mod;
 var $14=(($13+140)|0);
 HEAP32[(($14)>>2)]=$10;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $17=$mod;
 var $18=_instrument_init($17);
 var $19=($18|0)<0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=16;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $23=$i;
 var $24=$mod;
 var $25=(($24+140)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($23|0)<($26|0);
 if($27){label=7;break;}else{label=15;break;}
 case 7: 
 var $29=$mod;
 var $30=$i;
 var $31=_subinstrument_alloc($29,$30,1);
 var $32=($31|0)<0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=16;break;
 case 9: 
 var $35=$4;
 var $36=_hio_read32b($35);
 var $37=$4;
 var $38=_hio_read32b($37);
 var $39=$i;
 var $40=$mod;
 var $41=(($40+180)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+((($39)*(52))&-1))|0);
 var $44=(($43+32)|0);
 HEAP32[(($44)>>2)]=$38;
 var $45=$i;
 var $46=$mod;
 var $47=(($46+180)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+((($45)*(52))&-1))|0);
 var $50=(($49+32)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)!=0;
 var $53=$52^1;
 var $54=$53^1;
 var $55=($54&1);
 var $56=$i;
 var $57=$mod;
 var $58=(($57+176)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+((($56)*(764))&-1))|0);
 var $61=(($60+36)|0);
 HEAP32[(($61)>>2)]=$55;
 var $62=$4;
 var $63=_hio_read8s($62);
 var $64=(($63<<24)>>24);
 $fine=$64;
 var $65=$4;
 var $66=_hio_read8($65);
 var $67=($66&255);
 var $68=$i;
 var $69=$mod;
 var $70=(($69+176)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+((($68)*(764))&-1))|0);
 var $73=(($72+756)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74)|0);
 var $76=(($75)|0);
 HEAP32[(($76)>>2)]=$67;
 var $77=$i;
 var $78=$mod;
 var $79=(($78+176)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+((($77)*(764))&-1))|0);
 var $82=(($81+756)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83)|0);
 var $85=(($84+8)|0);
 HEAP32[(($85)>>2)]=128;
 var $86=$4;
 var $87=_hio_read32b($86);
 var $88=$i;
 var $89=$mod;
 var $90=(($89+180)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+((($88)*(52))&-1))|0);
 var $93=(($92+36)|0);
 HEAP32[(($93)>>2)]=$87;
 var $94=$4;
 var $95=_hio_read32b($94);
 $replen=$95;
 var $96=$i;
 var $97=$mod;
 var $98=(($97+180)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+((($96)*(52))&-1))|0);
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$replen;
 var $104=((($102)+($103))|0);
 var $105=((($104)-(1))|0);
 var $106=$i;
 var $107=$mod;
 var $108=(($107+180)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+((($106)*(52))&-1))|0);
 var $111=(($110+40)|0);
 HEAP32[(($111)>>2)]=$105;
 var $112=$replen;
 var $113=($112|0)>2;
 var $114=($113?2:0);
 var $115=$i;
 var $116=$mod;
 var $117=(($116+180)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+((($115)*(52))&-1))|0);
 var $120=(($119+44)|0);
 HEAP32[(($120)>>2)]=$114;
 var $121=(($name)|0);
 var $122=$4;
 var $123=_hio_read($121,22,1,$122);
 var $124=$mod;
 var $125=$i;
 var $126=(($name)|0);
 var $127=_instrument_name($124,$125,$126,22);
 var $128=$4;
 var $129=_hio_read16b($128);
 var $130=($129&65535);
 $flag=$130;
 var $131=$flag;
 var $132=$131&255;
 var $133=($132|0)>8;
 if($133){label=10;break;}else{label=11;break;}
 case 10: 
 var $135=$i;
 var $136=$mod;
 var $137=(($136+180)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+((($135)*(52))&-1))|0);
 var $140=(($139+44)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=$141|1;
 HEAP32[(($140)>>2)]=$142;
 var $143=$i;
 var $144=$mod;
 var $145=(($144+180)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+((($143)*(52))&-1))|0);
 var $148=(($147+32)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$149>>1;
 HEAP32[(($148)>>2)]=$150;
 var $151=$i;
 var $152=$mod;
 var $153=(($152+180)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+((($151)*(52))&-1))|0);
 var $156=(($155+36)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$157>>1;
 HEAP32[(($156)>>2)]=$158;
 var $159=$i;
 var $160=$mod;
 var $161=(($160+180)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+((($159)*(52))&-1))|0);
 var $164=(($163+40)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$165>>1;
 HEAP32[(($164)>>2)]=$166;
 label=11;break;
 case 11: 
 var $168=$4;
 var $169=_hio_read32b($168);
 var $170=$4;
 var $171=_hio_read32b($170);
 $c2spd=$171;
 var $172=$c2spd;
 var $173=$i;
 var $174=$mod;
 var $175=(($174+176)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+((($173)*(764))&-1))|0);
 var $178=(($177+756)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179)|0);
 var $181=(($180+12)|0);
 var $182=$i;
 var $183=$mod;
 var $184=(($183+176)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+((($182)*(764))&-1))|0);
 var $187=(($186+756)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188)|0);
 var $190=(($189+16)|0);
 _c2spd_to_note($172,$181,$190);
 var $191=$fine;
 var $192=$i;
 var $193=$mod;
 var $194=(($193+176)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+((($192)*(764))&-1))|0);
 var $197=(($196+756)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198)|0);
 var $200=(($199+16)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=((($201)+($191))|0);
 HEAP32[(($200)>>2)]=$202;
 var $203=$i;
 var $204=$i;
 var $205=$mod;
 var $206=(($205+176)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+((($204)*(764))&-1))|0);
 var $209=(($208+756)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210)|0);
 var $212=(($211+40)|0);
 HEAP32[(($212)>>2)]=$203;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $216=$i;
 var $217=((($216)+(1))|0);
 $i=$217;
 label=6;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $220=$1;
 STACKTOP=sp;return $220;
  default: assert(0, "bad label: " + label);
 }
}
function _get_dapt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $pat;
 var $i;
 var $j;
 var $k;
 var $event;
 var $rows;
 var $a;
 var $b;
 var $c;
 var $d;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$data;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 if($13){label=7;break;}else{label=2;break;}
 case 2: 
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $17=$data;
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=$data;
 var $20=(($19+12)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=$mod;
 var $22=_pattern_init($21);
 var $23=($22|0)<0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=24;break;
 case 6: 
 label=7;break;
 case 7: 
 var $27=$4;
 var $28=_hio_read32b($27);
 var $29=$4;
 var $30=_hio_read16b($29);
 var $31=($30&65535);
 $pat=$31;
 $i=$31;
 var $32=$4;
 var $33=_hio_read16b($32);
 var $34=($33&65535);
 $rows=$34;
 var $35=$data;
 var $36=(($35+12)|0);
 var $37=HEAP32[(($36)>>2)];
 $i=$37;
 label=8;break;
 case 8: 
 var $39=$i;
 var $40=$pat;
 var $41=($39|0)<=($40|0);
 if($41){label=9;break;}else{label=13;break;}
 case 9: 
 var $43=$mod;
 var $44=$i;
 var $45=$rows;
 var $46=_pattern_tracks_alloc($43,$44,$45);
 var $47=($46|0)<0;
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=24;break;
 case 11: 
 label=12;break;
 case 12: 
 var $51=$i;
 var $52=((($51)+(1))|0);
 $i=$52;
 label=8;break;
 case 13: 
 var $54=$pat;
 var $55=((($54)+(1))|0);
 var $56=$data;
 var $57=(($56+12)|0);
 HEAP32[(($57)>>2)]=$55;
 $j=0;
 label=14;break;
 case 14: 
 var $59=$j;
 var $60=$rows;
 var $61=($59|0)<($60|0);
 if($61){label=15;break;}else{label=23;break;}
 case 15: 
 $k=0;
 label=16;break;
 case 16: 
 var $64=$k;
 var $65=$mod;
 var $66=(($65+136)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($64|0)<($67|0);
 if($68){label=17;break;}else{label=21;break;}
 case 17: 
 var $70=$j;
 var $71=$k;
 var $72=$pat;
 var $73=$2;
 var $74=(($73)|0);
 var $75=(($74+168)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+($72<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+4)|0);
 var $80=(($79+($71<<2))|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$2;
 var $83=(($82)|0);
 var $84=(($83+172)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+($81<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+4)|0);
 var $89=(($88+($70<<3))|0);
 $event=$89;
 var $90=$4;
 var $91=_hio_read8($90);
 $a=$91;
 var $92=$4;
 var $93=_hio_read8($92);
 $b=$93;
 var $94=$4;
 var $95=_hio_read8($94);
 $c=$95;
 var $96=$4;
 var $97=_hio_read8($96);
 $d=$97;
 var $98=$a;
 var $99=(($98<<24)>>24)!=0;
 if($99){label=18;break;}else{label=19;break;}
 case 18: 
 var $101=$a;
 var $102=((($101)-(1))&255);
 $a=$102;
 var $103=$a;
 var $104=($103&255);
 var $105=$104>>4;
 var $106=((($105)*(12))&-1);
 var $107=$a;
 var $108=($107&255);
 var $109=$108&15;
 var $110=((($106)+($109))|0);
 var $111=((($110)+(12))|0);
 var $112=(($111)&255);
 var $113=$event;
 var $114=(($113)|0);
 HEAP8[($114)]=$112;
 label=19;break;
 case 19: 
 var $116=$b;
 var $117=($116&255);
 var $118=$117&252;
 var $119=$118>>2;
 var $120=(($119)&255);
 var $121=$event;
 var $122=(($121+2)|0);
 HEAP8[($122)]=$120;
 var $123=$b;
 var $124=($123&255);
 var $125=$124&3;
 var $126=$125<<4;
 var $127=$c;
 var $128=($127&255);
 var $129=$128>>4;
 var $130=((($126)+($129))|0);
 var $131=(($130)&255);
 var $132=$event;
 var $133=(($132+1)|0);
 HEAP8[($133)]=$131;
 var $134=$c;
 var $135=($134&255);
 var $136=$135&15;
 var $137=(($136)&255);
 var $138=$event;
 var $139=(($138+3)|0);
 HEAP8[($139)]=$137;
 var $140=$d;
 var $141=$event;
 var $142=(($141+4)|0);
 HEAP8[($142)]=$140;
 label=20;break;
 case 20: 
 var $144=$k;
 var $145=((($144)+(1))|0);
 $k=$145;
 label=16;break;
 case 21: 
 label=22;break;
 case 22: 
 var $148=$j;
 var $149=((($148)+(1))|0);
 $j=$149;
 label=14;break;
 case 23: 
 $1=0;
 label=24;break;
 case 24: 
 var $152=$1;
 STACKTOP=sp;return $152;
  default: assert(0, "bad label: " + label);
 }
}
function _get_dait($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $ret;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$data;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 if($13){label=5;break;}else{label=2;break;}
 case 2: 
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $17=$data;
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=$data;
 var $20=(($19+16)|0);
 HEAP32[(($20)>>2)]=0;
 label=5;break;
 case 5: 
 var $22=$3;
 var $23=($22|0)>2;
 if($23){label=6;break;}else{label=9;break;}
 case 6: 
 var $25=$2;
 var $26=$4;
 var $27=$data;
 var $28=(($27+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$mod;
 var $31=(($30+176)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+((($29)*(764))&-1))|0);
 var $34=(($33+756)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35)|0);
 var $37=(($36+40)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$mod;
 var $40=(($39+180)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+((($38)*(52))&-1))|0);
 var $43=_load_sample($25,$26,64,$42,0);
 $ret=$43;
 var $44=$ret;
 var $45=($44|0)<0;
 if($45){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=10;break;
 case 8: 
 label=9;break;
 case 9: 
 var $49=$data;
 var $50=(($49+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 $1=0;
 label=10;break;
 case 10: 
 var $54=$1;
 STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }
}
function _dtt_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1148414804;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,64);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _dtt_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1640)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $k;
 var $n;
 var $buf=sp;
 var $flags;
 var $pofs=(sp)+(104);
 var $plen=(sp)+(1128);
 var $sdata=(sp)+(1384);
 var $x;
 var $x1;
 var $c2spd;
 var $looplen;
 var $x2;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$2;
 _set_type($14,25512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=(($buf)|0);
 var $16=$3;
 var $17=_hio_read($15,1,64,$16);
 var $18=$mod;
 var $19=(($18)|0);
 var $20=(($19)|0);
 var $21=(($buf)|0);
 var $22=_strlcpy($20,$21,64);
 var $23=(($buf)|0);
 var $24=$3;
 var $25=_hio_read($23,1,64,$24);
 var $26=$3;
 var $27=_hio_read32l($26);
 $flags=$27;
 var $28=$3;
 var $29=_hio_read32l($28);
 var $30=$mod;
 var $31=(($30+136)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$3;
 var $33=_hio_read32l($32);
 var $34=$mod;
 var $35=(($34+156)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=(($buf)|0);
 var $37=$3;
 var $38=_hio_read($36,1,8,$37);
 var $39=$3;
 var $40=_hio_read32l($39);
 var $41=$mod;
 var $42=(($41+148)|0);
 HEAP32[(($42)>>2)]=$40;
 var $43=$3;
 var $44=_hio_read32l($43);
 var $45=$mod;
 var $46=(($45+160)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$3;
 var $48=_hio_read32l($47);
 var $49=$mod;
 var $50=(($49+128)|0);
 HEAP32[(($50)>>2)]=$48;
 var $51=$3;
 var $52=_hio_read32l($51);
 var $53=$mod;
 var $54=(($53+144)|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=$mod;
 var $56=(($55+140)|0);
 HEAP32[(($56)>>2)]=$52;
 var $57=$mod;
 var $58=(($57+128)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$mod;
 var $61=(($60+136)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(Math_imul($59,$62)|0);
 var $64=$mod;
 var $65=(($64+132)|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=$mod;
 var $67=(($66+952)|0);
 var $68=(($67)|0);
 var $69=$mod;
 var $70=(($69+156)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=((($71)+(3))|0);
 var $73=$72&-4;
 var $74=$3;
 var $75=_hio_read($68,1,$73,$74);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 $i=0;
 label=10;break;
 case 10: 
 var $83=$i;
 var $84=$mod;
 var $85=(($84+128)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($83|0)<($86|0);
 if($87){label=11;break;}else{label=15;break;}
 case 11: 
 var $89=$3;
 var $90=_hio_read32l($89);
 $x=$90;
 var $91=$i;
 var $92=($91|0)<256;
 if($92){label=12;break;}else{label=13;break;}
 case 12: 
 var $94=$x;
 var $95=$i;
 var $96=(($pofs+($95<<2))|0);
 HEAP32[(($96)>>2)]=$94;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $99=$i;
 var $100=((($99)+(1))|0);
 $i=$100;
 label=10;break;
 case 15: 
 var $102=$mod;
 var $103=(($102+128)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=((($104)+(3))|0);
 var $106=$105&-4;
 $n=$106;
 $i=0;
 label=16;break;
 case 16: 
 var $108=$i;
 var $109=$n;
 var $110=($108|0)<($109|0);
 if($110){label=17;break;}else{label=21;break;}
 case 17: 
 var $112=$3;
 var $113=_hio_read8($112);
 var $114=($113&255);
 $x1=$114;
 var $115=$i;
 var $116=($115|0)<256;
 if($116){label=18;break;}else{label=19;break;}
 case 18: 
 var $118=$x1;
 var $119=(($118)&255);
 var $120=$i;
 var $121=(($plen+$120)|0);
 HEAP8[($121)]=$119;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $124=$i;
 var $125=((($124)+(1))|0);
 $i=$125;
 label=16;break;
 case 21: 
 var $127=$mod;
 var $128=_instrument_init($127);
 var $129=($128|0)<0;
 if($129){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=63;break;
 case 23: 
 $i=0;
 label=24;break;
 case 24: 
 var $133=$i;
 var $134=$mod;
 var $135=(($134+140)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($133|0)<($136|0);
 if($137){label=25;break;}else{label=31;break;}
 case 25: 
 var $139=$mod;
 var $140=$i;
 var $141=_subinstrument_alloc($139,$140,1);
 var $142=($141|0)<0;
 if($142){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=63;break;
 case 27: 
 var $145=$3;
 var $146=_hio_read8($145);
 var $147=$3;
 var $148=_hio_read8($147);
 var $149=($148&255);
 var $150=$149>>1;
 var $151=$i;
 var $152=$mod;
 var $153=(($152+176)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+((($151)*(764))&-1))|0);
 var $156=(($155+756)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157)|0);
 var $159=(($158)|0);
 HEAP32[(($159)>>2)]=$150;
 var $160=$i;
 var $161=$mod;
 var $162=(($161+176)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+((($160)*(764))&-1))|0);
 var $165=(($164+756)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166)|0);
 var $168=(($167+8)|0);
 HEAP32[(($168)>>2)]=128;
 var $169=$3;
 var $170=_hio_read16l($169);
 var $171=$3;
 var $172=_hio_read32l($171);
 $c2spd=$172;
 var $173=$3;
 var $174=_hio_read32l($173);
 var $175=$3;
 var $176=_hio_read32l($175);
 var $177=$3;
 var $178=_hio_read32l($177);
 var $179=$i;
 var $180=$mod;
 var $181=(($180+180)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+((($179)*(52))&-1))|0);
 var $184=(($183+36)|0);
 HEAP32[(($184)>>2)]=$178;
 var $185=$3;
 var $186=_hio_read32l($185);
 $looplen=$186;
 var $187=$looplen;
 var $188=($187|0)>0;
 var $189=($188?2:0);
 var $190=$i;
 var $191=$mod;
 var $192=(($191+180)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+((($190)*(52))&-1))|0);
 var $195=(($194+44)|0);
 HEAP32[(($195)>>2)]=$189;
 var $196=$i;
 var $197=$mod;
 var $198=(($197+180)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+((($196)*(52))&-1))|0);
 var $201=(($200+36)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$looplen;
 var $204=((($202)+($203))|0);
 var $205=$i;
 var $206=$mod;
 var $207=(($206+180)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+((($205)*(52))&-1))|0);
 var $210=(($209+40)|0);
 HEAP32[(($210)>>2)]=$204;
 var $211=$3;
 var $212=_hio_read32l($211);
 var $213=$i;
 var $214=$mod;
 var $215=(($214+180)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+((($213)*(52))&-1))|0);
 var $218=(($217+32)|0);
 HEAP32[(($218)>>2)]=$212;
 var $219=(($buf)|0);
 var $220=$3;
 var $221=_hio_read($219,1,32,$220);
 var $222=$mod;
 var $223=$i;
 var $224=(($buf)|0);
 var $225=_instrument_name($222,$223,$224,32);
 var $226=$3;
 var $227=_hio_read32l($226);
 var $228=$i;
 var $229=(($sdata+($228<<2))|0);
 HEAP32[(($229)>>2)]=$227;
 var $230=$i;
 var $231=$mod;
 var $232=(($231+180)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+((($230)*(52))&-1))|0);
 var $235=(($234+32)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=($236|0)!=0;
 var $238=$237^1;
 var $239=$238^1;
 var $240=($239&1);
 var $241=$i;
 var $242=$mod;
 var $243=(($242+176)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+((($241)*(764))&-1))|0);
 var $246=(($245+36)|0);
 HEAP32[(($246)>>2)]=$240;
 var $247=$i;
 var $248=$i;
 var $249=$mod;
 var $250=(($249+176)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(($251+((($248)*(764))&-1))|0);
 var $253=(($252+756)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254)|0);
 var $256=(($255+40)|0);
 HEAP32[(($256)>>2)]=$247;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $260=$i;
 var $261=((($260)+(1))|0);
 $i=$261;
 label=24;break;
 case 31: 
 var $263=$mod;
 var $264=_pattern_init($263);
 var $265=($264|0)<0;
 if($265){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=63;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 $i=0;
 label=36;break;
 case 36: 
 var $271=$i;
 var $272=$mod;
 var $273=(($272+128)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($271|0)<($274|0);
 if($275){label=37;break;}else{label=54;break;}
 case 37: 
 var $277=$mod;
 var $278=$i;
 var $279=$i;
 var $280=(($plen+$279)|0);
 var $281=HEAP8[($280)];
 var $282=($281&255);
 var $283=_pattern_tracks_alloc($277,$278,$282);
 var $284=($283|0)<0;
 if($284){label=38;break;}else{label=39;break;}
 case 38: 
 $1=-1;
 label=63;break;
 case 39: 
 var $287=$3;
 var $288=$4;
 var $289=$i;
 var $290=(($pofs+($289<<2))|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=((($288)+($291))|0);
 var $293=_hio_seek($287,$292,0);
 $j=0;
 label=40;break;
 case 40: 
 var $295=$j;
 var $296=$i;
 var $297=$mod;
 var $298=(($297+168)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+($296<<2))|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($301)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($295|0)<($303|0);
 if($304){label=41;break;}else{label=52;break;}
 case 41: 
 $k=0;
 label=42;break;
 case 42: 
 var $307=$k;
 var $308=$mod;
 var $309=(($308+136)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=($307|0)<($310|0);
 if($311){label=43;break;}else{label=50;break;}
 case 43: 
 var $313=$j;
 var $314=$k;
 var $315=$i;
 var $316=$2;
 var $317=(($316)|0);
 var $318=(($317+168)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($319+($315<<2))|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=(($321+4)|0);
 var $323=(($322+($314<<2))|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=$2;
 var $326=(($325)|0);
 var $327=(($326+172)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($328+($324<<2))|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($330+4)|0);
 var $332=(($331+($313<<3))|0);
 $event=$332;
 var $333=$3;
 var $334=_hio_read32l($333);
 $x2=$334;
 var $335=$x2;
 var $336=$335&63;
 var $337=(($336)&255);
 var $338=$event;
 var $339=(($338+1)|0);
 HEAP8[($339)]=$337;
 var $340=$x2;
 var $341=$340&4032;
 var $342=$341>>>6;
 var $343=(($342)&255);
 var $344=$event;
 var $345=(($344)|0);
 HEAP8[($345)]=$343;
 var $346=$x2;
 var $347=$346&126976;
 var $348=$347>>>12;
 var $349=(($348)&255);
 var $350=$event;
 var $351=(($350+3)|0);
 HEAP8[($351)]=$349;
 var $352=$event;
 var $353=(($352)|0);
 var $354=HEAP8[($353)];
 var $355=(($354<<24)>>24)!=0;
 if($355){label=44;break;}else{label=45;break;}
 case 44: 
 var $357=$event;
 var $358=(($357)|0);
 var $359=HEAP8[($358)];
 var $360=($359&255);
 var $361=((($360)+(48))|0);
 var $362=(($361)&255);
 HEAP8[($358)]=$362;
 label=45;break;
 case 45: 
 var $364=$x2;
 var $365=$364&4063232;
 var $366=($365|0)!=0;
 if($366){label=46;break;}else{label=47;break;}
 case 46: 
 var $368=$x2;
 var $369=$368&4063232;
 var $370=$369>>>17;
 var $371=(($370)&255);
 var $372=$event;
 var $373=(($372+6)|0);
 HEAP8[($373)]=$371;
 var $374=$3;
 var $375=_hio_read32l($374);
 $x2=$375;
 var $376=$x2;
 var $377=$376&255;
 var $378=(($377)&255);
 var $379=$event;
 var $380=(($379+4)|0);
 HEAP8[($380)]=$378;
 var $381=$x2;
 var $382=$381&65280;
 var $383=$382>>>8;
 var $384=(($383)&255);
 var $385=$event;
 var $386=(($385+6)|0);
 HEAP8[($386)]=$384;
 label=48;break;
 case 47: 
 var $388=$x2;
 var $389=$388&-67108864;
 var $390=$389>>>18;
 var $391=(($390)&255);
 var $392=$event;
 var $393=(($392+4)|0);
 HEAP8[($393)]=$391;
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 var $396=$k;
 var $397=((($396)+(1))|0);
 $k=$397;
 label=42;break;
 case 50: 
 label=51;break;
 case 51: 
 var $400=$j;
 var $401=((($400)+(1))|0);
 $j=$401;
 label=40;break;
 case 52: 
 label=53;break;
 case 53: 
 var $404=$i;
 var $405=((($404)+(1))|0);
 $i=$405;
 label=36;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 $i=0;
 label=57;break;
 case 57: 
 var $410=$i;
 var $411=$mod;
 var $412=(($411+140)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=($410|0)<($413|0);
 if($414){label=58;break;}else{label=62;break;}
 case 58: 
 var $416=$3;
 var $417=$4;
 var $418=$i;
 var $419=(($sdata+($418<<2))|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=((($417)+($420))|0);
 var $422=_hio_seek($416,$421,0);
 var $423=$2;
 var $424=$3;
 var $425=$i;
 var $426=$mod;
 var $427=(($426+180)|0);
 var $428=HEAP32[(($427)>>2)];
 var $429=(($428+((($425)*(52))&-1))|0);
 var $430=_load_sample($423,$424,128,$429,0);
 var $431=($430|0)<0;
 if($431){label=59;break;}else{label=60;break;}
 case 59: 
 $1=-1;
 label=63;break;
 case 60: 
 label=61;break;
 case 61: 
 var $435=$i;
 var $436=((($435)+(1))|0);
 $i=$436;
 label=57;break;
 case 62: 
 $1=0;
 label=63;break;
 case 63: 
 var $439=$1;
 STACKTOP=sp;return $439;
  default: assert(0, "bad label: " + label);
 }
}
function _emod_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1179603533;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=9;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read32b($10);
 var $12=$2;
 var $13=_hio_read32b($12);
 var $14=($13|0)!=1162694468;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=9;break;
 case 5: 
 var $17=$2;
 var $18=_hio_read32b($17);
 var $19=($18|0)==1162692931;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 var $21=$2;
 var $22=_hio_read32b($21);
 var $23=$2;
 var $24=_hio_read16b($23);
 var $25=$2;
 var $26=$3;
 _read_title($25,$26,20);
 label=8;break;
 case 7: 
 var $28=$2;
 var $29=$3;
 _read_title($28,$29,0);
 label=8;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 var $32=$1;
 STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }
}
function _emod_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $handle;
 var $ret;
 $2=$m;
 $3=$f;
 $4=$start;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=$4;
 var $8=_hio_seek($6,$7,0);
 label=3;break;
 case 3: 
 var $10=$3;
 var $11=_hio_read32b($10);
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$3;
 var $15=_hio_read32b($14);
 var $16=_iff_new();
 $handle=$16;
 var $17=$handle;
 var $18=($17|0)==0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=10;break;
 case 5: 
 var $21=$handle;
 var $22=_iff_register($21,27112,530);
 $ret=$22;
 var $23=$handle;
 var $24=_iff_register($23,25096,386);
 var $25=$ret;
 var $26=$25|$24;
 $ret=$26;
 var $27=$handle;
 var $28=_iff_register($27,23784,510);
 var $29=$ret;
 var $30=$29|$28;
 $ret=$30;
 var $31=$ret;
 var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=10;break;
 case 7: 
 var $35=$handle;
 var $36=$2;
 var $37=$3;
 var $38=_iff_load($35,$36,$37,0);
 var $39=($38|0)<0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 var $41=$handle;
 _iff_release($41);
 $1=-1;
 label=10;break;
 case 9: 
 var $43=$handle;
 _iff_release($43);
 $1=0;
 label=10;break;
 case 10: 
 var $45=$1;
 STACKTOP=sp;return $45;
  default: assert(0, "bad label: " + label);
 }
}
function _get_emic($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $ver;
 var $reorder=sp;
 var $xxi;
 var $xxs;
 var $sub;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read16b($8);
 var $10=($9&65535);
 $ver=$10;
 var $11=$mod;
 var $12=(($11)|0);
 var $13=(($12)|0);
 var $14=$4;
 var $15=_hio_read($13,1,20,$14);
 var $16=$4;
 var $17=_hio_seek($16,20,1);
 var $18=$4;
 var $19=_hio_read8($18);
 var $20=($19&255);
 var $21=$mod;
 var $22=(($21+152)|0);
 HEAP32[(($22)>>2)]=$20;
 var $23=$4;
 var $24=_hio_read8($23);
 var $25=($24&255);
 var $26=$mod;
 var $27=(($26+140)|0);
 HEAP32[(($27)>>2)]=$25;
 var $28=$mod;
 var $29=(($28+140)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$mod;
 var $32=(($31+144)|0);
 HEAP32[(($32)>>2)]=$30;
 var $33=$2;
 var $34=(($33+1280)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$35|8192;
 HEAP32[(($34)>>2)]=$36;
 var $37=$mod;
 var $38=(($37+64)|0);
 var $39=(($38)|0);
 var $40=$ver;
 var $41=_snprintf($39,64,23048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$40,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $48=$mod;
 var $49=_instrument_init($48);
 var $50=($49|0)<0;
 if($50){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=32;break;
 case 9: 
 $i=0;
 label=10;break;
 case 10: 
 var $54=$i;
 var $55=$mod;
 var $56=(($55+140)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($54|0)<($57|0);
 if($58){label=11;break;}else{label=17;break;}
 case 11: 
 var $60=$i;
 var $61=$mod;
 var $62=(($61+176)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+((($60)*(764))&-1))|0);
 $xxi=$64;
 var $65=$i;
 var $66=$mod;
 var $67=(($66+180)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+((($65)*(52))&-1))|0);
 $xxs=$69;
 var $70=$mod;
 var $71=$i;
 var $72=_subinstrument_alloc($70,$71,1);
 var $73=($72|0)<0;
 if($73){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=32;break;
 case 13: 
 var $76=$xxi;
 var $77=(($76+756)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78)|0);
 $sub=$79;
 var $80=$4;
 var $81=_hio_read8($80);
 var $82=$4;
 var $83=_hio_read8($82);
 var $84=($83&255);
 var $85=$sub;
 var $86=(($85)|0);
 HEAP32[(($86)>>2)]=$84;
 var $87=$4;
 var $88=_hio_read16b($87);
 var $89=($88&65535);
 var $90=($89<<1);
 var $91=$xxs;
 var $92=(($91+32)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=$xxi;
 var $94=(($93)|0);
 var $95=(($94)|0);
 var $96=$4;
 var $97=_hio_read($95,1,20,$96);
 var $98=$4;
 var $99=_hio_read8($98);
 var $100=($99&255);
 var $101=$100&1;
 var $102=($101|0)!=0;
 var $103=($102?2:0);
 var $104=$xxs;
 var $105=(($104+44)|0);
 HEAP32[(($105)>>2)]=$103;
 var $106=$4;
 var $107=_hio_read8($106);
 var $108=($107&255);
 var $109=$sub;
 var $110=(($109+16)|0);
 HEAP32[(($110)>>2)]=$108;
 var $111=$4;
 var $112=_hio_read16b($111);
 var $113=($112&65535);
 var $114=($113<<1);
 var $115=$xxs;
 var $116=(($115+36)|0);
 HEAP32[(($116)>>2)]=$114;
 var $117=$xxs;
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$4;
 var $121=_hio_read16b($120);
 var $122=($121&65535);
 var $123=($122<<1);
 var $124=((($119)+($123))|0);
 var $125=$xxs;
 var $126=(($125+40)|0);
 HEAP32[(($126)>>2)]=$124;
 var $127=$4;
 var $128=_hio_read32b($127);
 var $129=$xxi;
 var $130=(($129+36)|0);
 HEAP32[(($130)>>2)]=1;
 var $131=$sub;
 var $132=(($131+8)|0);
 HEAP32[(($132)>>2)]=128;
 var $133=$i;
 var $134=$sub;
 var $135=(($134+40)|0);
 HEAP32[(($135)>>2)]=$133;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $139=$i;
 var $140=((($139)+(1))|0);
 $i=$140;
 label=10;break;
 case 17: 
 var $142=$4;
 var $143=_hio_read8($142);
 var $144=$4;
 var $145=_hio_read8($144);
 var $146=($145&255);
 var $147=$mod;
 var $148=(($147+128)|0);
 HEAP32[(($148)>>2)]=$146;
 var $149=$mod;
 var $150=(($149+128)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$mod;
 var $153=(($152+136)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(Math_imul($151,$154)|0);
 var $156=$mod;
 var $157=(($156+132)|0);
 HEAP32[(($157)>>2)]=$155;
 var $158=$mod;
 var $159=_pattern_init($158);
 var $160=($159|0)<0;
 if($160){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=32;break;
 case 19: 
 var $163=$reorder;
 _memset($163, 0, 256)|0;
 $i=0;
 label=20;break;
 case 20: 
 var $165=$i;
 var $166=$mod;
 var $167=(($166+128)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($165|0)<($168|0);
 if($169){label=21;break;}else{label=25;break;}
 case 21: 
 var $171=$i;
 var $172=(($171)&255);
 var $173=$4;
 var $174=_hio_read8($173);
 var $175=($174&255);
 var $176=(($reorder+$175)|0);
 HEAP8[($176)]=$172;
 var $177=$mod;
 var $178=$i;
 var $179=$4;
 var $180=_hio_read8($179);
 var $181=($180&255);
 var $182=((($181)+(1))|0);
 var $183=_pattern_tracks_alloc($177,$178,$182);
 var $184=($183|0)<0;
 if($184){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=32;break;
 case 23: 
 var $187=$4;
 var $188=_hio_seek($187,20,1);
 var $189=$4;
 var $190=_hio_read32b($189);
 label=24;break;
 case 24: 
 var $192=$i;
 var $193=((($192)+(1))|0);
 $i=$193;
 label=20;break;
 case 25: 
 var $195=$4;
 var $196=_hio_read8($195);
 var $197=($196&255);
 var $198=$mod;
 var $199=(($198+156)|0);
 HEAP32[(($199)>>2)]=$197;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 $i=0;
 label=28;break;
 case 28: 
 var $203=$i;
 var $204=$mod;
 var $205=(($204+156)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($203|0)<($206|0);
 if($207){label=29;break;}else{label=31;break;}
 case 29: 
 var $209=$4;
 var $210=_hio_read8($209);
 var $211=($210&255);
 var $212=(($reorder+$211)|0);
 var $213=HEAP8[($212)];
 var $214=$i;
 var $215=$mod;
 var $216=(($215+952)|0);
 var $217=(($216+$214)|0);
 HEAP8[($217)]=$213;
 label=30;break;
 case 30: 
 var $219=$i;
 var $220=((($219)+(1))|0);
 $i=$220;
 label=28;break;
 case 31: 
 $1=0;
 label=32;break;
 case 32: 
 var $223=$1;
 STACKTOP=sp;return $223;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt194($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $k;
 var $x;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $10=$i;
 var $11=$mod;
 var $12=(($11+128)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($10|0)<($13|0);
 if($14){label=5;break;}else{label=21;break;}
 case 5: 
 $j=0;
 label=6;break;
 case 6: 
 var $17=$j;
 var $18=$i;
 var $19=$mod;
 var $20=(($19+168)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($17|0)<($25|0);
 if($26){label=7;break;}else{label=19;break;}
 case 7: 
 $k=0;
 label=8;break;
 case 8: 
 var $29=$k;
 var $30=$mod;
 var $31=(($30+136)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($29|0)<($32|0);
 if($33){label=9;break;}else{label=17;break;}
 case 9: 
 var $35=$j;
 var $36=$k;
 var $37=$i;
 var $38=$1;
 var $39=(($38)|0);
 var $40=(($39+168)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+($37<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+4)|0);
 var $45=(($44+($36<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$1;
 var $48=(($47)|0);
 var $49=(($48+172)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+($46<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+4)|0);
 var $54=(($53+($35<<3))|0);
 $event=$54;
 var $55=$3;
 var $56=_hio_read8($55);
 var $57=$event;
 var $58=(($57+1)|0);
 HEAP8[($58)]=$56;
 var $59=$3;
 var $60=_hio_read8($59);
 var $61=($60&255);
 var $62=((($61)+(1))|0);
 var $63=(($62)&255);
 var $64=$event;
 var $65=(($64)|0);
 HEAP8[($65)]=$63;
 var $66=$event;
 var $67=(($66)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=($69|0)!=0;
 if($70){label=10;break;}else{label=11;break;}
 case 10: 
 var $72=$event;
 var $73=(($72)|0);
 var $74=HEAP8[($73)];
 var $75=($74&255);
 var $76=((($75)+(48))|0);
 var $77=(($76)&255);
 HEAP8[($73)]=$77;
 label=11;break;
 case 11: 
 var $79=$3;
 var $80=_hio_read8($79);
 var $81=($80&255);
 var $82=$81&15;
 var $83=(($82)&255);
 var $84=$event;
 var $85=(($84+3)|0);
 HEAP8[($85)]=$83;
 var $86=$3;
 var $87=_hio_read8($86);
 var $88=$event;
 var $89=(($88+4)|0);
 HEAP8[($89)]=$87;
 var $90=$event;
 var $91=(($90+3)|0);
 var $92=HEAP8[($91)];
 var $93=($92&255);
 if(($93|0)==4){ label=12;break;}else if(($93|0)==9){ label=13;break;}else if(($93|0)==11){ label=14;break;}else{label=15;break;}
 case 12: 
 var $95=$event;
 var $96=(($95+4)|0);
 var $97=HEAP8[($96)];
 $x=$97;
 var $98=$x;
 var $99=($98&255);
 var $100=$99&240;
 var $101=$x;
 var $102=($101&255);
 var $103=$102<<1;
 var $104=$103&15;
 var $105=$100|$104;
 var $106=(($105)&255);
 var $107=$event;
 var $108=(($107+4)|0);
 HEAP8[($108)]=$106;
 label=15;break;
 case 13: 
 var $110=$event;
 var $111=(($110+3)|0);
 var $112=HEAP8[($111)];
 var $113=($112&255);
 var $114=$113<<1;
 var $115=(($114)&255);
 HEAP8[($111)]=$115;
 label=15;break;
 case 14: 
 var $117=$event;
 var $118=(($117+3)|0);
 var $119=HEAP8[($118)];
 $x=$119;
 var $120=$x;
 var $121=($120&255);
 var $122=(((($121|0))/(10))&-1);
 var $123=($122<<4);
 var $124=$x;
 var $125=($124&255);
 var $126=(((($125|0))%(10))&-1);
 var $127=((($123)+($126))|0);
 var $128=(($127)&255);
 var $129=$event;
 var $130=(($129+3)|0);
 HEAP8[($130)]=$128;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $133=$k;
 var $134=((($133)+(1))|0);
 $k=$134;
 label=8;break;
 case 17: 
 label=18;break;
 case 18: 
 var $137=$j;
 var $138=((($137)+(1))|0);
 $j=$138;
 label=6;break;
 case 19: 
 label=20;break;
 case 20: 
 var $141=$i;
 var $142=((($141)+(1))|0);
 $i=$142;
 label=4;break;
 case 21: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_8smp($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $11=$i;
 var $12=$mod;
 var $13=(($12+144)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11|0)<($14|0);
 if($15){label=5;break;}else{label=9;break;}
 case 5: 
 var $17=$2;
 var $18=$4;
 var $19=$i;
 var $20=$mod;
 var $21=(($20+180)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+((($19)*(52))&-1))|0);
 var $24=_load_sample($17,$18,0,$23,0);
 var $25=($24|0)<0;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=10;break;
 case 7: 
 label=8;break;
 case 8: 
 var $29=$i;
 var $30=((($29)+(1))|0);
 $i=$30;
 label=4;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $33=$1;
 STACKTOP=sp;return $33;
  default: assert(0, "bad label: " + label);
 }
}
function _far_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1178686206;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,40);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _far_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+944)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $vib;
 var $event;
 var $ffh=sp;
 var $ffh2=(sp)+(104);
 var $fih=(sp)+(880);
 var $sample_map=(sp)+(936);
 var $brk;
 var $note;
 var $ins;
 var $vol;
 var $fxb;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $vib=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=(($ffh+4)|0);
 var $15=$14;
 var $16=$3;
 var $17=_hio_read($15,40,1,$16);
 var $18=(($ffh+44)|0);
 var $19=$18;
 var $20=$3;
 var $21=_hio_read($19,3,1,$20);
 var $22=$3;
 var $23=_hio_read16l($22);
 var $24=(($ffh+48)|0);
 HEAP16[(($24)>>1)]=$23;
 var $25=$3;
 var $26=_hio_read8($25);
 var $27=(($ffh+50)|0);
 HEAP8[($27)]=$26;
 var $28=(($ffh+51)|0);
 var $29=$28;
 var $30=$3;
 var $31=_hio_read($29,16,1,$30);
 var $32=$3;
 var $33=_hio_seek($32,9,1);
 var $34=$3;
 var $35=_hio_read8($34);
 var $36=(($ffh+76)|0);
 HEAP8[($36)]=$35;
 var $37=(($ffh+77)|0);
 var $38=$37;
 var $39=$3;
 var $40=_hio_read($38,16,1,$39);
 var $41=$3;
 var $42=_hio_read32l($41);
 var $43=$3;
 var $44=_hio_read16l($43);
 var $45=(($ffh+98)|0);
 HEAP16[(($45)>>1)]=$44;
 var $46=$3;
 var $47=(($ffh+98)|0);
 var $48=HEAP16[(($47)>>1)];
 var $49=($48&65535);
 var $50=_hio_seek($46,$49,1);
 var $51=(($ffh2)|0);
 var $52=$51;
 var $53=$3;
 var $54=_hio_read($52,256,1,$53);
 var $55=$3;
 var $56=_hio_read8($55);
 var $57=(($ffh2+256)|0);
 HEAP8[($57)]=$56;
 var $58=$3;
 var $59=_hio_read8($58);
 var $60=(($ffh2+257)|0);
 HEAP8[($60)]=$59;
 var $61=$3;
 var $62=_hio_read8($61);
 var $63=(($ffh2+258)|0);
 HEAP8[($63)]=$62;
 $i=0;
 label=4;break;
 case 4: 
 var $65=$i;
 var $66=($65|0)<256;
 if($66){label=5;break;}else{label=7;break;}
 case 5: 
 var $68=$3;
 var $69=_hio_read16l($68);
 var $70=$i;
 var $71=(($ffh2+260)|0);
 var $72=(($71+($70<<1))|0);
 HEAP16[(($72)>>1)]=$69;
 label=6;break;
 case 6: 
 var $74=$i;
 var $75=((($74)+(1))|0);
 $i=$75;
 label=4;break;
 case 7: 
 var $77=$mod;
 var $78=(($77+136)|0);
 HEAP32[(($78)>>2)]=16;
 var $79=(($ffh2+257)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=$mod;
 var $83=(($82+156)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=$mod;
 var $85=(($84+148)|0);
 HEAP32[(($85)>>2)]=6;
 var $86=(($ffh+76)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=(((480)/(($88|0)))&-1);
 var $90=$mod;
 var $91=(($90+152)|0);
 HEAP32[(($91)>>2)]=$89;
 var $92=$mod;
 var $93=(($92+952)|0);
 var $94=$93;
 var $95=(($ffh2)|0);
 var $96=$95;
 var $97=$mod;
 var $98=(($97+156)|0);
 var $99=HEAP32[(($98)>>2)];
 assert($99 % 1 === 0);(_memcpy($94, $96, $99)|0);
 $i=0;
 var $100=$mod;
 var $101=(($100+128)|0);
 HEAP32[(($101)>>2)]=0;
 label=8;break;
 case 8: 
 var $103=$i;
 var $104=($103|0)<256;
 if($104){label=9;break;}else{label=13;break;}
 case 9: 
 var $106=$i;
 var $107=(($ffh2+260)|0);
 var $108=(($107+($106<<1))|0);
 var $109=HEAP16[(($108)>>1)];
 var $110=(($109<<16)>>16)!=0;
 if($110){label=10;break;}else{label=11;break;}
 case 10: 
 var $112=$i;
 var $113=((($112)+(1))|0);
 var $114=$mod;
 var $115=(($114+128)|0);
 HEAP32[(($115)>>2)]=$113;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $118=$i;
 var $119=((($118)+(1))|0);
 $i=$119;
 label=8;break;
 case 13: 
 var $121=$mod;
 var $122=(($121+136)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$mod;
 var $125=(($124+128)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(Math_imul($123,$126)|0);
 var $128=$mod;
 var $129=(($128+132)|0);
 HEAP32[(($129)>>2)]=$127;
 var $130=$mod;
 var $131=(($130)|0);
 var $132=(($131)|0);
 var $133=(($ffh+4)|0);
 var $134=(($133)|0);
 var $135=_strlcpy($132,$134,40);
 var $136=$2;
 var $137=(($ffh+50)|0);
 var $138=HEAP8[($137)];
 var $139=($138&255);
 var $140=$139&240;
 var $141=$140>>4;
 var $142=(($ffh+50)|0);
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=$144&15;
 _set_type($136,27080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$141,HEAP32[(((tempVarArgs)+(8))>>2)]=$145,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $152=$mod;
 var $153=_pattern_init($152);
 var $154=($153|0)<0;
 if($154){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=86;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 var $162=$i;
 var $163=$mod;
 var $164=(($163+128)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($162|0)<($165|0);
 if($166){label=27;break;}else{label=61;break;}
 case 27: 
 var $168=$mod;
 var $169=$i;
 var $170=_pattern_alloc($168,$169);
 var $171=($170|0)<0;
 if($171){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=86;break;
 case 29: 
 var $174=$i;
 var $175=(($ffh2+260)|0);
 var $176=(($175+($174<<1))|0);
 var $177=HEAP16[(($176)>>1)];
 var $178=(($177<<16)>>16)!=0;
 if($178){label=31;break;}else{label=30;break;}
 case 30: 
 label=60;break;
 case 31: 
 var $181=$i;
 var $182=(($ffh2+260)|0);
 var $183=(($182+($181<<1))|0);
 var $184=HEAP16[(($183)>>1)];
 var $185=($184&65535);
 var $186=((($185)-(2))|0);
 var $187=(((($186|0))/(64))&-1);
 var $188=$i;
 var $189=$mod;
 var $190=(($189+168)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+($188<<2))|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193)|0);
 HEAP32[(($194)>>2)]=$187;
 var $195=$mod;
 var $196=$i;
 var $197=_tracks_in_pattern_alloc($195,$196);
 var $198=($197|0)<0;
 if($198){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=86;break;
 case 33: 
 var $201=$3;
 var $202=_hio_read8($201);
 var $203=($202&255);
 var $204=((($203)+(1))|0);
 var $205=(($204)&255);
 $brk=$205;
 var $206=$3;
 var $207=_hio_read8($206);
 $j=0;
 label=34;break;
 case 34: 
 var $209=$j;
 var $210=$i;
 var $211=$mod;
 var $212=(($211+168)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+($210<<2))|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$mod;
 var $219=(($218+136)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(Math_imul($217,$220)|0);
 var $222=($209|0)<($221|0);
 if($222){label=35;break;}else{label=59;break;}
 case 35: 
 var $224=$j;
 var $225=$mod;
 var $226=(($225+136)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(((($224|0))/(($227|0)))&-1);
 var $229=$j;
 var $230=$mod;
 var $231=(($230+136)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(((($229|0))%(($232|0)))&-1);
 var $234=$i;
 var $235=$2;
 var $236=(($235)|0);
 var $237=(($236+168)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+($234<<2))|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+4)|0);
 var $242=(($241+($233<<2))|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$2;
 var $245=(($244)|0);
 var $246=(($245+172)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+($243<<2))|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+4)|0);
 var $251=(($250+($228<<3))|0);
 $event=$251;
 var $252=$j;
 var $253=$mod;
 var $254=(($253+136)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(((($252|0))%(($255|0)))&-1);
 var $257=($256|0)==0;
 if($257){label=36;break;}else{label=38;break;}
 case 36: 
 var $259=$j;
 var $260=$mod;
 var $261=(($260+136)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(((($259|0))/(($262|0)))&-1);
 var $264=$brk;
 var $265=($264&255);
 var $266=($263|0)==($265|0);
 if($266){label=37;break;}else{label=38;break;}
 case 37: 
 var $268=$event;
 var $269=(($268+5)|0);
 HEAP8[($269)]=13;
 label=38;break;
 case 38: 
 var $271=$3;
 var $272=_hio_read8($271);
 $note=$272;
 var $273=$3;
 var $274=_hio_read8($273);
 $ins=$274;
 var $275=$3;
 var $276=_hio_read8($275);
 $vol=$276;
 var $277=$3;
 var $278=_hio_read8($277);
 $fxb=$278;
 var $279=$note;
 var $280=(($279<<24)>>24)!=0;
 if($280){label=39;break;}else{label=40;break;}
 case 39: 
 var $282=$note;
 var $283=($282&255);
 var $284=((($283)+(48))|0);
 var $285=(($284)&255);
 var $286=$event;
 var $287=(($286)|0);
 HEAP8[($287)]=$285;
 label=40;break;
 case 40: 
 var $289=$event;
 var $290=(($289)|0);
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=($292|0)!=0;
 if($293){label=42;break;}else{label=41;break;}
 case 41: 
 var $295=$ins;
 var $296=($295&255);
 var $297=($296|0)!=0;
 if($297){label=42;break;}else{label=43;break;}
 case 42: 
 var $299=$ins;
 var $300=($299&255);
 var $301=((($300)+(1))|0);
 var $302=(($301)&255);
 var $303=$event;
 var $304=(($303+1)|0);
 HEAP8[($304)]=$302;
 label=43;break;
 case 43: 
 var $306=$vol;
 var $307=($306&255);
 var $308=$307&15;
 var $309=($308<<4);
 var $310=$vol;
 var $311=($310&255);
 var $312=$311&240;
 var $313=$312>>4;
 var $314=((($309)+($313))|0);
 var $315=(($314)&255);
 $vol=$315;
 var $316=$vol;
 var $317=(($316<<24)>>24)!=0;
 if($317){label=44;break;}else{label=45;break;}
 case 44: 
 var $319=$vol;
 var $320=($319&255);
 var $321=((($320)-(16))|0);
 var $322=(($321)&255);
 var $323=$event;
 var $324=(($323+2)|0);
 HEAP8[($324)]=$322;
 label=45;break;
 case 45: 
 var $326=$fxb;
 var $327=($326&255);
 var $328=$327&240;
 var $329=$328>>4;
 var $330=((7792+$329)|0);
 var $331=HEAP8[($330)];
 var $332=$event;
 var $333=(($332+3)|0);
 HEAP8[($333)]=$331;
 var $334=$fxb;
 var $335=($334&255);
 var $336=$335&15;
 var $337=(($336)&255);
 var $338=$event;
 var $339=(($338+4)|0);
 HEAP8[($339)]=$337;
 var $340=$event;
 var $341=(($340+3)|0);
 var $342=HEAP8[($341)];
 var $343=($342&255);
 switch(($343|0)){case 255:{ label=46;break;}case 249:{ label=47;break;}case 248:{ label=48;break;}case 251:{ label=49;break;}case 250:{ label=50;break;}case 254:{ label=51;break;}case 4:{ label=52;break;}case 123:{ label=53;break;}case 253:{ label=54;break;}case 252:{ label=55;break;}case 15:{ label=56;break;}default:{label=57;break;}}break;
 case 46: 
 var $345=$event;
 var $346=(($345+4)|0);
 HEAP8[($346)]=0;
 var $347=$event;
 var $348=(($347+3)|0);
 HEAP8[($348)]=0;
 label=57;break;
 case 47: 
 var $350=$event;
 var $351=(($350+3)|0);
 HEAP8[($351)]=14;
 var $352=$event;
 var $353=(($352+4)|0);
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355|16;
 var $357=(($356)&255);
 HEAP8[($353)]=$357;
 label=57;break;
 case 48: 
 var $359=$event;
 var $360=(($359+3)|0);
 HEAP8[($360)]=14;
 var $361=$event;
 var $362=(($361+4)|0);
 var $363=HEAP8[($362)];
 var $364=($363&255);
 var $365=$364|32;
 var $366=(($365)&255);
 HEAP8[($362)]=$366;
 label=57;break;
 case 49: 
 var $368=$event;
 var $369=(($368+3)|0);
 HEAP8[($369)]=14;
 var $370=$event;
 var $371=(($370+4)|0);
 var $372=HEAP8[($371)];
 var $373=($372&255);
 var $374=$373|144;
 var $375=(($374)&255);
 HEAP8[($371)]=$375;
 label=57;break;
 case 50: 
 var $377=$event;
 var $378=(($377+3)|0);
 HEAP8[($378)]=14;
 var $379=$event;
 var $380=(($379+4)|0);
 var $381=HEAP8[($380)];
 var $382=($381&255);
 var $383=$382|208;
 var $384=(($383)&255);
 HEAP8[($380)]=$384;
 label=57;break;
 case 51: 
 var $386=$event;
 var $387=(($386+4)|0);
 var $388=HEAP8[($387)];
 var $389=($388&255);
 var $390=$389&15;
 $vib=$390;
 var $391=$event;
 var $392=(($391+4)|0);
 HEAP8[($392)]=0;
 var $393=$event;
 var $394=(($393+3)|0);
 HEAP8[($394)]=0;
 label=57;break;
 case 52: 
 var $396=$event;
 var $397=(($396+4)|0);
 var $398=HEAP8[($397)];
 var $399=($398&255);
 var $400=$399<<4;
 var $401=$vib;
 var $402=((($400)+($401))|0);
 var $403=(($402)&255);
 var $404=$event;
 var $405=(($404+4)|0);
 HEAP8[($405)]=$403;
 label=57;break;
 case 53: 
 var $407=$event;
 var $408=(($407+4)|0);
 var $409=HEAP8[($408)];
 var $410=($409&255);
 var $411=$410<<4;
 var $412=$vib;
 var $413=((($411)+($412))|0);
 var $414=(($413)&255);
 var $415=$event;
 var $416=(($415+4)|0);
 HEAP8[($416)]=$414;
 label=57;break;
 case 54: 
 var $418=$event;
 var $419=(($418+3)|0);
 HEAP8[($419)]=14;
 var $420=$event;
 var $421=(($420+4)|0);
 var $422=HEAP8[($421)];
 var $423=($422&255);
 var $424=$423|160;
 var $425=(($424)&255);
 HEAP8[($421)]=$425;
 label=57;break;
 case 55: 
 var $427=$event;
 var $428=(($427+3)|0);
 HEAP8[($428)]=14;
 var $429=$event;
 var $430=(($429+4)|0);
 var $431=HEAP8[($430)];
 var $432=($431&255);
 var $433=$432|176;
 var $434=(($433)&255);
 HEAP8[($430)]=$434;
 label=57;break;
 case 56: 
 var $436=$event;
 var $437=(($436+4)|0);
 var $438=HEAP8[($437)];
 var $439=($438&255);
 var $440=(((480)/(($439|0)))&-1);
 var $441=(($440)&255);
 var $442=$event;
 var $443=(($442+4)|0);
 HEAP8[($443)]=$441;
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 var $446=$j;
 var $447=((($446)+(1))|0);
 $j=$447;
 label=34;break;
 case 59: 
 label=60;break;
 case 60: 
 var $450=$i;
 var $451=((($450)+(1))|0);
 $i=$451;
 label=26;break;
 case 61: 
 var $453=$mod;
 var $454=(($453+140)|0);
 HEAP32[(($454)>>2)]=-1;
 var $455=(($sample_map)|0);
 var $456=$3;
 var $457=_hio_read($455,1,8,$456);
 $i=0;
 label=62;break;
 case 62: 
 var $459=$i;
 var $460=($459|0)<64;
 if($460){label=63;break;}else{label=67;break;}
 case 63: 
 var $462=$i;
 var $463=(((($462|0))/(8))&-1);
 var $464=(($sample_map+$463)|0);
 var $465=HEAP8[($464)];
 var $466=($465&255);
 var $467=$i;
 var $468=(((($467|0))%(8))&-1);
 var $469=1<<$468;
 var $470=$466&$469;
 var $471=($470|0)!=0;
 if($471){label=64;break;}else{label=65;break;}
 case 64: 
 var $473=$i;
 var $474=$mod;
 var $475=(($474+140)|0);
 HEAP32[(($475)>>2)]=$473;
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 var $478=$i;
 var $479=((($478)+(1))|0);
 $i=$479;
 label=62;break;
 case 67: 
 var $481=$mod;
 var $482=(($481+140)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=((($483)+(1))|0);
 HEAP32[(($482)>>2)]=$484;
 var $485=$mod;
 var $486=(($485+140)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=$mod;
 var $489=(($488+144)|0);
 HEAP32[(($489)>>2)]=$487;
 var $490=$mod;
 var $491=_instrument_init($490);
 var $492=($491|0)<0;
 if($492){label=68;break;}else{label=69;break;}
 case 68: 
 $1=-1;
 label=86;break;
 case 69: 
 $i=0;
 label=70;break;
 case 70: 
 var $496=$i;
 var $497=$mod;
 var $498=(($497+140)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($496|0)<($499|0);
 if($500){label=71;break;}else{label=85;break;}
 case 71: 
 var $502=$i;
 var $503=(((($502|0))/(8))&-1);
 var $504=(($sample_map+$503)|0);
 var $505=HEAP8[($504)];
 var $506=($505&255);
 var $507=$i;
 var $508=(((($507|0))%(8))&-1);
 var $509=1<<$508;
 var $510=$506&$509;
 var $511=($510|0)!=0;
 if($511){label=73;break;}else{label=72;break;}
 case 72: 
 label=84;break;
 case 73: 
 var $514=$mod;
 var $515=$i;
 var $516=_subinstrument_alloc($514,$515,1);
 var $517=($516|0)<0;
 if($517){label=74;break;}else{label=75;break;}
 case 74: 
 $1=-1;
 label=86;break;
 case 75: 
 var $520=(($fih)|0);
 var $521=$520;
 var $522=$3;
 var $523=_hio_read($521,32,1,$522);
 var $524=$3;
 var $525=_hio_read32l($524);
 var $526=(($fih+32)|0);
 HEAP32[(($526)>>2)]=$525;
 var $527=$3;
 var $528=_hio_read8($527);
 var $529=(($fih+36)|0);
 HEAP8[($529)]=$528;
 var $530=$3;
 var $531=_hio_read8($530);
 var $532=(($fih+37)|0);
 HEAP8[($532)]=$531;
 var $533=$3;
 var $534=_hio_read32l($533);
 var $535=(($fih+40)|0);
 HEAP32[(($535)>>2)]=$534;
 var $536=$3;
 var $537=_hio_read32l($536);
 var $538=(($fih+44)|0);
 HEAP32[(($538)>>2)]=$537;
 var $539=$3;
 var $540=_hio_read8($539);
 var $541=(($fih+48)|0);
 HEAP8[($541)]=$540;
 var $542=$3;
 var $543=_hio_read8($542);
 var $544=(($fih+49)|0);
 HEAP8[($544)]=$543;
 var $545=(($fih+32)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=$546&65535;
 HEAP32[(($545)>>2)]=$547;
 var $548=(($fih+40)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=$549&65535;
 HEAP32[(($548)>>2)]=$550;
 var $551=(($fih+44)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=$552&65535;
 HEAP32[(($551)>>2)]=$553;
 var $554=(($fih+32)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=$i;
 var $557=$mod;
 var $558=(($557+180)|0);
 var $559=HEAP32[(($558)>>2)];
 var $560=(($559+((($556)*(52))&-1))|0);
 var $561=(($560+32)|0);
 HEAP32[(($561)>>2)]=$555;
 var $562=(($fih+40)|0);
 var $563=HEAP32[(($562)>>2)];
 var $564=$i;
 var $565=$mod;
 var $566=(($565+180)|0);
 var $567=HEAP32[(($566)>>2)];
 var $568=(($567+((($564)*(52))&-1))|0);
 var $569=(($568+36)|0);
 HEAP32[(($569)>>2)]=$563;
 var $570=(($fih+44)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=$i;
 var $573=$mod;
 var $574=(($573+180)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=(($575+((($572)*(52))&-1))|0);
 var $577=(($576+40)|0);
 HEAP32[(($577)>>2)]=$571;
 var $578=$i;
 var $579=$mod;
 var $580=(($579+180)|0);
 var $581=HEAP32[(($580)>>2)];
 var $582=(($581+((($578)*(52))&-1))|0);
 var $583=(($582+44)|0);
 HEAP32[(($583)>>2)]=0;
 var $584=$i;
 var $585=$mod;
 var $586=(($585+180)|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=(($587+((($584)*(52))&-1))|0);
 var $589=(($588+32)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=($590|0)>0;
 if($591){label=76;break;}else{label=77;break;}
 case 76: 
 var $593=$i;
 var $594=$mod;
 var $595=(($594+176)|0);
 var $596=HEAP32[(($595)>>2)];
 var $597=(($596+((($593)*(764))&-1))|0);
 var $598=(($597+36)|0);
 HEAP32[(($598)>>2)]=1;
 label=77;break;
 case 77: 
 var $600=(($fih+48)|0);
 var $601=HEAP8[($600)];
 var $602=($601&255);
 var $603=($602|0)!=0;
 if($603){label=78;break;}else{label=79;break;}
 case 78: 
 var $605=$i;
 var $606=$mod;
 var $607=(($606+180)|0);
 var $608=HEAP32[(($607)>>2)];
 var $609=(($608+((($605)*(52))&-1))|0);
 var $610=(($609+44)|0);
 var $611=HEAP32[(($610)>>2)];
 var $612=$611|1;
 HEAP32[(($610)>>2)]=$612;
 var $613=$i;
 var $614=$mod;
 var $615=(($614+180)|0);
 var $616=HEAP32[(($615)>>2)];
 var $617=(($616+((($613)*(52))&-1))|0);
 var $618=(($617+32)|0);
 var $619=HEAP32[(($618)>>2)];
 var $620=$619>>1;
 HEAP32[(($618)>>2)]=$620;
 var $621=$i;
 var $622=$mod;
 var $623=(($622+180)|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=(($624+((($621)*(52))&-1))|0);
 var $626=(($625+36)|0);
 var $627=HEAP32[(($626)>>2)];
 var $628=$627>>1;
 HEAP32[(($626)>>2)]=$628;
 var $629=$i;
 var $630=$mod;
 var $631=(($630+180)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=(($632+((($629)*(52))&-1))|0);
 var $634=(($633+40)|0);
 var $635=HEAP32[(($634)>>2)];
 var $636=$635>>1;
 HEAP32[(($634)>>2)]=$636;
 label=79;break;
 case 79: 
 var $638=(($fih+49)|0);
 var $639=HEAP8[($638)];
 var $640=($639&255);
 var $641=($640|0)!=0;
 var $642=($641?2:0);
 var $643=$i;
 var $644=$mod;
 var $645=(($644+180)|0);
 var $646=HEAP32[(($645)>>2)];
 var $647=(($646+((($643)*(52))&-1))|0);
 var $648=(($647+44)|0);
 var $649=HEAP32[(($648)>>2)];
 var $650=$649|$642;
 HEAP32[(($648)>>2)]=$650;
 var $651=$i;
 var $652=$mod;
 var $653=(($652+176)|0);
 var $654=HEAP32[(($653)>>2)];
 var $655=(($654+((($651)*(764))&-1))|0);
 var $656=(($655+756)|0);
 var $657=HEAP32[(($656)>>2)];
 var $658=(($657)|0);
 var $659=(($658)|0);
 HEAP32[(($659)>>2)]=255;
 var $660=$i;
 var $661=$i;
 var $662=$mod;
 var $663=(($662+176)|0);
 var $664=HEAP32[(($663)>>2)];
 var $665=(($664+((($661)*(764))&-1))|0);
 var $666=(($665+756)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=(($667)|0);
 var $669=(($668+40)|0);
 HEAP32[(($669)>>2)]=$660;
 var $670=$mod;
 var $671=$i;
 var $672=(($fih)|0);
 var $673=(($672)|0);
 var $674=_instrument_name($670,$671,$673,32);
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 var $677=$2;
 var $678=$3;
 var $679=$i;
 var $680=$mod;
 var $681=(($680+180)|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=(($682+((($679)*(52))&-1))|0);
 var $684=_load_sample($677,$678,0,$683,0);
 var $685=($684|0)<0;
 if($685){label=82;break;}else{label=83;break;}
 case 82: 
 $1=-1;
 label=86;break;
 case 83: 
 label=84;break;
 case 84: 
 var $689=$i;
 var $690=((($689)+(1))|0);
 $i=$690;
 label=70;break;
 case 85: 
 var $692=$2;
 var $693=(($692+1268)|0);
 HEAP32[(($693)>>2)]=255;
 $1=0;
 label=86;break;
 case 86: 
 var $695=$1;
 STACKTOP=sp;return $695;
  default: assert(0, "bad label: " + label);
 }
}
function _flt_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(1080))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=(($buf)|0);
 var $10=$2;
 var $11=_hio_read($9,1,4,$10);
 var $12=($11>>>0)<4;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=11;break;
 case 3: 
 var $15=(($buf)|0);
 var $16=_memcmp($15,26456,3);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=6;break;}
 case 4: 
 var $19=(($buf)|0);
 var $20=_memcmp($19,26192,3);
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=11;break;
 case 6: 
 var $24=(($buf+3)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24);
 var $27=($26|0)!=52;
 if($27){label=7;break;}else{label=10;break;}
 case 7: 
 var $29=(($buf+3)|0);
 var $30=HEAP8[($29)];
 var $31=(($30<<24)>>24);
 var $32=($31|0)!=56;
 if($32){label=8;break;}else{label=10;break;}
 case 8: 
 var $34=(($buf+3)|0);
 var $35=HEAP8[($34)];
 var $36=(($35<<24)>>24);
 var $37=($36|0)!=77;
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=11;break;
 case 10: 
 var $40=$2;
 var $41=$4;
 var $42=(($41)|0);
 var $43=_hio_seek($40,$42,0);
 var $44=$2;
 var $45=$3;
 _read_title($44,$45,20);
 $1=0;
 label=11;break;
 case 11: 
 var $47=$1;
 STACKTOP=sp;return $47;
  default: assert(0, "bad label: " + label);
 }
}
function _flt_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $mh=sp;
 var $mod_event=(sp)+(1088);
 var $tracker;
 var $filename=(sp)+(1096);
 var $buf=(sp)+(2120);
 var $nt;
 var $am_synth;
 var $xxi;
 var $xxs;
 var $sub;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 $am_synth=0;
 var $12=(($filename)|0);
 var $13=$2;
 var $14=(($13+1208)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$2;
 var $17=(($16+1212)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=_snprintf($12,1024,27056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,HEAP32[(((tempVarArgs)+(8))>>2)]=$18,tempVarArgs)); STACKTOP=tempVarArgs;
 var $20=(($filename)|0);
 var $21=_fopen($20,25072);
 $nt=$21;
 var $22=($21|0)==0;
 if($22){label=4;break;}else{label=9;break;}
 case 4: 
 var $24=(($filename)|0);
 var $25=$2;
 var $26=(($25+1208)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$2;
 var $29=(($28+1212)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=_snprintf($24,1024,23776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,HEAP32[(((tempVarArgs)+(8))>>2)]=$30,tempVarArgs)); STACKTOP=tempVarArgs;
 var $32=(($filename)|0);
 var $33=_fopen($32,25072);
 $nt=$33;
 var $34=($33|0)==0;
 if($34){label=5;break;}else{label=8;break;}
 case 5: 
 var $36=(($filename)|0);
 var $37=$2;
 var $38=(($37+1208)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$2;
 var $41=(($40+1212)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=_snprintf($36,1024,23032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$39,HEAP32[(((tempVarArgs)+(8))>>2)]=$42,tempVarArgs)); STACKTOP=tempVarArgs;
 var $44=(($filename)|0);
 var $45=_fopen($44,25072);
 $nt=$45;
 var $46=($45|0)==0;
 if($46){label=6;break;}else{label=7;break;}
 case 6: 
 var $48=(($filename)|0);
 var $49=$2;
 var $50=(($49+1208)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$2;
 var $53=(($52+1212)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=_snprintf($48,1024,22384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$51,HEAP32[(((tempVarArgs)+(8))>>2)]=$54,tempVarArgs)); STACKTOP=tempVarArgs;
 var $56=(($filename)|0);
 var $57=_fopen($56,25072);
 $nt=$57;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 $tracker=25264;
 var $61=$nt;
 var $62=($61|0)!=0;
 if($62){label=10;break;}else{label=19;break;}
 case 10: 
 var $64=(($buf)|0);
 var $65=$nt;
 var $66=_fread($64,1,16,$65);
 var $67=(($buf)|0);
 var $68=_memcmp($67,21656,16);
 var $69=($68|0)==0;
 if($69){label=11;break;}else{label=12;break;}
 case 11: 
 $am_synth=1;
 $tracker=21208;
 label=18;break;
 case 12: 
 var $72=(($buf)|0);
 var $73=_memcmp($72,20840,16);
 var $74=($73|0)==0;
 if($74){label=13;break;}else{label=14;break;}
 case 13: 
 $am_synth=1;
 $tracker=20560;
 label=17;break;
 case 14: 
 var $77=(($buf)|0);
 var $78=_memcmp($77,27536,16);
 var $79=($78|0)==0;
 if($79){label=15;break;}else{label=16;break;}
 case 15: 
 $am_synth=1;
 $tracker=27328;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $85=(($mh)|0);
 var $86=$85;
 var $87=$3;
 var $88=_hio_read($86,20,1,$87);
 $i=0;
 label=20;break;
 case 20: 
 var $90=$i;
 var $91=($90|0)<31;
 if($91){label=21;break;}else{label=23;break;}
 case 21: 
 var $93=$i;
 var $94=(($mh+20)|0);
 var $95=(($94+((($93)*(30))&-1))|0);
 var $96=(($95)|0);
 var $97=$96;
 var $98=$3;
 var $99=_hio_read($97,22,1,$98);
 var $100=$3;
 var $101=_hio_read16b($100);
 var $102=$i;
 var $103=(($mh+20)|0);
 var $104=(($103+((($102)*(30))&-1))|0);
 var $105=(($104+22)|0);
 HEAP16[(($105)>>1)]=$101;
 var $106=$3;
 var $107=_hio_read8($106);
 var $108=$i;
 var $109=(($mh+20)|0);
 var $110=(($109+((($108)*(30))&-1))|0);
 var $111=(($110+24)|0);
 HEAP8[($111)]=$107;
 var $112=$3;
 var $113=_hio_read8($112);
 var $114=$i;
 var $115=(($mh+20)|0);
 var $116=(($115+((($114)*(30))&-1))|0);
 var $117=(($116+25)|0);
 HEAP8[($117)]=$113;
 var $118=$3;
 var $119=_hio_read16b($118);
 var $120=$i;
 var $121=(($mh+20)|0);
 var $122=(($121+((($120)*(30))&-1))|0);
 var $123=(($122+26)|0);
 HEAP16[(($123)>>1)]=$119;
 var $124=$3;
 var $125=_hio_read16b($124);
 var $126=$i;
 var $127=(($mh+20)|0);
 var $128=(($127+((($126)*(30))&-1))|0);
 var $129=(($128+28)|0);
 HEAP16[(($129)>>1)]=$125;
 label=22;break;
 case 22: 
 var $131=$i;
 var $132=((($131)+(1))|0);
 $i=$132;
 label=20;break;
 case 23: 
 var $134=$3;
 var $135=_hio_read8($134);
 var $136=(($mh+950)|0);
 HEAP8[($136)]=$135;
 var $137=$3;
 var $138=_hio_read8($137);
 var $139=(($mh+951)|0);
 HEAP8[($139)]=$138;
 var $140=(($mh+952)|0);
 var $141=$140;
 var $142=$3;
 var $143=_hio_read($141,128,1,$142);
 var $144=(($mh+1080)|0);
 var $145=$144;
 var $146=$3;
 var $147=_hio_read($145,4,1,$146);
 var $148=(($mh+1080)|0);
 var $149=(($148+3)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 var $152=($151|0)==52;
 if($152){label=24;break;}else{label=25;break;}
 case 24: 
 var $154=$mod;
 var $155=(($154+136)|0);
 HEAP32[(($155)>>2)]=4;
 label=26;break;
 case 25: 
 var $157=$mod;
 var $158=(($157+136)|0);
 HEAP32[(($158)>>2)]=8;
 label=26;break;
 case 26: 
 var $160=$mod;
 var $161=(($160+140)|0);
 HEAP32[(($161)>>2)]=31;
 var $162=$mod;
 var $163=(($162+140)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=$mod;
 var $166=(($165+144)|0);
 HEAP32[(($166)>>2)]=$164;
 var $167=(($mh+950)|0);
 var $168=HEAP8[($167)];
 var $169=($168&255);
 var $170=$mod;
 var $171=(($170+156)|0);
 HEAP32[(($171)>>2)]=$169;
 var $172=(($mh+951)|0);
 var $173=HEAP8[($172)];
 var $174=($173&255);
 var $175=$mod;
 var $176=(($175+160)|0);
 HEAP32[(($176)>>2)]=$174;
 var $177=$mod;
 var $178=(($177+952)|0);
 var $179=$178;
 var $180=(($mh+952)|0);
 var $181=$180;
 assert(128 % 1 === 0);(_memcpy($179, $181, 128)|0);
 $i=0;
 label=27;break;
 case 27: 
 var $183=$i;
 var $184=($183|0)<128;
 if($184){label=28;break;}else{label=34;break;}
 case 28: 
 var $186=$mod;
 var $187=(($186+136)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)>4;
 if($189){label=29;break;}else{label=30;break;}
 case 29: 
 var $191=$i;
 var $192=$mod;
 var $193=(($192+952)|0);
 var $194=(($193+$191)|0);
 var $195=HEAP8[($194)];
 var $196=($195&255);
 var $197=$196>>1;
 var $198=(($197)&255);
 HEAP8[($194)]=$198;
 label=30;break;
 case 30: 
 var $200=$i;
 var $201=$mod;
 var $202=(($201+952)|0);
 var $203=(($202+$200)|0);
 var $204=HEAP8[($203)];
 var $205=($204&255);
 var $206=$mod;
 var $207=(($206+128)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($205|0)>($208|0);
 if($209){label=31;break;}else{label=32;break;}
 case 31: 
 var $211=$i;
 var $212=$mod;
 var $213=(($212+952)|0);
 var $214=(($213+$211)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=$mod;
 var $218=(($217+128)|0);
 HEAP32[(($218)>>2)]=$216;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $221=$i;
 var $222=((($221)+(1))|0);
 $i=$222;
 label=27;break;
 case 34: 
 var $224=$mod;
 var $225=(($224+128)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=((($226)+(1))|0);
 HEAP32[(($225)>>2)]=$227;
 var $228=$mod;
 var $229=(($228+136)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=$mod;
 var $232=(($231+128)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(Math_imul($230,$233)|0);
 var $235=$mod;
 var $236=(($235+132)|0);
 HEAP32[(($236)>>2)]=$234;
 var $237=$mod;
 var $238=(($237)|0);
 var $239=(($238)|0);
 var $240=(($mh)|0);
 var $241=(($240)|0);
 var $242=_strlcpy($239,$241,20);
 var $243=$2;
 var $244=$tracker;
 var $245=(($mh+1080)|0);
 var $246=(($245)|0);
 _set_type($243,27024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$244,HEAP32[(((tempVarArgs)+(8))>>2)]=$246,tempVarArgs)); STACKTOP=tempVarArgs;
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $253=$mod;
 var $254=_instrument_init($253);
 var $255=($254|0)<0;
 if($255){label=41;break;}else{label=42;break;}
 case 41: 
 $1=-1;
 label=93;break;
 case 42: 
 $i=0;
 label=43;break;
 case 43: 
 var $259=$i;
 var $260=$mod;
 var $261=(($260+140)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=($259|0)<($262|0);
 if($263){label=44;break;}else{label=50;break;}
 case 44: 
 var $265=$i;
 var $266=$mod;
 var $267=(($266+176)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+((($265)*(764))&-1))|0);
 $xxi=$269;
 var $270=$i;
 var $271=$mod;
 var $272=(($271+180)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+((($270)*(52))&-1))|0);
 $xxs=$274;
 var $275=$mod;
 var $276=$i;
 var $277=_subinstrument_alloc($275,$276,1);
 var $278=($277|0)<0;
 if($278){label=45;break;}else{label=46;break;}
 case 45: 
 label=90;break;
 case 46: 
 var $281=$xxi;
 var $282=(($281+756)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283)|0);
 $sub=$284;
 var $285=$i;
 var $286=(($mh+20)|0);
 var $287=(($286+((($285)*(30))&-1))|0);
 var $288=(($287+22)|0);
 var $289=HEAP16[(($288)>>1)];
 var $290=($289&65535);
 var $291=($290<<1);
 var $292=$xxs;
 var $293=(($292+32)|0);
 HEAP32[(($293)>>2)]=$291;
 var $294=$i;
 var $295=(($mh+20)|0);
 var $296=(($295+((($294)*(30))&-1))|0);
 var $297=(($296+26)|0);
 var $298=HEAP16[(($297)>>1)];
 var $299=($298&65535);
 var $300=($299<<1);
 var $301=$xxs;
 var $302=(($301+36)|0);
 HEAP32[(($302)>>2)]=$300;
 var $303=$xxs;
 var $304=(($303+36)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=$i;
 var $307=(($mh+20)|0);
 var $308=(($307+((($306)*(30))&-1))|0);
 var $309=(($308+28)|0);
 var $310=HEAP16[(($309)>>1)];
 var $311=($310&65535);
 var $312=($311<<1);
 var $313=((($305)+($312))|0);
 var $314=$xxs;
 var $315=(($314+40)|0);
 HEAP32[(($315)>>2)]=$313;
 var $316=$i;
 var $317=(($mh+20)|0);
 var $318=(($317+((($316)*(30))&-1))|0);
 var $319=(($318+28)|0);
 var $320=HEAP16[(($319)>>1)];
 var $321=($320&65535);
 var $322=($321|0)>1;
 var $323=($322?2:0);
 var $324=$xxs;
 var $325=(($324+44)|0);
 HEAP32[(($325)>>2)]=$323;
 var $326=$i;
 var $327=(($mh+20)|0);
 var $328=(($327+((($326)*(30))&-1))|0);
 var $329=(($328+24)|0);
 var $330=HEAP8[($329)];
 var $331=(($330<<24)>>24);
 var $332=$331<<4;
 var $333=(($332)&255);
 var $334=(($333<<24)>>24);
 var $335=$sub;
 var $336=(($335+16)|0);
 HEAP32[(($336)>>2)]=$334;
 var $337=$i;
 var $338=(($mh+20)|0);
 var $339=(($338+((($337)*(30))&-1))|0);
 var $340=(($339+25)|0);
 var $341=HEAP8[($340)];
 var $342=(($341<<24)>>24);
 var $343=$sub;
 var $344=(($343)|0);
 HEAP32[(($344)>>2)]=$342;
 var $345=$sub;
 var $346=(($345+8)|0);
 HEAP32[(($346)>>2)]=128;
 var $347=$i;
 var $348=$sub;
 var $349=(($348+40)|0);
 HEAP32[(($349)>>2)]=$347;
 var $350=$xxi;
 var $351=(($350+40)|0);
 HEAP32[(($351)>>2)]=4095;
 var $352=$xxs;
 var $353=(($352+32)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=($354|0)>0;
 if($355){label=47;break;}else{label=48;break;}
 case 47: 
 var $357=$xxi;
 var $358=(($357+36)|0);
 HEAP32[(($358)>>2)]=1;
 label=48;break;
 case 48: 
 var $360=$mod;
 var $361=$i;
 var $362=$i;
 var $363=(($mh+20)|0);
 var $364=(($363+((($362)*(30))&-1))|0);
 var $365=(($364)|0);
 var $366=(($365)|0);
 var $367=_instrument_name($360,$361,$366,22);
 label=49;break;
 case 49: 
 var $369=$i;
 var $370=((($369)+(1))|0);
 $i=$370;
 label=43;break;
 case 50: 
 var $372=$mod;
 var $373=_pattern_init($372);
 var $374=($373|0)<0;
 if($374){label=51;break;}else{label=52;break;}
 case 51: 
 label=90;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 $i=0;
 label=55;break;
 case 55: 
 var $380=$i;
 var $381=$mod;
 var $382=(($381+128)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($380|0)<($383|0);
 if($384){label=56;break;}else{label=72;break;}
 case 56: 
 var $386=$mod;
 var $387=$i;
 var $388=_pattern_tracks_alloc($386,$387,64);
 var $389=($388|0)<0;
 if($389){label=57;break;}else{label=58;break;}
 case 57: 
 label=90;break;
 case 58: 
 $j=0;
 label=59;break;
 case 59: 
 var $393=$j;
 var $394=($393|0)<256;
 if($394){label=60;break;}else{label=62;break;}
 case 60: 
 var $396=$j;
 var $397=(((($396|0))/(4))&-1);
 var $398=$j;
 var $399=(((($398|0))%(4))&-1);
 var $400=$i;
 var $401=$2;
 var $402=(($401)|0);
 var $403=(($402+168)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=(($404+($400<<2))|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=(($406+4)|0);
 var $408=(($407+($399<<2))|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=$2;
 var $411=(($410)|0);
 var $412=(($411+172)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=(($413+($409<<2))|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=(($415+4)|0);
 var $417=(($416+($397<<3))|0);
 $event=$417;
 var $418=(($mod_event)|0);
 var $419=$3;
 var $420=_hio_read($418,1,4,$419);
 var $421=$event;
 var $422=(($mod_event)|0);
 _decode_noisetracker_event($421,$422);
 label=61;break;
 case 61: 
 var $424=$j;
 var $425=((($424)+(1))|0);
 $j=$425;
 label=59;break;
 case 62: 
 var $427=$mod;
 var $428=(($427+136)|0);
 var $429=HEAP32[(($428)>>2)];
 var $430=($429|0)>4;
 if($430){label=63;break;}else{label=70;break;}
 case 63: 
 $j=0;
 label=64;break;
 case 64: 
 var $433=$j;
 var $434=($433|0)<256;
 if($434){label=65;break;}else{label=69;break;}
 case 65: 
 var $436=$j;
 var $437=(((($436|0))/(4))&-1);
 var $438=$j;
 var $439=(((($438|0))%(4))&-1);
 var $440=((($439)+(4))|0);
 var $441=$i;
 var $442=$2;
 var $443=(($442)|0);
 var $444=(($443+168)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(($445+($441<<2))|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=(($447+4)|0);
 var $449=(($448+($440<<2))|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=$2;
 var $452=(($451)|0);
 var $453=(($452+172)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=(($454+($450<<2))|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($456+4)|0);
 var $458=(($457+($437<<3))|0);
 $event=$458;
 var $459=(($mod_event)|0);
 var $460=$3;
 var $461=_hio_read($459,1,4,$460);
 var $462=$event;
 var $463=(($mod_event)|0);
 _decode_noisetracker_event($462,$463);
 var $464=$event;
 var $465=(($464+3)|0);
 var $466=HEAP8[($465)];
 var $467=($466&255);
 var $468=($467|0)==14;
 if($468){label=66;break;}else{label=67;break;}
 case 66: 
 var $470=$event;
 var $471=(($470+4)|0);
 HEAP8[($471)]=0;
 var $472=$event;
 var $473=(($472+3)|0);
 HEAP8[($473)]=0;
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 var $476=$j;
 var $477=((($476)+(1))|0);
 $j=$477;
 label=64;break;
 case 69: 
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 var $481=$i;
 var $482=((($481)+(1))|0);
 $i=$482;
 label=55;break;
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 $i=0;
 label=75;break;
 case 75: 
 var $487=$i;
 var $488=$mod;
 var $489=(($488+144)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=($487|0)<($490|0);
 if($491){label=76;break;}else{label=87;break;}
 case 76: 
 var $493=$i;
 var $494=$mod;
 var $495=(($494+180)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($496+((($493)*(52))&-1))|0);
 var $498=(($497+32)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)==0;
 if($500){label=77;break;}else{label=83;break;}
 case 77: 
 var $502=$am_synth;
 var $503=($502|0)!=0;
 if($503){label=78;break;}else{label=82;break;}
 case 78: 
 var $505=$nt;
 var $506=$i;
 var $507=_is_am_instrument($505,$506);
 var $508=($507|0)!=0;
 if($508){label=79;break;}else{label=82;break;}
 case 79: 
 var $510=$2;
 var $511=$nt;
 var $512=$i;
 var $513=_read_am_instrument($510,$511,$512);
 var $514=($513|0)<0;
 if($514){label=80;break;}else{label=81;break;}
 case 80: 
 label=90;break;
 case 81: 
 label=82;break;
 case 82: 
 label=86;break;
 case 83: 
 var $519=$2;
 var $520=$3;
 var $521=$i;
 var $522=$mod;
 var $523=(($522+180)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(($524+((($521)*(52))&-1))|0);
 var $526=_load_sample($519,$520,512,$525,0);
 var $527=($526|0)<0;
 if($527){label=84;break;}else{label=85;break;}
 case 84: 
 label=90;break;
 case 85: 
 label=86;break;
 case 86: 
 var $531=$i;
 var $532=((($531)+(1))|0);
 $i=$532;
 label=75;break;
 case 87: 
 var $534=$nt;
 var $535=($534|0)!=0;
 if($535){label=88;break;}else{label=89;break;}
 case 88: 
 var $537=$nt;
 var $538=_fclose($537);
 label=89;break;
 case 89: 
 $1=0;
 label=93;break;
 case 90: 
 var $541=$nt;
 var $542=($541|0)!=0;
 if($542){label=91;break;}else{label=92;break;}
 case 91: 
 var $544=$nt;
 var $545=_fclose($544);
 label=92;break;
 case 92: 
 $1=-1;
 label=93;break;
 case 93: 
 var $548=$1;
 STACKTOP=sp;return $548;
  default: assert(0, "bad label: " + label);
 }
}
function _is_am_instrument($nt,$i){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 var $wf;
 $2=$nt;
 $3=$i;
 var $4=$2;
 var $5=$3;
 var $6=((($5)*(120))&-1);
 var $7=((($6)+(144))|0);
 var $8=_fseek($4,$7,0);
 var $9=(($buf)|0);
 var $10=$2;
 var $11=_fread($9,1,2,$10);
 var $12=($11>>>0)<2;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 var $15=(($buf)|0);
 var $16=_memcmp($15,26768,2);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=9;break;
 case 5: 
 var $20=$2;
 var $21=_fseek($20,24,1);
 var $22=$2;
 var $23=_read16b($22);
 $wf=$23;
 var $24=$wf;
 var $25=(($24<<16)>>16);
 var $26=($25|0)<0;
 if($26){label=7;break;}else{label=6;break;}
 case 6: 
 var $28=$wf;
 var $29=(($28<<16)>>16);
 var $30=($29|0)>3;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=9;break;
 case 8: 
 $1=1;
 label=9;break;
 case 9: 
 var $34=$1;
 STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _read_am_instrument($m,$nt,$i){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1056)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $xxi;
 var $xxs;
 var $vol_env;
 var $freq_env;
 var $am=sp;
 var $wave;
 var $a;
 var $b;
 var $am_noise=(sp)+(32);
 var $j;
 $2=$m;
 $3=$nt;
 $4=$i;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$4;
 var $8=$mod;
 var $9=(($8+176)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+((($7)*(764))&-1))|0);
 $xxi=$11;
 var $12=$4;
 var $13=$mod;
 var $14=(($13+180)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+((($12)*(52))&-1))|0);
 $xxs=$16;
 var $17=$xxi;
 var $18=(($17+44)|0);
 $vol_env=$18;
 var $19=$xxi;
 var $20=(($19+356)|0);
 $freq_env=$20;
 var $21=$3;
 var $22=$4;
 var $23=((($22)*(120))&-1);
 var $24=((($23)+(144))|0);
 var $25=((($24)+(2))|0);
 var $26=((($25)+(4))|0);
 var $27=_fseek($21,$26,0);
 var $28=$3;
 var $29=_read16b($28);
 var $30=(($am)|0);
 HEAP16[(($30)>>1)]=$29;
 var $31=$3;
 var $32=_read16b($31);
 var $33=(($am+2)|0);
 HEAP16[(($33)>>1)]=$32;
 var $34=$3;
 var $35=_read16b($34);
 var $36=(($am+4)|0);
 HEAP16[(($36)>>1)]=$35;
 var $37=$3;
 var $38=_read16b($37);
 var $39=(($am+6)|0);
 HEAP16[(($39)>>1)]=$38;
 var $40=$3;
 var $41=_read16b($40);
 var $42=(($am+8)|0);
 HEAP16[(($42)>>1)]=$41;
 var $43=$3;
 var $44=_read16b($43);
 var $45=(($am+10)|0);
 HEAP16[(($45)>>1)]=$44;
 var $46=$3;
 var $47=_read16b($46);
 var $48=(($am+12)|0);
 HEAP16[(($48)>>1)]=$47;
 var $49=$3;
 var $50=_read16b($49);
 var $51=(($am+14)|0);
 HEAP16[(($51)>>1)]=$50;
 var $52=$3;
 var $53=_read16b($52);
 var $54=$3;
 var $55=_read16b($54);
 var $56=(($am+16)|0);
 HEAP16[(($56)>>1)]=$55;
 var $57=$3;
 var $58=_read16b($57);
 var $59=(($am+18)|0);
 HEAP16[(($59)>>1)]=$58;
 var $60=$3;
 var $61=_read16b($60);
 var $62=(($61<<16)>>16);
 var $63=(((-$62))|0);
 var $64=(($63)&65535);
 var $65=(($am+20)|0);
 HEAP16[(($65)>>1)]=$64;
 var $66=$3;
 var $67=_read16b($66);
 var $68=(($am+22)|0);
 HEAP16[(($68)>>1)]=$67;
 var $69=$3;
 var $70=_read16b($69);
 var $71=(($am+24)|0);
 HEAP16[(($71)>>1)]=$70;
 var $72=$3;
 var $73=_read16b($72);
 var $74=(($am+26)|0);
 HEAP16[(($74)>>1)]=$73;
 var $75=(($am+18)|0);
 var $76=HEAP16[(($75)>>1)];
 var $77=(($76<<16)>>16);
 var $78=($77|0)<3;
 if($78){label=2;break;}else{label=3;break;}
 case 2: 
 var $80=$xxs;
 var $81=(($80+32)|0);
 HEAP32[(($81)>>2)]=32;
 var $82=$xxs;
 var $83=(($82+36)|0);
 HEAP32[(($83)>>2)]=0;
 var $84=$xxs;
 var $85=(($84+40)|0);
 HEAP32[(($85)>>2)]=32;
 var $86=(($am+18)|0);
 var $87=HEAP16[(($86)>>1)];
 var $88=(($87<<16)>>16);
 var $89=((19928+($88<<5))|0);
 var $90=(($89)|0);
 $wave=$90;
 label=8;break;
 case 3: 
 var $92=$xxs;
 var $93=(($92+32)|0);
 HEAP32[(($93)>>2)]=1024;
 var $94=$xxs;
 var $95=(($94+36)|0);
 HEAP32[(($95)>>2)]=0;
 var $96=$xxs;
 var $97=(($96+40)|0);
 HEAP32[(($97)>>2)]=1024;
 $j=0;
 label=4;break;
 case 4: 
 var $99=$j;
 var $100=($99|0)<1024;
 if($100){label=5;break;}else{label=7;break;}
 case 5: 
 var $102=_rand();
 var $103=(((($102|0))%(256))&-1);
 var $104=(($103)&255);
 var $105=$j;
 var $106=(($am_noise+$105)|0);
 HEAP8[($106)]=$104;
 label=6;break;
 case 6: 
 var $108=$j;
 var $109=((($108)+(1))|0);
 $j=$109;
 label=4;break;
 case 7: 
 var $111=(($am_noise)|0);
 $wave=$111;
 label=8;break;
 case 8: 
 var $113=$xxs;
 var $114=(($113+44)|0);
 HEAP32[(($114)>>2)]=2;
 var $115=$xxi;
 var $116=(($115+756)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117)|0);
 var $119=(($118)|0);
 HEAP32[(($119)>>2)]=64;
 var $120=$xxi;
 var $121=(($120+36)|0);
 HEAP32[(($121)>>2)]=1;
 var $122=(($am+26)|0);
 var $123=HEAP16[(($122)>>1)];
 var $124=(($123<<16)>>16);
 var $125=((($124)*(-12))&-1);
 var $126=$xxi;
 var $127=(($126+756)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128)|0);
 var $130=(($129+12)|0);
 HEAP32[(($130)>>2)]=$125;
 var $131=$xxi;
 var $132=(($131+756)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133)|0);
 var $135=(($134+20)|0);
 HEAP32[(($135)>>2)]=0;
 var $136=(($am+22)|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=(($137<<16)>>16);
 var $139=$xxi;
 var $140=(($139+756)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141)|0);
 var $143=(($142+24)|0);
 HEAP32[(($143)>>2)]=$138;
 var $144=(($am+24)|0);
 var $145=HEAP16[(($144)>>1)];
 var $146=(($145<<16)>>16);
 var $147=$xxi;
 var $148=(($147+756)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149)|0);
 var $151=(($150+28)|0);
 HEAP32[(($151)>>2)]=$146;
 var $152=(($am+4)|0);
 var $153=HEAP16[(($152)>>1)];
 var $154=(($153<<16)>>16);
 var $155=($154|0)==0;
 if($155){label=9;break;}else{label=10;break;}
 case 9: 
 var $157=(($am+4)|0);
 HEAP16[(($157)>>1)]=1;
 label=10;break;
 case 10: 
 var $159=(($am+8)|0);
 var $160=HEAP16[(($159)>>1)];
 var $161=(($160<<16)>>16);
 var $162=($161|0)==0;
 if($162){label=11;break;}else{label=12;break;}
 case 11: 
 var $164=(($am+8)|0);
 HEAP16[(($164)>>1)]=1;
 label=12;break;
 case 12: 
 var $166=(($am+12)|0);
 var $167=HEAP16[(($166)>>1)];
 var $168=(($167<<16)>>16);
 var $169=($168|0)==0;
 if($169){label=13;break;}else{label=14;break;}
 case 13: 
 var $171=(($am+12)|0);
 HEAP16[(($171)>>1)]=1;
 label=14;break;
 case 14: 
 var $173=(($am+16)|0);
 var $174=HEAP16[(($173)>>1)];
 var $175=(($174<<16)>>16);
 var $176=($175|0)==0;
 if($176){label=15;break;}else{label=16;break;}
 case 15: 
 var $178=(($am+16)|0);
 HEAP16[(($178)>>1)]=1;
 label=16;break;
 case 16: 
 var $180=$vol_env;
 var $181=(($180+4)|0);
 HEAP32[(($181)>>2)]=6;
 var $182=$vol_env;
 var $183=(($182)|0);
 HEAP32[(($183)>>2)]=1;
 var $184=$vol_env;
 var $185=(($184+28)|0);
 var $186=(($185)|0);
 HEAP16[(($186)>>1)]=0;
 var $187=(($am)|0);
 var $188=HEAP16[(($187)>>1)];
 var $189=(($188<<16)>>16);
 var $190=(((($189|0))/(4))&-1);
 var $191=(($190)&65535);
 var $192=$vol_env;
 var $193=(($192+28)|0);
 var $194=(($193+2)|0);
 HEAP16[(($194)>>1)]=$191;
 var $195=(($am+2)|0);
 var $196=HEAP16[(($195)>>1)];
 var $197=(($196<<16)>>16);
 var $198=(($am)|0);
 var $199=HEAP16[(($198)>>1)];
 var $200=(($199<<16)>>16);
 var $201=($197|0)>($200|0);
 if($201){label=17;break;}else{label=18;break;}
 case 17: 
 var $203=(($am+2)|0);
 var $204=HEAP16[(($203)>>1)];
 var $205=(($204<<16)>>16);
 var $206=(($am)|0);
 var $207=HEAP16[(($206)>>1)];
 var $208=(($207<<16)>>16);
 var $209=((($205)-($208))|0);
 $a=$209;
 var $210=(($am)|0);
 var $211=HEAP16[(($210)>>1)];
 var $212=(($211<<16)>>16);
 var $213=(((256)-($212))|0);
 $b=$213;
 label=19;break;
 case 18: 
 var $215=(($am)|0);
 var $216=HEAP16[(($215)>>1)];
 var $217=(($216<<16)>>16);
 var $218=(($am+2)|0);
 var $219=HEAP16[(($218)>>1)];
 var $220=(($219<<16)>>16);
 var $221=((($217)-($220))|0);
 $a=$221;
 var $222=(($am)|0);
 var $223=HEAP16[(($222)>>1)];
 var $224=(($223<<16)>>16);
 $b=$224;
 label=19;break;
 case 19: 
 var $226=$b;
 var $227=($226|0)==0;
 if($227){label=20;break;}else{label=21;break;}
 case 20: 
 $b=1;
 label=21;break;
 case 21: 
 var $230=$vol_env;
 var $231=(($230+28)|0);
 var $232=(($231)|0);
 var $233=HEAP16[(($232)>>1)];
 var $234=(($233<<16)>>16);
 var $235=$a;
 var $236=($235<<8);
 var $237=(($am+4)|0);
 var $238=HEAP16[(($237)>>1)];
 var $239=(($238<<16)>>16);
 var $240=$b;
 var $241=(Math_imul($239,$240)|0);
 var $242=(((($236|0))/(($241|0)))&-1);
 var $243=((($234)+($242))|0);
 var $244=(($243)&65535);
 var $245=$vol_env;
 var $246=(($245+28)|0);
 var $247=(($246+4)|0);
 HEAP16[(($247)>>1)]=$244;
 var $248=(($am+2)|0);
 var $249=HEAP16[(($248)>>1)];
 var $250=(($249<<16)>>16);
 var $251=(((($250|0))/(4))&-1);
 var $252=(($251)&65535);
 var $253=$vol_env;
 var $254=(($253+28)|0);
 var $255=(($254+6)|0);
 HEAP16[(($255)>>1)]=$252;
 var $256=(($am+6)|0);
 var $257=HEAP16[(($256)>>1)];
 var $258=(($257<<16)>>16);
 var $259=(($am+2)|0);
 var $260=HEAP16[(($259)>>1)];
 var $261=(($260<<16)>>16);
 var $262=($258|0)>($261|0);
 if($262){label=22;break;}else{label=23;break;}
 case 22: 
 var $264=(($am+6)|0);
 var $265=HEAP16[(($264)>>1)];
 var $266=(($265<<16)>>16);
 var $267=(($am+2)|0);
 var $268=HEAP16[(($267)>>1)];
 var $269=(($268<<16)>>16);
 var $270=((($266)-($269))|0);
 $a=$270;
 var $271=(($am+2)|0);
 var $272=HEAP16[(($271)>>1)];
 var $273=(($272<<16)>>16);
 var $274=(((256)-($273))|0);
 $b=$274;
 label=24;break;
 case 23: 
 var $276=(($am+2)|0);
 var $277=HEAP16[(($276)>>1)];
 var $278=(($277<<16)>>16);
 var $279=(($am+6)|0);
 var $280=HEAP16[(($279)>>1)];
 var $281=(($280<<16)>>16);
 var $282=((($278)-($281))|0);
 $a=$282;
 var $283=(($am+2)|0);
 var $284=HEAP16[(($283)>>1)];
 var $285=(($284<<16)>>16);
 $b=$285;
 label=24;break;
 case 24: 
 var $287=$b;
 var $288=($287|0)==0;
 if($288){label=25;break;}else{label=26;break;}
 case 25: 
 $b=1;
 label=26;break;
 case 26: 
 var $291=$vol_env;
 var $292=(($291+28)|0);
 var $293=(($292+4)|0);
 var $294=HEAP16[(($293)>>1)];
 var $295=(($294<<16)>>16);
 var $296=$a;
 var $297=($296<<8);
 var $298=(($am+8)|0);
 var $299=HEAP16[(($298)>>1)];
 var $300=(($299<<16)>>16);
 var $301=$b;
 var $302=(Math_imul($300,$301)|0);
 var $303=(((($297|0))/(($302|0)))&-1);
 var $304=((($295)+($303))|0);
 var $305=(($304)&65535);
 var $306=$vol_env;
 var $307=(($306+28)|0);
 var $308=(($307+8)|0);
 HEAP16[(($308)>>1)]=$305;
 var $309=(($am+6)|0);
 var $310=HEAP16[(($309)>>1)];
 var $311=(($310<<16)>>16);
 var $312=(((($311|0))/(4))&-1);
 var $313=(($312)&65535);
 var $314=$vol_env;
 var $315=(($314+28)|0);
 var $316=(($315+10)|0);
 HEAP16[(($316)>>1)]=$313;
 var $317=(($am+10)|0);
 var $318=HEAP16[(($317)>>1)];
 var $319=(($318<<16)>>16);
 var $320=(($am+6)|0);
 var $321=HEAP16[(($320)>>1)];
 var $322=(($321<<16)>>16);
 var $323=($319|0)>($322|0);
 if($323){label=27;break;}else{label=28;break;}
 case 27: 
 var $325=(($am+10)|0);
 var $326=HEAP16[(($325)>>1)];
 var $327=(($326<<16)>>16);
 var $328=(($am+6)|0);
 var $329=HEAP16[(($328)>>1)];
 var $330=(($329<<16)>>16);
 var $331=((($327)-($330))|0);
 $a=$331;
 var $332=(($am+6)|0);
 var $333=HEAP16[(($332)>>1)];
 var $334=(($333<<16)>>16);
 var $335=(((256)-($334))|0);
 $b=$335;
 label=29;break;
 case 28: 
 var $337=(($am+6)|0);
 var $338=HEAP16[(($337)>>1)];
 var $339=(($338<<16)>>16);
 var $340=(($am+10)|0);
 var $341=HEAP16[(($340)>>1)];
 var $342=(($341<<16)>>16);
 var $343=((($339)-($342))|0);
 $a=$343;
 var $344=(($am+6)|0);
 var $345=HEAP16[(($344)>>1)];
 var $346=(($345<<16)>>16);
 $b=$346;
 label=29;break;
 case 29: 
 var $348=$b;
 var $349=($348|0)==0;
 if($349){label=30;break;}else{label=31;break;}
 case 30: 
 $b=1;
 label=31;break;
 case 31: 
 var $352=$vol_env;
 var $353=(($352+28)|0);
 var $354=(($353+8)|0);
 var $355=HEAP16[(($354)>>1)];
 var $356=(($355<<16)>>16);
 var $357=$a;
 var $358=($357<<8);
 var $359=(($am+12)|0);
 var $360=HEAP16[(($359)>>1)];
 var $361=(($360<<16)>>16);
 var $362=$b;
 var $363=(Math_imul($361,$362)|0);
 var $364=(((($358|0))/(($363|0)))&-1);
 var $365=((($356)+($364))|0);
 var $366=(($365)&65535);
 var $367=$vol_env;
 var $368=(($367+28)|0);
 var $369=(($368+12)|0);
 HEAP16[(($369)>>1)]=$366;
 var $370=(($am+10)|0);
 var $371=HEAP16[(($370)>>1)];
 var $372=(($371<<16)>>16);
 var $373=(((($372|0))/(4))&-1);
 var $374=(($373)&65535);
 var $375=$vol_env;
 var $376=(($375+28)|0);
 var $377=(($376+14)|0);
 HEAP16[(($377)>>1)]=$374;
 var $378=$vol_env;
 var $379=(($378+28)|0);
 var $380=(($379+12)|0);
 var $381=HEAP16[(($380)>>1)];
 var $382=(($381<<16)>>16);
 var $383=(($am+14)|0);
 var $384=HEAP16[(($383)>>1)];
 var $385=(($384<<16)>>16);
 var $386=((($382)+($385))|0);
 var $387=(($386)&65535);
 var $388=$vol_env;
 var $389=(($388+28)|0);
 var $390=(($389+16)|0);
 HEAP16[(($390)>>1)]=$387;
 var $391=(($am+10)|0);
 var $392=HEAP16[(($391)>>1)];
 var $393=(($392<<16)>>16);
 var $394=(((($393|0))/(4))&-1);
 var $395=(($394)&65535);
 var $396=$vol_env;
 var $397=(($396+28)|0);
 var $398=(($397+18)|0);
 HEAP16[(($398)>>1)]=$395;
 var $399=$vol_env;
 var $400=(($399+28)|0);
 var $401=(($400+16)|0);
 var $402=HEAP16[(($401)>>1)];
 var $403=(($402<<16)>>16);
 var $404=(($am+16)|0);
 var $405=HEAP16[(($404)>>1)];
 var $406=(($405<<16)>>16);
 var $407=(((256)/(($406|0)))&-1);
 var $408=((($403)+($407))|0);
 var $409=(($408)&65535);
 var $410=$vol_env;
 var $411=(($410+28)|0);
 var $412=(($411+20)|0);
 HEAP16[(($412)>>1)]=$409;
 var $413=$vol_env;
 var $414=(($413+28)|0);
 var $415=(($414+22)|0);
 HEAP16[(($415)>>1)]=0;
 var $416=(($am+20)|0);
 var $417=HEAP16[(($416)>>1)];
 var $418=(($417<<16)>>16)!=0;
 if($418){label=32;break;}else{label=33;break;}
 case 32: 
 var $420=$freq_env;
 var $421=(($420+4)|0);
 HEAP32[(($421)>>2)]=2;
 var $422=$freq_env;
 var $423=(($422)|0);
 HEAP32[(($423)>>2)]=1;
 var $424=$freq_env;
 var $425=(($424+28)|0);
 var $426=(($425)|0);
 HEAP16[(($426)>>1)]=0;
 var $427=$freq_env;
 var $428=(($427+28)|0);
 var $429=(($428+2)|0);
 HEAP16[(($429)>>1)]=0;
 var $430=(($am+20)|0);
 var $431=HEAP16[(($430)>>1)];
 var $432=(($431<<16)>>16);
 var $433=Math_abs($432);
 var $434=(((1024)/(($433|0)))&-1);
 var $435=(($434)&65535);
 var $436=$freq_env;
 var $437=(($436+28)|0);
 var $438=(($437+4)|0);
 HEAP16[(($438)>>1)]=$435;
 var $439=(($am+20)|0);
 var $440=HEAP16[(($439)>>1)];
 var $441=(($440<<16)>>16);
 var $442=($441|0)<0;
 var $443=($442?-256:256);
 var $444=((($443)*(10))&-1);
 var $445=(($444)&65535);
 var $446=$freq_env;
 var $447=(($446+28)|0);
 var $448=(($447+6)|0);
 HEAP16[(($448)>>1)]=$445;
 label=33;break;
 case 33: 
 var $450=$2;
 var $451=$xxs;
 var $452=$wave;
 var $453=_load_sample($450,0,16,$451,$452);
 var $454=($453|0)!=0;
 if($454){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=36;break;
 case 35: 
 $1=0;
 label=36;break;
 case 36: 
 var $458=$1;
 STACKTOP=sp;return $458;
  default: assert(0, "bad label: " + label);
 }
}
function _fnk_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $a;
 var $b;
 var $size;
 var $st=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1182101099;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=13;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read8($10);
 var $12=$2;
 var $13=_hio_read8($12);
 $a=$13;
 var $14=$2;
 var $15=_hio_read8($14);
 $b=$15;
 var $16=$2;
 var $17=_hio_read8($16);
 var $18=$a;
 var $19=($18&255);
 var $20=$19>>1;
 var $21=($20|0)<10;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=13;break;
 case 5: 
 var $24=$b;
 var $25=($24&255);
 var $26=$25&240;
 var $27=$26>>4;
 var $28=($27|0)>7;
 if($28){label=7;break;}else{label=6;break;}
 case 6: 
 var $30=$b;
 var $31=($30&255);
 var $32=$31&15;
 var $33=($32|0)>9;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=13;break;
 case 8: 
 var $36=$2;
 var $37=_hio_read32l($36);
 $size=$37;
 var $38=$size;
 var $39=($38|0)<1024;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=13;break;
 case 10: 
 var $42=$2;
 var $43=_hio_stat($42,$st);
 var $44=$size;
 var $45=(($st+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($44|0)!=($46|0);
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=13;break;
 case 12: 
 var $50=$2;
 var $51=$3;
 _read_title($50,$51,0);
 $1=0;
 label=13;break;
 case 13: 
 var $53=$1;
 STACKTOP=sp;return $53;
  default: assert(0, "bad label: " + label);
 }
}
function _fnk_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2720)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $day;
 var $month;
 var $year;
 var $event;
 var $ffh=sp;
 var $ev=(sp)+(2712);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($ffh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,4,1,$14);
 var $16=(($ffh+4)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,4,1,$18);
 var $20=$3;
 var $21=_hio_read32l($20);
 var $22=(($ffh+8)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($ffh+12)|0);
 var $24=$23;
 var $25=$3;
 var $26=_hio_read($24,4,1,$25);
 var $27=$3;
 var $28=_hio_read8($27);
 var $29=(($ffh+16)|0);
 HEAP8[($29)]=$28;
 var $30=(($ffh+17)|0);
 var $31=$30;
 var $32=$3;
 var $33=_hio_read($31,256,1,$32);
 var $34=(($ffh+273)|0);
 var $35=$34;
 var $36=$3;
 var $37=_hio_read($35,128,1,$36);
 $i=0;
 label=4;break;
 case 4: 
 var $39=$i;
 var $40=($39|0)<64;
 if($40){label=5;break;}else{label=7;break;}
 case 5: 
 var $42=$i;
 var $43=(($ffh+404)|0);
 var $44=(($43+((($42)*(36))&-1))|0);
 var $45=(($44)|0);
 var $46=$45;
 var $47=$3;
 var $48=_hio_read($46,19,1,$47);
 var $49=$3;
 var $50=_hio_read32l($49);
 var $51=$i;
 var $52=(($ffh+404)|0);
 var $53=(($52+((($51)*(36))&-1))|0);
 var $54=(($53+20)|0);
 HEAP32[(($54)>>2)]=$50;
 var $55=$3;
 var $56=_hio_read32l($55);
 var $57=$i;
 var $58=(($ffh+404)|0);
 var $59=(($58+((($57)*(36))&-1))|0);
 var $60=(($59+24)|0);
 HEAP32[(($60)>>2)]=$56;
 var $61=$3;
 var $62=_hio_read8($61);
 var $63=$i;
 var $64=(($ffh+404)|0);
 var $65=(($64+((($63)*(36))&-1))|0);
 var $66=(($65+28)|0);
 HEAP8[($66)]=$62;
 var $67=$3;
 var $68=_hio_read8($67);
 var $69=$i;
 var $70=(($ffh+404)|0);
 var $71=(($70+((($69)*(36))&-1))|0);
 var $72=(($71+29)|0);
 HEAP8[($72)]=$68;
 var $73=$3;
 var $74=_hio_read8($73);
 var $75=$i;
 var $76=(($ffh+404)|0);
 var $77=(($76+((($75)*(36))&-1))|0);
 var $78=(($77+30)|0);
 HEAP8[($78)]=$74;
 var $79=$3;
 var $80=_hio_read8($79);
 var $81=$i;
 var $82=(($ffh+404)|0);
 var $83=(($82+((($81)*(36))&-1))|0);
 var $84=(($83+31)|0);
 HEAP8[($84)]=$80;
 var $85=$3;
 var $86=_hio_read8($85);
 var $87=$i;
 var $88=(($ffh+404)|0);
 var $89=(($88+((($87)*(36))&-1))|0);
 var $90=(($89+32)|0);
 HEAP8[($90)]=$86;
 label=6;break;
 case 6: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=4;break;
 case 7: 
 var $95=(($ffh+4)|0);
 var $96=(($95)|0);
 var $97=HEAP8[($96)];
 var $98=($97&255);
 var $99=$98&31;
 $day=$99;
 var $100=(($ffh+4)|0);
 var $101=(($100+1)|0);
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=$104<<3;
 var $106=(($ffh+4)|0);
 var $107=(($106)|0);
 var $108=HEAP8[($107)];
 var $109=($108&255);
 var $110=$109&224;
 var $111=$110>>5;
 var $112=$105|$111;
 $month=$112;
 var $113=(($ffh+4)|0);
 var $114=(($113+1)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=$116&254;
 var $118=$117>>1;
 var $119=((($118)+(1980))|0);
 $year=$119;
 var $120=$mod;
 var $121=(($120+140)|0);
 HEAP32[(($121)>>2)]=64;
 var $122=$mod;
 var $123=(($122+144)|0);
 HEAP32[(($123)>>2)]=64;
 $i=0;
 label=8;break;
 case 8: 
 var $125=$i;
 var $126=($125|0)<256;
 if($126){label=9;break;}else{var $135=0;label=10;break;}
 case 9: 
 var $128=$i;
 var $129=(($ffh+17)|0);
 var $130=(($129+$128)|0);
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=($132|0)!=255;
 var $135=$133;label=10;break;
 case 10: 
 var $135;
 if($135){label=11;break;}else{label=15;break;}
 case 11: 
 var $137=$i;
 var $138=(($ffh+17)|0);
 var $139=(($138+$137)|0);
 var $140=HEAP8[($139)];
 var $141=($140&255);
 var $142=$mod;
 var $143=(($142+128)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($141|0)>($144|0);
 if($145){label=12;break;}else{label=13;break;}
 case 12: 
 var $147=$i;
 var $148=(($ffh+17)|0);
 var $149=(($148+$147)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 var $152=$mod;
 var $153=(($152+128)|0);
 HEAP32[(($153)>>2)]=$151;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $156=$i;
 var $157=((($156)+(1))|0);
 $i=$157;
 label=8;break;
 case 15: 
 var $159=$mod;
 var $160=(($159+128)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=((($161)+(1))|0);
 HEAP32[(($160)>>2)]=$162;
 var $163=$i;
 var $164=$mod;
 var $165=(($164+156)|0);
 HEAP32[(($165)>>2)]=$163;
 var $166=$mod;
 var $167=(($166+952)|0);
 var $168=$167;
 var $169=(($ffh+17)|0);
 var $170=$169;
 var $171=$mod;
 var $172=(($171+156)|0);
 var $173=HEAP32[(($172)>>2)];
 assert($173 % 1 === 0);(_memcpy($168, $170, $173)|0);
 var $174=$mod;
 var $175=(($174+148)|0);
 HEAP32[(($175)>>2)]=4;
 var $176=$mod;
 var $177=(($176+152)|0);
 HEAP32[(($177)>>2)]=125;
 var $178=$mod;
 var $179=(($178+136)|0);
 HEAP32[(($179)>>2)]=0;
 var $180=(($ffh+12)|0);
 var $181=(($180)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=($183|0)==70;
 if($184){label=16;break;}else{label=21;break;}
 case 16: 
 var $186=(($ffh+12)|0);
 var $187=(($186+1)|0);
 var $188=HEAP8[($187)];
 var $189=($188&255);
 var $190=($189|0)==50;
 if($190){label=17;break;}else{label=21;break;}
 case 17: 
 var $192=(($ffh+4)|0);
 var $193=(($192+3)|0);
 var $194=HEAP8[($193)];
 var $195=(($194<<24)>>24);
 var $196=$195>>1;
 var $197=$196&64;
 var $198=($197|0)!=0;
 if($198){label=18;break;}else{label=19;break;}
 case 18: 
 var $200=(($ffh+4)|0);
 var $201=(($200+3)|0);
 var $202=HEAP8[($201)];
 var $203=($202&255);
 var $204=$203>>1;
 var $205=$204&63;
 var $206=$mod;
 var $207=(($206+152)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=((($208)-($205))|0);
 HEAP32[(($207)>>2)]=$209;
 label=20;break;
 case 19: 
 var $211=(($ffh+4)|0);
 var $212=(($211+3)|0);
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=$214>>1;
 var $216=$215&63;
 var $217=$mod;
 var $218=(($217+152)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=((($219)+($216))|0);
 HEAP32[(($218)>>2)]=$220;
 label=20;break;
 case 20: 
 var $222=$2;
 _set_type($222,27040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=27;break;
 case 21: 
 var $224=(($ffh+12)|0);
 var $225=(($224)|0);
 var $226=HEAP8[($225)];
 var $227=($226&255);
 var $228=($227|0)==70;
 if($228){label=22;break;}else{label=25;break;}
 case 22: 
 var $230=(($ffh+12)|0);
 var $231=(($230+1)|0);
 var $232=HEAP8[($231)];
 var $233=($232&255);
 var $234=($233|0)==118;
 if($234){label=24;break;}else{label=23;break;}
 case 23: 
 var $236=(($ffh+12)|0);
 var $237=(($236+1)|0);
 var $238=HEAP8[($237)];
 var $239=($238&255);
 var $240=($239|0)==107;
 if($240){label=24;break;}else{label=25;break;}
 case 24: 
 var $242=$2;
 _set_type($242,25120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 25: 
 var $244=$mod;
 var $245=(($244+136)|0);
 HEAP32[(($245)>>2)]=8;
 var $246=$2;
 _set_type($246,25048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $249=$mod;
 var $250=(($249+136)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($251|0)==0;
 if($252){label=28;break;}else{label=35;break;}
 case 28: 
 var $254=(($ffh+12)|0);
 var $255=(($254+2)|0);
 var $256=HEAP8[($255)];
 var $257=($256&255);
 var $258=($257|0)<48;
 if($258){label=32;break;}else{label=29;break;}
 case 29: 
 var $260=(($ffh+12)|0);
 var $261=(($260+2)|0);
 var $262=HEAP8[($261)];
 var $263=($262&255);
 var $264=($263|0)>57;
 if($264){label=32;break;}else{label=30;break;}
 case 30: 
 var $266=(($ffh+12)|0);
 var $267=(($266+3)|0);
 var $268=HEAP8[($267)];
 var $269=($268&255);
 var $270=($269|0)<48;
 if($270){label=32;break;}else{label=31;break;}
 case 31: 
 var $272=(($ffh+12)|0);
 var $273=(($272+3)|0);
 var $274=HEAP8[($273)];
 var $275=($274&255);
 var $276=($275|0)>57;
 if($276){label=32;break;}else{label=33;break;}
 case 32: 
 var $292=8;label=34;break;
 case 33: 
 var $279=(($ffh+12)|0);
 var $280=(($279+2)|0);
 var $281=HEAP8[($280)];
 var $282=($281&255);
 var $283=((($282)-(48))|0);
 var $284=((($283)*(10))&-1);
 var $285=(($ffh+12)|0);
 var $286=(($285+3)|0);
 var $287=HEAP8[($286)];
 var $288=($287&255);
 var $289=((($284)+($288))|0);
 var $290=((($289)-(48))|0);
 var $292=$290;label=34;break;
 case 34: 
 var $292;
 var $293=$mod;
 var $294=(($293+136)|0);
 HEAP32[(($294)>>2)]=$292;
 label=35;break;
 case 35: 
 var $296=$mod;
 var $297=(($296+152)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=($298<<2);
 var $300=(((($299|0))/(5))&-1);
 var $301=$mod;
 var $302=(($301+152)|0);
 HEAP32[(($302)>>2)]=$300;
 var $303=$mod;
 var $304=(($303+136)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=$mod;
 var $307=(($306+128)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(Math_imul($305,$308)|0);
 var $310=$mod;
 var $311=(($310+132)|0);
 HEAP32[(($311)>>2)]=$309;
 var $312=$2;
 var $313=(($312+1280)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=$314|4096;
 HEAP32[(($313)>>2)]=$315;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $324=$mod;
 var $325=_instrument_init($324);
 var $326=($325|0)<0;
 if($326){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=109;break;
 case 45: 
 $i=0;
 label=46;break;
 case 46: 
 var $330=$i;
 var $331=$mod;
 var $332=(($331+140)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=($330|0)<($333|0);
 if($334){label=47;break;}else{label=57;break;}
 case 47: 
 var $336=$mod;
 var $337=$i;
 var $338=_subinstrument_alloc($336,$337,1);
 var $339=($338|0)<0;
 if($339){label=48;break;}else{label=49;break;}
 case 48: 
 $1=-1;
 label=109;break;
 case 49: 
 var $342=$i;
 var $343=(($ffh+404)|0);
 var $344=(($343+((($342)*(36))&-1))|0);
 var $345=(($344+24)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=$i;
 var $348=$mod;
 var $349=(($348+180)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=(($350+((($347)*(52))&-1))|0);
 var $352=(($351+32)|0);
 HEAP32[(($352)>>2)]=$346;
 var $353=$i;
 var $354=(($ffh+404)|0);
 var $355=(($354+((($353)*(36))&-1))|0);
 var $356=(($355+20)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=$i;
 var $359=$mod;
 var $360=(($359+180)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=(($361+((($358)*(52))&-1))|0);
 var $363=(($362+36)|0);
 HEAP32[(($363)>>2)]=$357;
 var $364=$i;
 var $365=$mod;
 var $366=(($365+180)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($367+((($364)*(52))&-1))|0);
 var $369=(($368+36)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=($370|0)==-1;
 if($371){label=50;break;}else{label=51;break;}
 case 50: 
 var $373=$i;
 var $374=$mod;
 var $375=(($374+180)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=(($376+((($373)*(52))&-1))|0);
 var $378=(($377+36)|0);
 HEAP32[(($378)>>2)]=0;
 label=51;break;
 case 51: 
 var $380=$i;
 var $381=(($ffh+404)|0);
 var $382=(($381+((($380)*(36))&-1))|0);
 var $383=(($382+24)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=$i;
 var $386=$mod;
 var $387=(($386+180)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=(($388+((($385)*(52))&-1))|0);
 var $390=(($389+40)|0);
 HEAP32[(($390)>>2)]=$384;
 var $391=$i;
 var $392=(($ffh+404)|0);
 var $393=(($392+((($391)*(36))&-1))|0);
 var $394=(($393+20)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=($395|0)!=-1;
 var $397=($396?2:0);
 var $398=$i;
 var $399=$mod;
 var $400=(($399+180)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=(($401+((($398)*(52))&-1))|0);
 var $403=(($402+44)|0);
 HEAP32[(($403)>>2)]=$397;
 var $404=$i;
 var $405=(($ffh+404)|0);
 var $406=(($405+((($404)*(36))&-1))|0);
 var $407=(($406+28)|0);
 var $408=HEAP8[($407)];
 var $409=($408&255);
 var $410=$i;
 var $411=$mod;
 var $412=(($411+176)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=(($413+((($410)*(764))&-1))|0);
 var $415=(($414+756)|0);
 var $416=HEAP32[(($415)>>2)];
 var $417=(($416)|0);
 var $418=(($417)|0);
 HEAP32[(($418)>>2)]=$409;
 var $419=$i;
 var $420=(($ffh+404)|0);
 var $421=(($420+((($419)*(36))&-1))|0);
 var $422=(($421+29)|0);
 var $423=HEAP8[($422)];
 var $424=($423&255);
 var $425=$i;
 var $426=$mod;
 var $427=(($426+176)|0);
 var $428=HEAP32[(($427)>>2)];
 var $429=(($428+((($425)*(764))&-1))|0);
 var $430=(($429+756)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=(($431)|0);
 var $433=(($432+8)|0);
 HEAP32[(($433)>>2)]=$424;
 var $434=$i;
 var $435=$i;
 var $436=$mod;
 var $437=(($436+176)|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=(($438+((($435)*(764))&-1))|0);
 var $440=(($439+756)|0);
 var $441=HEAP32[(($440)>>2)];
 var $442=(($441)|0);
 var $443=(($442+40)|0);
 HEAP32[(($443)>>2)]=$434;
 var $444=$i;
 var $445=$mod;
 var $446=(($445+180)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=(($447+((($444)*(52))&-1))|0);
 var $449=(($448+32)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=($450|0)>0;
 if($451){label=52;break;}else{label=53;break;}
 case 52: 
 var $453=$i;
 var $454=$mod;
 var $455=(($454+176)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($456+((($453)*(764))&-1))|0);
 var $458=(($457+36)|0);
 HEAP32[(($458)>>2)]=1;
 label=53;break;
 case 53: 
 var $460=$mod;
 var $461=$i;
 var $462=$i;
 var $463=(($ffh+404)|0);
 var $464=(($463+((($462)*(36))&-1))|0);
 var $465=(($464)|0);
 var $466=(($465)|0);
 var $467=_instrument_name($460,$461,$466,19);
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 var $471=$i;
 var $472=((($471)+(1))|0);
 $i=$472;
 label=46;break;
 case 57: 
 var $474=$mod;
 var $475=_pattern_init($474);
 var $476=($475|0)<0;
 if($476){label=58;break;}else{label=59;break;}
 case 58: 
 $1=-1;
 label=109;break;
 case 59: 
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 $i=0;
 label=62;break;
 case 62: 
 var $482=$i;
 var $483=$mod;
 var $484=(($483+128)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($482|0)<($485|0);
 if($486){label=63;break;}else{label=94;break;}
 case 63: 
 var $488=$mod;
 var $489=$i;
 var $490=_pattern_tracks_alloc($488,$489,64);
 var $491=($490|0)<0;
 if($491){label=64;break;}else{label=65;break;}
 case 64: 
 $1=-1;
 label=109;break;
 case 65: 
 var $494=$i;
 var $495=(($ffh+273)|0);
 var $496=(($495+$494)|0);
 var $497=HEAP8[($496)];
 var $498=($497&255);
 var $499=$i;
 var $500=$2;
 var $501=(($500)|0);
 var $502=(($501+168)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=(($503+($499<<2))|0);
 var $505=HEAP32[(($504)>>2)];
 var $506=(($505+4)|0);
 var $507=(($506+4)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=$2;
 var $510=(($509)|0);
 var $511=(($510+172)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($512+($508<<2))|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=(($514+4)|0);
 var $516=(($515+($498<<3))|0);
 var $517=(($516+5)|0);
 HEAP8[($517)]=13;
 $j=0;
 label=66;break;
 case 66: 
 var $519=$j;
 var $520=$mod;
 var $521=(($520+136)|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=($522<<6);
 var $524=($519|0)<($523|0);
 if($524){label=67;break;}else{label=92;break;}
 case 67: 
 var $526=$j;
 var $527=$mod;
 var $528=(($527+136)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=(((($526|0))/(($529|0)))&-1);
 var $531=$j;
 var $532=$mod;
 var $533=(($532+136)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=(((($531|0))%(($534|0)))&-1);
 var $536=$i;
 var $537=$2;
 var $538=(($537)|0);
 var $539=(($538+168)|0);
 var $540=HEAP32[(($539)>>2)];
 var $541=(($540+($536<<2))|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=(($542+4)|0);
 var $544=(($543+($535<<2))|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=$2;
 var $547=(($546)|0);
 var $548=(($547+172)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=(($549+($545<<2))|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=(($551+4)|0);
 var $553=(($552+($530<<3))|0);
 $event=$553;
 var $554=$ev;
 var $555=$3;
 var $556=_hio_read($554,1,3,$555);
 var $557=(($ev)|0);
 var $558=HEAP8[($557)];
 var $559=($558&255);
 var $560=$559>>2;
 if(($560|0)==63|($560|0)==62|($560|0)==61){ label=68;break;}else{label=69;break;}
 case 68: 
 label=70;break;
 case 69: 
 var $563=(($ev)|0);
 var $564=HEAP8[($563)];
 var $565=($564&255);
 var $566=$565>>2;
 var $567=((($566)+(37))|0);
 var $568=(($567)&255);
 var $569=$event;
 var $570=(($569)|0);
 HEAP8[($570)]=$568;
 var $571=(($ev+1)|0);
 var $572=HEAP8[($571)];
 var $573=($572&255);
 var $574=$573&240;
 var $575=$574>>4;
 var $576=((($575)+(1))|0);
 var $577=(($ev)|0);
 var $578=HEAP8[($577)];
 var $579=($578&255);
 var $580=$579&3;
 var $581=$580<<4;
 var $582=((($576)+($581))|0);
 var $583=(($582)&255);
 var $584=$event;
 var $585=(($584+1)|0);
 HEAP8[($585)]=$583;
 var $586=$event;
 var $587=(($586+1)|0);
 var $588=HEAP8[($587)];
 var $589=($588&255);
 var $590=((($589)-(1))|0);
 var $591=(($ffh+404)|0);
 var $592=(($591+((($590)*(36))&-1))|0);
 var $593=(($592+28)|0);
 var $594=HEAP8[($593)];
 var $595=$event;
 var $596=(($595+2)|0);
 HEAP8[($596)]=$594;
 label=70;break;
 case 70: 
 var $598=(($ev+1)|0);
 var $599=HEAP8[($598)];
 var $600=($599&255);
 var $601=$600&15;
 switch(($601|0)){case 0:{ label=71;break;}case 1:{ label=72;break;}case 2:{ label=73;break;}case 3:{ label=74;break;}case 6:{ label=75;break;}case 7:{ label=76;break;}case 11:{ label=77;break;}case 13:{ label=78;break;}case 14:{ label=79;break;}default:{label=90;break;}}break;
 case 71: 
 var $603=$event;
 var $604=(($603+3)|0);
 HEAP8[($604)]=121;
 var $605=(($ev+2)|0);
 var $606=HEAP8[($605)];
 var $607=$event;
 var $608=(($607+4)|0);
 HEAP8[($608)]=$606;
 label=90;break;
 case 72: 
 var $610=$event;
 var $611=(($610+3)|0);
 HEAP8[($611)]=120;
 var $612=(($ev+2)|0);
 var $613=HEAP8[($612)];
 var $614=$event;
 var $615=(($614+4)|0);
 HEAP8[($615)]=$613;
 label=90;break;
 case 73: 
 var $617=$event;
 var $618=(($617+3)|0);
 HEAP8[($618)]=122;
 var $619=(($ev+2)|0);
 var $620=HEAP8[($619)];
 var $621=$event;
 var $622=(($621+4)|0);
 HEAP8[($622)]=$620;
 label=90;break;
 case 74: 
 var $624=$event;
 var $625=(($624+3)|0);
 HEAP8[($625)]=123;
 var $626=(($ev+2)|0);
 var $627=HEAP8[($626)];
 var $628=$event;
 var $629=(($628+4)|0);
 HEAP8[($629)]=$627;
 label=90;break;
 case 75: 
 var $631=$event;
 var $632=(($631+3)|0);
 HEAP8[($632)]=124;
 var $633=(($ev+2)|0);
 var $634=HEAP8[($633)];
 var $635=($634&255);
 var $636=$635<<1;
 var $637=(($636)&255);
 var $638=$event;
 var $639=(($638+4)|0);
 HEAP8[($639)]=$637;
 label=90;break;
 case 76: 
 var $641=$event;
 var $642=(($641+3)|0);
 HEAP8[($642)]=125;
 var $643=(($ev+2)|0);
 var $644=HEAP8[($643)];
 var $645=($644&255);
 var $646=$645<<1;
 var $647=(($646)&255);
 var $648=$event;
 var $649=(($648+4)|0);
 HEAP8[($649)]=$647;
 label=90;break;
 case 77: 
 var $651=$event;
 var $652=(($651+3)|0);
 HEAP8[($652)]=0;
 var $653=(($ev+2)|0);
 var $654=HEAP8[($653)];
 var $655=$event;
 var $656=(($655+4)|0);
 HEAP8[($656)]=$654;
 label=90;break;
 case 78: 
 var $658=$event;
 var $659=(($658+3)|0);
 HEAP8[($659)]=12;
 var $660=(($ev+2)|0);
 var $661=HEAP8[($660)];
 var $662=$event;
 var $663=(($662+4)|0);
 HEAP8[($663)]=$661;
 label=90;break;
 case 79: 
 var $665=(($ev+2)|0);
 var $666=HEAP8[($665)];
 var $667=($666&255);
 var $668=($667|0)==10;
 if($668){label=82;break;}else{label=80;break;}
 case 80: 
 var $670=(($ev+2)|0);
 var $671=HEAP8[($670)];
 var $672=($671&255);
 var $673=($672|0)==11;
 if($673){label=82;break;}else{label=81;break;}
 case 81: 
 var $675=(($ev+2)|0);
 var $676=HEAP8[($675)];
 var $677=($676&255);
 var $678=($677|0)==12;
 if($678){label=82;break;}else{label=83;break;}
 case 82: 
 var $680=$event;
 var $681=(($680+3)|0);
 HEAP8[($681)]=127;
 label=90;break;
 case 83: 
 var $683=(($ev+2)|0);
 var $684=HEAP8[($683)];
 var $685=($684&255);
 var $686=$685&240;
 var $687=$686>>4;
 switch(($687|0)){case 1:{ label=84;break;}case 2:{ label=85;break;}case 13:{ label=86;break;}case 14:{ label=87;break;}case 15:{ label=88;break;}default:{label=89;break;}}break;
 case 84: 
 var $689=$event;
 var $690=(($689+3)|0);
 HEAP8[($690)]=14;
 var $691=(($ev+2)|0);
 var $692=HEAP8[($691)];
 var $693=($692&255);
 var $694=$693&15;
 var $695=192|$694;
 var $696=(($695)&255);
 var $697=$event;
 var $698=(($697+4)|0);
 HEAP8[($698)]=$696;
 label=89;break;
 case 85: 
 var $700=$event;
 var $701=(($700+3)|0);
 HEAP8[($701)]=14;
 var $702=(($ev+2)|0);
 var $703=HEAP8[($702)];
 var $704=($703&255);
 var $705=$704&15;
 var $706=208|$705;
 var $707=(($706)&255);
 var $708=$event;
 var $709=(($708+4)|0);
 HEAP8[($709)]=$707;
 label=89;break;
 case 86: 
 var $711=$event;
 var $712=(($711+3)|0);
 HEAP8[($712)]=14;
 var $713=(($ev+2)|0);
 var $714=HEAP8[($713)];
 var $715=($714&255);
 var $716=$715&15;
 var $717=144|$716;
 var $718=(($717)&255);
 var $719=$event;
 var $720=(($719+4)|0);
 HEAP8[($720)]=$718;
 label=89;break;
 case 87: 
 var $722=$event;
 var $723=(($722+3)|0);
 HEAP8[($723)]=8;
 var $724=(($ev+2)|0);
 var $725=HEAP8[($724)];
 var $726=($725&255);
 var $727=$726&15;
 var $728=$727<<4;
 var $729=((($728)+(8))|0);
 var $730=(($729)&255);
 var $731=$event;
 var $732=(($731+4)|0);
 HEAP8[($732)]=$730;
 label=89;break;
 case 88: 
 var $734=$event;
 var $735=(($734+3)|0);
 HEAP8[($735)]=15;
 var $736=(($ev+2)|0);
 var $737=HEAP8[($736)];
 var $738=($737&255);
 var $739=$738&15;
 var $740=(($739)&255);
 var $741=$event;
 var $742=(($741+4)|0);
 HEAP8[($742)]=$740;
 label=89;break;
 case 89: 
 label=90;break;
 case 90: 
 label=91;break;
 case 91: 
 var $746=$j;
 var $747=((($746)+(1))|0);
 $j=$747;
 label=66;break;
 case 92: 
 label=93;break;
 case 93: 
 var $750=$i;
 var $751=((($750)+(1))|0);
 $i=$751;
 label=62;break;
 case 94: 
 label=95;break;
 case 95: 
 label=96;break;
 case 96: 
 $i=0;
 label=97;break;
 case 97: 
 var $756=$i;
 var $757=$mod;
 var $758=(($757+140)|0);
 var $759=HEAP32[(($758)>>2)];
 var $760=($756|0)<($759|0);
 if($760){label=98;break;}else{label=104;break;}
 case 98: 
 var $762=$i;
 var $763=$mod;
 var $764=(($763+180)|0);
 var $765=HEAP32[(($764)>>2)];
 var $766=(($765+((($762)*(52))&-1))|0);
 var $767=(($766+32)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=($768|0)<=2;
 if($769){label=99;break;}else{label=100;break;}
 case 99: 
 label=103;break;
 case 100: 
 var $772=$2;
 var $773=$3;
 var $774=$i;
 var $775=$mod;
 var $776=(($775+180)|0);
 var $777=HEAP32[(($776)>>2)];
 var $778=(($777+((($774)*(52))&-1))|0);
 var $779=_load_sample($772,$773,0,$778,0);
 var $780=($779|0)<0;
 if($780){label=101;break;}else{label=102;break;}
 case 101: 
 $1=-1;
 label=109;break;
 case 102: 
 label=103;break;
 case 103: 
 var $784=$i;
 var $785=((($784)+(1))|0);
 $i=$785;
 label=97;break;
 case 104: 
 $i=0;
 label=105;break;
 case 105: 
 var $788=$i;
 var $789=$mod;
 var $790=(($789+136)|0);
 var $791=HEAP32[(($790)>>2)];
 var $792=($788|0)<($791|0);
 if($792){label=106;break;}else{label=108;break;}
 case 106: 
 var $794=$i;
 var $795=$mod;
 var $796=(($795+184)|0);
 var $797=(($796+((($794)*(12))&-1))|0);
 var $798=(($797)|0);
 HEAP32[(($798)>>2)]=128;
 label=107;break;
 case 107: 
 var $800=$i;
 var $801=((($800)+(1))|0);
 $i=$801;
 label=105;break;
 case 108: 
 var $803=$2;
 var $804=(($803+1268)|0);
 HEAP32[(($804)>>2)]=255;
 var $805=$2;
 var $806=(($805+1280)|0);
 HEAP32[(($806)>>2)]=64;
 $1=0;
 label=109;break;
 case 109: 
 var $808=$1;
 STACKTOP=sp;return $808;
  default: assert(0, "bad label: " + label);
 }
}
function _gal4_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1380533830;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read32b($10);
 var $12=$2;
 var $13=_hio_read32b($12);
 var $14=($13|0)!=1095583302;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=8;break;
 case 5: 
 var $17=$2;
 var $18=_hio_read32b($17);
 var $19=($18|0)!=1296124238;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=8;break;
 case 7: 
 var $22=$2;
 var $23=_hio_read32b($22);
 var $24=$2;
 var $25=$3;
 _read_title($24,$25,64);
 $1=0;
 label=8;break;
 case 8: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _gal4_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $handle;
 var $i;
 var $ret;
 var $offset;
 var $data=sp;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$3;
 var $15=_hio_read32b($14);
 var $16=$3;
 var $17=_hio_read32b($16);
 var $18=$3;
 var $19=_hio_tell($18);
 $offset=$19;
 var $20=$mod;
 var $21=(($20+140)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=$mod;
 var $23=(($22+144)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=_iff_new();
 $handle=$24;
 var $25=$handle;
 var $26=($25|0)==0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=34;break;
 case 5: 
 var $29=$handle;
 var $30=_iff_register($29,27016,468);
 $ret=$30;
 var $31=$handle;
 var $32=_iff_register($31,25040,90);
 var $33=$ret;
 var $34=$33|$32;
 $ret=$34;
 var $35=$handle;
 var $36=_iff_register($35,23768,114);
 var $37=$ret;
 var $38=$37|$36;
 $ret=$38;
 var $39=$handle;
 var $40=_iff_register($39,23024,110);
 var $41=$ret;
 var $42=$41|$40;
 $ret=$42;
 var $43=$ret;
 var $44=($43|0)!=0;
 if($44){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=34;break;
 case 7: 
 var $47=$handle;
 _iff_set_quirk($47,1);
 var $48=$handle;
 _iff_set_quirk($48,32);
 var $49=$handle;
 var $50=$2;
 var $51=$3;
 var $52=$data;
 var $53=_iff_load($49,$50,$51,$52);
 var $54=($53|0)<0;
 if($54){label=8;break;}else{label=9;break;}
 case 8: 
 var $56=$handle;
 _iff_release($56);
 $1=-1;
 label=34;break;
 case 9: 
 var $58=$handle;
 _iff_release($58);
 var $59=$mod;
 var $60=(($59+128)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$mod;
 var $63=(($62+136)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(Math_imul($61,$64)|0);
 var $66=$mod;
 var $67=(($66+132)|0);
 HEAP32[(($67)>>2)]=$65;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $74=$mod;
 var $75=_instrument_init($74);
 var $76=($75|0)<0;
 if($76){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=34;break;
 case 17: 
 var $79=$mod;
 var $80=_pattern_init($79);
 var $81=($80|0)<0;
 if($81){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=34;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $88=$3;
 var $89=$4;
 var $90=$offset;
 var $91=((($89)+($90))|0);
 var $92=_hio_seek($88,$91,0);
 var $93=(($data)|0);
 HEAP32[(($93)>>2)]=0;
 var $94=_iff_new();
 $handle=$94;
 var $95=$handle;
 var $96=($95|0)==0;
 if($96){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=34;break;
 case 25: 
 var $99=$handle;
 var $100=_iff_register($99,23768,274);
 $ret=$100;
 var $101=$handle;
 var $102=_iff_register($101,23024,282);
 var $103=$ret;
 var $104=$103|$102;
 $ret=$104;
 var $105=$ret;
 var $106=($105|0)!=0;
 if($106){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=34;break;
 case 27: 
 var $109=$handle;
 _iff_set_quirk($109,1);
 var $110=$handle;
 _iff_set_quirk($110,32);
 var $111=$handle;
 var $112=$2;
 var $113=$3;
 var $114=$data;
 var $115=_iff_load($111,$112,$113,$114);
 var $116=($115|0)<0;
 if($116){label=28;break;}else{label=29;break;}
 case 28: 
 var $118=$handle;
 _iff_release($118);
 $1=-1;
 label=34;break;
 case 29: 
 var $120=$handle;
 _iff_release($120);
 $i=0;
 label=30;break;
 case 30: 
 var $122=$i;
 var $123=$mod;
 var $124=(($123+136)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($122|0)<($125|0);
 if($126){label=31;break;}else{label=33;break;}
 case 31: 
 var $128=$i;
 var $129=$mod;
 var $130=(($129+184)|0);
 var $131=(($130+((($128)*(12))&-1))|0);
 var $132=(($131)|0);
 HEAP32[(($132)>>2)]=128;
 label=32;break;
 case 32: 
 var $134=$i;
 var $135=((($134)+(1))|0);
 $i=$135;
 label=30;break;
 case 33: 
 var $137=$2;
 var $138=(($137+1280)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$139|32;
 HEAP32[(($138)>>2)]=$140;
 var $141=$2;
 var $142=(($141+1284)|0);
 HEAP32[(($142)>>2)]=1;
 $1=0;
 label=34;break;
 case 34: 
 var $144=$1;
 STACKTOP=sp;return $144;
  default: assert(0, "bad label: " + label);
 }
}
function _get_main($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $buf=sp;
 var $flags;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=(($buf)|0);
 var $8=$3;
 var $9=_hio_read($7,1,64,$8);
 var $10=$mod;
 var $11=(($10)|0);
 var $12=(($11)|0);
 var $13=(($buf)|0);
 var $14=_strlcpy($12,$13,64);
 var $15=$1;
 _set_type($15,25016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $16=$3;
 var $17=_hio_read8($16);
 var $18=($17&255);
 $flags=$18;
 var $19=$flags;
 var $20=$19^-1;
 var $21=$20&1;
 var $22=($21|0)!=0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=$1;
 var $25=(($24+1280)|0);
 HEAP32[(($25)>>2)]=4096;
 label=3;break;
 case 3: 
 var $27=$3;
 var $28=_hio_read8($27);
 var $29=($28&255);
 var $30=$mod;
 var $31=(($30+136)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$3;
 var $33=_hio_read8($32);
 var $34=($33&255);
 var $35=$mod;
 var $36=(($35+148)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$3;
 var $38=_hio_read8($37);
 var $39=($38&255);
 var $40=$mod;
 var $41=(($40+152)|0);
 HEAP32[(($41)>>2)]=$39;
 var $42=$3;
 var $43=_hio_read16l($42);
 var $44=$3;
 var $45=_hio_read16l($44);
 var $46=$3;
 var $47=_hio_read8($46);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_ordr($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read8($7);
 var $9=($8&255);
 var $10=$mod;
 var $11=(($10+156)|0);
 HEAP32[(($11)>>2)]=$9;
 $i=0;
 label=2;break;
 case 2: 
 var $13=$i;
 var $14=$mod;
 var $15=(($14+156)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($13|0)<($16|0);
 if($17){label=3;break;}else{label=5;break;}
 case 3: 
 var $19=$3;
 var $20=_hio_read8($19);
 var $21=$i;
 var $22=$mod;
 var $23=(($22+952)|0);
 var $24=(($23+$21)|0);
 HEAP8[($24)]=$20;
 label=4;break;
 case 4: 
 var $26=$i;
 var $27=((($26)+(1))|0);
 $i=$27;
 label=2;break;
 case 5: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt_cnt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read8($7);
 var $9=($8&255);
 var $10=((($9)+(1))|0);
 $i=$10;
 var $11=$i;
 var $12=$mod;
 var $13=(($12+128)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11|0)>($14|0);
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$i;
 var $18=$mod;
 var $19=(($18+128)|0);
 HEAP32[(($19)>>2)]=$17;
 label=3;break;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_inst_cnt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read8($7);
 var $9=$3;
 var $10=_hio_read8($9);
 var $11=($10&255);
 var $12=((($11)+(1))|0);
 $i=$12;
 var $13=$i;
 var $14=$mod;
 var $15=(($14+140)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($13|0)>($16|0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$i;
 var $20=$mod;
 var $21=(($20+140)|0);
 HEAP32[(($21)>>2)]=$19;
 label=3;break;
 case 3: 
 var $23=$3;
 var $24=_hio_seek($23,28,1);
 var $25=$3;
 var $26=_hio_read8($25);
 var $27=($26&255);
 var $28=$mod;
 var $29=(($28+144)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($30)+($27))|0);
 HEAP32[(($29)>>2)]=$31;
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt231($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $event;
 var $dummy=sp;
 var $i;
 var $len;
 var $chan;
 var $rows;
 var $r;
 var $flag;
 var $fxp;
 var $fxt;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read8($8);
 var $10=($9&255);
 $i=$10;
 var $11=$4;
 var $12=_hio_read32l($11);
 $len=$12;
 var $13=$4;
 var $14=_hio_read8($13);
 var $15=($14&255);
 var $16=((($15)+(1))|0);
 $rows=$16;
 var $17=$mod;
 var $18=$i;
 var $19=$rows;
 var $20=_pattern_tracks_alloc($17,$18,$19);
 var $21=($20|0)<0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=25;break;
 case 3: 
 $r=0;
 label=4;break;
 case 4: 
 var $25=$r;
 var $26=$rows;
 var $27=($25|0)<($26|0);
 if($27){label=5;break;}else{label=24;break;}
 case 5: 
 var $29=$4;
 var $30=_hio_read8($29);
 $flag=$30;
 var $31=($30&255);
 var $32=($31|0)==0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$r;
 var $35=((($34)+(1))|0);
 $r=$35;
 label=4;break;
 case 7: 
 var $37=$flag;
 var $38=($37&255);
 var $39=$38&31;
 $chan=$39;
 var $40=$chan;
 var $41=$mod;
 var $42=(($41+136)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($40|0)<($43|0);
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=$r;
 var $47=$chan;
 var $48=$i;
 var $49=$2;
 var $50=(($49)|0);
 var $51=(($50+168)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+($48<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+4)|0);
 var $56=(($55+($47<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$2;
 var $59=(($58)|0);
 var $60=(($59+172)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+($57<<2))|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+4)|0);
 var $65=(($64+($46<<3))|0);
 var $68=$65;label=10;break;
 case 9: 
 var $68=$dummy;label=10;break;
 case 10: 
 var $68;
 $event=$68;
 var $69=$flag;
 var $70=($69&255);
 var $71=$70&128;
 var $72=($71|0)!=0;
 if($72){label=11;break;}else{label=17;break;}
 case 11: 
 var $74=$4;
 var $75=_hio_read8($74);
 $fxp=$75;
 var $76=$4;
 var $77=_hio_read8($76);
 $fxt=$77;
 var $78=$fxt;
 var $79=($78&255);
 if(($79|0)==20){ label=12;break;}else{label=13;break;}
 case 12: 
 $fxt=-93;
 label=16;break;
 case 13: 
 var $82=$fxt;
 var $83=($82&255);
 var $84=($83|0)>15;
 if($84){label=14;break;}else{label=15;break;}
 case 14: 
 var $86=$fxt;
 var $87=($86&255);
 var $88=$fxp;
 var $89=($88&255);
 var $90=_printf(22352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$87,HEAP32[(((tempVarArgs)+(8))>>2)]=$89,tempVarArgs)); STACKTOP=tempVarArgs;
 $fxp=0;
 $fxt=0;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $93=$fxt;
 var $94=$event;
 var $95=(($94+3)|0);
 HEAP8[($95)]=$93;
 var $96=$fxp;
 var $97=$event;
 var $98=(($97+4)|0);
 HEAP8[($98)]=$96;
 label=17;break;
 case 17: 
 var $100=$flag;
 var $101=($100&255);
 var $102=$101&64;
 var $103=($102|0)!=0;
 if($103){label=18;break;}else{label=21;break;}
 case 18: 
 var $105=$4;
 var $106=_hio_read8($105);
 var $107=$event;
 var $108=(($107+1)|0);
 HEAP8[($108)]=$106;
 var $109=$4;
 var $110=_hio_read8($109);
 var $111=$event;
 var $112=(($111)|0);
 HEAP8[($112)]=$110;
 var $113=$event;
 var $114=(($113)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=($116|0)==128;
 if($117){label=19;break;}else{label=20;break;}
 case 19: 
 var $119=$event;
 var $120=(($119)|0);
 HEAP8[($120)]=-127;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $123=$flag;
 var $124=($123&255);
 var $125=$124&32;
 var $126=($125|0)!=0;
 if($126){label=22;break;}else{label=23;break;}
 case 22: 
 var $128=$4;
 var $129=_hio_read8($128);
 var $130=($129&255);
 var $131=(((($130|0))/(2))&-1);
 var $132=((($131)+(1))|0);
 var $133=(($132)&255);
 var $134=$event;
 var $135=(($134+2)|0);
 HEAP8[($135)]=$133;
 label=23;break;
 case 23: 
 label=4;break;
 case 24: 
 $1=9;
 label=25;break;
 case 25: 
 var $139=$1;
 STACKTOP=sp;return $139;
  default: assert(0, "bad label: " + label);
 }
}
function _get_inst232($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $j;
 var $srate;
 var $finetune;
 var $flags;
 var $val;
 var $vwf;
 var $vra;
 var $vde;
 var $vsw;
 var $fade;
 var $buf=sp;
 var $snum;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$4;
 var $11=_hio_read8($10);
 var $12=$4;
 var $13=_hio_read8($12);
 var $14=($13&255);
 $i=$14;
 var $15=$i;
 var $16=$mod;
 var $17=(($16+176)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+((($15)*(764))&-1))|0);
 var $20=(($19)|0);
 var $21=$20;
 var $22=$4;
 var $23=_hio_read($21,1,28,$22);
 var $24=$i;
 var $25=$mod;
 var $26=(($25+176)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+((($24)*(764))&-1))|0);
 var $29=(($28)|0);
 var $30=(($29)|0);
 var $31=_str_adj($30);
 var $32=$4;
 var $33=_hio_read8($32);
 var $34=($33&255);
 var $35=$i;
 var $36=$mod;
 var $37=(($36+176)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+((($35)*(764))&-1))|0);
 var $40=(($39+36)|0);
 HEAP32[(($40)>>2)]=$34;
 $j=0;
 label=2;break;
 case 2: 
 var $42=$j;
 var $43=($42|0)<108;
 if($43){label=3;break;}else{label=5;break;}
 case 3: 
 var $45=$4;
 var $46=_hio_read8($45);
 var $47=$j;
 var $48=$i;
 var $49=$mod;
 var $50=(($49+176)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+((($48)*(764))&-1))|0);
 var $53=(($52+512)|0);
 var $54=(($53+($47<<1))|0);
 var $55=(($54)|0);
 HEAP8[($55)]=$46;
 label=4;break;
 case 4: 
 var $57=$j;
 var $58=((($57)+(1))|0);
 $j=$58;
 label=2;break;
 case 5: 
 var $60=$4;
 var $61=_hio_seek($60,11,1);
 var $62=$4;
 var $63=_hio_read8($62);
 var $64=($63&255);
 $vwf=$64;
 var $65=$4;
 var $66=_hio_read8($65);
 var $67=($66&255);
 $vsw=$67;
 var $68=$4;
 var $69=_hio_read8($68);
 var $70=$4;
 var $71=_hio_read8($70);
 var $72=$4;
 var $73=_hio_read8($72);
 var $74=($73&255);
 var $75=(((($74|0))/(4))&-1);
 $vde=$75;
 var $76=$4;
 var $77=_hio_read16l($76);
 var $78=($77&65535);
 var $79=(((($78|0))/(16))&-1);
 $vra=$79;
 var $80=$4;
 var $81=_hio_read8($80);
 var $82=$4;
 var $83=_hio_read8($82);
 var $84=($83&255);
 $val=$84;
 var $85=$val;
 var $86=$85&15;
 var $87=$86&1;
 var $88=($87|0)!=0;
 if($88){label=6;break;}else{label=7;break;}
 case 6: 
 var $90=$i;
 var $91=$mod;
 var $92=(($91+176)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+((($90)*(764))&-1))|0);
 var $95=(($94+44)|0);
 var $96=(($95)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=$97|1;
 HEAP32[(($96)>>2)]=$98;
 label=7;break;
 case 7: 
 var $100=$val;
 var $101=$100&15;
 var $102=$101&2;
 var $103=($102|0)!=0;
 if($103){label=8;break;}else{label=9;break;}
 case 8: 
 var $105=$i;
 var $106=$mod;
 var $107=(($106+176)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+((($105)*(764))&-1))|0);
 var $110=(($109+44)|0);
 var $111=(($110)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112|2;
 HEAP32[(($111)>>2)]=$113;
 label=9;break;
 case 9: 
 var $115=$val;
 var $116=$115&15;
 var $117=$116&4;
 var $118=($117|0)!=0;
 if($118){label=10;break;}else{label=11;break;}
 case 10: 
 var $120=$i;
 var $121=$mod;
 var $122=(($121+176)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+((($120)*(764))&-1))|0);
 var $125=(($124+44)|0);
 var $126=(($125)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$127|4;
 HEAP32[(($126)>>2)]=$128;
 label=11;break;
 case 11: 
 var $130=$val;
 var $131=$130&240;
 var $132=$131>>4;
 var $133=$132&1;
 var $134=($133|0)!=0;
 if($134){label=12;break;}else{label=13;break;}
 case 12: 
 var $136=$i;
 var $137=$mod;
 var $138=(($137+176)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139+((($136)*(764))&-1))|0);
 var $141=(($140+200)|0);
 var $142=(($141)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$143|1;
 HEAP32[(($142)>>2)]=$144;
 label=13;break;
 case 13: 
 var $146=$val;
 var $147=$146&240;
 var $148=$147>>4;
 var $149=$148&2;
 var $150=($149|0)!=0;
 if($150){label=14;break;}else{label=15;break;}
 case 14: 
 var $152=$i;
 var $153=$mod;
 var $154=(($153+176)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+((($152)*(764))&-1))|0);
 var $157=(($156+200)|0);
 var $158=(($157)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$159|2;
 HEAP32[(($158)>>2)]=$160;
 label=15;break;
 case 15: 
 var $162=$val;
 var $163=$162&240;
 var $164=$163>>4;
 var $165=$164&4;
 var $166=($165|0)!=0;
 if($166){label=16;break;}else{label=17;break;}
 case 16: 
 var $168=$i;
 var $169=$mod;
 var $170=(($169+176)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+((($168)*(764))&-1))|0);
 var $173=(($172+200)|0);
 var $174=(($173)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=$175|4;
 HEAP32[(($174)>>2)]=$176;
 label=17;break;
 case 17: 
 var $178=$4;
 var $179=_hio_read8($178);
 var $180=($179&255);
 $val=$180;
 var $181=$val;
 var $182=$181&15;
 var $183=((($182)+(1))|0);
 var $184=$i;
 var $185=$mod;
 var $186=(($185+176)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+((($184)*(764))&-1))|0);
 var $189=(($188+44)|0);
 var $190=(($189+4)|0);
 HEAP32[(($190)>>2)]=$183;
 var $191=$val;
 var $192=$191&240;
 var $193=$192>>4;
 var $194=((($193)+(1))|0);
 var $195=$i;
 var $196=$mod;
 var $197=(($196+176)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+((($195)*(764))&-1))|0);
 var $200=(($199+200)|0);
 var $201=(($200+4)|0);
 HEAP32[(($201)>>2)]=$194;
 var $202=$4;
 var $203=_hio_read8($202);
 var $204=($203&255);
 $val=$204;
 var $205=$val;
 var $206=$205&15;
 var $207=$i;
 var $208=$mod;
 var $209=(($208+176)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+((($207)*(764))&-1))|0);
 var $212=(($211+44)|0);
 var $213=(($212+12)|0);
 HEAP32[(($213)>>2)]=$206;
 var $214=$val;
 var $215=$214&240;
 var $216=$215>>4;
 var $217=$i;
 var $218=$mod;
 var $219=(($218+176)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+((($217)*(764))&-1))|0);
 var $222=(($221+200)|0);
 var $223=(($222+12)|0);
 HEAP32[(($223)>>2)]=$216;
 var $224=$4;
 var $225=_hio_read8($224);
 var $226=($225&255);
 $val=$226;
 var $227=$val;
 var $228=$227&15;
 var $229=$i;
 var $230=$mod;
 var $231=(($230+176)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+((($229)*(764))&-1))|0);
 var $234=(($233+44)|0);
 var $235=(($234+20)|0);
 HEAP32[(($235)>>2)]=$228;
 var $236=$val;
 var $237=$236&240;
 var $238=$237>>4;
 var $239=$i;
 var $240=$mod;
 var $241=(($240+176)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+((($239)*(764))&-1))|0);
 var $244=(($243+200)|0);
 var $245=(($244+20)|0);
 HEAP32[(($245)>>2)]=$238;
 var $246=$4;
 var $247=_hio_read8($246);
 var $248=$val;
 var $249=$248&15;
 var $250=$i;
 var $251=$mod;
 var $252=(($251+176)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+((($250)*(764))&-1))|0);
 var $255=(($254+44)|0);
 var $256=(($255+24)|0);
 HEAP32[(($256)>>2)]=$249;
 var $257=$val;
 var $258=$257&240;
 var $259=$258>>4;
 var $260=$i;
 var $261=$mod;
 var $262=(($261+176)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263+((($260)*(764))&-1))|0);
 var $265=(($264+200)|0);
 var $266=(($265+24)|0);
 HEAP32[(($266)>>2)]=$259;
 var $267=$i;
 var $268=$mod;
 var $269=(($268+176)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+((($267)*(764))&-1))|0);
 var $272=(($271+44)|0);
 var $273=(($272+4)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)<=0;
 if($275){label=19;break;}else{label=18;break;}
 case 18: 
 var $277=$i;
 var $278=$mod;
 var $279=(($278+176)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($280+((($277)*(764))&-1))|0);
 var $282=(($281+44)|0);
 var $283=(($282+4)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)>=32;
 if($285){label=19;break;}else{label=20;break;}
 case 19: 
 var $287=$i;
 var $288=$mod;
 var $289=(($288+176)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=(($290+((($287)*(764))&-1))|0);
 var $292=(($291+44)|0);
 var $293=(($292)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=$294&-2;
 HEAP32[(($293)>>2)]=$295;
 label=20;break;
 case 20: 
 var $297=$i;
 var $298=$mod;
 var $299=(($298+176)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($300+((($297)*(764))&-1))|0);
 var $302=(($301+200)|0);
 var $303=(($302+4)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=($304|0)<=0;
 if($305){label=22;break;}else{label=21;break;}
 case 21: 
 var $307=$i;
 var $308=$mod;
 var $309=(($308+176)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=(($310+((($307)*(764))&-1))|0);
 var $312=(($311+200)|0);
 var $313=(($312+4)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=($314|0)>=32;
 if($315){label=22;break;}else{label=23;break;}
 case 22: 
 var $317=$i;
 var $318=$mod;
 var $319=(($318+176)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320+((($317)*(764))&-1))|0);
 var $322=(($321+200)|0);
 var $323=(($322)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=$324&-2;
 HEAP32[(($323)>>2)]=$325;
 label=23;break;
 case 23: 
 var $327=(($buf)|0);
 var $328=$4;
 var $329=_hio_read($327,1,30,$328);
 $j=0;
 label=24;break;
 case 24: 
 var $331=$j;
 var $332=$i;
 var $333=$mod;
 var $334=(($333+176)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+((($332)*(764))&-1))|0);
 var $337=(($336+44)|0);
 var $338=(($337+4)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=($331|0)<($339|0);
 if($340){label=25;break;}else{label=27;break;}
 case 25: 
 var $342=(($buf)|0);
 var $343=$j;
 var $344=((($343)*(3))&-1);
 var $345=(($342+$344)|0);
 var $346=_readmem16l($345);
 var $347=($346&65535);
 var $348=(((($347|0))/(16))&-1);
 var $349=(($348)&65535);
 var $350=$j;
 var $351=($350<<1);
 var $352=$i;
 var $353=$mod;
 var $354=(($353+176)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+((($352)*(764))&-1))|0);
 var $357=(($356+44)|0);
 var $358=(($357+28)|0);
 var $359=(($358+($351<<1))|0);
 HEAP16[(($359)>>1)]=$349;
 var $360=$j;
 var $361=((($360)*(3))&-1);
 var $362=((($361)+(2))|0);
 var $363=(($buf+$362)|0);
 var $364=HEAP8[($363)];
 var $365=($364&255);
 var $366=$j;
 var $367=($366<<1);
 var $368=((($367)+(1))|0);
 var $369=$i;
 var $370=$mod;
 var $371=(($370+176)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372+((($369)*(764))&-1))|0);
 var $374=(($373+44)|0);
 var $375=(($374+28)|0);
 var $376=(($375+($368<<1))|0);
 HEAP16[(($376)>>1)]=$365;
 label=26;break;
 case 26: 
 var $378=$j;
 var $379=((($378)+(1))|0);
 $j=$379;
 label=24;break;
 case 27: 
 var $381=(($buf)|0);
 var $382=$4;
 var $383=_hio_read($381,1,30,$382);
 $j=0;
 label=28;break;
 case 28: 
 var $385=$j;
 var $386=$i;
 var $387=$mod;
 var $388=(($387+176)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($389+((($386)*(764))&-1))|0);
 var $391=(($390+200)|0);
 var $392=(($391+4)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=($385|0)<($393|0);
 if($394){label=29;break;}else{label=31;break;}
 case 29: 
 var $396=(($buf)|0);
 var $397=$j;
 var $398=((($397)*(3))&-1);
 var $399=(($396+$398)|0);
 var $400=_readmem16l($399);
 var $401=($400&65535);
 var $402=(((($401|0))/(16))&-1);
 var $403=(($402)&65535);
 var $404=$j;
 var $405=($404<<1);
 var $406=$i;
 var $407=$mod;
 var $408=(($407+176)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($409+((($406)*(764))&-1))|0);
 var $411=(($410+200)|0);
 var $412=(($411+28)|0);
 var $413=(($412+($405<<1))|0);
 HEAP16[(($413)>>1)]=$403;
 var $414=$j;
 var $415=((($414)*(3))&-1);
 var $416=((($415)+(2))|0);
 var $417=(($buf+$416)|0);
 var $418=HEAP8[($417)];
 var $419=($418&255);
 var $420=$j;
 var $421=($420<<1);
 var $422=((($421)+(1))|0);
 var $423=$i;
 var $424=$mod;
 var $425=(($424+176)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=(($426+((($423)*(764))&-1))|0);
 var $428=(($427+200)|0);
 var $429=(($428+28)|0);
 var $430=(($429+($422<<1))|0);
 HEAP16[(($430)>>1)]=$419;
 label=30;break;
 case 30: 
 var $432=$j;
 var $433=((($432)+(1))|0);
 $j=$433;
 label=28;break;
 case 31: 
 var $435=$4;
 var $436=_hio_read8($435);
 var $437=($436&255);
 $fade=$437;
 var $438=$4;
 var $439=_hio_read8($438);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $442=$i;
 var $443=$mod;
 var $444=(($443+176)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(($445+((($442)*(764))&-1))|0);
 var $447=(($446+36)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=($448|0)==0;
 if($449){label=34;break;}else{label=35;break;}
 case 34: 
 $1=0;
 label=56;break;
 case 35: 
 var $452=$mod;
 var $453=$i;
 var $454=$i;
 var $455=$mod;
 var $456=(($455+176)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=(($457+((($454)*(764))&-1))|0);
 var $459=(($458+36)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=_subinstrument_alloc($452,$453,$460);
 var $462=($461|0)<0;
 if($462){label=36;break;}else{label=37;break;}
 case 36: 
 $1=-1;
 label=56;break;
 case 37: 
 $j=0;
 label=38;break;
 case 38: 
 var $466=$j;
 var $467=$i;
 var $468=$mod;
 var $469=(($468+176)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+((($467)*(764))&-1))|0);
 var $472=(($471+36)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($466|0)<($473|0);
 if($474){label=39;break;}else{label=55;break;}
 case 39: 
 var $476=$4;
 var $477=_hio_read32b($476);
 var $478=$4;
 var $479=_hio_read32b($478);
 var $480=$data;
 var $481=(($480)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$mod;
 var $484=(($483+180)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=(($485+((($482)*(52))&-1))|0);
 var $487=(($486)|0);
 var $488=$487;
 var $489=$4;
 var $490=_hio_read($488,1,28,$489);
 var $491=$data;
 var $492=(($491)|0);
 var $493=HEAP32[(($492)>>2)];
 var $494=$mod;
 var $495=(($494+180)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($496+((($493)*(52))&-1))|0);
 var $498=(($497)|0);
 var $499=(($498)|0);
 var $500=_str_adj($499);
 var $501=$4;
 var $502=_hio_read8($501);
 var $503=($502&255);
 var $504=($503<<2);
 var $505=$j;
 var $506=$i;
 var $507=$mod;
 var $508=(($507+176)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=(($509+((($506)*(764))&-1))|0);
 var $511=(($510+756)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($512+($505<<6))|0);
 var $514=(($513+8)|0);
 HEAP32[(($514)>>2)]=$504;
 var $515=$j;
 var $516=$i;
 var $517=$mod;
 var $518=(($517+176)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=(($519+((($516)*(764))&-1))|0);
 var $521=(($520+756)|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=(($522+($515<<6))|0);
 var $524=(($523+8)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=($525|0)==0;
 if($526){label=40;break;}else{label=41;break;}
 case 40: 
 var $528=$j;
 var $529=$i;
 var $530=$mod;
 var $531=(($530+176)|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=(($532+((($529)*(764))&-1))|0);
 var $534=(($533+756)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=(($535+($528<<6))|0);
 var $537=(($536+8)|0);
 HEAP32[(($537)>>2)]=128;
 label=41;break;
 case 41: 
 var $539=$4;
 var $540=_hio_read8($539);
 var $541=($540&255);
 var $542=$j;
 var $543=$i;
 var $544=$mod;
 var $545=(($544+176)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=(($546+((($543)*(764))&-1))|0);
 var $548=(($547+756)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=(($549+($542<<6))|0);
 var $551=(($550)|0);
 HEAP32[(($551)>>2)]=$541;
 var $552=$4;
 var $553=_hio_read8($552);
 var $554=($553&255);
 $flags=$554;
 var $555=$4;
 var $556=_hio_read8($555);
 var $557=$vwf;
 var $558=$j;
 var $559=$i;
 var $560=$mod;
 var $561=(($560+176)|0);
 var $562=HEAP32[(($561)>>2)];
 var $563=(($562+((($559)*(764))&-1))|0);
 var $564=(($563+756)|0);
 var $565=HEAP32[(($564)>>2)];
 var $566=(($565+($558<<6))|0);
 var $567=(($566+20)|0);
 HEAP32[(($567)>>2)]=$557;
 var $568=$vde;
 var $569=$j;
 var $570=$i;
 var $571=$mod;
 var $572=(($571+176)|0);
 var $573=HEAP32[(($572)>>2)];
 var $574=(($573+((($570)*(764))&-1))|0);
 var $575=(($574+756)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=(($576+($569<<6))|0);
 var $578=(($577+24)|0);
 HEAP32[(($578)>>2)]=$568;
 var $579=$vra;
 var $580=$j;
 var $581=$i;
 var $582=$mod;
 var $583=(($582+176)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(($584+((($581)*(764))&-1))|0);
 var $586=(($585+756)|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=(($587+($580<<6))|0);
 var $589=(($588+28)|0);
 HEAP32[(($589)>>2)]=$579;
 var $590=$vsw;
 var $591=$j;
 var $592=$i;
 var $593=$mod;
 var $594=(($593+176)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=(($595+((($592)*(764))&-1))|0);
 var $597=(($596+756)|0);
 var $598=HEAP32[(($597)>>2)];
 var $599=(($598+($591<<6))|0);
 var $600=(($599+32)|0);
 HEAP32[(($600)>>2)]=$590;
 var $601=$data;
 var $602=(($601)|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=$j;
 var $605=$i;
 var $606=$mod;
 var $607=(($606+176)|0);
 var $608=HEAP32[(($607)>>2)];
 var $609=(($608+((($605)*(764))&-1))|0);
 var $610=(($609+756)|0);
 var $611=HEAP32[(($610)>>2)];
 var $612=(($611+($604<<6))|0);
 var $613=(($612+40)|0);
 HEAP32[(($613)>>2)]=$603;
 var $614=$4;
 var $615=_hio_read32l($614);
 var $616=$data;
 var $617=(($616)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=$mod;
 var $620=(($619+180)|0);
 var $621=HEAP32[(($620)>>2)];
 var $622=(($621+((($618)*(52))&-1))|0);
 var $623=(($622+32)|0);
 HEAP32[(($623)>>2)]=$615;
 var $624=$4;
 var $625=_hio_read32l($624);
 var $626=$data;
 var $627=(($626)|0);
 var $628=HEAP32[(($627)>>2)];
 var $629=$mod;
 var $630=(($629+180)|0);
 var $631=HEAP32[(($630)>>2)];
 var $632=(($631+((($628)*(52))&-1))|0);
 var $633=(($632+36)|0);
 HEAP32[(($633)>>2)]=$625;
 var $634=$4;
 var $635=_hio_read32l($634);
 var $636=$data;
 var $637=(($636)|0);
 var $638=HEAP32[(($637)>>2)];
 var $639=$mod;
 var $640=(($639+180)|0);
 var $641=HEAP32[(($640)>>2)];
 var $642=(($641+((($638)*(52))&-1))|0);
 var $643=(($642+40)|0);
 HEAP32[(($643)>>2)]=$635;
 var $644=$data;
 var $645=(($644)|0);
 var $646=HEAP32[(($645)>>2)];
 var $647=$mod;
 var $648=(($647+180)|0);
 var $649=HEAP32[(($648)>>2)];
 var $650=(($649+((($646)*(52))&-1))|0);
 var $651=(($650+44)|0);
 HEAP32[(($651)>>2)]=0;
 var $652=$flags;
 var $653=$652&4;
 var $654=($653|0)!=0;
 if($654){label=42;break;}else{label=43;break;}
 case 42: 
 var $656=$data;
 var $657=(($656)|0);
 var $658=HEAP32[(($657)>>2)];
 var $659=$mod;
 var $660=(($659+180)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=(($661+((($658)*(52))&-1))|0);
 var $663=(($662+44)|0);
 var $664=HEAP32[(($663)>>2)];
 var $665=$664|1;
 HEAP32[(($663)>>2)]=$665;
 label=43;break;
 case 43: 
 var $667=$flags;
 var $668=$667&8;
 var $669=($668|0)!=0;
 if($669){label=44;break;}else{label=45;break;}
 case 44: 
 var $671=$data;
 var $672=(($671)|0);
 var $673=HEAP32[(($672)>>2)];
 var $674=$mod;
 var $675=(($674+180)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=(($676+((($673)*(52))&-1))|0);
 var $678=(($677+44)|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=$679|2;
 HEAP32[(($678)>>2)]=$680;
 label=45;break;
 case 45: 
 var $682=$flags;
 var $683=$682&16;
 var $684=($683|0)!=0;
 if($684){label=46;break;}else{label=47;break;}
 case 46: 
 var $686=$data;
 var $687=(($686)|0);
 var $688=HEAP32[(($687)>>2)];
 var $689=$mod;
 var $690=(($689+180)|0);
 var $691=HEAP32[(($690)>>2)];
 var $692=(($691+((($688)*(52))&-1))|0);
 var $693=(($692+44)|0);
 var $694=HEAP32[(($693)>>2)];
 var $695=$694|4;
 HEAP32[(($693)>>2)]=$695;
 label=47;break;
 case 47: 
 var $697=$4;
 var $698=_hio_read32l($697);
 $srate=$698;
 $finetune=0;
 var $699=$srate;
 var $700=$j;
 var $701=$i;
 var $702=$mod;
 var $703=(($702+176)|0);
 var $704=HEAP32[(($703)>>2)];
 var $705=(($704+((($701)*(764))&-1))|0);
 var $706=(($705+756)|0);
 var $707=HEAP32[(($706)>>2)];
 var $708=(($707+($700<<6))|0);
 var $709=(($708+12)|0);
 var $710=$j;
 var $711=$i;
 var $712=$mod;
 var $713=(($712+176)|0);
 var $714=HEAP32[(($713)>>2)];
 var $715=(($714+((($711)*(764))&-1))|0);
 var $716=(($715+756)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=(($717+($710<<6))|0);
 var $719=(($718+16)|0);
 _c2spd_to_note($699,$709,$719);
 var $720=$finetune;
 var $721=$j;
 var $722=$i;
 var $723=$mod;
 var $724=(($723+176)|0);
 var $725=HEAP32[(($724)>>2)];
 var $726=(($725+((($722)*(764))&-1))|0);
 var $727=(($726+756)|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=(($728+($721<<6))|0);
 var $730=(($729+16)|0);
 var $731=HEAP32[(($730)>>2)];
 var $732=((($731)+($720))|0);
 HEAP32[(($730)>>2)]=$732;
 var $733=$4;
 var $734=_hio_read32l($733);
 var $735=$4;
 var $736=_hio_read32l($735);
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 var $739=$data;
 var $740=(($739)|0);
 var $741=HEAP32[(($740)>>2)];
 var $742=$mod;
 var $743=(($742+180)|0);
 var $744=HEAP32[(($743)>>2)];
 var $745=(($744+((($741)*(52))&-1))|0);
 var $746=(($745+32)|0);
 var $747=HEAP32[(($746)>>2)];
 var $748=($747|0)>1;
 if($748){label=50;break;}else{label=53;break;}
 case 50: 
 var $750=$data;
 var $751=(($750)|0);
 var $752=HEAP32[(($751)>>2)];
 $snum=$752;
 var $753=$2;
 var $754=$4;
 var $755=$snum;
 var $756=$mod;
 var $757=(($756+180)|0);
 var $758=HEAP32[(($757)>>2)];
 var $759=(($758+((($755)*(52))&-1))|0);
 var $760=_load_sample($753,$754,0,$759,0);
 var $761=($760|0)<0;
 if($761){label=51;break;}else{label=52;break;}
 case 51: 
 $1=-1;
 label=56;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $766=$j;
 var $767=((($766)+(1))|0);
 $j=$767;
 var $768=$data;
 var $769=(($768)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=((($770)+(1))|0);
 HEAP32[(($769)>>2)]=$771;
 label=38;break;
 case 55: 
 $1=0;
 label=56;break;
 case 56: 
 var $774=$1;
 STACKTOP=sp;return $774;
  default: assert(0, "bad label: " + label);
 }
}
function _gal5_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1380533830;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read32b($10);
 var $12=$2;
 var $13=_hio_read32b($12);
 var $14=($13|0)!=1095573536;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=8;break;
 case 5: 
 var $17=$2;
 var $18=_hio_read32b($17);
 var $19=($18|0)!=1229867348;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=8;break;
 case 7: 
 var $22=$2;
 var $23=_hio_read32b($22);
 var $24=$2;
 var $25=$3;
 _read_title($24,$25,64);
 $1=0;
 label=8;break;
 case 8: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _gal5_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $handle;
 var $i;
 var $ret;
 var $offset;
 var $data=sp;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$3;
 var $15=_hio_read32b($14);
 var $16=$3;
 var $17=_hio_read32b($16);
 var $18=$3;
 var $19=_hio_tell($18);
 $offset=$19;
 var $20=$mod;
 var $21=(($20+140)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=$mod;
 var $23=(($22+144)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=_iff_new();
 $handle=$24;
 var $25=$handle;
 var $26=($25|0)==0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=34;break;
 case 5: 
 var $29=$handle;
 var $30=_iff_register($29,26952,484);
 $ret=$30;
 var $31=$handle;
 var $32=_iff_register($31,25008,384);
 var $33=$ret;
 var $34=$33|$32;
 $ret=$34;
 var $35=$handle;
 var $36=_iff_register($35,23760,344);
 var $37=$ret;
 var $38=$37|$36;
 $ret=$38;
 var $39=$handle;
 var $40=_iff_register($39,23016,134);
 var $41=$ret;
 var $42=$41|$40;
 $ret=$42;
 var $43=$ret;
 var $44=($43|0)!=0;
 if($44){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=34;break;
 case 7: 
 var $47=$handle;
 _iff_set_quirk($47,1);
 var $48=$handle;
 _iff_set_quirk($48,16);
 var $49=$handle;
 _iff_set_quirk($49,4);
 var $50=$handle;
 var $51=$2;
 var $52=$3;
 var $53=$data;
 var $54=_iff_load($50,$51,$52,$53);
 var $55=($54|0)<0;
 if($55){label=8;break;}else{label=9;break;}
 case 8: 
 var $57=$handle;
 _iff_release($57);
 $1=-1;
 label=34;break;
 case 9: 
 var $59=$handle;
 _iff_release($59);
 var $60=$mod;
 var $61=(($60+128)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$mod;
 var $64=(($63+136)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(Math_imul($62,$65)|0);
 var $67=$mod;
 var $68=(($67+132)|0);
 HEAP32[(($68)>>2)]=$66;
 var $69=$mod;
 var $70=(($69+140)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$mod;
 var $73=(($72+144)|0);
 HEAP32[(($73)>>2)]=$71;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $80=$mod;
 var $81=_instrument_init($80);
 var $82=($81|0)<0;
 if($82){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=34;break;
 case 17: 
 var $85=$mod;
 var $86=_pattern_init($85);
 var $87=($86|0)<0;
 if($87){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=34;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $94=$3;
 var $95=$4;
 var $96=$offset;
 var $97=((($95)+($96))|0);
 var $98=_hio_seek($94,$97,0);
 var $99=_iff_new();
 $handle=$99;
 var $100=$handle;
 var $101=($100|0)==0;
 if($101){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=34;break;
 case 25: 
 var $104=$handle;
 var $105=_iff_register($104,23760,172);
 $ret=$105;
 var $106=$handle;
 var $107=_iff_register($106,23016,534);
 var $108=$ret;
 var $109=$108|$107;
 $ret=$109;
 var $110=$ret;
 var $111=($110|0)!=0;
 if($111){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=34;break;
 case 27: 
 var $114=$handle;
 _iff_set_quirk($114,1);
 var $115=$handle;
 _iff_set_quirk($115,16);
 var $116=$handle;
 _iff_set_quirk($116,4);
 var $117=$handle;
 var $118=$2;
 var $119=$3;
 var $120=$data;
 var $121=_iff_load($117,$118,$119,$120);
 var $122=($121|0)<0;
 if($122){label=28;break;}else{label=29;break;}
 case 28: 
 var $124=$handle;
 _iff_release($124);
 $1=-1;
 label=34;break;
 case 29: 
 var $126=$handle;
 _iff_release($126);
 $i=0;
 label=30;break;
 case 30: 
 var $128=$i;
 var $129=$mod;
 var $130=(($129+136)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($128|0)<($131|0);
 if($132){label=31;break;}else{label=33;break;}
 case 31: 
 var $134=$i;
 var $135=(($data)|0);
 var $136=(($135+$134)|0);
 var $137=HEAP8[($136)];
 var $138=($137&255);
 var $139=($138<<1);
 var $140=$i;
 var $141=$mod;
 var $142=(($141+184)|0);
 var $143=(($142+((($140)*(12))&-1))|0);
 var $144=(($143)|0);
 HEAP32[(($144)>>2)]=$139;
 label=32;break;
 case 32: 
 var $146=$i;
 var $147=((($146)+(1))|0);
 $i=$147;
 label=30;break;
 case 33: 
 var $149=$2;
 var $150=(($149+1280)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$151|32;
 HEAP32[(($150)>>2)]=$152;
 var $153=$2;
 var $154=(($153+1284)|0);
 HEAP32[(($154)>>2)]=1;
 $1=0;
 label=34;break;
 case 34: 
 var $156=$1;
 STACKTOP=sp;return $156;
  default: assert(0, "bad label: " + label);
 }
}
function _get_init($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $data;
 var $buf=sp;
 var $flags;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$4;
 var $8=$7;
 $data=$8;
 var $9=(($buf)|0);
 var $10=$3;
 var $11=_hio_read($9,1,64,$10);
 var $12=$mod;
 var $13=(($12)|0);
 var $14=(($13)|0);
 var $15=(($buf)|0);
 var $16=_strlcpy($14,$15,64);
 var $17=$1;
 _set_type($17,21632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$3;
 var $19=_hio_read8($18);
 var $20=($19&255);
 $flags=$20;
 var $21=$flags;
 var $22=$21^-1;
 var $23=$22&1;
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=$1;
 var $27=(($26+1280)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28|4096;
 HEAP32[(($27)>>2)]=$29;
 label=3;break;
 case 3: 
 var $31=$3;
 var $32=_hio_read8($31);
 var $33=($32&255);
 var $34=$mod;
 var $35=(($34+136)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=$3;
 var $37=_hio_read8($36);
 var $38=($37&255);
 var $39=$mod;
 var $40=(($39+148)|0);
 HEAP32[(($40)>>2)]=$38;
 var $41=$3;
 var $42=_hio_read8($41);
 var $43=($42&255);
 var $44=$mod;
 var $45=(($44+152)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$3;
 var $47=_hio_read16l($46);
 var $48=$3;
 var $49=_hio_read16l($48);
 var $50=$3;
 var $51=_hio_read8($50);
 var $52=$data;
 var $53=(($52)|0);
 var $54=(($53)|0);
 var $55=$3;
 var $56=_hio_read($54,1,64,$55);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_ordr242($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read8($7);
 var $9=($8&255);
 var $10=((($9)+(1))|0);
 var $11=$mod;
 var $12=(($11+156)|0);
 HEAP32[(($12)>>2)]=$10;
 $i=0;
 label=2;break;
 case 2: 
 var $14=$i;
 var $15=$mod;
 var $16=(($15+156)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($14|0)<($17|0);
 if($18){label=3;break;}else{label=5;break;}
 case 3: 
 var $20=$3;
 var $21=_hio_read8($20);
 var $22=$i;
 var $23=$mod;
 var $24=(($23+952)|0);
 var $25=(($24+$22)|0);
 HEAP8[($25)]=$21;
 label=4;break;
 case 4: 
 var $27=$i;
 var $28=((($27)+(1))|0);
 $i=$28;
 label=2;break;
 case 5: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt_cnt243($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read8($7);
 var $9=($8&255);
 var $10=((($9)+(1))|0);
 $i=$10;
 var $11=$i;
 var $12=$mod;
 var $13=(($12+128)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11|0)>($14|0);
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$i;
 var $18=$mod;
 var $19=(($18+128)|0);
 HEAP32[(($19)>>2)]=$17;
 label=3;break;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_inst_cnt244($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read32b($7);
 var $9=$3;
 var $10=_hio_read8($9);
 var $11=$3;
 var $12=_hio_read8($11);
 var $13=($12&255);
 var $14=((($13)+(1))|0);
 $i=$14;
 var $15=$i;
 var $16=$mod;
 var $17=(($16+140)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($15|0)>($18|0);
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 var $21=$i;
 var $22=$mod;
 var $23=(($22+140)|0);
 HEAP32[(($23)>>2)]=$21;
 label=3;break;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt245($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $event;
 var $dummy=sp;
 var $i;
 var $len;
 var $chan;
 var $rows;
 var $r;
 var $flag;
 var $fxp;
 var $fxt;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read8($8);
 var $10=($9&255);
 $i=$10;
 var $11=$4;
 var $12=_hio_read32l($11);
 $len=$12;
 var $13=$4;
 var $14=_hio_read8($13);
 var $15=($14&255);
 var $16=((($15)+(1))|0);
 $rows=$16;
 var $17=$mod;
 var $18=$i;
 var $19=$rows;
 var $20=_pattern_tracks_alloc($17,$18,$19);
 var $21=($20|0)<0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=25;break;
 case 3: 
 $r=0;
 label=4;break;
 case 4: 
 var $25=$r;
 var $26=$rows;
 var $27=($25|0)<($26|0);
 if($27){label=5;break;}else{label=24;break;}
 case 5: 
 var $29=$4;
 var $30=_hio_read8($29);
 $flag=$30;
 var $31=($30&255);
 var $32=($31|0)==0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$r;
 var $35=((($34)+(1))|0);
 $r=$35;
 label=4;break;
 case 7: 
 var $37=$flag;
 var $38=($37&255);
 var $39=$38&31;
 $chan=$39;
 var $40=$chan;
 var $41=$mod;
 var $42=(($41+136)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($40|0)<($43|0);
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=$r;
 var $47=$chan;
 var $48=$i;
 var $49=$2;
 var $50=(($49)|0);
 var $51=(($50+168)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+($48<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+4)|0);
 var $56=(($55+($47<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$2;
 var $59=(($58)|0);
 var $60=(($59+172)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+($57<<2))|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+4)|0);
 var $65=(($64+($46<<3))|0);
 var $68=$65;label=10;break;
 case 9: 
 var $68=$dummy;label=10;break;
 case 10: 
 var $68;
 $event=$68;
 var $69=$flag;
 var $70=($69&255);
 var $71=$70&128;
 var $72=($71|0)!=0;
 if($72){label=11;break;}else{label=17;break;}
 case 11: 
 var $74=$4;
 var $75=_hio_read8($74);
 $fxp=$75;
 var $76=$4;
 var $77=_hio_read8($76);
 $fxt=$77;
 var $78=$fxt;
 var $79=($78&255);
 if(($79|0)==20){ label=12;break;}else{label=13;break;}
 case 12: 
 $fxt=-93;
 label=16;break;
 case 13: 
 var $82=$fxt;
 var $83=($82&255);
 var $84=($83|0)>15;
 if($84){label=14;break;}else{label=15;break;}
 case 14: 
 var $86=$fxt;
 var $87=($86&255);
 var $88=$fxp;
 var $89=($88&255);
 var $90=_printf(22320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$87,HEAP32[(((tempVarArgs)+(8))>>2)]=$89,tempVarArgs)); STACKTOP=tempVarArgs;
 $fxp=0;
 $fxt=0;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $93=$fxt;
 var $94=$event;
 var $95=(($94+3)|0);
 HEAP8[($95)]=$93;
 var $96=$fxp;
 var $97=$event;
 var $98=(($97+4)|0);
 HEAP8[($98)]=$96;
 label=17;break;
 case 17: 
 var $100=$flag;
 var $101=($100&255);
 var $102=$101&64;
 var $103=($102|0)!=0;
 if($103){label=18;break;}else{label=21;break;}
 case 18: 
 var $105=$4;
 var $106=_hio_read8($105);
 var $107=$event;
 var $108=(($107+1)|0);
 HEAP8[($108)]=$106;
 var $109=$4;
 var $110=_hio_read8($109);
 var $111=$event;
 var $112=(($111)|0);
 HEAP8[($112)]=$110;
 var $113=$event;
 var $114=(($113)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=($116|0)==128;
 if($117){label=19;break;}else{label=20;break;}
 case 19: 
 var $119=$event;
 var $120=(($119)|0);
 HEAP8[($120)]=-127;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $123=$flag;
 var $124=($123&255);
 var $125=$124&32;
 var $126=($125|0)!=0;
 if($126){label=22;break;}else{label=23;break;}
 case 22: 
 var $128=$4;
 var $129=_hio_read8($128);
 var $130=($129&255);
 var $131=(((($130|0))/(2))&-1);
 var $132=((($131)+(1))|0);
 var $133=(($132)&255);
 var $134=$event;
 var $135=(($134+2)|0);
 HEAP8[($135)]=$133;
 label=23;break;
 case 23: 
 label=4;break;
 case 24: 
 $1=0;
 label=25;break;
 case 25: 
 var $139=$1;
 STACKTOP=sp;return $139;
  default: assert(0, "bad label: " + label);
 }
}
function _get_inst246($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $srate;
 var $finetune;
 var $flags;
 var $has_unsigned_sample;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read32b($8);
 var $10=$4;
 var $11=_hio_read8($10);
 var $12=$4;
 var $13=_hio_read8($12);
 var $14=($13&255);
 $i=$14;
 var $15=$i;
 var $16=$mod;
 var $17=(($16+176)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+((($15)*(764))&-1))|0);
 var $20=(($19)|0);
 var $21=$20;
 var $22=$4;
 var $23=_hio_read($21,1,28,$22);
 var $24=$i;
 var $25=$mod;
 var $26=(($25+176)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+((($24)*(764))&-1))|0);
 var $29=(($28)|0);
 var $30=(($29)|0);
 var $31=_str_adj($30);
 var $32=$4;
 var $33=_hio_seek($32,290,1);
 var $34=$4;
 var $35=_hio_read16l($34);
 var $36=($35&65535);
 var $37=$i;
 var $38=$mod;
 var $39=(($38+176)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+((($37)*(764))&-1))|0);
 var $42=(($41+36)|0);
 HEAP32[(($42)>>2)]=$36;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $45=$i;
 var $46=$mod;
 var $47=(($46+176)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+((($45)*(764))&-1))|0);
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=22;break;
 case 5: 
 var $55=$mod;
 var $56=$i;
 var $57=$i;
 var $58=$mod;
 var $59=(($58+176)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+((($57)*(764))&-1))|0);
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=_subinstrument_alloc($55,$56,$63);
 var $65=($64|0)<0;
 if($65){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=22;break;
 case 7: 
 var $68=$4;
 var $69=_hio_read32b($68);
 var $70=$4;
 var $71=_hio_read32b($70);
 var $72=$4;
 var $73=_hio_read32b($72);
 var $74=$4;
 var $75=_hio_read32b($74);
 var $76=$4;
 var $77=_hio_read32b($76);
 var $78=$4;
 var $79=_hio_read32b($78);
 var $80=$i;
 var $81=$mod;
 var $82=(($81+180)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+((($80)*(52))&-1))|0);
 var $85=(($84)|0);
 var $86=$85;
 var $87=$4;
 var $88=_hio_read($86,1,28,$87);
 var $89=$i;
 var $90=$mod;
 var $91=(($90+180)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+((($89)*(52))&-1))|0);
 var $94=(($93)|0);
 var $95=(($94)|0);
 var $96=_str_adj($95);
 var $97=$4;
 var $98=_hio_read32b($97);
 var $99=$4;
 var $100=_hio_read8($99);
 var $101=$i;
 var $102=$i;
 var $103=$mod;
 var $104=(($103+176)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+((($102)*(764))&-1))|0);
 var $107=(($106+756)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108)|0);
 var $110=(($109+40)|0);
 HEAP32[(($110)>>2)]=$101;
 var $111=$4;
 var $112=_hio_read8($111);
 var $113=($112&255);
 var $114=$i;
 var $115=$mod;
 var $116=(($115+176)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+((($114)*(764))&-1))|0);
 var $119=(($118+32)|0);
 HEAP32[(($119)>>2)]=$113;
 var $120=$i;
 var $121=$mod;
 var $122=(($121+176)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+((($120)*(764))&-1))|0);
 var $125=(($124+756)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126)|0);
 var $128=(($127+8)|0);
 HEAP32[(($128)>>2)]=128;
 var $129=$4;
 var $130=_hio_read16l($129);
 var $131=($130&65535);
 var $132=((($131)+(1))|0);
 var $133=(((($132|0))/(512))&-1);
 var $134=$i;
 var $135=$mod;
 var $136=(($135+176)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+((($134)*(764))&-1))|0);
 var $139=(($138+756)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140)|0);
 var $142=(($141)|0);
 HEAP32[(($142)>>2)]=$133;
 var $143=$4;
 var $144=_hio_read16l($143);
 var $145=($144&65535);
 $flags=$145;
 var $146=$4;
 var $147=_hio_read16l($146);
 var $148=$4;
 var $149=_hio_read32l($148);
 var $150=$i;
 var $151=$mod;
 var $152=(($151+180)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+((($150)*(52))&-1))|0);
 var $155=(($154+32)|0);
 HEAP32[(($155)>>2)]=$149;
 var $156=$4;
 var $157=_hio_read32l($156);
 var $158=$i;
 var $159=$mod;
 var $160=(($159+180)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+((($158)*(52))&-1))|0);
 var $163=(($162+36)|0);
 HEAP32[(($163)>>2)]=$157;
 var $164=$4;
 var $165=_hio_read32l($164);
 var $166=$i;
 var $167=$mod;
 var $168=(($167+180)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+((($166)*(52))&-1))|0);
 var $171=(($170+40)|0);
 HEAP32[(($171)>>2)]=$165;
 var $172=$i;
 var $173=$mod;
 var $174=(($173+180)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+((($172)*(52))&-1))|0);
 var $177=(($176+44)|0);
 HEAP32[(($177)>>2)]=0;
 $has_unsigned_sample=0;
 var $178=$flags;
 var $179=$178&4;
 var $180=($179|0)!=0;
 if($180){label=8;break;}else{label=9;break;}
 case 8: 
 var $182=$i;
 var $183=$mod;
 var $184=(($183+180)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+((($182)*(52))&-1))|0);
 var $187=(($186+44)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=$188|1;
 HEAP32[(($187)>>2)]=$189;
 label=9;break;
 case 9: 
 var $191=$flags;
 var $192=$191&8;
 var $193=($192|0)!=0;
 if($193){label=10;break;}else{label=11;break;}
 case 10: 
 var $195=$i;
 var $196=$mod;
 var $197=(($196+180)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+((($195)*(52))&-1))|0);
 var $200=(($199+44)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$201|2;
 HEAP32[(($200)>>2)]=$202;
 label=11;break;
 case 11: 
 var $204=$flags;
 var $205=$204&16;
 var $206=($205|0)!=0;
 if($206){label=12;break;}else{label=13;break;}
 case 12: 
 var $208=$i;
 var $209=$mod;
 var $210=(($209+180)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+((($208)*(52))&-1))|0);
 var $213=(($212+44)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=$214|6;
 HEAP32[(($213)>>2)]=$215;
 label=13;break;
 case 13: 
 var $217=$flags;
 var $218=$217^-1;
 var $219=$218&128;
 var $220=($219|0)!=0;
 if($220){label=14;break;}else{label=15;break;}
 case 14: 
 $has_unsigned_sample=1;
 label=15;break;
 case 15: 
 var $223=$4;
 var $224=_hio_read32l($223);
 $srate=$224;
 $finetune=0;
 var $225=$srate;
 var $226=$i;
 var $227=$mod;
 var $228=(($227+176)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+((($226)*(764))&-1))|0);
 var $231=(($230+756)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232)|0);
 var $234=(($233+12)|0);
 var $235=$i;
 var $236=$mod;
 var $237=(($236+176)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+((($235)*(764))&-1))|0);
 var $240=(($239+756)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($241)|0);
 var $243=(($242+16)|0);
 _c2spd_to_note($225,$234,$243);
 var $244=$finetune;
 var $245=$i;
 var $246=$mod;
 var $247=(($246+176)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+((($245)*(764))&-1))|0);
 var $250=(($249+756)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(($251)|0);
 var $253=(($252+16)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=((($254)+($244))|0);
 HEAP32[(($253)>>2)]=$255;
 var $256=$4;
 var $257=_hio_read32l($256);
 var $258=$4;
 var $259=_hio_read32l($258);
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $262=$i;
 var $263=$mod;
 var $264=(($263+180)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+((($262)*(52))&-1))|0);
 var $267=(($266+32)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)>1;
 if($269){label=18;break;}else{label=21;break;}
 case 18: 
 var $271=$2;
 var $272=$4;
 var $273=$has_unsigned_sample;
 var $274=($273|0)!=0;
 var $275=($274?2:0);
 var $276=$i;
 var $277=$mod;
 var $278=(($277+180)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+((($276)*(52))&-1))|0);
 var $281=_load_sample($271,$272,$275,$280,0);
 var $282=($281|0)<0;
 if($282){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=22;break;
 case 20: 
 label=21;break;
 case 21: 
 $1=0;
 label=22;break;
 case 22: 
 var $287=$1;
 STACKTOP=sp;return $287;
  default: assert(0, "bad label: " + label);
 }
}
function _gdm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1195658750;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $10=$2;
 var $11=$4;
 var $12=((($11)+(71))|0);
 var $13=_hio_seek($10,$12,0);
 var $14=$2;
 var $15=_hio_read32b($14);
 var $16=($15|0)!=1196246611;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $19=$2;
 var $20=$4;
 var $21=((($20)+(4))|0);
 var $22=_hio_seek($19,$21,0);
 var $23=$2;
 var $24=$3;
 _read_title($23,$24,32);
 $1=0;
 label=6;break;
 case 6: 
 var $26=$1;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }
}
function _gdm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $vermaj;
 var $vermin;
 var $tvmaj;
 var $tvmin;
 var $tracker;
 var $origfmt;
 var $ord_ofs;
 var $pat_ofs;
 var $ins_ofs;
 var $smp_ofs;
 var $buffer=sp;
 var $panmap=(sp)+(32);
 var $i;
 var $flg;
 var $c4spd;
 var $vol;
 var $pan;
 var $len;
 var $c;
 var $r;
 var $k;
 var $len1;
 var $c2;
 var $r3;
 var $k4;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$mod;
 var $15=(($14)|0);
 var $16=(($15)|0);
 var $17=$3;
 var $18=_hio_read($16,1,32,$17);
 var $19=$3;
 var $20=_hio_seek($19,32,1);
 var $21=$3;
 var $22=_hio_seek($21,7,1);
 var $23=$3;
 var $24=_hio_read8($23);
 var $25=($24&255);
 $vermaj=$25;
 var $26=$3;
 var $27=_hio_read8($26);
 var $28=($27&255);
 $vermin=$28;
 var $29=$3;
 var $30=_hio_read16l($29);
 var $31=($30&65535);
 $tracker=$31;
 var $32=$3;
 var $33=_hio_read8($32);
 var $34=($33&255);
 $tvmaj=$34;
 var $35=$3;
 var $36=_hio_read8($35);
 var $37=($36&255);
 $tvmin=$37;
 var $38=$tracker;
 var $39=($38|0)==0;
 if($39){label=4;break;}else{label=5;break;}
 case 4: 
 var $41=$2;
 var $42=$vermaj;
 var $43=$vermin;
 var $44=$tvmaj;
 var $45=$tvmin;
 _set_type($41,26912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$42,HEAP32[(((tempVarArgs)+(8))>>2)]=$43,HEAP32[(((tempVarArgs)+(16))>>2)]=$44,HEAP32[(((tempVarArgs)+(24))>>2)]=$45,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 5: 
 var $47=$2;
 var $48=$vermaj;
 var $49=$vermin;
 var $50=$tvmaj;
 var $51=$tvmin;
 _set_type($47,24952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$48,HEAP32[(((tempVarArgs)+(8))>>2)]=$49,HEAP32[(((tempVarArgs)+(16))>>2)]=$50,HEAP32[(((tempVarArgs)+(24))>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 var $53=(($panmap)|0);
 var $54=$3;
 var $55=_hio_read($53,32,1,$54);
 $i=0;
 label=7;break;
 case 7: 
 var $57=$i;
 var $58=($57|0)<32;
 if($58){label=8;break;}else{label=15;break;}
 case 8: 
 var $60=$i;
 var $61=(($panmap+$60)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=($63|0)==255;
 if($64){label=9;break;}else{label=10;break;}
 case 9: 
 var $66=$i;
 var $67=(($panmap+$66)|0);
 HEAP8[($67)]=8;
 var $68=$i;
 var $69=$mod;
 var $70=(($69+184)|0);
 var $71=(($70+((($68)*(12))&-1))|0);
 var $72=(($71+4)|0);
 HEAP32[(($72)>>2)]=0;
 var $73=$i;
 var $74=$mod;
 var $75=(($74+184)|0);
 var $76=(($75+((($73)*(12))&-1))|0);
 var $77=(($76+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$78|2;
 HEAP32[(($77)>>2)]=$79;
 label=13;break;
 case 10: 
 var $81=$i;
 var $82=(($panmap+$81)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=($84|0)==16;
 if($85){label=11;break;}else{label=12;break;}
 case 11: 
 var $87=$i;
 var $88=(($panmap+$87)|0);
 HEAP8[($88)]=8;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $91=$i;
 var $92=(($panmap+$91)|0);
 var $93=HEAP8[($92)];
 var $94=($93&255);
 var $95=((($94)-(8))|0);
 var $96=($95<<4);
 var $97=((($96)+(128))|0);
 var $98=$i;
 var $99=$mod;
 var $100=(($99+184)|0);
 var $101=(($100+((($98)*(12))&-1))|0);
 var $102=(($101)|0);
 HEAP32[(($102)>>2)]=$97;
 label=14;break;
 case 14: 
 var $104=$i;
 var $105=((($104)+(1))|0);
 $i=$105;
 label=7;break;
 case 15: 
 var $107=$3;
 var $108=_hio_read8($107);
 var $109=($108&255);
 var $110=$mod;
 var $111=(($110+164)|0);
 HEAP32[(($111)>>2)]=$109;
 var $112=$3;
 var $113=_hio_read8($112);
 var $114=($113&255);
 var $115=$mod;
 var $116=(($115+148)|0);
 HEAP32[(($116)>>2)]=$114;
 var $117=$3;
 var $118=_hio_read8($117);
 var $119=($118&255);
 var $120=$mod;
 var $121=(($120+152)|0);
 HEAP32[(($121)>>2)]=$119;
 var $122=$3;
 var $123=_hio_read16l($122);
 var $124=($123&65535);
 $origfmt=$124;
 var $125=$3;
 var $126=_hio_read32l($125);
 $ord_ofs=$126;
 var $127=$3;
 var $128=_hio_read8($127);
 var $129=($128&255);
 var $130=((($129)+(1))|0);
 var $131=$mod;
 var $132=(($131+156)|0);
 HEAP32[(($132)>>2)]=$130;
 var $133=$3;
 var $134=_hio_read32l($133);
 $pat_ofs=$134;
 var $135=$3;
 var $136=_hio_read8($135);
 var $137=($136&255);
 var $138=((($137)+(1))|0);
 var $139=$mod;
 var $140=(($139+128)|0);
 HEAP32[(($140)>>2)]=$138;
 var $141=$3;
 var $142=_hio_read32l($141);
 $ins_ofs=$142;
 var $143=$3;
 var $144=_hio_read32l($143);
 $smp_ofs=$144;
 var $145=$3;
 var $146=_hio_read8($145);
 var $147=($146&255);
 var $148=((($147)+(1))|0);
 var $149=$mod;
 var $150=(($149+144)|0);
 HEAP32[(($150)>>2)]=$148;
 var $151=$mod;
 var $152=(($151+140)|0);
 HEAP32[(($152)>>2)]=$148;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $159=$3;
 var $160=$4;
 var $161=$ord_ofs;
 var $162=((($160)+($161))|0);
 var $163=_hio_seek($159,$162,0);
 $i=0;
 label=22;break;
 case 22: 
 var $165=$i;
 var $166=$mod;
 var $167=(($166+156)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($165|0)<($168|0);
 if($169){label=23;break;}else{label=25;break;}
 case 23: 
 var $171=$3;
 var $172=_hio_read8($171);
 var $173=$i;
 var $174=$mod;
 var $175=(($174+952)|0);
 var $176=(($175+$173)|0);
 HEAP8[($176)]=$172;
 label=24;break;
 case 24: 
 var $178=$i;
 var $179=((($178)+(1))|0);
 $i=$179;
 label=22;break;
 case 25: 
 var $181=$3;
 var $182=$4;
 var $183=$ins_ofs;
 var $184=((($182)+($183))|0);
 var $185=_hio_seek($181,$184,0);
 var $186=$mod;
 var $187=_instrument_init($186);
 var $188=($187|0)<0;
 if($188){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=102;break;
 case 27: 
 $i=0;
 label=28;break;
 case 28: 
 var $192=$i;
 var $193=$mod;
 var $194=(($193+140)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($192|0)<($195|0);
 if($196){label=29;break;}else{label=47;break;}
 case 29: 
 var $198=$mod;
 var $199=$i;
 var $200=_subinstrument_alloc($198,$199,1);
 var $201=($200|0)<0;
 if($201){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=102;break;
 case 31: 
 var $204=(($buffer)|0);
 var $205=$3;
 var $206=_hio_read($204,32,1,$205);
 var $207=$mod;
 var $208=$i;
 var $209=(($buffer)|0);
 var $210=_instrument_name($207,$208,$209,32);
 var $211=$3;
 var $212=_hio_seek($211,12,1);
 var $213=$3;
 var $214=_hio_read8($213);
 var $215=$3;
 var $216=_hio_read32l($215);
 var $217=$i;
 var $218=$mod;
 var $219=(($218+180)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+((($217)*(52))&-1))|0);
 var $222=(($221+32)|0);
 HEAP32[(($222)>>2)]=$216;
 var $223=$3;
 var $224=_hio_read32l($223);
 var $225=$i;
 var $226=$mod;
 var $227=(($226+180)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+((($225)*(52))&-1))|0);
 var $230=(($229+36)|0);
 HEAP32[(($230)>>2)]=$224;
 var $231=$3;
 var $232=_hio_read32l($231);
 var $233=$i;
 var $234=$mod;
 var $235=(($234+180)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+((($233)*(52))&-1))|0);
 var $238=(($237+40)|0);
 HEAP32[(($238)>>2)]=$232;
 var $239=$3;
 var $240=_hio_read8($239);
 var $241=($240&255);
 $flg=$241;
 var $242=$3;
 var $243=_hio_read16l($242);
 var $244=($243&65535);
 $c4spd=$244;
 var $245=$3;
 var $246=_hio_read8($245);
 var $247=($246&255);
 $vol=$247;
 var $248=$3;
 var $249=_hio_read8($248);
 var $250=($249&255);
 $pan=$250;
 var $251=$vol;
 var $252=($251|0)>64;
 if($252){label=32;break;}else{label=33;break;}
 case 32: 
 var $257=64;label=34;break;
 case 33: 
 var $255=$vol;
 var $257=$255;label=34;break;
 case 34: 
 var $257;
 var $258=$i;
 var $259=$mod;
 var $260=(($259+176)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=(($261+((($258)*(764))&-1))|0);
 var $263=(($262+756)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(($264)|0);
 var $266=(($265)|0);
 HEAP32[(($266)>>2)]=$257;
 var $267=$pan;
 var $268=($267|0)>15;
 if($268){label=35;break;}else{label=36;break;}
 case 35: 
 var $276=128;label=37;break;
 case 36: 
 var $271=$pan;
 var $272=((($271)-(8))|0);
 var $273=($272<<4);
 var $274=((($273)+(128))|0);
 var $276=$274;label=37;break;
 case 37: 
 var $276;
 var $277=$i;
 var $278=$mod;
 var $279=(($278+176)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($280+((($277)*(764))&-1))|0);
 var $282=(($281+756)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283)|0);
 var $285=(($284+8)|0);
 HEAP32[(($285)>>2)]=$276;
 var $286=$c4spd;
 var $287=$i;
 var $288=$mod;
 var $289=(($288+176)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=(($290+((($287)*(764))&-1))|0);
 var $292=(($291+756)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293)|0);
 var $295=(($294+12)|0);
 var $296=$i;
 var $297=$mod;
 var $298=(($297+176)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+((($296)*(764))&-1))|0);
 var $301=(($300+756)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302)|0);
 var $304=(($303+16)|0);
 _c2spd_to_note($286,$295,$304);
 var $305=$i;
 var $306=$i;
 var $307=$mod;
 var $308=(($307+176)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(($309+((($306)*(764))&-1))|0);
 var $311=(($310+756)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=(($312)|0);
 var $314=(($313+40)|0);
 HEAP32[(($314)>>2)]=$305;
 var $315=$i;
 var $316=$mod;
 var $317=(($316+180)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=(($318+((($315)*(52))&-1))|0);
 var $320=(($319+44)|0);
 HEAP32[(($320)>>2)]=0;
 var $321=$i;
 var $322=$mod;
 var $323=(($322+180)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($324+((($321)*(52))&-1))|0);
 var $326=(($325+32)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=($327|0)>0;
 if($328){label=38;break;}else{label=39;break;}
 case 38: 
 var $330=$i;
 var $331=$mod;
 var $332=(($331+176)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($333+((($330)*(764))&-1))|0);
 var $335=(($334+36)|0);
 HEAP32[(($335)>>2)]=1;
 label=39;break;
 case 39: 
 var $337=$flg;
 var $338=$337&1;
 var $339=($338|0)!=0;
 if($339){label=40;break;}else{label=41;break;}
 case 40: 
 var $341=$i;
 var $342=$mod;
 var $343=(($342+180)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=(($344+((($341)*(52))&-1))|0);
 var $346=(($345+44)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=$347|2;
 HEAP32[(($346)>>2)]=$348;
 label=41;break;
 case 41: 
 var $350=$flg;
 var $351=$350&2;
 var $352=($351|0)!=0;
 if($352){label=42;break;}else{label=43;break;}
 case 42: 
 var $354=$i;
 var $355=$mod;
 var $356=(($355+180)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+((($354)*(52))&-1))|0);
 var $359=(($358+44)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=$360|1;
 HEAP32[(($359)>>2)]=$361;
 var $362=$i;
 var $363=$mod;
 var $364=(($363+180)|0);
 var $365=HEAP32[(($364)>>2)];
 var $366=(($365+((($362)*(52))&-1))|0);
 var $367=(($366+32)|0);
 var $368=HEAP32[(($367)>>2)];
 var $369=$368>>1;
 HEAP32[(($367)>>2)]=$369;
 var $370=$i;
 var $371=$mod;
 var $372=(($371+180)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373+((($370)*(52))&-1))|0);
 var $375=(($374+36)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=$376>>1;
 HEAP32[(($375)>>2)]=$377;
 var $378=$i;
 var $379=$mod;
 var $380=(($379+180)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($381+((($378)*(52))&-1))|0);
 var $383=(($382+40)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=$384>>1;
 HEAP32[(($383)>>2)]=$385;
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 var $390=$i;
 var $391=((($390)+(1))|0);
 $i=$391;
 label=28;break;
 case 47: 
 var $393=$3;
 var $394=$4;
 var $395=$pat_ofs;
 var $396=((($394)+($395))|0);
 var $397=_hio_seek($393,$396,0);
 var $398=$mod;
 var $399=(($398+136)|0);
 HEAP32[(($399)>>2)]=0;
 $i=0;
 label=48;break;
 case 48: 
 var $401=$i;
 var $402=$mod;
 var $403=(($402+128)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=($401|0)<($404|0);
 if($405){label=49;break;}else{label=67;break;}
 case 49: 
 var $407=$3;
 var $408=_hio_read16l($407);
 var $409=($408&65535);
 $len=$409;
 var $410=$len;
 var $411=((($410)-(2))|0);
 $len=$411;
 $r=0;
 label=50;break;
 case 50: 
 var $413=$len;
 var $414=($413|0)>0;
 if($414){label=51;break;}else{label=65;break;}
 case 51: 
 var $416=$3;
 var $417=_hio_read8($416);
 var $418=($417&255);
 $c=$418;
 var $419=$len;
 var $420=((($419)-(1))|0);
 $len=$420;
 var $421=$c;
 var $422=($421|0)==0;
 if($422){label=52;break;}else{label=53;break;}
 case 52: 
 var $424=$r;
 var $425=((($424)+(1))|0);
 $r=$425;
 label=50;break;
 case 53: 
 var $427=$mod;
 var $428=(($427+136)|0);
 var $429=HEAP32[(($428)>>2)];
 var $430=$c;
 var $431=$430&31;
 var $432=($429|0)<=($431|0);
 if($432){label=54;break;}else{label=55;break;}
 case 54: 
 var $434=$c;
 var $435=$434&31;
 var $436=((($435)+(1))|0);
 var $437=$mod;
 var $438=(($437+136)|0);
 HEAP32[(($438)>>2)]=$436;
 label=55;break;
 case 55: 
 var $440=$c;
 var $441=$440&32;
 var $442=($441|0)!=0;
 if($442){label=56;break;}else{label=57;break;}
 case 56: 
 var $444=$3;
 var $445=_hio_read8($444);
 var $446=$3;
 var $447=_hio_read8($446);
 var $448=$len;
 var $449=((($448)-(2))|0);
 $len=$449;
 label=57;break;
 case 57: 
 var $451=$c;
 var $452=$451&64;
 var $453=($452|0)!=0;
 if($453){label=58;break;}else{label=64;break;}
 case 58: 
 label=59;break;
 case 59: 
 var $456=$3;
 var $457=_hio_read8($456);
 var $458=($457&255);
 $k=$458;
 var $459=$len;
 var $460=((($459)-(1))|0);
 $len=$460;
 var $461=$k;
 var $462=$461&192;
 var $463=($462|0)!=192;
 if($463){label=60;break;}else{label=61;break;}
 case 60: 
 var $465=$3;
 var $466=_hio_read8($465);
 var $467=$len;
 var $468=((($467)-(1))|0);
 $len=$468;
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 var $471=$k;
 var $472=$471&32;
 var $473=($472|0)!=0;
 if($473){label=59;break;}else{label=63;break;}
 case 63: 
 label=64;break;
 case 64: 
 label=50;break;
 case 65: 
 label=66;break;
 case 66: 
 var $478=$i;
 var $479=((($478)+(1))|0);
 $i=$479;
 label=48;break;
 case 67: 
 var $481=$mod;
 var $482=(($481+128)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=$mod;
 var $485=(($484+136)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=(Math_imul($483,$486)|0);
 var $488=$mod;
 var $489=(($488+132)|0);
 HEAP32[(($489)>>2)]=$487;
 var $490=$mod;
 var $491=_pattern_init($490);
 var $492=($491|0)<0;
 if($492){label=68;break;}else{label=69;break;}
 case 68: 
 $1=-1;
 label=102;break;
 case 69: 
 var $495=$3;
 var $496=$4;
 var $497=$pat_ofs;
 var $498=((($496)+($497))|0);
 var $499=_hio_seek($495,$498,0);
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 $i=0;
 label=72;break;
 case 72: 
 var $503=$i;
 var $504=$mod;
 var $505=(($504+128)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=($503|0)<($506|0);
 if($507){label=73;break;}else{label=93;break;}
 case 73: 
 var $509=$mod;
 var $510=$i;
 var $511=_pattern_tracks_alloc($509,$510,64);
 var $512=($511|0)<0;
 if($512){label=74;break;}else{label=75;break;}
 case 74: 
 $1=-1;
 label=102;break;
 case 75: 
 var $515=$3;
 var $516=_hio_read16l($515);
 var $517=($516&65535);
 $len1=$517;
 var $518=$len1;
 var $519=((($518)-(2))|0);
 $len1=$519;
 $r3=0;
 label=76;break;
 case 76: 
 var $521=$len1;
 var $522=($521|0)>0;
 if($522){label=77;break;}else{label=91;break;}
 case 77: 
 var $524=$3;
 var $525=_hio_read8($524);
 var $526=($525&255);
 $c2=$526;
 var $527=$len1;
 var $528=((($527)-(1))|0);
 $len1=$528;
 var $529=$c2;
 var $530=($529|0)==0;
 if($530){label=78;break;}else{label=79;break;}
 case 78: 
 var $532=$r3;
 var $533=((($532)+(1))|0);
 $r3=$533;
 label=76;break;
 case 79: 
 var $535=$r3;
 var $536=$c2;
 var $537=$536&31;
 var $538=$i;
 var $539=$2;
 var $540=(($539)|0);
 var $541=(($540+168)|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=(($542+($538<<2))|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=(($544+4)|0);
 var $546=(($545+($537<<2))|0);
 var $547=HEAP32[(($546)>>2)];
 var $548=$2;
 var $549=(($548)|0);
 var $550=(($549+172)|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=(($551+($547<<2))|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=(($553+4)|0);
 var $555=(($554+($535<<3))|0);
 $event=$555;
 var $556=$c2;
 var $557=$556&32;
 var $558=($557|0)!=0;
 if($558){label=80;break;}else{label=81;break;}
 case 80: 
 var $560=$3;
 var $561=_hio_read8($560);
 var $562=($561&255);
 $k4=$562;
 var $563=$k4;
 var $564=$563&127;
 var $565=$564&240;
 var $566=$565>>4;
 var $567=((($566)*(12))&-1);
 var $568=((($567)+(12))|0);
 var $569=$k4;
 var $570=$569&15;
 var $571=((($568)+($570))|0);
 var $572=(($571)&255);
 var $573=$event;
 var $574=(($573)|0);
 HEAP8[($574)]=$572;
 var $575=$3;
 var $576=_hio_read8($575);
 var $577=$event;
 var $578=(($577+1)|0);
 HEAP8[($578)]=$576;
 var $579=$len1;
 var $580=((($579)-(2))|0);
 $len1=$580;
 label=81;break;
 case 81: 
 var $582=$c2;
 var $583=$582&64;
 var $584=($583|0)!=0;
 if($584){label=82;break;}else{label=90;break;}
 case 82: 
 label=83;break;
 case 83: 
 var $587=$3;
 var $588=_hio_read8($587);
 var $589=($588&255);
 $k4=$589;
 var $590=$len1;
 var $591=((($590)-(1))|0);
 $len1=$591;
 var $592=$k4;
 var $593=$592&192;
 var $594=$593>>6;
 if(($594|0)==0){ label=84;break;}else if(($594|0)==1){ label=85;break;}else if(($594|0)==2){ label=86;break;}else{label=87;break;}
 case 84: 
 var $596=$k4;
 var $597=$596&31;
 var $598=(($597)&255);
 var $599=$event;
 var $600=(($599+3)|0);
 HEAP8[($600)]=$598;
 var $601=$3;
 var $602=_hio_read8($601);
 var $603=$event;
 var $604=(($603+4)|0);
 HEAP8[($604)]=$602;
 var $605=$len1;
 var $606=((($605)-(1))|0);
 $len1=$606;
 var $607=$event;
 var $608=(($607+3)|0);
 var $609=$event;
 var $610=(($609+4)|0);
 _fix_effect($608,$610);
 label=87;break;
 case 85: 
 var $612=$k4;
 var $613=$612&31;
 var $614=(($613)&255);
 var $615=$event;
 var $616=(($615+5)|0);
 HEAP8[($616)]=$614;
 var $617=$3;
 var $618=_hio_read8($617);
 var $619=$event;
 var $620=(($619+6)|0);
 HEAP8[($620)]=$618;
 var $621=$len1;
 var $622=((($621)-(1))|0);
 $len1=$622;
 var $623=$event;
 var $624=(($623+5)|0);
 var $625=$event;
 var $626=(($625+6)|0);
 _fix_effect($624,$626);
 label=87;break;
 case 86: 
 var $628=$3;
 var $629=_hio_read8($628);
 var $630=$len1;
 var $631=((($630)-(1))|0);
 $len1=$631;
 label=87;break;
 case 87: 
 label=88;break;
 case 88: 
 var $634=$k4;
 var $635=$634&32;
 var $636=($635|0)!=0;
 if($636){label=83;break;}else{label=89;break;}
 case 89: 
 label=90;break;
 case 90: 
 label=76;break;
 case 91: 
 label=92;break;
 case 92: 
 var $641=$i;
 var $642=((($641)+(1))|0);
 $i=$642;
 label=72;break;
 case 93: 
 var $644=$3;
 var $645=$4;
 var $646=$smp_ofs;
 var $647=((($645)+($646))|0);
 var $648=_hio_seek($644,$647,0);
 label=94;break;
 case 94: 
 label=95;break;
 case 95: 
 $i=0;
 label=96;break;
 case 96: 
 var $652=$i;
 var $653=$mod;
 var $654=(($653+140)|0);
 var $655=HEAP32[(($654)>>2)];
 var $656=($652|0)<($655|0);
 if($656){label=97;break;}else{label=101;break;}
 case 97: 
 var $658=$2;
 var $659=$3;
 var $660=$i;
 var $661=$mod;
 var $662=(($661+180)|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=(($663+((($660)*(52))&-1))|0);
 var $665=_load_sample($658,$659,2,$664,0);
 var $666=($665|0)<0;
 if($666){label=98;break;}else{label=99;break;}
 case 98: 
 $1=-1;
 label=102;break;
 case 99: 
 label=100;break;
 case 100: 
 var $670=$i;
 var $671=((($670)+(1))|0);
 $i=$671;
 label=96;break;
 case 101: 
 $1=0;
 label=102;break;
 case 102: 
 var $674=$1;
 STACKTOP=sp;return $674;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_effect($fxt,$fxp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$fxt;
 $2=$fxp;
 var $3=$1;
 var $4=HEAP8[($3)];
 var $5=($4&255);
 switch(($5|0)){case 20:{ label=10;break;}case 30:{ label=11;break;}case 31:{ label=12;break;}case 0:{ label=2;break;}case 1:case 2:case 3:case 4:case 5:case 6:case 7:{ label=3;break;}case 8:{ label=4;break;}case 9:case 10:case 11:case 12:case 13:case 14:case 15:{ label=5;break;}case 16:{ label=6;break;}case 17:{ label=7;break;}case 18:{ label=8;break;}case 19:{ label=9;break;}default:{label=13;break;}}break;
 case 2: 
 var $7=$2;
 HEAP8[($7)]=0;
 label=14;break;
 case 3: 
 label=14;break;
 case 4: 
 var $10=$1;
 HEAP8[($10)]=29;
 label=14;break;
 case 5: 
 label=14;break;
 case 6: 
 var $13=$1;
 HEAP8[($13)]=0;
 label=14;break;
 case 7: 
 var $15=$2;
 HEAP8[($15)]=0;
 var $16=$1;
 HEAP8[($16)]=0;
 label=14;break;
 case 8: 
 var $18=$1;
 HEAP8[($18)]=27;
 label=14;break;
 case 9: 
 var $20=$1;
 HEAP8[($20)]=16;
 label=14;break;
 case 10: 
 var $22=$1;
 HEAP8[($22)]=-84;
 label=14;break;
 case 11: 
 var $24=$2;
 HEAP8[($24)]=0;
 var $25=$1;
 HEAP8[($25)]=0;
 label=14;break;
 case 12: 
 var $27=$1;
 HEAP8[($27)]=-85;
 label=14;break;
 case 13: 
 var $29=$2;
 HEAP8[($29)]=0;
 var $30=$1;
 HEAP8[($30)]=0;
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _gtk_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,4,$6);
 var $8=($7>>>0)<4;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=7;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,24944,3);
 var $13=($12|0)!=0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($buf+3)|0);
 var $16=HEAP8[($15)];
 var $17=(($16<<24)>>24);
 var $18=($17|0)>4;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=7;break;
 case 6: 
 var $21=$2;
 var $22=$3;
 _read_title($21,$22,32);
 $1=0;
 label=7;break;
 case 7: 
 var $24=$1;
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _gtk_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $k;
 var $buffer=sp;
 var $rows;
 var $bits;
 var $c2spd;
 var $size;
 var $ver;
 var $patmax;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($buffer)|0);
 var $13=$3;
 var $14=_hio_read($12,4,1,$13);
 var $15=(($buffer+3)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 $ver=$17;
 var $18=$mod;
 var $19=(($18)|0);
 var $20=(($19)|0);
 var $21=$3;
 var $22=_hio_read($20,32,1,$21);
 var $23=$2;
 var $24=$ver;
 _set_type($23,26880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs;
 var $25=$3;
 var $26=_hio_seek($25,160,1);
 var $27=$3;
 var $28=_hio_read16b($27);
 var $29=($28&65535);
 var $30=$mod;
 var $31=(($30+140)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$mod;
 var $33=(($32+140)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$mod;
 var $36=(($35+144)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$3;
 var $38=_hio_read16b($37);
 var $39=($38&65535);
 $rows=$39;
 var $40=$3;
 var $41=_hio_read16b($40);
 var $42=($41&65535);
 var $43=$mod;
 var $44=(($43+136)|0);
 HEAP32[(($44)>>2)]=$42;
 var $45=$3;
 var $46=_hio_read16b($45);
 var $47=($46&65535);
 var $48=$mod;
 var $49=(($48+156)|0);
 HEAP32[(($49)>>2)]=$47;
 var $50=$3;
 var $51=_hio_read16b($50);
 var $52=($51&65535);
 var $53=$mod;
 var $54=(($53+160)|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=$2;
 var $56=(($55+1268)|0);
 HEAP32[(($56)>>2)]=256;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $65=$mod;
 var $66=_instrument_init($65);
 var $67=($66|0)<0;
 if($67){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=71;break;
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 var $71=$i;
 var $72=$mod;
 var $73=(($72+140)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($71|0)<($74|0);
 if($75){label=15;break;}else{label=28;break;}
 case 15: 
 var $77=$mod;
 var $78=$i;
 var $79=_subinstrument_alloc($77,$78,1);
 var $80=($79|0)<0;
 if($80){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=71;break;
 case 17: 
 var $83=(($buffer)|0);
 var $84=$3;
 var $85=_hio_read($83,28,1,$84);
 var $86=$mod;
 var $87=$i;
 var $88=(($buffer)|0);
 var $89=_instrument_name($86,$87,$88,28);
 var $90=$ver;
 var $91=($90|0)==1;
 if($91){label=18;break;}else{label=19;break;}
 case 18: 
 var $93=$3;
 var $94=_hio_read32b($93);
 var $95=$3;
 var $96=_hio_read32b($95);
 var $97=$i;
 var $98=$mod;
 var $99=(($98+180)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+((($97)*(52))&-1))|0);
 var $102=(($101+32)|0);
 HEAP32[(($102)>>2)]=$96;
 var $103=$3;
 var $104=_hio_read32b($103);
 var $105=$i;
 var $106=$mod;
 var $107=(($106+180)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+((($105)*(52))&-1))|0);
 var $110=(($109+36)|0);
 HEAP32[(($110)>>2)]=$104;
 var $111=$3;
 var $112=_hio_read32b($111);
 $size=$112;
 var $113=$i;
 var $114=$mod;
 var $115=(($114+180)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+((($113)*(52))&-1))|0);
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$size;
 var $121=((($119)+($120))|0);
 var $122=((($121)-(1))|0);
 var $123=$i;
 var $124=$mod;
 var $125=(($124+180)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+((($123)*(52))&-1))|0);
 var $128=(($127+40)|0);
 HEAP32[(($128)>>2)]=$122;
 var $129=$3;
 var $130=_hio_read16b($129);
 var $131=$3;
 var $132=_hio_read16b($131);
 var $133=$i;
 var $134=$mod;
 var $135=(($134+176)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+((($133)*(764))&-1))|0);
 var $138=(($137+756)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139)|0);
 var $141=(($140)|0);
 HEAP32[(($141)>>2)]=255;
 var $142=$i;
 var $143=$mod;
 var $144=(($143+176)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+((($142)*(764))&-1))|0);
 var $147=(($146+756)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148)|0);
 var $150=(($149+8)|0);
 HEAP32[(($150)>>2)]=128;
 $bits=1;
 $c2spd=8363;
 label=20;break;
 case 19: 
 var $152=$3;
 var $153=_hio_seek($152,14,1);
 var $154=$3;
 var $155=_hio_read16b($154);
 var $156=$3;
 var $157=_hio_read16b($156);
 var $158=($157&65535);
 $bits=$158;
 var $159=$3;
 var $160=_hio_read16b($159);
 var $161=($160&65535);
 $c2spd=$161;
 var $162=$c2spd;
 var $163=$i;
 var $164=$mod;
 var $165=(($164+176)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+((($163)*(764))&-1))|0);
 var $168=(($167+756)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169)|0);
 var $171=(($170+12)|0);
 var $172=$i;
 var $173=$mod;
 var $174=(($173+176)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+((($172)*(764))&-1))|0);
 var $177=(($176+756)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178)|0);
 var $180=(($179+16)|0);
 _c2spd_to_note($162,$171,$180);
 var $181=$3;
 var $182=_hio_read32b($181);
 var $183=$i;
 var $184=$mod;
 var $185=(($184+180)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+((($183)*(52))&-1))|0);
 var $188=(($187+32)|0);
 HEAP32[(($188)>>2)]=$182;
 var $189=$3;
 var $190=_hio_read32b($189);
 var $191=$i;
 var $192=$mod;
 var $193=(($192+180)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194+((($191)*(52))&-1))|0);
 var $196=(($195+36)|0);
 HEAP32[(($196)>>2)]=$190;
 var $197=$3;
 var $198=_hio_read32b($197);
 $size=$198;
 var $199=$i;
 var $200=$mod;
 var $201=(($200+180)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+((($199)*(52))&-1))|0);
 var $204=(($203+36)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=$size;
 var $207=((($205)+($206))|0);
 var $208=((($207)-(1))|0);
 var $209=$i;
 var $210=$mod;
 var $211=(($210+180)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+((($209)*(52))&-1))|0);
 var $214=(($213+40)|0);
 HEAP32[(($214)>>2)]=$208;
 var $215=$3;
 var $216=_hio_read16b($215);
 var $217=($216&65535);
 var $218=$i;
 var $219=$mod;
 var $220=(($219+176)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+((($218)*(764))&-1))|0);
 var $223=(($222+756)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224)|0);
 var $226=(($225)|0);
 HEAP32[(($226)>>2)]=$217;
 var $227=$3;
 var $228=_hio_read8($227);
 var $229=$3;
 var $230=_hio_read8s($229);
 var $231=(($230<<24)>>24);
 var $232=$i;
 var $233=$mod;
 var $234=(($233+176)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+((($232)*(764))&-1))|0);
 var $237=(($236+756)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238)|0);
 var $240=(($239+16)|0);
 HEAP32[(($240)>>2)]=$231;
 label=20;break;
 case 20: 
 var $242=$i;
 var $243=$mod;
 var $244=(($243+180)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+((($242)*(52))&-1))|0);
 var $247=(($246+32)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248|0)>0;
 if($249){label=21;break;}else{label=22;break;}
 case 21: 
 var $251=$i;
 var $252=$mod;
 var $253=(($252+176)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+((($251)*(764))&-1))|0);
 var $256=(($255+36)|0);
 HEAP32[(($256)>>2)]=1;
 label=22;break;
 case 22: 
 var $258=$i;
 var $259=$i;
 var $260=$mod;
 var $261=(($260+176)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262+((($259)*(764))&-1))|0);
 var $264=(($263+756)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265)|0);
 var $267=(($266+40)|0);
 HEAP32[(($267)>>2)]=$258;
 var $268=$size;
 var $269=($268|0)>2;
 var $270=($269?2:0);
 var $271=$i;
 var $272=$mod;
 var $273=(($272+180)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=(($274+((($271)*(52))&-1))|0);
 var $276=(($275+44)|0);
 HEAP32[(($276)>>2)]=$270;
 var $277=$bits;
 var $278=($277|0)>1;
 if($278){label=23;break;}else{label=24;break;}
 case 23: 
 var $280=$i;
 var $281=$mod;
 var $282=(($281+180)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283+((($280)*(52))&-1))|0);
 var $285=(($284+44)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=$286|1;
 HEAP32[(($285)>>2)]=$287;
 var $288=$i;
 var $289=$mod;
 var $290=(($289+180)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+((($288)*(52))&-1))|0);
 var $293=(($292+32)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=$294>>1;
 HEAP32[(($293)>>2)]=$295;
 var $296=$i;
 var $297=$mod;
 var $298=(($297+180)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+((($296)*(52))&-1))|0);
 var $301=(($300+36)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=$302>>1;
 HEAP32[(($301)>>2)]=$303;
 var $304=$i;
 var $305=$mod;
 var $306=(($305+180)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(($307+((($304)*(52))&-1))|0);
 var $309=(($308+40)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=$310>>1;
 HEAP32[(($309)>>2)]=$311;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $316=$i;
 var $317=((($316)+(1))|0);
 $i=$317;
 label=14;break;
 case 28: 
 $i=0;
 label=29;break;
 case 29: 
 var $320=$i;
 var $321=($320|0)<256;
 if($321){label=30;break;}else{label=32;break;}
 case 30: 
 var $323=$3;
 var $324=_hio_read16b($323);
 var $325=(($324)&255);
 var $326=$i;
 var $327=$mod;
 var $328=(($327+952)|0);
 var $329=(($328+$326)|0);
 HEAP8[($329)]=$325;
 label=31;break;
 case 31: 
 var $331=$i;
 var $332=((($331)+(1))|0);
 $i=$332;
 label=29;break;
 case 32: 
 $i=0;
 $patmax=0;
 label=33;break;
 case 33: 
 var $335=$i;
 var $336=$mod;
 var $337=(($336+156)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=($335|0)<($338|0);
 if($339){label=34;break;}else{label=38;break;}
 case 34: 
 var $341=$i;
 var $342=$mod;
 var $343=(($342+952)|0);
 var $344=(($343+$341)|0);
 var $345=HEAP8[($344)];
 var $346=($345&255);
 var $347=$patmax;
 var $348=($346|0)>($347|0);
 if($348){label=35;break;}else{label=36;break;}
 case 35: 
 var $350=$i;
 var $351=$mod;
 var $352=(($351+952)|0);
 var $353=(($352+$350)|0);
 var $354=HEAP8[($353)];
 var $355=($354&255);
 $patmax=$355;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $358=$i;
 var $359=((($358)+(1))|0);
 $i=$359;
 label=33;break;
 case 38: 
 var $361=$patmax;
 var $362=((($361)+(1))|0);
 var $363=$mod;
 var $364=(($363+128)|0);
 HEAP32[(($364)>>2)]=$362;
 var $365=$mod;
 var $366=(($365+128)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=$mod;
 var $369=(($368+136)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=(Math_imul($367,$370)|0);
 var $372=$mod;
 var $373=(($372+132)|0);
 HEAP32[(($373)>>2)]=$371;
 var $374=$mod;
 var $375=_pattern_init($374);
 var $376=($375|0)<0;
 if($376){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=71;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 $i=0;
 label=43;break;
 case 43: 
 var $382=$i;
 var $383=$mod;
 var $384=(($383+128)|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=($382|0)<($385|0);
 if($386){label=44;break;}else{label=60;break;}
 case 44: 
 var $388=$mod;
 var $389=$i;
 var $390=$rows;
 var $391=_pattern_tracks_alloc($388,$389,$390);
 var $392=($391|0)<0;
 if($392){label=45;break;}else{label=46;break;}
 case 45: 
 $1=-1;
 label=71;break;
 case 46: 
 $j=0;
 label=47;break;
 case 47: 
 var $396=$j;
 var $397=$i;
 var $398=$mod;
 var $399=(($398+168)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=(($400+($397<<2))|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=(($402)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=($396|0)<($404|0);
 if($405){label=48;break;}else{label=58;break;}
 case 48: 
 $k=0;
 label=49;break;
 case 49: 
 var $408=$k;
 var $409=$mod;
 var $410=(($409+136)|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=($408|0)<($411|0);
 if($412){label=50;break;}else{label=56;break;}
 case 50: 
 var $414=$j;
 var $415=$k;
 var $416=$i;
 var $417=$2;
 var $418=(($417)|0);
 var $419=(($418+168)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=(($420+($416<<2))|0);
 var $422=HEAP32[(($421)>>2)];
 var $423=(($422+4)|0);
 var $424=(($423+($415<<2))|0);
 var $425=HEAP32[(($424)>>2)];
 var $426=$2;
 var $427=(($426)|0);
 var $428=(($427+172)|0);
 var $429=HEAP32[(($428)>>2)];
 var $430=(($429+($425<<2))|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=(($431+4)|0);
 var $433=(($432+($414<<3))|0);
 $event=$433;
 var $434=$3;
 var $435=_hio_read8($434);
 var $436=$event;
 var $437=(($436)|0);
 HEAP8[($437)]=$435;
 var $438=$event;
 var $439=(($438)|0);
 var $440=HEAP8[($439)];
 var $441=(($440<<24)>>24)!=0;
 if($441){label=51;break;}else{label=52;break;}
 case 51: 
 var $443=$event;
 var $444=(($443)|0);
 var $445=HEAP8[($444)];
 var $446=($445&255);
 var $447=((($446)+(13))|0);
 var $448=(($447)&255);
 HEAP8[($444)]=$448;
 label=52;break;
 case 52: 
 var $450=$3;
 var $451=_hio_read8($450);
 var $452=$event;
 var $453=(($452+1)|0);
 HEAP8[($453)]=$451;
 var $454=$3;
 var $455=_hio_read8($454);
 var $456=$event;
 var $457=(($456+3)|0);
 HEAP8[($457)]=$455;
 var $458=$3;
 var $459=_hio_read8($458);
 var $460=$event;
 var $461=(($460+4)|0);
 HEAP8[($461)]=$459;
 var $462=$ver;
 var $463=($462|0)>=4;
 if($463){label=53;break;}else{label=54;break;}
 case 53: 
 var $465=$3;
 var $466=_hio_read8($465);
 var $467=$event;
 var $468=(($467+2)|0);
 HEAP8[($468)]=$466;
 label=54;break;
 case 54: 
 var $470=$event;
 _translate_effects($470);
 label=55;break;
 case 55: 
 var $472=$k;
 var $473=((($472)+(1))|0);
 $k=$473;
 label=49;break;
 case 56: 
 label=57;break;
 case 57: 
 var $476=$j;
 var $477=((($476)+(1))|0);
 $j=$477;
 label=47;break;
 case 58: 
 label=59;break;
 case 59: 
 var $480=$i;
 var $481=((($480)+(1))|0);
 $i=$481;
 label=43;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 $i=0;
 label=63;break;
 case 63: 
 var $486=$i;
 var $487=$mod;
 var $488=(($487+140)|0);
 var $489=HEAP32[(($488)>>2)];
 var $490=($486|0)<($489|0);
 if($490){label=64;break;}else{label=70;break;}
 case 64: 
 var $492=$i;
 var $493=$mod;
 var $494=(($493+180)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=(($495+((($492)*(52))&-1))|0);
 var $497=(($496+32)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=($498|0)==0;
 if($499){label=65;break;}else{label=66;break;}
 case 65: 
 label=69;break;
 case 66: 
 var $502=$2;
 var $503=$3;
 var $504=$i;
 var $505=$mod;
 var $506=(($505+180)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(($507+((($504)*(52))&-1))|0);
 var $509=_load_sample($502,$503,0,$508,0);
 var $510=($509|0)<0;
 if($510){label=67;break;}else{label=68;break;}
 case 67: 
 $1=-1;
 label=71;break;
 case 68: 
 label=69;break;
 case 69: 
 var $514=$i;
 var $515=((($514)+(1))|0);
 $i=$515;
 label=63;break;
 case 70: 
 $1=0;
 label=71;break;
 case 71: 
 var $518=$1;
 STACKTOP=sp;return $518;
  default: assert(0, "bad label: " + label);
 }
}
function _translate_effects($event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$event;
 var $2=$1;
 var $3=(($2+3)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=($5|0)==14;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=$1;
 var $9=(($8+3)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=($11|0)==12;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$1;
 var $15=(($14+3)|0);
 HEAP8[($15)]=0;
 var $16=$1;
 var $17=(($16+4)|0);
 HEAP8[($17)]=0;
 label=4;break;
 case 4: 
 var $19=$1;
 var $20=(($19+3)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)>15;
 if($23){label=5;break;}else{label=20;break;}
 case 5: 
 var $25=$1;
 var $26=(($25+3)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 switch(($28|0)){case 33:{ label=10;break;}case 164:{ label=11;break;}case 165:{ label=14;break;}case 168:{ label=17;break;}case 16:{ label=6;break;}case 21:{ label=7;break;}case 22:{ label=8;break;}case 32:{ label=9;break;}default:{label=18;break;}}break;
 case 6: 
 var $30=$1;
 var $31=(($30+3)|0);
 HEAP8[($31)]=0;
 label=19;break;
 case 7: 
 var $33=$1;
 var $34=(($33+3)|0);
 HEAP8[($34)]=-95;
 label=19;break;
 case 8: 
 var $36=$1;
 var $37=(($36+3)|0);
 HEAP8[($37)]=-96;
 label=19;break;
 case 9: 
 var $39=$1;
 var $40=(($39+3)|0);
 HEAP8[($40)]=12;
 label=19;break;
 case 10: 
 var $42=$1;
 var $43=(($42+3)|0);
 HEAP8[($43)]=12;
 var $44=$1;
 var $45=(($44+4)|0);
 HEAP8[($45)]=-1;
 label=19;break;
 case 11: 
 var $47=$1;
 var $48=(($47+3)|0);
 HEAP8[($48)]=-91;
 var $49=$1;
 var $50=(($49+4)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=($52|0)>15;
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 var $55=$1;
 var $56=(($55+4)|0);
 HEAP8[($56)]=15;
 label=13;break;
 case 13: 
 var $58=$1;
 var $59=(($58+4)|0);
 var $60=HEAP8[($59)];
 var $61=($60&255);
 var $62=$61<<4;
 var $63=(($62)&255);
 HEAP8[($59)]=$63;
 label=19;break;
 case 14: 
 var $65=$1;
 var $66=(($65+3)|0);
 HEAP8[($66)]=-91;
 var $67=$1;
 var $68=(($67+4)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 var $71=($70|0)>15;
 if($71){label=15;break;}else{label=16;break;}
 case 15: 
 var $73=$1;
 var $74=(($73+4)|0);
 HEAP8[($74)]=15;
 label=16;break;
 case 16: 
 label=19;break;
 case 17: 
 var $77=$1;
 var $78=(($77+3)|0);
 HEAP8[($78)]=-93;
 label=19;break;
 case 18: 
 var $80=$1;
 var $81=(($80+4)|0);
 HEAP8[($81)]=0;
 var $82=$1;
 var $83=(($82+3)|0);
 HEAP8[($83)]=0;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _hmn_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $magic;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(1080))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=$2;
 var $10=_hio_read32b($9);
 $magic=$10;
 var $11=$magic;
 var $12=($11|0)!=1178948436;
 if($12){label=2;break;}else{label=4;break;}
 case 2: 
 var $14=$magic;
 var $15=($14|0)!=1294355233;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=5;break;
 case 4: 
 var $18=$2;
 var $19=$4;
 var $20=(($19)|0);
 var $21=_hio_seek($18,$20,0);
 var $22=$2;
 var $23=$3;
 _read_title($22,$23,20);
 $1=0;
 label=5;break;
 case 5: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _hmn_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $mh=sp;
 var $mupp=(sp)+(1088);
 var $mod_event=(sp)+(1216);
 var $mupp_index;
 var $num_mupp;
 var $extra;
 var $k;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$mupp;
 _memset($12, 0, 124)|0;
 var $13=(($mh)|0);
 var $14=$13;
 var $15=$3;
 var $16=_hio_read($14,20,1,$15);
 $num_mupp=0;
 $i=0;
 label=4;break;
 case 4: 
 var $18=$i;
 var $19=($18|0)<31;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=$i;
 var $22=(($mh+20)|0);
 var $23=(($22+((($21)*(30))&-1))|0);
 var $24=(($23)|0);
 var $25=$24;
 var $26=$3;
 var $27=_hio_read($25,22,1,$26);
 var $28=$i;
 var $29=(($mh+20)|0);
 var $30=(($29+((($28)*(30))&-1))|0);
 var $31=(($30)|0);
 var $32=(($31)|0);
 var $33=_memcmp($32,26872,4);
 var $34=($33|0)==0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $36=$i;
 var $37=(($mupp+($36<<2))|0);
 var $38=(($37)|0);
 HEAP8[($38)]=1;
 var $39=$i;
 var $40=(($mh+20)|0);
 var $41=(($40+((($39)*(30))&-1))|0);
 var $42=(($41)|0);
 var $43=(($42+4)|0);
 var $44=HEAP8[($43)];
 var $45=$i;
 var $46=(($mupp+($45<<2))|0);
 var $47=(($46+1)|0);
 HEAP8[($47)]=$44;
 var $48=$i;
 var $49=(($mh+20)|0);
 var $50=(($49+((($48)*(30))&-1))|0);
 var $51=(($50)|0);
 var $52=(($51+5)|0);
 var $53=HEAP8[($52)];
 var $54=$i;
 var $55=(($mupp+($54<<2))|0);
 var $56=(($55+2)|0);
 HEAP8[($56)]=$53;
 var $57=$i;
 var $58=(($mh+20)|0);
 var $59=(($58+((($57)*(30))&-1))|0);
 var $60=(($59)|0);
 var $61=(($60+6)|0);
 var $62=HEAP8[($61)];
 var $63=$i;
 var $64=(($mupp+($63<<2))|0);
 var $65=(($64+3)|0);
 HEAP8[($65)]=$62;
 var $66=$num_mupp;
 var $67=((($66)+(1))|0);
 $num_mupp=$67;
 label=7;break;
 case 7: 
 var $69=$3;
 var $70=_hio_read16b($69);
 var $71=$i;
 var $72=(($mh+20)|0);
 var $73=(($72+((($71)*(30))&-1))|0);
 var $74=(($73+22)|0);
 HEAP16[(($74)>>1)]=$70;
 var $75=$3;
 var $76=_hio_read8($75);
 var $77=$i;
 var $78=(($mh+20)|0);
 var $79=(($78+((($77)*(30))&-1))|0);
 var $80=(($79+24)|0);
 HEAP8[($80)]=$76;
 var $81=$3;
 var $82=_hio_read8($81);
 var $83=$i;
 var $84=(($mh+20)|0);
 var $85=(($84+((($83)*(30))&-1))|0);
 var $86=(($85+25)|0);
 HEAP8[($86)]=$82;
 var $87=$3;
 var $88=_hio_read16b($87);
 var $89=$i;
 var $90=(($mh+20)|0);
 var $91=(($90+((($89)*(30))&-1))|0);
 var $92=(($91+26)|0);
 HEAP16[(($92)>>1)]=$88;
 var $93=$3;
 var $94=_hio_read16b($93);
 var $95=$i;
 var $96=(($mh+20)|0);
 var $97=(($96+((($95)*(30))&-1))|0);
 var $98=(($97+28)|0);
 HEAP16[(($98)>>1)]=$94;
 label=8;break;
 case 8: 
 var $100=$i;
 var $101=((($100)+(1))|0);
 $i=$101;
 label=4;break;
 case 9: 
 var $103=$3;
 var $104=_hio_read8($103);
 var $105=(($mh+950)|0);
 HEAP8[($105)]=$104;
 var $106=$3;
 var $107=_hio_read8($106);
 var $108=(($mh+951)|0);
 HEAP8[($108)]=$107;
 var $109=(($mh+952)|0);
 var $110=$109;
 var $111=$3;
 var $112=_hio_read($110,128,1,$111);
 var $113=(($mh+1080)|0);
 var $114=$113;
 var $115=$3;
 var $116=_hio_read($114,4,1,$115);
 var $117=$mod;
 var $118=(($117+136)|0);
 HEAP32[(($118)>>2)]=4;
 var $119=$mod;
 var $120=(($119+140)|0);
 HEAP32[(($120)>>2)]=31;
 var $121=$mod;
 var $122=(($121+140)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$num_mupp;
 var $125=((($124)*(28))&-1);
 var $126=((($123)+($125))|0);
 var $127=$mod;
 var $128=(($127+144)|0);
 HEAP32[(($128)>>2)]=$126;
 var $129=(($mh+950)|0);
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$mod;
 var $133=(($132+156)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=(($mh+951)|0);
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$mod;
 var $138=(($137+160)|0);
 HEAP32[(($138)>>2)]=$136;
 var $139=$mod;
 var $140=(($139+952)|0);
 var $141=$140;
 var $142=(($mh+952)|0);
 var $143=$142;
 assert(128 % 1 === 0);(_memcpy($141, $143, 128)|0);
 $i=0;
 label=10;break;
 case 10: 
 var $145=$i;
 var $146=($145|0)<128;
 if($146){label=11;break;}else{label=15;break;}
 case 11: 
 var $148=$i;
 var $149=$mod;
 var $150=(($149+952)|0);
 var $151=(($150+$148)|0);
 var $152=HEAP8[($151)];
 var $153=($152&255);
 var $154=$mod;
 var $155=(($154+128)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($153|0)>($156|0);
 if($157){label=12;break;}else{label=13;break;}
 case 12: 
 var $159=$i;
 var $160=$mod;
 var $161=(($160+952)|0);
 var $162=(($161+$159)|0);
 var $163=HEAP8[($162)];
 var $164=($163&255);
 var $165=$mod;
 var $166=(($165+128)|0);
 HEAP32[(($166)>>2)]=$164;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $169=$i;
 var $170=((($169)+(1))|0);
 $i=$170;
 label=10;break;
 case 15: 
 var $172=$mod;
 var $173=(($172+128)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=((($174)+(1))|0);
 HEAP32[(($173)>>2)]=$175;
 var $176=$mod;
 var $177=(($176+136)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$mod;
 var $180=(($179+128)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(Math_imul($178,$181)|0);
 var $183=$mod;
 var $184=(($183+132)|0);
 HEAP32[(($184)>>2)]=$182;
 var $185=$2;
 var $186=_hmn_new_module_extras($185);
 var $187=($186|0)!=0;
 if($187){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=78;break;
 case 17: 
 var $190=$mod;
 var $191=(($190)|0);
 var $192=(($191)|0);
 var $193=(($mh)|0);
 var $194=(($193)|0);
 var $195=_strlcpy($192,$194,20);
 var $196=$2;
 var $197=(($mh+1080)|0);
 var $198=(($197)|0);
 _set_type($196,24928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=24400,HEAP32[(((tempVarArgs)+(8))>>2)]=$198,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $205=$mod;
 var $206=_instrument_init($205);
 var $207=($206|0)<0;
 if($207){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=78;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 var $211=$i;
 var $212=$mod;
 var $213=(($212+140)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($211|0)<($214|0);
 if($215){label=27;break;}else{label=40;break;}
 case 27: 
 var $217=$i;
 var $218=(($mupp+($217<<2))|0);
 var $219=(($218)|0);
 var $220=HEAP8[($219)];
 var $221=(($220<<24)>>24)!=0;
 if($221){label=28;break;}else{label=31;break;}
 case 28: 
 var $223=$i;
 var $224=$mod;
 var $225=(($224+176)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+((($223)*(764))&-1))|0);
 var $228=(($227+36)|0);
 HEAP32[(($228)>>2)]=28;
 var $229=$i;
 var $230=$mod;
 var $231=(($230+176)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+((($229)*(764))&-1))|0);
 var $234=(($233)|0);
 var $235=(($234)|0);
 var $236=$i;
 var $237=(($mupp+($236<<2))|0);
 var $238=(($237+1)|0);
 var $239=HEAP8[($238)];
 var $240=($239&255);
 var $241=$i;
 var $242=(($mupp+($241<<2))|0);
 var $243=(($242+2)|0);
 var $244=HEAP8[($243)];
 var $245=($244&255);
 var $246=$i;
 var $247=(($mupp+($246<<2))|0);
 var $248=(($247+3)|0);
 var $249=HEAP8[($248)];
 var $250=($249&255);
 var $251=_snprintf($235,32,23712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$240,HEAP32[(((tempVarArgs)+(8))>>2)]=$245,HEAP32[(((tempVarArgs)+(16))>>2)]=$250,tempVarArgs)); STACKTOP=tempVarArgs;
 var $252=$i;
 var $253=$mod;
 var $254=(($253+176)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(($255+((($252)*(764))&-1))|0);
 var $257=_hmn_new_instrument_extras($256);
 var $258=($257|0)!=0;
 if($258){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=78;break;
 case 30: 
 label=32;break;
 case 31: 
 var $262=$i;
 var $263=$mod;
 var $264=(($263+176)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+((($262)*(764))&-1))|0);
 var $267=(($266+36)|0);
 HEAP32[(($267)>>2)]=1;
 var $268=$mod;
 var $269=$i;
 var $270=$i;
 var $271=(($mh+20)|0);
 var $272=(($271+((($270)*(30))&-1))|0);
 var $273=(($272)|0);
 var $274=(($273)|0);
 var $275=_instrument_name($268,$269,$274,22);
 var $276=$i;
 var $277=(($mh+20)|0);
 var $278=(($277+((($276)*(30))&-1))|0);
 var $279=(($278+22)|0);
 var $280=HEAP16[(($279)>>1)];
 var $281=($280&65535);
 var $282=($281<<1);
 var $283=$i;
 var $284=$mod;
 var $285=(($284+180)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=(($286+((($283)*(52))&-1))|0);
 var $288=(($287+32)|0);
 HEAP32[(($288)>>2)]=$282;
 var $289=$i;
 var $290=(($mh+20)|0);
 var $291=(($290+((($289)*(30))&-1))|0);
 var $292=(($291+26)|0);
 var $293=HEAP16[(($292)>>1)];
 var $294=($293&65535);
 var $295=($294<<1);
 var $296=$i;
 var $297=$mod;
 var $298=(($297+180)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+((($296)*(52))&-1))|0);
 var $301=(($300+36)|0);
 HEAP32[(($301)>>2)]=$295;
 var $302=$i;
 var $303=$mod;
 var $304=(($303+180)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+((($302)*(52))&-1))|0);
 var $307=(($306+36)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=$i;
 var $310=(($mh+20)|0);
 var $311=(($310+((($309)*(30))&-1))|0);
 var $312=(($311+28)|0);
 var $313=HEAP16[(($312)>>1)];
 var $314=($313&65535);
 var $315=($314<<1);
 var $316=((($308)+($315))|0);
 var $317=$i;
 var $318=$mod;
 var $319=(($318+180)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320+((($317)*(52))&-1))|0);
 var $322=(($321+40)|0);
 HEAP32[(($322)>>2)]=$316;
 var $323=$i;
 var $324=(($mh+20)|0);
 var $325=(($324+((($323)*(30))&-1))|0);
 var $326=(($325+28)|0);
 var $327=HEAP16[(($326)>>1)];
 var $328=($327&65535);
 var $329=($328|0)>1;
 var $330=($329?2:0);
 var $331=$i;
 var $332=$mod;
 var $333=(($332+180)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334+((($331)*(52))&-1))|0);
 var $336=(($335+44)|0);
 HEAP32[(($336)>>2)]=$330;
 label=32;break;
 case 32: 
 var $338=$mod;
 var $339=$i;
 var $340=$i;
 var $341=$mod;
 var $342=(($341+176)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($343+((($340)*(764))&-1))|0);
 var $345=(($344+36)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=_subinstrument_alloc($338,$339,$346);
 var $348=($347|0)<0;
 if($348){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=78;break;
 case 34: 
 $j=0;
 label=35;break;
 case 35: 
 var $352=$j;
 var $353=$i;
 var $354=$mod;
 var $355=(($354+176)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=(($356+((($353)*(764))&-1))|0);
 var $358=(($357+36)|0);
 var $359=HEAP32[(($358)>>2)];
 var $360=($352|0)<($359|0);
 if($360){label=36;break;}else{label=38;break;}
 case 36: 
 var $362=$i;
 var $363=(($mh+20)|0);
 var $364=(($363+((($362)*(30))&-1))|0);
 var $365=(($364+24)|0);
 var $366=HEAP8[($365)];
 var $367=(($366<<24)>>24);
 var $368=$367<<3;
 var $369=(($368)&255);
 var $370=(($369<<24)>>24);
 var $371=(((-$370))|0);
 var $372=$j;
 var $373=$i;
 var $374=$mod;
 var $375=(($374+176)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=(($376+((($373)*(764))&-1))|0);
 var $378=(($377+756)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=(($379+($372<<6))|0);
 var $381=(($380+16)|0);
 HEAP32[(($381)>>2)]=$371;
 var $382=$i;
 var $383=(($mh+20)|0);
 var $384=(($383+((($382)*(30))&-1))|0);
 var $385=(($384+25)|0);
 var $386=HEAP8[($385)];
 var $387=(($386<<24)>>24);
 var $388=$j;
 var $389=$i;
 var $390=$mod;
 var $391=(($390+176)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=(($392+((($389)*(764))&-1))|0);
 var $394=(($393+756)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(($395+($388<<6))|0);
 var $397=(($396)|0);
 HEAP32[(($397)>>2)]=$387;
 var $398=$j;
 var $399=$i;
 var $400=$mod;
 var $401=(($400+176)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=(($402+((($399)*(764))&-1))|0);
 var $404=(($403+756)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=(($405+($398<<6))|0);
 var $407=(($406+8)|0);
 HEAP32[(($407)>>2)]=128;
 var $408=$i;
 var $409=$j;
 var $410=$i;
 var $411=$mod;
 var $412=(($411+176)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=(($413+((($410)*(764))&-1))|0);
 var $415=(($414+756)|0);
 var $416=HEAP32[(($415)>>2)];
 var $417=(($416+($409<<6))|0);
 var $418=(($417+40)|0);
 HEAP32[(($418)>>2)]=$408;
 label=37;break;
 case 37: 
 var $420=$j;
 var $421=((($420)+(1))|0);
 $j=$421;
 label=35;break;
 case 38: 
 label=39;break;
 case 39: 
 var $424=$i;
 var $425=((($424)+(1))|0);
 $i=$425;
 label=26;break;
 case 40: 
 var $427=$mod;
 var $428=_pattern_init($427);
 var $429=($428|0)<0;
 if($429){label=41;break;}else{label=42;break;}
 case 41: 
 $1=-1;
 label=78;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 $i=0;
 label=45;break;
 case 45: 
 var $435=$i;
 var $436=$mod;
 var $437=(($436+128)|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=($435|0)<($438|0);
 if($439){label=46;break;}else{label=57;break;}
 case 46: 
 var $441=$mod;
 var $442=$i;
 var $443=_pattern_tracks_alloc($441,$442,64);
 var $444=($443|0)<0;
 if($444){label=47;break;}else{label=48;break;}
 case 47: 
 $1=-1;
 label=78;break;
 case 48: 
 $j=0;
 label=49;break;
 case 49: 
 var $448=$j;
 var $449=($448|0)<256;
 if($449){label=50;break;}else{label=55;break;}
 case 50: 
 var $451=$j;
 var $452=(((($451|0))/(4))&-1);
 var $453=$j;
 var $454=(((($453|0))%(4))&-1);
 var $455=$i;
 var $456=$2;
 var $457=(($456)|0);
 var $458=(($457+168)|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=(($459+($455<<2))|0);
 var $461=HEAP32[(($460)>>2)];
 var $462=(($461+4)|0);
 var $463=(($462+($454<<2))|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=$2;
 var $466=(($465)|0);
 var $467=(($466+172)|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=(($468+($464<<2))|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+4)|0);
 var $472=(($471+($452<<3))|0);
 $event=$472;
 var $473=(($mod_event)|0);
 var $474=$3;
 var $475=_hio_read($473,1,4,$474);
 var $476=$event;
 var $477=(($mod_event)|0);
 _decode_protracker_event($476,$477);
 var $478=$event;
 var $479=(($478+3)|0);
 var $480=HEAP8[($479)];
 var $481=($480&255);
 if(($481|0)==7){ label=51;break;}else if(($481|0)==8|($481|0)==9|($481|0)==14){ label=52;break;}else{label=53;break;}
 case 51: 
 var $483=$event;
 var $484=(($483+3)|0);
 HEAP8[($484)]=-78;
 label=53;break;
 case 52: 
 var $486=$event;
 var $487=(($486+4)|0);
 HEAP8[($487)]=0;
 var $488=$event;
 var $489=(($488+3)|0);
 HEAP8[($489)]=0;
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $492=$j;
 var $493=((($492)+(1))|0);
 $j=$493;
 label=49;break;
 case 55: 
 label=56;break;
 case 56: 
 var $496=$i;
 var $497=((($496)+(1))|0);
 $i=$497;
 label=45;break;
 case 57: 
 var $499=$2;
 var $500=(($499+1280)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=$501|8192;
 HEAP32[(($500)>>2)]=$502;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $i=0;
 label=60;break;
 case 60: 
 var $506=$i;
 var $507=($506|0)<31;
 if($507){label=61;break;}else{label=65;break;}
 case 61: 
 var $509=$2;
 var $510=$3;
 var $511=$i;
 var $512=$mod;
 var $513=(($512+180)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=(($514+((($511)*(52))&-1))|0);
 var $516=_load_sample($509,$510,512,$515,0);
 var $517=($516|0)<0;
 if($517){label=62;break;}else{label=63;break;}
 case 62: 
 $1=-1;
 label=78;break;
 case 63: 
 label=64;break;
 case 64: 
 var $521=$i;
 var $522=((($521)+(1))|0);
 $i=$522;
 label=60;break;
 case 65: 
 $mupp_index=0;
 $i=0;
 label=66;break;
 case 66: 
 var $525=$i;
 var $526=($525|0)<31;
 if($526){label=67;break;}else{label=77;break;}
 case 67: 
 var $528=$i;
 var $529=$mod;
 var $530=(($529+176)|0);
 var $531=HEAP32[(($530)>>2)];
 var $532=(($531+((($528)*(764))&-1))|0);
 var $533=(($532+760)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=$534;
 $extra=$535;
 var $536=$i;
 var $537=(($mupp+($536<<2))|0);
 var $538=(($537)|0);
 var $539=HEAP8[($538)];
 var $540=(($539<<24)>>24)!=0;
 if($540){label=69;break;}else{label=68;break;}
 case 68: 
 label=76;break;
 case 69: 
 var $543=$3;
 var $544=$4;
 var $545=((($544)+(1084))|0);
 var $546=$i;
 var $547=(($mupp+($546<<2))|0);
 var $548=(($547+1)|0);
 var $549=HEAP8[($548)];
 var $550=($549&255);
 var $551=($550<<10);
 var $552=((($545)+($551))|0);
 var $553=_hio_seek($543,$552,0);
 $j=0;
 label=70;break;
 case 70: 
 var $555=$j;
 var $556=($555|0)<28;
 if($556){label=71;break;}else{label=75;break;}
 case 71: 
 var $558=$mupp_index;
 var $559=((($558)*(28))&-1);
 var $560=((($559)+(31))|0);
 var $561=$j;
 var $562=((($560)+($561))|0);
 $k=$562;
 var $563=$k;
 var $564=$j;
 var $565=$i;
 var $566=$mod;
 var $567=(($566+176)|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=(($568+((($565)*(764))&-1))|0);
 var $570=(($569+756)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=(($571+($564<<6))|0);
 var $573=(($572+40)|0);
 HEAP32[(($573)>>2)]=$563;
 var $574=$k;
 var $575=$mod;
 var $576=(($575+180)|0);
 var $577=HEAP32[(($576)>>2)];
 var $578=(($577+((($574)*(52))&-1))|0);
 var $579=(($578+32)|0);
 HEAP32[(($579)>>2)]=32;
 var $580=$k;
 var $581=$mod;
 var $582=(($581+180)|0);
 var $583=HEAP32[(($582)>>2)];
 var $584=(($583+((($580)*(52))&-1))|0);
 var $585=(($584+36)|0);
 HEAP32[(($585)>>2)]=0;
 var $586=$k;
 var $587=$mod;
 var $588=(($587+180)|0);
 var $589=HEAP32[(($588)>>2)];
 var $590=(($589+((($586)*(52))&-1))|0);
 var $591=(($590+40)|0);
 HEAP32[(($591)>>2)]=32;
 var $592=$k;
 var $593=$mod;
 var $594=(($593+180)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=(($595+((($592)*(52))&-1))|0);
 var $597=(($596+44)|0);
 HEAP32[(($597)>>2)]=2;
 var $598=$2;
 var $599=$3;
 var $600=$k;
 var $601=$mod;
 var $602=(($601+180)|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=(($603+((($600)*(52))&-1))|0);
 var $605=_load_sample($598,$599,0,$604,0);
 var $606=($605|0)<0;
 if($606){label=72;break;}else{label=73;break;}
 case 72: 
 $1=-1;
 label=78;break;
 case 73: 
 label=74;break;
 case 74: 
 var $610=$j;
 var $611=((($610)+(1))|0);
 $j=$611;
 label=70;break;
 case 75: 
 var $613=$i;
 var $614=(($mupp+($613<<2))|0);
 var $615=(($614+2)|0);
 var $616=HEAP8[($615)];
 var $617=($616&255);
 var $618=$extra;
 var $619=(($618+4)|0);
 HEAP32[(($619)>>2)]=$617;
 var $620=$i;
 var $621=(($mupp+($620<<2))|0);
 var $622=(($621+3)|0);
 var $623=HEAP8[($622)];
 var $624=($623&255);
 var $625=$extra;
 var $626=(($625+8)|0);
 HEAP32[(($626)>>2)]=$624;
 var $627=$extra;
 var $628=(($627+12)|0);
 var $629=(($628)|0);
 var $630=$3;
 var $631=_hio_read($629,1,64,$630);
 var $632=$extra;
 var $633=(($632+76)|0);
 var $634=(($633)|0);
 var $635=$3;
 var $636=_hio_read($634,1,64,$635);
 var $637=$mupp_index;
 var $638=((($637)+(1))|0);
 $mupp_index=$638;
 label=76;break;
 case 76: 
 var $640=$i;
 var $641=((($640)+(1))|0);
 $i=$641;
 label=66;break;
 case 77: 
 $1=0;
 label=78;break;
 case 78: 
 var $644=$1;
 STACKTOP=sp;return $644;
  default: assert(0, "bad label: " + label);
 }
}
function _hsc_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $i;
 var $r;
 var $c;
 var $buf=sp;
 var $n;
 var $m;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_seek($5,1536,1);
 var $7=(($buf)|0);
 var $8=$2;
 var $9=_hio_read($7,1,51,$8);
 var $10=($9|0)!=51;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=36;break;
 case 3: 
 $i=0;
 $p=0;
 label=4;break;
 case 4: 
 var $14=$i;
 var $15=($14|0)<51;
 if($15){label=5;break;}else{label=11;break;}
 case 5: 
 var $17=$i;
 var $18=(($buf+$17)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=($20|0)==255;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 label=11;break;
 case 7: 
 var $24=$i;
 var $25=(($buf+$24)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=$p;
 var $29=($27|0)>($28|0);
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 var $31=$i;
 var $32=(($buf+$31)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 $p=$34;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $37=$i;
 var $38=((($37)+(1))|0);
 $i=$38;
 label=4;break;
 case 11: 
 var $40=$i;
 var $41=($40|0)!=0;
 if($41){label=12;break;}else{label=15;break;}
 case 12: 
 var $43=$p;
 var $44=($43|0)!=0;
 if($44){label=13;break;}else{label=15;break;}
 case 13: 
 var $46=$i;
 var $47=($46|0)>50;
 if($47){label=15;break;}else{label=14;break;}
 case 14: 
 var $49=$p;
 var $50=($49|0)>50;
 if($50){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=36;break;
 case 16: 
 $i=0;
 label=17;break;
 case 17: 
 var $54=$i;
 var $55=$p;
 var $56=($54|0)<($55|0);
 if($56){label=18;break;}else{label=35;break;}
 case 18: 
 var $58=(($buf)|0);
 var $59=$2;
 var $60=_hio_read($58,1,1152,$59);
 $r=0;
 label=19;break;
 case 19: 
 var $62=$r;
 var $63=($62|0)<64;
 if($63){label=20;break;}else{label=33;break;}
 case 20: 
 $c=0;
 label=21;break;
 case 21: 
 var $66=$c;
 var $67=($66|0)<9;
 if($67){label=22;break;}else{label=31;break;}
 case 22: 
 var $69=$r;
 var $70=((($69)*(9))&-1);
 var $71=($70<<1);
 var $72=$c;
 var $73=($72<<1);
 var $74=((($71)+($73))|0);
 var $75=(($buf+$74)|0);
 var $76=HEAP8[($75)];
 $n=$76;
 var $77=$r;
 var $78=((($77)*(9))&-1);
 var $79=($78<<1);
 var $80=$c;
 var $81=($80<<1);
 var $82=((($79)+($81))|0);
 var $83=((($82)+(1))|0);
 var $84=(($buf+$83)|0);
 var $85=HEAP8[($84)];
 $m=$85;
 var $86=$m;
 var $87=($86&255);
 var $88=($87|0)>6;
 if($88){label=23;break;}else{label=26;break;}
 case 23: 
 var $90=$m;
 var $91=($90&255);
 var $92=($91|0)<16;
 if($92){label=24;break;}else{label=26;break;}
 case 24: 
 var $94=$n;
 var $95=($94&255);
 var $96=($95|0)!=128;
 if($96){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=36;break;
 case 26: 
 var $99=$m;
 var $100=($99&255);
 var $101=$100&240;
 var $102=$101>>4;
 var $103=($102|0)>6;
 if($103){label=27;break;}else{label=29;break;}
 case 27: 
 var $105=$m;
 var $106=($105&255);
 var $107=$106&240;
 var $108=$107>>4;
 var $109=($108|0)<10;
 if($109){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=36;break;
 case 29: 
 label=30;break;
 case 30: 
 var $113=$c;
 var $114=((($113)+(1))|0);
 $c=$114;
 label=21;break;
 case 31: 
 label=32;break;
 case 32: 
 var $117=$r;
 var $118=((($117)+(1))|0);
 $r=$118;
 label=19;break;
 case 33: 
 label=34;break;
 case 34: 
 var $121=$i;
 var $122=((($121)+(1))|0);
 $i=$122;
 label=17;break;
 case 35: 
 var $124=$2;
 var $125=$3;
 _read_title($124,$125,0);
 $1=0;
 label=36;break;
 case 36: 
 var $127=$1;
 STACKTOP=sp;return $127;
  default: assert(0, "bad label: " + label);
 }
}
function _hsc_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1584)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $pat;
 var $i;
 var $r;
 var $c;
 var $event;
 var $x;
 var $sid;
 var $e=sp;
 var $buf=(sp)+(8);
 var $ins=(sp)+(1544);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($buf)|0);
 var $13=$3;
 var $14=_hio_read($12,1,1536,$13);
 var $15=(($buf)|0);
 $x=$15;
 $i=0;
 label=4;break;
 case 4: 
 var $17=$i;
 var $18=($17|0)<128;
 if($18){label=5;break;}else{label=12;break;}
 case 5: 
 var $20=$x;
 var $21=(($20+9)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23&-4;
 var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=$x;
 var $28=(($27+10)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&-4;
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 label=12;break;
 case 8: 
 var $35=$x;
 var $36=(($35+8)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=$38&-16;
 var $40=($39|0)!=0;
 if($40){label=9;break;}else{label=10;break;}
 case 9: 
 label=12;break;
 case 10: 
 label=11;break;
 case 11: 
 var $44=$i;
 var $45=((($44)+(1))|0);
 $i=$45;
 var $46=$x;
 var $47=(($46+12)|0);
 $x=$47;
 label=4;break;
 case 12: 
 var $49=$i;
 var $50=$mod;
 var $51=(($50+140)|0);
 HEAP32[(($51)>>2)]=$49;
 var $52=$3;
 var $53=$4;
 var $54=(($53)|0);
 var $55=_hio_seek($52,$54,0);
 var $56=$mod;
 var $57=(($56+136)|0);
 HEAP32[(($57)>>2)]=9;
 var $58=$mod;
 var $59=(($58+152)|0);
 HEAP32[(($59)>>2)]=135;
 var $60=$mod;
 var $61=(($60+148)|0);
 HEAP32[(($61)>>2)]=6;
 var $62=$mod;
 var $63=(($62+140)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$mod;
 var $66=(($65+144)|0);
 HEAP32[(($66)>>2)]=$64;
 var $67=$2;
 var $68=(($67+1280)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69|4096;
 HEAP32[(($68)>>2)]=$70;
 var $71=$2;
 _set_type($71,24240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $78=$mod;
 var $79=_instrument_init($78);
 var $80=($79|0)<0;
 if($80){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=73;break;
 case 20: 
 var $83=(($buf)|0);
 var $84=$3;
 var $85=_hio_read($83,1,1536,$84);
 var $86=(($buf)|0);
 $sid=$86;
 $i=0;
 label=21;break;
 case 21: 
 var $88=$i;
 var $89=$mod;
 var $90=(($89+140)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($88|0)<($91|0);
 if($92){label=22;break;}else{label=28;break;}
 case 22: 
 var $94=$mod;
 var $95=$i;
 var $96=_subinstrument_alloc($94,$95,1);
 var $97=($96|0)<0;
 if($97){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=73;break;
 case 24: 
 var $100=$i;
 var $101=$mod;
 var $102=(($101+176)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+((($100)*(764))&-1))|0);
 var $105=(($104+36)|0);
 HEAP32[(($105)>>2)]=1;
 var $106=$i;
 var $107=$mod;
 var $108=(($107+176)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+((($106)*(764))&-1))|0);
 var $111=(($110+756)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112)|0);
 var $114=(($113)|0);
 HEAP32[(($114)>>2)]=64;
 var $115=$sid;
 var $116=(($115+11)|0);
 var $117=HEAP8[($116)];
 var $118=(($117<<24)>>24);
 var $119=(((($118|0))/(4))&-1);
 var $120=$i;
 var $121=$mod;
 var $122=(($121+176)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+((($120)*(764))&-1))|0);
 var $125=(($124+756)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126)|0);
 var $128=(($127+16)|0);
 HEAP32[(($128)>>2)]=$119;
 var $129=$i;
 var $130=$mod;
 var $131=(($130+176)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+((($129)*(764))&-1))|0);
 var $134=(($133+756)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=(($136+8)|0);
 HEAP32[(($137)>>2)]=128;
 var $138=$i;
 var $139=$mod;
 var $140=(($139+176)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+((($138)*(764))&-1))|0);
 var $143=(($142+756)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144)|0);
 var $146=(($145+12)|0);
 HEAP32[(($146)>>2)]=0;
 var $147=$i;
 var $148=$i;
 var $149=$mod;
 var $150=(($149+176)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+((($148)*(764))&-1))|0);
 var $153=(($152+756)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154)|0);
 var $156=(($155+40)|0);
 HEAP32[(($156)>>2)]=$147;
 var $157=$sid;
 var $158=(($157+7)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=$160&15;
 var $162=($161<<5);
 var $163=$i;
 var $164=$mod;
 var $165=(($164+176)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+((($163)*(764))&-1))|0);
 var $168=(($167+40)|0);
 HEAP32[(($168)>>2)]=$162;
 var $169=$2;
 var $170=$3;
 var $171=$i;
 var $172=$mod;
 var $173=(($172+180)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+((($171)*(52))&-1))|0);
 var $176=$sid;
 var $177=_load_sample($169,$170,12288,$175,$176);
 var $178=($177|0)<0;
 if($178){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=73;break;
 case 26: 
 label=27;break;
 case 27: 
 var $182=$i;
 var $183=((($182)+(1))|0);
 $i=$183;
 var $184=$sid;
 var $185=(($184+12)|0);
 $sid=$185;
 label=21;break;
 case 28: 
 $i=0;
 $pat=0;
 label=29;break;
 case 29: 
 var $188=$i;
 var $189=($188|0)<51;
 if($189){label=30;break;}else{label=36;break;}
 case 30: 
 var $191=$i;
 var $192=$mod;
 var $193=(($192+952)|0);
 var $194=(($193+$191)|0);
 var $195=$3;
 var $196=_hio_read($194,1,1,$195);
 var $197=$i;
 var $198=$mod;
 var $199=(($198+952)|0);
 var $200=(($199+$197)|0);
 var $201=HEAP8[($200)];
 var $202=($201&255);
 var $203=$202&128;
 var $204=($203|0)!=0;
 if($204){label=31;break;}else{label=32;break;}
 case 31: 
 label=36;break;
 case 32: 
 var $207=$i;
 var $208=$mod;
 var $209=(($208+952)|0);
 var $210=(($209+$207)|0);
 var $211=HEAP8[($210)];
 var $212=($211&255);
 var $213=$pat;
 var $214=($212|0)>($213|0);
 if($214){label=33;break;}else{label=34;break;}
 case 33: 
 var $216=$i;
 var $217=$mod;
 var $218=(($217+952)|0);
 var $219=(($218+$216)|0);
 var $220=HEAP8[($219)];
 var $221=($220&255);
 $pat=$221;
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $224=$i;
 var $225=((($224)+(1))|0);
 $i=$225;
 label=29;break;
 case 36: 
 var $227=$3;
 var $228=$i;
 var $229=(((50)-($228))|0);
 var $230=_hio_seek($227,$229,1);
 var $231=$i;
 var $232=$mod;
 var $233=(($232+156)|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=$pat;
 var $235=((($234)+(1))|0);
 var $236=$mod;
 var $237=(($236+128)|0);
 HEAP32[(($237)>>2)]=$235;
 var $238=$mod;
 var $239=(($238+128)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=$mod;
 var $242=(($241+136)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(Math_imul($240,$243)|0);
 var $245=$mod;
 var $246=(($245+132)|0);
 HEAP32[(($246)>>2)]=$244;
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 var $253=$mod;
 var $254=_pattern_init($253);
 var $255=($254|0)<0;
 if($255){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=73;break;
 case 44: 
 $i=0;
 label=45;break;
 case 45: 
 var $259=$i;
 var $260=$mod;
 var $261=(($260+128)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=($259|0)<($262|0);
 if($263){label=46;break;}else{label=68;break;}
 case 46: 
 var $265=$ins;
 assert(36 % 1 === 0);(_memcpy($265, 7312, 36)|0);
 var $266=$mod;
 var $267=$i;
 var $268=_pattern_tracks_alloc($266,$267,64);
 var $269=($268|0)<0;
 if($269){label=47;break;}else{label=48;break;}
 case 47: 
 $1=-1;
 label=73;break;
 case 48: 
 $r=0;
 label=49;break;
 case 49: 
 var $273=$r;
 var $274=$i;
 var $275=$mod;
 var $276=(($275+168)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+($274<<2))|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=($273|0)<($281|0);
 if($282){label=50;break;}else{label=66;break;}
 case 50: 
 $c=0;
 label=51;break;
 case 51: 
 var $285=$c;
 var $286=($285|0)<9;
 if($286){label=52;break;}else{label=64;break;}
 case 52: 
 var $288=(($e)|0);
 var $289=$3;
 var $290=_hio_read($288,1,2,$289);
 var $291=$r;
 var $292=$c;
 var $293=$i;
 var $294=$2;
 var $295=(($294)|0);
 var $296=(($295+168)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=(($297+($293<<2))|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+4)|0);
 var $301=(($300+($292<<2))|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=$2;
 var $304=(($303)|0);
 var $305=(($304+172)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=(($306+($302<<2))|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(($308+4)|0);
 var $310=(($309+($291<<3))|0);
 $event=$310;
 var $311=(($e)|0);
 var $312=HEAP8[($311)];
 var $313=($312&255);
 var $314=$313&128;
 var $315=($314|0)!=0;
 if($315){label=53;break;}else{label=54;break;}
 case 53: 
 var $317=(($e+1)|0);
 var $318=HEAP8[($317)];
 var $319=($318&255);
 var $320=((($319)+(1))|0);
 var $321=$c;
 var $322=(($ins+($321<<2))|0);
 HEAP32[(($322)>>2)]=$320;
 label=60;break;
 case 54: 
 var $324=(($e)|0);
 var $325=HEAP8[($324)];
 var $326=($325&255);
 var $327=($326|0)==127;
 if($327){label=55;break;}else{label=56;break;}
 case 55: 
 var $329=$event;
 var $330=(($329)|0);
 HEAP8[($330)]=-127;
 label=59;break;
 case 56: 
 var $332=(($e)|0);
 var $333=HEAP8[($332)];
 var $334=($333&255);
 var $335=($334|0)>0;
 if($335){label=57;break;}else{label=58;break;}
 case 57: 
 var $337=(($e)|0);
 var $338=HEAP8[($337)];
 var $339=($338&255);
 var $340=((($339)+(25))|0);
 var $341=(($340)&255);
 var $342=$event;
 var $343=(($342)|0);
 HEAP8[($343)]=$341;
 var $344=$c;
 var $345=(($ins+($344<<2))|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($346)&255);
 var $348=$event;
 var $349=(($348+1)|0);
 HEAP8[($349)]=$347;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 var $353=$event;
 var $354=(($353+3)|0);
 HEAP8[($354)]=0;
 var $355=$event;
 var $356=(($355+4)|0);
 HEAP8[($356)]=0;
 var $357=(($e+1)|0);
 var $358=HEAP8[($357)];
 var $359=($358&255);
 var $360=($359|0)==1;
 if($360){label=61;break;}else{label=62;break;}
 case 61: 
 var $362=$event;
 var $363=(($362+3)|0);
 HEAP8[($363)]=13;
 var $364=$event;
 var $365=(($364+4)|0);
 HEAP8[($365)]=0;
 label=62;break;
 case 62: 
 label=63;break;
 case 63: 
 var $368=$c;
 var $369=((($368)+(1))|0);
 $c=$369;
 label=51;break;
 case 64: 
 label=65;break;
 case 65: 
 var $372=$r;
 var $373=((($372)+(1))|0);
 $r=$373;
 label=49;break;
 case 66: 
 label=67;break;
 case 67: 
 var $376=$i;
 var $377=((($376)+(1))|0);
 $i=$377;
 label=45;break;
 case 68: 
 $i=0;
 label=69;break;
 case 69: 
 var $380=$i;
 var $381=$mod;
 var $382=(($381+136)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($380|0)<($383|0);
 if($384){label=70;break;}else{label=72;break;}
 case 70: 
 var $386=$i;
 var $387=$mod;
 var $388=(($387+184)|0);
 var $389=(($388+((($386)*(12))&-1))|0);
 var $390=(($389)|0);
 HEAP32[(($390)>>2)]=128;
 var $391=$i;
 var $392=$mod;
 var $393=(($392+184)|0);
 var $394=(($393+((($391)*(12))&-1))|0);
 var $395=(($394+8)|0);
 HEAP32[(($395)>>2)]=1;
 label=71;break;
 case 71: 
 var $397=$i;
 var $398=((($397)+(1))|0);
 $i=$398;
 label=69;break;
 case 72: 
 var $400=$2;
 var $401=(($400+6552)|0);
 HEAP32[(($401)>>2)]=1760;
 $1=0;
 label=73;break;
 case 73: 
 var $403=$1;
 STACKTOP=sp;return $403;
  default: assert(0, "bad label: " + label);
 }
}
function _ice_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $magic;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(1464))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=$2;
 var $10=_hio_read32b($9);
 $magic=$10;
 var $11=$magic;
 var $12=($11|0)!=1297370624;
 if($12){label=2;break;}else{label=4;break;}
 case 2: 
 var $14=$magic;
 var $15=($14|0)!=1230254384;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=5;break;
 case 4: 
 var $18=$2;
 var $19=$4;
 var $20=(($19)|0);
 var $21=_hio_seek($18,$20,0);
 var $22=$2;
 var $23=$3;
 _read_title($22,$23,28);
 $1=0;
 label=5;break;
 case 5: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _ice_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1480)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $ih=sp;
 var $ev=(sp)+(1472);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($ih)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,20,1,$14);
 $i=0;
 label=4;break;
 case 4: 
 var $17=$i;
 var $18=($17|0)<31;
 if($18){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=$i;
 var $21=(($ih+20)|0);
 var $22=(($21+((($20)*(30))&-1))|0);
 var $23=(($22)|0);
 var $24=$23;
 var $25=$3;
 var $26=_hio_read($24,22,1,$25);
 var $27=$3;
 var $28=_hio_read16b($27);
 var $29=$i;
 var $30=(($ih+20)|0);
 var $31=(($30+((($29)*(30))&-1))|0);
 var $32=(($31+22)|0);
 HEAP16[(($32)>>1)]=$28;
 var $33=$3;
 var $34=_hio_read8($33);
 var $35=$i;
 var $36=(($ih+20)|0);
 var $37=(($36+((($35)*(30))&-1))|0);
 var $38=(($37+24)|0);
 HEAP8[($38)]=$34;
 var $39=$3;
 var $40=_hio_read8($39);
 var $41=$i;
 var $42=(($ih+20)|0);
 var $43=(($42+((($41)*(30))&-1))|0);
 var $44=(($43+25)|0);
 HEAP8[($44)]=$40;
 var $45=$3;
 var $46=_hio_read16b($45);
 var $47=$i;
 var $48=(($ih+20)|0);
 var $49=(($48+((($47)*(30))&-1))|0);
 var $50=(($49+26)|0);
 HEAP16[(($50)>>1)]=$46;
 var $51=$3;
 var $52=_hio_read16b($51);
 var $53=$i;
 var $54=(($ih+20)|0);
 var $55=(($54+((($53)*(30))&-1))|0);
 var $56=(($55+28)|0);
 HEAP16[(($56)>>1)]=$52;
 label=6;break;
 case 6: 
 var $58=$i;
 var $59=((($58)+(1))|0);
 $i=$59;
 label=4;break;
 case 7: 
 var $61=$3;
 var $62=_hio_read8($61);
 var $63=(($ih+950)|0);
 HEAP8[($63)]=$62;
 var $64=$3;
 var $65=_hio_read8($64);
 var $66=(($ih+951)|0);
 HEAP8[($66)]=$65;
 var $67=(($ih+952)|0);
 var $68=$67;
 var $69=$3;
 var $70=_hio_read($68,512,1,$69);
 var $71=$3;
 var $72=_hio_read32b($71);
 var $73=(($ih+1464)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($ih+1464)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==1230254384;
 if($76){label=8;break;}else{label=9;break;}
 case 8: 
 var $78=$2;
 _set_type($78,26848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 9: 
 var $80=(($ih+1464)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==1297370624;
 if($82){label=10;break;}else{label=11;break;}
 case 10: 
 var $84=$2;
 _set_type($84,24904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 11: 
 $1=-1;
 label=68;break;
 case 12: 
 label=13;break;
 case 13: 
 var $88=$mod;
 var $89=(($88+140)|0);
 HEAP32[(($89)>>2)]=31;
 var $90=$mod;
 var $91=(($90+140)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$mod;
 var $94=(($93+144)|0);
 HEAP32[(($94)>>2)]=$92;
 var $95=(($ih+950)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=$mod;
 var $99=(($98+128)|0);
 HEAP32[(($99)>>2)]=$97;
 var $100=(($ih+950)|0);
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$mod;
 var $104=(($103+156)|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=(($ih+951)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$mod;
 var $109=(($108+132)|0);
 HEAP32[(($109)>>2)]=$107;
 var $110=$mod;
 var $111=(($110)|0);
 var $112=(($111)|0);
 var $113=(($ih)|0);
 var $114=(($113)|0);
 var $115=_strlcpy($112,$114,20);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $122=$mod;
 var $123=_instrument_init($122);
 var $124=($123|0)<0;
 if($124){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=68;break;
 case 21: 
 $i=0;
 label=22;break;
 case 22: 
 var $128=$i;
 var $129=$mod;
 var $130=(($129+140)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($128|0)<($131|0);
 if($132){label=23;break;}else{label=31;break;}
 case 23: 
 var $134=$mod;
 var $135=$i;
 var $136=_subinstrument_alloc($134,$135,1);
 var $137=($136|0)<0;
 if($137){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=68;break;
 case 25: 
 var $140=$i;
 var $141=(($ih+20)|0);
 var $142=(($141+((($140)*(30))&-1))|0);
 var $143=(($142+22)|0);
 var $144=HEAP16[(($143)>>1)];
 var $145=($144&65535);
 var $146=($145<<1);
 var $147=$i;
 var $148=$mod;
 var $149=(($148+180)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+((($147)*(52))&-1))|0);
 var $152=(($151+32)|0);
 HEAP32[(($152)>>2)]=$146;
 var $153=$i;
 var $154=(($ih+20)|0);
 var $155=(($154+((($153)*(30))&-1))|0);
 var $156=(($155+26)|0);
 var $157=HEAP16[(($156)>>1)];
 var $158=($157&65535);
 var $159=($158<<1);
 var $160=$i;
 var $161=$mod;
 var $162=(($161+180)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+((($160)*(52))&-1))|0);
 var $165=(($164+36)|0);
 HEAP32[(($165)>>2)]=$159;
 var $166=$i;
 var $167=$mod;
 var $168=(($167+180)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+((($166)*(52))&-1))|0);
 var $171=(($170+36)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=$i;
 var $174=(($ih+20)|0);
 var $175=(($174+((($173)*(30))&-1))|0);
 var $176=(($175+28)|0);
 var $177=HEAP16[(($176)>>1)];
 var $178=($177&65535);
 var $179=($178<<1);
 var $180=((($172)+($179))|0);
 var $181=$i;
 var $182=$mod;
 var $183=(($182+180)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+((($181)*(52))&-1))|0);
 var $186=(($185+40)|0);
 HEAP32[(($186)>>2)]=$180;
 var $187=$i;
 var $188=(($ih+20)|0);
 var $189=(($188+((($187)*(30))&-1))|0);
 var $190=(($189+28)|0);
 var $191=HEAP16[(($190)>>1)];
 var $192=($191&65535);
 var $193=($192|0)>1;
 var $194=($193?2:0);
 var $195=$i;
 var $196=$mod;
 var $197=(($196+180)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+((($195)*(52))&-1))|0);
 var $200=(($199+44)|0);
 HEAP32[(($200)>>2)]=$194;
 var $201=$i;
 var $202=(($ih+20)|0);
 var $203=(($202+((($201)*(30))&-1))|0);
 var $204=(($203+25)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$i;
 var $208=$mod;
 var $209=(($208+176)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+((($207)*(764))&-1))|0);
 var $212=(($211+756)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213)|0);
 var $215=(($214)|0);
 HEAP32[(($215)>>2)]=$206;
 var $216=$i;
 var $217=(($ih+20)|0);
 var $218=(($217+((($216)*(30))&-1))|0);
 var $219=(($218+24)|0);
 var $220=HEAP8[($219)];
 var $221=($220&255);
 var $222=(($221<<16)>>16);
 var $223=(((($222|0))/(72))&-1);
 var $224=$223<<4;
 var $225=$i;
 var $226=$mod;
 var $227=(($226+176)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+((($225)*(764))&-1))|0);
 var $230=(($229+756)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231)|0);
 var $233=(($232+16)|0);
 HEAP32[(($233)>>2)]=$224;
 var $234=$i;
 var $235=$mod;
 var $236=(($235+176)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+((($234)*(764))&-1))|0);
 var $239=(($238+756)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240)|0);
 var $242=(($241+8)|0);
 HEAP32[(($242)>>2)]=128;
 var $243=$i;
 var $244=$i;
 var $245=$mod;
 var $246=(($245+176)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+((($244)*(764))&-1))|0);
 var $249=(($248+756)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250)|0);
 var $252=(($251+40)|0);
 HEAP32[(($252)>>2)]=$243;
 var $253=$i;
 var $254=$mod;
 var $255=(($254+180)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+((($253)*(52))&-1))|0);
 var $258=(($257+32)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)>0;
 if($260){label=26;break;}else{label=27;break;}
 case 26: 
 var $262=$i;
 var $263=$mod;
 var $264=(($263+176)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+((($262)*(764))&-1))|0);
 var $267=(($266+36)|0);
 HEAP32[(($267)>>2)]=1;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $272=$i;
 var $273=((($272)+(1))|0);
 $i=$273;
 label=22;break;
 case 31: 
 var $275=$mod;
 var $276=_pattern_init($275);
 var $277=($276|0)<0;
 if($277){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=68;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 $i=0;
 label=36;break;
 case 36: 
 var $283=$i;
 var $284=$mod;
 var $285=(($284+128)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($283|0)<($286|0);
 if($287){label=37;break;}else{label=45;break;}
 case 37: 
 var $289=$mod;
 var $290=$i;
 var $291=_pattern_alloc($289,$290);
 var $292=($291|0)<0;
 if($292){label=38;break;}else{label=39;break;}
 case 38: 
 $1=-1;
 label=68;break;
 case 39: 
 var $295=$i;
 var $296=$mod;
 var $297=(($296+168)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=(($298+($295<<2))|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($300)|0);
 HEAP32[(($301)>>2)]=64;
 $j=0;
 label=40;break;
 case 40: 
 var $303=$j;
 var $304=$mod;
 var $305=(($304+136)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=($303|0)<($306|0);
 if($307){label=41;break;}else{label=43;break;}
 case 41: 
 var $309=$j;
 var $310=$i;
 var $311=(($ih+952)|0);
 var $312=(($311+($310<<2))|0);
 var $313=(($312+$309)|0);
 var $314=HEAP8[($313)];
 var $315=($314&255);
 var $316=$j;
 var $317=$i;
 var $318=$mod;
 var $319=(($318+168)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320+($317<<2))|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322+4)|0);
 var $324=(($323+($316<<2))|0);
 HEAP32[(($324)>>2)]=$315;
 label=42;break;
 case 42: 
 var $326=$j;
 var $327=((($326)+(1))|0);
 $j=$327;
 label=40;break;
 case 43: 
 var $329=$i;
 var $330=(($329)&255);
 var $331=$i;
 var $332=$mod;
 var $333=(($332+952)|0);
 var $334=(($333+$331)|0);
 HEAP8[($334)]=$330;
 label=44;break;
 case 44: 
 var $336=$i;
 var $337=((($336)+(1))|0);
 $i=$337;
 label=36;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 $i=0;
 label=48;break;
 case 48: 
 var $342=$i;
 var $343=$mod;
 var $344=(($343+132)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=($342|0)<($345|0);
 if($346){label=49;break;}else{label=57;break;}
 case 49: 
 var $348=$mod;
 var $349=$i;
 var $350=_track_alloc($348,$349,64);
 var $351=($350|0)<0;
 if($351){label=50;break;}else{label=51;break;}
 case 50: 
 $1=-1;
 label=68;break;
 case 51: 
 $j=0;
 label=52;break;
 case 52: 
 var $355=$j;
 var $356=$i;
 var $357=$mod;
 var $358=(($357+172)|0);
 var $359=HEAP32[(($358)>>2)];
 var $360=(($359+($356<<2))|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=(($361)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=($355|0)<($363|0);
 if($364){label=53;break;}else{label=55;break;}
 case 53: 
 var $366=$j;
 var $367=$i;
 var $368=$mod;
 var $369=(($368+172)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=(($370+($367<<2))|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372+4)|0);
 var $374=(($373+($366<<3))|0);
 $event=$374;
 var $375=(($ev)|0);
 var $376=$3;
 var $377=_hio_read($375,1,4,$376);
 var $378=$event;
 var $379=(($ev)|0);
 _decode_protracker_event($378,$379);
 label=54;break;
 case 54: 
 var $381=$j;
 var $382=((($381)+(1))|0);
 $j=$382;
 label=52;break;
 case 55: 
 label=56;break;
 case 56: 
 var $385=$i;
 var $386=((($385)+(1))|0);
 $i=$386;
 label=48;break;
 case 57: 
 var $388=$2;
 var $389=(($388+1280)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=$390|8192;
 HEAP32[(($389)>>2)]=$391;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $i=0;
 label=60;break;
 case 60: 
 var $395=$i;
 var $396=$mod;
 var $397=(($396+140)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=($395|0)<($398|0);
 if($399){label=61;break;}else{label=67;break;}
 case 61: 
 var $401=$i;
 var $402=$mod;
 var $403=(($402+180)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=(($404+((($401)*(52))&-1))|0);
 var $406=(($405+32)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=($407|0)<=4;
 if($408){label=62;break;}else{label=63;break;}
 case 62: 
 label=66;break;
 case 63: 
 var $411=$2;
 var $412=$3;
 var $413=$i;
 var $414=$mod;
 var $415=(($414+180)|0);
 var $416=HEAP32[(($415)>>2)];
 var $417=(($416+((($413)*(52))&-1))|0);
 var $418=_load_sample($411,$412,0,$417,0);
 var $419=($418|0)<0;
 if($419){label=64;break;}else{label=65;break;}
 case 64: 
 $1=-1;
 label=68;break;
 case 65: 
 label=66;break;
 case 66: 
 var $423=$i;
 var $424=((($423)+(1))|0);
 $i=$424;
 label=60;break;
 case 67: 
 $1=0;
 label=68;break;
 case 68: 
 var $427=$1;
 STACKTOP=sp;return $427;
  default: assert(0, "bad label: " + label);
 }
}
function _iff_new(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $data;
 var $2=_malloc(16);
 var $3=$2;
 $data=$3;
 var $4=$data;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 label=4;break;
 case 4: 
 var $9=$data;
 var $10=(($9)|0);
 var $11=$data;
 var $12=(($11)|0);
 var $13=(($12)|0);
 HEAP32[(($13)>>2)]=$10;
 var $14=$data;
 var $15=(($14)|0);
 var $16=$data;
 var $17=(($16)|0);
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=$15;
 label=5;break;
 case 5: 
 var $20=$data;
 var $21=(($20+8)|0);
 HEAP32[(($21)>>2)]=4;
 var $22=$data;
 var $23=(($22+12)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=$data;
 var $25=$24;
 $1=$25;
 label=6;break;
 case 6: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _iff_load($opaque,$m,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $ret;
 $2=$opaque;
 $3=$m;
 $4=$f;
 $5=$parm;
 label=2;break;
 case 2: 
 var $7=$4;
 var $8=_hio_eof($7);
 var $9=($8|0)!=0;
 var $10=$9^1;
 if($10){label=3;break;}else{label=8;break;}
 case 3: 
 var $12=$2;
 var $13=$3;
 var $14=$4;
 var $15=$5;
 var $16=_iff_chunk($12,$13,$14,$15);
 $ret=$16;
 var $17=$ret;
 var $18=($17|0)>0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 label=8;break;
 case 5: 
 var $21=$ret;
 var $22=($21|0)<0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=9;break;
 case 7: 
 label=2;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _iff_chunk($opaque,$m,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $data;
 var $size;
 var $id=sp;
 $2=$opaque;
 $3=$m;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=$6;
 $data=$7;
 var $8=$id;
 _memset($8, 0, 17)|0;
 var $9=(($id)|0);
 var $10=$data;
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$4;
 var $14=_hio_read($9,1,$12,$13);
 var $15=$data;
 var $16=(($15+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($14|0)!=($17|0);
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=19;break;
 case 3: 
 var $21=$data;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23&16;
 var $25=($24|0)!=0;
 if($25){label=4;break;}else{label=7;break;}
 case 4: 
 var $27=(($id)|0);
 var $28=_strncmp($27,24184,4);
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=5;break;}
 case 5: 
 var $31=$4;
 var $32=_hio_read32b($31);
 var $33=$4;
 var $34=_hio_read32b($33);
 var $35=(($id)|0);
 var $36=$data;
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$4;
 var $40=_hio_read($35,1,$38,$39);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $43=$data;
 var $44=(($43+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$45&1;
 var $47=($46|0)!=0;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=$4;
 var $50=_hio_read32l($49);
 var $55=$50;label=10;break;
 case 9: 
 var $52=$4;
 var $53=_hio_read32b($52);
 var $55=$53;label=10;break;
 case 10: 
 var $55;
 $size=$55;
 var $56=$data;
 var $57=(($56+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$58&4;
 var $60=($59|0)!=0;
 if($60){label=11;break;}else{label=12;break;}
 case 11: 
 var $62=$size;
 var $63=((($62)+(1))|0);
 var $64=$63&-2;
 $size=$64;
 label=12;break;
 case 12: 
 var $66=$data;
 var $67=(($66+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&8;
 var $70=($69|0)!=0;
 if($70){label=13;break;}else{label=14;break;}
 case 13: 
 var $72=$size;
 var $73=((($72)+(3))|0);
 var $74=$73&-4;
 $size=$74;
 label=14;break;
 case 14: 
 var $76=$data;
 var $77=(($76+12)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$78&2;
 var $80=($79|0)!=0;
 if($80){label=15;break;}else{label=16;break;}
 case 15: 
 var $82=$data;
 var $83=(($82+8)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(4))|0);
 var $86=$size;
 var $87=((($86)-($85))|0);
 $size=$87;
 label=16;break;
 case 16: 
 var $89=$size;
 var $90=($89|0)<0;
 if($90){label=17;break;}else{label=18;break;}
 case 17: 
 $1=1;
 label=19;break;
 case 18: 
 var $93=$2;
 var $94=$3;
 var $95=(($id)|0);
 var $96=$size;
 var $97=$4;
 var $98=$5;
 var $99=_iff_process($93,$94,$95,$96,$97,$98);
 $1=$99;
 label=19;break;
 case 19: 
 var $101=$1;
 STACKTOP=sp;return $101;
  default: assert(0, "bad label: " + label);
 }
}
function _iff_register($opaque,$id,$loader){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $data;
 var $f;
 $2=$opaque;
 $3=$id;
 $4=$loader;
 var $5=$2;
 var $6=$5;
 $data=$6;
 var $7=_malloc(20);
 var $8=$7;
 $f=$8;
 var $9=$f;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $13=$f;
 var $14=(($13)|0);
 var $15=(($14)|0);
 var $16=$3;
 var $17=_strlcpy($15,$16,5);
 var $18=$4;
 var $19=$f;
 var $20=(($19+8)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$f;
 var $22=(($21+12)|0);
 var $23=$data;
 var $24=(($23)|0);
 _list_add_tail281($22,$24);
 $1=0;
 label=4;break;
 case 4: 
 var $26=$1;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }
}
function _list_add_tail281($_new,$head){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$_new;
 $2=$head;
 var $3=$1;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 ___list_add288($3,$6,$7);
 STACKTOP=sp;return;
}
function _iff_release($opaque){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $data;
 var $tmp;
 var $i;
 $1=$opaque;
 var $2=$1;
 var $3=$2;
 $data=$3;
 var $4=$data;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 $tmp=$7;
 label=2;break;
 case 2: 
 var $9=$tmp;
 var $10=$data;
 var $11=(($10)|0);
 var $12=($9|0)!=($11|0);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$tmp;
 var $15=$14;
 var $16=((($15)-(12))|0);
 var $17=$16;
 $i=$17;
 var $18=$i;
 var $19=(($18+12)|0);
 _list_del284($19);
 var $20=$tmp;
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 $tmp=$22;
 var $23=$i;
 var $24=$23;
 _free($24);
 label=2;break;
 case 4: 
 var $26=$data;
 var $27=$26;
 _free($27);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _list_del284($entry){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 ___list_del287($4,$7);
 STACKTOP=sp;return;
}
function _iff_process($opaque,$m,$id,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $data;
 var $tmp;
 var $i;
 var $pos;
 $2=$opaque;
 $3=$m;
 $4=$id;
 $5=$size;
 $6=$f;
 $7=$parm;
 var $8=$2;
 var $9=$8;
 $data=$9;
 var $10=$6;
 var $11=_hio_tell($10);
 $pos=$11;
 var $12=$data;
 var $13=(($12)|0);
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 $tmp=$15;
 label=2;break;
 case 2: 
 var $17=$tmp;
 var $18=$data;
 var $19=(($18)|0);
 var $20=($17|0)!=($19|0);
 if($20){label=3;break;}else{label=10;break;}
 case 3: 
 var $22=$tmp;
 var $23=$22;
 var $24=((($23)-(12))|0);
 var $25=$24;
 $i=$25;
 var $26=$4;
 var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=8;break;}
 case 4: 
 var $29=$4;
 var $30=$i;
 var $31=(($30)|0);
 var $32=(($31)|0);
 var $33=$data;
 var $34=(($33+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=_strncmp($29,$32,$35);
 var $37=($36|0)!=0;
 if($37){label=8;break;}else{label=5;break;}
 case 5: 
 var $39=$i;
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=$5;
 var $44=$6;
 var $45=$7;
 var $46=FUNCTION_TABLE[$41]($42,$43,$44,$45);
 var $47=($46|0)<0;
 if($47){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=11;break;
 case 7: 
 label=10;break;
 case 8: 
 label=9;break;
 case 9: 
 var $52=$tmp;
 var $53=(($52)|0);
 var $54=HEAP32[(($53)>>2)];
 $tmp=$54;
 label=2;break;
 case 10: 
 var $56=$6;
 var $57=$pos;
 var $58=$5;
 var $59=((($57)+($58))|0);
 var $60=_hio_seek($56,$59,0);
 $1=0;
 label=11;break;
 case 11: 
 var $62=$1;
 STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _iff_id_size($opaque,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $data;
 $1=$opaque;
 $2=$n;
 var $3=$1;
 var $4=$3;
 $data=$4;
 var $5=$2;
 var $6=$data;
 var $7=(($6+8)|0);
 HEAP32[(($7)>>2)]=$5;
 STACKTOP=sp;return;
}
function _iff_set_quirk($opaque,$i){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $data;
 $1=$opaque;
 $2=$i;
 var $3=$1;
 var $4=$3;
 $data=$4;
 var $5=$2;
 var $6=$data;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8|$5;
 HEAP32[(($7)>>2)]=$9;
 STACKTOP=sp;return;
}
function ___list_del287($prev,$next){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$prev;
 $2=$next;
 var $3=$1;
 var $4=$2;
 var $5=(($4+4)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=$1;
 var $8=(($7)|0);
 HEAP32[(($8)>>2)]=$6;
 STACKTOP=sp;return;
}
function ___list_add288($_new,$prev,$next){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$_new;
 $2=$prev;
 $3=$next;
 var $4=$1;
 var $5=$3;
 var $6=(($5+4)|0);
 HEAP32[(($6)>>2)]=$4;
 var $7=$3;
 var $8=$1;
 var $9=(($8)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=$1;
 var $12=(($11+4)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$1;
 var $14=$2;
 var $15=(($14)|0);
 HEAP32[(($15)>>2)]=$13;
 STACKTOP=sp;return;
}
function _imf_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(60))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=$2;
 var $10=_hio_read32b($9);
 var $11=($10|0)!=1229795632;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $14=$2;
 var $15=$4;
 var $16=_hio_seek($14,$15,0);
 var $17=$2;
 var $18=$3;
 _read_title($17,$18,32);
 $1=0;
 label=4;break;
 case 4: 
 var $20=$1;
 STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _imf_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $c;
 var $r;
 var $i;
 var $j;
 var $event;
 var $dummy=sp;
 var $ih=(sp)+(8);
 var $ii=(sp)+(840);
 var $is=(sp)+(1224);
 var $pat_len;
 var $smp_num;
 var $n;
 var $b;
 var $arpeggio_val=(sp)+(1288);
 var $sid;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $event=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($ih)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,32,1,$14);
 var $16=$3;
 var $17=_hio_read16l($16);
 var $18=(($ih+32)|0);
 HEAP16[(($18)>>1)]=$17;
 var $19=$3;
 var $20=_hio_read16l($19);
 var $21=(($ih+34)|0);
 HEAP16[(($21)>>1)]=$20;
 var $22=$3;
 var $23=_hio_read16l($22);
 var $24=(($ih+36)|0);
 HEAP16[(($24)>>1)]=$23;
 var $25=$3;
 var $26=_hio_read16l($25);
 var $27=(($ih+38)|0);
 HEAP16[(($27)>>1)]=$26;
 var $28=(($ih+40)|0);
 var $29=$28;
 var $30=$3;
 var $31=_hio_read($29,8,1,$30);
 var $32=$3;
 var $33=_hio_read8($32);
 var $34=(($ih+48)|0);
 HEAP8[($34)]=$33;
 var $35=$3;
 var $36=_hio_read8($35);
 var $37=(($ih+49)|0);
 HEAP8[($37)]=$36;
 var $38=$3;
 var $39=_hio_read8($38);
 var $40=(($ih+50)|0);
 HEAP8[($40)]=$39;
 var $41=$3;
 var $42=_hio_read8($41);
 var $43=(($ih+51)|0);
 HEAP8[($43)]=$42;
 var $44=(($ih+52)|0);
 var $45=$44;
 var $46=$3;
 var $47=_hio_read($45,8,1,$46);
 var $48=$3;
 var $49=_hio_read32b($48);
 var $50=(($ih+60)|0);
 HEAP32[(($50)>>2)]=$49;
 $i=0;
 label=4;break;
 case 4: 
 var $52=$i;
 var $53=($52|0)<32;
 if($53){label=5;break;}else{label=7;break;}
 case 5: 
 var $55=$i;
 var $56=(($ih+64)|0);
 var $57=(($56+($55<<4))|0);
 var $58=(($57)|0);
 var $59=$58;
 var $60=$3;
 var $61=_hio_read($59,12,1,$60);
 var $62=$3;
 var $63=_hio_read8($62);
 var $64=$i;
 var $65=(($ih+64)|0);
 var $66=(($65+($64<<4))|0);
 var $67=(($66+12)|0);
 HEAP8[($67)]=$63;
 var $68=$3;
 var $69=_hio_read8($68);
 var $70=$i;
 var $71=(($ih+64)|0);
 var $72=(($71+($70<<4))|0);
 var $73=(($72+13)|0);
 HEAP8[($73)]=$69;
 var $74=$3;
 var $75=_hio_read8($74);
 var $76=$i;
 var $77=(($ih+64)|0);
 var $78=(($77+($76<<4))|0);
 var $79=(($78+14)|0);
 HEAP8[($79)]=$75;
 var $80=$3;
 var $81=_hio_read8($80);
 var $82=$i;
 var $83=(($ih+64)|0);
 var $84=(($83+($82<<4))|0);
 var $85=(($84+15)|0);
 HEAP8[($85)]=$81;
 label=6;break;
 case 6: 
 var $87=$i;
 var $88=((($87)+(1))|0);
 $i=$88;
 label=4;break;
 case 7: 
 var $90=(($ih+576)|0);
 var $91=$90;
 var $92=$3;
 var $93=_hio_read($91,256,1,$92);
 var $94=$mod;
 var $95=(($94)|0);
 var $96=(($95)|0);
 var $97=(($ih)|0);
 var $98=(($97)|0);
 var $99=_copy_adjust($96,$98,32);
 var $100=(($ih+32)|0);
 var $101=HEAP16[(($100)>>1)];
 var $102=($101&65535);
 var $103=$mod;
 var $104=(($103+156)|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=(($ih+36)|0);
 var $106=HEAP16[(($105)>>1)];
 var $107=($106&65535);
 var $108=$mod;
 var $109=(($108+140)|0);
 HEAP32[(($109)>>2)]=$107;
 var $110=$mod;
 var $111=(($110+144)|0);
 HEAP32[(($111)>>2)]=1024;
 var $112=(($ih+34)|0);
 var $113=HEAP16[(($112)>>1)];
 var $114=($113&65535);
 var $115=$mod;
 var $116=(($115+128)|0);
 HEAP32[(($116)>>2)]=$114;
 var $117=(($ih+38)|0);
 var $118=HEAP16[(($117)>>1)];
 var $119=($118&65535);
 var $120=$119&1;
 var $121=($120|0)!=0;
 if($121){label=8;break;}else{label=9;break;}
 case 8: 
 var $123=$2;
 var $124=(($123+1280)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$125|4096;
 HEAP32[(($124)>>2)]=$126;
 label=9;break;
 case 9: 
 var $128=(($ih+48)|0);
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$mod;
 var $132=(($131+148)|0);
 HEAP32[(($132)>>2)]=$130;
 var $133=(($ih+49)|0);
 var $134=HEAP8[($133)];
 var $135=($134&255);
 var $136=$mod;
 var $137=(($136+152)|0);
 HEAP32[(($137)>>2)]=$135;
 var $138=$2;
 _set_type($138,26800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 $i=0;
 var $145=$mod;
 var $146=(($145+136)|0);
 HEAP32[(($146)>>2)]=0;
 label=16;break;
 case 16: 
 var $148=$i;
 var $149=($148|0)<32;
 if($149){label=17;break;}else{label=22;break;}
 case 17: 
 var $151=$i;
 var $152=(($ih+64)|0);
 var $153=(($152+($151<<4))|0);
 var $154=(($153+12)|0);
 var $155=HEAP8[($154)];
 var $156=($155&255);
 var $157=($156|0)!=0;
 if($157){label=18;break;}else{label=19;break;}
 case 18: 
 var $159=$i;
 var $160=((($159)+(1))|0);
 var $161=$mod;
 var $162=(($161+136)|0);
 HEAP32[(($162)>>2)]=$160;
 label=20;break;
 case 19: 
 label=21;break;
 case 20: 
 var $165=$i;
 var $166=(($ih+64)|0);
 var $167=(($166+($165<<4))|0);
 var $168=(($167+13)|0);
 var $169=HEAP8[($168)];
 var $170=($169&255);
 var $171=$i;
 var $172=$mod;
 var $173=(($172+184)|0);
 var $174=(($173+((($171)*(12))&-1))|0);
 var $175=(($174)|0);
 HEAP32[(($175)>>2)]=$170;
 label=21;break;
 case 21: 
 var $177=$i;
 var $178=((($177)+(1))|0);
 $i=$178;
 label=16;break;
 case 22: 
 var $180=$mod;
 var $181=(($180+128)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=$mod;
 var $184=(($183+136)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(Math_imul($182,$185)|0);
 var $187=$mod;
 var $188=(($187+132)|0);
 HEAP32[(($188)>>2)]=$186;
 var $189=$mod;
 var $190=(($189+952)|0);
 var $191=$190;
 var $192=(($ih+576)|0);
 var $193=$192;
 var $194=$mod;
 var $195=(($194+156)|0);
 var $196=HEAP32[(($195)>>2)];
 assert($196 % 1 === 0);(_memcpy($191, $193, $196)|0);
 $i=0;
 label=23;break;
 case 23: 
 var $198=$i;
 var $199=$mod;
 var $200=(($199+156)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($198|0)<($201|0);
 if($202){label=24;break;}else{label=28;break;}
 case 24: 
 var $204=$i;
 var $205=$mod;
 var $206=(($205+952)|0);
 var $207=(($206+$204)|0);
 var $208=HEAP8[($207)];
 var $209=($208&255);
 var $210=($209|0)==255;
 if($210){label=25;break;}else{label=26;break;}
 case 25: 
 var $212=$i;
 var $213=$mod;
 var $214=(($213+952)|0);
 var $215=(($214+$212)|0);
 var $216=HEAP8[($215)];
 var $217=((($216)-(1))&255);
 HEAP8[($215)]=$217;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $220=$i;
 var $221=((($220)+(1))|0);
 $i=$221;
 label=23;break;
 case 28: 
 var $223=$2;
 var $224=(($223+1264)|0);
 HEAP32[(($224)>>2)]=8363;
 var $225=$mod;
 var $226=_pattern_init($225);
 var $227=($226|0)<0;
 if($227){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=108;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $232=$arpeggio_val;
 _memset($232, 0, 32)|0;
 $i=0;
 label=33;break;
 case 33: 
 var $234=$i;
 var $235=$mod;
 var $236=(($235+128)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=($234|0)<($237|0);
 if($238){label=34;break;}else{label=55;break;}
 case 34: 
 var $240=$3;
 var $241=_hio_read16l($240);
 var $242=($241&65535);
 var $243=((($242)-(4))|0);
 $pat_len=$243;
 var $244=$mod;
 var $245=$i;
 var $246=$3;
 var $247=_hio_read16l($246);
 var $248=($247&65535);
 var $249=_pattern_tracks_alloc($244,$245,$248);
 var $250=($249|0)<0;
 if($250){label=35;break;}else{label=36;break;}
 case 35: 
 $1=-1;
 label=108;break;
 case 36: 
 $r=0;
 label=37;break;
 case 37: 
 var $254=$pat_len;
 var $255=((($254)-(1))|0);
 $pat_len=$255;
 var $256=($255|0)>=0;
 if($256){label=38;break;}else{label=53;break;}
 case 38: 
 var $258=$3;
 var $259=_hio_read8($258);
 $b=$259;
 var $260=$b;
 var $261=($260&255);
 var $262=($261|0)==0;
 if($262){label=39;break;}else{label=40;break;}
 case 39: 
 var $264=$r;
 var $265=((($264)+(1))|0);
 $r=$265;
 label=37;break;
 case 40: 
 var $267=$b;
 var $268=($267&255);
 var $269=$268&31;
 $c=$269;
 var $270=$c;
 var $271=$mod;
 var $272=(($271+136)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($270|0)>=($273|0);
 if($274){label=41;break;}else{label=42;break;}
 case 41: 
 var $298=$dummy;label=43;break;
 case 42: 
 var $277=$r;
 var $278=$c;
 var $279=$i;
 var $280=$2;
 var $281=(($280)|0);
 var $282=(($281+168)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283+($279<<2))|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($285+4)|0);
 var $287=(($286+($278<<2))|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$2;
 var $290=(($289)|0);
 var $291=(($290+172)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=(($292+($288<<2))|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=(($294+4)|0);
 var $296=(($295+($277<<3))|0);
 var $298=$296;label=43;break;
 case 43: 
 var $298;
 $event=$298;
 var $299=$b;
 var $300=($299&255);
 var $301=$300&32;
 var $302=($301|0)!=0;
 if($302){label=44;break;}else{label=48;break;}
 case 44: 
 var $304=$3;
 var $305=_hio_read8($304);
 $n=$305;
 var $306=$n;
 var $307=($306&255);
 if(($307|0)==255|($307|0)==160){ label=45;break;}else{label=46;break;}
 case 45: 
 $n=-127;
 label=47;break;
 case 46: 
 var $310=$n;
 var $311=($310&255);
 var $312=$311&240;
 var $313=$312>>4;
 var $314=((($313)*(12))&-1);
 var $315=((($314)+(13))|0);
 var $316=$n;
 var $317=($316&255);
 var $318=$317&15;
 var $319=((($315)+($318))|0);
 var $320=(($319)&255);
 $n=$320;
 label=47;break;
 case 47: 
 var $322=$n;
 var $323=$event;
 var $324=(($323)|0);
 HEAP8[($324)]=$322;
 var $325=$3;
 var $326=_hio_read8($325);
 var $327=$event;
 var $328=(($327+1)|0);
 HEAP8[($328)]=$326;
 var $329=$pat_len;
 var $330=((($329)-(2))|0);
 $pat_len=$330;
 label=48;break;
 case 48: 
 var $332=$b;
 var $333=($332&255);
 var $334=$333&128;
 var $335=($334|0)!=0;
 if($335){label=49;break;}else{label=50;break;}
 case 49: 
 var $337=$3;
 var $338=_hio_read8($337);
 var $339=$event;
 var $340=(($339+3)|0);
 HEAP8[($340)]=$338;
 var $341=$3;
 var $342=_hio_read8($341);
 var $343=$event;
 var $344=(($343+4)|0);
 HEAP8[($344)]=$342;
 var $345=$c;
 var $346=$event;
 var $347=(($346+3)|0);
 var $348=$event;
 var $349=(($348+4)|0);
 var $350=(($arpeggio_val)|0);
 _xlat_fx($345,$347,$349,$350);
 var $351=$pat_len;
 var $352=((($351)-(2))|0);
 $pat_len=$352;
 label=50;break;
 case 50: 
 var $354=$b;
 var $355=($354&255);
 var $356=$355&64;
 var $357=($356|0)!=0;
 if($357){label=51;break;}else{label=52;break;}
 case 51: 
 var $359=$3;
 var $360=_hio_read8($359);
 var $361=$event;
 var $362=(($361+5)|0);
 HEAP8[($362)]=$360;
 var $363=$3;
 var $364=_hio_read8($363);
 var $365=$event;
 var $366=(($365+6)|0);
 HEAP8[($366)]=$364;
 var $367=$c;
 var $368=$event;
 var $369=(($368+5)|0);
 var $370=$event;
 var $371=(($370+6)|0);
 var $372=(($arpeggio_val)|0);
 _xlat_fx($367,$369,$371,$372);
 var $373=$pat_len;
 var $374=((($373)-(2))|0);
 $pat_len=$374;
 label=52;break;
 case 52: 
 label=37;break;
 case 53: 
 label=54;break;
 case 54: 
 var $378=$i;
 var $379=((($378)+(1))|0);
 $i=$379;
 label=33;break;
 case 55: 
 var $381=$mod;
 var $382=_instrument_init($381);
 var $383=($382|0)<0;
 if($383){label=56;break;}else{label=57;break;}
 case 56: 
 $1=-1;
 label=108;break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $i=0;
 $smp_num=0;
 label=60;break;
 case 60: 
 var $389=$i;
 var $390=$mod;
 var $391=(($390+140)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=($389|0)<($392|0);
 if($393){label=61;break;}else{label=107;break;}
 case 61: 
 var $395=(($ii)|0);
 var $396=$395;
 var $397=$3;
 var $398=_hio_read($396,32,1,$397);
 var $399=(($ii+32)|0);
 var $400=$399;
 var $401=$3;
 var $402=_hio_read($400,120,1,$401);
 var $403=(($ii+152)|0);
 var $404=$403;
 var $405=$3;
 var $406=_hio_read($404,8,1,$405);
 $j=0;
 label=62;break;
 case 62: 
 var $408=$j;
 var $409=($408|0)<32;
 if($409){label=63;break;}else{label=65;break;}
 case 63: 
 var $411=$3;
 var $412=_hio_read16l($411);
 var $413=$j;
 var $414=(($ii+160)|0);
 var $415=(($414+($413<<1))|0);
 HEAP16[(($415)>>1)]=$412;
 label=64;break;
 case 64: 
 var $417=$j;
 var $418=((($417)+(1))|0);
 $j=$418;
 label=62;break;
 case 65: 
 $j=0;
 label=66;break;
 case 66: 
 var $421=$j;
 var $422=($421|0)<32;
 if($422){label=67;break;}else{label=69;break;}
 case 67: 
 var $424=$3;
 var $425=_hio_read16l($424);
 var $426=$j;
 var $427=(($ii+224)|0);
 var $428=(($427+($426<<1))|0);
 HEAP16[(($428)>>1)]=$425;
 label=68;break;
 case 68: 
 var $430=$j;
 var $431=((($430)+(1))|0);
 $j=$431;
 label=66;break;
 case 69: 
 $j=0;
 label=70;break;
 case 70: 
 var $434=$j;
 var $435=($434|0)<32;
 if($435){label=71;break;}else{label=73;break;}
 case 71: 
 var $437=$3;
 var $438=_hio_read16l($437);
 var $439=$j;
 var $440=(($ii+288)|0);
 var $441=(($440+($439<<1))|0);
 HEAP16[(($441)>>1)]=$438;
 label=72;break;
 case 72: 
 var $443=$j;
 var $444=((($443)+(1))|0);
 $j=$444;
 label=70;break;
 case 73: 
 $j=0;
 label=74;break;
 case 74: 
 var $447=$j;
 var $448=($447|0)<3;
 if($448){label=75;break;}else{label=77;break;}
 case 75: 
 var $450=$3;
 var $451=_hio_read8($450);
 var $452=$j;
 var $453=(($ii+352)|0);
 var $454=(($453+($452<<3))|0);
 var $455=(($454)|0);
 HEAP8[($455)]=$451;
 var $456=$3;
 var $457=_hio_read8($456);
 var $458=$j;
 var $459=(($ii+352)|0);
 var $460=(($459+($458<<3))|0);
 var $461=(($460+1)|0);
 HEAP8[($461)]=$457;
 var $462=$3;
 var $463=_hio_read8($462);
 var $464=$j;
 var $465=(($ii+352)|0);
 var $466=(($465+($464<<3))|0);
 var $467=(($466+2)|0);
 HEAP8[($467)]=$463;
 var $468=$3;
 var $469=_hio_read8($468);
 var $470=$j;
 var $471=(($ii+352)|0);
 var $472=(($471+($470<<3))|0);
 var $473=(($472+3)|0);
 HEAP8[($473)]=$469;
 var $474=$3;
 var $475=_hio_read8($474);
 var $476=$j;
 var $477=(($ii+352)|0);
 var $478=(($477+($476<<3))|0);
 var $479=(($478+4)|0);
 HEAP8[($479)]=$475;
 var $480=$j;
 var $481=(($ii+352)|0);
 var $482=(($481+($480<<3))|0);
 var $483=(($482+5)|0);
 var $484=$483;
 var $485=$3;
 var $486=_hio_read($484,3,1,$485);
 label=76;break;
 case 76: 
 var $488=$j;
 var $489=((($488)+(1))|0);
 $j=$489;
 label=74;break;
 case 77: 
 var $491=$3;
 var $492=_hio_read16l($491);
 var $493=(($ii+376)|0);
 HEAP16[(($493)>>1)]=$492;
 var $494=$3;
 var $495=_hio_read16l($494);
 var $496=(($ii+378)|0);
 HEAP16[(($496)>>1)]=$495;
 var $497=$3;
 var $498=_hio_read32b($497);
 var $499=(($ii+380)|0);
 HEAP32[(($499)>>2)]=$498;
 var $500=(($ii+380)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($501|0)!=1229533488;
 if($502){label=78;break;}else{label=79;break;}
 case 78: 
 $1=-2;
 label=108;break;
 case 79: 
 var $505=(($ii+378)|0);
 var $506=HEAP16[(($505)>>1)];
 var $507=($506&65535);
 var $508=$i;
 var $509=$mod;
 var $510=(($509+176)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=(($511+((($508)*(764))&-1))|0);
 var $513=(($512+36)|0);
 HEAP32[(($513)>>2)]=$507;
 var $514=$i;
 var $515=$mod;
 var $516=(($515+176)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=(($517+((($514)*(764))&-1))|0);
 var $519=(($518+36)|0);
 var $520=HEAP32[(($519)>>2)];
 var $521=($520|0)!=0;
 if($521){label=80;break;}else{label=83;break;}
 case 80: 
 var $523=$mod;
 var $524=$i;
 var $525=$i;
 var $526=$mod;
 var $527=(($526+176)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=(($528+((($525)*(764))&-1))|0);
 var $530=(($529+36)|0);
 var $531=HEAP32[(($530)>>2)];
 var $532=_subinstrument_alloc($523,$524,$531);
 var $533=($532|0)<0;
 if($533){label=81;break;}else{label=82;break;}
 case 81: 
 $1=-1;
 label=108;break;
 case 82: 
 label=83;break;
 case 83: 
 var $537=(($ii)|0);
 var $538=(($537)|0);
 var $539=_str_adj($538);
 var $540=$i;
 var $541=$mod;
 var $542=(($541+176)|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=(($543+((($540)*(764))&-1))|0);
 var $545=(($544)|0);
 var $546=(($545)|0);
 var $547=(($ii)|0);
 var $548=(($547)|0);
 var $549=_strlcpy($546,$548,24);
 $j=0;
 label=84;break;
 case 84: 
 var $551=$j;
 var $552=($551|0)<108;
 if($552){label=85;break;}else{label=87;break;}
 case 85: 
 var $554=$j;
 var $555=(($ii+32)|0);
 var $556=(($555+$554)|0);
 var $557=HEAP8[($556)];
 var $558=$j;
 var $559=((($558)+(12))|0);
 var $560=$i;
 var $561=$mod;
 var $562=(($561+176)|0);
 var $563=HEAP32[(($562)>>2)];
 var $564=(($563+((($560)*(764))&-1))|0);
 var $565=(($564+512)|0);
 var $566=(($565+($559<<1))|0);
 var $567=(($566)|0);
 HEAP8[($567)]=$557;
 label=86;break;
 case 86: 
 var $569=$j;
 var $570=((($569)+(1))|0);
 $j=$570;
 label=84;break;
 case 87: 
 label=88;break;
 case 88: 
 label=89;break;
 case 89: 
 var $574=(($ii+352)|0);
 var $575=(($574)|0);
 var $576=(($575)|0);
 var $577=HEAP8[($576)];
 var $578=($577&255);
 var $579=$i;
 var $580=$mod;
 var $581=(($580+176)|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(($582+((($579)*(764))&-1))|0);
 var $584=(($583+44)|0);
 var $585=(($584+4)|0);
 HEAP32[(($585)>>2)]=$578;
 var $586=(($ii+352)|0);
 var $587=(($586)|0);
 var $588=(($587+1)|0);
 var $589=HEAP8[($588)];
 var $590=($589&255);
 var $591=$i;
 var $592=$mod;
 var $593=(($592+176)|0);
 var $594=HEAP32[(($593)>>2)];
 var $595=(($594+((($591)*(764))&-1))|0);
 var $596=(($595+44)|0);
 var $597=(($596+12)|0);
 HEAP32[(($597)>>2)]=$590;
 var $598=(($ii+352)|0);
 var $599=(($598)|0);
 var $600=(($599+2)|0);
 var $601=HEAP8[($600)];
 var $602=($601&255);
 var $603=$i;
 var $604=$mod;
 var $605=(($604+176)|0);
 var $606=HEAP32[(($605)>>2)];
 var $607=(($606+((($603)*(764))&-1))|0);
 var $608=(($607+44)|0);
 var $609=(($608+20)|0);
 HEAP32[(($609)>>2)]=$602;
 var $610=(($ii+352)|0);
 var $611=(($610)|0);
 var $612=(($611+3)|0);
 var $613=HEAP8[($612)];
 var $614=($613&255);
 var $615=$i;
 var $616=$mod;
 var $617=(($616+176)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=(($618+((($615)*(764))&-1))|0);
 var $620=(($619+44)|0);
 var $621=(($620+24)|0);
 HEAP32[(($621)>>2)]=$614;
 var $622=(($ii+352)|0);
 var $623=(($622)|0);
 var $624=(($623+4)|0);
 var $625=HEAP8[($624)];
 var $626=($625&255);
 var $627=$626&1;
 var $628=($627|0)!=0;
 var $629=($628?1:0);
 var $630=$i;
 var $631=$mod;
 var $632=(($631+176)|0);
 var $633=HEAP32[(($632)>>2)];
 var $634=(($633+((($630)*(764))&-1))|0);
 var $635=(($634+44)|0);
 var $636=(($635)|0);
 HEAP32[(($636)>>2)]=$629;
 var $637=(($ii+352)|0);
 var $638=(($637)|0);
 var $639=(($638+4)|0);
 var $640=HEAP8[($639)];
 var $641=($640&255);
 var $642=$641&2;
 var $643=($642|0)!=0;
 var $644=($643?2:0);
 var $645=$i;
 var $646=$mod;
 var $647=(($646+176)|0);
 var $648=HEAP32[(($647)>>2)];
 var $649=(($648+((($645)*(764))&-1))|0);
 var $650=(($649+44)|0);
 var $651=(($650)|0);
 var $652=HEAP32[(($651)>>2)];
 var $653=$652|$644;
 HEAP32[(($651)>>2)]=$653;
 var $654=(($ii+352)|0);
 var $655=(($654)|0);
 var $656=(($655+4)|0);
 var $657=HEAP8[($656)];
 var $658=($657&255);
 var $659=$658&4;
 var $660=($659|0)!=0;
 var $661=($660?4:0);
 var $662=$i;
 var $663=$mod;
 var $664=(($663+176)|0);
 var $665=HEAP32[(($664)>>2)];
 var $666=(($665+((($662)*(764))&-1))|0);
 var $667=(($666+44)|0);
 var $668=(($667)|0);
 var $669=HEAP32[(($668)>>2)];
 var $670=$669|$661;
 HEAP32[(($668)>>2)]=$670;
 $j=0;
 label=90;break;
 case 90: 
 var $672=$j;
 var $673=$i;
 var $674=$mod;
 var $675=(($674+176)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=(($676+((($673)*(764))&-1))|0);
 var $678=(($677+44)|0);
 var $679=(($678+4)|0);
 var $680=HEAP32[(($679)>>2)];
 var $681=($672|0)<($680|0);
 if($681){label=91;break;}else{label=93;break;}
 case 91: 
 var $683=$j;
 var $684=($683<<1);
 var $685=(($ii+160)|0);
 var $686=(($685+($684<<1))|0);
 var $687=HEAP16[(($686)>>1)];
 var $688=$j;
 var $689=($688<<1);
 var $690=$i;
 var $691=$mod;
 var $692=(($691+176)|0);
 var $693=HEAP32[(($692)>>2)];
 var $694=(($693+((($690)*(764))&-1))|0);
 var $695=(($694+44)|0);
 var $696=(($695+28)|0);
 var $697=(($696+($689<<1))|0);
 HEAP16[(($697)>>1)]=$687;
 var $698=$j;
 var $699=($698<<1);
 var $700=((($699)+(1))|0);
 var $701=(($ii+160)|0);
 var $702=(($701+($700<<1))|0);
 var $703=HEAP16[(($702)>>1)];
 var $704=$j;
 var $705=($704<<1);
 var $706=((($705)+(1))|0);
 var $707=$i;
 var $708=$mod;
 var $709=(($708+176)|0);
 var $710=HEAP32[(($709)>>2)];
 var $711=(($710+((($707)*(764))&-1))|0);
 var $712=(($711+44)|0);
 var $713=(($712+28)|0);
 var $714=(($713+($706<<1))|0);
 HEAP16[(($714)>>1)]=$703;
 label=92;break;
 case 92: 
 var $716=$j;
 var $717=((($716)+(1))|0);
 $j=$717;
 label=90;break;
 case 93: 
 $j=0;
 label=94;break;
 case 94: 
 var $720=$j;
 var $721=(($ii+378)|0);
 var $722=HEAP16[(($721)>>1)];
 var $723=($722&65535);
 var $724=($720|0)<($723|0);
 if($724){label=95;break;}else{label=105;break;}
 case 95: 
 var $726=(($is)|0);
 var $727=$726;
 var $728=$3;
 var $729=_hio_read($727,13,1,$728);
 var $730=(($is+13)|0);
 var $731=$730;
 var $732=$3;
 var $733=_hio_read($731,3,1,$732);
 var $734=$3;
 var $735=_hio_read32l($734);
 var $736=(($is+16)|0);
 HEAP32[(($736)>>2)]=$735;
 var $737=$3;
 var $738=_hio_read32l($737);
 var $739=(($is+20)|0);
 HEAP32[(($739)>>2)]=$738;
 var $740=$3;
 var $741=_hio_read32l($740);
 var $742=(($is+24)|0);
 HEAP32[(($742)>>2)]=$741;
 var $743=$3;
 var $744=_hio_read32l($743);
 var $745=(($is+28)|0);
 HEAP32[(($745)>>2)]=$744;
 var $746=$3;
 var $747=_hio_read8($746);
 var $748=(($is+32)|0);
 HEAP8[($748)]=$747;
 var $749=$3;
 var $750=_hio_read8($749);
 var $751=(($is+33)|0);
 HEAP8[($751)]=$750;
 var $752=(($is+34)|0);
 var $753=$752;
 var $754=$3;
 var $755=_hio_read($753,14,1,$754);
 var $756=$3;
 var $757=_hio_read8($756);
 var $758=(($is+48)|0);
 HEAP8[($758)]=$757;
 var $759=(($is+49)|0);
 var $760=$759;
 var $761=$3;
 var $762=_hio_read($760,5,1,$761);
 var $763=$3;
 var $764=_hio_read16l($763);
 var $765=(($is+54)|0);
 HEAP16[(($765)>>1)]=$764;
 var $766=$3;
 var $767=_hio_read32l($766);
 var $768=(($is+56)|0);
 HEAP32[(($768)>>2)]=$767;
 var $769=$3;
 var $770=_hio_read32b($769);
 var $771=(($is+60)|0);
 HEAP32[(($771)>>2)]=$770;
 var $772=$smp_num;
 var $773=$j;
 var $774=$i;
 var $775=$mod;
 var $776=(($775+176)|0);
 var $777=HEAP32[(($776)>>2)];
 var $778=(($777+((($774)*(764))&-1))|0);
 var $779=(($778+756)|0);
 var $780=HEAP32[(($779)>>2)];
 var $781=(($780+($773<<6))|0);
 var $782=(($781+40)|0);
 HEAP32[(($782)>>2)]=$772;
 var $783=(($is+32)|0);
 var $784=HEAP8[($783)];
 var $785=($784&255);
 var $786=$j;
 var $787=$i;
 var $788=$mod;
 var $789=(($788+176)|0);
 var $790=HEAP32[(($789)>>2)];
 var $791=(($790+((($787)*(764))&-1))|0);
 var $792=(($791+756)|0);
 var $793=HEAP32[(($792)>>2)];
 var $794=(($793+($786<<6))|0);
 var $795=(($794)|0);
 HEAP32[(($795)>>2)]=$785;
 var $796=(($is+33)|0);
 var $797=HEAP8[($796)];
 var $798=($797&255);
 var $799=$j;
 var $800=$i;
 var $801=$mod;
 var $802=(($801+176)|0);
 var $803=HEAP32[(($802)>>2)];
 var $804=(($803+((($800)*(764))&-1))|0);
 var $805=(($804+756)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=(($806+($799<<6))|0);
 var $808=(($807+8)|0);
 HEAP32[(($808)>>2)]=$798;
 var $809=(($is+16)|0);
 var $810=HEAP32[(($809)>>2)];
 var $811=$smp_num;
 var $812=$mod;
 var $813=(($812+180)|0);
 var $814=HEAP32[(($813)>>2)];
 var $815=(($814+((($811)*(52))&-1))|0);
 var $816=(($815+32)|0);
 HEAP32[(($816)>>2)]=$810;
 var $817=(($is+20)|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=$smp_num;
 var $820=$mod;
 var $821=(($820+180)|0);
 var $822=HEAP32[(($821)>>2)];
 var $823=(($822+((($819)*(52))&-1))|0);
 var $824=(($823+36)|0);
 HEAP32[(($824)>>2)]=$818;
 var $825=(($is+24)|0);
 var $826=HEAP32[(($825)>>2)];
 var $827=$smp_num;
 var $828=$mod;
 var $829=(($828+180)|0);
 var $830=HEAP32[(($829)>>2)];
 var $831=(($830+((($827)*(52))&-1))|0);
 var $832=(($831+40)|0);
 HEAP32[(($832)>>2)]=$826;
 var $833=(($is+48)|0);
 var $834=HEAP8[($833)];
 var $835=($834&255);
 var $836=$835&1;
 var $837=($836|0)!=0;
 var $838=($837?2:0);
 var $839=$smp_num;
 var $840=$mod;
 var $841=(($840+180)|0);
 var $842=HEAP32[(($841)>>2)];
 var $843=(($842+((($839)*(52))&-1))|0);
 var $844=(($843+44)|0);
 HEAP32[(($844)>>2)]=$838;
 var $845=(($is+48)|0);
 var $846=HEAP8[($845)];
 var $847=($846&255);
 var $848=$847&4;
 var $849=($848|0)!=0;
 if($849){label=96;break;}else{label=97;break;}
 case 96: 
 var $851=$smp_num;
 var $852=$mod;
 var $853=(($852+180)|0);
 var $854=HEAP32[(($853)>>2)];
 var $855=(($854+((($851)*(52))&-1))|0);
 var $856=(($855+44)|0);
 var $857=HEAP32[(($856)>>2)];
 var $858=$857|1;
 HEAP32[(($856)>>2)]=$858;
 var $859=$smp_num;
 var $860=$mod;
 var $861=(($860+180)|0);
 var $862=HEAP32[(($861)>>2)];
 var $863=(($862+((($859)*(52))&-1))|0);
 var $864=(($863+32)|0);
 var $865=HEAP32[(($864)>>2)];
 var $866=$865>>1;
 HEAP32[(($864)>>2)]=$866;
 var $867=$smp_num;
 var $868=$mod;
 var $869=(($868+180)|0);
 var $870=HEAP32[(($869)>>2)];
 var $871=(($870+((($867)*(52))&-1))|0);
 var $872=(($871+36)|0);
 var $873=HEAP32[(($872)>>2)];
 var $874=$873>>1;
 HEAP32[(($872)>>2)]=$874;
 var $875=$smp_num;
 var $876=$mod;
 var $877=(($876+180)|0);
 var $878=HEAP32[(($877)>>2)];
 var $879=(($878+((($875)*(52))&-1))|0);
 var $880=(($879+40)|0);
 var $881=HEAP32[(($880)>>2)];
 var $882=$881>>1;
 HEAP32[(($880)>>2)]=$882;
 label=97;break;
 case 97: 
 label=98;break;
 case 98: 
 label=99;break;
 case 99: 
 var $886=(($is+28)|0);
 var $887=HEAP32[(($886)>>2)];
 var $888=$j;
 var $889=$i;
 var $890=$mod;
 var $891=(($890+176)|0);
 var $892=HEAP32[(($891)>>2)];
 var $893=(($892+((($889)*(764))&-1))|0);
 var $894=(($893+756)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=(($895+($888<<6))|0);
 var $897=(($896+12)|0);
 var $898=$j;
 var $899=$i;
 var $900=$mod;
 var $901=(($900+176)|0);
 var $902=HEAP32[(($901)>>2)];
 var $903=(($902+((($899)*(764))&-1))|0);
 var $904=(($903+756)|0);
 var $905=HEAP32[(($904)>>2)];
 var $906=(($905+($898<<6))|0);
 var $907=(($906+16)|0);
 _c2spd_to_note($887,$897,$907);
 var $908=$smp_num;
 var $909=$mod;
 var $910=(($909+180)|0);
 var $911=HEAP32[(($910)>>2)];
 var $912=(($911+((($908)*(52))&-1))|0);
 var $913=(($912+32)|0);
 var $914=HEAP32[(($913)>>2)];
 var $915=($914|0)!=0;
 if($915){label=101;break;}else{label=100;break;}
 case 100: 
 label=104;break;
 case 101: 
 var $918=$j;
 var $919=$i;
 var $920=$mod;
 var $921=(($920+176)|0);
 var $922=HEAP32[(($921)>>2)];
 var $923=(($922+((($919)*(764))&-1))|0);
 var $924=(($923+756)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($925+($918<<6))|0);
 var $927=(($926+40)|0);
 var $928=HEAP32[(($927)>>2)];
 $sid=$928;
 var $929=$2;
 var $930=$3;
 var $931=$sid;
 var $932=$mod;
 var $933=(($932+180)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=(($934+((($931)*(52))&-1))|0);
 var $936=_load_sample($929,$930,0,$935,0);
 var $937=($936|0)<0;
 if($937){label=102;break;}else{label=103;break;}
 case 102: 
 $1=-1;
 label=108;break;
 case 103: 
 label=104;break;
 case 104: 
 var $941=$j;
 var $942=((($941)+(1))|0);
 $j=$942;
 var $943=$smp_num;
 var $944=((($943)+(1))|0);
 $smp_num=$944;
 label=94;break;
 case 105: 
 label=106;break;
 case 106: 
 var $947=$i;
 var $948=((($947)+(1))|0);
 $i=$948;
 label=60;break;
 case 107: 
 var $950=$smp_num;
 var $951=$mod;
 var $952=(($951+144)|0);
 HEAP32[(($952)>>2)]=$950;
 var $953=$mod;
 var $954=(($953+180)|0);
 var $955=HEAP32[(($954)>>2)];
 var $956=$955;
 var $957=$mod;
 var $958=(($957+144)|0);
 var $959=HEAP32[(($958)>>2)];
 var $960=((($959)*(52))&-1);
 var $961=_realloc($956,$960);
 var $962=$961;
 var $963=$mod;
 var $964=(($963+180)|0);
 HEAP32[(($964)>>2)]=$962;
 var $965=$2;
 var $966=(($965+1280)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=$967|8454689;
 HEAP32[(($966)>>2)]=$968;
 var $969=$2;
 var $970=(($969+1284)|0);
 HEAP32[(($970)>>2)]=2;
 $1=0;
 label=108;break;
 case 108: 
 var $972=$1;
 STACKTOP=sp;return $972;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_fx($c,$fxt,$fxp,$arpeggio_val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $h;
 var $l;
 $1=$c;
 $2=$fxt;
 $3=$fxp;
 $4=$arpeggio_val;
 var $5=$3;
 var $6=HEAP8[($5)];
 var $7=($6&255);
 var $8=$7&240;
 var $9=$8>>4;
 var $10=(($9)&255);
 $h=$10;
 var $11=$3;
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=$13&15;
 var $15=(($14)&255);
 $l=$15;
 var $16=$2;
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=((7752+$18)|0);
 var $20=HEAP8[($19)];
 var $21=$2;
 HEAP8[($21)]=$20;
 var $22=($20&255);
 switch(($22|0)){case 253:{ label=10;break;}case 14:{ label=14;break;}case 0:{ label=2;break;}case 255:{ label=25;break;}case 254:{ label=6;break;}default:{label=26;break;}}break;
 case 2: 
 var $24=$3;
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)!=0;
 if($26){label=3;break;}else{label=4;break;}
 case 3: 
 var $28=$3;
 var $29=HEAP8[($28)];
 var $30=$1;
 var $31=$4;
 var $32=(($31+$30)|0);
 HEAP8[($32)]=$29;
 label=5;break;
 case 4: 
 var $34=$1;
 var $35=$4;
 var $36=(($35+$34)|0);
 var $37=HEAP8[($36)];
 var $38=$3;
 HEAP8[($38)]=$37;
 label=5;break;
 case 5: 
 label=26;break;
 case 6: 
 var $41=$2;
 HEAP8[($41)]=1;
 var $42=$3;
 var $43=HEAP8[($42)];
 var $44=($43&255);
 var $45=($44|0)<48;
 if($45){label=7;break;}else{label=8;break;}
 case 7: 
 var $47=$3;
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=$49>>2;
 var $51=$50&15;
 var $52=$51|224;
 var $53=(($52)&255);
 var $54=$3;
 HEAP8[($54)]=$53;
 label=9;break;
 case 8: 
 var $56=$3;
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=$58>>4;
 var $60=$59&15;
 var $61=$60|240;
 var $62=(($61)&255);
 var $63=$3;
 HEAP8[($63)]=$62;
 label=9;break;
 case 9: 
 label=26;break;
 case 10: 
 var $66=$2;
 HEAP8[($66)]=2;
 var $67=$3;
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=($69|0)<48;
 if($70){label=11;break;}else{label=12;break;}
 case 11: 
 var $72=$3;
 var $73=HEAP8[($72)];
 var $74=($73&255);
 var $75=$74>>2;
 var $76=$75&15;
 var $77=$76|224;
 var $78=(($77)&255);
 var $79=$3;
 HEAP8[($79)]=$78;
 label=13;break;
 case 12: 
 var $81=$3;
 var $82=HEAP8[($81)];
 var $83=($82&255);
 var $84=$83>>4;
 var $85=$84&15;
 var $86=$85|240;
 var $87=(($86)&255);
 var $88=$3;
 HEAP8[($88)]=$87;
 label=13;break;
 case 13: 
 label=26;break;
 case 14: 
 var $91=$h;
 var $92=($91&255);
 switch(($92|0)){case 1:case 2:case 4:case 6:case 7:case 9:case 14:case 15:{ label=15;break;}case 3:{ label=16;break;}case 5:{ label=17;break;}case 8:{ label=18;break;}case 10:{ label=19;break;}case 11:{ label=20;break;}case 12:{ label=21;break;}default:{label=24;break;}}break;
 case 15: 
 var $94=$2;
 HEAP8[($94)]=0;
 var $95=$3;
 HEAP8[($95)]=0;
 label=24;break;
 case 16: 
 var $97=$l;
 var $98=($97&255);
 var $99=$98|48;
 var $100=(($99)&255);
 var $101=$3;
 HEAP8[($101)]=$100;
 label=24;break;
 case 17: 
 var $103=$l;
 var $104=($103&255);
 var $105=$104|64;
 var $106=(($105)&255);
 var $107=$3;
 HEAP8[($107)]=$106;
 label=24;break;
 case 18: 
 var $109=$l;
 var $110=($109&255);
 var $111=$110|112;
 var $112=(($111)&255);
 var $113=$3;
 HEAP8[($113)]=$112;
 label=24;break;
 case 19: 
 var $115=$l;
 var $116=($115&255);
 var $117=$116|96;
 var $118=(($117)&255);
 var $119=$3;
 HEAP8[($119)]=$118;
 label=24;break;
 case 20: 
 var $121=$l;
 var $122=($121&255);
 var $123=$122|224;
 var $124=(($123)&255);
 var $125=$3;
 HEAP8[($125)]=$124;
 label=24;break;
 case 21: 
 var $127=$l;
 var $128=($127&255);
 var $129=($128|0)==0;
 if($129){label=22;break;}else{label=23;break;}
 case 22: 
 var $131=$3;
 HEAP8[($131)]=0;
 var $132=$2;
 HEAP8[($132)]=0;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=26;break;
 case 25: 
 var $136=$3;
 HEAP8[($136)]=0;
 var $137=$2;
 HEAP8[($137)]=0;
 label=26;break;
 case 26: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _ims_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1088)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $smp_size;
 var $pat;
 var $ih=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 $smp_size=0;
 var $5=(($ih)|0);
 var $6=$5;
 var $7=$2;
 var $8=_hio_read($6,20,1,$7);
 $i=0;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=($10|0)<31;
 if($11){label=3;break;}else{label=18;break;}
 case 3: 
 var $13=$i;
 var $14=(($ih+20)|0);
 var $15=(($14+((($13)*(30))&-1))|0);
 var $16=(($15)|0);
 var $17=$16;
 var $18=$2;
 var $19=_hio_read($17,1,20,$18);
 var $20=($19>>>0)<20;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=37;break;
 case 5: 
 var $23=$2;
 var $24=_hio_read16b($23);
 var $25=$i;
 var $26=(($ih+20)|0);
 var $27=(($26+((($25)*(30))&-1))|0);
 var $28=(($27+20)|0);
 HEAP16[(($28)>>1)]=$24;
 var $29=$2;
 var $30=_hio_read16b($29);
 var $31=$i;
 var $32=(($ih+20)|0);
 var $33=(($32+((($31)*(30))&-1))|0);
 var $34=(($33+22)|0);
 HEAP16[(($34)>>1)]=$30;
 var $35=$2;
 var $36=_hio_read8($35);
 var $37=$i;
 var $38=(($ih+20)|0);
 var $39=(($38+((($37)*(30))&-1))|0);
 var $40=(($39+24)|0);
 HEAP8[($40)]=$36;
 var $41=$2;
 var $42=_hio_read8($41);
 var $43=$i;
 var $44=(($ih+20)|0);
 var $45=(($44+((($43)*(30))&-1))|0);
 var $46=(($45+25)|0);
 HEAP8[($46)]=$42;
 var $47=$2;
 var $48=_hio_read16b($47);
 var $49=$i;
 var $50=(($ih+20)|0);
 var $51=(($50+((($49)*(30))&-1))|0);
 var $52=(($51+26)|0);
 HEAP16[(($52)>>1)]=$48;
 var $53=$2;
 var $54=_hio_read16b($53);
 var $55=$i;
 var $56=(($ih+20)|0);
 var $57=(($56+((($55)*(30))&-1))|0);
 var $58=(($57+28)|0);
 HEAP16[(($58)>>1)]=$54;
 var $59=$i;
 var $60=(($ih+20)|0);
 var $61=(($60+((($59)*(30))&-1))|0);
 var $62=(($61+22)|0);
 var $63=HEAP16[(($62)>>1)];
 var $64=($63&65535);
 var $65=($64<<1);
 var $66=$smp_size;
 var $67=((($66)+($65))|0);
 $smp_size=$67;
 var $68=$i;
 var $69=(($ih+20)|0);
 var $70=(($69+((($68)*(30))&-1))|0);
 var $71=(($70)|0);
 var $72=(($71)|0);
 var $73=_test_name($72,20);
 var $74=($73|0)<0;
 if($74){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=37;break;
 case 7: 
 var $77=$i;
 var $78=(($ih+20)|0);
 var $79=(($78+((($77)*(30))&-1))|0);
 var $80=(($79+25)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=($82|0)>64;
 if($83){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=37;break;
 case 9: 
 var $86=$i;
 var $87=(($ih+20)|0);
 var $88=(($87+((($86)*(30))&-1))|0);
 var $89=(($88+22)|0);
 var $90=HEAP16[(($89)>>1)];
 var $91=($90&65535);
 var $92=($91|0)>32768;
 if($92){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=37;break;
 case 11: 
 var $95=$i;
 var $96=(($ih+20)|0);
 var $97=(($96+((($95)*(30))&-1))|0);
 var $98=(($97+26)|0);
 var $99=HEAP16[(($98)>>1)];
 var $100=($99&65535);
 var $101=$i;
 var $102=(($ih+20)|0);
 var $103=(($102+((($101)*(30))&-1))|0);
 var $104=(($103+22)|0);
 var $105=HEAP16[(($104)>>1)];
 var $106=($105&65535);
 var $107=($100|0)>($106|0);
 if($107){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=37;break;
 case 13: 
 var $110=$i;
 var $111=(($ih+20)|0);
 var $112=(($111+((($110)*(30))&-1))|0);
 var $113=(($112+22)|0);
 var $114=HEAP16[(($113)>>1)];
 var $115=($114&65535);
 var $116=($115|0)!=0;
 if($116){label=14;break;}else{label=16;break;}
 case 14: 
 var $118=$i;
 var $119=(($ih+20)|0);
 var $120=(($119+((($118)*(30))&-1))|0);
 var $121=(($120+28)|0);
 var $122=HEAP16[(($121)>>1)];
 var $123=($122&65535);
 var $124=$i;
 var $125=(($ih+20)|0);
 var $126=(($125+((($124)*(30))&-1))|0);
 var $127=(($126+22)|0);
 var $128=HEAP16[(($127)>>1)];
 var $129=($128&65535);
 var $130=($129<<1);
 var $131=($123|0)>($130|0);
 if($131){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=37;break;
 case 16: 
 label=17;break;
 case 17: 
 var $135=$i;
 var $136=((($135)+(1))|0);
 $i=$136;
 label=2;break;
 case 18: 
 var $138=$smp_size;
 var $139=($138|0)<8;
 if($139){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=37;break;
 case 20: 
 var $142=$2;
 var $143=_hio_read8($142);
 var $144=(($ih+950)|0);
 HEAP8[($144)]=$143;
 var $145=$2;
 var $146=_hio_read8($145);
 var $147=(($ih+951)|0);
 HEAP8[($147)]=$146;
 var $148=(($ih+952)|0);
 var $149=$148;
 var $150=$2;
 var $151=_hio_read($149,128,1,$150);
 var $152=(($ih+1080)|0);
 var $153=$152;
 var $154=$2;
 var $155=_hio_read($153,4,1,$154);
 var $156=(($ih+951)|0);
 var $157=HEAP8[($156)];
 var $158=($157&255);
 var $159=($158|0)>1;
 if($159){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=37;break;
 case 22: 
 var $162=(($ih+1080)|0);
 var $163=(($162+3)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=($165|0)!=60;
 if($166){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=37;break;
 case 24: 
 var $169=(($ih+950)|0);
 var $170=HEAP8[($169)];
 var $171=($170&255);
 var $172=($171|0)>127;
 if($172){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=37;break;
 case 26: 
 $i=0;
 $pat=0;
 label=27;break;
 case 27: 
 var $176=$i;
 var $177=(($ih+950)|0);
 var $178=HEAP8[($177)];
 var $179=($178&255);
 var $180=($176|0)<($179|0);
 if($180){label=28;break;}else{label=32;break;}
 case 28: 
 var $182=$i;
 var $183=(($ih+952)|0);
 var $184=(($183+$182)|0);
 var $185=HEAP8[($184)];
 var $186=($185&255);
 var $187=$pat;
 var $188=($186|0)>($187|0);
 if($188){label=29;break;}else{label=30;break;}
 case 29: 
 var $190=$i;
 var $191=(($ih+952)|0);
 var $192=(($191+$190)|0);
 var $193=HEAP8[($192)];
 var $194=($193&255);
 $pat=$194;
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $197=$i;
 var $198=((($197)+(1))|0);
 $i=$198;
 label=27;break;
 case 32: 
 var $200=$pat;
 var $201=((($200)+(1))|0);
 $pat=$201;
 var $202=$pat;
 var $203=($202|0)>127;
 if($203){label=35;break;}else{label=33;break;}
 case 33: 
 var $205=(($ih+950)|0);
 var $206=HEAP8[($205)];
 var $207=($206&255);
 var $208=($207|0)==0;
 if($208){label=35;break;}else{label=34;break;}
 case 34: 
 var $210=(($ih+950)|0);
 var $211=HEAP8[($210)];
 var $212=($211&255);
 var $213=($212|0)>127;
 if($213){label=35;break;}else{label=36;break;}
 case 35: 
 $1=-1;
 label=37;break;
 case 36: 
 var $216=$2;
 var $217=$4;
 var $218=(($217)|0);
 var $219=_hio_seek($216,$218,0);
 var $220=$2;
 var $221=$3;
 _read_title($220,$221,20);
 $1=0;
 label=37;break;
 case 37: 
 var $223=$1;
 STACKTOP=sp;return $223;
  default: assert(0, "bad label: " + label);
 }
}
function _ims_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $smp_size;
 var $event;
 var $ih=sp;
 var $ims_event=(sp)+(1088);
 var $xpo;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $xpo=21;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$mod;
 var $13=(($12+140)|0);
 HEAP32[(($13)>>2)]=31;
 var $14=$mod;
 var $15=(($14+140)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$mod;
 var $18=(($17+144)|0);
 HEAP32[(($18)>>2)]=$16;
 $smp_size=0;
 var $19=(($ih)|0);
 var $20=$19;
 var $21=$3;
 var $22=_hio_read($20,20,1,$21);
 $i=0;
 label=4;break;
 case 4: 
 var $24=$i;
 var $25=($24|0)<31;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=$i;
 var $28=(($ih+20)|0);
 var $29=(($28+((($27)*(30))&-1))|0);
 var $30=(($29)|0);
 var $31=$30;
 var $32=$3;
 var $33=_hio_read($31,20,1,$32);
 var $34=$3;
 var $35=_hio_read16b($34);
 var $36=$i;
 var $37=(($ih+20)|0);
 var $38=(($37+((($36)*(30))&-1))|0);
 var $39=(($38+20)|0);
 HEAP16[(($39)>>1)]=$35;
 var $40=$3;
 var $41=_hio_read16b($40);
 var $42=$i;
 var $43=(($ih+20)|0);
 var $44=(($43+((($42)*(30))&-1))|0);
 var $45=(($44+22)|0);
 HEAP16[(($45)>>1)]=$41;
 var $46=$3;
 var $47=_hio_read8($46);
 var $48=$i;
 var $49=(($ih+20)|0);
 var $50=(($49+((($48)*(30))&-1))|0);
 var $51=(($50+24)|0);
 HEAP8[($51)]=$47;
 var $52=$3;
 var $53=_hio_read8($52);
 var $54=$i;
 var $55=(($ih+20)|0);
 var $56=(($55+((($54)*(30))&-1))|0);
 var $57=(($56+25)|0);
 HEAP8[($57)]=$53;
 var $58=$3;
 var $59=_hio_read16b($58);
 var $60=$i;
 var $61=(($ih+20)|0);
 var $62=(($61+((($60)*(30))&-1))|0);
 var $63=(($62+26)|0);
 HEAP16[(($63)>>1)]=$59;
 var $64=$3;
 var $65=_hio_read16b($64);
 var $66=$i;
 var $67=(($ih+20)|0);
 var $68=(($67+((($66)*(30))&-1))|0);
 var $69=(($68+28)|0);
 HEAP16[(($69)>>1)]=$65;
 var $70=$i;
 var $71=(($ih+20)|0);
 var $72=(($71+((($70)*(30))&-1))|0);
 var $73=(($72+22)|0);
 var $74=HEAP16[(($73)>>1)];
 var $75=($74&65535);
 var $76=($75<<1);
 var $77=$smp_size;
 var $78=((($77)+($76))|0);
 $smp_size=$78;
 label=6;break;
 case 6: 
 var $80=$i;
 var $81=((($80)+(1))|0);
 $i=$81;
 label=4;break;
 case 7: 
 var $83=$3;
 var $84=_hio_read8($83);
 var $85=(($ih+950)|0);
 HEAP8[($85)]=$84;
 var $86=$3;
 var $87=_hio_read8($86);
 var $88=(($ih+951)|0);
 HEAP8[($88)]=$87;
 var $89=(($ih+952)|0);
 var $90=$89;
 var $91=$3;
 var $92=_hio_read($90,128,1,$91);
 var $93=(($ih+1080)|0);
 var $94=$93;
 var $95=$3;
 var $96=_hio_read($94,4,1,$95);
 var $97=(($ih+950)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$mod;
 var $101=(($100+156)|0);
 HEAP32[(($101)>>2)]=$99;
 var $102=$mod;
 var $103=(($102+952)|0);
 var $104=$103;
 var $105=(($ih+952)|0);
 var $106=$105;
 var $107=$mod;
 var $108=(($107+156)|0);
 var $109=HEAP32[(($108)>>2)];
 assert($109 % 1 === 0);(_memcpy($104, $106, $109)|0);
 $i=0;
 label=8;break;
 case 8: 
 var $111=$i;
 var $112=$mod;
 var $113=(($112+156)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($111|0)<($114|0);
 if($115){label=9;break;}else{label=13;break;}
 case 9: 
 var $117=$i;
 var $118=$mod;
 var $119=(($118+952)|0);
 var $120=(($119+$117)|0);
 var $121=HEAP8[($120)];
 var $122=($121&255);
 var $123=$mod;
 var $124=(($123+128)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($122|0)>($125|0);
 if($126){label=10;break;}else{label=11;break;}
 case 10: 
 var $128=$i;
 var $129=$mod;
 var $130=(($129+952)|0);
 var $131=(($130+$128)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=$mod;
 var $135=(($134+128)|0);
 HEAP32[(($135)>>2)]=$133;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $138=$i;
 var $139=((($138)+(1))|0);
 $i=$139;
 label=8;break;
 case 13: 
 var $141=$mod;
 var $142=(($141+128)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=((($143)+(1))|0);
 HEAP32[(($142)>>2)]=$144;
 var $145=$mod;
 var $146=(($145+136)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=$mod;
 var $149=(($148+128)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(Math_imul($147,$150)|0);
 var $152=$mod;
 var $153=(($152+132)|0);
 HEAP32[(($153)>>2)]=$151;
 var $154=$mod;
 var $155=(($154)|0);
 var $156=(($155)|0);
 var $157=(($ih)|0);
 var $158=(($157)|0);
 var $159=_strlcpy($156,$158,20);
 var $160=$2;
 _set_type($160,24016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $167=$mod;
 var $168=_instrument_init($167);
 var $169=($168|0)<0;
 if($169){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=62;break;
 case 21: 
 $i=0;
 label=22;break;
 case 22: 
 var $173=$i;
 var $174=$mod;
 var $175=(($174+140)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($173|0)<($176|0);
 if($177){label=23;break;}else{label=31;break;}
 case 23: 
 var $179=$mod;
 var $180=$i;
 var $181=_subinstrument_alloc($179,$180,1);
 var $182=($181|0)<0;
 if($182){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=62;break;
 case 25: 
 var $185=$i;
 var $186=(($ih+20)|0);
 var $187=(($186+((($185)*(30))&-1))|0);
 var $188=(($187+22)|0);
 var $189=HEAP16[(($188)>>1)];
 var $190=($189&65535);
 var $191=($190<<1);
 var $192=$i;
 var $193=$mod;
 var $194=(($193+180)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+((($192)*(52))&-1))|0);
 var $197=(($196+32)|0);
 HEAP32[(($197)>>2)]=$191;
 var $198=$i;
 var $199=$mod;
 var $200=(($199+180)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+((($198)*(52))&-1))|0);
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=$i;
 var $206=(($ih+20)|0);
 var $207=(($206+((($205)*(30))&-1))|0);
 var $208=(($207+28)|0);
 var $209=HEAP16[(($208)>>1)];
 var $210=($209&65535);
 var $211=($210<<1);
 var $212=((($204)+($211))|0);
 var $213=$i;
 var $214=$mod;
 var $215=(($214+180)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+((($213)*(52))&-1))|0);
 var $218=(($217+40)|0);
 HEAP32[(($218)>>2)]=$212;
 var $219=$i;
 var $220=(($ih+20)|0);
 var $221=(($220+((($219)*(30))&-1))|0);
 var $222=(($221+28)|0);
 var $223=HEAP16[(($222)>>1)];
 var $224=($223&65535);
 var $225=($224|0)>1;
 var $226=($225?2:0);
 var $227=$i;
 var $228=$mod;
 var $229=(($228+180)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+((($227)*(52))&-1))|0);
 var $232=(($231+44)|0);
 HEAP32[(($232)>>2)]=$226;
 var $233=$i;
 var $234=$mod;
 var $235=(($234+176)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+((($233)*(764))&-1))|0);
 var $238=(($237+756)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239)|0);
 var $241=(($240+16)|0);
 HEAP32[(($241)>>2)]=0;
 var $242=$i;
 var $243=(($ih+20)|0);
 var $244=(($243+((($242)*(30))&-1))|0);
 var $245=(($244+25)|0);
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=$i;
 var $249=$mod;
 var $250=(($249+176)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(($251+((($248)*(764))&-1))|0);
 var $253=(($252+756)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254)|0);
 var $256=(($255)|0);
 HEAP32[(($256)>>2)]=$247;
 var $257=$i;
 var $258=$mod;
 var $259=(($258+176)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($260+((($257)*(764))&-1))|0);
 var $262=(($261+756)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263)|0);
 var $265=(($264+8)|0);
 HEAP32[(($265)>>2)]=128;
 var $266=$i;
 var $267=$i;
 var $268=$mod;
 var $269=(($268+176)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+((($267)*(764))&-1))|0);
 var $272=(($271+756)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273)|0);
 var $275=(($274+40)|0);
 HEAP32[(($275)>>2)]=$266;
 var $276=$i;
 var $277=$mod;
 var $278=(($277+176)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+((($276)*(764))&-1))|0);
 var $281=(($280+40)|0);
 HEAP32[(($281)>>2)]=4095;
 var $282=$i;
 var $283=$mod;
 var $284=(($283+180)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($285+((($282)*(52))&-1))|0);
 var $287=(($286+32)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)>0;
 if($289){label=26;break;}else{label=27;break;}
 case 26: 
 var $291=$i;
 var $292=$mod;
 var $293=(($292+176)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=(($294+((($291)*(764))&-1))|0);
 var $296=(($295+36)|0);
 HEAP32[(($296)>>2)]=1;
 label=27;break;
 case 27: 
 var $298=$mod;
 var $299=$i;
 var $300=$i;
 var $301=(($ih+20)|0);
 var $302=(($301+((($300)*(30))&-1))|0);
 var $303=(($302)|0);
 var $304=(($303)|0);
 var $305=_instrument_name($298,$299,$304,20);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $309=$i;
 var $310=((($309)+(1))|0);
 $i=$310;
 label=22;break;
 case 31: 
 var $312=$mod;
 var $313=_pattern_init($312);
 var $314=($313|0)<0;
 if($314){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=62;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 $i=0;
 label=36;break;
 case 36: 
 var $320=$i;
 var $321=$mod;
 var $322=(($321+128)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=($320|0)<($323|0);
 if($324){label=37;break;}else{label=51;break;}
 case 37: 
 var $326=$mod;
 var $327=$i;
 var $328=_pattern_tracks_alloc($326,$327,64);
 var $329=($328|0)<0;
 if($329){label=38;break;}else{label=39;break;}
 case 38: 
 $1=-1;
 label=62;break;
 case 39: 
 $j=0;
 label=40;break;
 case 40: 
 var $333=$j;
 var $334=($333|0)<256;
 if($334){label=41;break;}else{label=49;break;}
 case 41: 
 var $336=$j;
 var $337=$336>>2;
 var $338=$j;
 var $339=$338&3;
 var $340=$i;
 var $341=$2;
 var $342=(($341)|0);
 var $343=(($342+168)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=(($344+($340<<2))|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($346+4)|0);
 var $348=(($347+($339<<2))|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=$2;
 var $351=(($350)|0);
 var $352=(($351+172)|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=(($353+($349<<2))|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+4)|0);
 var $357=(($356+($337<<3))|0);
 $event=$357;
 var $358=(($ims_event)|0);
 var $359=$3;
 var $360=_hio_read($358,1,3,$359);
 var $361=(($ims_event)|0);
 var $362=HEAP8[($361)];
 var $363=($362&255);
 var $364=$363&63;
 var $365=(($364)&255);
 var $366=$event;
 var $367=(($366)|0);
 HEAP8[($367)]=$365;
 var $368=$event;
 var $369=(($368)|0);
 var $370=HEAP8[($369)];
 var $371=($370&255);
 var $372=($371|0)!=0;
 if($372){label=42;break;}else{label=44;break;}
 case 42: 
 var $374=$event;
 var $375=(($374)|0);
 var $376=HEAP8[($375)];
 var $377=($376&255);
 var $378=($377|0)!=63;
 if($378){label=43;break;}else{label=44;break;}
 case 43: 
 var $380=$xpo;
 var $381=((($380)+(12))|0);
 var $382=$event;
 var $383=(($382)|0);
 var $384=HEAP8[($383)];
 var $385=($384&255);
 var $386=((($385)+($381))|0);
 var $387=(($386)&255);
 HEAP8[($383)]=$387;
 label=45;break;
 case 44: 
 var $389=$event;
 var $390=(($389)|0);
 HEAP8[($390)]=0;
 label=45;break;
 case 45: 
 var $392=(($ims_event)|0);
 var $393=HEAP8[($392)];
 var $394=($393&255);
 var $395=$394&64;
 var $396=$395>>2;
 var $397=(($ims_event+1)|0);
 var $398=HEAP8[($397)];
 var $399=($398&255);
 var $400=$399&240;
 var $401=$400>>4;
 var $402=$396|$401;
 var $403=(($402)&255);
 var $404=$event;
 var $405=(($404+1)|0);
 HEAP8[($405)]=$403;
 var $406=(($ims_event+1)|0);
 var $407=HEAP8[($406)];
 var $408=($407&255);
 var $409=$408&15;
 var $410=(($409)&255);
 var $411=$event;
 var $412=(($411+3)|0);
 HEAP8[($412)]=$410;
 var $413=(($ims_event+2)|0);
 var $414=HEAP8[($413)];
 var $415=$event;
 var $416=(($415+4)|0);
 HEAP8[($416)]=$414;
 var $417=$event;
 _disable_continue_fx($417);
 var $418=$event;
 var $419=(($418+3)|0);
 var $420=HEAP8[($419)];
 var $421=($420&255);
 var $422=($421|0)==13;
 if($422){label=46;break;}else{label=47;break;}
 case 46: 
 var $424=$event;
 var $425=(($424+4)|0);
 var $426=HEAP8[($425)];
 var $427=($426&255);
 var $428=(((($427|0))/(10))&-1);
 var $429=$428<<4;
 var $430=$event;
 var $431=(($430+4)|0);
 var $432=HEAP8[($431)];
 var $433=($432&255);
 var $434=(((($433|0))%(10))&-1);
 var $435=$429|$434;
 var $436=(($435)&255);
 var $437=$event;
 var $438=(($437+4)|0);
 HEAP8[($438)]=$436;
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $441=$j;
 var $442=((($441)+(1))|0);
 $j=$442;
 label=40;break;
 case 49: 
 label=50;break;
 case 50: 
 var $445=$i;
 var $446=((($445)+(1))|0);
 $i=$446;
 label=36;break;
 case 51: 
 var $448=$2;
 var $449=(($448+1280)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=$450|8192;
 HEAP32[(($449)>>2)]=$451;
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 $i=0;
 label=54;break;
 case 54: 
 var $455=$i;
 var $456=$mod;
 var $457=(($456+144)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=($455|0)<($458|0);
 if($459){label=55;break;}else{label=61;break;}
 case 55: 
 var $461=$i;
 var $462=$mod;
 var $463=(($462+180)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=(($464+((($461)*(52))&-1))|0);
 var $466=(($465+32)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=($467|0)!=0;
 if($468){label=57;break;}else{label=56;break;}
 case 56: 
 label=60;break;
 case 57: 
 var $471=$2;
 var $472=$3;
 var $473=$i;
 var $474=$mod;
 var $475=(($474+180)|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=(($476+((($473)*(52))&-1))|0);
 var $478=_load_sample($471,$472,0,$477,0);
 var $479=($478|0)<0;
 if($479){label=58;break;}else{label=59;break;}
 case 58: 
 $1=-1;
 label=62;break;
 case 59: 
 label=60;break;
 case 60: 
 var $483=$i;
 var $484=((($483)+(1))|0);
 $i=$484;
 label=54;break;
 case 61: 
 $1=0;
 label=62;break;
 case 62: 
 var $487=$1;
 STACKTOP=sp;return $487;
  default: assert(0, "bad label: " + label);
 }
}
function _it_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1229803597;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,26);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _it_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3040)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $r;
 var $c;
 var $i;
 var $j;
 var $k;
 var $pat_len;
 var $event;
 var $dummy=sp;
 var $lastevent=(sp)+(8);
 var $ifh=(sp)+(520);
 var $i1h=(sp)+(712);
 var $i2h=(sp)+(1272);
 var $ish=(sp)+(1576);
 var $env=(sp)+(1656);
 var $b;
 var $mask=(sp)+(1768);
 var $max_ch;
 var $inst_map=(sp)+(1832);
 var $inst_rmap=(sp)+(2312);
 var $tracker_name=(sp)+(2800);
 var $pp_ins;
 var $pp_smp;
 var $pp_pat;
 var $arpeggio_val=(sp)+(2840);
 var $last_fxp=(sp)+(2904);
 var $dca2nna=(sp)+(2968);
 var $new_fx;
 var $xxc;
 var $cwtv;
 var $version=(sp)+(2984);
 var $version_sec=(sp)+(3032);
 var $xxi;
 var $sub;
 var $sub1;
 var $xxs;
 var $sub2;
 var $cvt;
 var $buf;
 var $ret;
 var $tnum;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$dca2nna;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[((6128)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((6132)>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((6136)>>2)];
 label=2;break;
 case 2: 
 var $9=$3;
 var $10=$4;
 var $11=_hio_seek($9,$10,0);
 label=3;break;
 case 3: 
 var $13=$3;
 var $14=_hio_read32b($13);
 var $15=(($ifh+4)|0);
 var $16=$15;
 var $17=$3;
 var $18=_hio_read($16,26,1,$17);
 var $19=$3;
 var $20=_hio_read8($19);
 var $21=(($ifh+30)|0);
 HEAP8[($21)]=$20;
 var $22=$3;
 var $23=_hio_read8($22);
 var $24=(($ifh+31)|0);
 HEAP8[($24)]=$23;
 var $25=$3;
 var $26=_hio_read16l($25);
 var $27=(($ifh+32)|0);
 HEAP16[(($27)>>1)]=$26;
 var $28=$3;
 var $29=_hio_read16l($28);
 var $30=(($ifh+34)|0);
 HEAP16[(($30)>>1)]=$29;
 var $31=$3;
 var $32=_hio_read16l($31);
 var $33=(($ifh+36)|0);
 HEAP16[(($33)>>1)]=$32;
 var $34=$3;
 var $35=_hio_read16l($34);
 var $36=(($ifh+38)|0);
 HEAP16[(($36)>>1)]=$35;
 var $37=$3;
 var $38=_hio_read16l($37);
 var $39=(($ifh+40)|0);
 HEAP16[(($39)>>1)]=$38;
 var $40=$3;
 var $41=_hio_read16l($40);
 var $42=(($ifh+42)|0);
 HEAP16[(($42)>>1)]=$41;
 var $43=$3;
 var $44=_hio_read16l($43);
 var $45=(($ifh+44)|0);
 HEAP16[(($45)>>1)]=$44;
 var $46=$3;
 var $47=_hio_read16l($46);
 var $48=(($ifh+46)|0);
 HEAP16[(($48)>>1)]=$47;
 var $49=$3;
 var $50=_hio_read8($49);
 var $51=(($ifh+48)|0);
 HEAP8[($51)]=$50;
 var $52=$3;
 var $53=_hio_read8($52);
 var $54=(($ifh+49)|0);
 HEAP8[($54)]=$53;
 var $55=$3;
 var $56=_hio_read8($55);
 var $57=(($ifh+50)|0);
 HEAP8[($57)]=$56;
 var $58=$3;
 var $59=_hio_read8($58);
 var $60=(($ifh+51)|0);
 HEAP8[($60)]=$59;
 var $61=$3;
 var $62=_hio_read8($61);
 var $63=(($ifh+52)|0);
 HEAP8[($63)]=$62;
 var $64=$3;
 var $65=_hio_read8($64);
 var $66=(($ifh+53)|0);
 HEAP8[($66)]=$65;
 var $67=$3;
 var $68=_hio_read16l($67);
 var $69=(($ifh+54)|0);
 HEAP16[(($69)>>1)]=$68;
 var $70=$3;
 var $71=_hio_read32l($70);
 var $72=(($ifh+56)|0);
 HEAP32[(($72)>>2)]=$71;
 var $73=$3;
 var $74=_hio_read32l($73);
 var $75=(($ifh+60)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=(($ifh+64)|0);
 var $77=$76;
 var $78=$3;
 var $79=_hio_read($77,64,1,$78);
 var $80=(($ifh+128)|0);
 var $81=$80;
 var $82=$3;
 var $83=_hio_read($81,64,1,$82);
 var $84=$mod;
 var $85=(($84)|0);
 var $86=(($85)|0);
 var $87=(($ifh+4)|0);
 var $88=(($87)|0);
 var $89=_strlcpy($86,$88,64);
 var $90=(($ifh+32)|0);
 var $91=HEAP16[(($90)>>1)];
 var $92=($91&65535);
 var $93=$mod;
 var $94=(($93+156)|0);
 HEAP32[(($94)>>2)]=$92;
 var $95=(($ifh+34)|0);
 var $96=HEAP16[(($95)>>1)];
 var $97=($96&65535);
 var $98=$mod;
 var $99=(($98+140)|0);
 HEAP32[(($99)>>2)]=$97;
 var $100=(($ifh+36)|0);
 var $101=HEAP16[(($100)>>1)];
 var $102=($101&65535);
 var $103=$mod;
 var $104=(($103+144)|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=(($ifh+38)|0);
 var $106=HEAP16[(($105)>>1)];
 var $107=($106&65535);
 var $108=$mod;
 var $109=(($108+128)|0);
 HEAP32[(($109)>>2)]=$107;
 var $110=$mod;
 var $111=(($110+140)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)!=0;
 if($113){label=4;break;}else{label=7;break;}
 case 4: 
 var $115=$mod;
 var $116=(($115+140)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=_calloc(4,$117);
 var $119=$118;
 $pp_ins=$119;
 var $120=$pp_ins;
 var $121=($120|0)==0;
 if($121){label=5;break;}else{label=6;break;}
 case 5: 
 label=378;break;
 case 6: 
 label=8;break;
 case 7: 
 $pp_ins=0;
 label=8;break;
 case 8: 
 var $126=$mod;
 var $127=(($126+144)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=_calloc(4,$128);
 var $130=$129;
 $pp_smp=$130;
 var $131=$pp_smp;
 var $132=($131|0)==0;
 if($132){label=9;break;}else{label=10;break;}
 case 9: 
 label=377;break;
 case 10: 
 var $135=$mod;
 var $136=(($135+128)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=_calloc(4,$137);
 var $139=$138;
 $pp_pat=$139;
 var $140=$pp_pat;
 var $141=($140|0)==0;
 if($141){label=11;break;}else{label=12;break;}
 case 11: 
 label=376;break;
 case 12: 
 var $144=(($ifh+50)|0);
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=$mod;
 var $148=(($147+148)|0);
 HEAP32[(($148)>>2)]=$146;
 var $149=(($ifh+51)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 var $152=$mod;
 var $153=(($152+152)|0);
 HEAP32[(($153)>>2)]=$151;
 var $154=(($ifh+44)|0);
 var $155=HEAP16[(($154)>>1)];
 var $156=($155&65535);
 var $157=$156&8;
 var $158=($157|0)!=0;
 if($158){label=13;break;}else{label=14;break;}
 case 13: 
 var $160=$2;
 var $161=(($160+1280)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$162|4096;
 HEAP32[(($161)>>2)]=$163;
 label=14;break;
 case 14: 
 var $165=(($ifh+44)|0);
 var $166=HEAP16[(($165)>>1)];
 var $167=($166&65535);
 var $168=$167&4;
 var $169=($168|0)!=0;
 if($169){label=15;break;}else{label=17;break;}
 case 15: 
 var $171=(($ifh+42)|0);
 var $172=HEAP16[(($171)>>1)];
 var $173=($172&65535);
 var $174=($173|0)>=512;
 if($174){label=16;break;}else{label=17;break;}
 case 16: 
 var $176=$2;
 var $177=(($176+1280)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$178|16384;
 HEAP32[(($177)>>2)]=$179;
 label=17;break;
 case 17: 
 $i=0;
 label=18;break;
 case 18: 
 var $182=$i;
 var $183=($182|0)<64;
 if($183){label=19;break;}else{label=30;break;}
 case 19: 
 var $185=$i;
 var $186=$mod;
 var $187=(($186+184)|0);
 var $188=(($187+((($185)*(12))&-1))|0);
 $xxc=$188;
 var $189=$i;
 var $190=(($ifh+64)|0);
 var $191=(($190+$189)|0);
 var $192=HEAP8[($191)];
 var $193=($192&255);
 var $194=($193|0)==100;
 if($194){label=20;break;}else{label=21;break;}
 case 20: 
 var $196=$i;
 var $197=(($ifh+64)|0);
 var $198=(($197+$196)|0);
 HEAP8[($198)]=32;
 label=21;break;
 case 21: 
 var $200=$i;
 var $201=(($ifh+64)|0);
 var $202=(($201+$200)|0);
 var $203=HEAP8[($202)];
 var $204=($203&255);
 var $205=$204&128;
 var $206=($205|0)!=0;
 if($206){label=22;break;}else{label=23;break;}
 case 22: 
 var $208=$i;
 var $209=(($ifh+128)|0);
 var $210=(($209+$208)|0);
 HEAP8[($210)]=0;
 var $211=$i;
 var $212=$mod;
 var $213=(($212+184)|0);
 var $214=(($213+((($211)*(12))&-1))|0);
 var $215=(($214+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$216|2;
 HEAP32[(($215)>>2)]=$217;
 label=23;break;
 case 23: 
 var $219=(($ifh+44)|0);
 var $220=HEAP16[(($219)>>1)];
 var $221=($220&65535);
 var $222=$221&1;
 var $223=($222|0)!=0;
 if($223){label=24;break;}else{label=27;break;}
 case 24: 
 var $225=$i;
 var $226=(($ifh+64)|0);
 var $227=(($226+$225)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=($229<<7);
 var $231=$230>>5;
 var $232=$xxc;
 var $233=(($232)|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=$xxc;
 var $235=(($234)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=($236|0)>255;
 if($237){label=25;break;}else{label=26;break;}
 case 25: 
 var $239=$xxc;
 var $240=(($239)|0);
 HEAP32[(($240)>>2)]=255;
 label=26;break;
 case 26: 
 label=28;break;
 case 27: 
 var $243=$xxc;
 var $244=(($243)|0);
 HEAP32[(($244)>>2)]=128;
 label=28;break;
 case 28: 
 var $246=$i;
 var $247=(($ifh+128)|0);
 var $248=(($247+$246)|0);
 var $249=HEAP8[($248)];
 var $250=($249&255);
 var $251=$xxc;
 var $252=(($251+4)|0);
 HEAP32[(($252)>>2)]=$250;
 label=29;break;
 case 29: 
 var $254=$i;
 var $255=((($254)+(1))|0);
 $i=$255;
 label=18;break;
 case 30: 
 var $257=$mod;
 var $258=(($257+156)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)<=256;
 if($260){label=31;break;}else{label=32;break;}
 case 31: 
 var $262=$mod;
 var $263=(($262+952)|0);
 var $264=(($263)|0);
 var $265=$mod;
 var $266=(($265+156)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=$3;
 var $269=_hio_read($264,1,$267,$268);
 label=33;break;
 case 32: 
 var $271=$mod;
 var $272=(($271+952)|0);
 var $273=(($272)|0);
 var $274=$3;
 var $275=_hio_read($273,1,256,$274);
 var $276=$3;
 var $277=$mod;
 var $278=(($277+156)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=((($279)-(256))|0);
 var $281=_hio_seek($276,$280,1);
 var $282=$mod;
 var $283=(($282+156)|0);
 HEAP32[(($283)>>2)]=256;
 label=33;break;
 case 33: 
 var $285=(($ifh+44)|0);
 var $286=HEAP16[(($285)>>1)];
 var $287=($286&65535);
 var $288=$287&16;
 var $289=($288|0)!=0;
 var $290=($289?0:1);
 $new_fx=$290;
 $i=0;
 label=34;break;
 case 34: 
 var $292=$i;
 var $293=$mod;
 var $294=(($293+156)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=((($295)-(1))|0);
 var $297=($292|0)<($296|0);
 if($297){label=35;break;}else{label=39;break;}
 case 35: 
 var $299=$i;
 var $300=$mod;
 var $301=(($300+952)|0);
 var $302=(($301+$299)|0);
 var $303=HEAP8[($302)];
 var $304=($303&255);
 var $305=($304|0)==254;
 if($305){label=36;break;}else{label=37;break;}
 case 36: 
 var $307=$i;
 var $308=$mod;
 var $309=(($308+952)|0);
 var $310=(($309+$307)|0);
 var $311=$i;
 var $312=((($311)+(1))|0);
 var $313=$mod;
 var $314=(($313+952)|0);
 var $315=(($314+$312)|0);
 var $316=$mod;
 var $317=(($316+156)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=$i;
 var $320=((($318)-($319))|0);
 var $321=((($320)-(1))|0);
 _memmove($310,$315,$321,1,0);
 var $322=$mod;
 var $323=(($322+156)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=((($324)-(1))|0);
 HEAP32[(($323)>>2)]=$325;
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 var $328=$i;
 var $329=((($328)+(1))|0);
 $i=$329;
 label=34;break;
 case 39: 
 $i=0;
 label=40;break;
 case 40: 
 var $332=$i;
 var $333=$mod;
 var $334=(($333+140)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=($332|0)<($335|0);
 if($336){label=41;break;}else{label=43;break;}
 case 41: 
 var $338=$3;
 var $339=_hio_read32l($338);
 var $340=$i;
 var $341=$pp_ins;
 var $342=(($341+($340<<2))|0);
 HEAP32[(($342)>>2)]=$339;
 label=42;break;
 case 42: 
 var $344=$i;
 var $345=((($344)+(1))|0);
 $i=$345;
 label=40;break;
 case 43: 
 $i=0;
 label=44;break;
 case 44: 
 var $348=$i;
 var $349=$mod;
 var $350=(($349+144)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=($348|0)<($351|0);
 if($352){label=45;break;}else{label=47;break;}
 case 45: 
 var $354=$3;
 var $355=_hio_read32l($354);
 var $356=$i;
 var $357=$pp_smp;
 var $358=(($357+($356<<2))|0);
 HEAP32[(($358)>>2)]=$355;
 label=46;break;
 case 46: 
 var $360=$i;
 var $361=((($360)+(1))|0);
 $i=$361;
 label=44;break;
 case 47: 
 $i=0;
 label=48;break;
 case 48: 
 var $364=$i;
 var $365=$mod;
 var $366=(($365+128)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($364|0)<($367|0);
 if($368){label=49;break;}else{label=51;break;}
 case 49: 
 var $370=$3;
 var $371=_hio_read32l($370);
 var $372=$i;
 var $373=$pp_pat;
 var $374=(($373+($372<<2))|0);
 HEAP32[(($374)>>2)]=$371;
 label=50;break;
 case 50: 
 var $376=$i;
 var $377=((($376)+(1))|0);
 $i=$377;
 label=48;break;
 case 51: 
 var $379=$2;
 var $380=(($379+1264)|0);
 HEAP32[(($380)>>2)]=8363;
 var $381=(($ifh+40)|0);
 var $382=HEAP16[(($381)>>1)];
 var $383=($382&65535);
 var $384=$383>>8;
 switch(($384|0)){case 0:{ label=52;break;}case 1:case 2:{ label=53;break;}case 8:case 127:{ label=86;break;}default:{label=93;break;}}break;
 case 52: 
 var $386=(($tracker_name)|0);
 var $387=_strcpy($386,26776);
 label=106;break;
 case 53: 
 var $389=(($ifh+42)|0);
 var $390=HEAP16[(($389)>>1)];
 var $391=($390&65535);
 var $392=($391|0)==512;
 if($392){label=54;break;}else{label=70;break;}
 case 54: 
 var $394=(($ifh+40)|0);
 var $395=HEAP16[(($394)>>1)];
 var $396=($395&65535);
 var $397=($396|0)==532;
 if($397){label=55;break;}else{label=70;break;}
 case 55: 
 var $399=(($ifh+44)|0);
 var $400=HEAP16[(($399)>>1)];
 var $401=($400&65535);
 var $402=($401|0)==9;
 if($402){label=56;break;}else{label=70;break;}
 case 56: 
 var $404=(($ifh+46)|0);
 var $405=HEAP16[(($404)>>1)];
 var $406=($405&65535);
 var $407=($406|0)==0;
 if($407){label=57;break;}else{label=70;break;}
 case 57: 
 var $409=(($ifh+31)|0);
 var $410=HEAP8[($409)];
 var $411=($410&255);
 var $412=($411|0)==0;
 if($412){label=58;break;}else{label=70;break;}
 case 58: 
 var $414=(($ifh+30)|0);
 var $415=HEAP8[($414)];
 var $416=($415&255);
 var $417=($416|0)==0;
 if($417){label=59;break;}else{label=70;break;}
 case 59: 
 var $419=(($ifh+34)|0);
 var $420=HEAP16[(($419)>>1)];
 var $421=($420&65535);
 var $422=($421|0)==0;
 if($422){label=60;break;}else{label=70;break;}
 case 60: 
 var $424=(($ifh+38)|0);
 var $425=HEAP16[(($424)>>1)];
 var $426=($425&65535);
 var $427=((($426)+(1))|0);
 var $428=(($ifh+32)|0);
 var $429=HEAP16[(($428)>>1)];
 var $430=($429&65535);
 var $431=($427|0)==($430|0);
 if($431){label=61;break;}else{label=70;break;}
 case 61: 
 var $433=(($ifh+48)|0);
 var $434=HEAP8[($433)];
 var $435=($434&255);
 var $436=($435|0)==128;
 if($436){label=62;break;}else{label=70;break;}
 case 62: 
 var $438=(($ifh+49)|0);
 var $439=HEAP8[($438)];
 var $440=($439&255);
 var $441=($440|0)==100;
 if($441){label=63;break;}else{label=70;break;}
 case 63: 
 var $443=(($ifh+50)|0);
 var $444=HEAP8[($443)];
 var $445=($444&255);
 var $446=($445|0)==1;
 if($446){label=64;break;}else{label=70;break;}
 case 64: 
 var $448=(($ifh+52)|0);
 var $449=HEAP8[($448)];
 var $450=($449&255);
 var $451=($450|0)==128;
 if($451){label=65;break;}else{label=70;break;}
 case 65: 
 var $453=(($ifh+53)|0);
 var $454=HEAP8[($453)];
 var $455=($454&255);
 var $456=($455|0)==0;
 if($456){label=66;break;}else{label=70;break;}
 case 66: 
 var $458=(($ifh+54)|0);
 var $459=HEAP16[(($458)>>1)];
 var $460=($459&65535);
 var $461=($460|0)==0;
 if($461){label=67;break;}else{label=70;break;}
 case 67: 
 var $463=(($ifh+56)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=($464|0)==0;
 if($465){label=68;break;}else{label=70;break;}
 case 68: 
 var $467=(($ifh+60)|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 if($469){label=69;break;}else{label=70;break;}
 case 69: 
 var $471=(($tracker_name)|0);
 var $472=_strcpy($471,24864);
 label=85;break;
 case 70: 
 var $474=(($ifh+42)|0);
 var $475=HEAP16[(($474)>>1)];
 var $476=($475&65535);
 var $477=($476|0)==512;
 if($477){label=71;break;}else{label=73;break;}
 case 71: 
 var $479=(($ifh+40)|0);
 var $480=HEAP16[(($479)>>1)];
 var $481=($480&65535);
 var $482=($481|0)==535;
 if($482){label=72;break;}else{label=73;break;}
 case 72: 
 var $484=(($tracker_name)|0);
 var $485=_strcpy($484,23680);
 var $486=(($ifh+44)|0);
 var $487=HEAP16[(($486)>>1)];
 var $488=($487&65535);
 var $489=$488&4;
 var $490=($489|0)!=0;
 var $491=($490?532:256);
 var $492=(($491)&65535);
 var $493=(($ifh+42)|0);
 HEAP16[(($493)>>1)]=$492;
 label=84;break;
 case 73: 
 var $495=(($ifh+40)|0);
 var $496=HEAP16[(($495)>>1)];
 var $497=($496&65535);
 var $498=($497|0)==534;
 if($498){label=74;break;}else{label=75;break;}
 case 74: 
 var $500=(($tracker_name)|0);
 var $501=_strcpy($500,22992);
 label=83;break;
 case 75: 
 var $503=(($ifh+40)|0);
 var $504=HEAP16[(($503)>>1)];
 var $505=($504&65535);
 var $506=($505|0)==535;
 if($506){label=76;break;}else{label=77;break;}
 case 76: 
 var $508=(($tracker_name)|0);
 var $509=_strcpy($508,22264);
 label=82;break;
 case 77: 
 var $511=(($ifh+40)|0);
 var $512=HEAP16[(($511)>>1)];
 var $513=($512&65535);
 var $514=($513|0)==532;
 if($514){label=78;break;}else{label=80;break;}
 case 78: 
 var $516=(($ifh+60)|0);
 var $517=$516;
 var $518=_memcmp($517,21592,4);
 var $519=($518|0)!=0;
 if($519){label=80;break;}else{label=79;break;}
 case 79: 
 var $521=(($tracker_name)|0);
 var $522=_strcpy($521,21192);
 label=81;break;
 case 80: 
 var $524=(($tracker_name)|0);
 var $525=(($ifh+40)|0);
 var $526=HEAP16[(($525)>>1)];
 var $527=($526&65535);
 var $528=$527&3840;
 var $529=$528>>8;
 var $530=(($ifh+40)|0);
 var $531=HEAP16[(($530)>>1)];
 var $532=($531&65535);
 var $533=$532&255;
 var $534=_snprintf($524,40,20816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$529,HEAP32[(((tempVarArgs)+(8))>>2)]=$533,tempVarArgs)); STACKTOP=tempVarArgs;
 label=81;break;
 case 81: 
 label=82;break;
 case 82: 
 label=83;break;
 case 83: 
 label=84;break;
 case 84: 
 label=85;break;
 case 85: 
 label=106;break;
 case 86: 
 var $541=(($ifh+40)|0);
 var $542=HEAP16[(($541)>>1)];
 var $543=($542&65535);
 var $544=($543|0)==2184;
 if($544){label=87;break;}else{label=88;break;}
 case 87: 
 var $546=(($tracker_name)|0);
 var $547=_strcpy($546,20544);
 label=92;break;
 case 88: 
 var $549=(($ifh+40)|0);
 var $550=HEAP16[(($549)>>1)];
 var $551=($550&65535);
 var $552=($551|0)==32767;
 if($552){label=89;break;}else{label=90;break;}
 case 89: 
 var $554=(($tracker_name)|0);
 var $555=_strcpy($554,27520);
 label=91;break;
 case 90: 
 var $557=(($tracker_name)|0);
 var $558=(($ifh+40)|0);
 var $559=HEAP16[(($558)>>1)];
 var $560=($559&65535);
 var $561=_snprintf($557,40,27264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$560,tempVarArgs)); STACKTOP=tempVarArgs;
 label=91;break;
 case 91: 
 label=92;break;
 case 92: 
 label=106;break;
 case 93: 
 var $565=(($ifh+40)|0);
 var $566=HEAP16[(($565)>>1)];
 var $567=($566&65535);
 var $568=$567>>12;
 if(($568|0)==5){ label=100;break;}else if(($568|0)==6){ label=103;break;}else if(($568|0)==1){ label=94;break;}else{label=104;break;}
 case 94: 
 var $570=(($ifh+40)|0);
 var $571=HEAP16[(($570)>>1)];
 var $572=($571&65535);
 var $573=$572&4095;
 var $574=(($573)&65535);
 $cwtv=$574;
 var $575=$cwtv;
 var $576=($575&65535);
 var $577=($576|0)>80;
 if($577){label=95;break;}else{label=98;break;}
 case 95: 
 var $579=$cwtv;
 var $580=($579&65535);
 var $581=((($580)-(80))|0);
 var $582=((($581)*(86400))&-1);
 var $583=((($582)+(1254355200))|0);
 HEAP32[(($version_sec)>>2)]=$583;
 var $584=_localtime_r($version_sec,$version);
 var $585=($584|0)!=0;
 if($585){label=96;break;}else{label=97;break;}
 case 96: 
 var $587=(($tracker_name)|0);
 var $588=(($version+20)|0);
 var $589=HEAP32[(($588)>>2)];
 var $590=((($589)+(1900))|0);
 var $591=(($version+16)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=((($592)+(1))|0);
 var $594=(($version+12)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=_snprintf($587,40,26960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$590,HEAP32[(((tempVarArgs)+(8))>>2)]=$593,HEAP32[(((tempVarArgs)+(16))>>2)]=$595,tempVarArgs)); STACKTOP=tempVarArgs;
 label=97;break;
 case 97: 
 label=99;break;
 case 98: 
 var $599=(($tracker_name)|0);
 var $600=$cwtv;
 var $601=($600&65535);
 var $602=_snprintf($599,40,26728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$601,tempVarArgs)); STACKTOP=tempVarArgs;
 label=99;break;
 case 99: 
 label=105;break;
 case 100: 
 var $605=(($tracker_name)|0);
 var $606=(($ifh+40)|0);
 var $607=HEAP16[(($606)>>1)];
 var $608=($607&65535);
 var $609=$608&3840;
 var $610=$609>>8;
 var $611=(($ifh+40)|0);
 var $612=HEAP16[(($611)>>1)];
 var $613=($612&65535);
 var $614=$613&255;
 var $615=_snprintf($605,40,26440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$610,HEAP32[(((tempVarArgs)+(8))>>2)]=$614,tempVarArgs)); STACKTOP=tempVarArgs;
 var $616=(($ifh+60)|0);
 var $617=$616;
 var $618=_memcmp($617,26184,4);
 var $619=($618|0)!=0;
 if($619){label=101;break;}else{label=102;break;}
 case 101: 
 var $621=(($tracker_name)|0);
 var $622=_strlcat($621,25824,40);
 label=102;break;
 case 102: 
 label=105;break;
 case 103: 
 var $625=(($tracker_name)|0);
 var $626=(($ifh+40)|0);
 var $627=HEAP16[(($626)>>1)];
 var $628=($627&65535);
 var $629=$628&3840;
 var $630=$629>>8;
 var $631=(($ifh+40)|0);
 var $632=HEAP16[(($631)>>1)];
 var $633=($632&65535);
 var $634=$633&255;
 var $635=_snprintf($625,40,25664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$630,HEAP32[(((tempVarArgs)+(8))>>2)]=$634,tempVarArgs)); STACKTOP=tempVarArgs;
 label=105;break;
 case 104: 
 var $637=(($tracker_name)|0);
 var $638=(($ifh+40)|0);
 var $639=HEAP16[(($638)>>1)];
 var $640=($639&65535);
 var $641=_snprintf($637,40,27264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$640,tempVarArgs)); STACKTOP=tempVarArgs;
 label=105;break;
 case 105: 
 label=106;break;
 case 106: 
 var $644=$2;
 var $645=(($tracker_name)|0);
 var $646=(($ifh+42)|0);
 var $647=HEAP16[(($646)>>1)];
 var $648=($647&65535);
 var $649=$648>>8;
 var $650=(($ifh+42)|0);
 var $651=HEAP16[(($650)>>1)];
 var $652=($651&65535);
 var $653=$652&255;
 _set_type($644,25536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$645,HEAP32[(((tempVarArgs)+(8))>>2)]=$649,HEAP32[(((tempVarArgs)+(16))>>2)]=$653,tempVarArgs)); STACKTOP=tempVarArgs;
 label=107;break;
 case 107: 
 label=108;break;
 case 108: 
 label=109;break;
 case 109: 
 label=110;break;
 case 110: 
 label=111;break;
 case 111: 
 label=112;break;
 case 112: 
 label=113;break;
 case 113: 
 label=114;break;
 case 114: 
 var $662=(($ifh+44)|0);
 var $663=HEAP16[(($662)>>1)];
 var $664=($663&65535);
 var $665=$664^-1;
 var $666=$665&4;
 var $667=($666|0)!=0;
 if($667){label=115;break;}else{label=116;break;}
 case 115: 
 var $669=$mod;
 var $670=(($669+144)|0);
 var $671=HEAP32[(($670)>>2)];
 var $672=$mod;
 var $673=(($672+140)|0);
 HEAP32[(($673)>>2)]=$671;
 label=116;break;
 case 116: 
 var $675=(($ifh+46)|0);
 var $676=HEAP16[(($675)>>1)];
 var $677=($676&65535);
 var $678=$677&1;
 var $679=($678|0)!=0;
 if($679){label=117;break;}else{label=133;break;}
 case 117: 
 var $681=(($ifh+54)|0);
 var $682=HEAP16[(($681)>>1)];
 var $683=($682&65535);
 var $684=((($683)+(1))|0);
 var $685=_malloc($684);
 var $686=$2;
 var $687=(($686+1220)|0);
 HEAP32[(($687)>>2)]=$685;
 var $688=($685|0)==0;
 if($688){label=118;break;}else{label=119;break;}
 case 118: 
 label=375;break;
 case 119: 
 var $691=$3;
 var $692=_hio_tell($691);
 $i=$692;
 var $693=$3;
 var $694=$4;
 var $695=(($ifh+56)|0);
 var $696=HEAP32[(($695)>>2)];
 var $697=((($694)+($696))|0);
 var $698=_hio_seek($693,$697,0);
 label=120;break;
 case 120: 
 label=121;break;
 case 121: 
 $j=0;
 label=122;break;
 case 122: 
 var $702=$j;
 var $703=(($ifh+54)|0);
 var $704=HEAP16[(($703)>>1)];
 var $705=($704&65535);
 var $706=($702|0)<($705|0);
 if($706){label=123;break;}else{label=132;break;}
 case 123: 
 var $708=$3;
 var $709=_hio_read8($708);
 $b=$709;
 var $710=$b;
 var $711=($710&255);
 var $712=($711|0)==13;
 if($712){label=124;break;}else{label=125;break;}
 case 124: 
 $b=10;
 label=125;break;
 case 125: 
 var $715=$b;
 var $716=($715&255);
 var $717=($716|0)<32;
 if($717){label=127;break;}else{label=126;break;}
 case 126: 
 var $719=$b;
 var $720=($719&255);
 var $721=($720|0)>127;
 if($721){label=127;break;}else{label=130;break;}
 case 127: 
 var $723=$b;
 var $724=($723&255);
 var $725=($724|0)!=10;
 if($725){label=128;break;}else{label=130;break;}
 case 128: 
 var $727=$b;
 var $728=($727&255);
 var $729=($728|0)!=9;
 if($729){label=129;break;}else{label=130;break;}
 case 129: 
 $b=46;
 label=130;break;
 case 130: 
 var $732=$b;
 var $733=$j;
 var $734=$2;
 var $735=(($734+1220)|0);
 var $736=HEAP32[(($735)>>2)];
 var $737=(($736+$733)|0);
 HEAP8[($737)]=$732;
 label=131;break;
 case 131: 
 var $739=$j;
 var $740=((($739)+(1))|0);
 $j=$740;
 label=122;break;
 case 132: 
 var $742=$j;
 var $743=$2;
 var $744=(($743+1220)|0);
 var $745=HEAP32[(($744)>>2)];
 var $746=(($745+$742)|0);
 HEAP8[($746)]=0;
 var $747=$3;
 var $748=$i;
 var $749=_hio_seek($747,$748,0);
 label=133;break;
 case 133: 
 var $751=$mod;
 var $752=_instrument_init($751);
 var $753=($752|0)<0;
 if($753){label=134;break;}else{label=135;break;}
 case 134: 
 label=375;break;
 case 135: 
 label=136;break;
 case 136: 
 label=137;break;
 case 137: 
 $i=0;
 label=138;break;
 case 138: 
 var $759=$i;
 var $760=$mod;
 var $761=(($760+140)|0);
 var $762=HEAP32[(($761)>>2)];
 var $763=($759|0)<($762|0);
 if($763){label=139;break;}else{label=240;break;}
 case 139: 
 var $765=$i;
 var $766=$mod;
 var $767=(($766+176)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($768+((($765)*(764))&-1))|0);
 $xxi=$769;
 var $770=(($ifh+44)|0);
 var $771=HEAP16[(($770)>>1)];
 var $772=($771&65535);
 var $773=$772&4;
 var $774=($773|0)!=0;
 if($774){label=140;break;}else{label=195;break;}
 case 140: 
 var $776=(($ifh+42)|0);
 var $777=HEAP16[(($776)>>1)];
 var $778=($777&65535);
 var $779=($778|0)>=512;
 if($779){label=141;break;}else{label=195;break;}
 case 141: 
 var $781=$3;
 var $782=$4;
 var $783=$i;
 var $784=$pp_ins;
 var $785=(($784+($783<<2))|0);
 var $786=HEAP32[(($785)>>2)];
 var $787=((($782)+($786))|0);
 var $788=_hio_seek($781,$787,0);
 var $789=($788|0)!=0;
 if($789){label=142;break;}else{label=143;break;}
 case 142: 
 label=375;break;
 case 143: 
 var $792=$3;
 var $793=_hio_read32b($792);
 var $794=(($i2h)|0);
 HEAP32[(($794)>>2)]=$793;
 var $795=(($i2h+4)|0);
 var $796=$795;
 var $797=$3;
 var $798=_hio_read($796,12,1,$797);
 var $799=$3;
 var $800=_hio_read8($799);
 var $801=(($i2h+16)|0);
 HEAP8[($801)]=$800;
 var $802=$3;
 var $803=_hio_read8($802);
 var $804=(($i2h+17)|0);
 HEAP8[($804)]=$803;
 var $805=$3;
 var $806=_hio_read8($805);
 var $807=(($i2h+18)|0);
 HEAP8[($807)]=$806;
 var $808=$3;
 var $809=_hio_read8($808);
 var $810=(($i2h+19)|0);
 HEAP8[($810)]=$809;
 var $811=$3;
 var $812=_hio_read16l($811);
 var $813=(($i2h+20)|0);
 HEAP16[(($813)>>1)]=$812;
 var $814=$3;
 var $815=_hio_read8($814);
 var $816=(($i2h+22)|0);
 HEAP8[($816)]=$815;
 var $817=$3;
 var $818=_hio_read8($817);
 var $819=(($i2h+23)|0);
 HEAP8[($819)]=$818;
 var $820=$3;
 var $821=_hio_read8($820);
 var $822=(($i2h+24)|0);
 HEAP8[($822)]=$821;
 var $823=$3;
 var $824=_hio_read8($823);
 var $825=(($i2h+25)|0);
 HEAP8[($825)]=$824;
 var $826=$3;
 var $827=_hio_read8($826);
 var $828=(($i2h+26)|0);
 HEAP8[($828)]=$827;
 var $829=$3;
 var $830=_hio_read8($829);
 var $831=(($i2h+27)|0);
 HEAP8[($831)]=$830;
 var $832=$3;
 var $833=_hio_read16l($832);
 var $834=(($i2h+28)|0);
 HEAP16[(($834)>>1)]=$833;
 var $835=$3;
 var $836=_hio_read8($835);
 var $837=(($i2h+30)|0);
 HEAP8[($837)]=$836;
 var $838=$3;
 var $839=_hio_read8($838);
 var $840=(($i2h+31)|0);
 HEAP8[($840)]=$839;
 var $841=(($i2h+32)|0);
 var $842=$841;
 var $843=$3;
 var $844=_hio_read($842,26,1,$843);
 var $845=(($i2h+32)|0);
 var $846=(($845)|0);
 _fix_name($846,26);
 var $847=$3;
 var $848=_hio_read8($847);
 var $849=(($i2h+58)|0);
 HEAP8[($849)]=$848;
 var $850=$3;
 var $851=_hio_read8($850);
 var $852=(($i2h+59)|0);
 HEAP8[($852)]=$851;
 var $853=$3;
 var $854=_hio_read8($853);
 var $855=(($i2h+60)|0);
 HEAP8[($855)]=$854;
 var $856=$3;
 var $857=_hio_read8($856);
 var $858=(($i2h+61)|0);
 HEAP8[($858)]=$857;
 var $859=$3;
 var $860=_hio_read16l($859);
 var $861=(($i2h+62)|0);
 HEAP16[(($861)>>1)]=$860;
 var $862=(($i2h+64)|0);
 var $863=$862;
 var $864=$3;
 var $865=_hio_read($863,240,1,$864);
 var $866=$xxi;
 var $867=(($866)|0);
 var $868=(($867)|0);
 var $869=(($i2h+32)|0);
 var $870=(($869)|0);
 var $871=_copy_adjust($868,$870,25);
 var $872=(($i2h+20)|0);
 var $873=HEAP16[(($872)>>1)];
 var $874=($873&65535);
 var $875=$874<<6;
 var $876=$xxi;
 var $877=(($876+40)|0);
 HEAP32[(($877)>>2)]=$875;
 var $878=$xxi;
 var $879=(($878+44)|0);
 var $880=$3;
 _read_envelope($879,$env,$880);
 var $881=$xxi;
 var $882=(($881+200)|0);
 var $883=$3;
 _read_envelope($882,$env,$883);
 var $884=$xxi;
 var $885=(($884+356)|0);
 var $886=$3;
 _read_envelope($885,$env,$886);
 var $887=$xxi;
 var $888=(($887+200)|0);
 var $889=(($888)|0);
 var $890=HEAP32[(($889)>>2)];
 var $891=$890&1;
 var $892=($891|0)!=0;
 if($892){label=144;break;}else{label=149;break;}
 case 144: 
 $j=0;
 label=145;break;
 case 145: 
 var $895=$j;
 var $896=$xxi;
 var $897=(($896+200)|0);
 var $898=(($897+4)|0);
 var $899=HEAP32[(($898)>>2)];
 var $900=($895|0)<($899|0);
 if($900){label=146;break;}else{label=148;break;}
 case 146: 
 var $902=$j;
 var $903=($902<<1);
 var $904=((($903)+(1))|0);
 var $905=$xxi;
 var $906=(($905+200)|0);
 var $907=(($906+28)|0);
 var $908=(($907+($904<<1))|0);
 var $909=HEAP16[(($908)>>1)];
 var $910=(($909<<16)>>16);
 var $911=((($910)+(32))|0);
 var $912=(($911)&65535);
 HEAP16[(($908)>>1)]=$912;
 label=147;break;
 case 147: 
 var $914=$j;
 var $915=((($914)+(1))|0);
 $j=$915;
 label=145;break;
 case 148: 
 label=149;break;
 case 149: 
 var $918=$xxi;
 var $919=(($918+44)|0);
 var $920=(($919)|0);
 var $921=HEAP32[(($920)>>2)];
 var $922=$921&1;
 var $923=($922|0)!=0;
 if($923){label=150;break;}else{label=152;break;}
 case 150: 
 var $925=$xxi;
 var $926=(($925+44)|0);
 var $927=(($926+4)|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=($928|0)==0;
 if($929){label=151;break;}else{label=152;break;}
 case 151: 
 var $931=$xxi;
 var $932=(($931+44)|0);
 var $933=(($932+4)|0);
 HEAP32[(($933)>>2)]=1;
 label=152;break;
 case 152: 
 var $935=$xxi;
 var $936=(($935+200)|0);
 var $937=(($936)|0);
 var $938=HEAP32[(($937)>>2)];
 var $939=$938&1;
 var $940=($939|0)!=0;
 if($940){label=153;break;}else{label=155;break;}
 case 153: 
 var $942=$xxi;
 var $943=(($942+200)|0);
 var $944=(($943+4)|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=($945|0)==0;
 if($946){label=154;break;}else{label=155;break;}
 case 154: 
 var $948=$xxi;
 var $949=(($948+200)|0);
 var $950=(($949+4)|0);
 HEAP32[(($950)>>2)]=1;
 label=155;break;
 case 155: 
 var $952=$xxi;
 var $953=(($952+356)|0);
 var $954=(($953)|0);
 var $955=HEAP32[(($954)>>2)];
 var $956=$955&1;
 var $957=($956|0)!=0;
 if($957){label=156;break;}else{label=158;break;}
 case 156: 
 var $959=$xxi;
 var $960=(($959+356)|0);
 var $961=(($960+4)|0);
 var $962=HEAP32[(($961)>>2)];
 var $963=($962|0)==0;
 if($963){label=157;break;}else{label=158;break;}
 case 157: 
 var $965=$xxi;
 var $966=(($965+356)|0);
 var $967=(($966+4)|0);
 HEAP32[(($967)>>2)]=1;
 label=158;break;
 case 158: 
 var $969=(($env)|0);
 var $970=HEAP8[($969)];
 var $971=($970&255);
 var $972=$971&128;
 var $973=($972|0)!=0;
 if($973){label=159;break;}else{label=164;break;}
 case 159: 
 var $975=$xxi;
 var $976=(($975+356)|0);
 var $977=(($976)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$978|8;
 HEAP32[(($977)>>2)]=$979;
 $j=0;
 label=160;break;
 case 160: 
 var $981=$j;
 var $982=(($env+1)|0);
 var $983=HEAP8[($982)];
 var $984=($983&255);
 var $985=($981|0)<($984|0);
 if($985){label=161;break;}else{label=163;break;}
 case 161: 
 var $987=$j;
 var $988=($987<<1);
 var $989=((($988)+(1))|0);
 var $990=$xxi;
 var $991=(($990+356)|0);
 var $992=(($991+28)|0);
 var $993=(($992+($989<<1))|0);
 var $994=HEAP16[(($993)>>1)];
 var $995=(($994<<16)>>16);
 var $996=((($995)+(32))|0);
 var $997=(($996)&65535);
 HEAP16[(($993)>>1)]=$997;
 var $998=$j;
 var $999=($998<<1);
 var $1000=((($999)+(1))|0);
 var $1001=$xxi;
 var $1002=(($1001+356)|0);
 var $1003=(($1002+28)|0);
 var $1004=(($1003+($1000<<1))|0);
 var $1005=HEAP16[(($1004)>>1)];
 var $1006=(($1005<<16)>>16);
 var $1007=($1006<<2);
 var $1008=(($1007)&65535);
 HEAP16[(($1004)>>1)]=$1008;
 label=162;break;
 case 162: 
 var $1010=$j;
 var $1011=((($1010)+(1))|0);
 $j=$1011;
 label=160;break;
 case 163: 
 label=169;break;
 case 164: 
 $j=0;
 label=165;break;
 case 165: 
 var $1015=$j;
 var $1016=(($env+1)|0);
 var $1017=HEAP8[($1016)];
 var $1018=($1017&255);
 var $1019=($1015|0)<($1018|0);
 if($1019){label=166;break;}else{label=168;break;}
 case 166: 
 var $1021=$j;
 var $1022=($1021<<1);
 var $1023=((($1022)+(1))|0);
 var $1024=$xxi;
 var $1025=(($1024+356)|0);
 var $1026=(($1025+28)|0);
 var $1027=(($1026+($1023<<1))|0);
 var $1028=HEAP16[(($1027)>>1)];
 var $1029=(($1028<<16)>>16);
 var $1030=((($1029)*(50))&-1);
 var $1031=(($1030)&65535);
 HEAP16[(($1027)>>1)]=$1031;
 label=167;break;
 case 167: 
 var $1033=$j;
 var $1034=((($1033)+(1))|0);
 $j=$1034;
 label=165;break;
 case 168: 
 label=169;break;
 case 169: 
 $j=0;
 label=170;break;
 case 170: 
 var $1038=$j;
 var $1039=($1038|0)<120;
 if($1039){label=171;break;}else{label=173;break;}
 case 171: 
 var $1041=$j;
 var $1042=(($inst_map+($1041<<2))|0);
 HEAP32[(($1042)>>2)]=-1;
 label=172;break;
 case 172: 
 var $1044=$j;
 var $1045=((($1044)+(1))|0);
 $j=$1045;
 label=170;break;
 case 173: 
 $j=0;
 $k=0;
 label=174;break;
 case 174: 
 var $1048=$j;
 var $1049=($1048|0)<120;
 if($1049){label=175;break;}else{label=181;break;}
 case 175: 
 var $1051=$j;
 var $1052=($1051<<1);
 var $1053=((($1052)+(1))|0);
 var $1054=(($i2h+64)|0);
 var $1055=(($1054+$1053)|0);
 var $1056=HEAP8[($1055)];
 var $1057=($1056&255);
 var $1058=((($1057)-(1))|0);
 $c=$1058;
 var $1059=$c;
 var $1060=($1059|0)<0;
 if($1060){label=176;break;}else{label=177;break;}
 case 176: 
 var $1062=$j;
 var $1063=$xxi;
 var $1064=(($1063+512)|0);
 var $1065=(($1064+($1062<<1))|0);
 var $1066=(($1065)|0);
 HEAP8[($1066)]=-1;
 var $1067=$j;
 var $1068=$xxi;
 var $1069=(($1068+512)|0);
 var $1070=(($1069+($1067<<1))|0);
 var $1071=(($1070+1)|0);
 HEAP8[($1071)]=0;
 label=180;break;
 case 177: 
 var $1073=$c;
 var $1074=(($inst_map+($1073<<2))|0);
 var $1075=HEAP32[(($1074)>>2)];
 var $1076=($1075|0)==-1;
 if($1076){label=178;break;}else{label=179;break;}
 case 178: 
 var $1078=$k;
 var $1079=$c;
 var $1080=(($inst_map+($1079<<2))|0);
 HEAP32[(($1080)>>2)]=$1078;
 var $1081=$c;
 var $1082=$k;
 var $1083=(($inst_rmap+($1082<<2))|0);
 HEAP32[(($1083)>>2)]=$1081;
 var $1084=$k;
 var $1085=((($1084)+(1))|0);
 $k=$1085;
 label=179;break;
 case 179: 
 var $1087=$c;
 var $1088=(($inst_map+($1087<<2))|0);
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=(($1089)&255);
 var $1091=$j;
 var $1092=$xxi;
 var $1093=(($1092+512)|0);
 var $1094=(($1093+($1091<<1))|0);
 var $1095=(($1094)|0);
 HEAP8[($1095)]=$1090;
 var $1096=$j;
 var $1097=($1096<<1);
 var $1098=(($i2h+64)|0);
 var $1099=(($1098+$1097)|0);
 var $1100=HEAP8[($1099)];
 var $1101=($1100&255);
 var $1102=$j;
 var $1103=((($1101)-($1102))|0);
 var $1104=(($1103)&255);
 var $1105=$j;
 var $1106=$xxi;
 var $1107=(($1106+512)|0);
 var $1108=(($1107+($1105<<1))|0);
 var $1109=(($1108+1)|0);
 HEAP8[($1109)]=$1104;
 label=180;break;
 case 180: 
 var $1111=$j;
 var $1112=((($1111)+(1))|0);
 $j=$1112;
 label=174;break;
 case 181: 
 var $1114=$k;
 var $1115=$xxi;
 var $1116=(($1115+36)|0);
 HEAP32[(($1116)>>2)]=$1114;
 var $1117=(($i2h+24)|0);
 var $1118=HEAP8[($1117)];
 var $1119=($1118&255);
 var $1120=$1119>>1;
 var $1121=$xxi;
 var $1122=(($1121+32)|0);
 HEAP32[(($1122)>>2)]=$1120;
 var $1123=$k;
 var $1124=($1123|0)!=0;
 if($1124){label=182;break;}else{label=192;break;}
 case 182: 
 var $1126=$k;
 var $1127=_calloc(64,$1126);
 var $1128=$1127;
 var $1129=$xxi;
 var $1130=(($1129+756)|0);
 HEAP32[(($1130)>>2)]=$1128;
 var $1131=$xxi;
 var $1132=(($1131+756)|0);
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=($1133|0)==0;
 if($1134){label=183;break;}else{label=184;break;}
 case 183: 
 label=375;break;
 case 184: 
 $j=0;
 label=185;break;
 case 185: 
 var $1138=$j;
 var $1139=$k;
 var $1140=($1138|0)<($1139|0);
 if($1140){label=186;break;}else{label=191;break;}
 case 186: 
 var $1142=$j;
 var $1143=$xxi;
 var $1144=(($1143+756)|0);
 var $1145=HEAP32[(($1144)>>2)];
 var $1146=(($1145+($1142<<6))|0);
 $sub=$1146;
 var $1147=$j;
 var $1148=(($inst_rmap+($1147<<2))|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=$sub;
 var $1151=(($1150+40)|0);
 HEAP32[(($1151)>>2)]=$1149;
 var $1152=(($i2h+17)|0);
 var $1153=HEAP8[($1152)];
 var $1154=($1153&255);
 var $1155=$sub;
 var $1156=(($1155+44)|0);
 HEAP32[(($1156)>>2)]=$1154;
 var $1157=(($i2h+18)|0);
 var $1158=HEAP8[($1157)];
 var $1159=($1158&255);
 var $1160=$sub;
 var $1161=(($1160+48)|0);
 HEAP32[(($1161)>>2)]=$1159;
 var $1162=(($i2h+19)|0);
 var $1163=HEAP8[($1162)];
 var $1164=($1163&255);
 var $1165=$1164&3;
 var $1166=(($dca2nna+($1165<<2))|0);
 var $1167=HEAP32[(($1166)>>2)];
 var $1168=$sub;
 var $1169=(($1168+52)|0);
 HEAP32[(($1169)>>2)]=$1167;
 var $1170=(($i2h+25)|0);
 var $1171=HEAP8[($1170)];
 var $1172=($1171&255);
 var $1173=$1172&128;
 var $1174=($1173|0)!=0;
 if($1174){label=187;break;}else{label=188;break;}
 case 187: 
 var $1182=128;label=189;break;
 case 188: 
 var $1177=(($i2h+25)|0);
 var $1178=HEAP8[($1177)];
 var $1179=($1178&255);
 var $1180=($1179<<2);
 var $1182=$1180;label=189;break;
 case 189: 
 var $1182;
 var $1183=$sub;
 var $1184=(($1183+8)|0);
 HEAP32[(($1184)>>2)]=$1182;
 var $1185=(($i2h+58)|0);
 var $1186=HEAP8[($1185)];
 var $1187=($1186&255);
 var $1188=$sub;
 var $1189=(($1188+56)|0);
 HEAP32[(($1189)>>2)]=$1187;
 var $1190=(($i2h+59)|0);
 var $1191=HEAP8[($1190)];
 var $1192=($1191&255);
 var $1193=$sub;
 var $1194=(($1193+60)|0);
 HEAP32[(($1194)>>2)]=$1192;
 label=190;break;
 case 190: 
 var $1196=$j;
 var $1197=((($1196)+(1))|0);
 $j=$1197;
 label=185;break;
 case 191: 
 label=192;break;
 case 192: 
 label=193;break;
 case 193: 
 label=194;break;
 case 194: 
 label=238;break;
 case 195: 
 var $1203=(($ifh+44)|0);
 var $1204=HEAP16[(($1203)>>1)];
 var $1205=($1204&65535);
 var $1206=$1205&4;
 var $1207=($1206|0)!=0;
 if($1207){label=196;break;}else{label=237;break;}
 case 196: 
 var $1209=$3;
 var $1210=$4;
 var $1211=$i;
 var $1212=$pp_ins;
 var $1213=(($1212+($1211<<2))|0);
 var $1214=HEAP32[(($1213)>>2)];
 var $1215=((($1210)+($1214))|0);
 var $1216=_hio_seek($1209,$1215,0);
 var $1217=$3;
 var $1218=_hio_read32b($1217);
 var $1219=(($i1h)|0);
 HEAP32[(($1219)>>2)]=$1218;
 var $1220=(($i1h+4)|0);
 var $1221=$1220;
 var $1222=$3;
 var $1223=_hio_read($1221,12,1,$1222);
 var $1224=$3;
 var $1225=_hio_read8($1224);
 var $1226=(($i1h+16)|0);
 HEAP8[($1226)]=$1225;
 var $1227=$3;
 var $1228=_hio_read8($1227);
 var $1229=(($i1h+17)|0);
 HEAP8[($1229)]=$1228;
 var $1230=$3;
 var $1231=_hio_read8($1230);
 var $1232=(($i1h+18)|0);
 HEAP8[($1232)]=$1231;
 var $1233=$3;
 var $1234=_hio_read8($1233);
 var $1235=(($i1h+19)|0);
 HEAP8[($1235)]=$1234;
 var $1236=$3;
 var $1237=_hio_read8($1236);
 var $1238=(($i1h+20)|0);
 HEAP8[($1238)]=$1237;
 var $1239=$3;
 var $1240=_hio_read8($1239);
 var $1241=(($i1h+21)|0);
 HEAP8[($1241)]=$1240;
 var $1242=$3;
 var $1243=_hio_read16l($1242);
 var $1244=(($i1h+22)|0);
 HEAP16[(($1244)>>1)]=$1243;
 var $1245=$3;
 var $1246=_hio_read16l($1245);
 var $1247=(($i1h+24)|0);
 HEAP16[(($1247)>>1)]=$1246;
 var $1248=$3;
 var $1249=_hio_read8($1248);
 var $1250=(($i1h+26)|0);
 HEAP8[($1250)]=$1249;
 var $1251=$3;
 var $1252=_hio_read8($1251);
 var $1253=(($i1h+27)|0);
 HEAP8[($1253)]=$1252;
 var $1254=$3;
 var $1255=_hio_read16l($1254);
 var $1256=(($i1h+28)|0);
 HEAP16[(($1256)>>1)]=$1255;
 var $1257=$3;
 var $1258=_hio_read8($1257);
 var $1259=(($i1h+30)|0);
 HEAP8[($1259)]=$1258;
 var $1260=$3;
 var $1261=_hio_read8($1260);
 var $1262=(($i1h+31)|0);
 HEAP8[($1262)]=$1261;
 var $1263=(($i1h+32)|0);
 var $1264=$1263;
 var $1265=$3;
 var $1266=_hio_read($1264,26,1,$1265);
 var $1267=(($i1h+32)|0);
 var $1268=(($1267)|0);
 _fix_name($1268,26);
 var $1269=(($i1h+58)|0);
 var $1270=$1269;
 var $1271=$3;
 var $1272=_hio_read($1270,6,1,$1271);
 var $1273=(($i1h+64)|0);
 var $1274=$1273;
 var $1275=$3;
 var $1276=_hio_read($1274,240,1,$1275);
 var $1277=(($i1h+304)|0);
 var $1278=$1277;
 var $1279=$3;
 var $1280=_hio_read($1278,200,1,$1279);
 var $1281=(($i1h+504)|0);
 var $1282=$1281;
 var $1283=$3;
 var $1284=_hio_read($1282,50,1,$1283);
 var $1285=$xxi;
 var $1286=(($1285)|0);
 var $1287=(($1286)|0);
 var $1288=(($i1h+32)|0);
 var $1289=(($1288)|0);
 var $1290=_copy_adjust($1287,$1289,25);
 var $1291=(($i1h+24)|0);
 var $1292=HEAP16[(($1291)>>1)];
 var $1293=($1292&65535);
 var $1294=$1293<<7;
 var $1295=$xxi;
 var $1296=(($1295+40)|0);
 HEAP32[(($1296)>>2)]=$1294;
 var $1297=$xxi;
 var $1298=(($1297+44)|0);
 var $1299=(($1298)|0);
 HEAP32[(($1299)>>2)]=0;
 var $1300=(($i1h+17)|0);
 var $1301=HEAP8[($1300)];
 var $1302=($1301&255);
 var $1303=$1302&1;
 var $1304=($1303|0)!=0;
 if($1304){label=197;break;}else{label=198;break;}
 case 197: 
 var $1306=$xxi;
 var $1307=(($1306+44)|0);
 var $1308=(($1307)|0);
 var $1309=HEAP32[(($1308)>>2)];
 var $1310=$1309|1;
 HEAP32[(($1308)>>2)]=$1310;
 label=198;break;
 case 198: 
 var $1312=(($i1h+17)|0);
 var $1313=HEAP8[($1312)];
 var $1314=($1313&255);
 var $1315=$1314&2;
 var $1316=($1315|0)!=0;
 if($1316){label=199;break;}else{label=200;break;}
 case 199: 
 var $1318=$xxi;
 var $1319=(($1318+44)|0);
 var $1320=(($1319)|0);
 var $1321=HEAP32[(($1320)>>2)];
 var $1322=$1321|4;
 HEAP32[(($1320)>>2)]=$1322;
 label=200;break;
 case 200: 
 var $1324=(($i1h+17)|0);
 var $1325=HEAP8[($1324)];
 var $1326=($1325&255);
 var $1327=$1326&4;
 var $1328=($1327|0)!=0;
 if($1328){label=201;break;}else{label=202;break;}
 case 201: 
 var $1330=$xxi;
 var $1331=(($1330+44)|0);
 var $1332=(($1331)|0);
 var $1333=HEAP32[(($1332)>>2)];
 var $1334=$1333|18;
 HEAP32[(($1332)>>2)]=$1334;
 label=202;break;
 case 202: 
 var $1336=(($i1h+17)|0);
 var $1337=HEAP8[($1336)];
 var $1338=($1337&255);
 var $1339=$1338&8;
 var $1340=($1339|0)!=0;
 if($1340){label=203;break;}else{label=204;break;}
 case 203: 
 var $1342=$xxi;
 var $1343=(($1342+44)|0);
 var $1344=(($1343)|0);
 var $1345=HEAP32[(($1344)>>2)];
 var $1346=$1345|34;
 HEAP32[(($1344)>>2)]=$1346;
 label=204;break;
 case 204: 
 var $1348=(($i1h+18)|0);
 var $1349=HEAP8[($1348)];
 var $1350=($1349&255);
 var $1351=$xxi;
 var $1352=(($1351+44)|0);
 var $1353=(($1352+20)|0);
 HEAP32[(($1353)>>2)]=$1350;
 var $1354=(($i1h+19)|0);
 var $1355=HEAP8[($1354)];
 var $1356=($1355&255);
 var $1357=$xxi;
 var $1358=(($1357+44)|0);
 var $1359=(($1358+24)|0);
 HEAP32[(($1359)>>2)]=$1356;
 var $1360=(($i1h+20)|0);
 var $1361=HEAP8[($1360)];
 var $1362=($1361&255);
 var $1363=$xxi;
 var $1364=(($1363+44)|0);
 var $1365=(($1364+12)|0);
 HEAP32[(($1365)>>2)]=$1362;
 var $1366=(($i1h+21)|0);
 var $1367=HEAP8[($1366)];
 var $1368=($1367&255);
 var $1369=$xxi;
 var $1370=(($1369+44)|0);
 var $1371=(($1370+16)|0);
 HEAP32[(($1371)>>2)]=$1368;
 $k=0;
 label=205;break;
 case 205: 
 var $1373=$k;
 var $1374=($1373<<1);
 var $1375=(($i1h+504)|0);
 var $1376=(($1375+$1374)|0);
 var $1377=HEAP8[($1376)];
 var $1378=($1377&255);
 var $1379=($1378|0)!=255;
 if($1379){label=206;break;}else{label=208;break;}
 case 206: 
 label=207;break;
 case 207: 
 var $1382=$k;
 var $1383=((($1382)+(1))|0);
 $k=$1383;
 label=205;break;
 case 208: 
 var $1385=$k;
 var $1386=$xxi;
 var $1387=(($1386+44)|0);
 var $1388=(($1387+4)|0);
 HEAP32[(($1388)>>2)]=$1385;
 label=209;break;
 case 209: 
 var $1390=$k;
 var $1391=((($1390)-(1))|0);
 $k=$1391;
 var $1392=($1390|0)!=0;
 if($1392){label=210;break;}else{label=211;break;}
 case 210: 
 var $1394=$k;
 var $1395=($1394<<1);
 var $1396=(($i1h+504)|0);
 var $1397=(($1396+$1395)|0);
 var $1398=HEAP8[($1397)];
 var $1399=($1398&255);
 var $1400=$k;
 var $1401=($1400<<1);
 var $1402=$xxi;
 var $1403=(($1402+44)|0);
 var $1404=(($1403+28)|0);
 var $1405=(($1404+($1401<<1))|0);
 HEAP16[(($1405)>>1)]=$1399;
 var $1406=$k;
 var $1407=($1406<<1);
 var $1408=((($1407)+(1))|0);
 var $1409=(($i1h+504)|0);
 var $1410=(($1409+$1408)|0);
 var $1411=HEAP8[($1410)];
 var $1412=($1411&255);
 var $1413=$k;
 var $1414=($1413<<1);
 var $1415=((($1414)+(1))|0);
 var $1416=$xxi;
 var $1417=(($1416+44)|0);
 var $1418=(($1417+28)|0);
 var $1419=(($1418+($1415<<1))|0);
 HEAP16[(($1419)>>1)]=$1412;
 label=209;break;
 case 211: 
 $j=0;
 label=212;break;
 case 212: 
 var $1422=$j;
 var $1423=($1422|0)<120;
 if($1423){label=213;break;}else{label=215;break;}
 case 213: 
 var $1425=$j;
 var $1426=(($inst_map+($1425<<2))|0);
 HEAP32[(($1426)>>2)]=-1;
 label=214;break;
 case 214: 
 var $1428=$j;
 var $1429=((($1428)+(1))|0);
 $j=$1429;
 label=212;break;
 case 215: 
 $j=0;
 $k=0;
 label=216;break;
 case 216: 
 var $1432=$j;
 var $1433=($1432|0)<121;
 if($1433){label=217;break;}else{label=226;break;}
 case 217: 
 var $1435=$j;
 var $1436=($1435|0)<120;
 if($1436){label=218;break;}else{label=219;break;}
 case 218: 
 var $1438=$j;
 var $1439=($1438<<1);
 var $1440=((($1439)+(1))|0);
 var $1441=(($i1h+64)|0);
 var $1442=(($1441+$1440)|0);
 var $1443=HEAP8[($1442)];
 var $1444=($1443&255);
 var $1445=((($1444)-(1))|0);
 var $1448=$1445;label=220;break;
 case 219: 
 var $1448=-1;label=220;break;
 case 220: 
 var $1448;
 $c=$1448;
 var $1449=$c;
 var $1450=($1449|0)<0;
 if($1450){label=221;break;}else{label=222;break;}
 case 221: 
 var $1452=$j;
 var $1453=$xxi;
 var $1454=(($1453+512)|0);
 var $1455=(($1454+($1452<<1))|0);
 var $1456=(($1455)|0);
 HEAP8[($1456)]=0;
 var $1457=$j;
 var $1458=$xxi;
 var $1459=(($1458+512)|0);
 var $1460=(($1459+($1457<<1))|0);
 var $1461=(($1460+1)|0);
 HEAP8[($1461)]=0;
 label=225;break;
 case 222: 
 var $1463=$c;
 var $1464=(($inst_map+($1463<<2))|0);
 var $1465=HEAP32[(($1464)>>2)];
 var $1466=($1465|0)==-1;
 if($1466){label=223;break;}else{label=224;break;}
 case 223: 
 var $1468=$k;
 var $1469=$c;
 var $1470=(($inst_map+($1469<<2))|0);
 HEAP32[(($1470)>>2)]=$1468;
 var $1471=$c;
 var $1472=$k;
 var $1473=(($inst_rmap+($1472<<2))|0);
 HEAP32[(($1473)>>2)]=$1471;
 var $1474=$k;
 var $1475=((($1474)+(1))|0);
 $k=$1475;
 label=224;break;
 case 224: 
 var $1477=$c;
 var $1478=(($inst_map+($1477<<2))|0);
 var $1479=HEAP32[(($1478)>>2)];
 var $1480=(($1479)&255);
 var $1481=$j;
 var $1482=$xxi;
 var $1483=(($1482+512)|0);
 var $1484=(($1483+($1481<<1))|0);
 var $1485=(($1484)|0);
 HEAP8[($1485)]=$1480;
 var $1486=$j;
 var $1487=($1486<<1);
 var $1488=(($i1h+64)|0);
 var $1489=(($1488+$1487)|0);
 var $1490=HEAP8[($1489)];
 var $1491=($1490&255);
 var $1492=$j;
 var $1493=((($1491)-($1492))|0);
 var $1494=(($1493)&255);
 var $1495=$j;
 var $1496=$xxi;
 var $1497=(($1496+512)|0);
 var $1498=(($1497+($1495<<1))|0);
 var $1499=(($1498+1)|0);
 HEAP8[($1499)]=$1494;
 label=225;break;
 case 225: 
 var $1501=$j;
 var $1502=((($1501)+(1))|0);
 $j=$1502;
 label=216;break;
 case 226: 
 var $1504=$k;
 var $1505=$xxi;
 var $1506=(($1505+36)|0);
 HEAP32[(($1506)>>2)]=$1504;
 var $1507=(($i2h+24)|0);
 var $1508=HEAP8[($1507)];
 var $1509=($1508&255);
 var $1510=$1509>>1;
 var $1511=$xxi;
 var $1512=(($1511+32)|0);
 HEAP32[(($1512)>>2)]=$1510;
 var $1513=$k;
 var $1514=($1513|0)!=0;
 if($1514){label=227;break;}else{label=234;break;}
 case 227: 
 var $1516=$k;
 var $1517=_calloc(64,$1516);
 var $1518=$1517;
 var $1519=$xxi;
 var $1520=(($1519+756)|0);
 HEAP32[(($1520)>>2)]=$1518;
 var $1521=$xxi;
 var $1522=(($1521+756)|0);
 var $1523=HEAP32[(($1522)>>2)];
 var $1524=($1523|0)==0;
 if($1524){label=228;break;}else{label=229;break;}
 case 228: 
 label=375;break;
 case 229: 
 $j=0;
 label=230;break;
 case 230: 
 var $1528=$j;
 var $1529=$k;
 var $1530=($1528|0)<($1529|0);
 if($1530){label=231;break;}else{label=233;break;}
 case 231: 
 var $1532=$j;
 var $1533=$xxi;
 var $1534=(($1533+756)|0);
 var $1535=HEAP32[(($1534)>>2)];
 var $1536=(($1535+($1532<<6))|0);
 $sub1=$1536;
 var $1537=$j;
 var $1538=(($inst_rmap+($1537<<2))|0);
 var $1539=HEAP32[(($1538)>>2)];
 var $1540=$sub1;
 var $1541=(($1540+40)|0);
 HEAP32[(($1541)>>2)]=$1539;
 var $1542=(($i1h+26)|0);
 var $1543=HEAP8[($1542)];
 var $1544=($1543&255);
 var $1545=$sub1;
 var $1546=(($1545+44)|0);
 HEAP32[(($1546)>>2)]=$1544;
 var $1547=(($i1h+27)|0);
 var $1548=HEAP8[($1547)];
 var $1549=($1548&255);
 var $1550=($1549|0)!=0;
 var $1551=($1550?1:0);
 var $1552=$sub1;
 var $1553=(($1552+48)|0);
 HEAP32[(($1553)>>2)]=$1551;
 var $1554=$sub1;
 var $1555=(($1554+52)|0);
 HEAP32[(($1555)>>2)]=0;
 var $1556=$sub1;
 var $1557=(($1556+8)|0);
 HEAP32[(($1557)>>2)]=128;
 label=232;break;
 case 232: 
 var $1559=$j;
 var $1560=((($1559)+(1))|0);
 $j=$1560;
 label=230;break;
 case 233: 
 label=234;break;
 case 234: 
 label=235;break;
 case 235: 
 label=236;break;
 case 236: 
 label=237;break;
 case 237: 
 label=238;break;
 case 238: 
 label=239;break;
 case 239: 
 var $1568=$i;
 var $1569=((($1568)+(1))|0);
 $i=$1569;
 label=138;break;
 case 240: 
 label=241;break;
 case 241: 
 label=242;break;
 case 242: 
 $i=0;
 label=243;break;
 case 243: 
 var $1574=$i;
 var $1575=$mod;
 var $1576=(($1575+144)|0);
 var $1577=HEAP32[(($1576)>>2)];
 var $1578=($1574|0)<($1577|0);
 if($1578){label=244;break;}else{label=291;break;}
 case 244: 
 var $1580=$i;
 var $1581=$mod;
 var $1582=(($1581+180)|0);
 var $1583=HEAP32[(($1582)>>2)];
 var $1584=(($1583+((($1580)*(52))&-1))|0);
 $xxs=$1584;
 var $1585=(($ifh+44)|0);
 var $1586=HEAP16[(($1585)>>1)];
 var $1587=($1586&65535);
 var $1588=$1587^-1;
 var $1589=$1588&4;
 var $1590=($1589|0)!=0;
 if($1590){label=245;break;}else{label=248;break;}
 case 245: 
 var $1592=_calloc(64,1);
 var $1593=$1592;
 var $1594=$i;
 var $1595=$mod;
 var $1596=(($1595+176)|0);
 var $1597=HEAP32[(($1596)>>2)];
 var $1598=(($1597+((($1594)*(764))&-1))|0);
 var $1599=(($1598+756)|0);
 HEAP32[(($1599)>>2)]=$1593;
 var $1600=$i;
 var $1601=$mod;
 var $1602=(($1601+176)|0);
 var $1603=HEAP32[(($1602)>>2)];
 var $1604=(($1603+((($1600)*(764))&-1))|0);
 var $1605=(($1604+756)|0);
 var $1606=HEAP32[(($1605)>>2)];
 var $1607=($1606|0)==0;
 if($1607){label=246;break;}else{label=247;break;}
 case 246: 
 label=375;break;
 case 247: 
 label=248;break;
 case 248: 
 var $1611=$3;
 var $1612=$4;
 var $1613=$i;
 var $1614=$pp_smp;
 var $1615=(($1614+($1613<<2))|0);
 var $1616=HEAP32[(($1615)>>2)];
 var $1617=((($1612)+($1616))|0);
 var $1618=_hio_seek($1611,$1617,0);
 var $1619=$3;
 var $1620=_hio_read32b($1619);
 var $1621=(($ish)|0);
 HEAP32[(($1621)>>2)]=$1620;
 var $1622=(($ish+4)|0);
 var $1623=$1622;
 var $1624=$3;
 var $1625=_hio_read($1623,12,1,$1624);
 var $1626=$3;
 var $1627=_hio_read8($1626);
 var $1628=(($ish+16)|0);
 HEAP8[($1628)]=$1627;
 var $1629=$3;
 var $1630=_hio_read8($1629);
 var $1631=(($ish+17)|0);
 HEAP8[($1631)]=$1630;
 var $1632=$3;
 var $1633=_hio_read8($1632);
 var $1634=(($ish+18)|0);
 HEAP8[($1634)]=$1633;
 var $1635=$3;
 var $1636=_hio_read8($1635);
 var $1637=(($ish+19)|0);
 HEAP8[($1637)]=$1636;
 var $1638=(($ish+20)|0);
 var $1639=$1638;
 var $1640=$3;
 var $1641=_hio_read($1639,26,1,$1640);
 var $1642=(($ish+20)|0);
 var $1643=(($1642)|0);
 _fix_name($1643,26);
 var $1644=$3;
 var $1645=_hio_read8($1644);
 var $1646=(($ish+46)|0);
 HEAP8[($1646)]=$1645;
 var $1647=$3;
 var $1648=_hio_read8($1647);
 var $1649=(($ish+47)|0);
 HEAP8[($1649)]=$1648;
 var $1650=$3;
 var $1651=_hio_read32l($1650);
 var $1652=(($ish+48)|0);
 HEAP32[(($1652)>>2)]=$1651;
 var $1653=$3;
 var $1654=_hio_read32l($1653);
 var $1655=(($ish+52)|0);
 HEAP32[(($1655)>>2)]=$1654;
 var $1656=$3;
 var $1657=_hio_read32l($1656);
 var $1658=(($ish+56)|0);
 HEAP32[(($1658)>>2)]=$1657;
 var $1659=$3;
 var $1660=_hio_read32l($1659);
 var $1661=(($ish+60)|0);
 HEAP32[(($1661)>>2)]=$1660;
 var $1662=$3;
 var $1663=_hio_read32l($1662);
 var $1664=(($ish+64)|0);
 HEAP32[(($1664)>>2)]=$1663;
 var $1665=$3;
 var $1666=_hio_read32l($1665);
 var $1667=(($ish+68)|0);
 HEAP32[(($1667)>>2)]=$1666;
 var $1668=$3;
 var $1669=_hio_read32l($1668);
 var $1670=(($ish+72)|0);
 HEAP32[(($1670)>>2)]=$1669;
 var $1671=$3;
 var $1672=_hio_read8($1671);
 var $1673=(($ish+76)|0);
 HEAP8[($1673)]=$1672;
 var $1674=$3;
 var $1675=_hio_read8($1674);
 var $1676=(($ish+77)|0);
 HEAP8[($1676)]=$1675;
 var $1677=$3;
 var $1678=_hio_read8($1677);
 var $1679=(($ish+78)|0);
 HEAP8[($1679)]=$1678;
 var $1680=$3;
 var $1681=_hio_read8($1680);
 var $1682=(($ish+79)|0);
 HEAP8[($1682)]=$1681;
 var $1683=(($ish)|0);
 var $1684=HEAP32[(($1683)>>2)];
 var $1685=($1684|0)!=1229803603;
 if($1685){label=249;break;}else{label=250;break;}
 case 249: 
 label=290;break;
 case 250: 
 var $1688=(($ish+18)|0);
 var $1689=HEAP8[($1688)];
 var $1690=($1689&255);
 var $1691=$1690&2;
 var $1692=($1691|0)!=0;
 if($1692){label=251;break;}else{label=252;break;}
 case 251: 
 var $1694=$xxs;
 var $1695=(($1694+44)|0);
 HEAP32[(($1695)>>2)]=1;
 label=252;break;
 case 252: 
 var $1697=(($ish+48)|0);
 var $1698=HEAP32[(($1697)>>2)];
 var $1699=$xxs;
 var $1700=(($1699+32)|0);
 HEAP32[(($1700)>>2)]=$1698;
 var $1701=(($ish+52)|0);
 var $1702=HEAP32[(($1701)>>2)];
 var $1703=$xxs;
 var $1704=(($1703+36)|0);
 HEAP32[(($1704)>>2)]=$1702;
 var $1705=(($ish+56)|0);
 var $1706=HEAP32[(($1705)>>2)];
 var $1707=$xxs;
 var $1708=(($1707+40)|0);
 HEAP32[(($1708)>>2)]=$1706;
 var $1709=(($ish+18)|0);
 var $1710=HEAP8[($1709)];
 var $1711=($1710&255);
 var $1712=$1711&16;
 var $1713=($1712|0)!=0;
 var $1714=($1713?2:0);
 var $1715=$xxs;
 var $1716=(($1715+44)|0);
 var $1717=HEAP32[(($1716)>>2)];
 var $1718=$1717|$1714;
 HEAP32[(($1716)>>2)]=$1718;
 var $1719=(($ish+18)|0);
 var $1720=HEAP8[($1719)];
 var $1721=($1720&255);
 var $1722=$1721&64;
 var $1723=($1722|0)!=0;
 var $1724=($1723?4:0);
 var $1725=$xxs;
 var $1726=(($1725+44)|0);
 var $1727=HEAP32[(($1726)>>2)];
 var $1728=$1727|$1724;
 HEAP32[(($1726)>>2)]=$1728;
 var $1729=(($ifh+44)|0);
 var $1730=HEAP16[(($1729)>>1)];
 var $1731=($1730&65535);
 var $1732=$1731^-1;
 var $1733=$1732&4;
 var $1734=($1733|0)!=0;
 if($1734){label=253;break;}else{label=254;break;}
 case 253: 
 var $1736=(($ish+19)|0);
 var $1737=HEAP8[($1736)];
 var $1738=($1737&255);
 var $1739=$i;
 var $1740=$mod;
 var $1741=(($1740+176)|0);
 var $1742=HEAP32[(($1741)>>2)];
 var $1743=(($1742+((($1739)*(764))&-1))|0);
 var $1744=(($1743+756)|0);
 var $1745=HEAP32[(($1744)>>2)];
 var $1746=(($1745)|0);
 var $1747=(($1746)|0);
 HEAP32[(($1747)>>2)]=$1738;
 var $1748=$i;
 var $1749=$mod;
 var $1750=(($1749+176)|0);
 var $1751=HEAP32[(($1750)>>2)];
 var $1752=(($1751+((($1748)*(764))&-1))|0);
 var $1753=(($1752+756)|0);
 var $1754=HEAP32[(($1753)>>2)];
 var $1755=(($1754)|0);
 var $1756=(($1755+8)|0);
 HEAP32[(($1756)>>2)]=128;
 var $1757=$i;
 var $1758=$i;
 var $1759=$mod;
 var $1760=(($1759+176)|0);
 var $1761=HEAP32[(($1760)>>2)];
 var $1762=(($1761+((($1758)*(764))&-1))|0);
 var $1763=(($1762+756)|0);
 var $1764=HEAP32[(($1763)>>2)];
 var $1765=(($1764)|0);
 var $1766=(($1765+40)|0);
 HEAP32[(($1766)>>2)]=$1757;
 var $1767=$xxs;
 var $1768=(($1767+32)|0);
 var $1769=HEAP32[(($1768)>>2)];
 var $1770=($1769|0)!=0;
 var $1771=$1770^1;
 var $1772=$1771^1;
 var $1773=($1772&1);
 var $1774=$i;
 var $1775=$mod;
 var $1776=(($1775+176)|0);
 var $1777=HEAP32[(($1776)>>2)];
 var $1778=(($1777+((($1774)*(764))&-1))|0);
 var $1779=(($1778+36)|0);
 HEAP32[(($1779)>>2)]=$1773;
 var $1780=$mod;
 var $1781=$i;
 var $1782=(($ish+20)|0);
 var $1783=(($1782)|0);
 var $1784=_instrument_name($1780,$1781,$1783,25);
 label=255;break;
 case 254: 
 var $1786=$xxs;
 var $1787=(($1786)|0);
 var $1788=(($1787)|0);
 var $1789=(($ish+20)|0);
 var $1790=(($1789)|0);
 var $1791=_copy_adjust($1788,$1790,25);
 label=255;break;
 case 255: 
 label=256;break;
 case 256: 
 label=257;break;
 case 257: 
 $j=0;
 label=258;break;
 case 258: 
 var $1796=$j;
 var $1797=$mod;
 var $1798=(($1797+140)|0);
 var $1799=HEAP32[(($1798)>>2)];
 var $1800=($1796|0)<($1799|0);
 if($1800){label=259;break;}else{label=267;break;}
 case 259: 
 $k=0;
 label=260;break;
 case 260: 
 var $1803=$k;
 var $1804=$j;
 var $1805=$mod;
 var $1806=(($1805+176)|0);
 var $1807=HEAP32[(($1806)>>2)];
 var $1808=(($1807+((($1804)*(764))&-1))|0);
 var $1809=(($1808+36)|0);
 var $1810=HEAP32[(($1809)>>2)];
 var $1811=($1803|0)<($1810|0);
 if($1811){label=261;break;}else{label=265;break;}
 case 261: 
 var $1813=$k;
 var $1814=$j;
 var $1815=$mod;
 var $1816=(($1815+176)|0);
 var $1817=HEAP32[(($1816)>>2)];
 var $1818=(($1817+((($1814)*(764))&-1))|0);
 var $1819=(($1818+756)|0);
 var $1820=HEAP32[(($1819)>>2)];
 var $1821=(($1820+($1813<<6))|0);
 $sub2=$1821;
 var $1822=$sub2;
 var $1823=(($1822+40)|0);
 var $1824=HEAP32[(($1823)>>2)];
 var $1825=$i;
 var $1826=($1824|0)==($1825|0);
 if($1826){label=262;break;}else{label=263;break;}
 case 262: 
 var $1828=(($ish+19)|0);
 var $1829=HEAP8[($1828)];
 var $1830=($1829&255);
 var $1831=$sub2;
 var $1832=(($1831)|0);
 HEAP32[(($1832)>>2)]=$1830;
 var $1833=(($ish+17)|0);
 var $1834=HEAP8[($1833)];
 var $1835=($1834&255);
 var $1836=$sub2;
 var $1837=(($1836+4)|0);
 HEAP32[(($1837)>>2)]=$1835;
 var $1838=(($ish+76)|0);
 var $1839=HEAP8[($1838)];
 var $1840=($1839&255);
 var $1841=$sub2;
 var $1842=(($1841+28)|0);
 HEAP32[(($1842)>>2)]=$1840;
 var $1843=(($ish+77)|0);
 var $1844=HEAP8[($1843)];
 var $1845=($1844&255);
 var $1846=$1845>>1;
 var $1847=$sub2;
 var $1848=(($1847+24)|0);
 HEAP32[(($1848)>>2)]=$1846;
 var $1849=(($ish+79)|0);
 var $1850=HEAP8[($1849)];
 var $1851=($1850&255);
 var $1852=$sub2;
 var $1853=(($1852+20)|0);
 HEAP32[(($1853)>>2)]=$1851;
 var $1854=(($ish+78)|0);
 var $1855=HEAP8[($1854)];
 var $1856=($1855&255);
 var $1857=(((255)-($1856))|0);
 var $1858=$1857>>1;
 var $1859=$sub2;
 var $1860=(($1859+32)|0);
 HEAP32[(($1860)>>2)]=$1858;
 var $1861=(($ish+60)|0);
 var $1862=HEAP32[(($1861)>>2)];
 var $1863=$k;
 var $1864=$j;
 var $1865=$mod;
 var $1866=(($1865+176)|0);
 var $1867=HEAP32[(($1866)>>2)];
 var $1868=(($1867+((($1864)*(764))&-1))|0);
 var $1869=(($1868+756)|0);
 var $1870=HEAP32[(($1869)>>2)];
 var $1871=(($1870+($1863<<6))|0);
 var $1872=(($1871+12)|0);
 var $1873=$k;
 var $1874=$j;
 var $1875=$mod;
 var $1876=(($1875+176)|0);
 var $1877=HEAP32[(($1876)>>2)];
 var $1878=(($1877+((($1874)*(764))&-1))|0);
 var $1879=(($1878+756)|0);
 var $1880=HEAP32[(($1879)>>2)];
 var $1881=(($1880+($1873<<6))|0);
 var $1882=(($1881+16)|0);
 _c2spd_to_note($1862,$1872,$1882);
 label=263;break;
 case 263: 
 label=264;break;
 case 264: 
 var $1885=$k;
 var $1886=((($1885)+(1))|0);
 $k=$1886;
 label=260;break;
 case 265: 
 label=266;break;
 case 266: 
 var $1889=$j;
 var $1890=((($1889)+(1))|0);
 $j=$1890;
 label=258;break;
 case 267: 
 var $1892=(($ish+18)|0);
 var $1893=HEAP8[($1892)];
 var $1894=($1893&255);
 var $1895=$1894&1;
 var $1896=($1895|0)!=0;
 if($1896){label=268;break;}else{label=289;break;}
 case 268: 
 var $1898=$xxs;
 var $1899=(($1898+32)|0);
 var $1900=HEAP32[(($1899)>>2)];
 var $1901=($1900|0)>1;
 if($1901){label=269;break;}else{label=289;break;}
 case 269: 
 $cvt=0;
 var $1903=$3;
 var $1904=$4;
 var $1905=(($ish+72)|0);
 var $1906=HEAP32[(($1905)>>2)];
 var $1907=((($1904)+($1906))|0);
 var $1908=_hio_seek($1903,$1907,0);
 var $1909=0!=($1908|0);
 if($1909){label=270;break;}else{label=271;break;}
 case 270: 
 label=375;break;
 case 271: 
 var $1912=$xxs;
 var $1913=(($1912+40)|0);
 var $1914=HEAP32[(($1913)>>2)];
 var $1915=$xxs;
 var $1916=(($1915+32)|0);
 var $1917=HEAP32[(($1916)>>2)];
 var $1918=($1914>>>0)>($1917>>>0);
 if($1918){label=273;break;}else{label=272;break;}
 case 272: 
 var $1920=$xxs;
 var $1921=(($1920+36)|0);
 var $1922=HEAP32[(($1921)>>2)];
 var $1923=$xxs;
 var $1924=(($1923+40)|0);
 var $1925=HEAP32[(($1924)>>2)];
 var $1926=($1922>>>0)>=($1925>>>0);
 if($1926){label=273;break;}else{label=274;break;}
 case 273: 
 var $1928=$xxs;
 var $1929=(($1928+44)|0);
 var $1930=HEAP32[(($1929)>>2)];
 var $1931=$1930&-3;
 HEAP32[(($1929)>>2)]=$1931;
 label=274;break;
 case 274: 
 var $1933=(($ish+46)|0);
 var $1934=HEAP8[($1933)];
 var $1935=($1934&255);
 var $1936=$1935^-1;
 var $1937=$1936&1;
 var $1938=($1937|0)!=0;
 if($1938){label=275;break;}else{label=276;break;}
 case 275: 
 var $1940=$cvt;
 var $1941=$1940|2;
 $cvt=$1941;
 label=276;break;
 case 276: 
 var $1943=(($ish+18)|0);
 var $1944=HEAP8[($1943)];
 var $1945=($1944&255);
 var $1946=$1945&8;
 var $1947=($1946|0)!=0;
 if($1947){label=277;break;}else{label=285;break;}
 case 277: 
 var $1949=$xxs;
 var $1950=(($1949+32)|0);
 var $1951=HEAP32[(($1950)>>2)];
 var $1952=($1951<<1);
 var $1953=_calloc(1,$1952);
 $buf=$1953;
 var $1954=$buf;
 var $1955=($1954|0)==0;
 if($1955){label=278;break;}else{label=279;break;}
 case 278: 
 label=375;break;
 case 279: 
 var $1958=(($ish+18)|0);
 var $1959=HEAP8[($1958)];
 var $1960=($1959&255);
 var $1961=$1960&2;
 var $1962=($1961|0)!=0;
 if($1962){label=280;break;}else{label=281;break;}
 case 280: 
 var $1964=$3;
 var $1965=$buf;
 var $1966=$xxs;
 var $1967=(($1966+32)|0);
 var $1968=HEAP32[(($1967)>>2)];
 var $1969=(($ish+46)|0);
 var $1970=HEAP8[($1969)];
 var $1971=($1970&255);
 var $1972=$1971&4;
 var $1973=_itsex_decompress16($1964,$1965,$1968,$1972);
 label=282;break;
 case 281: 
 var $1975=$3;
 var $1976=$buf;
 var $1977=$xxs;
 var $1978=(($1977+32)|0);
 var $1979=HEAP32[(($1978)>>2)];
 var $1980=(($ish+46)|0);
 var $1981=HEAP8[($1980)];
 var $1982=($1981&255);
 var $1983=$1982&4;
 var $1984=_itsex_decompress8($1975,$1976,$1979,$1983);
 label=282;break;
 case 282: 
 var $1986=$2;
 var $1987=$cvt;
 var $1988=16|$1987;
 var $1989=$i;
 var $1990=$mod;
 var $1991=(($1990+180)|0);
 var $1992=HEAP32[(($1991)>>2)];
 var $1993=(($1992+((($1989)*(52))&-1))|0);
 var $1994=$buf;
 var $1995=_load_sample($1986,0,$1988,$1993,$1994);
 $ret=$1995;
 var $1996=$ret;
 var $1997=($1996|0)<0;
 if($1997){label=283;break;}else{label=284;break;}
 case 283: 
 var $1999=$buf;
 _free($1999);
 $1=-1;
 label=379;break;
 case 284: 
 var $2001=$buf;
 _free($2001);
 label=288;break;
 case 285: 
 var $2003=$2;
 var $2004=$3;
 var $2005=$cvt;
 var $2006=$i;
 var $2007=$mod;
 var $2008=(($2007+180)|0);
 var $2009=HEAP32[(($2008)>>2)];
 var $2010=(($2009+((($2006)*(52))&-1))|0);
 var $2011=_load_sample($2003,$2004,$2005,$2010,0);
 var $2012=($2011|0)<0;
 if($2012){label=286;break;}else{label=287;break;}
 case 286: 
 $1=-1;
 label=379;break;
 case 287: 
 label=288;break;
 case 288: 
 label=289;break;
 case 289: 
 label=290;break;
 case 290: 
 var $2018=$i;
 var $2019=((($2018)+(1))|0);
 $i=$2019;
 label=243;break;
 case 291: 
 label=292;break;
 case 292: 
 label=293;break;
 case 293: 
 $max_ch=0;
 $i=0;
 label=294;break;
 case 294: 
 var $2024=$i;
 var $2025=$mod;
 var $2026=(($2025+128)|0);
 var $2027=HEAP32[(($2026)>>2)];
 var $2028=($2024|0)<($2027|0);
 if($2028){label=295;break;}else{label=316;break;}
 case 295: 
 var $2030=$i;
 var $2031=$pp_pat;
 var $2032=(($2031+($2030<<2))|0);
 var $2033=HEAP32[(($2032)>>2)];
 var $2034=($2033|0)==0;
 if($2034){label=296;break;}else{label=297;break;}
 case 296: 
 label=315;break;
 case 297: 
 var $2037=$3;
 var $2038=$4;
 var $2039=$i;
 var $2040=$pp_pat;
 var $2041=(($2040+($2039<<2))|0);
 var $2042=HEAP32[(($2041)>>2)];
 var $2043=((($2038)+($2042))|0);
 var $2044=_hio_seek($2037,$2043,0);
 var $2045=$3;
 var $2046=_hio_read16l($2045);
 var $2047=($2046&65535);
 $pat_len=$2047;
 var $2048=$3;
 var $2049=_hio_read16l($2048);
 var $2050=$mask;
 _memset($2050, 0, 64)|0;
 var $2051=$3;
 var $2052=_hio_read16l($2051);
 var $2053=$3;
 var $2054=_hio_read16l($2053);
 label=298;break;
 case 298: 
 var $2056=$pat_len;
 var $2057=((($2056)-(1))|0);
 $pat_len=$2057;
 var $2058=($2057|0)>=0;
 if($2058){label=299;break;}else{label=314;break;}
 case 299: 
 var $2060=$3;
 var $2061=_hio_read8($2060);
 $b=$2061;
 var $2062=$b;
 var $2063=($2062&255);
 var $2064=($2063|0)==0;
 if($2064){label=300;break;}else{label=301;break;}
 case 300: 
 label=298;break;
 case 301: 
 var $2067=$b;
 var $2068=($2067&255);
 var $2069=((($2068)-(1))|0);
 var $2070=$2069&63;
 $c=$2070;
 var $2071=$c;
 var $2072=$max_ch;
 var $2073=($2071|0)>($2072|0);
 if($2073){label=302;break;}else{label=303;break;}
 case 302: 
 var $2075=$c;
 $max_ch=$2075;
 label=303;break;
 case 303: 
 var $2077=$b;
 var $2078=($2077&255);
 var $2079=$2078&128;
 var $2080=($2079|0)!=0;
 if($2080){label=304;break;}else{label=305;break;}
 case 304: 
 var $2082=$3;
 var $2083=_hio_read8($2082);
 var $2084=$c;
 var $2085=(($mask+$2084)|0);
 HEAP8[($2085)]=$2083;
 var $2086=$pat_len;
 var $2087=((($2086)-(1))|0);
 $pat_len=$2087;
 label=305;break;
 case 305: 
 var $2089=$c;
 var $2090=(($mask+$2089)|0);
 var $2091=HEAP8[($2090)];
 var $2092=($2091&255);
 var $2093=$2092&1;
 var $2094=($2093|0)!=0;
 if($2094){label=306;break;}else{label=307;break;}
 case 306: 
 var $2096=$3;
 var $2097=_hio_read8($2096);
 var $2098=$pat_len;
 var $2099=((($2098)-(1))|0);
 $pat_len=$2099;
 label=307;break;
 case 307: 
 var $2101=$c;
 var $2102=(($mask+$2101)|0);
 var $2103=HEAP8[($2102)];
 var $2104=($2103&255);
 var $2105=$2104&2;
 var $2106=($2105|0)!=0;
 if($2106){label=308;break;}else{label=309;break;}
 case 308: 
 var $2108=$3;
 var $2109=_hio_read8($2108);
 var $2110=$pat_len;
 var $2111=((($2110)-(1))|0);
 $pat_len=$2111;
 label=309;break;
 case 309: 
 var $2113=$c;
 var $2114=(($mask+$2113)|0);
 var $2115=HEAP8[($2114)];
 var $2116=($2115&255);
 var $2117=$2116&4;
 var $2118=($2117|0)!=0;
 if($2118){label=310;break;}else{label=311;break;}
 case 310: 
 var $2120=$3;
 var $2121=_hio_read8($2120);
 var $2122=$pat_len;
 var $2123=((($2122)-(1))|0);
 $pat_len=$2123;
 label=311;break;
 case 311: 
 var $2125=$c;
 var $2126=(($mask+$2125)|0);
 var $2127=HEAP8[($2126)];
 var $2128=($2127&255);
 var $2129=$2128&8;
 var $2130=($2129|0)!=0;
 if($2130){label=312;break;}else{label=313;break;}
 case 312: 
 var $2132=$3;
 var $2133=_hio_read8($2132);
 var $2134=$3;
 var $2135=_hio_read8($2134);
 var $2136=$pat_len;
 var $2137=((($2136)-(2))|0);
 $pat_len=$2137;
 label=313;break;
 case 313: 
 label=298;break;
 case 314: 
 label=315;break;
 case 315: 
 var $2141=$i;
 var $2142=((($2141)+(1))|0);
 $i=$2142;
 label=294;break;
 case 316: 
 var $2144=$max_ch;
 var $2145=((($2144)+(1))|0);
 var $2146=$mod;
 var $2147=(($2146+136)|0);
 HEAP32[(($2147)>>2)]=$2145;
 var $2148=$mod;
 var $2149=(($2148+128)|0);
 var $2150=HEAP32[(($2149)>>2)];
 var $2151=$mod;
 var $2152=(($2151+136)|0);
 var $2153=HEAP32[(($2152)>>2)];
 var $2154=(Math_imul($2150,$2153)|0);
 var $2155=$mod;
 var $2156=(($2155+132)|0);
 HEAP32[(($2156)>>2)]=$2154;
 var $2157=$arpeggio_val;
 _memset($2157, 0, 64)|0;
 var $2158=$last_fxp;
 _memset($2158, 0, 64)|0;
 var $2159=$mod;
 var $2160=_pattern_init($2159);
 var $2161=($2160|0)<0;
 if($2161){label=317;break;}else{label=318;break;}
 case 317: 
 label=375;break;
 case 318: 
 $i=0;
 label=319;break;
 case 319: 
 var $2165=$i;
 var $2166=$mod;
 var $2167=(($2166+128)|0);
 var $2168=HEAP32[(($2167)>>2)];
 var $2169=($2165|0)<($2168|0);
 if($2169){label=320;break;}else{label=368;break;}
 case 320: 
 var $2171=$mod;
 var $2172=$i;
 var $2173=_pattern_alloc($2171,$2172);
 var $2174=($2173|0)<0;
 if($2174){label=321;break;}else{label=322;break;}
 case 321: 
 label=375;break;
 case 322: 
 $r=0;
 var $2177=$i;
 var $2178=$pp_pat;
 var $2179=(($2178+($2177<<2))|0);
 var $2180=HEAP32[(($2179)>>2)];
 var $2181=($2180|0)==0;
 if($2181){label=323;break;}else{label=330;break;}
 case 323: 
 var $2183=$i;
 var $2184=$mod;
 var $2185=(($2184+168)|0);
 var $2186=HEAP32[(($2185)>>2)];
 var $2187=(($2186+($2183<<2))|0);
 var $2188=HEAP32[(($2187)>>2)];
 var $2189=(($2188)|0);
 HEAP32[(($2189)>>2)]=64;
 $j=0;
 label=324;break;
 case 324: 
 var $2191=$j;
 var $2192=$mod;
 var $2193=(($2192+136)|0);
 var $2194=HEAP32[(($2193)>>2)];
 var $2195=($2191|0)<($2194|0);
 if($2195){label=325;break;}else{label=329;break;}
 case 325: 
 var $2197=$i;
 var $2198=$mod;
 var $2199=(($2198+136)|0);
 var $2200=HEAP32[(($2199)>>2)];
 var $2201=(Math_imul($2197,$2200)|0);
 var $2202=$j;
 var $2203=((($2201)+($2202))|0);
 $tnum=$2203;
 var $2204=$mod;
 var $2205=$tnum;
 var $2206=_track_alloc($2204,$2205,64);
 var $2207=($2206|0)<0;
 if($2207){label=326;break;}else{label=327;break;}
 case 326: 
 label=375;break;
 case 327: 
 var $2210=$tnum;
 var $2211=$j;
 var $2212=$i;
 var $2213=$mod;
 var $2214=(($2213+168)|0);
 var $2215=HEAP32[(($2214)>>2)];
 var $2216=(($2215+($2212<<2))|0);
 var $2217=HEAP32[(($2216)>>2)];
 var $2218=(($2217+4)|0);
 var $2219=(($2218+($2211<<2))|0);
 HEAP32[(($2219)>>2)]=$2210;
 label=328;break;
 case 328: 
 var $2221=$j;
 var $2222=((($2221)+(1))|0);
 $j=$2222;
 label=324;break;
 case 329: 
 label=367;break;
 case 330: 
 var $2225=$3;
 var $2226=$4;
 var $2227=$i;
 var $2228=$pp_pat;
 var $2229=(($2228+($2227<<2))|0);
 var $2230=HEAP32[(($2229)>>2)];
 var $2231=((($2226)+($2230))|0);
 var $2232=_hio_seek($2225,$2231,0);
 var $2233=$3;
 var $2234=_hio_read16l($2233);
 var $2235=($2234&65535);
 $pat_len=$2235;
 var $2236=$3;
 var $2237=_hio_read16l($2236);
 var $2238=($2237&65535);
 var $2239=$i;
 var $2240=$mod;
 var $2241=(($2240+168)|0);
 var $2242=HEAP32[(($2241)>>2)];
 var $2243=(($2242+($2239<<2))|0);
 var $2244=HEAP32[(($2243)>>2)];
 var $2245=(($2244)|0);
 HEAP32[(($2245)>>2)]=$2238;
 var $2246=$mod;
 var $2247=$i;
 var $2248=_tracks_in_pattern_alloc($2246,$2247);
 var $2249=($2248|0)<0;
 if($2249){label=331;break;}else{label=332;break;}
 case 331: 
 label=375;break;
 case 332: 
 var $2252=$mask;
 _memset($2252, 0, 64)|0;
 var $2253=$3;
 var $2254=_hio_read16l($2253);
 var $2255=$3;
 var $2256=_hio_read16l($2255);
 label=333;break;
 case 333: 
 var $2258=$pat_len;
 var $2259=((($2258)-(1))|0);
 $pat_len=$2259;
 var $2260=($2259|0)>=0;
 if($2260){label=334;break;}else{label=366;break;}
 case 334: 
 var $2262=$3;
 var $2263=_hio_read8($2262);
 $b=$2263;
 var $2264=$b;
 var $2265=(($2264<<24)>>24)!=0;
 if($2265){label=336;break;}else{label=335;break;}
 case 335: 
 var $2267=$r;
 var $2268=((($2267)+(1))|0);
 $r=$2268;
 label=333;break;
 case 336: 
 var $2270=$b;
 var $2271=($2270&255);
 var $2272=((($2271)-(1))|0);
 var $2273=$2272&63;
 $c=$2273;
 var $2274=$b;
 var $2275=($2274&255);
 var $2276=$2275&128;
 var $2277=($2276|0)!=0;
 if($2277){label=337;break;}else{label=338;break;}
 case 337: 
 var $2279=$3;
 var $2280=_hio_read8($2279);
 var $2281=$c;
 var $2282=(($mask+$2281)|0);
 HEAP8[($2282)]=$2280;
 var $2283=$pat_len;
 var $2284=((($2283)-(1))|0);
 $pat_len=$2284;
 label=338;break;
 case 338: 
 var $2286=$c;
 var $2287=$mod;
 var $2288=(($2287+136)|0);
 var $2289=HEAP32[(($2288)>>2)];
 var $2290=($2286|0)>=($2289|0);
 if($2290){label=340;break;}else{label=339;break;}
 case 339: 
 var $2292=$r;
 var $2293=$i;
 var $2294=$mod;
 var $2295=(($2294+168)|0);
 var $2296=HEAP32[(($2295)>>2)];
 var $2297=(($2296+($2293<<2))|0);
 var $2298=HEAP32[(($2297)>>2)];
 var $2299=(($2298)|0);
 var $2300=HEAP32[(($2299)>>2)];
 var $2301=($2292|0)>=($2300|0);
 if($2301){label=340;break;}else{label=341;break;}
 case 340: 
 var $2325=$dummy;label=342;break;
 case 341: 
 var $2304=$r;
 var $2305=$c;
 var $2306=$i;
 var $2307=$2;
 var $2308=(($2307)|0);
 var $2309=(($2308+168)|0);
 var $2310=HEAP32[(($2309)>>2)];
 var $2311=(($2310+($2306<<2))|0);
 var $2312=HEAP32[(($2311)>>2)];
 var $2313=(($2312+4)|0);
 var $2314=(($2313+($2305<<2))|0);
 var $2315=HEAP32[(($2314)>>2)];
 var $2316=$2;
 var $2317=(($2316)|0);
 var $2318=(($2317+172)|0);
 var $2319=HEAP32[(($2318)>>2)];
 var $2320=(($2319+($2315<<2))|0);
 var $2321=HEAP32[(($2320)>>2)];
 var $2322=(($2321+4)|0);
 var $2323=(($2322+($2304<<3))|0);
 var $2325=$2323;label=342;break;
 case 342: 
 var $2325;
 $event=$2325;
 var $2326=$c;
 var $2327=(($mask+$2326)|0);
 var $2328=HEAP8[($2327)];
 var $2329=($2328&255);
 var $2330=$2329&1;
 var $2331=($2330|0)!=0;
 if($2331){label=343;break;}else{label=351;break;}
 case 343: 
 var $2333=$3;
 var $2334=_hio_read8($2333);
 $b=$2334;
 var $2335=$b;
 var $2336=($2335&255);
 if(($2336|0)==255){ label=344;break;}else if(($2336|0)==254){ label=345;break;}else{label=346;break;}
 case 344: 
 $b=-127;
 label=350;break;
 case 345: 
 $b=-126;
 label=350;break;
 case 346: 
 var $2340=$b;
 var $2341=($2340&255);
 var $2342=($2341|0)>119;
 if($2342){label=347;break;}else{label=348;break;}
 case 347: 
 $b=-125;
 label=349;break;
 case 348: 
 var $2345=$b;
 var $2346=((($2345)+(1))&255);
 $b=$2346;
 label=349;break;
 case 349: 
 label=350;break;
 case 350: 
 var $2349=$b;
 var $2350=$event;
 var $2351=(($2350)|0);
 HEAP8[($2351)]=$2349;
 var $2352=$c;
 var $2353=(($lastevent+($2352<<3))|0);
 var $2354=(($2353)|0);
 HEAP8[($2354)]=$2349;
 var $2355=$pat_len;
 var $2356=((($2355)-(1))|0);
 $pat_len=$2356;
 label=351;break;
 case 351: 
 var $2358=$c;
 var $2359=(($mask+$2358)|0);
 var $2360=HEAP8[($2359)];
 var $2361=($2360&255);
 var $2362=$2361&2;
 var $2363=($2362|0)!=0;
 if($2363){label=352;break;}else{label=353;break;}
 case 352: 
 var $2365=$3;
 var $2366=_hio_read8($2365);
 $b=$2366;
 var $2367=$b;
 var $2368=$event;
 var $2369=(($2368+1)|0);
 HEAP8[($2369)]=$2367;
 var $2370=$c;
 var $2371=(($lastevent+($2370<<3))|0);
 var $2372=(($2371+1)|0);
 HEAP8[($2372)]=$2367;
 var $2373=$pat_len;
 var $2374=((($2373)-(1))|0);
 $pat_len=$2374;
 label=353;break;
 case 353: 
 var $2376=$c;
 var $2377=(($mask+$2376)|0);
 var $2378=HEAP8[($2377)];
 var $2379=($2378&255);
 var $2380=$2379&4;
 var $2381=($2380|0)!=0;
 if($2381){label=354;break;}else{label=355;break;}
 case 354: 
 var $2383=$3;
 var $2384=_hio_read8($2383);
 $b=$2384;
 var $2385=$b;
 var $2386=$event;
 var $2387=(($2386+2)|0);
 HEAP8[($2387)]=$2385;
 var $2388=$c;
 var $2389=(($lastevent+($2388<<3))|0);
 var $2390=(($2389+2)|0);
 HEAP8[($2390)]=$2385;
 var $2391=$event;
 _xlat_volfx($2391);
 var $2392=$pat_len;
 var $2393=((($2392)-(1))|0);
 $pat_len=$2393;
 label=355;break;
 case 355: 
 var $2395=$c;
 var $2396=(($mask+$2395)|0);
 var $2397=HEAP8[($2396)];
 var $2398=($2397&255);
 var $2399=$2398&8;
 var $2400=($2399|0)!=0;
 if($2400){label=356;break;}else{label=357;break;}
 case 356: 
 var $2402=$3;
 var $2403=_hio_read8($2402);
 $b=$2403;
 var $2404=$b;
 var $2405=$event;
 var $2406=(($2405+3)|0);
 HEAP8[($2406)]=$2404;
 var $2407=$3;
 var $2408=_hio_read8($2407);
 var $2409=$event;
 var $2410=(($2409+4)|0);
 HEAP8[($2410)]=$2408;
 var $2411=$c;
 var $2412=$event;
 var $2413=(($arpeggio_val)|0);
 var $2414=(($last_fxp)|0);
 var $2415=$new_fx;
 _xlat_fx319($2411,$2412,$2413,$2414,$2415);
 var $2416=$event;
 var $2417=(($2416+3)|0);
 var $2418=HEAP8[($2417)];
 var $2419=$c;
 var $2420=(($lastevent+($2419<<3))|0);
 var $2421=(($2420+3)|0);
 HEAP8[($2421)]=$2418;
 var $2422=$event;
 var $2423=(($2422+4)|0);
 var $2424=HEAP8[($2423)];
 var $2425=$c;
 var $2426=(($lastevent+($2425<<3))|0);
 var $2427=(($2426+4)|0);
 HEAP8[($2427)]=$2424;
 var $2428=$pat_len;
 var $2429=((($2428)-(2))|0);
 $pat_len=$2429;
 label=357;break;
 case 357: 
 var $2431=$c;
 var $2432=(($mask+$2431)|0);
 var $2433=HEAP8[($2432)];
 var $2434=($2433&255);
 var $2435=$2434&16;
 var $2436=($2435|0)!=0;
 if($2436){label=358;break;}else{label=359;break;}
 case 358: 
 var $2438=$c;
 var $2439=(($lastevent+($2438<<3))|0);
 var $2440=(($2439)|0);
 var $2441=HEAP8[($2440)];
 var $2442=$event;
 var $2443=(($2442)|0);
 HEAP8[($2443)]=$2441;
 label=359;break;
 case 359: 
 var $2445=$c;
 var $2446=(($mask+$2445)|0);
 var $2447=HEAP8[($2446)];
 var $2448=($2447&255);
 var $2449=$2448&32;
 var $2450=($2449|0)!=0;
 if($2450){label=360;break;}else{label=361;break;}
 case 360: 
 var $2452=$c;
 var $2453=(($lastevent+($2452<<3))|0);
 var $2454=(($2453+1)|0);
 var $2455=HEAP8[($2454)];
 var $2456=$event;
 var $2457=(($2456+1)|0);
 HEAP8[($2457)]=$2455;
 label=361;break;
 case 361: 
 var $2459=$c;
 var $2460=(($mask+$2459)|0);
 var $2461=HEAP8[($2460)];
 var $2462=($2461&255);
 var $2463=$2462&64;
 var $2464=($2463|0)!=0;
 if($2464){label=362;break;}else{label=363;break;}
 case 362: 
 var $2466=$c;
 var $2467=(($lastevent+($2466<<3))|0);
 var $2468=(($2467+2)|0);
 var $2469=HEAP8[($2468)];
 var $2470=$event;
 var $2471=(($2470+2)|0);
 HEAP8[($2471)]=$2469;
 var $2472=$event;
 _xlat_volfx($2472);
 label=363;break;
 case 363: 
 var $2474=$c;
 var $2475=(($mask+$2474)|0);
 var $2476=HEAP8[($2475)];
 var $2477=($2476&255);
 var $2478=$2477&128;
 var $2479=($2478|0)!=0;
 if($2479){label=364;break;}else{label=365;break;}
 case 364: 
 var $2481=$c;
 var $2482=(($lastevent+($2481<<3))|0);
 var $2483=(($2482+3)|0);
 var $2484=HEAP8[($2483)];
 var $2485=$event;
 var $2486=(($2485+3)|0);
 HEAP8[($2486)]=$2484;
 var $2487=$c;
 var $2488=(($lastevent+($2487<<3))|0);
 var $2489=(($2488+4)|0);
 var $2490=HEAP8[($2489)];
 var $2491=$event;
 var $2492=(($2491+4)|0);
 HEAP8[($2492)]=$2490;
 label=365;break;
 case 365: 
 label=333;break;
 case 366: 
 label=367;break;
 case 367: 
 var $2496=$i;
 var $2497=((($2496)+(1))|0);
 $i=$2497;
 label=319;break;
 case 368: 
 var $2499=$pp_pat;
 var $2500=$2499;
 _free($2500);
 var $2501=$pp_smp;
 var $2502=$2501;
 _free($2502);
 var $2503=$pp_ins;
 var $2504=$2503;
 _free($2504);
 var $2505=$2;
 var $2506=(($2505+1280)|0);
 var $2507=HEAP32[(($2506)>>2)];
 var $2508=$2507|9930787;
 HEAP32[(($2506)>>2)]=$2508;
 var $2509=(($ifh+44)|0);
 var $2510=HEAP16[(($2509)>>1)];
 var $2511=($2510&65535);
 var $2512=$2511&32;
 var $2513=($2512|0)!=0;
 if($2513){label=369;break;}else{label=370;break;}
 case 369: 
 var $2515=$2;
 var $2516=(($2515+1280)|0);
 var $2517=HEAP32[(($2516)>>2)];
 var $2518=$2517|4194304;
 HEAP32[(($2516)>>2)]=$2518;
 label=371;break;
 case 370: 
 var $2520=$2;
 var $2521=(($2520+1280)|0);
 var $2522=HEAP32[(($2521)>>2)];
 var $2523=$2522|1024;
 HEAP32[(($2521)>>2)]=$2523;
 label=371;break;
 case 371: 
 var $2525=$new_fx;
 var $2526=($2525|0)!=0;
 if($2526){label=372;break;}else{label=373;break;}
 case 372: 
 var $2528=$2;
 var $2529=(($2528+1280)|0);
 var $2530=HEAP32[(($2529)>>2)];
 var $2531=$2530|2621440;
 HEAP32[(($2529)>>2)]=$2531;
 label=374;break;
 case 373: 
 var $2533=$2;
 var $2534=(($2533+1280)|0);
 var $2535=HEAP32[(($2534)>>2)];
 var $2536=$2535&-1048577;
 HEAP32[(($2534)>>2)]=$2536;
 label=374;break;
 case 374: 
 var $2538=$2;
 var $2539=(($2538+1272)|0);
 HEAP32[(($2539)>>2)]=128;
 var $2540=$2;
 var $2541=(($2540+1284)|0);
 HEAP32[(($2541)>>2)]=3;
 $1=0;
 label=379;break;
 case 375: 
 var $2543=$pp_pat;
 var $2544=$2543;
 _free($2544);
 label=376;break;
 case 376: 
 var $2546=$pp_smp;
 var $2547=$2546;
 _free($2547);
 label=377;break;
 case 377: 
 var $2549=$pp_ins;
 var $2550=$2549;
 _free($2550);
 label=378;break;
 case 378: 
 $1=-1;
 label=379;break;
 case 379: 
 var $2553=$1;
 STACKTOP=sp;return $2553;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_name($s,$l){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 $1=$s;
 $2=$l;
 var $3=$2;
 var $4=((($3)-(1))|0);
 $2=$4;
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=$2;
 var $8=($6|0)<($7|0);
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 var $10=$i;
 var $11=$1;
 var $12=(($11+$10)|0);
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$i;
 var $18=$1;
 var $19=(($18+$17)|0);
 HEAP8[($19)]=32;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $22=$i;
 var $23=((($22)+(1))|0);
 $i=$23;
 label=2;break;
 case 7: 
 var $25=$i;
 var $26=((($25)-(1))|0);
 $i=$26;
 label=8;break;
 case 8: 
 var $28=$i;
 var $29=($28|0)>=0;
 if($29){label=9;break;}else{var $38=0;label=10;break;}
 case 9: 
 var $31=$i;
 var $32=$1;
 var $33=(($32+$31)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=($35|0)==32;
 var $38=$36;label=10;break;
 case 10: 
 var $38;
 if($38){label=11;break;}else{label=15;break;}
 case 11: 
 var $40=$i;
 var $41=$1;
 var $42=(($41+$40)|0);
 var $43=HEAP8[($42)];
 var $44=($43&255);
 var $45=($44|0)==32;
 if($45){label=12;break;}else{label=13;break;}
 case 12: 
 var $47=$i;
 var $48=$1;
 var $49=(($48+$47)|0);
 HEAP8[($49)]=0;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $52=$i;
 var $53=((($52)-(1))|0);
 $i=$53;
 label=8;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _read_envelope($ei,$env,$f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $j;
 $1=$ei;
 $2=$env;
 $3=$f;
 var $4=$3;
 var $5=_hio_read8($4);
 var $6=$2;
 var $7=(($6)|0);
 HEAP8[($7)]=$5;
 var $8=$3;
 var $9=_hio_read8($8);
 var $10=$2;
 var $11=(($10+1)|0);
 HEAP8[($11)]=$9;
 var $12=$3;
 var $13=_hio_read8($12);
 var $14=$2;
 var $15=(($14+2)|0);
 HEAP8[($15)]=$13;
 var $16=$3;
 var $17=_hio_read8($16);
 var $18=$2;
 var $19=(($18+3)|0);
 HEAP8[($19)]=$17;
 var $20=$3;
 var $21=_hio_read8($20);
 var $22=$2;
 var $23=(($22+4)|0);
 HEAP8[($23)]=$21;
 var $24=$3;
 var $25=_hio_read8($24);
 var $26=$2;
 var $27=(($26+5)|0);
 HEAP8[($27)]=$25;
 $j=0;
 label=2;break;
 case 2: 
 var $29=$j;
 var $30=($29|0)<25;
 if($30){label=3;break;}else{label=5;break;}
 case 3: 
 var $32=$3;
 var $33=_hio_read8($32);
 var $34=$j;
 var $35=$2;
 var $36=(($35+6)|0);
 var $37=(($36+($34<<2))|0);
 var $38=(($37)|0);
 HEAP8[($38)]=$33;
 var $39=$3;
 var $40=_hio_read16l($39);
 var $41=$j;
 var $42=$2;
 var $43=(($42+6)|0);
 var $44=(($43+($41<<2))|0);
 var $45=(($44+2)|0);
 HEAP16[(($45)>>1)]=$40;
 label=4;break;
 case 4: 
 var $47=$j;
 var $48=((($47)+(1))|0);
 $j=$48;
 label=2;break;
 case 5: 
 var $50=$3;
 var $51=_hio_read8($50);
 var $52=$2;
 var $53=(($52+106)|0);
 HEAP8[($53)]=$51;
 var $54=$2;
 var $55=(($54)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=$57&1;
 var $59=($58|0)!=0;
 var $60=($59?1:0);
 var $61=$1;
 var $62=(($61)|0);
 HEAP32[(($62)>>2)]=$60;
 var $63=$2;
 var $64=(($63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=$66&2;
 var $68=($67|0)!=0;
 var $69=($68?4:0);
 var $70=$1;
 var $71=(($70)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$72|$69;
 HEAP32[(($71)>>2)]=$73;
 var $74=$2;
 var $75=(($74)|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=$77&4;
 var $79=($78|0)!=0;
 var $80=($79?18:0);
 var $81=$1;
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$83|$80;
 HEAP32[(($82)>>2)]=$84;
 var $85=$2;
 var $86=(($85)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=$88&8;
 var $90=($89|0)!=0;
 var $91=($90?32:0);
 var $92=$1;
 var $93=(($92)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$94|$91;
 HEAP32[(($93)>>2)]=$95;
 var $96=$2;
 var $97=(($96+1)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$1;
 var $101=(($100+4)|0);
 HEAP32[(($101)>>2)]=$99;
 var $102=$2;
 var $103=(($102+4)|0);
 var $104=HEAP8[($103)];
 var $105=($104&255);
 var $106=$1;
 var $107=(($106+12)|0);
 HEAP32[(($107)>>2)]=$105;
 var $108=$2;
 var $109=(($108+5)|0);
 var $110=HEAP8[($109)];
 var $111=($110&255);
 var $112=$1;
 var $113=(($112+16)|0);
 HEAP32[(($113)>>2)]=$111;
 var $114=$2;
 var $115=(($114+2)|0);
 var $116=HEAP8[($115)];
 var $117=($116&255);
 var $118=$1;
 var $119=(($118+20)|0);
 HEAP32[(($119)>>2)]=$117;
 var $120=$2;
 var $121=(($120+3)|0);
 var $122=HEAP8[($121)];
 var $123=($122&255);
 var $124=$1;
 var $125=(($124+24)|0);
 HEAP32[(($125)>>2)]=$123;
 var $126=$1;
 var $127=(($126+4)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($128|0)>0;
 if($129){label=6;break;}else{label=12;break;}
 case 6: 
 var $131=$1;
 var $132=(($131+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($133|0)<32;
 if($134){label=7;break;}else{label=12;break;}
 case 7: 
 $j=0;
 label=8;break;
 case 8: 
 var $137=$j;
 var $138=$1;
 var $139=(($138+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($137|0)<($140|0);
 if($141){label=9;break;}else{label=11;break;}
 case 9: 
 var $143=$j;
 var $144=$2;
 var $145=(($144+6)|0);
 var $146=(($145+($143<<2))|0);
 var $147=(($146+2)|0);
 var $148=HEAP16[(($147)>>1)];
 var $149=$j;
 var $150=($149<<1);
 var $151=$1;
 var $152=(($151+28)|0);
 var $153=(($152+($150<<1))|0);
 HEAP16[(($153)>>1)]=$148;
 var $154=$j;
 var $155=$2;
 var $156=(($155+6)|0);
 var $157=(($156+($154<<2))|0);
 var $158=(($157)|0);
 var $159=HEAP8[($158)];
 var $160=(($159<<24)>>24);
 var $161=$j;
 var $162=($161<<1);
 var $163=((($162)+(1))|0);
 var $164=$1;
 var $165=(($164+28)|0);
 var $166=(($165+($163<<1))|0);
 HEAP16[(($166)>>1)]=$160;
 label=10;break;
 case 10: 
 var $168=$j;
 var $169=((($168)+(1))|0);
 $j=$169;
 label=8;break;
 case 11: 
 label=13;break;
 case 12: 
 var $172=$1;
 var $173=(($172)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-2;
 HEAP32[(($173)>>2)]=$175;
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_volfx($event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $b;
 $1=$event;
 var $2=$1;
 var $3=(($2+2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 $b=$5;
 var $6=$1;
 var $7=(($6+2)|0);
 HEAP8[($7)]=0;
 var $8=$b;
 var $9=($8|0)<=64;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$b;
 var $12=((($11)+(1))|0);
 var $13=(($12)&255);
 var $14=$1;
 var $15=(($14+2)|0);
 HEAP8[($15)]=$13;
 label=41;break;
 case 3: 
 var $17=$b;
 var $18=($17|0)>=65;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$b;
 var $21=($20|0)<=74;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$1;
 var $24=(($23+5)|0);
 HEAP8[($24)]=14;
 var $25=$b;
 var $26=((($25)-(65))|0);
 var $27=160|$26;
 var $28=(($27)&255);
 var $29=$1;
 var $30=(($29+6)|0);
 HEAP8[($30)]=$28;
 label=40;break;
 case 6: 
 var $32=$b;
 var $33=($32|0)>=75;
 if($33){label=7;break;}else{label=9;break;}
 case 7: 
 var $35=$b;
 var $36=($35|0)<=84;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$1;
 var $39=(($38+5)|0);
 HEAP8[($39)]=14;
 var $40=$b;
 var $41=((($40)-(75))|0);
 var $42=176|$41;
 var $43=(($42)&255);
 var $44=$1;
 var $45=(($44+6)|0);
 HEAP8[($45)]=$43;
 label=39;break;
 case 9: 
 var $47=$b;
 var $48=($47|0)>=85;
 if($48){label=10;break;}else{label=12;break;}
 case 10: 
 var $50=$b;
 var $51=($50|0)<=94;
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $53=$1;
 var $54=(($53+5)|0);
 HEAP8[($54)]=-92;
 var $55=$b;
 var $56=((($55)-(85))|0);
 var $57=$56<<4;
 var $58=(($57)&255);
 var $59=$1;
 var $60=(($59+6)|0);
 HEAP8[($60)]=$58;
 label=38;break;
 case 12: 
 var $62=$b;
 var $63=($62|0)>=95;
 if($63){label=13;break;}else{label=15;break;}
 case 13: 
 var $65=$b;
 var $66=($65|0)<=104;
 if($66){label=14;break;}else{label=15;break;}
 case 14: 
 var $68=$1;
 var $69=(($68+5)|0);
 HEAP8[($69)]=-92;
 var $70=$b;
 var $71=((($70)-(95))|0);
 var $72=(($71)&255);
 var $73=$1;
 var $74=(($73+6)|0);
 HEAP8[($74)]=$72;
 label=37;break;
 case 15: 
 var $76=$b;
 var $77=($76|0)>=105;
 if($77){label=16;break;}else{label=18;break;}
 case 16: 
 var $79=$b;
 var $80=($79|0)<=114;
 if($80){label=17;break;}else{label=18;break;}
 case 17: 
 var $82=$1;
 var $83=(($82+5)|0);
 HEAP8[($83)]=2;
 var $84=$b;
 var $85=((($84)-(105))|0);
 var $86=$85<<2;
 var $87=(($86)&255);
 var $88=$1;
 var $89=(($88+6)|0);
 HEAP8[($89)]=$87;
 label=36;break;
 case 18: 
 var $91=$b;
 var $92=($91|0)>=115;
 if($92){label=19;break;}else{label=21;break;}
 case 19: 
 var $94=$b;
 var $95=($94|0)<=124;
 if($95){label=20;break;}else{label=21;break;}
 case 20: 
 var $97=$1;
 var $98=(($97+5)|0);
 HEAP8[($98)]=1;
 var $99=$b;
 var $100=((($99)-(115))|0);
 var $101=$100<<2;
 var $102=(($101)&255);
 var $103=$1;
 var $104=(($103+6)|0);
 HEAP8[($104)]=$102;
 label=35;break;
 case 21: 
 var $106=$b;
 var $107=($106|0)>=128;
 if($107){label=22;break;}else{label=26;break;}
 case 22: 
 var $109=$b;
 var $110=($109|0)<=192;
 if($110){label=23;break;}else{label=26;break;}
 case 23: 
 var $112=$b;
 var $113=($112|0)==192;
 if($113){label=24;break;}else{label=25;break;}
 case 24: 
 $b=191;
 label=25;break;
 case 25: 
 var $116=$1;
 var $117=(($116+5)|0);
 HEAP8[($117)]=22;
 var $118=$b;
 var $119=((($118)-(128))|0);
 var $120=$119<<2;
 var $121=(($120)&255);
 var $122=$1;
 var $123=(($122+6)|0);
 HEAP8[($123)]=$121;
 label=34;break;
 case 26: 
 var $125=$b;
 var $126=($125|0)>=193;
 if($126){label=27;break;}else{label=29;break;}
 case 27: 
 var $128=$b;
 var $129=($128|0)<=202;
 if($129){label=28;break;}else{label=29;break;}
 case 28: 
 var $131=$1;
 var $132=(($131+5)|0);
 HEAP8[($132)]=3;
 var $133=$b;
 var $134=((($133)-(193))|0);
 var $135=$134<<2;
 var $136=(($135)&255);
 var $137=$1;
 var $138=(($137+6)|0);
 HEAP8[($138)]=$136;
 label=33;break;
 case 29: 
 var $140=$b;
 var $141=($140|0)>=203;
 if($141){label=30;break;}else{label=32;break;}
 case 30: 
 var $143=$b;
 var $144=($143|0)<=212;
 if($144){label=31;break;}else{label=32;break;}
 case 31: 
 var $146=$1;
 var $147=(($146+5)|0);
 HEAP8[($147)]=4;
 var $148=$b;
 var $149=((($148)-(203))|0);
 var $150=(($149)&255);
 var $151=$1;
 var $152=(($151+6)|0);
 HEAP8[($152)]=$150;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_fx319($c,$e,$arpeggio_val,$last_fxp,$new_fx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $h;
 var $l;
 $1=$c;
 $2=$e;
 $3=$arpeggio_val;
 $4=$last_fxp;
 $5=$new_fx;
 var $6=$2;
 var $7=(($6+4)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 var $10=$9&240;
 var $11=$10>>4;
 var $12=(($11)&255);
 $h=$12;
 var $13=$2;
 var $14=(($13+4)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=$16&15;
 var $18=(($17)&255);
 $l=$18;
 var $19=$2;
 var $20=(($19+3)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=((7720+$22)|0);
 var $24=HEAP8[($23)];
 var $25=$2;
 var $26=(($25+3)|0);
 HEAP8[($26)]=$24;
 var $27=($24&255);
 switch(($27|0)){case 0:{ label=2;break;}case 132:{ label=30;break;}case 29:{ label=35;break;}case 16:{ label=39;break;}case 255:{ label=42;break;}case 254:{ label=6;break;}default:{label=43;break;}}break;
 case 2: 
 var $29=$2;
 var $30=(($29+4)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24)!=0;
 if($32){label=3;break;}else{label=4;break;}
 case 3: 
 var $34=$2;
 var $35=(($34+4)|0);
 var $36=HEAP8[($35)];
 var $37=$1;
 var $38=$3;
 var $39=(($38+$37)|0);
 HEAP8[($39)]=$36;
 label=5;break;
 case 4: 
 var $41=$1;
 var $42=$3;
 var $43=(($42+$41)|0);
 var $44=HEAP8[($43)];
 var $45=$2;
 var $46=(($45+4)|0);
 HEAP8[($46)]=$44;
 label=5;break;
 case 5: 
 label=43;break;
 case 6: 
 var $49=$2;
 var $50=(($49+3)|0);
 HEAP8[($50)]=14;
 var $51=$h;
 var $52=($51&255);
 var $53=($52|0)==0;
 if($53){label=7;break;}else{label=9;break;}
 case 7: 
 var $55=$2;
 var $56=(($55+4)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=($58|0)==0;
 if($59){label=8;break;}else{label=9;break;}
 case 8: 
 var $61=$1;
 var $62=$4;
 var $63=(($62+$61)|0);
 var $64=HEAP8[($63)];
 var $65=$2;
 var $66=(($65+4)|0);
 HEAP8[($66)]=$64;
 var $67=$2;
 var $68=(($67+4)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 var $71=$70&240;
 var $72=$71>>4;
 var $73=(($72)&255);
 $h=$73;
 var $74=$2;
 var $75=(($74+4)|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=$77&15;
 var $79=(($78)&255);
 $l=$79;
 label=10;break;
 case 9: 
 var $81=$2;
 var $82=(($81+4)|0);
 var $83=HEAP8[($82)];
 var $84=$1;
 var $85=$4;
 var $86=(($85+$84)|0);
 HEAP8[($86)]=$83;
 label=10;break;
 case 10: 
 var $88=$h;
 var $89=($88&255);
 switch(($89|0)){case 1:{ label=11;break;}case 2:{ label=12;break;}case 3:{ label=13;break;}case 4:{ label=14;break;}case 5:{ label=15;break;}case 6:{ label=19;break;}case 7:{ label=20;break;}case 8:{ label=21;break;}case 9:{ label=22;break;}case 11:{ label=23;break;}case 12:case 13:{ label=24;break;}case 14:{ label=27;break;}default:{label=28;break;}}break;
 case 11: 
 var $91=$l;
 var $92=($91&255);
 var $93=48|$92;
 var $94=(($93)&255);
 var $95=$2;
 var $96=(($95+4)|0);
 HEAP8[($96)]=$94;
 label=29;break;
 case 12: 
 var $98=$l;
 var $99=($98&255);
 var $100=80|$99;
 var $101=(($100)&255);
 var $102=$2;
 var $103=(($102+4)|0);
 HEAP8[($103)]=$101;
 label=29;break;
 case 13: 
 var $105=$l;
 var $106=($105&255);
 var $107=64|$106;
 var $108=(($107)&255);
 var $109=$2;
 var $110=(($109+4)|0);
 HEAP8[($110)]=$108;
 label=29;break;
 case 14: 
 var $112=$l;
 var $113=($112&255);
 var $114=112|$113;
 var $115=(($114)&255);
 var $116=$2;
 var $117=(($116+4)|0);
 HEAP8[($117)]=$115;
 label=29;break;
 case 15: 
 var $119=$l;
 var $120=($119&255);
 var $121=($120|0)<=3;
 if($121){label=16;break;}else{label=17;break;}
 case 16: 
 var $123=$2;
 var $124=(($123+3)|0);
 HEAP8[($124)]=-117;
 var $125=$l;
 var $126=$2;
 var $127=(($126+4)|0);
 HEAP8[($127)]=$125;
 label=18;break;
 case 17: 
 var $129=$2;
 var $130=(($129+4)|0);
 HEAP8[($130)]=0;
 var $131=$2;
 var $132=(($131+3)|0);
 HEAP8[($132)]=0;
 label=18;break;
 case 18: 
 label=29;break;
 case 19: 
 var $135=$l;
 var $136=($135&255);
 var $137=224|$136;
 var $138=(($137)&255);
 var $139=$2;
 var $140=(($139+4)|0);
 HEAP8[($140)]=$138;
 label=29;break;
 case 20: 
 var $142=$2;
 var $143=(($142+3)|0);
 HEAP8[($143)]=-125;
 var $144=$2;
 var $145=(($144+4)|0);
 var $146=HEAP8[($145)];
 var $147=($146&255);
 var $148=$147&15;
 var $149=(($148)&255);
 HEAP8[($145)]=$149;
 label=29;break;
 case 21: 
 var $151=$2;
 var $152=(($151+3)|0);
 HEAP8[($152)]=22;
 var $153=$l;
 var $154=($153&255);
 var $155=$154<<4;
 var $156=(($155)&255);
 var $157=$2;
 var $158=(($157+4)|0);
 HEAP8[($158)]=$156;
 label=29;break;
 case 22: 
 var $160=$2;
 var $161=(($160+4)|0);
 HEAP8[($161)]=0;
 var $162=$2;
 var $163=(($162+3)|0);
 HEAP8[($163)]=0;
 label=29;break;
 case 23: 
 var $165=$l;
 var $166=($165&255);
 var $167=96|$166;
 var $168=(($167)&255);
 var $169=$2;
 var $170=(($169+4)|0);
 HEAP8[($170)]=$168;
 label=29;break;
 case 24: 
 var $172=$l;
 var $173=$2;
 var $174=(($173+4)|0);
 HEAP8[($174)]=$172;
 var $175=($172&255);
 var $176=($175|0)==0;
 if($176){label=25;break;}else{label=26;break;}
 case 25: 
 var $178=$2;
 var $179=(($178+4)|0);
 var $180=HEAP8[($179)];
 var $181=((($180)+(1))&255);
 HEAP8[($179)]=$181;
 label=26;break;
 case 26: 
 var $183=$h;
 var $184=($183&255);
 var $185=$184<<4;
 var $186=$2;
 var $187=(($186+4)|0);
 var $188=HEAP8[($187)];
 var $189=($188&255);
 var $190=$189|$185;
 var $191=(($190)&255);
 HEAP8[($187)]=$191;
 label=29;break;
 case 27: 
 var $193=$2;
 var $194=(($193+3)|0);
 HEAP8[($194)]=-120;
 var $195=$l;
 var $196=$2;
 var $197=(($196+4)|0);
 HEAP8[($197)]=$195;
 label=29;break;
 case 28: 
 var $199=$2;
 var $200=(($199+4)|0);
 HEAP8[($200)]=0;
 var $201=$2;
 var $202=(($201+3)|0);
 HEAP8[($202)]=0;
 label=29;break;
 case 29: 
 label=43;break;
 case 30: 
 var $205=$2;
 var $206=(($205+4)|0);
 var $207=HEAP8[($206)];
 var $208=($207&255);
 var $209=($208|0)>127;
 if($209){label=31;break;}else{label=33;break;}
 case 31: 
 var $211=$2;
 var $212=(($211+4)|0);
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=($214|0)<144;
 if($215){label=32;break;}else{label=33;break;}
 case 32: 
 var $217=$2;
 var $218=(($217+3)|0);
 HEAP8[($218)]=-123;
 var $219=$2;
 var $220=(($219+4)|0);
 var $221=HEAP8[($220)];
 var $222=($221&255);
 var $223=((($222)-(128))|0);
 var $224=($223<<4);
 var $225=(($224)&255);
 var $226=$2;
 var $227=(($226+4)|0);
 HEAP8[($227)]=$225;
 label=34;break;
 case 33: 
 var $229=$2;
 var $230=(($229+4)|0);
 var $231=HEAP8[($230)];
 var $232=($231&255);
 var $233=($232<<1);
 var $234=(($233)&255);
 HEAP8[($230)]=$234;
 label=34;break;
 case 34: 
 label=43;break;
 case 35: 
 var $237=$5;
 var $238=($237|0)!=0;
 if($238){label=38;break;}else{label=36;break;}
 case 36: 
 var $240=$2;
 var $241=(($240+4)|0);
 var $242=HEAP8[($241)];
 var $243=($242&255);
 var $244=($243|0)!=0;
 if($244){label=37;break;}else{label=38;break;}
 case 37: 
 var $246=$2;
 var $247=(($246+4)|0);
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249&240;
 var $251=$250>>4;
 var $252=((($251)+(1))|0);
 var $253=$252<<4;
 var $254=$2;
 var $255=(($254+4)|0);
 var $256=HEAP8[($255)];
 var $257=($256&255);
 var $258=$257&15;
 var $259=((($258)+(1))|0);
 var $260=$253|$259;
 var $261=(($260)&255);
 var $262=$2;
 var $263=(($262+4)|0);
 HEAP8[($263)]=$261;
 label=38;break;
 case 38: 
 label=43;break;
 case 39: 
 var $266=$2;
 var $267=(($266+4)|0);
 var $268=HEAP8[($267)];
 var $269=($268&255);
 var $270=($269|0)>128;
 if($270){label=40;break;}else{label=41;break;}
 case 40: 
 var $272=$2;
 var $273=(($272+4)|0);
 HEAP8[($273)]=0;
 var $274=$2;
 var $275=(($274+3)|0);
 HEAP8[($275)]=0;
 label=41;break;
 case 41: 
 label=43;break;
 case 42: 
 var $278=$2;
 var $279=(($278+4)|0);
 HEAP8[($279)]=0;
 var $280=$2;
 var $281=(($280+3)|0);
 HEAP8[($281)]=0;
 label=43;break;
 case 43: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _itsex_decompress8($src,$dst,$len,$it215){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $size;
 var $block_count;
 var $bitbuf=sp;
 var $bitnum=(sp)+(8);
 var $left;
 var $temp;
 var $temp2;
 var $d;
 var $pos;
 var $bits;
 var $i;
 var $j;
 var $i1;
 var $j2;
 var $shift;
 var $c;
 $2=$src;
 $3=$dst;
 $4=$len;
 $5=$it215;
 $size=0;
 $block_count=0;
 HEAP32[(($bitbuf)>>2)]=0;
 HEAP32[(($bitnum)>>2)]=0;
 $left=0;
 $temp=0;
 $temp2=0;
 label=2;break;
 case 2: 
 var $7=$4;
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=42;break;}
 case 3: 
 var $10=$block_count;
 var $11=($10|0)!=0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 $block_count=32768;
 var $13=$2;
 var $14=_hio_read16l($13);
 var $15=($14&65535);
 $size=$15;
 $left=9;
 $temp2=0;
 $temp=0;
 HEAP32[(($bitnum)>>2)]=0;
 HEAP32[(($bitbuf)>>2)]=0;
 label=5;break;
 case 5: 
 var $17=$block_count;
 $d=$17;
 var $18=$d;
 var $19=$4;
 var $20=($18>>>0)>($19>>>0);
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$4;
 $d=$22;
 label=7;break;
 case 7: 
 $pos=0;
 label=8;break;
 case 8: 
 var $25=$2;
 var $26=$left;
 var $27=($26&255);
 var $28=_read_bits322($25,$bitbuf,$bitnum,$27);
 var $29=(($28)&65535);
 $bits=$29;
 var $30=$2;
 var $31=_hio_eof($30);
 var $32=($31|0)!=0;
 if($32){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=43;break;
 case 10: 
 var $35=$left;
 var $36=($35&255);
 var $37=($36|0)<7;
 if($37){label=11;break;}else{label=19;break;}
 case 11: 
 var $39=$left;
 var $40=($39&255);
 var $41=((($40)-(1))|0);
 var $42=1<<$41;
 $i=$42;
 var $43=$bits;
 var $44=($43&65535);
 var $45=$44&65535;
 $j=$45;
 var $46=$i;
 var $47=$j;
 var $48=($46|0)!=($47|0);
 if($48){label=12;break;}else{label=13;break;}
 case 12: 
 label=32;break;
 case 13: 
 var $51=$2;
 var $52=_read_bits322($51,$bitbuf,$bitnum,3);
 var $53=((($52)+(1))|0);
 var $54=$53&255;
 var $55=(($54)&65535);
 $bits=$55;
 var $56=$2;
 var $57=_hio_eof($56);
 var $58=($57|0)!=0;
 if($58){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=43;break;
 case 15: 
 var $61=$bits;
 var $62=(($61)&255);
 var $63=($62&255);
 var $64=$left;
 var $65=($64&255);
 var $66=($63|0)<($65|0);
 if($66){label=16;break;}else{label=17;break;}
 case 16: 
 var $68=$bits;
 var $69=(($68)&255);
 var $70=($69&255);
 var $79=$70;label=18;break;
 case 17: 
 var $72=$bits;
 var $73=($72&65535);
 var $74=((($73)+(1))|0);
 var $75=$74&255;
 var $76=(($75)&255);
 var $77=($76&255);
 var $79=$77;label=18;break;
 case 18: 
 var $79;
 var $80=(($79)&255);
 $left=$80;
 label=39;break;
 case 19: 
 var $82=$left;
 var $83=($82&255);
 var $84=($83|0)<9;
 if($84){label=20;break;}else{label=27;break;}
 case 20: 
 var $86=$left;
 var $87=($86&255);
 var $88=(((9)-($87))|0);
 var $89=255>>($88|0);
 var $90=((($89)+(4))|0);
 var $91=(($90)&65535);
 $i1=$91;
 var $92=$i1;
 var $93=($92&65535);
 var $94=((($93)-(8))|0);
 var $95=(($94)&65535);
 $j2=$95;
 var $96=$bits;
 var $97=($96&65535);
 var $98=$j2;
 var $99=($98&65535);
 var $100=($97|0)<=($99|0);
 if($100){label=22;break;}else{label=21;break;}
 case 21: 
 var $102=$bits;
 var $103=($102&65535);
 var $104=$i1;
 var $105=($104&65535);
 var $106=($103|0)>($105|0);
 if($106){label=22;break;}else{label=23;break;}
 case 22: 
 label=32;break;
 case 23: 
 var $109=$j2;
 var $110=($109&65535);
 var $111=$bits;
 var $112=($111&65535);
 var $113=((($112)-($110))|0);
 var $114=(($113)&65535);
 $bits=$114;
 var $115=$bits;
 var $116=($115&65535);
 var $117=$116&255;
 var $118=(($117)&255);
 var $119=($118&255);
 var $120=$left;
 var $121=($120&255);
 var $122=($119|0)<($121|0);
 if($122){label=24;break;}else{label=25;break;}
 case 24: 
 var $124=$bits;
 var $125=($124&65535);
 var $126=$125&255;
 var $127=(($126)&255);
 var $128=($127&255);
 var $137=$128;label=26;break;
 case 25: 
 var $130=$bits;
 var $131=($130&65535);
 var $132=((($131)+(1))|0);
 var $133=$132&255;
 var $134=(($133)&255);
 var $135=($134&255);
 var $137=$135;label=26;break;
 case 26: 
 var $137;
 var $138=(($137)&255);
 $left=$138;
 label=39;break;
 case 27: 
 var $140=$left;
 var $141=($140&255);
 var $142=($141|0)>=10;
 if($142){label=28;break;}else{label=29;break;}
 case 28: 
 label=38;break;
 case 29: 
 var $145=$bits;
 var $146=($145&65535);
 var $147=($146|0)>=256;
 if($147){label=30;break;}else{label=31;break;}
 case 30: 
 var $149=$bits;
 var $150=($149&65535);
 var $151=((($150)+(1))|0);
 var $152=(($151)&255);
 var $153=($152&255);
 var $154=$153&255;
 var $155=(($154)&255);
 $left=$155;
 label=39;break;
 case 31: 
 label=32;break;
 case 32: 
 var $158=$left;
 var $159=($158&255);
 var $160=($159|0)<8;
 if($160){label=33;break;}else{label=34;break;}
 case 33: 
 var $162=$left;
 var $163=($162&255);
 var $164=(((8)-($163))|0);
 var $165=(($164)&255);
 $shift=$165;
 var $166=$bits;
 var $167=($166&65535);
 var $168=$shift;
 var $169=($168&255);
 var $170=$167<<$169;
 var $171=(($170)&255);
 $c=$171;
 var $172=$shift;
 var $173=($172&255);
 var $174=$c;
 var $175=(($174<<24)>>24);
 var $176=$175>>($173|0);
 var $177=(($176)&255);
 $c=$177;
 var $178=$c;
 var $179=(($178<<24)>>24);
 $bits=$179;
 label=34;break;
 case 34: 
 var $181=$temp;
 var $182=($181&255);
 var $183=$bits;
 var $184=($183&65535);
 var $185=((($184)+($182))|0);
 var $186=(($185)&65535);
 $bits=$186;
 var $187=$bits;
 var $188=(($187)&255);
 $temp=$188;
 var $189=$temp;
 var $190=($189&255);
 var $191=$temp2;
 var $192=($191&255);
 var $193=((($192)+($190))|0);
 var $194=(($193)&255);
 $temp2=$194;
 var $195=$5;
 var $196=($195|0)!=0;
 if($196){label=35;break;}else{label=36;break;}
 case 35: 
 var $198=$temp2;
 var $199=($198&255);
 var $204=$199;label=37;break;
 case 36: 
 var $201=$temp;
 var $202=($201&255);
 var $204=$202;label=37;break;
 case 37: 
 var $204;
 var $205=(($204)&255);
 var $206=$pos;
 var $207=$3;
 var $208=(($207+$206)|0);
 HEAP8[($208)]=$205;
 label=38;break;
 case 38: 
 var $210=$pos;
 var $211=((($210)+(1))|0);
 $pos=$211;
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $214=$pos;
 var $215=$d;
 var $216=($214>>>0)<($215>>>0);
 if($216){label=8;break;}else{label=41;break;}
 case 41: 
 var $218=$d;
 var $219=$block_count;
 var $220=((($219)-($218))|0);
 $block_count=$220;
 var $221=$d;
 var $222=$4;
 var $223=((($222)-($221))|0);
 $4=$223;
 var $224=$d;
 var $225=$3;
 var $226=(($225+$224)|0);
 $3=$226;
 label=2;break;
 case 42: 
 $1=0;
 label=43;break;
 case 43: 
 var $229=$1;
 STACKTOP=sp;return $229;
  default: assert(0, "bad label: " + label);
 }
}
function _read_bits322($ibuf,$bitbuf,$bitnum,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $retval;
 var $i;
 var $bnum;
 var $bbuf;
 $1=$ibuf;
 $2=$bitbuf;
 $3=$bitnum;
 $4=$n;
 $retval=0;
 var $5=$4;
 $i=$5;
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 $bnum=$7;
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 $bbuf=$9;
 var $10=$4;
 var $11=($10|0)>0;
 if($11){label=2;break;}else{label=8;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $14=$bnum;
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$1;
 var $18=_hio_read8($17);
 var $19=($18&255);
 $bbuf=$19;
 $bnum=8;
 label=5;break;
 case 5: 
 var $21=$retval;
 var $22=$21>>>1;
 $retval=$22;
 var $23=$bbuf;
 var $24=$23<<31;
 var $25=$retval;
 var $26=$25|$24;
 $retval=$26;
 var $27=$bbuf;
 var $28=$27>>1;
 $bbuf=$28;
 var $29=$bnum;
 var $30=((($29)-(1))|0);
 $bnum=$30;
 var $31=$i;
 var $32=((($31)-(1))|0);
 $i=$32;
 label=6;break;
 case 6: 
 var $34=$i;
 var $35=($34|0)!=0;
 if($35){label=3;break;}else{label=7;break;}
 case 7: 
 var $37=$4;
 $i=$37;
 var $38=$bnum;
 var $39=$3;
 HEAP32[(($39)>>2)]=$38;
 var $40=$bbuf;
 var $41=$2;
 HEAP32[(($41)>>2)]=$40;
 label=8;break;
 case 8: 
 var $43=$retval;
 var $44=$i;
 var $45=(((32)-($44))|0);
 var $46=$43>>>($45>>>0);
 STACKTOP=sp;return $46;
  default: assert(0, "bad label: " + label);
 }
}
function _itsex_decompress16($src,$dst,$len,$it215){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $size;
 var $block_count;
 var $bitbuf=sp;
 var $bitnum=(sp)+(8);
 var $left;
 var $temp;
 var $temp2;
 var $d;
 var $pos;
 var $bits;
 var $i;
 var $j;
 var $i1;
 var $j2;
 var $shift;
 var $c;
 $2=$src;
 $3=$dst;
 $4=$len;
 $5=$it215;
 $size=0;
 $block_count=0;
 HEAP32[(($bitbuf)>>2)]=0;
 HEAP32[(($bitnum)>>2)]=0;
 $left=0;
 $temp=0;
 $temp2=0;
 label=2;break;
 case 2: 
 var $7=$4;
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=44;break;}
 case 3: 
 var $10=$block_count;
 var $11=($10|0)!=0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 $block_count=16384;
 var $13=$2;
 var $14=_hio_read16l($13);
 var $15=($14&65535);
 $size=$15;
 $left=17;
 $temp2=0;
 $temp=0;
 HEAP32[(($bitnum)>>2)]=0;
 HEAP32[(($bitbuf)>>2)]=0;
 label=5;break;
 case 5: 
 var $17=$block_count;
 $d=$17;
 var $18=$d;
 var $19=$4;
 var $20=($18>>>0)>($19>>>0);
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$4;
 $d=$22;
 label=7;break;
 case 7: 
 $pos=0;
 label=8;break;
 case 8: 
 var $25=$2;
 var $26=$left;
 var $27=($26&255);
 var $28=_read_bits322($25,$bitbuf,$bitnum,$27);
 $bits=$28;
 var $29=$2;
 var $30=_hio_eof($29);
 var $31=($30|0)!=0;
 if($31){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=45;break;
 case 10: 
 var $34=$left;
 var $35=($34&255);
 var $36=($35|0)<7;
 if($36){label=11;break;}else{label=19;break;}
 case 11: 
 var $38=$left;
 var $39=($38&255);
 var $40=((($39)-(1))|0);
 var $41=1<<$40;
 $i=$41;
 var $42=$bits;
 $j=$42;
 var $43=$i;
 var $44=$j;
 var $45=($43|0)!=($44|0);
 if($45){label=12;break;}else{label=13;break;}
 case 12: 
 label=32;break;
 case 13: 
 var $48=$2;
 var $49=_read_bits322($48,$bitbuf,$bitnum,4);
 var $50=((($49)+(1))|0);
 $bits=$50;
 var $51=$2;
 var $52=_hio_eof($51);
 var $53=($52|0)!=0;
 if($53){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=45;break;
 case 15: 
 var $56=$bits;
 var $57=$56&255;
 var $58=(($57)&255);
 var $59=($58&255);
 var $60=$left;
 var $61=($60&255);
 var $62=($59|0)<($61|0);
 if($62){label=16;break;}else{label=17;break;}
 case 16: 
 var $64=$bits;
 var $65=$64&255;
 var $66=(($65)&255);
 var $67=($66&255);
 var $75=$67;label=18;break;
 case 17: 
 var $69=$bits;
 var $70=((($69)+(1))|0);
 var $71=$70&255;
 var $72=(($71)&255);
 var $73=($72&255);
 var $75=$73;label=18;break;
 case 18: 
 var $75;
 var $76=(($75)&255);
 $left=$76;
 label=39;break;
 case 19: 
 var $78=$left;
 var $79=($78&255);
 var $80=($79|0)<17;
 if($80){label=20;break;}else{label=27;break;}
 case 20: 
 var $82=$left;
 var $83=($82&255);
 var $84=(((17)-($83))|0);
 var $85=65535>>($84|0);
 var $86=((($85)+(8))|0);
 $i1=$86;
 var $87=$i1;
 var $88=((($87)-(16))|0);
 var $89=$88&65535;
 $j2=$89;
 var $90=$bits;
 var $91=$j2;
 var $92=($90>>>0)<=($91>>>0);
 if($92){label=22;break;}else{label=21;break;}
 case 21: 
 var $94=$bits;
 var $95=$i1;
 var $96=$95&65535;
 var $97=($94>>>0)>($96>>>0);
 if($97){label=22;break;}else{label=23;break;}
 case 22: 
 label=32;break;
 case 23: 
 var $100=$j2;
 var $101=$bits;
 var $102=((($101)-($100))|0);
 $bits=$102;
 var $103=$bits;
 var $104=$103&255;
 var $105=(($104)&255);
 var $106=($105&255);
 var $107=$left;
 var $108=($107&255);
 var $109=($106|0)<($108|0);
 if($109){label=24;break;}else{label=25;break;}
 case 24: 
 var $111=$bits;
 var $112=$111&255;
 var $113=(($112)&255);
 var $114=($113&255);
 var $122=$114;label=26;break;
 case 25: 
 var $116=$bits;
 var $117=((($116)+(1))|0);
 var $118=$117&255;
 var $119=(($118)&255);
 var $120=($119&255);
 var $122=$120;label=26;break;
 case 26: 
 var $122;
 var $123=(($122)&255);
 $left=$123;
 label=39;break;
 case 27: 
 var $125=$left;
 var $126=($125&255);
 var $127=($126|0)>=18;
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 label=38;break;
 case 29: 
 var $130=$bits;
 var $131=($130>>>0)>=65536;
 if($131){label=30;break;}else{label=31;break;}
 case 30: 
 var $133=$bits;
 var $134=((($133)+(1))|0);
 var $135=(($134)&255);
 var $136=($135&255);
 var $137=$136&255;
 var $138=(($137)&255);
 $left=$138;
 label=39;break;
 case 31: 
 label=32;break;
 case 32: 
 var $141=$left;
 var $142=($141&255);
 var $143=($142|0)<16;
 if($143){label=33;break;}else{label=34;break;}
 case 33: 
 var $145=$left;
 var $146=($145&255);
 var $147=(((16)-($146))|0);
 var $148=(($147)&255);
 $shift=$148;
 var $149=$bits;
 var $150=$shift;
 var $151=($150&255);
 var $152=$149<<$151;
 var $153=(($152)&65535);
 $c=$153;
 var $154=$shift;
 var $155=($154&255);
 var $156=$c;
 var $157=(($156<<16)>>16);
 var $158=$157>>($155|0);
 var $159=(($158)&65535);
 $c=$159;
 var $160=$c;
 var $161=(($160<<16)>>16);
 $bits=$161;
 label=34;break;
 case 34: 
 var $163=$temp;
 var $164=(($163<<16)>>16);
 var $165=$bits;
 var $166=((($165)+($164))|0);
 $bits=$166;
 var $167=$bits;
 var $168=(($167)&65535);
 $temp=$168;
 var $169=$temp;
 var $170=(($169<<16)>>16);
 var $171=$temp2;
 var $172=(($171<<16)>>16);
 var $173=((($172)+($170))|0);
 var $174=(($173)&65535);
 $temp2=$174;
 var $175=$5;
 var $176=($175|0)!=0;
 if($176){label=35;break;}else{label=36;break;}
 case 35: 
 var $178=$temp2;
 var $179=(($178<<16)>>16);
 var $184=$179;label=37;break;
 case 36: 
 var $181=$temp;
 var $182=(($181<<16)>>16);
 var $184=$182;label=37;break;
 case 37: 
 var $184;
 var $185=(($184)&65535);
 var $186=$pos;
 var $187=$3;
 var $188=(($187+($186<<1))|0);
 HEAP16[(($188)>>1)]=$185;
 label=38;break;
 case 38: 
 var $190=$pos;
 var $191=((($190)+(1))|0);
 $pos=$191;
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $194=$pos;
 var $195=$d;
 var $196=($194>>>0)<($195>>>0);
 if($196){label=8;break;}else{label=41;break;}
 case 41: 
 var $198=$d;
 var $199=$block_count;
 var $200=((($199)-($198))|0);
 $block_count=$200;
 var $201=$d;
 var $202=$4;
 var $203=((($202)-($201))|0);
 $4=$203;
 var $204=$d;
 var $205=$3;
 var $206=(($205+($204<<1))|0);
 $3=$206;
 var $207=$4;
 var $208=($207|0)<=0;
 if($208){label=42;break;}else{label=43;break;}
 case 42: 
 label=44;break;
 case 43: 
 label=2;break;
 case 44: 
 $1=0;
 label=45;break;
 case 45: 
 var $213=$1;
 STACKTOP=sp;return $213;
  default: assert(0, "bad label: " + label);
 }
}
function _liq_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,14,$6);
 var $8=($7>>>0)<14;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,27248,14);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $16=$2;
 var $17=$3;
 _read_title($16,$17,30);
 $1=0;
 label=6;break;
 case 6: 
 var $19=$1;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _liq_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+336)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $event;
 var $lh=sp;
 var $li=(sp)+(112);
 var $lp=(sp)+(264);
 var $x1;
 var $x2;
 var $pmag;
 var $tracker_name=(sp)+(304);
 var $row;
 var $channel;
 var $count;
 var $xxi;
 var $sub;
 var $xxs;
 var $b=(sp)+(328);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $event=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($lh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,14,1,$14);
 var $16=(($lh+14)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,30,1,$18);
 var $20=(($lh+44)|0);
 var $21=$20;
 var $22=$3;
 var $23=_hio_read($21,20,1,$22);
 var $24=$3;
 var $25=_hio_read8($24);
 var $26=(($lh+65)|0);
 var $27=$26;
 var $28=$3;
 var $29=_hio_read($27,20,1,$28);
 var $30=$3;
 var $31=_hio_read16l($30);
 var $32=(($lh+86)|0);
 HEAP16[(($32)>>1)]=$31;
 var $33=$3;
 var $34=_hio_read16l($33);
 var $35=(($lh+88)|0);
 HEAP16[(($35)>>1)]=$34;
 var $36=$3;
 var $37=_hio_read16l($36);
 var $38=(($lh+90)|0);
 HEAP16[(($38)>>1)]=$37;
 var $39=$3;
 var $40=_hio_read16l($39);
 var $41=(($lh+92)|0);
 HEAP16[(($41)>>1)]=$40;
 var $42=$3;
 var $43=_hio_read16l($42);
 var $44=(($lh+94)|0);
 HEAP16[(($44)>>1)]=$43;
 var $45=$3;
 var $46=_hio_read16l($45);
 var $47=(($lh+96)|0);
 HEAP16[(($47)>>1)]=$46;
 var $48=$3;
 var $49=_hio_read32l($48);
 var $50=(($lh+100)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=$3;
 var $52=_hio_read16l($51);
 var $53=(($lh+104)|0);
 HEAP16[(($53)>>1)]=$52;
 var $54=$3;
 var $55=_hio_read16l($54);
 var $56=(($lh+106)|0);
 HEAP16[(($56)>>1)]=$55;
 var $57=$3;
 var $58=_hio_read16l($57);
 var $59=(($lh+108)|0);
 HEAP16[(($59)>>1)]=$58;
 var $60=$3;
 var $61=_hio_read16l($60);
 var $62=(($lh+110)|0);
 HEAP16[(($62)>>1)]=$61;
 var $63=(($lh+86)|0);
 var $64=HEAP16[(($63)>>1)];
 var $65=($64&65535);
 var $66=$65>>8;
 var $67=($66|0)==0;
 if($67){label=4;break;}else{label=5;break;}
 case 4: 
 var $69=(($lh+108)|0);
 var $70=HEAP16[(($69)>>1)];
 var $71=(($lh+110)|0);
 HEAP16[(($71)>>1)]=$70;
 var $72=(($lh+108)|0);
 HEAP16[(($72)>>1)]=0;
 var $73=$3;
 var $74=_hio_seek($73,-2,1);
 label=5;break;
 case 5: 
 var $76=(($lh+88)|0);
 var $77=HEAP16[(($76)>>1)];
 var $78=($77&65535);
 var $79=$mod;
 var $80=(($79+148)|0);
 HEAP32[(($80)>>2)]=$78;
 var $81=(($lh+90)|0);
 var $82=HEAP16[(($81)>>1)];
 var $83=($82&65535);
 var $84=$mod;
 var $85=(($84+152)|0);
 HEAP32[(($85)>>2)]=$83;
 var $86=(($lh+96)|0);
 var $87=HEAP16[(($86)>>1)];
 var $88=($87&65535);
 var $89=$mod;
 var $90=(($89+136)|0);
 HEAP32[(($90)>>2)]=$88;
 var $91=(($lh+104)|0);
 var $92=HEAP16[(($91)>>1)];
 var $93=($92&65535);
 var $94=$mod;
 var $95=(($94+128)|0);
 HEAP32[(($95)>>2)]=$93;
 var $96=(($lh+106)|0);
 var $97=HEAP16[(($96)>>1)];
 var $98=($97&65535);
 var $99=$mod;
 var $100=(($99+144)|0);
 HEAP32[(($100)>>2)]=$98;
 var $101=$mod;
 var $102=(($101+140)|0);
 HEAP32[(($102)>>2)]=$98;
 var $103=(($lh+108)|0);
 var $104=HEAP16[(($103)>>1)];
 var $105=($104&65535);
 var $106=$mod;
 var $107=(($106+156)|0);
 HEAP32[(($107)>>2)]=$105;
 var $108=$mod;
 var $109=(($108+136)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=$mod;
 var $112=(($111+128)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(Math_imul($110,$113)|0);
 var $115=$mod;
 var $116=(($115+132)|0);
 HEAP32[(($116)>>2)]=$114;
 var $117=$2;
 var $118=(($117+1280)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$119|16384;
 HEAP32[(($118)>>2)]=$120;
 var $121=$mod;
 var $122=(($121)|0);
 var $123=(($122)|0);
 var $124=(($lh+14)|0);
 var $125=(($124)|0);
 var $126=_strlcpy($123,$125,30);
 var $127=(($tracker_name)|0);
 var $128=(($lh+65)|0);
 var $129=(($128)|0);
 var $130=_strlcpy($127,$129,20);
 var $131=(($tracker_name+20)|0);
 HEAP8[($131)]=0;
 $i=20;
 label=6;break;
 case 6: 
 var $133=$i;
 var $134=($133|0)>=0;
 if($134){label=7;break;}else{label=13;break;}
 case 7: 
 var $136=$i;
 var $137=(($tracker_name+$136)|0);
 var $138=HEAP8[($137)];
 var $139=(($138<<24)>>24);
 var $140=($139|0)==32;
 if($140){label=8;break;}else{label=9;break;}
 case 8: 
 var $142=$i;
 var $143=(($tracker_name+$142)|0);
 HEAP8[($143)]=0;
 label=9;break;
 case 9: 
 var $145=$i;
 var $146=(($tracker_name+$145)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24)!=0;
 if($148){label=10;break;}else{label=11;break;}
 case 10: 
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 var $152=$i;
 var $153=((($152)-(1))|0);
 $i=$153;
 label=6;break;
 case 13: 
 var $155=$mod;
 var $156=(($155+64)|0);
 var $157=(($156)|0);
 var $158=(($tracker_name)|0);
 var $159=(($lh+86)|0);
 var $160=HEAP16[(($159)>>1)];
 var $161=($160&65535);
 var $162=$161>>8;
 var $163=(($lh+86)|0);
 var $164=HEAP16[(($163)>>1)];
 var $165=($164&65535);
 var $166=$165&255;
 var $167=_snprintf($157,64,26752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$158,HEAP32[(((tempVarArgs)+(8))>>2)]=$162,HEAP32[(((tempVarArgs)+(16))>>2)]=$166,tempVarArgs)); STACKTOP=tempVarArgs;
 var $168=(($lh+86)|0);
 var $169=HEAP16[(($168)>>1)];
 var $170=($169&65535);
 var $171=($170|0)>0;
 if($171){label=14;break;}else{label=23;break;}
 case 14: 
 $i=0;
 label=15;break;
 case 15: 
 var $174=$i;
 var $175=$mod;
 var $176=(($175+136)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($174|0)<($177|0);
 if($178){label=16;break;}else{label=18;break;}
 case 16: 
 var $180=$3;
 var $181=_hio_read8($180);
 var $182=($181&255);
 var $183=$182<<2;
 var $184=$i;
 var $185=$mod;
 var $186=(($185+184)|0);
 var $187=(($186+((($184)*(12))&-1))|0);
 var $188=(($187)|0);
 HEAP32[(($188)>>2)]=$183;
 label=17;break;
 case 17: 
 var $190=$i;
 var $191=((($190)+(1))|0);
 $i=$191;
 label=15;break;
 case 18: 
 $i=0;
 label=19;break;
 case 19: 
 var $194=$i;
 var $195=$mod;
 var $196=(($195+136)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($194|0)<($197|0);
 if($198){label=20;break;}else{label=22;break;}
 case 20: 
 var $200=$3;
 var $201=_hio_read8($200);
 var $202=($201&255);
 var $203=$i;
 var $204=$mod;
 var $205=(($204+184)|0);
 var $206=(($205+((($203)*(12))&-1))|0);
 var $207=(($206+4)|0);
 HEAP32[(($207)>>2)]=$202;
 label=21;break;
 case 21: 
 var $209=$i;
 var $210=((($209)+(1))|0);
 $i=$210;
 label=19;break;
 case 22: 
 var $212=$mod;
 var $213=(($212+952)|0);
 var $214=(($213)|0);
 var $215=$mod;
 var $216=(($215+156)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$3;
 var $219=_hio_read($214,1,$217,$218);
 var $220=$3;
 var $221=(($lh+110)|0);
 var $222=HEAP16[(($221)>>1)];
 var $223=($222&65535);
 var $224=$mod;
 var $225=(($224+136)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($226<<1);
 var $228=((($227)+(109))|0);
 var $229=$mod;
 var $230=(($229+156)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=((($228)+($231))|0);
 var $233=((($223)-($232))|0);
 var $234=_hio_seek($220,$233,1);
 label=30;break;
 case 23: 
 var $236=$3;
 var $237=$4;
 var $238=((($237)+(240))|0);
 var $239=_hio_seek($236,$238,0);
 var $240=$mod;
 var $241=(($240+952)|0);
 var $242=(($241)|0);
 var $243=$3;
 var $244=_hio_read($242,1,256,$243);
 var $245=$3;
 var $246=$4;
 var $247=(($lh+110)|0);
 var $248=HEAP16[(($247)>>1)];
 var $249=($248&65535);
 var $250=((($246)+($249))|0);
 var $251=_hio_seek($245,$250,0);
 $i=0;
 label=24;break;
 case 24: 
 var $253=$i;
 var $254=($253|0)<256;
 if($254){label=25;break;}else{label=29;break;}
 case 25: 
 var $256=$i;
 var $257=$mod;
 var $258=(($257+952)|0);
 var $259=(($258+$256)|0);
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=($261|0)==255;
 if($262){label=26;break;}else{label=27;break;}
 case 26: 
 label=29;break;
 case 27: 
 label=28;break;
 case 28: 
 var $266=$i;
 var $267=((($266)+(1))|0);
 $i=$267;
 label=24;break;
 case 29: 
 var $269=$i;
 var $270=$mod;
 var $271=(($270+156)|0);
 HEAP32[(($271)>>2)]=$269;
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $279=$mod;
 var $280=_pattern_init($279);
 var $281=($280|0)<0;
 if($281){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=163;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 $x2=0;
 $x1=0;
 $i=0;
 label=41;break;
 case 41: 
 var $287=$i;
 var $288=$mod;
 var $289=(($288+128)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=($287|0)<($290|0);
 if($291){label=42;break;}else{label=130;break;}
 case 42: 
 var $293=$mod;
 var $294=$i;
 var $295=_pattern_alloc($293,$294);
 var $296=($295|0)<0;
 if($296){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=163;break;
 case 44: 
 var $299=$3;
 var $300=_hio_read32b($299);
 $pmag=$300;
 var $301=$pmag;
 var $302=($301|0)==555819297;
 if($302){label=45;break;}else{label=46;break;}
 case 45: 
 label=129;break;
 case 46: 
 var $305=$pmag;
 var $306=($305|0)!=1280311296;
 if($306){label=47;break;}else{label=48;break;}
 case 47: 
 $1=-1;
 label=163;break;
 case 48: 
 var $309=(($lp)|0);
 var $310=$309;
 var $311=$3;
 var $312=_hio_read($310,30,1,$311);
 var $313=$3;
 var $314=_hio_read16l($313);
 var $315=(($lp+30)|0);
 HEAP16[(($315)>>1)]=$314;
 var $316=$3;
 var $317=_hio_read32l($316);
 var $318=(($lp+32)|0);
 HEAP32[(($318)>>2)]=$317;
 var $319=$3;
 var $320=_hio_read32l($319);
 var $321=(($lp+36)|0);
 HEAP32[(($321)>>2)]=$320;
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 var $324=(($lp+30)|0);
 var $325=HEAP16[(($324)>>1)];
 var $326=($325&65535);
 var $327=$i;
 var $328=$mod;
 var $329=(($328+168)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($330+($327<<2))|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=(($332)|0);
 HEAP32[(($333)>>2)]=$326;
 var $334=$mod;
 var $335=$i;
 var $336=_tracks_in_pattern_alloc($334,$335);
 $row=0;
 $channel=0;
 var $337=$3;
 var $338=_hio_tell($337);
 $count=$338;
 label=51;break;
 case 51: 
 var $340=$row;
 var $341=$channel;
 var $342=$i;
 var $343=$2;
 var $344=(($343)|0);
 var $345=(($344+168)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($346+($342<<2))|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($348+4)|0);
 var $350=(($349+($341<<2))|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=$2;
 var $353=(($352)|0);
 var $354=(($353+172)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+($351<<2))|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+4)|0);
 var $359=(($358+($340<<3))|0);
 $event=$359;
 var $360=$x2;
 var $361=(($360<<24)>>24)!=0;
 if($361){label=52;break;}else{label=53;break;}
 case 52: 
 var $363=$x1;
 var $364=$event;
 var $365=$3;
 _decode_event($363,$364,$365);
 var $366=$channel;
 var $367=$event;
 _xlat_fx340($366,$367);
 var $368=$x2;
 var $369=((($368)-(1))&255);
 $x2=$369;
 label=123;break;
 case 53: 
 var $371=$3;
 var $372=_hio_read8($371);
 $x1=$372;
 label=54;break;
 case 54: 
 var $374=$row;
 var $375=$channel;
 var $376=$i;
 var $377=$2;
 var $378=(($377)|0);
 var $379=(($378+168)|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=(($380+($376<<2))|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=(($382+4)|0);
 var $384=(($383+($375<<2))|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=$2;
 var $387=(($386)|0);
 var $388=(($387+172)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($389+($385<<2))|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=(($391+4)|0);
 var $393=(($392+($374<<3))|0);
 $event=$393;
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 var $396=$x1;
 var $397=($396&255);
 switch(($397|0)){case 192:{ label=57;break;}case 225:{ label=62;break;}case 160:{ label=65;break;}case 224:{ label=72;break;}case 128:{ label=75;break;}default:{label=78;break;}}break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 var $401=$3;
 var $402=_hio_tell($401);
 var $403=$count;
 var $404=((($402)-($403))|0);
 var $405=(($lp+32)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=($404|0)==($406|0);
 if($407){var $411=1;label=61;break;}else{label=60;break;}
 case 60: 
 ___assert_fail(24832,23656,363,27744);
 throw "Reached an unreachable!";
 label=61;break;
 case 61: 
 var $411;
 var $412=($411&1);
 label=128;break;
 case 62: 
 var $414=$3;
 var $415=_hio_read8($414);
 $x1=$415;
 var $416=$x1;
 var $417=($416&255);
 var $418=$channel;
 var $419=((($418)+($417))|0);
 $channel=$419;
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $425=$channel;
 var $426=((($425)+(1))|0);
 $channel=$426;
 var $427=$channel;
 var $428=$mod;
 var $429=(($428+136)|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=($427|0)>=($430|0);
 if($431){label=68;break;}else{label=71;break;}
 case 68: 
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 var $435=$channel;
 var $436=((($435)-(1))|0);
 $channel=$436;
 label=71;break;
 case 71: 
 $row=-1;
 label=123;break;
 case 72: 
 var $439=$3;
 var $440=_hio_read8($439);
 $x1=$440;
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 var $443=$x1;
 var $444=($443&255);
 var $445=$row;
 var $446=((($445)+($444))|0);
 $row=$446;
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 label=123;break;
 case 78: 
 var $451=$x1;
 var $452=($451&255);
 var $453=($452|0)>192;
 if($453){label=79;break;}else{label=83;break;}
 case 79: 
 var $455=$x1;
 var $456=($455&255);
 var $457=($456|0)<224;
 if($457){label=80;break;}else{label=83;break;}
 case 80: 
 label=81;break;
 case 81: 
 label=82;break;
 case 82: 
 var $461=$x1;
 var $462=$event;
 var $463=$3;
 _decode_event($461,$462,$463);
 var $464=$channel;
 var $465=$event;
 _xlat_fx340($464,$465);
 label=123;break;
 case 83: 
 var $467=$x1;
 var $468=($467&255);
 var $469=($468|0)>160;
 if($469){label=84;break;}else{label=88;break;}
 case 84: 
 var $471=$x1;
 var $472=($471&255);
 var $473=($472|0)<192;
 if($473){label=85;break;}else{label=88;break;}
 case 85: 
 var $475=$3;
 var $476=_hio_read8($475);
 $x2=$476;
 label=86;break;
 case 86: 
 label=87;break;
 case 87: 
 var $479=$x1;
 var $480=$event;
 var $481=$3;
 _decode_event($479,$480,$481);
 var $482=$channel;
 var $483=$event;
 _xlat_fx340($482,$483);
 label=123;break;
 case 88: 
 var $485=$x1;
 var $486=($485&255);
 var $487=($486|0)>128;
 if($487){label=89;break;}else{label=96;break;}
 case 89: 
 var $489=$x1;
 var $490=($489&255);
 var $491=($490|0)<160;
 if($491){label=90;break;}else{label=96;break;}
 case 90: 
 var $493=$3;
 var $494=_hio_read8($493);
 $x2=$494;
 label=91;break;
 case 91: 
 label=92;break;
 case 92: 
 var $497=$x1;
 var $498=$event;
 var $499=$3;
 _decode_event($497,$498,$499);
 var $500=$channel;
 var $501=$event;
 _xlat_fx340($500,$501);
 label=93;break;
 case 93: 
 var $503=$x2;
 var $504=(($503<<24)>>24)!=0;
 if($504){label=94;break;}else{label=95;break;}
 case 94: 
 var $506=$row;
 var $507=((($506)+(1))|0);
 $row=$507;
 var $508=$row;
 var $509=$channel;
 var $510=$i;
 var $511=$2;
 var $512=(($511)|0);
 var $513=(($512+168)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=(($514+($510<<2))|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=(($516+4)|0);
 var $518=(($517+($509<<2))|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=$2;
 var $521=(($520)|0);
 var $522=(($521+172)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=(($523+($519<<2))|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=(($525+4)|0);
 var $527=(($526+($508<<3))|0);
 var $528=$527;
 var $529=$event;
 var $530=$529;
 assert(8 % 1 === 0);(_memcpy($528, $530, 8)|0);
 var $531=$x2;
 var $532=((($531)-(1))&255);
 $x2=$532;
 label=93;break;
 case 95: 
 label=123;break;
 case 96: 
 label=97;break;
 case 97: 
 label=98;break;
 case 98: 
 var $537=$x1;
 var $538=($537&255);
 var $539=($538|0)!=255;
 if($539){label=99;break;}else{label=100;break;}
 case 99: 
 var $541=$x1;
 var $542=($541&255);
 var $543=((($542)+(37))|0);
 var $544=(($543)&255);
 var $545=$event;
 var $546=(($545)|0);
 HEAP8[($546)]=$544;
 label=103;break;
 case 100: 
 var $548=$x1;
 var $549=($548&255);
 var $550=($549|0)==254;
 if($550){label=101;break;}else{label=102;break;}
 case 101: 
 var $552=$event;
 var $553=(($552)|0);
 HEAP8[($553)]=-127;
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 var $556=$3;
 var $557=_hio_read8($556);
 $x1=$557;
 var $558=$x1;
 var $559=($558&255);
 var $560=($559|0)>100;
 if($560){label=104;break;}else{label=105;break;}
 case 104: 
 var $562=$row;
 var $563=((($562)+(1))|0);
 $row=$563;
 label=54;break;
 case 105: 
 var $565=$x1;
 var $566=($565&255);
 var $567=($566|0)!=255;
 if($567){label=106;break;}else{label=107;break;}
 case 106: 
 var $569=$x1;
 var $570=($569&255);
 var $571=((($570)+(1))|0);
 var $572=(($571)&255);
 var $573=$event;
 var $574=(($573+1)|0);
 HEAP8[($574)]=$572;
 label=107;break;
 case 107: 
 var $576=$3;
 var $577=_hio_read8($576);
 $x1=$577;
 var $578=$x1;
 var $579=($578&255);
 var $580=($579|0)!=255;
 if($580){label=108;break;}else{label=109;break;}
 case 108: 
 var $582=$x1;
 var $583=$event;
 var $584=(($583+2)|0);
 HEAP8[($584)]=$582;
 label=109;break;
 case 109: 
 var $586=$3;
 var $587=_hio_read8($586);
 $x1=$587;
 var $588=$x1;
 var $589=($588&255);
 var $590=($589|0)!=255;
 if($590){label=110;break;}else{label=111;break;}
 case 110: 
 var $592=$x1;
 var $593=($592&255);
 var $594=((($593)-(65))|0);
 var $595=(($594)&255);
 var $596=$event;
 var $597=(($596+3)|0);
 HEAP8[($597)]=$595;
 label=111;break;
 case 111: 
 var $599=$3;
 var $600=_hio_read8($599);
 $x1=$600;
 var $601=$x1;
 var $602=$event;
 var $603=(($602+4)|0);
 HEAP8[($603)]=$601;
 var $604=$event;
 var $605=(($604+3)|0);
 var $606=HEAP8[($605)];
 var $607=($606&255);
 var $608=($607|0)<=26;
 if($608){var $612=1;label=113;break;}else{label=112;break;}
 case 112: 
 ___assert_fail(22968,23656,443,27744);
 throw "Reached an unreachable!";
 label=113;break;
 case 113: 
 var $612;
 var $613=($612&1);
 var $614=$channel;
 var $615=$event;
 _xlat_fx340($614,$615);
 label=114;break;
 case 114: 
 label=115;break;
 case 115: 
 var $618=$event;
 var $619=(($618)|0);
 var $620=HEAP8[($619)];
 var $621=($620&255);
 var $622=($621|0)<=119;
 if($622){var $632=1;label=118;break;}else{label=116;break;}
 case 116: 
 var $624=$event;
 var $625=(($624)|0);
 var $626=HEAP8[($625)];
 var $627=($626&255);
 var $628=($627|0)==129;
 if($628){var $632=1;label=118;break;}else{label=117;break;}
 case 117: 
 ___assert_fail(22192,23656,450,27744);
 throw "Reached an unreachable!";
 label=118;break;
 case 118: 
 var $632;
 var $633=($632&1);
 var $634=$event;
 var $635=(($634+1)|0);
 var $636=HEAP8[($635)];
 var $637=($636&255);
 var $638=($637|0)<=100;
 if($638){var $642=1;label=120;break;}else{label=119;break;}
 case 119: 
 ___assert_fail(21552,23656,451,27744);
 throw "Reached an unreachable!";
 label=120;break;
 case 120: 
 var $642;
 var $643=($642&1);
 var $644=$event;
 var $645=(($644+2)|0);
 var $646=HEAP8[($645)];
 var $647=($646&255);
 var $648=($647|0)<=65;
 if($648){var $652=1;label=122;break;}else{label=121;break;}
 case 121: 
 ___assert_fail(21168,23656,452,27744);
 throw "Reached an unreachable!";
 label=122;break;
 case 122: 
 var $652;
 var $653=($652&1);
 label=123;break;
 case 123: 
 var $655=$row;
 var $656=((($655)+(1))|0);
 $row=$656;
 var $657=$row;
 var $658=$i;
 var $659=$mod;
 var $660=(($659+168)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=(($661+($658<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=(($663)|0);
 var $665=HEAP32[(($664)>>2)];
 var $666=($657|0)>=($665|0);
 if($666){label=124;break;}else{label=127;break;}
 case 124: 
 $row=0;
 $x2=0;
 var $668=$channel;
 var $669=((($668)+(1))|0);
 $channel=$669;
 var $670=$channel;
 var $671=$mod;
 var $672=(($671+136)|0);
 var $673=HEAP32[(($672)>>2)];
 var $674=($670|0)>=($673|0);
 if($674){label=125;break;}else{label=126;break;}
 case 125: 
 $channel=0;
 label=126;break;
 case 126: 
 label=127;break;
 case 127: 
 label=51;break;
 case 128: 
 label=129;break;
 case 129: 
 var $680=$i;
 var $681=((($680)+(1))|0);
 $i=$681;
 label=41;break;
 case 130: 
 var $683=$mod;
 var $684=_instrument_init($683);
 var $685=($684|0)<0;
 if($685){label=131;break;}else{label=132;break;}
 case 131: 
 $1=-1;
 label=163;break;
 case 132: 
 label=133;break;
 case 133: 
 label=134;break;
 case 134: 
 $i=0;
 label=135;break;
 case 135: 
 var $691=$i;
 var $692=$mod;
 var $693=(($692+140)|0);
 var $694=HEAP32[(($693)>>2)];
 var $695=($691|0)<($694|0);
 if($695){label=136;break;}else{label=162;break;}
 case 136: 
 var $697=$i;
 var $698=$mod;
 var $699=(($698+176)|0);
 var $700=HEAP32[(($699)>>2)];
 var $701=(($700+((($697)*(764))&-1))|0);
 $xxi=$701;
 var $702=$i;
 var $703=$mod;
 var $704=(($703+180)|0);
 var $705=HEAP32[(($704)>>2)];
 var $706=(($705+((($702)*(52))&-1))|0);
 $xxs=$706;
 var $707=$mod;
 var $708=$i;
 var $709=_subinstrument_alloc($707,$708,1);
 var $710=($709|0)<0;
 if($710){label=137;break;}else{label=138;break;}
 case 137: 
 $1=-1;
 label=163;break;
 case 138: 
 var $713=$xxi;
 var $714=(($713+756)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=(($715)|0);
 $sub=$716;
 var $717=$b;
 var $718=$3;
 var $719=_hio_read($717,1,4,$718);
 var $720=(($b)|0);
 var $721=HEAP8[($720)];
 var $722=($721&255);
 var $723=($722|0)==63;
 if($723){label=139;break;}else{label=143;break;}
 case 139: 
 var $725=(($b+1)|0);
 var $726=HEAP8[($725)];
 var $727=($726&255);
 var $728=($727|0)==63;
 if($728){label=140;break;}else{label=143;break;}
 case 140: 
 var $730=(($b+2)|0);
 var $731=HEAP8[($730)];
 var $732=($731&255);
 var $733=($732|0)==63;
 if($733){label=141;break;}else{label=143;break;}
 case 141: 
 var $735=(($b+3)|0);
 var $736=HEAP8[($735)];
 var $737=($736&255);
 var $738=($737|0)==63;
 if($738){label=142;break;}else{label=143;break;}
 case 142: 
 label=161;break;
 case 143: 
 var $741=(($b)|0);
 var $742=HEAP8[($741)];
 var $743=($742&255);
 var $744=($743|0)==76;
 if($744){label=144;break;}else{label=147;break;}
 case 144: 
 var $746=(($b+1)|0);
 var $747=HEAP8[($746)];
 var $748=($747&255);
 var $749=($748|0)==68;
 if($749){label=145;break;}else{label=147;break;}
 case 145: 
 var $751=(($b+2)|0);
 var $752=HEAP8[($751)];
 var $753=($752&255);
 var $754=($753|0)==83;
 if($754){label=146;break;}else{label=147;break;}
 case 146: 
 var $756=(($b+3)|0);
 var $757=HEAP8[($756)];
 var $758=($757&255);
 var $759=($758|0)==83;
 if($759){var $763=1;label=148;break;}else{label=147;break;}
 case 147: 
 ___assert_fail(20752,23656,495,27744);
 throw "Reached an unreachable!";
 label=148;break;
 case 148: 
 var $763;
 var $764=($763&1);
 label=149;break;
 case 149: 
 label=150;break;
 case 150: 
 var $767=$3;
 var $768=_hio_read16l($767);
 var $769=(($li)|0);
 HEAP16[(($769)>>1)]=$768;
 var $770=(($li+2)|0);
 var $771=$770;
 var $772=$3;
 var $773=_hio_read($771,30,1,$772);
 var $774=(($li+32)|0);
 var $775=$774;
 var $776=$3;
 var $777=_hio_read($775,20,1,$776);
 var $778=(($li+52)|0);
 var $779=$778;
 var $780=$3;
 var $781=_hio_read($779,20,1,$780);
 var $782=$3;
 var $783=_hio_read8($782);
 var $784=(($li+72)|0);
 HEAP8[($784)]=$783;
 var $785=$3;
 var $786=_hio_read32l($785);
 var $787=(($li+76)|0);
 HEAP32[(($787)>>2)]=$786;
 var $788=$3;
 var $789=_hio_read32l($788);
 var $790=(($li+80)|0);
 HEAP32[(($790)>>2)]=$789;
 var $791=$3;
 var $792=_hio_read32l($791);
 var $793=(($li+84)|0);
 HEAP32[(($793)>>2)]=$792;
 var $794=$3;
 var $795=_hio_read32l($794);
 var $796=(($li+88)|0);
 HEAP32[(($796)>>2)]=$795;
 var $797=$3;
 var $798=_hio_read8($797);
 var $799=(($li+92)|0);
 HEAP8[($799)]=$798;
 var $800=$3;
 var $801=_hio_read8($800);
 var $802=(($li+93)|0);
 HEAP8[($802)]=$801;
 var $803=$3;
 var $804=_hio_read8($803);
 var $805=(($li+94)|0);
 HEAP8[($805)]=$804;
 var $806=$3;
 var $807=_hio_read8($806);
 var $808=(($li+95)|0);
 HEAP8[($808)]=$807;
 var $809=$3;
 var $810=_hio_read8($809);
 var $811=(($li+96)|0);
 HEAP8[($811)]=$810;
 var $812=$3;
 var $813=_hio_read8($812);
 var $814=(($li+97)|0);
 HEAP8[($814)]=$813;
 var $815=$3;
 var $816=_hio_read16l($815);
 var $817=(($li+98)|0);
 HEAP16[(($817)>>1)]=$816;
 var $818=$3;
 var $819=_hio_read16l($818);
 var $820=(($li+100)|0);
 HEAP16[(($820)>>1)]=$819;
 var $821=$3;
 var $822=_hio_read32l($821);
 var $823=(($li+104)|0);
 HEAP32[(($823)>>2)]=$822;
 var $824=$3;
 var $825=_hio_read8($824);
 var $826=(($li+108)|0);
 HEAP8[($826)]=$825;
 var $827=(($li+109)|0);
 var $828=$827;
 var $829=$3;
 var $830=_hio_read($828,11,1,$829);
 var $831=(($li+120)|0);
 var $832=$831;
 var $833=$3;
 var $834=_hio_read($832,25,1,$833);
 var $835=(($li+76)|0);
 var $836=HEAP32[(($835)>>2)];
 var $837=($836|0)!=0;
 var $838=$837^1;
 var $839=$838^1;
 var $840=($839&1);
 var $841=$xxi;
 var $842=(($841+36)|0);
 HEAP32[(($842)>>2)]=$840;
 var $843=$xxi;
 var $844=(($843+32)|0);
 HEAP32[(($844)>>2)]=64;
 var $845=(($li+76)|0);
 var $846=HEAP32[(($845)>>2)];
 var $847=$xxs;
 var $848=(($847+32)|0);
 HEAP32[(($848)>>2)]=$846;
 var $849=(($li+80)|0);
 var $850=HEAP32[(($849)>>2)];
 var $851=$xxs;
 var $852=(($851+36)|0);
 HEAP32[(($852)>>2)]=$850;
 var $853=(($li+84)|0);
 var $854=HEAP32[(($853)>>2)];
 var $855=$xxs;
 var $856=(($855+40)|0);
 HEAP32[(($856)>>2)]=$854;
 var $857=(($li+93)|0);
 var $858=HEAP8[($857)];
 var $859=($858&255);
 var $860=$859&1;
 var $861=($860|0)!=0;
 if($861){label=151;break;}else{label=152;break;}
 case 151: 
 var $863=$xxs;
 var $864=(($863+44)|0);
 HEAP32[(($864)>>2)]=1;
 var $865=$xxs;
 var $866=(($865+32)|0);
 var $867=HEAP32[(($866)>>2)];
 var $868=$867>>1;
 HEAP32[(($866)>>2)]=$868;
 var $869=$xxs;
 var $870=(($869+36)|0);
 var $871=HEAP32[(($870)>>2)];
 var $872=$871>>1;
 HEAP32[(($870)>>2)]=$872;
 var $873=$xxs;
 var $874=(($873+40)|0);
 var $875=HEAP32[(($874)>>2)];
 var $876=$875>>1;
 HEAP32[(($874)>>2)]=$876;
 label=152;break;
 case 152: 
 var $878=(($li+84)|0);
 var $879=HEAP32[(($878)>>2)];
 var $880=($879>>>0)>0;
 if($880){label=153;break;}else{label=154;break;}
 case 153: 
 var $882=$xxs;
 var $883=(($882+44)|0);
 HEAP32[(($883)>>2)]=2;
 label=154;break;
 case 154: 
 var $885=(($li+96)|0);
 HEAP8[($885)]=64;
 var $886=(($li+92)|0);
 var $887=HEAP8[($886)];
 var $888=($887&255);
 var $889=$sub;
 var $890=(($889)|0);
 HEAP32[(($890)>>2)]=$888;
 var $891=(($li+96)|0);
 var $892=HEAP8[($891)];
 var $893=($892&255);
 var $894=$sub;
 var $895=(($894+4)|0);
 HEAP32[(($895)>>2)]=$893;
 var $896=(($li+94)|0);
 var $897=HEAP8[($896)];
 var $898=($897&255);
 var $899=$sub;
 var $900=(($899+8)|0);
 HEAP32[(($900)>>2)]=$898;
 var $901=$i;
 var $902=$sub;
 var $903=(($902+40)|0);
 HEAP32[(($903)>>2)]=$901;
 var $904=$mod;
 var $905=$i;
 var $906=(($li+2)|0);
 var $907=(($906)|0);
 var $908=_instrument_name($904,$905,$907,31);
 label=155;break;
 case 155: 
 label=156;break;
 case 156: 
 var $911=(($li+88)|0);
 var $912=HEAP32[(($911)>>2)];
 var $913=$sub;
 var $914=(($913+12)|0);
 var $915=$sub;
 var $916=(($915+16)|0);
 _c2spd_to_note($912,$914,$916);
 var $917=$3;
 var $918=(($li+98)|0);
 var $919=HEAP16[(($918)>>1)];
 var $920=($919&65535);
 var $921=((($920)-(144))|0);
 var $922=_hio_seek($917,$921,1);
 var $923=$xxs;
 var $924=(($923+32)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=($925|0)==0;
 if($926){label=157;break;}else{label=158;break;}
 case 157: 
 label=161;break;
 case 158: 
 var $929=$2;
 var $930=$3;
 var $931=$xxs;
 var $932=_load_sample($929,$930,0,$931,0);
 var $933=($932|0)<0;
 if($933){label=159;break;}else{label=160;break;}
 case 159: 
 $1=-1;
 label=163;break;
 case 160: 
 label=161;break;
 case 161: 
 var $937=$i;
 var $938=((($937)+(1))|0);
 $i=$938;
 label=135;break;
 case 162: 
 var $940=$2;
 var $941=(($940+1280)|0);
 var $942=HEAP32[(($941)>>2)];
 var $943=$942|8389153;
 HEAP32[(($941)>>2)]=$943;
 var $944=$2;
 var $945=(($944+1284)|0);
 HEAP32[(($945)>>2)]=2;
 $1=0;
 label=163;break;
 case 163: 
 var $947=$1;
 STACKTOP=sp;return $947;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_event($x1,$event,$f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $x2;
 $1=$x1;
 $2=$event;
 $3=$f;
 var $4=$2;
 var $5=$4;
 _memset($5, 0, 8)|0;
 var $6=$1;
 var $7=($6&255);
 var $8=$7&1;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=6;break;}
 case 2: 
 var $11=$3;
 var $12=_hio_read8($11);
 $x2=$12;
 var $13=$x2;
 var $14=($13&255);
 var $15=($14|0)==254;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$2;
 var $18=(($17)|0);
 HEAP8[($18)]=-127;
 label=5;break;
 case 4: 
 var $20=$x2;
 var $21=($20&255);
 var $22=((($21)+(1))|0);
 var $23=((($22)+(36))|0);
 var $24=(($23)&255);
 var $25=$2;
 var $26=(($25)|0);
 HEAP8[($26)]=$24;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $29=$1;
 var $30=($29&255);
 var $31=$30&2;
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$3;
 var $35=_hio_read8($34);
 var $36=($35&255);
 var $37=((($36)+(1))|0);
 var $38=(($37)&255);
 var $39=$2;
 var $40=(($39+1)|0);
 HEAP8[($40)]=$38;
 label=8;break;
 case 8: 
 var $42=$1;
 var $43=($42&255);
 var $44=$43&4;
 var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $47=$3;
 var $48=_hio_read8($47);
 var $49=$2;
 var $50=(($49+2)|0);
 HEAP8[($50)]=$48;
 label=10;break;
 case 10: 
 var $52=$1;
 var $53=($52&255);
 var $54=$53&8;
 var $55=($54|0)!=0;
 if($55){label=11;break;}else{label=12;break;}
 case 11: 
 var $57=$3;
 var $58=_hio_read8($57);
 var $59=($58&255);
 var $60=((($59)-(65))|0);
 var $61=(($60)&255);
 var $62=$2;
 var $63=(($62+3)|0);
 HEAP8[($63)]=$61;
 label=12;break;
 case 12: 
 var $65=$1;
 var $66=($65&255);
 var $67=$66&16;
 var $68=($67|0)!=0;
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 var $70=$3;
 var $71=_hio_read8($70);
 var $72=$2;
 var $73=(($72+4)|0);
 HEAP8[($73)]=$71;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $77=$2;
 var $78=(($77)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=($80|0)<=107;
 if($81){var $91=1;label=19;break;}else{label=17;break;}
 case 17: 
 var $83=$2;
 var $84=(($83)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=($86|0)==129;
 if($87){var $91=1;label=19;break;}else{label=18;break;}
 case 18: 
 ___assert_fail(20488,23656,209,27872);
 throw "Reached an unreachable!";
 label=19;break;
 case 19: 
 var $91;
 var $92=($91&1);
 var $93=$2;
 var $94=(($93+1)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=($96|0)<=100;
 if($97){var $101=1;label=21;break;}else{label=20;break;}
 case 20: 
 ___assert_fail(21552,23656,210,27872);
 throw "Reached an unreachable!";
 label=21;break;
 case 21: 
 var $101;
 var $102=($101&1);
 var $103=$2;
 var $104=(($103+2)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 var $107=($106|0)<=64;
 if($107){var $111=1;label=23;break;}else{label=22;break;}
 case 22: 
 ___assert_fail(27496,23656,211,27872);
 throw "Reached an unreachable!";
 label=23;break;
 case 23: 
 var $111;
 var $112=($111&1);
 var $113=$2;
 var $114=(($113+3)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=($116|0)<=26;
 if($117){var $121=1;label=25;break;}else{label=24;break;}
 case 24: 
 ___assert_fail(22968,23656,212,27872);
 throw "Reached an unreachable!";
 label=25;break;
 case 25: 
 var $121;
 var $122=($121&1);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_fx340($c,$e){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $h;
 var $l;
 $1=$c;
 $2=$e;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=HEAP8[($4)];
 var $6=($5&255);
 var $7=$6&240;
 var $8=$7>>4;
 var $9=(($8)&255);
 $h=$9;
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=$13&15;
 var $15=(($14)&255);
 $l=$15;
 var $16=$2;
 var $17=(($16+3)|0);
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=((7688+$19)|0);
 var $21=HEAP8[($20)];
 var $22=$2;
 var $23=(($22+3)|0);
 HEAP8[($23)]=$21;
 var $24=($21&255);
 if(($24|0)==255){ label=17;break;}else if(($24|0)==14){ label=2;break;}else{label=18;break;}
 case 2: 
 var $26=$h;
 var $27=($26&255);
 switch(($27|0)){case 12:{ label=12;break;}case 13:{ label=13;break;}case 14:{ label=14;break;}case 3:{ label=3;break;}case 4:{ label=4;break;}case 5:{ label=7;break;}case 6:{ label=8;break;}case 7:{ label=9;break;}default:{label=15;break;}}break;
 case 3: 
 var $29=$l;
 var $30=($29&255);
 var $31=$30|48;
 var $32=(($31)&255);
 var $33=$2;
 var $34=(($33+4)|0);
 HEAP8[($34)]=$32;
 label=16;break;
 case 4: 
 var $36=$l;
 var $37=($36&255);
 var $38=($37|0)==3;
 if($38){label=5;break;}else{label=6;break;}
 case 5: 
 var $40=$l;
 var $41=((($40)+(1))&255);
 $l=$41;
 label=6;break;
 case 6: 
 var $43=$l;
 var $44=($43&255);
 var $45=$44|64;
 var $46=(($45)&255);
 var $47=$2;
 var $48=(($47+4)|0);
 HEAP8[($48)]=$46;
 label=16;break;
 case 7: 
 var $50=$l;
 var $51=($50&255);
 var $52=$51|80;
 var $53=(($52)&255);
 var $54=$2;
 var $55=(($54+4)|0);
 HEAP8[($55)]=$53;
 label=16;break;
 case 8: 
 var $57=$l;
 var $58=($57&255);
 var $59=$58|96;
 var $60=(($59)&255);
 var $61=$2;
 var $62=(($61+4)|0);
 HEAP8[($62)]=$60;
 label=16;break;
 case 9: 
 var $64=$l;
 var $65=($64&255);
 var $66=($65|0)==3;
 if($66){label=10;break;}else{label=11;break;}
 case 10: 
 var $68=$l;
 var $69=((($68)+(1))&255);
 $l=$69;
 label=11;break;
 case 11: 
 var $71=$l;
 var $72=($71&255);
 var $73=$72|112;
 var $74=(($73)&255);
 var $75=$2;
 var $76=(($75+4)|0);
 HEAP8[($76)]=$74;
 label=16;break;
 case 12: 
 var $78=$l;
 var $79=($78&255);
 var $80=$79|192;
 var $81=(($80)&255);
 var $82=$2;
 var $83=(($82+4)|0);
 HEAP8[($83)]=$81;
 label=16;break;
 case 13: 
 var $85=$l;
 var $86=($85&255);
 var $87=$86|208;
 var $88=(($87)&255);
 var $89=$2;
 var $90=(($89+4)|0);
 HEAP8[($90)]=$88;
 label=16;break;
 case 14: 
 var $92=$l;
 var $93=($92&255);
 var $94=$93|224;
 var $95=(($94)&255);
 var $96=$2;
 var $97=(($96+4)|0);
 HEAP8[($97)]=$95;
 label=16;break;
 case 15: 
 var $99=$2;
 var $100=(($99+4)|0);
 HEAP8[($100)]=0;
 var $101=$2;
 var $102=(($101+3)|0);
 HEAP8[($102)]=0;
 label=16;break;
 case 16: 
 label=18;break;
 case 17: 
 var $105=$2;
 var $106=(($105+4)|0);
 HEAP8[($106)]=0;
 var $107=$2;
 var $108=(($107+3)|0);
 HEAP8[($108)]=0;
 label=18;break;
 case 18: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _masi_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $val;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1347636512;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=11;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read8($10);
 var $12=$2;
 var $13=_hio_read8($12);
 var $14=$2;
 var $15=_hio_read8($14);
 var $16=$2;
 var $17=_hio_read8($16);
 var $18=($17&255);
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=11;break;
 case 5: 
 var $22=$2;
 var $23=_hio_read32b($22);
 var $24=($23|0)!=1179208773;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=11;break;
 case 7: 
 var $27=$2;
 var $28=_hio_read32b($27);
 var $29=$2;
 var $30=_hio_read32l($29);
 $val=$30;
 var $31=$2;
 var $32=$val;
 var $33=_hio_seek($31,$32,1);
 var $34=$2;
 var $35=_hio_read32b($34);
 var $36=($35|0)==1414091852;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$2;
 var $39=_hio_read32l($38);
 $val=$39;
 var $40=$2;
 var $41=$3;
 var $42=$val;
 _read_title($40,$41,$42);
 label=10;break;
 case 9: 
 var $44=$2;
 var $45=$3;
 _read_title($44,$45,0);
 label=10;break;
 case 10: 
 $1=0;
 label=11;break;
 case 11: 
 var $48=$1;
 STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }
}
function _masi_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $handle;
 var $ret;
 var $offset;
 var $i;
 var $j;
 var $data=sp;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=(($data)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$mod;
 var $16=(($15)|0);
 var $17=(($16)|0);
 HEAP8[($17)]=0;
 var $18=$3;
 var $19=_hio_seek($18,8,1);
 var $20=$mod;
 var $21=(($20+140)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=$mod;
 var $23=(($22+144)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=(($data+4)|0);
 HEAP32[(($24)>>2)]=0;
 var $25=(($data+8)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=$3;
 var $27=_hio_tell($26);
 $offset=$27;
 var $28=_iff_new();
 $handle=$28;
 var $29=$handle;
 var $30=($29|0)==0;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 label=48;break;
 case 5: 
 var $33=$handle;
 var $34=_iff_register($33,26720,450);
 $ret=$34;
 var $35=$handle;
 var $36=_iff_register($35,24776,22);
 var $37=$ret;
 var $38=$37|$36;
 $ret=$38;
 var $39=$handle;
 var $40=_iff_register($39,23648,298);
 var $41=$ret;
 var $42=$41|$40;
 $ret=$42;
 var $43=$handle;
 var $44=_iff_register($43,22960,66);
 var $45=$ret;
 var $46=$45|$44;
 $ret=$46;
 var $47=$handle;
 var $48=_iff_register($47,22168,28);
 var $49=$ret;
 var $50=$49|$48;
 $ret=$50;
 var $51=$ret;
 var $52=($51|0)!=0;
 if($52){label=6;break;}else{label=7;break;}
 case 6: 
 label=48;break;
 case 7: 
 var $55=$handle;
 _iff_set_quirk($55,1);
 var $56=$handle;
 var $57=$2;
 var $58=$3;
 var $59=$data;
 var $60=_iff_load($56,$57,$58,$59);
 var $61=($60|0)<0;
 if($61){label=8;break;}else{label=9;break;}
 case 8: 
 var $63=$handle;
 _iff_release($63);
 label=48;break;
 case 9: 
 var $65=$handle;
 _iff_release($65);
 var $66=$mod;
 var $67=(($66+128)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$mod;
 var $70=(($69+136)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(Math_imul($68,$71)|0);
 var $73=$mod;
 var $74=(($73+132)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$mod;
 var $76=(($75+128)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77<<3);
 var $79=_malloc($78);
 var $80=(($data+12)|0);
 HEAP32[(($80)>>2)]=$79;
 var $81=(($data+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=10;break;}else{label=11;break;}
 case 10: 
 label=48;break;
 case 11: 
 var $86=_malloc(2040);
 var $87=(($data+16)|0);
 HEAP32[(($87)>>2)]=$86;
 var $88=(($data+16)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==0;
 if($90){label=12;break;}else{label=13;break;}
 case 12: 
 label=47;break;
 case 13: 
 var $93=$2;
 var $94=(($data)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)!=0;
 var $97=($96?21536:21144);
 _set_type($93,$97,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $104=$mod;
 var $105=_instrument_init($104);
 var $106=($105|0)<0;
 if($106){label=20;break;}else{label=21;break;}
 case 20: 
 label=46;break;
 case 21: 
 var $109=$mod;
 var $110=_pattern_init($109);
 var $111=($110|0)<0;
 if($111){label=22;break;}else{label=23;break;}
 case 22: 
 label=46;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $118=$3;
 var $119=$4;
 var $120=$offset;
 var $121=((($119)+($120))|0);
 var $122=_hio_seek($118,$121,0);
 var $123=$mod;
 var $124=(($123+156)|0);
 HEAP32[(($124)>>2)]=0;
 var $125=_iff_new();
 $handle=$125;
 var $126=$handle;
 var $127=($126|0)==0;
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 label=46;break;
 case 29: 
 var $130=$handle;
 var $131=_iff_register($130,23648,30);
 $ret=$131;
 var $132=$handle;
 var $133=_iff_register($132,22960,112);
 var $134=$ret;
 var $135=$134|$133;
 $ret=$135;
 var $136=$handle;
 var $137=_iff_register($136,22168,490);
 var $138=$ret;
 var $139=$138|$137;
 $ret=$139;
 var $140=$ret;
 var $141=($140|0)!=0;
 if($141){label=30;break;}else{label=31;break;}
 case 30: 
 label=46;break;
 case 31: 
 var $144=$handle;
 _iff_set_quirk($144,1);
 var $145=$handle;
 var $146=$2;
 var $147=$3;
 var $148=$data;
 var $149=_iff_load($145,$146,$147,$148);
 var $150=($149|0)<0;
 if($150){label=32;break;}else{label=33;break;}
 case 32: 
 var $152=$handle;
 _iff_release($152);
 label=46;break;
 case 33: 
 var $154=$handle;
 _iff_release($154);
 $i=0;
 label=34;break;
 case 34: 
 var $156=$i;
 var $157=$mod;
 var $158=(($157+156)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($156|0)<($159|0);
 if($160){label=35;break;}else{label=45;break;}
 case 35: 
 $j=0;
 label=36;break;
 case 36: 
 var $163=$j;
 var $164=$mod;
 var $165=(($164+128)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($163|0)<($166|0);
 if($167){label=37;break;}else{label=41;break;}
 case 37: 
 var $169=(($data+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$i;
 var $172=($171<<3);
 var $173=(($170+$172)|0);
 var $174=(($data+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=$j;
 var $177=($176<<3);
 var $178=(($175+$177)|0);
 var $179=(($data)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($180|0)!=0;
 var $182=($181?8:4);
 var $183=_memcmp($173,$178,$182);
 var $184=($183|0)!=0;
 if($184){label=39;break;}else{label=38;break;}
 case 38: 
 var $186=$j;
 var $187=(($186)&255);
 var $188=$i;
 var $189=$mod;
 var $190=(($189+952)|0);
 var $191=(($190+$188)|0);
 HEAP8[($191)]=$187;
 label=41;break;
 case 39: 
 label=40;break;
 case 40: 
 var $194=$j;
 var $195=((($194)+(1))|0);
 $j=$195;
 label=36;break;
 case 41: 
 var $197=$j;
 var $198=$mod;
 var $199=(($198+128)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($197|0)==($200|0);
 if($201){label=42;break;}else{label=43;break;}
 case 42: 
 label=45;break;
 case 43: 
 label=44;break;
 case 44: 
 var $205=$i;
 var $206=((($205)+(1))|0);
 $i=$206;
 label=34;break;
 case 45: 
 var $208=(($data+16)|0);
 var $209=HEAP32[(($208)>>2)];
 _free($209);
 var $210=(($data+12)|0);
 var $211=HEAP32[(($210)>>2)];
 _free($211);
 $1=0;
 label=49;break;
 case 46: 
 var $213=(($data+16)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=47;break;
 case 47: 
 var $216=(($data+12)|0);
 var $217=HEAP32[(($216)>>2)];
 _free($217);
 label=48;break;
 case 48: 
 $1=-1;
 label=49;break;
 case 49: 
 var $220=$1;
 STACKTOP=sp;return $220;
  default: assert(0, "bad label: " + label);
 }
}
function _get_titl($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $buf=sp;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=(($buf)|0);
 var $8=$3;
 var $9=_hio_read($7,1,40,$8);
 var $10=$mod;
 var $11=(($10)|0);
 var $12=(($11)|0);
 var $13=(($buf)|0);
 var $14=$2;
 var $15=($14|0)>32;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $20=32;label=4;break;
 case 3: 
 var $18=$2;
 var $20=$18;label=4;break;
 case 4: 
 var $20;
 var $21=_strlcpy($12,$13,$20);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_sdft($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 STACKTOP=sp;return 0;
}
function _get_song352($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_seek($7,10,1);
 var $9=$3;
 var $10=_hio_read8($9);
 var $11=($10&255);
 var $12=$mod;
 var $13=(($12+136)|0);
 HEAP32[(($13)>>2)]=$11;
 STACKTOP=sp;return 0;
}
function _get_dsmp_cnt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7+140)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)+(1))|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=$mod;
 var $12=(($11+140)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$mod;
 var $15=(($14+144)|0);
 HEAP32[(($15)>>2)]=$13;
 STACKTOP=sp;return 0;
}
function _get_pbod_cnt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $data;
 var $buf=sp;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$4;
 var $8=$7;
 $data=$8;
 var $9=$mod;
 var $10=(($9+128)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=((($11)+(1))|0);
 HEAP32[(($10)>>2)]=$12;
 var $13=(($buf)|0);
 var $14=$3;
 var $15=_hio_read($13,1,20,$14);
 var $16=(($buf+9)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 var $19=($18|0)!=0;
 if($19){label=2;break;}else{label=4;break;}
 case 2: 
 var $21=(($buf+13)|0);
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24);
 var $24=($23|0)==0;
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 var $26=$data;
 var $27=(($26)|0);
 HEAP32[(($27)>>2)]=1;
 label=4;break;
 case 4: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_song_2($m,$size,$f,$parm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $data;
 var $magic;
 var $c;
 var $buf=sp;
 var $i;
 var $skip;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$4;
 var $8=$7;
 $data=$8;
 var $9=(($buf)|0);
 var $10=$3;
 var $11=_hio_read($9,1,9,$10);
 var $12=$3;
 var $13=_hio_read16l($12);
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $16=$3;
 var $17=_hio_read32b($16);
 $magic=$17;
 label=4;break;
 case 4: 
 var $19=$magic;
 var $20=($19|0)!=1330662472;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=$3;
 var $23=_hio_read32l($22);
 $skip=$23;
 var $24=$3;
 var $25=$skip;
 var $26=_hio_seek($24,$25,1);
 var $27=$3;
 var $28=_hio_read32b($27);
 $magic=$28;
 label=4;break;
 case 6: 
 var $30=$3;
 var $31=_hio_read32l($30);
 var $32=$3;
 var $33=_hio_seek($32,9,1);
 var $34=$3;
 var $35=_hio_read8($34);
 $c=$35;
 $i=0;
 label=7;break;
 case 7: 
 var $37=$c;
 var $38=(($37<<24)>>24);
 var $39=($38|0)!=1;
 if($39){label=8;break;}else{label=15;break;}
 case 8: 
 var $41=$c;
 var $42=(($41<<24)>>24);
 if(($42|0)==13){ label=10;break;}else if(($42|0)==14){ label=11;break;}else if(($42|0)==7){ label=9;break;}else{label=12;break;}
 case 9: 
 var $44=$3;
 var $45=_hio_read8($44);
 var $46=($45&255);
 var $47=$mod;
 var $48=(($47+148)|0);
 HEAP32[(($48)>>2)]=$46;
 var $49=$3;
 var $50=_hio_read8($49);
 var $51=$3;
 var $52=_hio_read8($51);
 var $53=($52&255);
 var $54=$mod;
 var $55=(($54+152)|0);
 HEAP32[(($55)>>2)]=$53;
 label=13;break;
 case 10: 
 var $57=$3;
 var $58=_hio_read8($57);
 var $59=$3;
 var $60=_hio_read8($59);
 var $61=($60&255);
 var $62=$i;
 var $63=$mod;
 var $64=(($63+184)|0);
 var $65=(($64+((($62)*(12))&-1))|0);
 var $66=(($65)|0);
 HEAP32[(($66)>>2)]=$61;
 var $67=$3;
 var $68=_hio_read8($67);
 var $69=$i;
 var $70=((($69)+(1))|0);
 $i=$70;
 label=13;break;
 case 11: 
 var $72=$3;
 var $73=_hio_read8($72);
 var $74=$3;
 var $75=_hio_read8($74);
 label=13;break;
 case 12: 
 var $77=$i;
 var $78=$c;
 var $79=(($78<<24)>>24);
 var $80=$3;
 var $81=_hio_read8($80);
 var $82=($81&255);
 var $83=_printf(20728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAP32[(((tempVarArgs)+(8))>>2)]=$79,HEAP32[(((tempVarArgs)+(16))>>2)]=$82,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $86=$3;
 var $87=_hio_read8($86);
 $c=$87;
 label=7;break;
 case 15: 
 label=16;break;
 case 16: 
 var $90=$c;
 var $91=(($90<<24)>>24);
 var $92=($91|0)==1;
 if($92){label=17;break;}else{label=19;break;}
 case 17: 
 var $94=$data;
 var $95=(($94+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$mod;
 var $98=(($97+156)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99<<3);
 var $101=(($96+$100)|0);
 var $102=$data;
 var $103=(($102)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($104|0)!=0;
 var $106=($105?8:4);
 var $107=$3;
 var $108=_hio_read($101,1,$106,$107);
 var $109=$mod;
 var $110=(($109+156)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=((($111)+(1))|0);
 HEAP32[(($110)>>2)]=$112;
 label=18;break;
 case 18: 
 var $114=$3;
 var $115=_hio_read8($114);
 $c=$115;
 label=16;break;
 case 19: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_dsmp($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $xxi;
 var $sub;
 var $xxs;
 var $data;
 var $i;
 var $srate;
 var $finetune;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$4;
 var $11=_hio_read8($10);
 var $12=$4;
 var $13=_hio_seek($12,8,1);
 var $14=$4;
 var $15=$data;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)!=0;
 var $19=($18?8:4);
 var $20=_hio_seek($14,$19,1);
 var $21=$data;
 var $22=(($21+8)|0);
 var $23=HEAP32[(($22)>>2)];
 $i=$23;
 var $24=$mod;
 var $25=$i;
 var $26=_subinstrument_alloc($24,$25,1);
 var $27=($26|0)<0;
 if($27){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=18;break;
 case 3: 
 var $30=$i;
 var $31=$mod;
 var $32=(($31+176)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+((($30)*(764))&-1))|0);
 $xxi=$34;
 var $35=$xxi;
 var $36=(($35+756)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37)|0);
 $sub=$38;
 var $39=$i;
 var $40=$mod;
 var $41=(($40+180)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+((($39)*(52))&-1))|0);
 $xxs=$43;
 var $44=$xxi;
 var $45=(($44)|0);
 var $46=$45;
 var $47=$4;
 var $48=_hio_read($46,1,31,$47);
 var $49=$xxi;
 var $50=(($49)|0);
 var $51=(($50)|0);
 var $52=_str_adj($51);
 var $53=$4;
 var $54=_hio_seek($53,8,1);
 var $55=$4;
 var $56=_hio_read8($55);
 var $57=$4;
 var $58=_hio_read8($57);
 var $59=$4;
 var $60=_hio_read32l($59);
 var $61=$xxs;
 var $62=(($61+32)|0);
 HEAP32[(($62)>>2)]=$60;
 var $63=$4;
 var $64=_hio_read32l($63);
 var $65=$xxs;
 var $66=(($65+36)|0);
 HEAP32[(($66)>>2)]=$64;
 var $67=$4;
 var $68=_hio_read32l($67);
 var $69=$xxs;
 var $70=(($69+40)|0);
 HEAP32[(($70)>>2)]=$68;
 var $71=$xxs;
 var $72=(($71+40)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)>2;
 var $75=($74?2:0);
 var $76=$xxs;
 var $77=(($76+44)|0);
 HEAP32[(($77)>>2)]=$75;
 var $78=$4;
 var $79=_hio_read16l($78);
 var $80=$xxs;
 var $81=(($80+40)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)<0;
 if($83){label=4;break;}else{label=5;break;}
 case 4: 
 var $85=$xxs;
 var $86=(($85+40)|0);
 HEAP32[(($86)>>2)]=0;
 label=5;break;
 case 5: 
 var $88=$xxs;
 var $89=(($88+32)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)>0;
 if($91){label=6;break;}else{label=7;break;}
 case 6: 
 var $93=$xxi;
 var $94=(($93+36)|0);
 HEAP32[(($94)>>2)]=1;
 label=7;break;
 case 7: 
 $finetune=0;
 var $96=$data;
 var $97=(($96)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)!=0;
 if($99){label=8;break;}else{label=13;break;}
 case 8: 
 var $101=$xxs;
 var $102=(($101+32)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)>2;
 if($104){label=9;break;}else{label=10;break;}
 case 9: 
 var $106=$xxs;
 var $107=(($106+32)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=((($108)-(2))|0);
 HEAP32[(($107)>>2)]=$109;
 label=10;break;
 case 10: 
 var $111=$xxs;
 var $112=(($111+40)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($113|0)>2;
 if($114){label=11;break;}else{label=12;break;}
 case 11: 
 var $116=$xxs;
 var $117=(($116+40)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=((($118)-(2))|0);
 HEAP32[(($117)>>2)]=$119;
 label=12;break;
 case 12: 
 var $121=$4;
 var $122=_hio_read8s($121);
 var $123=(($122<<24)>>24);
 var $124=$123<<4;
 var $125=(($124)&255);
 var $126=(($125<<24)>>24);
 $finetune=$126;
 label=13;break;
 case 13: 
 var $128=$4;
 var $129=_hio_read8($128);
 var $130=($129&255);
 var $131=(((($130|0))/(2))&-1);
 var $132=((($131)+(1))|0);
 var $133=$sub;
 var $134=(($133)|0);
 HEAP32[(($134)>>2)]=$132;
 var $135=$4;
 var $136=_hio_read32l($135);
 var $137=$sub;
 var $138=(($137+8)|0);
 HEAP32[(($138)>>2)]=128;
 var $139=$i;
 var $140=$sub;
 var $141=(($140+40)|0);
 HEAP32[(($141)>>2)]=$139;
 var $142=$4;
 var $143=_hio_read32l($142);
 $srate=$143;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $146=$srate;
 var $147=((($146)*(8363))&-1);
 var $148=(((($147|0))/(8448))&-1);
 $srate=$148;
 var $149=$srate;
 var $150=$sub;
 var $151=(($150+12)|0);
 var $152=$sub;
 var $153=(($152+16)|0);
 _c2spd_to_note($149,$151,$153);
 var $154=$finetune;
 var $155=$sub;
 var $156=(($155+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=((($157)+($154))|0);
 HEAP32[(($156)>>2)]=$158;
 var $159=$4;
 var $160=_hio_seek($159,16,1);
 var $161=$2;
 var $162=$4;
 var $163=$xxs;
 var $164=_load_sample($161,$162,4,$163,0);
 var $165=($164|0)<0;
 if($165){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=18;break;
 case 17: 
 var $168=$data;
 var $169=(($168+8)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=((($170)+(1))|0);
 HEAP32[(($169)>>2)]=$171;
 $1=0;
 label=18;break;
 case 18: 
 var $173=$1;
 STACKTOP=sp;return $173;
  default: assert(0, "bad label: " + label);
 }
}
function _get_pbod($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $r;
 var $event;
 var $dummy=sp;
 var $flag;
 var $chan;
 var $len;
 var $rows;
 var $rowlen;
 var $note;
 var $fxt;
 var $fxp;
 var $note1;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$data;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 $i=$12;
 var $13=$4;
 var $14=_hio_read32l($13);
 $len=$14;
 var $15=$data;
 var $16=(($15+12)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$i;
 var $19=($18<<3);
 var $20=(($17+$19)|0);
 var $21=$data;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)!=0;
 var $25=($24?8:4);
 var $26=$4;
 var $27=_hio_read($20,1,$25,$26);
 var $28=$4;
 var $29=_hio_read16l($28);
 var $30=($29&65535);
 $rows=$30;
 var $31=$mod;
 var $32=$i;
 var $33=$rows;
 var $34=_pattern_tracks_alloc($31,$32,$33);
 var $35=($34|0)<0;
 if($35){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=52;break;
 case 3: 
 $r=0;
 label=4;break;
 case 4: 
 var $39=$4;
 var $40=_hio_read16l($39);
 var $41=($40&65535);
 var $42=((($41)-(2))|0);
 $rowlen=$42;
 label=5;break;
 case 5: 
 var $44=$rowlen;
 var $45=($44|0)>0;
 if($45){label=6;break;}else{label=49;break;}
 case 6: 
 var $47=$4;
 var $48=_hio_read8($47);
 $flag=$48;
 var $49=$rowlen;
 var $50=($49|0)==1;
 if($50){label=7;break;}else{label=8;break;}
 case 7: 
 label=49;break;
 case 8: 
 var $53=$4;
 var $54=_hio_read8($53);
 $chan=$54;
 var $55=$rowlen;
 var $56=((($55)-(2))|0);
 $rowlen=$56;
 var $57=$chan;
 var $58=($57&255);
 var $59=$mod;
 var $60=(($59+136)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($58|0)<($61|0);
 if($62){label=9;break;}else{label=10;break;}
 case 9: 
 var $64=$r;
 var $65=$chan;
 var $66=($65&255);
 var $67=$i;
 var $68=$2;
 var $69=(($68)|0);
 var $70=(($69+168)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+($67<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+4)|0);
 var $75=(($74+($66<<2))|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$2;
 var $78=(($77)|0);
 var $79=(($78+172)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+($76<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+4)|0);
 var $84=(($83+($64<<3))|0);
 var $87=$84;label=11;break;
 case 10: 
 var $87=$dummy;label=11;break;
 case 11: 
 var $87;
 $event=$87;
 var $88=$flag;
 var $89=($88&255);
 var $90=$89&128;
 var $91=($90|0)!=0;
 if($91){label=12;break;}else{label=16;break;}
 case 12: 
 var $93=$4;
 var $94=_hio_read8($93);
 $note=$94;
 var $95=$rowlen;
 var $96=((($95)-(1))|0);
 $rowlen=$96;
 var $97=$data;
 var $98=(($97)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)!=0;
 if($100){label=13;break;}else{label=14;break;}
 case 13: 
 var $102=$note;
 var $103=($102&255);
 var $104=((($103)+(37))|0);
 var $105=(($104)&255);
 $note=$105;
 label=15;break;
 case 14: 
 var $107=$note;
 var $108=($107&255);
 var $109=$108>>4;
 var $110=((($109)*(12))&-1);
 var $111=$note;
 var $112=($111&255);
 var $113=$112&15;
 var $114=((($110)+($113))|0);
 var $115=((($114)+(2))|0);
 var $116=((($115)+(12))|0);
 var $117=(($116)&255);
 $note=$117;
 label=15;break;
 case 15: 
 var $119=$note;
 var $120=$event;
 var $121=(($120)|0);
 HEAP8[($121)]=$119;
 label=16;break;
 case 16: 
 var $123=$flag;
 var $124=($123&255);
 var $125=$124&64;
 var $126=($125|0)!=0;
 if($126){label=17;break;}else{label=18;break;}
 case 17: 
 var $128=$4;
 var $129=_hio_read8($128);
 var $130=($129&255);
 var $131=((($130)+(1))|0);
 var $132=(($131)&255);
 var $133=$event;
 var $134=(($133+1)|0);
 HEAP8[($134)]=$132;
 var $135=$rowlen;
 var $136=((($135)-(1))|0);
 $rowlen=$136;
 label=18;break;
 case 18: 
 var $138=$flag;
 var $139=($138&255);
 var $140=$139&32;
 var $141=($140|0)!=0;
 if($141){label=19;break;}else{label=20;break;}
 case 19: 
 var $143=$4;
 var $144=_hio_read8($143);
 var $145=($144&255);
 var $146=(((($145|0))/(2))&-1);
 var $147=(($146)&255);
 var $148=$event;
 var $149=(($148+2)|0);
 HEAP8[($149)]=$147;
 var $150=$rowlen;
 var $151=((($150)-(1))|0);
 $rowlen=$151;
 label=20;break;
 case 20: 
 var $153=$flag;
 var $154=($153&255);
 var $155=$154&16;
 var $156=($155|0)!=0;
 if($156){label=21;break;}else{label=48;break;}
 case 21: 
 var $158=$4;
 var $159=_hio_read8($158);
 $fxt=$159;
 var $160=$4;
 var $161=_hio_read8($160);
 $fxp=$161;
 var $162=$rowlen;
 var $163=((($162)-(2))|0);
 $rowlen=$163;
 var $164=$fxt;
 var $165=($164&255);
 var $166=($165|0)>=64;
 if($166){label=22;break;}else{label=28;break;}
 case 22: 
 var $168=$fxp;
 var $169=($168&255);
 var $170=$169>>4;
 if(($170|0)==0){ label=23;break;}else{label=24;break;}
 case 23: 
 var $172=$fxt;
 var $173=($172&255);
 var $174=$173>>4;
 var $175=((($174)*(12))&-1);
 var $176=$fxt;
 var $177=($176&255);
 var $178=$177&15;
 var $179=((($175)+($178))|0);
 var $180=((($179)+(2))|0);
 var $181=(($180)&255);
 $note1=$181;
 var $182=$note1;
 var $183=$event;
 var $184=(($183)|0);
 HEAP8[($184)]=$182;
 $fxt=3;
 var $185=$fxp;
 var $186=($185&255);
 var $187=((($186)+(1))|0);
 var $188=($187<<1);
 var $189=(($188)&255);
 $fxp=$189;
 label=27;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=47;break;
 case 28: 
 var $195=$fxt;
 var $196=($195&255);
 switch(($196|0)){case 1:{ label=29;break;}case 2:{ label=30;break;}case 3:{ label=31;break;}case 4:{ label=32;break;}case 12:{ label=33;break;}case 14:{ label=34;break;}case 15:{ label=35;break;}case 21:{ label=36;break;}case 42:{ label=37;break;}case 41:{ label=38;break;}case 51:{ label=39;break;}case 52:{ label=40;break;}case 61:{ label=41;break;}case 62:{ label=42;break;}default:{label=43;break;}}break;
 case 29: 
 $fxt=14;
 var $198=$fxp;
 var $199=($198&255);
 var $200=(((($199|0))/(2))&-1);
 var $201=$200&15;
 var $202=160|$201;
 var $203=(($202)&255);
 $fxp=$203;
 label=46;break;
 case 30: 
 $fxt=10;
 var $205=$fxp;
 var $206=($205&255);
 var $207=(((($206|0))/(2))&-1);
 var $208=$207<<4;
 var $209=(($208)&255);
 $fxp=$209;
 label=46;break;
 case 31: 
 $fxt=14;
 var $211=$fxp;
 var $212=($211&255);
 var $213=(((($212|0))/(2))&-1);
 var $214=$213&15;
 var $215=176|$214;
 var $216=(($215)&255);
 $fxp=$216;
 label=46;break;
 case 32: 
 $fxt=10;
 var $218=$fxp;
 var $219=($218&255);
 var $220=(((($219|0))/(2))&-1);
 var $221=(($220)&255);
 $fxp=$221;
 label=46;break;
 case 33: 
 $fxt=1;
 var $223=$fxp;
 var $224=($223&255);
 var $225=((($224)-(1))|0);
 var $226=(((($225|0))/(2))&-1);
 var $227=(($226)&255);
 $fxp=$227;
 label=46;break;
 case 34: 
 $fxt=2;
 var $229=$fxp;
 var $230=($229&255);
 var $231=((($230)-(1))|0);
 var $232=(((($231|0))/(2))&-1);
 var $233=(($232)&255);
 $fxp=$233;
 label=46;break;
 case 35: 
 $fxt=3;
 var $235=$fxp;
 var $236=($235&255);
 var $237=(((($236|0))/(4))&-1);
 var $238=(($237)&255);
 $fxp=$238;
 label=46;break;
 case 36: 
 var $240=$data;
 var $241=(($240)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)!=0;
 var $244=($243?4:172);
 var $245=(($244)&255);
 $fxt=$245;
 label=46;break;
 case 37: 
 $fxt=14;
 var $247=$fxp;
 var $248=($247&255);
 var $249=$248&15;
 var $250=144|$249;
 var $251=(($250)&255);
 $fxp=$251;
 label=46;break;
 case 38: 
 var $253=$4;
 var $254=_hio_read16l($253);
 var $255=$rowlen;
 var $256=((($255)-(2))|0);
 $rowlen=$256;
 label=46;break;
 case 39: 
 $fxt=11;
 label=46;break;
 case 40: 
 $fxt=13;
 label=46;break;
 case 41: 
 $fxt=15;
 label=46;break;
 case 42: 
 $fxt=15;
 label=46;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 $fxp=0;
 $fxt=0;
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $266=$fxt;
 var $267=$event;
 var $268=(($267+3)|0);
 HEAP8[($268)]=$266;
 var $269=$fxp;
 var $270=$event;
 var $271=(($270+4)|0);
 HEAP8[($271)]=$269;
 label=48;break;
 case 48: 
 label=5;break;
 case 49: 
 var $274=$r;
 var $275=((($274)+(1))|0);
 $r=$275;
 label=50;break;
 case 50: 
 var $277=$r;
 var $278=$rows;
 var $279=($277|0)<($278|0);
 if($279){label=4;break;}else{label=51;break;}
 case 51: 
 var $281=$data;
 var $282=(($281+4)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=((($283)+(1))|0);
 HEAP32[(($282)>>2)]=$284;
 $1=0;
 label=52;break;
 case 52: 
 var $286=$1;
 STACKTOP=sp;return $286;
  default: assert(0, "bad label: " + label);
 }
}
function _mdl_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $id;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1145914444;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=7;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read8($10);
 var $12=$2;
 var $13=_hio_read16b($12);
 $id=$13;
 var $14=$id;
 var $15=($14&65535);
 var $16=($15|0)==18766;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=_hio_read32b($18);
 var $20=$2;
 var $21=$3;
 _read_title($20,$21,32);
 label=6;break;
 case 5: 
 var $23=$2;
 var $24=$3;
 _read_title($23,$24,0);
 label=6;break;
 case 6: 
 $1=0;
 label=7;break;
 case 7: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _mdl_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $handle;
 var $i;
 var $j;
 var $k;
 var $l;
 var $buf=sp;
 var $data=(sp)+(8);
 var $retval;
 var $e;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $retval=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$data;
 _memset($12, 0, 52)|0;
 var $13=$3;
 var $14=_hio_read32b($13);
 var $15=(($buf)|0);
 var $16=$3;
 var $17=_hio_read($15,1,1,$16);
 var $18=_iff_new();
 $handle=$18;
 var $19=$handle;
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=45;break;
 case 5: 
 var $23=$handle;
 var $24=_iff_register($23,26640,444);
 var $25=$handle;
 var $26=_iff_register($25,24768,430);
 var $27=$handle;
 var $28=_iff_register($27,23640,168);
 var $29=$handle;
 var $30=_iff_register($29,22952,74);
 var $31=$handle;
 var $32=_iff_register($31,22160,244);
 var $33=$handle;
 var $34=_iff_register($33,21528,392);
 var $35=(($buf)|0);
 var $36=HEAP8[($35)];
 var $37=(($36<<24)>>24);
 var $38=$37&240;
 var $39=$38>>4;
 var $40=($39|0)!=0;
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 var $42=$handle;
 var $43=_iff_register($42,21136,232);
 var $44=$handle;
 var $45=_iff_register($44,20712,276);
 var $46=$handle;
 var $47=_iff_register($46,20464,76);
 label=8;break;
 case 7: 
 var $49=$handle;
 var $50=_iff_register($49,20712,178);
 var $51=$handle;
 var $52=_iff_register($51,20464,318);
 label=8;break;
 case 8: 
 var $54=$handle;
 _iff_id_size($54,2);
 var $55=$handle;
 _iff_set_quirk($55,1);
 var $56=$2;
 var $57=(($buf)|0);
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24);
 var $60=$59&240;
 var $61=$60>>4;
 var $62=(($buf)|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24);
 var $65=$64&15;
 _set_type($56,27472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$61,HEAP32[(((tempVarArgs)+(8))>>2)]=$65,tempVarArgs)); STACKTOP=tempVarArgs;
 var $66=$2;
 var $67=(($66+1268)|0);
 HEAP32[(($67)>>2)]=255;
 var $68=$2;
 var $69=(($68+1264)|0);
 HEAP32[(($69)>>2)]=8363;
 var $70=(($data+36)|0);
 HEAP32[(($70)>>2)]=0;
 var $71=(($data+32)|0);
 HEAP32[(($71)>>2)]=0;
 var $72=(($data+28)|0);
 HEAP32[(($72)>>2)]=0;
 var $73=_calloc(256,4);
 var $74=$73;
 var $75=(($data+4)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=_calloc(256,4);
 var $77=$76;
 var $78=(($data)|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=_malloc(1024);
 var $80=$79;
 var $81=(($data+8)|0);
 HEAP32[(($81)>>2)]=$80;
 var $82=_malloc(1024);
 var $83=$82;
 var $84=(($data+12)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=_malloc(1024);
 var $86=$85;
 var $87=(($data+16)|0);
 HEAP32[(($87)>>2)]=$86;
 var $88=_calloc(256,4);
 var $89=$88;
 var $90=(($data+20)|0);
 HEAP32[(($90)>>2)]=$89;
 $i=0;
 label=9;break;
 case 9: 
 var $92=$i;
 var $93=($92|0)<256;
 if($93){label=10;break;}else{label=12;break;}
 case 10: 
 var $95=$i;
 var $96=(($data+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+($95<<2))|0);
 HEAP32[(($98)>>2)]=-1;
 var $99=$i;
 var $100=(($data+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+($99<<2))|0);
 HEAP32[(($102)>>2)]=-1;
 var $103=$i;
 var $104=(($data+8)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+($103<<2))|0);
 HEAP32[(($106)>>2)]=-1;
 label=11;break;
 case 11: 
 var $108=$i;
 var $109=((($108)+(1))|0);
 $i=$109;
 label=9;break;
 case 12: 
 var $111=$handle;
 var $112=$2;
 var $113=$3;
 var $114=$data;
 var $115=_iff_load($111,$112,$113,$114);
 var $116=($115|0)<0;
 if($116){label=13;break;}else{label=14;break;}
 case 13: 
 var $118=$handle;
 _iff_release($118);
 $retval=-1;
 label=44;break;
 case 14: 
 var $120=$handle;
 _iff_release($120);
 $i=0;
 label=15;break;
 case 15: 
 var $122=$i;
 var $123=$mod;
 var $124=(($123+132)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($122|0)<($125|0);
 if($126){label=16;break;}else{label=29;break;}
 case 16: 
 $j=0;
 label=17;break;
 case 17: 
 var $129=$j;
 var $130=$i;
 var $131=$mod;
 var $132=(($131+172)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+($130<<2))|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($129|0)<($137|0);
 if($138){label=18;break;}else{label=27;break;}
 case 18: 
 var $140=$j;
 var $141=$i;
 var $142=$mod;
 var $143=(($142+172)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+($141<<2))|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+4)|0);
 var $148=(($147+($140<<3))|0);
 $e=$148;
 $l=0;
 label=19;break;
 case 19: 
 var $150=$l;
 var $151=$mod;
 var $152=(($151+140)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($150|0)<($153|0);
 if($154){label=20;break;}else{label=25;break;}
 case 20: 
 var $156=$e;
 var $157=(($156+1)|0);
 var $158=HEAP8[($157)];
 var $159=($158&255);
 var $160=($159|0)!=0;
 if($160){label=21;break;}else{label=23;break;}
 case 21: 
 var $162=$e;
 var $163=(($162+1)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=$l;
 var $167=(($data)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+($166<<2))|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($165|0)==($170|0);
 if($171){label=22;break;}else{label=23;break;}
 case 22: 
 var $173=$l;
 var $174=((($173)+(1))|0);
 var $175=(($174)&255);
 var $176=$e;
 var $177=(($176+1)|0);
 HEAP8[($177)]=$175;
 label=25;break;
 case 23: 
 label=24;break;
 case 24: 
 var $180=$l;
 var $181=((($180)+(1))|0);
 $l=$181;
 label=19;break;
 case 25: 
 label=26;break;
 case 26: 
 var $184=$j;
 var $185=((($184)+(1))|0);
 $j=$185;
 label=17;break;
 case 27: 
 label=28;break;
 case 28: 
 var $188=$i;
 var $189=((($188)+(1))|0);
 $i=$189;
 label=15;break;
 case 29: 
 $i=0;
 label=30;break;
 case 30: 
 var $192=$i;
 var $193=$mod;
 var $194=(($193+140)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($192|0)<($195|0);
 if($196){label=31;break;}else{label=43;break;}
 case 31: 
 var $198=$i;
 var $199=$i;
 var $200=$mod;
 var $201=(($200+176)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+((($199)*(764))&-1))|0);
 var $204=(($203+44)|0);
 var $205=(($data+40)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($data+8)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($data+28)|0);
 var $210=HEAP32[(($209)>>2)];
 _fix_env($198,$204,$206,$208,$210);
 var $211=$i;
 var $212=$i;
 var $213=$mod;
 var $214=(($213+176)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+((($212)*(764))&-1))|0);
 var $217=(($216+200)|0);
 var $218=(($data+44)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($data+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($data+32)|0);
 var $223=HEAP32[(($222)>>2)];
 _fix_env($211,$217,$219,$221,$223);
 var $224=$i;
 var $225=$i;
 var $226=$mod;
 var $227=(($226+176)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+((($225)*(764))&-1))|0);
 var $230=(($229+356)|0);
 var $231=(($data+48)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($data+16)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($data+36)|0);
 var $236=HEAP32[(($235)>>2)];
 _fix_env($224,$230,$232,$234,$236);
 $j=0;
 label=32;break;
 case 32: 
 var $238=$j;
 var $239=$i;
 var $240=$mod;
 var $241=(($240+176)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+((($239)*(764))&-1))|0);
 var $244=(($243+36)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($238|0)<($245|0);
 if($246){label=33;break;}else{label=41;break;}
 case 33: 
 $k=0;
 label=34;break;
 case 34: 
 var $249=$k;
 var $250=$mod;
 var $251=(($250+144)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($249|0)<($252|0);
 if($253){label=35;break;}else{label=39;break;}
 case 35: 
 var $255=$j;
 var $256=$i;
 var $257=$mod;
 var $258=(($257+176)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+((($256)*(764))&-1))|0);
 var $261=(($260+756)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262+($255<<6))|0);
 var $264=(($263+40)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=$k;
 var $267=(($data+4)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+($266<<2))|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=($265|0)==($270|0);
 if($271){label=36;break;}else{label=37;break;}
 case 36: 
 var $273=$k;
 var $274=$j;
 var $275=$i;
 var $276=$mod;
 var $277=(($276+176)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($278+((($275)*(764))&-1))|0);
 var $280=(($279+756)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($281+($274<<6))|0);
 var $283=(($282+40)|0);
 HEAP32[(($283)>>2)]=$273;
 var $284=$k;
 var $285=(($data+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=(($286+($284<<2))|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$j;
 var $290=$i;
 var $291=$mod;
 var $292=(($291+176)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293+((($290)*(764))&-1))|0);
 var $295=(($294+756)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296+($289<<6))|0);
 var $298=(($297+12)|0);
 var $299=$j;
 var $300=$i;
 var $301=$mod;
 var $302=(($301+176)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=(($303+((($300)*(764))&-1))|0);
 var $305=(($304+756)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=(($306+($299<<6))|0);
 var $308=(($307+16)|0);
 _c2spd_to_note($288,$298,$308);
 label=39;break;
 case 37: 
 label=38;break;
 case 38: 
 var $311=$k;
 var $312=((($311)+(1))|0);
 $k=$312;
 label=34;break;
 case 39: 
 label=40;break;
 case 40: 
 var $315=$j;
 var $316=((($315)+(1))|0);
 $j=$316;
 label=32;break;
 case 41: 
 label=42;break;
 case 42: 
 var $319=$i;
 var $320=((($319)+(1))|0);
 $i=$320;
 label=30;break;
 case 43: 
 label=44;break;
 case 44: 
 var $323=(($data+20)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=$324;
 _free($325);
 var $326=(($data+16)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=$327;
 _free($328);
 var $329=(($data+12)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$330;
 _free($331);
 var $332=(($data+8)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=$333;
 _free($334);
 var $335=(($data)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=$336;
 _free($337);
 var $338=(($data+4)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=$339;
 _free($340);
 var $341=(($data+40)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=$342;
 _free($343);
 var $344=(($data+44)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=$345;
 _free($346);
 var $347=(($data+48)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=$348;
 _free($349);
 var $350=(($data+24)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=$351;
 _free($352);
 var $353=$2;
 var $354=(($353+1280)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=$355|262176;
 HEAP32[(($354)>>2)]=$356;
 var $357=$2;
 var $358=(($357+1284)|0);
 HEAP32[(($358)>>2)]=1;
 var $359=$retval;
 $1=$359;
 label=45;break;
 case 45: 
 var $361=$1;
 STACKTOP=sp;return $361;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_in($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $chinfo;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=$3;
 var $11=_hio_read($9,1,32,$10);
 var $12=$3;
 var $13=_hio_seek($12,20,1);
 var $14=$3;
 var $15=_hio_read16l($14);
 var $16=($15&65535);
 var $17=$mod;
 var $18=(($17+156)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$3;
 var $20=_hio_read16l($19);
 var $21=($20&65535);
 var $22=$mod;
 var $23=(($22+160)|0);
 HEAP32[(($23)>>2)]=$21;
 var $24=$3;
 var $25=_hio_read8($24);
 var $26=$3;
 var $27=_hio_read8($26);
 var $28=($27&255);
 var $29=$mod;
 var $30=(($29+148)|0);
 HEAP32[(($30)>>2)]=$28;
 var $31=$3;
 var $32=_hio_read8($31);
 var $33=($32&255);
 var $34=$mod;
 var $35=(($34+152)|0);
 HEAP32[(($35)>>2)]=$33;
 $i=0;
 label=2;break;
 case 2: 
 var $37=$i;
 var $38=($37|0)<32;
 if($38){label=3;break;}else{label=7;break;}
 case 3: 
 var $40=$3;
 var $41=_hio_read8($40);
 $chinfo=$41;
 var $42=$chinfo;
 var $43=($42&255);
 var $44=$43&128;
 var $45=($44|0)!=0;
 if($45){label=4;break;}else{label=5;break;}
 case 4: 
 label=7;break;
 case 5: 
 var $48=$chinfo;
 var $49=($48&255);
 var $50=$49<<1;
 var $51=$i;
 var $52=$mod;
 var $53=(($52+184)|0);
 var $54=(($53+((($51)*(12))&-1))|0);
 var $55=(($54)|0);
 HEAP32[(($55)>>2)]=$50;
 label=6;break;
 case 6: 
 var $57=$i;
 var $58=((($57)+(1))|0);
 $i=$58;
 label=2;break;
 case 7: 
 var $60=$i;
 var $61=$mod;
 var $62=(($61+136)|0);
 HEAP32[(($62)>>2)]=$60;
 var $63=$3;
 var $64=$i;
 var $65=(((32)-($64))|0);
 var $66=((($65)-(1))|0);
 var $67=_hio_seek($63,$66,1);
 var $68=$mod;
 var $69=(($68+952)|0);
 var $70=(($69)|0);
 var $71=$mod;
 var $72=(($71+156)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$3;
 var $75=_hio_read($70,1,$73,$74);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_tr($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $row;
 var $len;
 var $track;
 var $ev;
 var $b;
 var $ev1;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read16l($8);
 var $10=($9&65535);
 var $11=((($10)+(1))|0);
 var $12=$mod;
 var $13=(($12+132)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$mod;
 var $15=(($14+132)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=_calloc(4,$16);
 var $18=$17;
 var $19=$mod;
 var $20=(($19+172)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=($18|0)==0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=53;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $26=_calloc(1,2052);
 var $27=$26;
 $track=$27;
 var $28=$track;
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=53;break;
 case 7: 
 var $32=$mod;
 var $33=_track_alloc($32,0,256);
 var $34=($33|0)<0;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=53;break;
 case 9: 
 $i=1;
 label=10;break;
 case 10: 
 var $38=$i;
 var $39=$mod;
 var $40=(($39+132)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($38|0)<($41|0);
 if($42){label=11;break;}else{label=52;break;}
 case 11: 
 var $44=$4;
 var $45=_hio_read16l($44);
 var $46=($45&65535);
 $len=$46;
 var $47=$track;
 var $48=$47;
 _memset($48, 0, 2052)|0;
 $row=0;
 label=12;break;
 case 12: 
 var $50=$len;
 var $51=($50|0)!=0;
 if($51){label=13;break;}else{label=38;break;}
 case 13: 
 var $53=$row;
 var $54=$track;
 var $55=(($54+4)|0);
 var $56=(($55+($53<<3))|0);
 $ev=$56;
 var $57=$4;
 var $58=_hio_read8($57);
 var $59=($58&255);
 $j=$59;
 var $60=$len;
 var $61=((($60)-(1))|0);
 $len=$61;
 var $62=$j;
 var $63=$62&3;
 if(($63|0)==0){ label=14;break;}else if(($63|0)==1){ label=15;break;}else if(($63|0)==2){ label=20;break;}else if(($63|0)==3){ label=21;break;}else{label=37;break;}
 case 14: 
 var $65=$j;
 var $66=$65>>2;
 var $67=$row;
 var $68=((($67)+($66))|0);
 $row=$68;
 var $69=$row;
 var $70=$track;
 var $71=(($70+4)|0);
 var $72=(($71+($69<<3))|0);
 $ev=$72;
 label=37;break;
 case 15: 
 $k=0;
 label=16;break;
 case 16: 
 var $75=$k;
 var $76=$j;
 var $77=$76>>2;
 var $78=($75|0)<=($77|0);
 if($78){label=17;break;}else{label=19;break;}
 case 17: 
 var $80=$k;
 var $81=$ev;
 var $82=(($81+($80<<3))|0);
 var $83=$82;
 var $84=$ev;
 var $85=((($84)-(8))|0);
 var $86=$85;
 assert(8 % 1 === 0);(_memcpy($83, $86, 8)|0);
 label=18;break;
 case 18: 
 var $88=$k;
 var $89=((($88)+(1))|0);
 $k=$89;
 label=16;break;
 case 19: 
 var $91=$k;
 var $92=((($91)-(1))|0);
 var $93=$row;
 var $94=((($93)+($92))|0);
 $row=$94;
 var $95=$row;
 var $96=$track;
 var $97=(($96+4)|0);
 var $98=(($97+($95<<3))|0);
 $ev=$98;
 label=37;break;
 case 20: 
 var $100=$ev;
 var $101=$100;
 var $102=$j;
 var $103=$102>>2;
 var $104=$track;
 var $105=(($104+4)|0);
 var $106=(($105+($103<<3))|0);
 var $107=$106;
 assert(8 % 1 === 0);(_memcpy($101, $107, 8)|0);
 label=37;break;
 case 21: 
 var $109=$j;
 var $110=$109&4;
 var $111=($110|0)!=0;
 if($111){label=22;break;}else{label=26;break;}
 case 22: 
 var $113=$4;
 var $114=_hio_read8($113);
 $b=$114;
 var $115=$len;
 var $116=((($115)-(1))|0);
 $len=$116;
 var $117=$b;
 var $118=($117&255);
 var $119=($118|0)==255;
 if($119){label=23;break;}else{label=24;break;}
 case 23: 
 var $126=129;label=25;break;
 case 24: 
 var $122=$b;
 var $123=($122&255);
 var $124=((($123)+(12))|0);
 var $126=$124;label=25;break;
 case 25: 
 var $126;
 var $127=(($126)&255);
 var $128=$ev;
 var $129=(($128)|0);
 HEAP8[($129)]=$127;
 label=26;break;
 case 26: 
 var $131=$j;
 var $132=$131&8;
 var $133=($132|0)!=0;
 if($133){label=27;break;}else{label=28;break;}
 case 27: 
 var $135=$len;
 var $136=((($135)-(1))|0);
 $len=$136;
 var $137=$4;
 var $138=_hio_read8($137);
 var $139=$ev;
 var $140=(($139+1)|0);
 HEAP8[($140)]=$138;
 label=28;break;
 case 28: 
 var $142=$j;
 var $143=$142&16;
 var $144=($143|0)!=0;
 if($144){label=29;break;}else{label=30;break;}
 case 29: 
 var $146=$len;
 var $147=((($146)-(1))|0);
 $len=$147;
 var $148=$4;
 var $149=_hio_read8($148);
 var $150=$ev;
 var $151=(($150+2)|0);
 HEAP8[($151)]=$149;
 label=30;break;
 case 30: 
 var $153=$j;
 var $154=$153&32;
 var $155=($154|0)!=0;
 if($155){label=31;break;}else{label=32;break;}
 case 31: 
 var $157=$len;
 var $158=((($157)-(1))|0);
 $len=$158;
 var $159=$4;
 var $160=_hio_read8($159);
 var $161=($160&255);
 $k=$161;
 var $162=$k;
 var $163=$162&15;
 var $164=(($163)&255);
 var $165=$ev;
 var $166=(($165+3)|0);
 HEAP8[($166)]=$164;
 var $167=$k;
 var $168=$167&240;
 var $169=$168>>4;
 var $170=(($169)&255);
 var $171=$ev;
 var $172=(($171+5)|0);
 HEAP8[($172)]=$170;
 label=32;break;
 case 32: 
 var $174=$j;
 var $175=$174&64;
 var $176=($175|0)!=0;
 if($176){label=33;break;}else{label=34;break;}
 case 33: 
 var $178=$len;
 var $179=((($178)-(1))|0);
 $len=$179;
 var $180=$4;
 var $181=_hio_read8($180);
 var $182=$ev;
 var $183=(($182+4)|0);
 HEAP8[($183)]=$181;
 label=34;break;
 case 34: 
 var $185=$j;
 var $186=$185&128;
 var $187=($186|0)!=0;
 if($187){label=35;break;}else{label=36;break;}
 case 35: 
 var $189=$len;
 var $190=((($189)-(1))|0);
 $len=$190;
 var $191=$4;
 var $192=_hio_read8($191);
 var $193=$ev;
 var $194=(($193+6)|0);
 HEAP8[($194)]=$192;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $197=$row;
 var $198=((($197)+(1))|0);
 $row=$198;
 label=12;break;
 case 38: 
 var $200=$row;
 var $201=($200|0)<=64;
 if($201){label=39;break;}else{label=40;break;}
 case 39: 
 $row=64;
 label=44;break;
 case 40: 
 var $204=$row;
 var $205=($204|0)<=128;
 if($205){label=41;break;}else{label=42;break;}
 case 41: 
 $row=128;
 label=43;break;
 case 42: 
 $row=256;
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $210=$mod;
 var $211=$i;
 var $212=$row;
 var $213=_track_alloc($210,$211,$212);
 var $214=($213|0)<0;
 if($214){label=45;break;}else{label=46;break;}
 case 45: 
 $1=-1;
 label=53;break;
 case 46: 
 var $217=$i;
 var $218=$mod;
 var $219=(($218+172)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+($217<<2))|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=$222;
 var $224=$track;
 var $225=$224;
 var $226=$row;
 var $227=((($226)-(1))|0);
 var $228=($227<<3);
 var $229=((($228)+(12))|0);
 assert($229 % 1 === 0);(_memcpy($223, $225, $229)|0);
 var $230=$row;
 var $231=$i;
 var $232=$mod;
 var $233=(($232+172)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+($231<<2))|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236)|0);
 HEAP32[(($237)>>2)]=$230;
 $j=0;
 label=47;break;
 case 47: 
 var $239=$j;
 var $240=$row;
 var $241=($239|0)<($240|0);
 if($241){label=48;break;}else{label=50;break;}
 case 48: 
 var $243=$j;
 var $244=$i;
 var $245=$mod;
 var $246=(($245+172)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+($244<<2))|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+4)|0);
 var $251=(($250+($243<<3))|0);
 $ev1=$251;
 var $252=$ev1;
 var $253=(($252+3)|0);
 var $254=$ev1;
 var $255=(($254+4)|0);
 _xlat_fx1($253,$255);
 var $256=$ev1;
 var $257=(($256+5)|0);
 var $258=$ev1;
 var $259=(($258+6)|0);
 _xlat_fx2($257,$259);
 label=49;break;
 case 49: 
 var $261=$j;
 var $262=((($261)+(1))|0);
 $j=$262;
 label=47;break;
 case 50: 
 label=51;break;
 case 51: 
 var $265=$i;
 var $266=((($265)+(1))|0);
 $i=$266;
 label=10;break;
 case 52: 
 var $268=$track;
 var $269=$268;
 _free($269);
 $1=0;
 label=53;break;
 case 53: 
 var $271=$1;
 STACKTOP=sp;return $271;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_sa($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $len;
 var $smpbuf;
 var $buf;
 var $xxs;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $13=$i;
 var $14=$mod;
 var $15=(($14+144)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($13|0)<($16|0);
 if($17){label=5;break;}else{label=21;break;}
 case 5: 
 var $19=$i;
 var $20=$mod;
 var $21=(($20+180)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+((($19)*(52))&-1))|0);
 $xxs=$23;
 var $24=$xxs;
 var $25=(($24+32)|0);
 var $26=HEAP32[(($25)>>2)];
 $len=$26;
 var $27=$xxs;
 var $28=(($27+44)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29&1;
 var $31=($30|0)!=0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 var $33=$len;
 var $34=$33<<1;
 $len=$34;
 label=7;break;
 case 7: 
 var $36=$len;
 var $37=_calloc(1,$36);
 $smpbuf=$37;
 var $38=($37|0)==0;
 if($38){label=8;break;}else{label=9;break;}
 case 8: 
 label=23;break;
 case 9: 
 var $41=$i;
 var $42=$data;
 var $43=(($42+24)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+($41<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 if(($46|0)==0){ label=10;break;}else if(($46|0)==1){ label=11;break;}else if(($46|0)==2){ label=14;break;}else{label=17;break;}
 case 10: 
 var $48=$smpbuf;
 var $49=$len;
 var $50=$4;
 var $51=_hio_read($48,1,$49,$50);
 label=17;break;
 case 11: 
 var $53=$4;
 var $54=_hio_read32l($53);
 $len=$54;
 var $55=$len;
 var $56=((($55)+(4))|0);
 var $57=_malloc($56);
 $buf=$57;
 var $58=($57|0)==0;
 if($58){label=12;break;}else{label=13;break;}
 case 12: 
 label=22;break;
 case 13: 
 var $61=$buf;
 var $62=$len;
 var $63=$4;
 var $64=_hio_read($61,1,$62,$63);
 var $65=$smpbuf;
 var $66=$buf;
 var $67=$len;
 var $68=$xxs;
 var $69=(($68+32)|0);
 var $70=HEAP32[(($69)>>2)];
 _unpack_sample8($65,$66,$67,$70);
 var $71=$buf;
 _free($71);
 label=17;break;
 case 14: 
 var $73=$4;
 var $74=_hio_read32l($73);
 $len=$74;
 var $75=$len;
 var $76=((($75)+(4))|0);
 var $77=_malloc($76);
 $buf=$77;
 var $78=($77|0)==0;
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 label=22;break;
 case 16: 
 var $81=$buf;
 var $82=$len;
 var $83=$4;
 var $84=_hio_read($81,1,$82,$83);
 var $85=$smpbuf;
 var $86=$buf;
 var $87=$len;
 var $88=$xxs;
 var $89=(($88+32)|0);
 var $90=HEAP32[(($89)>>2)];
 _unpack_sample16($85,$86,$87,$90);
 var $91=$buf;
 _free($91);
 label=17;break;
 case 17: 
 var $93=$2;
 var $94=$xxs;
 var $95=$smpbuf;
 var $96=_load_sample($93,0,16,$94,$95);
 var $97=($96|0)<0;
 if($97){label=18;break;}else{label=19;break;}
 case 18: 
 label=22;break;
 case 19: 
 var $100=$smpbuf;
 _free($100);
 label=20;break;
 case 20: 
 var $102=$i;
 var $103=((($102)+(1))|0);
 $i=$103;
 label=4;break;
 case 21: 
 $1=0;
 label=24;break;
 case 22: 
 var $106=$smpbuf;
 _free($106);
 label=23;break;
 case 23: 
 $1=-1;
 label=24;break;
 case 24: 
 var $109=$1;
 STACKTOP=sp;return $109;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_ve($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $data;
 var $i;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$5;
 var $7=$6;
 $data=$7;
 var $8=$4;
 var $9=_hio_read8($8);
 var $10=($9&255);
 var $11=$data;
 var $12=(($11+28)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=($10|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=10;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $18=$data;
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=_calloc($20,33);
 var $22=$21;
 var $23=$data;
 var $24=(($23+40)|0);
 HEAP32[(($24)>>2)]=$22;
 $i=0;
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=$data;
 var $28=(($27+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($26|0)<($29|0);
 if($30){label=7;break;}else{label=9;break;}
 case 7: 
 var $32=$4;
 var $33=_hio_read8($32);
 var $34=$i;
 var $35=$data;
 var $36=(($35+40)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+((($34)*(33))&-1))|0);
 var $39=(($38)|0);
 HEAP8[($39)]=$33;
 var $40=$i;
 var $41=$data;
 var $42=(($41+40)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+((($40)*(33))&-1))|0);
 var $45=(($44+1)|0);
 var $46=(($45)|0);
 var $47=$4;
 var $48=_hio_read($46,1,30,$47);
 var $49=$4;
 var $50=_hio_read8($49);
 var $51=$i;
 var $52=$data;
 var $53=(($52+40)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+((($51)*(33))&-1))|0);
 var $56=(($55+31)|0);
 HEAP8[($56)]=$50;
 var $57=$4;
 var $58=_hio_read8($57);
 var $59=$i;
 var $60=$data;
 var $61=(($60+40)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+((($59)*(33))&-1))|0);
 var $64=(($63+32)|0);
 HEAP8[($64)]=$58;
 label=8;break;
 case 8: 
 var $66=$i;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=6;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $70=$1;
 STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_pe($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $data;
 var $i;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$5;
 var $7=$6;
 $data=$7;
 var $8=$4;
 var $9=_hio_read8($8);
 var $10=($9&255);
 var $11=$data;
 var $12=(($11+32)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=($10|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=10;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $18=$data;
 var $19=(($18+32)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=_calloc($20,33);
 var $22=$21;
 var $23=$data;
 var $24=(($23+44)|0);
 HEAP32[(($24)>>2)]=$22;
 $i=0;
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=$data;
 var $28=(($27+32)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($26|0)<($29|0);
 if($30){label=7;break;}else{label=9;break;}
 case 7: 
 var $32=$4;
 var $33=_hio_read8($32);
 var $34=$i;
 var $35=$data;
 var $36=(($35+44)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+((($34)*(33))&-1))|0);
 var $39=(($38)|0);
 HEAP8[($39)]=$33;
 var $40=$i;
 var $41=$data;
 var $42=(($41+44)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+((($40)*(33))&-1))|0);
 var $45=(($44+1)|0);
 var $46=(($45)|0);
 var $47=$4;
 var $48=_hio_read($46,1,30,$47);
 var $49=$4;
 var $50=_hio_read8($49);
 var $51=$i;
 var $52=$data;
 var $53=(($52+44)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+((($51)*(33))&-1))|0);
 var $56=(($55+31)|0);
 HEAP8[($56)]=$50;
 var $57=$4;
 var $58=_hio_read8($57);
 var $59=$i;
 var $60=$data;
 var $61=(($60+44)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+((($59)*(33))&-1))|0);
 var $64=(($63+32)|0);
 HEAP8[($64)]=$58;
 label=8;break;
 case 8: 
 var $66=$i;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=6;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $70=$1;
 STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_fe($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $data;
 var $i;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$5;
 var $7=$6;
 $data=$7;
 var $8=$4;
 var $9=_hio_read8($8);
 var $10=($9&255);
 var $11=$data;
 var $12=(($11+36)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=($10|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=10;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $18=$data;
 var $19=(($18+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=_calloc($20,33);
 var $22=$21;
 var $23=$data;
 var $24=(($23+48)|0);
 HEAP32[(($24)>>2)]=$22;
 $i=0;
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=$data;
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($26|0)<($29|0);
 if($30){label=7;break;}else{label=9;break;}
 case 7: 
 var $32=$4;
 var $33=_hio_read8($32);
 var $34=$i;
 var $35=$data;
 var $36=(($35+48)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+((($34)*(33))&-1))|0);
 var $39=(($38)|0);
 HEAP8[($39)]=$33;
 var $40=$i;
 var $41=$data;
 var $42=(($41+48)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+((($40)*(33))&-1))|0);
 var $45=(($44+1)|0);
 var $46=(($45)|0);
 var $47=$4;
 var $48=_hio_read($46,1,30,$47);
 var $49=$4;
 var $50=_hio_read8($49);
 var $51=$i;
 var $52=$data;
 var $53=(($52+48)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+((($51)*(33))&-1))|0);
 var $56=(($55+31)|0);
 HEAP8[($56)]=$50;
 var $57=$4;
 var $58=_hio_read8($57);
 var $59=$i;
 var $60=$data;
 var $61=(($60+48)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+((($59)*(33))&-1))|0);
 var $64=(($63+32)|0);
 HEAP8[($64)]=$58;
 label=8;break;
 case 8: 
 var $66=$i;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=6;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $70=$1;
 STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_ii($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $j;
 var $k;
 var $map;
 var $last_map;
 var $buf=sp;
 var $xxi;
 var $x;
 var $sub;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$4;
 var $11=_hio_read8($10);
 var $12=($11&255);
 var $13=$mod;
 var $14=(($13+140)|0);
 HEAP32[(($14)>>2)]=$12;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $17=$mod;
 var $18=_instrument_init($17);
 var $19=($18|0)<0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=51;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $23=$i;
 var $24=$mod;
 var $25=(($24+140)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($23|0)<($26|0);
 if($27){label=7;break;}else{label=50;break;}
 case 7: 
 var $29=$i;
 var $30=$mod;
 var $31=(($30+176)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+((($29)*(764))&-1))|0);
 $xxi=$33;
 var $34=$4;
 var $35=_hio_read8($34);
 var $36=($35&255);
 var $37=$i;
 var $38=$data;
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+($37<<2))|0);
 HEAP32[(($41)>>2)]=$36;
 var $42=$4;
 var $43=_hio_read8($42);
 var $44=($43&255);
 var $45=$xxi;
 var $46=(($45+36)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=(($buf)|0);
 var $48=$4;
 var $49=_hio_read($47,1,32,$48);
 var $50=(($buf+32)|0);
 HEAP8[($50)]=0;
 var $51=(($buf)|0);
 var $52=_str_adj($51);
 var $53=$xxi;
 var $54=(($53)|0);
 var $55=(($54)|0);
 var $56=(($buf)|0);
 var $57=_strlcpy($55,$56,32);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $60=$mod;
 var $61=$i;
 var $62=$xxi;
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=_subinstrument_alloc($60,$61,$64);
 var $66=($65|0)<0;
 if($66){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=51;break;
 case 11: 
 $j=0;
 label=12;break;
 case 12: 
 var $70=$j;
 var $71=($70|0)<121;
 if($71){label=13;break;}else{label=15;break;}
 case 13: 
 var $73=$j;
 var $74=$xxi;
 var $75=(($74+512)|0);
 var $76=(($75+($73<<1))|0);
 var $77=(($76)|0);
 HEAP8[($77)]=-1;
 label=14;break;
 case 14: 
 var $79=$j;
 var $80=((($79)+(1))|0);
 $j=$80;
 label=12;break;
 case 15: 
 $j=0;
 $last_map=0;
 label=16;break;
 case 16: 
 var $83=$j;
 var $84=$i;
 var $85=$mod;
 var $86=(($85+176)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+((($84)*(764))&-1))|0);
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($83|0)<($90|0);
 if($91){label=17;break;}else{label=48;break;}
 case 17: 
 var $93=$j;
 var $94=$xxi;
 var $95=(($94+756)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+($93<<6))|0);
 $sub=$97;
 var $98=$4;
 var $99=_hio_read8($98);
 var $100=($99&255);
 var $101=$sub;
 var $102=(($101+40)|0);
 HEAP32[(($102)>>2)]=$100;
 var $103=$4;
 var $104=_hio_read8($103);
 var $105=($104&255);
 var $106=((($105)+(12))|0);
 $map=$106;
 var $107=$4;
 var $108=_hio_read8($107);
 var $109=($108&255);
 var $110=$sub;
 var $111=(($110)|0);
 HEAP32[(($111)>>2)]=$109;
 var $112=$last_map;
 $k=$112;
 label=18;break;
 case 18: 
 var $114=$k;
 var $115=$map;
 var $116=($114|0)<=($115|0);
 if($116){label=19;break;}else{label=23;break;}
 case 19: 
 var $118=$k;
 var $119=($118|0)<121;
 if($119){label=20;break;}else{label=21;break;}
 case 20: 
 var $121=$j;
 var $122=(($121)&255);
 var $123=$k;
 var $124=$xxi;
 var $125=(($124+512)|0);
 var $126=(($125+($123<<1))|0);
 var $127=(($126)|0);
 HEAP8[($127)]=$122;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $130=$k;
 var $131=((($130)+(1))|0);
 $k=$131;
 label=18;break;
 case 23: 
 var $133=$map;
 var $134=((($133)+(1))|0);
 $last_map=$134;
 var $135=$4;
 var $136=_hio_read8($135);
 var $137=($136&255);
 $x=$137;
 var $138=$j;
 var $139=($138|0)==0;
 if($139){label=24;break;}else{label=28;break;}
 case 24: 
 var $141=$x;
 var $142=$141&128;
 var $143=($142|0)!=0;
 if($143){label=25;break;}else{label=26;break;}
 case 25: 
 var $145=$x;
 var $146=$145&63;
 var $149=$146;label=27;break;
 case 26: 
 var $149=-1;label=27;break;
 case 27: 
 var $149;
 var $150=$i;
 var $151=$data;
 var $152=(($151+8)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+($150<<2))|0);
 HEAP32[(($154)>>2)]=$149;
 label=28;break;
 case 28: 
 var $156=$x;
 var $157=$156^-1;
 var $158=$157&64;
 var $159=($158|0)!=0;
 if($159){label=29;break;}else{label=30;break;}
 case 29: 
 var $161=$sub;
 var $162=(($161)|0);
 HEAP32[(($162)>>2)]=255;
 label=30;break;
 case 30: 
 var $164=$4;
 var $165=_hio_read8($164);
 var $166=($165&255);
 var $167=$166<<1;
 var $168=$j;
 var $169=$i;
 var $170=$mod;
 var $171=(($170+176)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+((($169)*(764))&-1))|0);
 var $174=(($173+756)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+($168<<6))|0);
 var $177=(($176+8)|0);
 HEAP32[(($177)>>2)]=$167;
 var $178=$4;
 var $179=_hio_read8($178);
 var $180=($179&255);
 $x=$180;
 var $181=$j;
 var $182=($181|0)==0;
 if($182){label=31;break;}else{label=35;break;}
 case 31: 
 var $184=$x;
 var $185=$184&128;
 var $186=($185|0)!=0;
 if($186){label=32;break;}else{label=33;break;}
 case 32: 
 var $188=$x;
 var $189=$188&63;
 var $192=$189;label=34;break;
 case 33: 
 var $192=-1;label=34;break;
 case 34: 
 var $192;
 var $193=$i;
 var $194=$data;
 var $195=(($194+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+($193<<2))|0);
 HEAP32[(($197)>>2)]=$192;
 label=35;break;
 case 35: 
 var $199=$x;
 var $200=$199^-1;
 var $201=$200&64;
 var $202=($201|0)!=0;
 if($202){label=36;break;}else{label=37;break;}
 case 36: 
 var $204=$sub;
 var $205=(($204+8)|0);
 HEAP32[(($205)>>2)]=128;
 label=37;break;
 case 37: 
 var $207=$4;
 var $208=_hio_read16l($207);
 var $209=($208&65535);
 $x=$209;
 var $210=$j;
 var $211=($210|0)==0;
 if($211){label=38;break;}else{label=39;break;}
 case 38: 
 var $213=$x;
 var $214=$xxi;
 var $215=(($214+40)|0);
 HEAP32[(($215)>>2)]=$213;
 label=39;break;
 case 39: 
 var $217=$4;
 var $218=_hio_read8($217);
 var $219=($218&255);
 var $220=$sub;
 var $221=(($220+28)|0);
 HEAP32[(($221)>>2)]=$219;
 var $222=$4;
 var $223=_hio_read8($222);
 var $224=($223&255);
 var $225=$224>>1;
 var $226=$sub;
 var $227=(($226+24)|0);
 HEAP32[(($227)>>2)]=$225;
 var $228=$4;
 var $229=_hio_read8($228);
 var $230=($229&255);
 var $231=$sub;
 var $232=(($231+32)|0);
 HEAP32[(($232)>>2)]=$230;
 var $233=$4;
 var $234=_hio_read8($233);
 var $235=($234&255);
 var $236=$sub;
 var $237=(($236+20)|0);
 HEAP32[(($237)>>2)]=$235;
 var $238=$4;
 var $239=_hio_read8($238);
 var $240=$4;
 var $241=_hio_read8($240);
 var $242=($241&255);
 $x=$242;
 var $243=$j;
 var $244=($243|0)==0;
 if($244){label=40;break;}else{label=44;break;}
 case 40: 
 var $246=$x;
 var $247=$246&128;
 var $248=($247|0)!=0;
 if($248){label=41;break;}else{label=42;break;}
 case 41: 
 var $250=$x;
 var $251=$250&63;
 var $254=$251;label=43;break;
 case 42: 
 var $254=-1;label=43;break;
 case 43: 
 var $254;
 var $255=$i;
 var $256=$data;
 var $257=(($256+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(($258+($255<<2))|0);
 HEAP32[(($259)>>2)]=$254;
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $264=$j;
 var $265=((($264)+(1))|0);
 $j=$265;
 label=16;break;
 case 48: 
 label=49;break;
 case 49: 
 var $268=$i;
 var $269=((($268)+(1))|0);
 $i=$269;
 label=6;break;
 case 50: 
 $1=0;
 label=51;break;
 case 51: 
 var $272=$1;
 STACKTOP=sp;return $272;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_pa($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $j;
 var $chn;
 var $x;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read8($8);
 var $10=($9&255);
 var $11=$mod;
 var $12=(($11+128)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$mod;
 var $14=(($13+128)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=_calloc(4,$15);
 var $17=$16;
 var $18=$mod;
 var $19=(($18+168)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=($17|0)==0;
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=18;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=$mod;
 var $28=(($27+128)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($26|0)<($29|0);
 if($30){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=$mod;
 var $33=$i;
 var $34=_pattern_alloc($32,$33);
 var $35=($34|0)<0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=18;break;
 case 9: 
 var $38=$4;
 var $39=_hio_read8($38);
 var $40=($39&255);
 $chn=$40;
 var $41=$4;
 var $42=_hio_read8($41);
 var $43=($42&255);
 var $44=((($43)+(1))|0);
 var $45=$i;
 var $46=$mod;
 var $47=(($46+168)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50)|0);
 HEAP32[(($51)>>2)]=$44;
 var $52=$4;
 var $53=_hio_seek($52,16,1);
 $j=0;
 label=10;break;
 case 10: 
 var $55=$j;
 var $56=$chn;
 var $57=($55|0)<($56|0);
 if($57){label=11;break;}else{label=15;break;}
 case 11: 
 var $59=$4;
 var $60=_hio_read16l($59);
 var $61=($60&65535);
 $x=$61;
 var $62=$j;
 var $63=$mod;
 var $64=(($63+136)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($62|0)<($65|0);
 if($66){label=12;break;}else{label=13;break;}
 case 12: 
 var $68=$x;
 var $69=$j;
 var $70=$i;
 var $71=$mod;
 var $72=(($71+168)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+($70<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+4)|0);
 var $77=(($76+($69<<2))|0);
 HEAP32[(($77)>>2)]=$68;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $80=$j;
 var $81=((($80)+(1))|0);
 $j=$81;
 label=10;break;
 case 15: 
 label=16;break;
 case 16: 
 var $84=$i;
 var $85=((($84)+(1))|0);
 $i=$85;
 label=6;break;
 case 17: 
 $1=0;
 label=18;break;
 case 18: 
 var $88=$1;
 STACKTOP=sp;return $88;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_is($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $buf=sp;
 var $x;
 var $xxs;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$4;
 var $11=_hio_read8($10);
 var $12=($11&255);
 var $13=$mod;
 var $14=(($13+144)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$mod;
 var $16=(($15+144)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=_calloc(52,$17);
 var $19=$18;
 var $20=$mod;
 var $21=(($20+180)|0);
 HEAP32[(($21)>>2)]=$19;
 var $22=($19|0)==0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=16;break;
 case 3: 
 var $25=$mod;
 var $26=(($25+144)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=_calloc(4,$27);
 var $29=$28;
 var $30=$data;
 var $31=(($30+24)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$data;
 var $33=(($32+24)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=16;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $41=$i;
 var $42=$mod;
 var $43=(($42+144)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($41|0)<($44|0);
 if($45){label=9;break;}else{label=15;break;}
 case 9: 
 var $47=$i;
 var $48=$mod;
 var $49=(($48+180)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+((($47)*(52))&-1))|0);
 $xxs=$51;
 var $52=$4;
 var $53=_hio_read8($52);
 var $54=($53&255);
 var $55=$i;
 var $56=$data;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+($55<<2))|0);
 HEAP32[(($59)>>2)]=$54;
 var $60=(($buf)|0);
 var $61=$4;
 var $62=_hio_read($60,1,32,$61);
 var $63=(($buf+32)|0);
 HEAP8[($63)]=0;
 var $64=(($buf)|0);
 var $65=_str_adj($64);
 var $66=$xxs;
 var $67=(($66)|0);
 var $68=(($67)|0);
 var $69=(($buf)|0);
 var $70=_strlcpy($68,$69,32);
 var $71=$4;
 var $72=_hio_seek($71,8,1);
 var $73=$4;
 var $74=_hio_read32l($73);
 var $75=$i;
 var $76=$data;
 var $77=(($76+20)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+($75<<2))|0);
 HEAP32[(($79)>>2)]=$74;
 var $80=$4;
 var $81=_hio_read32l($80);
 var $82=$xxs;
 var $83=(($82+32)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=$4;
 var $85=_hio_read32l($84);
 var $86=$xxs;
 var $87=(($86+36)|0);
 HEAP32[(($87)>>2)]=$85;
 var $88=$4;
 var $89=_hio_read32l($88);
 var $90=$xxs;
 var $91=(($90+40)|0);
 HEAP32[(($91)>>2)]=$89;
 var $92=$xxs;
 var $93=(($92+40)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=($94|0)>0;
 var $96=($95?2:0);
 var $97=$xxs;
 var $98=(($97+44)|0);
 HEAP32[(($98)>>2)]=$96;
 var $99=$xxs;
 var $100=(($99+36)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=$xxs;
 var $103=(($102+40)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=((($101)+($104))|0);
 var $106=$xxs;
 var $107=(($106+40)|0);
 HEAP32[(($107)>>2)]=$105;
 var $108=$4;
 var $109=_hio_read8($108);
 var $110=$4;
 var $111=_hio_read8($110);
 $x=$111;
 var $112=$x;
 var $113=($112&255);
 var $114=$113&1;
 var $115=($114|0)!=0;
 if($115){label=10;break;}else{label=11;break;}
 case 10: 
 var $117=$xxs;
 var $118=(($117+44)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$119|1;
 HEAP32[(($118)>>2)]=$120;
 var $121=$xxs;
 var $122=(($121+32)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$123>>1;
 HEAP32[(($122)>>2)]=$124;
 var $125=$xxs;
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$127>>1;
 HEAP32[(($126)>>2)]=$128;
 var $129=$xxs;
 var $130=(($129+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=$131>>1;
 HEAP32[(($130)>>2)]=$132;
 label=11;break;
 case 11: 
 var $134=$x;
 var $135=($134&255);
 var $136=$135&2;
 var $137=($136|0)!=0;
 var $138=($137?4:0);
 var $139=$xxs;
 var $140=(($139+44)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=$141|$138;
 HEAP32[(($140)>>2)]=$142;
 var $143=$x;
 var $144=($143&255);
 var $145=$144&12;
 var $146=$145>>2;
 var $147=$i;
 var $148=$data;
 var $149=(($148+24)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+($147<<2))|0);
 HEAP32[(($151)>>2)]=$146;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $155=$i;
 var $156=((($155)+(1))|0);
 $i=$156;
 label=8;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $159=$1;
 STACKTOP=sp;return $159;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_p0($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $j;
 var $x16;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$4;
 var $9=_hio_read8($8);
 var $10=($9&255);
 var $11=$mod;
 var $12=(($11+128)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$mod;
 var $14=(($13+128)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=_calloc(4,$15);
 var $17=$16;
 var $18=$mod;
 var $19=(($18+168)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=($17|0)==0;
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=18;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=$mod;
 var $28=(($27+128)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($26|0)<($29|0);
 if($30){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=$mod;
 var $33=$i;
 var $34=_pattern_alloc($32,$33);
 var $35=($34|0)<0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=18;break;
 case 9: 
 var $38=$i;
 var $39=$mod;
 var $40=(($39+168)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+($38<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43)|0);
 HEAP32[(($44)>>2)]=64;
 $j=0;
 label=10;break;
 case 10: 
 var $46=$j;
 var $47=($46|0)<32;
 if($47){label=11;break;}else{label=15;break;}
 case 11: 
 var $49=$4;
 var $50=_hio_read16l($49);
 $x16=$50;
 var $51=$j;
 var $52=$mod;
 var $53=(($52+136)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($51|0)<($54|0);
 if($55){label=12;break;}else{label=13;break;}
 case 12: 
 var $57=$x16;
 var $58=($57&65535);
 var $59=$j;
 var $60=$i;
 var $61=$mod;
 var $62=(($61+168)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+($60<<2))|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+4)|0);
 var $67=(($66+($59<<2))|0);
 HEAP32[(($67)>>2)]=$58;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $70=$j;
 var $71=((($70)+(1))|0);
 $j=$71;
 label=10;break;
 case 15: 
 label=16;break;
 case 16: 
 var $74=$i;
 var $75=((($74)+(1))|0);
 $i=$75;
 label=6;break;
 case 17: 
 $1=0;
 label=18;break;
 case 18: 
 var $78=$1;
 STACKTOP=sp;return $78;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chunk_i0($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $buf=sp;
 var $x;
 var $sub;
 var $xxs;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$4;
 var $11=_hio_read8($10);
 var $12=($11&255);
 var $13=$mod;
 var $14=(($13+144)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$mod;
 var $16=(($15+140)|0);
 HEAP32[(($16)>>2)]=$12;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $19=$mod;
 var $20=_instrument_init($19);
 var $21=($20|0)<0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=18;break;
 case 5: 
 var $24=$mod;
 var $25=(($24+144)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=_calloc(4,$26);
 var $28=$27;
 var $29=$data;
 var $30=(($29+24)|0);
 HEAP32[(($30)>>2)]=$28;
 var $31=($28|0)==0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=18;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $35=$i;
 var $36=$mod;
 var $37=(($36+140)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($35|0)<($38|0);
 if($39){label=9;break;}else{label=17;break;}
 case 9: 
 var $41=$i;
 var $42=$mod;
 var $43=(($42+180)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+((($41)*(52))&-1))|0);
 $xxs=$45;
 var $46=$i;
 var $47=$mod;
 var $48=(($47+176)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+((($46)*(764))&-1))|0);
 var $51=(($50+36)|0);
 HEAP32[(($51)>>2)]=1;
 var $52=$mod;
 var $53=$i;
 var $54=_subinstrument_alloc($52,$53,1);
 var $55=($54|0)<0;
 if($55){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=18;break;
 case 11: 
 var $58=$i;
 var $59=$mod;
 var $60=(($59+176)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+((($58)*(764))&-1))|0);
 var $63=(($62+756)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64)|0);
 $sub=$65;
 var $66=$4;
 var $67=_hio_read8($66);
 var $68=($67&255);
 var $69=$i;
 var $70=$data;
 var $71=(($70+4)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+($69<<2))|0);
 HEAP32[(($73)>>2)]=$68;
 var $74=$i;
 var $75=$data;
 var $76=(($75)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+($74<<2))|0);
 HEAP32[(($78)>>2)]=$68;
 var $79=$sub;
 var $80=(($79+40)|0);
 HEAP32[(($80)>>2)]=$68;
 var $81=(($buf)|0);
 var $82=$4;
 var $83=_hio_read($81,1,32,$82);
 var $84=(($buf+32)|0);
 HEAP8[($84)]=0;
 var $85=(($buf)|0);
 var $86=_str_adj($85);
 var $87=$4;
 var $88=_hio_seek($87,8,1);
 var $89=$i;
 var $90=$mod;
 var $91=(($90+176)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+((($89)*(764))&-1))|0);
 var $94=(($93)|0);
 var $95=(($94)|0);
 var $96=(($buf)|0);
 var $97=_strlcpy($95,$96,32);
 var $98=$4;
 var $99=_hio_read16l($98);
 var $100=($99&65535);
 var $101=$i;
 var $102=$data;
 var $103=(($102+20)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+($101<<2))|0);
 HEAP32[(($105)>>2)]=$100;
 var $106=$4;
 var $107=_hio_read32l($106);
 var $108=$xxs;
 var $109=(($108+32)|0);
 HEAP32[(($109)>>2)]=$107;
 var $110=$4;
 var $111=_hio_read32l($110);
 var $112=$xxs;
 var $113=(($112+36)|0);
 HEAP32[(($113)>>2)]=$111;
 var $114=$4;
 var $115=_hio_read32l($114);
 var $116=$xxs;
 var $117=(($116+40)|0);
 HEAP32[(($117)>>2)]=$115;
 var $118=$xxs;
 var $119=(($118+40)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($120|0)>0;
 var $122=($121?2:0);
 var $123=$xxs;
 var $124=(($123+44)|0);
 HEAP32[(($124)>>2)]=$122;
 var $125=$xxs;
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$xxs;
 var $129=(($128+40)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=((($127)+($130))|0);
 var $132=$xxs;
 var $133=(($132+40)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=$4;
 var $135=_hio_read8($134);
 var $136=($135&255);
 var $137=$sub;
 var $138=(($137)|0);
 HEAP32[(($138)>>2)]=$136;
 var $139=$sub;
 var $140=(($139+8)|0);
 HEAP32[(($140)>>2)]=128;
 var $141=$4;
 var $142=_hio_read8($141);
 $x=$142;
 var $143=$x;
 var $144=($143&255);
 var $145=$144&1;
 var $146=($145|0)!=0;
 if($146){label=12;break;}else{label=13;break;}
 case 12: 
 var $148=$xxs;
 var $149=(($148+44)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=$150|1;
 HEAP32[(($149)>>2)]=$151;
 var $152=$xxs;
 var $153=(($152+32)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$154>>1;
 HEAP32[(($153)>>2)]=$155;
 var $156=$xxs;
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$158>>1;
 HEAP32[(($157)>>2)]=$159;
 var $160=$xxs;
 var $161=(($160+40)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$162>>1;
 HEAP32[(($161)>>2)]=$163;
 label=13;break;
 case 13: 
 var $165=$x;
 var $166=($165&255);
 var $167=$166&2;
 var $168=($167|0)!=0;
 var $169=($168?4:0);
 var $170=$xxs;
 var $171=(($170+44)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=$172|$169;
 HEAP32[(($171)>>2)]=$173;
 var $174=$x;
 var $175=($174&255);
 var $176=$175&12;
 var $177=$176>>2;
 var $178=$i;
 var $179=$data;
 var $180=(($179+24)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+($178<<2))|0);
 HEAP32[(($182)>>2)]=$177;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $186=$i;
 var $187=((($186)+(1))|0);
 $i=$187;
 label=8;break;
 case 17: 
 $1=0;
 label=18;break;
 case 18: 
 var $190=$1;
 STACKTOP=sp;return $190;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_env($i,$ei,$env,$index,$envnum){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $j;
 var $k;
 var $lastx;
 var $x;
 $1=$i;
 $2=$ei;
 $3=$env;
 $4=$index;
 $5=$envnum;
 var $6=$1;
 var $7=$4;
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)>=0;
 if($10){label=2;break;}else{label=15;break;}
 case 2: 
 var $12=$2;
 var $13=(($12)|0);
 HEAP32[(($13)>>2)]=1;
 var $14=$2;
 var $15=(($14+4)|0);
 HEAP32[(($15)>>2)]=16;
 $j=0;
 label=3;break;
 case 3: 
 var $17=$j;
 var $18=$5;
 var $19=($17|0)<($18|0);
 if($19){label=4;break;}else{label=14;break;}
 case 4: 
 var $21=$1;
 var $22=$4;
 var $23=(($22+($21<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$j;
 var $26=$3;
 var $27=(($26+((($25)*(33))&-1))|0);
 var $28=(($27)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=($24|0)==($30|0);
 if($31){label=5;break;}else{label=12;break;}
 case 5: 
 var $33=$j;
 var $34=$3;
 var $35=(($34+((($33)*(33))&-1))|0);
 var $36=(($35+31)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=$38&16;
 var $40=($39|0)!=0;
 var $41=($40?2:0);
 var $42=$2;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$44|$41;
 HEAP32[(($43)>>2)]=$45;
 var $46=$j;
 var $47=$3;
 var $48=(($47+((($46)*(33))&-1))|0);
 var $49=(($48+31)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=$51&32;
 var $53=($52|0)!=0;
 var $54=($53?4:0);
 var $55=$2;
 var $56=(($55)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57|$54;
 HEAP32[(($56)>>2)]=$58;
 var $59=$j;
 var $60=$3;
 var $61=(($60+((($59)*(33))&-1))|0);
 var $62=(($61+31)|0);
 var $63=HEAP8[($62)];
 var $64=($63&255);
 var $65=$64&15;
 var $66=$2;
 var $67=(($66+12)|0);
 HEAP32[(($67)>>2)]=$65;
 var $68=$j;
 var $69=$3;
 var $70=(($69+((($68)*(33))&-1))|0);
 var $71=(($70+32)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=$73&15;
 var $75=$2;
 var $76=(($75+20)|0);
 HEAP32[(($76)>>2)]=$74;
 var $77=$j;
 var $78=$3;
 var $79=(($78+((($77)*(33))&-1))|0);
 var $80=(($79+32)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=$82&240;
 var $84=$2;
 var $85=(($84+24)|0);
 HEAP32[(($85)>>2)]=$83;
 $lastx=-1;
 $k=0;
 label=6;break;
 case 6: 
 var $87=$k;
 var $88=$2;
 var $89=(($88+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($87|0)<($90|0);
 if($91){label=7;break;}else{label=11;break;}
 case 7: 
 var $93=$k;
 var $94=($93<<1);
 var $95=$j;
 var $96=$3;
 var $97=(($96+((($95)*(33))&-1))|0);
 var $98=(($97+1)|0);
 var $99=(($98+$94)|0);
 var $100=HEAP8[($99)];
 var $101=($100&255);
 $x=$101;
 var $102=$x;
 var $103=($102|0)==0;
 if($103){label=8;break;}else{label=9;break;}
 case 8: 
 label=11;break;
 case 9: 
 var $106=$lastx;
 var $107=$x;
 var $108=((($106)+($107))|0);
 var $109=(($108)&65535);
 var $110=$k;
 var $111=($110<<1);
 var $112=$2;
 var $113=(($112+28)|0);
 var $114=(($113+($111<<1))|0);
 HEAP16[(($114)>>1)]=$109;
 var $115=$k;
 var $116=($115<<1);
 var $117=((($116)+(1))|0);
 var $118=$j;
 var $119=$3;
 var $120=(($119+((($118)*(33))&-1))|0);
 var $121=(($120+1)|0);
 var $122=(($121+$117)|0);
 var $123=HEAP8[($122)];
 var $124=($123&255);
 var $125=$k;
 var $126=($125<<1);
 var $127=((($126)+(1))|0);
 var $128=$2;
 var $129=(($128+28)|0);
 var $130=(($129+($127<<1))|0);
 HEAP16[(($130)>>1)]=$124;
 var $131=$k;
 var $132=($131<<1);
 var $133=$2;
 var $134=(($133+28)|0);
 var $135=(($134+($132<<1))|0);
 var $136=HEAP16[(($135)>>1)];
 var $137=(($136<<16)>>16);
 $lastx=$137;
 label=10;break;
 case 10: 
 var $139=$k;
 var $140=((($139)+(1))|0);
 $k=$140;
 label=6;break;
 case 11: 
 var $142=$k;
 var $143=$2;
 var $144=(($143+4)|0);
 HEAP32[(($144)>>2)]=$142;
 label=14;break;
 case 12: 
 label=13;break;
 case 13: 
 var $147=$j;
 var $148=((($147)+(1))|0);
 $j=$148;
 label=3;break;
 case 14: 
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _unpack_sample8($t,$f,$len,$l){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $4;
 var $i;
 var $s;
 var $b;
 var $d;
 var $bits=(sp)+(16);
 $1=$t;
 HEAP32[(($2)>>2)]=$f;
 HEAP32[(($3)>>2)]=$len;
 $4=$l;
 var $5=_get_bits(0,$2,$3,$bits);
 $d=0;
 $b=0;
 $i=0;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=$4;
 var $9=($7|0)<($8|0);
 if($9){label=3;break;}else{label=15;break;}
 case 3: 
 var $11=_get_bits(1,$2,$3,$bits);
 $s=$11;
 var $12=_get_bits(1,$2,$3,$bits);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=_get_bits(3,$2,$3,$bits);
 var $16=(($15)&255);
 $b=$16;
 label=11;break;
 case 5: 
 $b=8;
 label=6;break;
 case 6: 
 var $19=HEAP32[(($3)>>2)];
 var $20=($19|0)>=0;
 if($20){label=7;break;}else{var $26=0;label=8;break;}
 case 7: 
 var $22=_get_bits(1,$2,$3,$bits);
 var $23=($22|0)!=0;
 var $24=$23^1;
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $28=$b;
 var $29=($28&255);
 var $30=((($29)+(16))|0);
 var $31=(($30)&255);
 $b=$31;
 label=6;break;
 case 10: 
 var $33=_get_bits(4,$2,$3,$bits);
 var $34=$b;
 var $35=($34&255);
 var $36=((($35)+($33))|0);
 var $37=(($36)&255);
 $b=$37;
 label=11;break;
 case 11: 
 var $39=$s;
 var $40=($39|0)!=0;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$b;
 var $43=($42&255);
 var $44=$43^255;
 var $45=(($44)&255);
 $b=$45;
 label=13;break;
 case 13: 
 var $47=$b;
 var $48=($47&255);
 var $49=$d;
 var $50=($49&255);
 var $51=((($50)+($48))|0);
 var $52=(($51)&255);
 $d=$52;
 var $53=$d;
 var $54=$1;
 var $55=(($54+1)|0);
 $1=$55;
 HEAP8[($54)]=$53;
 label=14;break;
 case 14: 
 var $57=$i;
 var $58=((($57)+(1))|0);
 $i=$58;
 label=2;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _unpack_sample16($t,$f,$len,$l){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $4;
 var $i;
 var $lo;
 var $s;
 var $b;
 var $d;
 var $bits=(sp)+(16);
 $1=$t;
 HEAP32[(($2)>>2)]=$f;
 HEAP32[(($3)>>2)]=$len;
 $4=$l;
 var $5=_get_bits(0,$2,$3,$bits);
 $d=0;
 $b=0;
 $lo=0;
 $i=0;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=$4;
 var $9=($7|0)<($8|0);
 if($9){label=3;break;}else{label=15;break;}
 case 3: 
 var $11=_get_bits(8,$2,$3,$bits);
 $lo=$11;
 var $12=_get_bits(1,$2,$3,$bits);
 $s=$12;
 var $13=_get_bits(1,$2,$3,$bits);
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=_get_bits(3,$2,$3,$bits);
 var $17=(($16)&255);
 $b=$17;
 label=11;break;
 case 5: 
 $b=8;
 label=6;break;
 case 6: 
 var $20=HEAP32[(($3)>>2)];
 var $21=($20|0)>=0;
 if($21){label=7;break;}else{var $27=0;label=8;break;}
 case 7: 
 var $23=_get_bits(1,$2,$3,$bits);
 var $24=($23|0)!=0;
 var $25=$24^1;
 var $27=$25;label=8;break;
 case 8: 
 var $27;
 if($27){label=9;break;}else{label=10;break;}
 case 9: 
 var $29=$b;
 var $30=($29&255);
 var $31=((($30)+(16))|0);
 var $32=(($31)&255);
 $b=$32;
 label=6;break;
 case 10: 
 var $34=_get_bits(4,$2,$3,$bits);
 var $35=$b;
 var $36=($35&255);
 var $37=((($36)+($34))|0);
 var $38=(($37)&255);
 $b=$38;
 label=11;break;
 case 11: 
 var $40=$s;
 var $41=($40|0)!=0;
 if($41){label=12;break;}else{label=13;break;}
 case 12: 
 var $43=$b;
 var $44=($43&255);
 var $45=$44^255;
 var $46=(($45)&255);
 $b=$46;
 label=13;break;
 case 13: 
 var $48=$b;
 var $49=($48&255);
 var $50=$d;
 var $51=($50&255);
 var $52=((($51)+($49))|0);
 var $53=(($52)&255);
 $d=$53;
 var $54=$lo;
 var $55=(($54)&255);
 var $56=$1;
 var $57=(($56+1)|0);
 $1=$57;
 HEAP8[($56)]=$55;
 var $58=$d;
 var $59=$1;
 var $60=(($59+1)|0);
 $1=$60;
 HEAP8[($59)]=$58;
 label=14;break;
 case 14: 
 var $62=$i;
 var $63=((($62)+(1))|0);
 $i=$63;
 label=2;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_bits($i,$buf,$len,$bits){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $x;
 $2=$i;
 $3=$buf;
 $4=$len;
 $5=$bits;
 var $6=$2;
 var $7=(($6<<24)>>24);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$3;
 var $11=HEAP32[(($10)>>2)];
 var $12=_readmem32l($11);
 var $13=$5;
 var $14=(($13)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$3;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+4)|0);
 HEAP32[(($15)>>2)]=$17;
 var $18=$4;
 var $19=HEAP32[(($18)>>2)];
 var $20=((($19)-(4))|0);
 HEAP32[(($18)>>2)]=$20;
 var $21=$5;
 var $22=(($21+4)|0);
 HEAP32[(($22)>>2)]=32;
 $1=0;
 label=8;break;
 case 3: 
 var $24=$5;
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$2;
 var $28=(($27<<24)>>24);
 var $29=1<<$28;
 var $30=((($29)-(1))|0);
 var $31=$26&$30;
 $x=$31;
 var $32=$2;
 var $33=(($32<<24)>>24);
 var $34=$5;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$36>>>($33>>>0);
 HEAP32[(($35)>>2)]=$37;
 var $38=$2;
 var $39=(($38<<24)>>24);
 var $40=$5;
 var $41=(($40+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)-($39))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=($43>>>0)<=24;
 if($44){label=4;break;}else{label=7;break;}
 case 4: 
 var $46=$4;
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=5;break;}else{label=6;break;}
 case 5: 
 var $50=$x;
 $1=$50;
 label=8;break;
 case 6: 
 var $52=$3;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+1)|0);
 HEAP32[(($52)>>2)]=$54;
 var $55=_readmem32l($53);
 var $56=$5;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$55<<$58;
 var $60=$5;
 var $61=(($60)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$62|$59;
 HEAP32[(($61)>>2)]=$63;
 var $64=$5;
 var $65=(($64+4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=((($66)+(8))|0);
 HEAP32[(($65)>>2)]=$67;
 var $68=$4;
 var $69=HEAP32[(($68)>>2)];
 var $70=((($69)-(1))|0);
 HEAP32[(($68)>>2)]=$70;
 label=7;break;
 case 7: 
 var $72=$x;
 $1=$72;
 label=8;break;
 case 8: 
 var $74=$1;
 STACKTOP=sp;return $74;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_fx1($t,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$t;
 $2=$p;
 var $3=$1;
 var $4=HEAP8[($3)];
 var $5=($4&255);
 if(($5|0)==0){ label=2;break;}else if(($5|0)==5){ label=3;break;}else if(($5|0)==6){ label=4;break;}else{label=5;break;}
 case 2: 
 var $7=$2;
 HEAP8[($7)]=0;
 label=5;break;
 case 3: 
 var $9=$1;
 HEAP8[($9)]=0;
 label=5;break;
 case 4: 
 var $11=$2;
 HEAP8[($11)]=0;
 var $12=$1;
 HEAP8[($12)]=0;
 label=5;break;
 case 5: 
 var $14=$1;
 var $15=$2;
 _xlat_fx_common($14,$15);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_fx2($t,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$t;
 $2=$p;
 var $3=$1;
 var $4=HEAP8[($3)];
 var $5=($4&255);
 switch(($5|0)){case 0:{ label=2;break;}case 1:{ label=3;break;}case 2:{ label=4;break;}case 3:{ label=5;break;}case 4:{ label=6;break;}case 5:{ label=7;break;}case 6:{ label=8;break;}default:{label=9;break;}}break;
 case 2: 
 var $7=$2;
 HEAP8[($7)]=0;
 label=9;break;
 case 3: 
 var $9=$1;
 HEAP8[($9)]=-96;
 label=9;break;
 case 4: 
 var $11=$1;
 HEAP8[($11)]=-95;
 label=9;break;
 case 5: 
 var $13=$1;
 HEAP8[($13)]=27;
 label=9;break;
 case 6: 
 var $15=$1;
 HEAP8[($15)]=7;
 label=9;break;
 case 7: 
 var $17=$1;
 HEAP8[($17)]=29;
 label=9;break;
 case 8: 
 var $19=$2;
 HEAP8[($19)]=0;
 var $20=$1;
 HEAP8[($20)]=0;
 label=9;break;
 case 9: 
 var $22=$1;
 var $23=$2;
 _xlat_fx_common($22,$23);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_fx_common($t,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$t;
 $2=$p;
 var $3=$1;
 var $4=HEAP8[($3)];
 var $5=($4&255);
 switch(($5|0)){case 15:{ label=10;break;}case 7:{ label=2;break;}case 8:case 9:case 10:{ label=3;break;}case 11:case 12:case 13:{ label=4;break;}case 14:{ label=5;break;}default:{label=11;break;}}break;
 case 2: 
 var $7=$1;
 HEAP8[($7)]=-85;
 label=11;break;
 case 3: 
 var $9=$2;
 HEAP8[($9)]=0;
 var $10=$1;
 HEAP8[($10)]=0;
 label=11;break;
 case 4: 
 label=11;break;
 case 5: 
 var $13=$2;
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$15&240;
 var $17=$16>>4;
 switch(($17|0)){case 0:case 3:case 8:{ label=6;break;}case 1:{ label=7;break;}case 2:{ label=8;break;}default:{label=9;break;}}break;
 case 6: 
 var $19=$2;
 HEAP8[($19)]=0;
 var $20=$1;
 HEAP8[($20)]=0;
 label=9;break;
 case 7: 
 var $22=$1;
 HEAP8[($22)]=25;
 var $23=$2;
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=$25<<4;
 var $27=(($26)&255);
 HEAP8[($23)]=$27;
 label=9;break;
 case 8: 
 var $29=$1;
 HEAP8[($29)]=25;
 var $30=$2;
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=$32&15;
 var $34=(($33)&255);
 HEAP8[($30)]=$34;
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 var $37=$1;
 HEAP8[($37)]=-93;
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _med2_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1296385026;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,0);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _med2_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4728)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $sliding;
 var $event;
 var $buf=sp;
 var $lsiz;
 var $x;
 var $path=(sp)+(40);
 var $ins_path=(sp)+(4136);
 var $name=(sp)+(4392);
 var $s;
 var $stat=(sp)+(4648);
 var $found;
 var $ret;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=($13|0)!=1296385026;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=79;break;
 case 5: 
 var $17=$2;
 _set_type($17,23344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$mod;
 var $19=(($18+144)|0);
 HEAP32[(($19)>>2)]=32;
 var $20=$mod;
 var $21=(($20+140)|0);
 HEAP32[(($21)>>2)]=32;
 var $22=$mod;
 var $23=_instrument_init($22);
 var $24=($23|0)<0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=79;break;
 case 7: 
 var $27=(($buf)|0);
 var $28=$3;
 var $29=_hio_read($27,1,40,$28);
 $i=0;
 label=8;break;
 case 8: 
 var $31=$i;
 var $32=($31|0)<31;
 if($32){label=9;break;}else{label=13;break;}
 case 9: 
 var $34=(($buf)|0);
 var $35=$3;
 var $36=_hio_read($34,1,40,$35);
 var $37=$mod;
 var $38=$i;
 var $39=(($buf)|0);
 var $40=_instrument_name($37,$38,$39,32);
 var $41=$mod;
 var $42=$i;
 var $43=_subinstrument_alloc($41,$42,1);
 var $44=($43|0)<0;
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=79;break;
 case 11: 
 label=12;break;
 case 12: 
 var $48=$i;
 var $49=((($48)+(1))|0);
 $i=$49;
 label=8;break;
 case 13: 
 var $51=$3;
 var $52=_hio_read8($51);
 $i=0;
 label=14;break;
 case 14: 
 var $54=$i;
 var $55=($54|0)<31;
 if($55){label=15;break;}else{label=17;break;}
 case 15: 
 var $57=$3;
 var $58=_hio_read8($57);
 var $59=($58&255);
 var $60=$i;
 var $61=$mod;
 var $62=(($61+176)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+((($60)*(764))&-1))|0);
 var $65=(($64+756)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66)|0);
 var $68=(($67)|0);
 HEAP32[(($68)>>2)]=$59;
 var $69=$i;
 var $70=$mod;
 var $71=(($70+176)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+((($69)*(764))&-1))|0);
 var $74=(($73+756)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75)|0);
 var $77=(($76+8)|0);
 HEAP32[(($77)>>2)]=128;
 var $78=$i;
 var $79=$mod;
 var $80=(($79+176)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+((($78)*(764))&-1))|0);
 var $83=(($82+756)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84)|0);
 var $86=(($85+16)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=$i;
 var $88=$i;
 var $89=$mod;
 var $90=(($89+176)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+((($88)*(764))&-1))|0);
 var $93=(($92+756)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94)|0);
 var $96=(($95+40)|0);
 HEAP32[(($96)>>2)]=$87;
 label=16;break;
 case 16: 
 var $98=$i;
 var $99=((($98)+(1))|0);
 $i=$99;
 label=14;break;
 case 17: 
 var $101=$3;
 var $102=_hio_read16b($101);
 $i=0;
 label=18;break;
 case 18: 
 var $104=$i;
 var $105=($104|0)<31;
 if($105){label=19;break;}else{label=21;break;}
 case 19: 
 var $107=$3;
 var $108=_hio_read16b($107);
 var $109=($108&65535);
 var $110=$i;
 var $111=$mod;
 var $112=(($111+180)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+((($110)*(52))&-1))|0);
 var $115=(($114+36)|0);
 HEAP32[(($115)>>2)]=$109;
 label=20;break;
 case 20: 
 var $117=$i;
 var $118=((($117)+(1))|0);
 $i=$118;
 label=18;break;
 case 21: 
 var $120=$3;
 var $121=_hio_read16b($120);
 $i=0;
 label=22;break;
 case 22: 
 var $123=$i;
 var $124=($123|0)<31;
 if($124){label=23;break;}else{label=25;break;}
 case 23: 
 var $126=$3;
 var $127=_hio_read16b($126);
 var $128=($127&65535);
 $lsiz=$128;
 var $129=$i;
 var $130=$mod;
 var $131=(($130+180)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+((($129)*(52))&-1))|0);
 var $134=(($133+36)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$lsiz;
 var $137=((($135)+($136))|0);
 var $138=$i;
 var $139=$mod;
 var $140=(($139+180)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+((($138)*(52))&-1))|0);
 var $143=(($142+40)|0);
 HEAP32[(($143)>>2)]=$137;
 var $144=$lsiz;
 var $145=($144>>>0)>1;
 var $146=($145?2:0);
 var $147=$i;
 var $148=$mod;
 var $149=(($148+180)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+((($147)*(52))&-1))|0);
 var $152=(($151+44)|0);
 HEAP32[(($152)>>2)]=$146;
 label=24;break;
 case 24: 
 var $154=$i;
 var $155=((($154)+(1))|0);
 $i=$155;
 label=22;break;
 case 25: 
 var $157=$mod;
 var $158=(($157+136)|0);
 HEAP32[(($158)>>2)]=4;
 var $159=$3;
 var $160=_hio_read16b($159);
 var $161=($160&65535);
 var $162=$mod;
 var $163=(($162+128)|0);
 HEAP32[(($163)>>2)]=$161;
 var $164=$mod;
 var $165=(($164+136)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=$mod;
 var $168=(($167+128)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(Math_imul($166,$169)|0);
 var $171=$mod;
 var $172=(($171+132)|0);
 HEAP32[(($172)>>2)]=$170;
 var $173=$mod;
 var $174=(($173+952)|0);
 var $175=(($174)|0);
 var $176=$3;
 var $177=_hio_read($175,1,100,$176);
 var $178=$3;
 var $179=_hio_read16b($178);
 var $180=($179&65535);
 var $181=$mod;
 var $182=(($181+156)|0);
 HEAP32[(($182)>>2)]=$180;
 var $183=$3;
 var $184=_hio_read16b($183);
 var $185=($184&65535);
 var $186=(((192)/(($185|0)))&-1);
 var $187=$mod;
 var $188=(($187+148)|0);
 HEAP32[(($188)>>2)]=$186;
 var $189=$3;
 var $190=_hio_read16b($189);
 var $191=$3;
 var $192=_hio_read16b($191);
 var $193=($192&65535);
 $sliding=$193;
 var $194=$3;
 var $195=_hio_read32b($194);
 var $196=$3;
 var $197=_hio_seek($196,16,1);
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $206=$sliding;
 var $207=($206|0)==6;
 if($207){label=34;break;}else{label=35;break;}
 case 34: 
 var $209=$2;
 var $210=(($209+1280)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=$211|192;
 HEAP32[(($210)>>2)]=$212;
 label=35;break;
 case 35: 
 var $214=$mod;
 var $215=_pattern_init($214);
 var $216=($215|0)<0;
 if($216){label=36;break;}else{label=37;break;}
 case 36: 
 $1=-1;
 label=79;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 $i=0;
 label=40;break;
 case 40: 
 var $222=$i;
 var $223=$mod;
 var $224=(($223+128)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($222|0)<($225|0);
 if($226){label=41;break;}else{label=57;break;}
 case 41: 
 var $228=$mod;
 var $229=$i;
 var $230=_pattern_tracks_alloc($228,$229,64);
 var $231=($230|0)<0;
 if($231){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=79;break;
 case 43: 
 var $234=$3;
 var $235=_hio_read32b($234);
 $j=0;
 label=44;break;
 case 44: 
 var $237=$j;
 var $238=($237|0)<64;
 if($238){label=45;break;}else{label=55;break;}
 case 45: 
 $k=0;
 label=46;break;
 case 46: 
 var $241=$k;
 var $242=($241|0)<4;
 if($242){label=47;break;}else{label=53;break;}
 case 47: 
 var $244=$j;
 var $245=$k;
 var $246=$i;
 var $247=$2;
 var $248=(($247)|0);
 var $249=(($248+168)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+($246<<2))|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=(($252+4)|0);
 var $254=(($253+($245<<2))|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=$2;
 var $257=(($256)|0);
 var $258=(($257+172)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+($255<<2))|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=(($261+4)|0);
 var $263=(($262+($244<<3))|0);
 $event=$263;
 var $264=$3;
 var $265=_hio_read16b($264);
 var $266=($265&65535);
 var $267=_period_to_note($266);
 var $268=(($267)&255);
 var $269=$event;
 var $270=(($269)|0);
 HEAP8[($270)]=$268;
 var $271=$3;
 var $272=_hio_read8($271);
 $x=$272;
 var $273=$x;
 var $274=($273&255);
 var $275=$274>>4;
 var $276=(($275)&255);
 var $277=$event;
 var $278=(($277+1)|0);
 HEAP8[($278)]=$276;
 var $279=$x;
 var $280=($279&255);
 var $281=$280&15;
 var $282=(($281)&255);
 var $283=$event;
 var $284=(($283+3)|0);
 HEAP8[($284)]=$282;
 var $285=$3;
 var $286=_hio_read8($285);
 var $287=$event;
 var $288=(($287+4)|0);
 HEAP8[($288)]=$286;
 var $289=$event;
 var $290=(($289+3)|0);
 var $291=HEAP8[($290)];
 var $292=($291&255);
 switch(($292|0)){case 0:case 1:case 2:case 3:case 4:case 12:{ label=48;break;}case 13:case 14:{ label=49;break;}case 15:{ label=50;break;}default:{label=51;break;}}break;
 case 48: 
 label=51;break;
 case 49: 
 var $295=$event;
 var $296=(($295+3)|0);
 HEAP8[($296)]=10;
 label=51;break;
 case 50: 
 var $298=$event;
 var $299=(($298+3)|0);
 var $300=HEAP8[($299)];
 var $301=($300&255);
 var $302=(((192)/(($301|0)))&-1);
 var $303=(($302)&255);
 var $304=$event;
 var $305=(($304+3)|0);
 HEAP8[($305)]=$303;
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 var $308=$k;
 var $309=((($308)+(1))|0);
 $k=$309;
 label=46;break;
 case 53: 
 label=54;break;
 case 54: 
 var $312=$j;
 var $313=((($312)+(1))|0);
 $j=$313;
 label=44;break;
 case 55: 
 label=56;break;
 case 56: 
 var $316=$i;
 var $317=((($316)+(1))|0);
 $i=$317;
 label=40;break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $i=0;
 label=60;break;
 case 60: 
 var $322=$i;
 var $323=($322|0)<31;
 if($323){label=61;break;}else{label=78;break;}
 case 61: 
 $s=0;
 var $325=$2;
 var $326=(($ins_path)|0);
 _get_instrument_path($325,$326,256);
 var $327=(($ins_path)|0);
 var $328=$i;
 var $329=$mod;
 var $330=(($329+176)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($331+((($328)*(764))&-1))|0);
 var $333=(($332)|0);
 var $334=(($333)|0);
 var $335=(($name)|0);
 var $336=_check_filename_case($327,$334,$335,256);
 $found=$336;
 var $337=$found;
 var $338=($337|0)!=0;
 if($338){label=62;break;}else{label=65;break;}
 case 62: 
 var $340=(($path)|0);
 var $341=(($ins_path)|0);
 var $342=(($name)|0);
 var $343=_snprintf($340,4096,26632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$341,HEAP32[(((tempVarArgs)+(8))>>2)]=$342,tempVarArgs)); STACKTOP=tempVarArgs;
 var $344=(($path)|0);
 var $345=_hio_open_file($344,24760);
 $s=$345;
 var $346=($345|0)!=0;
 if($346){label=63;break;}else{label=64;break;}
 case 63: 
 var $348=$s;
 var $349=_hio_stat($348,$stat);
 var $350=(($stat+36)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=$i;
 var $353=$mod;
 var $354=(($353+180)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+((($352)*(52))&-1))|0);
 var $357=(($356+32)|0);
 HEAP32[(($357)>>2)]=$351;
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 var $360=$i;
 var $361=$mod;
 var $362=(($361+180)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(($363+((($360)*(52))&-1))|0);
 var $365=(($364+32)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=($366|0)>0;
 if($367){label=66;break;}else{label=67;break;}
 case 66: 
 var $369=$i;
 var $370=$mod;
 var $371=(($370+176)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372+((($369)*(764))&-1))|0);
 var $374=(($373+36)|0);
 HEAP32[(($374)>>2)]=1;
 label=67;break;
 case 67: 
 var $376=$i;
 var $377=$mod;
 var $378=(($377+176)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=(($379+((($376)*(764))&-1))|0);
 var $381=(($380)|0);
 var $382=(($381)|0);
 var $383=_strlen($382);
 var $384=($383|0)!=0;
 if($384){label=70;break;}else{label=68;break;}
 case 68: 
 var $386=$i;
 var $387=$mod;
 var $388=(($387+180)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($389+((($386)*(52))&-1))|0);
 var $391=(($390+32)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=($392|0)!=0;
 if($393){label=70;break;}else{label=69;break;}
 case 69: 
 label=77;break;
 case 70: 
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 var $398=$found;
 var $399=($398|0)!=0;
 if($399){label=73;break;}else{label=76;break;}
 case 73: 
 var $401=$2;
 var $402=$s;
 var $403=$i;
 var $404=$mod;
 var $405=(($404+180)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=(($406+((($403)*(52))&-1))|0);
 var $408=_load_sample($401,$402,0,$407,0);
 $ret=$408;
 var $409=$s;
 var $410=_hio_close($409);
 var $411=$ret;
 var $412=($411|0)<0;
 if($412){label=74;break;}else{label=75;break;}
 case 74: 
 $1=-1;
 label=79;break;
 case 75: 
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 var $417=$i;
 var $418=((($417)+(1))|0);
 $i=$418;
 label=60;break;
 case 78: 
 $1=0;
 label=79;break;
 case 79: 
 var $421=$1;
 STACKTOP=sp;return $421;
  default: assert(0, "bad label: " + label);
 }
}
function _med3_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1296385027;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,0);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _med3_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $mask;
 var $transp;
 var $sliding;
 var $c;
 var $buf=sp;
 var $lsiz;
 var $conv;
 var $b;
 var $tracks;
 var $convsz;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$2;
 _set_type($14,23328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=$mod;
 var $16=(($15+144)|0);
 HEAP32[(($16)>>2)]=32;
 var $17=$mod;
 var $18=(($17+140)|0);
 HEAP32[(($18)>>2)]=32;
 var $19=$mod;
 var $20=_instrument_init($19);
 var $21=($20|0)<0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=123;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $25=$i;
 var $26=($25|0)<32;
 if($26){label=7;break;}else{label=17;break;}
 case 7: 
 $j=0;
 label=8;break;
 case 8: 
 var $29=$j;
 var $30=($29|0)<40;
 if($30){label=9;break;}else{label=13;break;}
 case 9: 
 var $32=$3;
 var $33=_hio_read8($32);
 $c=$33;
 var $34=$c;
 var $35=$j;
 var $36=(($buf+$35)|0);
 HEAP8[($36)]=$34;
 var $37=$c;
 var $38=($37&255);
 var $39=($38|0)==0;
 if($39){label=10;break;}else{label=11;break;}
 case 10: 
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 var $43=$j;
 var $44=((($43)+(1))|0);
 $j=$44;
 label=8;break;
 case 13: 
 var $46=$mod;
 var $47=$i;
 var $48=(($buf)|0);
 var $49=_instrument_name($46,$47,$48,32);
 var $50=$mod;
 var $51=$i;
 var $52=_subinstrument_alloc($50,$51,1);
 var $53=($52|0)<0;
 if($53){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=123;break;
 case 15: 
 label=16;break;
 case 16: 
 var $57=$i;
 var $58=((($57)+(1))|0);
 $i=$58;
 label=6;break;
 case 17: 
 var $60=$3;
 var $61=_hio_read32b($60);
 $mask=$61;
 $i=0;
 label=18;break;
 case 18: 
 var $63=$i;
 var $64=($63|0)<32;
 if($64){label=19;break;}else{label=24;break;}
 case 19: 
 var $66=$mask;
 var $67=$66&-2147483648;
 var $68=($67|0)!=0;
 if($68){label=20;break;}else{label=21;break;}
 case 20: 
 var $70=$3;
 var $71=_hio_read8($70);
 var $72=($71&255);
 var $75=$72;label=22;break;
 case 21: 
 var $75=0;label=22;break;
 case 22: 
 var $75;
 var $76=$i;
 var $77=$mod;
 var $78=(($77+176)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+((($76)*(764))&-1))|0);
 var $81=(($80+756)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82)|0);
 var $84=(($83)|0);
 HEAP32[(($84)>>2)]=$75;
 var $85=$i;
 var $86=$mod;
 var $87=(($86+176)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+((($85)*(764))&-1))|0);
 var $90=(($89+756)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91)|0);
 var $93=(($92+8)|0);
 HEAP32[(($93)>>2)]=128;
 var $94=$i;
 var $95=$mod;
 var $96=(($95+176)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+((($94)*(764))&-1))|0);
 var $99=(($98+756)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100)|0);
 var $102=(($101+16)|0);
 HEAP32[(($102)>>2)]=0;
 var $103=$i;
 var $104=$i;
 var $105=$mod;
 var $106=(($105+176)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+((($104)*(764))&-1))|0);
 var $109=(($108+756)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110)|0);
 var $112=(($111+40)|0);
 HEAP32[(($112)>>2)]=$103;
 label=23;break;
 case 23: 
 var $114=$i;
 var $115=((($114)+(1))|0);
 $i=$115;
 var $116=$mask;
 var $117=$116<<1;
 $mask=$117;
 label=18;break;
 case 24: 
 var $119=$3;
 var $120=_hio_read32b($119);
 $mask=$120;
 $i=0;
 label=25;break;
 case 25: 
 var $122=$i;
 var $123=($122|0)<32;
 if($123){label=26;break;}else{label=31;break;}
 case 26: 
 var $125=$mask;
 var $126=$125&-2147483648;
 var $127=($126|0)!=0;
 if($127){label=27;break;}else{label=28;break;}
 case 27: 
 var $129=$3;
 var $130=_hio_read16b($129);
 var $131=($130&65535);
 var $134=$131;label=29;break;
 case 28: 
 var $134=0;label=29;break;
 case 29: 
 var $134;
 var $135=$i;
 var $136=$mod;
 var $137=(($136+180)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+((($135)*(52))&-1))|0);
 var $140=(($139+36)|0);
 HEAP32[(($140)>>2)]=$134;
 label=30;break;
 case 30: 
 var $142=$i;
 var $143=((($142)+(1))|0);
 $i=$143;
 var $144=$mask;
 var $145=$144<<1;
 $mask=$145;
 label=25;break;
 case 31: 
 var $147=$3;
 var $148=_hio_read32b($147);
 $mask=$148;
 $i=0;
 label=32;break;
 case 32: 
 var $150=$i;
 var $151=($150|0)<32;
 if($151){label=33;break;}else{label=38;break;}
 case 33: 
 var $153=$mask;
 var $154=$153&-2147483648;
 var $155=($154|0)!=0;
 if($155){label=34;break;}else{label=35;break;}
 case 34: 
 var $157=$3;
 var $158=_hio_read16b($157);
 var $159=($158&65535);
 var $162=$159;label=36;break;
 case 35: 
 var $162=0;label=36;break;
 case 36: 
 var $162;
 $lsiz=$162;
 var $163=$i;
 var $164=$mod;
 var $165=(($164+180)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+((($163)*(52))&-1))|0);
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$lsiz;
 var $171=((($169)+($170))|0);
 var $172=$i;
 var $173=$mod;
 var $174=(($173+180)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+((($172)*(52))&-1))|0);
 var $177=(($176+32)|0);
 HEAP32[(($177)>>2)]=$171;
 var $178=$i;
 var $179=$mod;
 var $180=(($179+180)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+((($178)*(52))&-1))|0);
 var $183=(($182+36)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=$lsiz;
 var $186=((($184)+($185))|0);
 var $187=$i;
 var $188=$mod;
 var $189=(($188+180)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+((($187)*(52))&-1))|0);
 var $192=(($191+40)|0);
 HEAP32[(($192)>>2)]=$186;
 var $193=$lsiz;
 var $194=($193>>>0)>1;
 var $195=($194?2:0);
 var $196=$i;
 var $197=$mod;
 var $198=(($197+180)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+((($196)*(52))&-1))|0);
 var $201=(($200+44)|0);
 HEAP32[(($201)>>2)]=$195;
 label=37;break;
 case 37: 
 var $203=$i;
 var $204=((($203)+(1))|0);
 $i=$204;
 var $205=$mask;
 var $206=$205<<1;
 $mask=$206;
 label=32;break;
 case 38: 
 var $208=$mod;
 var $209=(($208+136)|0);
 HEAP32[(($209)>>2)]=4;
 var $210=$3;
 var $211=_hio_read16b($210);
 var $212=($211&65535);
 var $213=$mod;
 var $214=(($213+128)|0);
 HEAP32[(($214)>>2)]=$212;
 var $215=$mod;
 var $216=(($215+136)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$mod;
 var $219=(($218+128)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(Math_imul($217,$220)|0);
 var $222=$mod;
 var $223=(($222+132)|0);
 HEAP32[(($223)>>2)]=$221;
 var $224=$3;
 var $225=_hio_read16b($224);
 var $226=($225&65535);
 var $227=$mod;
 var $228=(($227+156)|0);
 HEAP32[(($228)>>2)]=$226;
 var $229=$mod;
 var $230=(($229+952)|0);
 var $231=(($230)|0);
 var $232=$mod;
 var $233=(($232+156)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$3;
 var $236=_hio_read($231,1,$234,$235);
 var $237=$3;
 var $238=_hio_read16b($237);
 var $239=($238&65535);
 var $240=$mod;
 var $241=(($240+148)|0);
 HEAP32[(($241)>>2)]=$239;
 var $242=$mod;
 var $243=(($242+148)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=($244|0)>10;
 if($245){label=39;break;}else{label=40;break;}
 case 39: 
 var $247=$mod;
 var $248=(($247+148)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=((($249)*(125))&-1);
 var $251=(((($250|0))/(33))&-1);
 var $252=$mod;
 var $253=(($252+152)|0);
 HEAP32[(($253)>>2)]=$251;
 var $254=$mod;
 var $255=(($254+148)|0);
 HEAP32[(($255)>>2)]=6;
 label=40;break;
 case 40: 
 var $257=$3;
 var $258=_hio_read8s($257);
 var $259=(($258<<24)>>24);
 $transp=$259;
 var $260=$3;
 var $261=_hio_read8($260);
 var $262=$3;
 var $263=_hio_read16b($262);
 var $264=($263&65535);
 $sliding=$264;
 var $265=$3;
 var $266=_hio_read32b($265);
 var $267=$3;
 var $268=_hio_seek($267,16,1);
 var $269=$3;
 var $270=_hio_read32b($269);
 $mask=$270;
 $i=0;
 label=41;break;
 case 41: 
 var $272=$i;
 var $273=($272|0)<32;
 if($273){label=42;break;}else{label=46;break;}
 case 42: 
 var $275=$mask;
 var $276=$275&-2147483648;
 var $277=($276|0)!=0;
 if($277){label=43;break;}else{label=44;break;}
 case 43: 
 var $279=$3;
 var $280=_hio_read8($279);
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $283=$i;
 var $284=((($283)+(1))|0);
 $i=$284;
 var $285=$mask;
 var $286=$285<<1;
 $mask=$286;
 label=41;break;
 case 46: 
 var $288=$3;
 var $289=_hio_read32b($288);
 $mask=$289;
 $i=0;
 label=47;break;
 case 47: 
 var $291=$i;
 var $292=($291|0)<32;
 if($292){label=48;break;}else{label=52;break;}
 case 48: 
 var $294=$mask;
 var $295=$294&-2147483648;
 var $296=($295|0)!=0;
 if($296){label=49;break;}else{label=50;break;}
 case 49: 
 var $298=$3;
 var $299=_hio_read8($298);
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $302=$i;
 var $303=((($302)+(1))|0);
 $i=$303;
 var $304=$mask;
 var $305=$304<<1;
 $mask=$305;
 label=47;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 var $317=$sliding;
 var $318=($317|0)==6;
 if($318){label=63;break;}else{label=64;break;}
 case 63: 
 var $320=$2;
 var $321=(($320+1280)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=$322|192;
 HEAP32[(($321)>>2)]=$323;
 label=64;break;
 case 64: 
 $i=0;
 label=65;break;
 case 65: 
 var $326=$i;
 var $327=($326|0)<32;
 if($327){label=66;break;}else{label=68;break;}
 case 66: 
 var $329=$transp;
 var $330=$i;
 var $331=$mod;
 var $332=(($331+176)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($333+((($330)*(764))&-1))|0);
 var $335=(($334+756)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336)|0);
 var $338=(($337+12)|0);
 HEAP32[(($338)>>2)]=$329;
 label=67;break;
 case 67: 
 var $340=$i;
 var $341=((($340)+(1))|0);
 $i=$341;
 label=65;break;
 case 68: 
 var $343=$mod;
 var $344=_pattern_init($343);
 var $345=($344|0)<0;
 if($345){label=69;break;}else{label=70;break;}
 case 69: 
 $1=-1;
 label=123;break;
 case 70: 
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 $i=0;
 label=73;break;
 case 73: 
 var $351=$i;
 var $352=$mod;
 var $353=(($352+128)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=($351|0)<($354|0);
 if($355){label=74;break;}else{label=106;break;}
 case 74: 
 var $357=$mod;
 var $358=$i;
 var $359=_pattern_tracks_alloc($357,$358,64);
 var $360=($359|0)<0;
 if($360){label=75;break;}else{label=76;break;}
 case 75: 
 $1=-1;
 label=123;break;
 case 76: 
 var $363=$3;
 var $364=_hio_read8($363);
 $tracks=$364;
 var $365=$3;
 var $366=_hio_read8($365);
 $b=$366;
 var $367=$3;
 var $368=_hio_read16b($367);
 $convsz=$368;
 var $369=$convsz;
 var $370=($369&65535);
 var $371=((($370)+(16))|0);
 var $372=_calloc(1,$371);
 var $373=$372;
 $conv=$373;
 var $374=$conv;
 var $375=($374|0)==0;
 if($375){label=77;break;}else{label=78;break;}
 case 77: 
 $1=-1;
 label=123;break;
 case 78: 
 var $378=$b;
 var $379=($378&255);
 var $380=$379&16;
 var $381=($380|0)!=0;
 if($381){label=79;break;}else{label=80;break;}
 case 79: 
 var $383=$conv;
 HEAP32[(($383)>>2)]=0;
 label=84;break;
 case 80: 
 var $385=$b;
 var $386=($385&255);
 var $387=$386&1;
 var $388=($387|0)!=0;
 if($388){label=81;break;}else{label=82;break;}
 case 81: 
 var $390=$conv;
 HEAP32[(($390)>>2)]=-1;
 label=83;break;
 case 82: 
 var $392=$3;
 var $393=_hio_read32b($392);
 var $394=$conv;
 HEAP32[(($394)>>2)]=$393;
 label=83;break;
 case 83: 
 label=84;break;
 case 84: 
 var $397=$b;
 var $398=($397&255);
 var $399=$398&32;
 var $400=($399|0)!=0;
 if($400){label=85;break;}else{label=86;break;}
 case 85: 
 var $402=$conv;
 var $403=(($402+4)|0);
 HEAP32[(($403)>>2)]=0;
 label=90;break;
 case 86: 
 var $405=$b;
 var $406=($405&255);
 var $407=$406&2;
 var $408=($407|0)!=0;
 if($408){label=87;break;}else{label=88;break;}
 case 87: 
 var $410=$conv;
 var $411=(($410+4)|0);
 HEAP32[(($411)>>2)]=-1;
 label=89;break;
 case 88: 
 var $413=$3;
 var $414=_hio_read32b($413);
 var $415=$conv;
 var $416=(($415+4)|0);
 HEAP32[(($416)>>2)]=$414;
 label=89;break;
 case 89: 
 label=90;break;
 case 90: 
 var $419=$b;
 var $420=($419&255);
 var $421=$420&64;
 var $422=($421|0)!=0;
 if($422){label=91;break;}else{label=92;break;}
 case 91: 
 var $424=$conv;
 var $425=(($424+8)|0);
 HEAP32[(($425)>>2)]=0;
 label=96;break;
 case 92: 
 var $427=$b;
 var $428=($427&255);
 var $429=$428&4;
 var $430=($429|0)!=0;
 if($430){label=93;break;}else{label=94;break;}
 case 93: 
 var $432=$conv;
 var $433=(($432+8)|0);
 HEAP32[(($433)>>2)]=-1;
 label=95;break;
 case 94: 
 var $435=$3;
 var $436=_hio_read32b($435);
 var $437=$conv;
 var $438=(($437+8)|0);
 HEAP32[(($438)>>2)]=$436;
 label=95;break;
 case 95: 
 label=96;break;
 case 96: 
 var $441=$b;
 var $442=($441&255);
 var $443=$442&128;
 var $444=($443|0)!=0;
 if($444){label=97;break;}else{label=98;break;}
 case 97: 
 var $446=$conv;
 var $447=(($446+12)|0);
 HEAP32[(($447)>>2)]=0;
 label=102;break;
 case 98: 
 var $449=$b;
 var $450=($449&255);
 var $451=$450&8;
 var $452=($451|0)!=0;
 if($452){label=99;break;}else{label=100;break;}
 case 99: 
 var $454=$conv;
 var $455=(($454+12)|0);
 HEAP32[(($455)>>2)]=-1;
 label=101;break;
 case 100: 
 var $457=$3;
 var $458=_hio_read32b($457);
 var $459=$conv;
 var $460=(($459+12)|0);
 HEAP32[(($460)>>2)]=$458;
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 var $463=$conv;
 var $464=(($463+16)|0);
 var $465=$464;
 var $466=$convsz;
 var $467=($466&65535);
 var $468=$3;
 var $469=_hio_read($465,1,$467,$468);
 var $470=$2;
 var $471=$i;
 var $472=(($471)&65535);
 var $473=$conv;
 var $474=$473;
 var $475=_unpack_block($470,$472,$474);
 var $476=($475|0)<0;
 if($476){label=103;break;}else{label=104;break;}
 case 103: 
 var $478=$conv;
 var $479=$478;
 _free($479);
 $1=-1;
 label=123;break;
 case 104: 
 var $481=$conv;
 var $482=$481;
 _free($482);
 label=105;break;
 case 105: 
 var $484=$i;
 var $485=((($484)+(1))|0);
 $i=$485;
 label=73;break;
 case 106: 
 label=107;break;
 case 107: 
 label=108;break;
 case 108: 
 var $489=$3;
 var $490=_hio_read32b($489);
 $mask=$490;
 $i=0;
 label=109;break;
 case 109: 
 var $492=$i;
 var $493=($492|0)<32;
 if($493){label=110;break;}else{label=122;break;}
 case 110: 
 var $495=$mask;
 var $496=$495^-1;
 var $497=$496&-2147483648;
 var $498=($497|0)!=0;
 if($498){label=111;break;}else{label=112;break;}
 case 111: 
 label=121;break;
 case 112: 
 var $501=$i;
 var $502=$mod;
 var $503=(($502+176)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=(($504+((($501)*(764))&-1))|0);
 var $506=(($505+36)|0);
 HEAP32[(($506)>>2)]=1;
 var $507=$3;
 var $508=_hio_read32b($507);
 var $509=$i;
 var $510=$mod;
 var $511=(($510+180)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($512+((($509)*(52))&-1))|0);
 var $514=(($513+32)|0);
 HEAP32[(($514)>>2)]=$508;
 var $515=$i;
 var $516=$mod;
 var $517=(($516+180)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=(($518+((($515)*(52))&-1))|0);
 var $520=(($519+32)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=($521|0)==0;
 if($522){label=113;break;}else{label=114;break;}
 case 113: 
 var $524=$i;
 var $525=$mod;
 var $526=(($525+176)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=(($527+((($524)*(764))&-1))|0);
 var $529=(($528+36)|0);
 HEAP32[(($529)>>2)]=0;
 label=114;break;
 case 114: 
 var $531=$3;
 var $532=_hio_read16b($531);
 var $533=(($532<<16)>>16)!=0;
 if($533){label=115;break;}else{label=116;break;}
 case 115: 
 label=121;break;
 case 116: 
 label=117;break;
 case 117: 
 label=118;break;
 case 118: 
 var $538=$2;
 var $539=$3;
 var $540=$i;
 var $541=$mod;
 var $542=(($541+180)|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=(($543+((($540)*(52))&-1))|0);
 var $545=_load_sample($538,$539,0,$544,0);
 var $546=($545|0)<0;
 if($546){label=119;break;}else{label=120;break;}
 case 119: 
 $1=-1;
 label=123;break;
 case 120: 
 label=121;break;
 case 121: 
 var $550=$i;
 var $551=((($550)+(1))|0);
 $i=$551;
 var $552=$mask;
 var $553=$552<<1;
 $mask=$553;
 label=109;break;
 case 122: 
 $1=0;
 label=123;break;
 case 123: 
 var $556=$1;
 STACKTOP=sp;return $556;
  default: assert(0, "bad label: " + label);
 }
}
function _unpack_block($m,$bnum,$from){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $linemsk0=sp;
 var $linemsk1=(sp)+(8);
 var $fxmsk0=(sp)+(16);
 var $fxmsk1=(sp)+(24);
 var $lmptr;
 var $fxptr;
 var $fromn=(sp)+(32);
 var $lmsk;
 var $fromst;
 var $bcnt;
 var $tmpto;
 var $patbuf;
 var $to;
 var $i;
 var $j;
 var $trkn;
 $2=$m;
 $3=$bnum;
 $4=$from;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$4;
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 HEAP32[(($linemsk0)>>2)]=$9;
 var $10=$4;
 var $11=$10;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 HEAP32[(($linemsk1)>>2)]=$13;
 var $14=$4;
 var $15=$14;
 var $16=(($15+8)|0);
 var $17=HEAP32[(($16)>>2)];
 HEAP32[(($fxmsk0)>>2)]=$17;
 var $18=$4;
 var $19=$18;
 var $20=(($19+12)|0);
 var $21=HEAP32[(($20)>>2)];
 HEAP32[(($fxmsk1)>>2)]=$21;
 $lmptr=$linemsk0;
 $fxptr=$fxmsk0;
 HEAP16[(($fromn)>>1)]=0;
 var $22=$4;
 var $23=(($22+16)|0);
 $fromst=$23;
 var $24=$mod;
 var $25=(($24+136)|0);
 var $26=HEAP32[(($25)>>2)];
 $trkn=$26;
 var $27=$4;
 var $28=(($27+16)|0);
 $4=$28;
 var $29=_calloc(3,256);
 $to=$29;
 $patbuf=$29;
 var $30=$to;
 var $31=($30|0)==0;
 if($31){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=63;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $35=$i;
 var $36=($35|0)<64;
 if($36){label=5;break;}else{label=25;break;}
 case 5: 
 var $38=$i;
 var $39=($38|0)==32;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 $lmptr=$linemsk1;
 $fxptr=$fxmsk1;
 label=7;break;
 case 7: 
 var $42=$lmptr;
 var $43=HEAP32[(($42)>>2)];
 var $44=$43&-2147483648;
 var $45=($44|0)!=0;
 if($45){label=8;break;}else{label=15;break;}
 case 8: 
 var $47=$fromst;
 var $48=$trkn;
 var $49=(((($48|0))/(4))&-1);
 var $50=(($49)&255);
 var $51=_get_nibbles($47,$fromn,$50);
 $lmsk=$51;
 var $52=$trkn;
 var $53=(((16)-($52))|0);
 var $54=$lmsk;
 var $55=($54&65535);
 var $56=$55<<$53;
 var $57=(($56)&65535);
 $lmsk=$57;
 var $58=$to;
 $tmpto=$58;
 $bcnt=0;
 label=9;break;
 case 9: 
 var $60=$bcnt;
 var $61=($60&255);
 var $62=$trkn;
 var $63=($61|0)<($62|0);
 if($63){label=10;break;}else{label=14;break;}
 case 10: 
 var $65=$lmsk;
 var $66=($65&65535);
 var $67=$66&32768;
 var $68=($67|0)!=0;
 if($68){label=11;break;}else{label=12;break;}
 case 11: 
 var $70=$fromst;
 var $71=_get_nibbles($70,$fromn,2);
 var $72=(($71)&255);
 var $73=$tmpto;
 HEAP8[($73)]=$72;
 var $74=$fromst;
 var $75=_get_nibble($74,$fromn);
 var $76=($75&255);
 var $77=$76<<4;
 var $78=(($77)&255);
 var $79=$tmpto;
 var $80=(($79+1)|0);
 HEAP8[($80)]=$78;
 label=12;break;
 case 12: 
 var $82=$lmsk;
 var $83=($82&65535);
 var $84=$83<<1;
 var $85=(($84)&65535);
 $lmsk=$85;
 var $86=$tmpto;
 var $87=(($86+3)|0);
 $tmpto=$87;
 label=13;break;
 case 13: 
 var $89=$bcnt;
 var $90=((($89)+(1))&255);
 $bcnt=$90;
 label=9;break;
 case 14: 
 label=15;break;
 case 15: 
 var $93=$fxptr;
 var $94=HEAP32[(($93)>>2)];
 var $95=$94&-2147483648;
 var $96=($95|0)!=0;
 if($96){label=16;break;}else{label=23;break;}
 case 16: 
 var $98=$fromst;
 var $99=$trkn;
 var $100=(((($99|0))/(4))&-1);
 var $101=(($100)&255);
 var $102=_get_nibbles($98,$fromn,$101);
 $lmsk=$102;
 var $103=$trkn;
 var $104=(((16)-($103))|0);
 var $105=$lmsk;
 var $106=($105&65535);
 var $107=$106<<$104;
 var $108=(($107)&65535);
 $lmsk=$108;
 var $109=$to;
 $tmpto=$109;
 $bcnt=0;
 label=17;break;
 case 17: 
 var $111=$bcnt;
 var $112=($111&255);
 var $113=$trkn;
 var $114=($112|0)<($113|0);
 if($114){label=18;break;}else{label=22;break;}
 case 18: 
 var $116=$lmsk;
 var $117=($116&65535);
 var $118=$117&32768;
 var $119=($118|0)!=0;
 if($119){label=19;break;}else{label=20;break;}
 case 19: 
 var $121=$fromst;
 var $122=_get_nibble($121,$fromn);
 var $123=($122&255);
 var $124=$tmpto;
 var $125=(($124+1)|0);
 var $126=HEAP8[($125)];
 var $127=($126&255);
 var $128=$127|$123;
 var $129=(($128)&255);
 HEAP8[($125)]=$129;
 var $130=$fromst;
 var $131=_get_nibbles($130,$fromn,2);
 var $132=(($131)&255);
 var $133=$tmpto;
 var $134=(($133+2)|0);
 HEAP8[($134)]=$132;
 label=20;break;
 case 20: 
 var $136=$lmsk;
 var $137=($136&65535);
 var $138=$137<<1;
 var $139=(($138)&65535);
 $lmsk=$139;
 var $140=$tmpto;
 var $141=(($140+3)|0);
 $tmpto=$141;
 label=21;break;
 case 21: 
 var $143=$bcnt;
 var $144=((($143)+(1))&255);
 $bcnt=$144;
 label=17;break;
 case 22: 
 label=23;break;
 case 23: 
 var $147=$trkn;
 var $148=((($147)*(3))&-1);
 var $149=$to;
 var $150=(($149+$148)|0);
 $to=$150;
 var $151=$lmptr;
 var $152=HEAP32[(($151)>>2)];
 var $153=$152<<1;
 HEAP32[(($151)>>2)]=$153;
 var $154=$fxptr;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155<<1;
 HEAP32[(($154)>>2)]=$156;
 label=24;break;
 case 24: 
 var $158=$i;
 var $159=((($158)+(1))|0);
 $i=$159;
 label=4;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 var $162=$i;
 var $163=($162|0)<64;
 if($163){label=27;break;}else{label=62;break;}
 case 27: 
 $j=0;
 label=28;break;
 case 28: 
 var $166=$j;
 var $167=($166|0)<4;
 if($167){label=29;break;}else{label=60;break;}
 case 29: 
 var $169=$i;
 var $170=$j;
 var $171=$3;
 var $172=($171&65535);
 var $173=$2;
 var $174=(($173)|0);
 var $175=(($174+168)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+($172<<2))|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+4)|0);
 var $180=(($179+($170<<2))|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=$2;
 var $183=(($182)|0);
 var $184=(($183+172)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+($181<<2))|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+4)|0);
 var $189=(($188+($169<<3))|0);
 $event=$189;
 var $190=$i;
 var $191=((($190)*(12))&-1);
 var $192=$j;
 var $193=((($192)*(3))&-1);
 var $194=((($191)+($193))|0);
 var $195=(($194)|0);
 var $196=$patbuf;
 var $197=(($196+$195)|0);
 var $198=HEAP8[($197)];
 var $199=$event;
 var $200=(($199)|0);
 HEAP8[($200)]=$198;
 var $201=$event;
 var $202=(($201)|0);
 var $203=HEAP8[($202)];
 var $204=(($203<<24)>>24)!=0;
 if($204){label=30;break;}else{label=31;break;}
 case 30: 
 var $206=$event;
 var $207=(($206)|0);
 var $208=HEAP8[($207)];
 var $209=($208&255);
 var $210=((($209)+(48))|0);
 var $211=(($210)&255);
 HEAP8[($207)]=$211;
 label=31;break;
 case 31: 
 var $213=$i;
 var $214=((($213)*(12))&-1);
 var $215=$j;
 var $216=((($215)*(3))&-1);
 var $217=((($214)+($216))|0);
 var $218=((($217)+(1))|0);
 var $219=$patbuf;
 var $220=(($219+$218)|0);
 var $221=HEAP8[($220)];
 var $222=($221&255);
 var $223=$222>>4;
 var $224=(($223)&255);
 var $225=$event;
 var $226=(($225+1)|0);
 HEAP8[($226)]=$224;
 var $227=$event;
 var $228=(($227+1)|0);
 var $229=HEAP8[($228)];
 var $230=(($229<<24)>>24)!=0;
 if($230){label=32;break;}else{label=33;break;}
 case 32: 
 var $232=$event;
 var $233=(($232+1)|0);
 var $234=HEAP8[($233)];
 var $235=((($234)+(1))&255);
 HEAP8[($233)]=$235;
 label=33;break;
 case 33: 
 var $237=$i;
 var $238=((($237)*(12))&-1);
 var $239=$j;
 var $240=((($239)*(3))&-1);
 var $241=((($238)+($240))|0);
 var $242=((($241)+(1))|0);
 var $243=$patbuf;
 var $244=(($243+$242)|0);
 var $245=HEAP8[($244)];
 var $246=($245&255);
 var $247=$246&15;
 var $248=(($247)&255);
 var $249=$event;
 var $250=(($249+3)|0);
 HEAP8[($250)]=$248;
 var $251=$i;
 var $252=((($251)*(12))&-1);
 var $253=$j;
 var $254=((($253)*(3))&-1);
 var $255=((($252)+($254))|0);
 var $256=((($255)+(2))|0);
 var $257=$patbuf;
 var $258=(($257+$256)|0);
 var $259=HEAP8[($258)];
 var $260=$event;
 var $261=(($260+4)|0);
 HEAP8[($261)]=$259;
 var $262=$event;
 var $263=(($262+3)|0);
 var $264=HEAP8[($263)];
 var $265=($264&255);
 switch(($265|0)){case 0:case 1:case 2:case 3:case 4:{ label=34;break;}case 12:{ label=35;break;}case 13:{ label=36;break;}case 15:{ label=37;break;}default:{label=57;break;}}break;
 case 34: 
 label=58;break;
 case 35: 
 var $268=$event;
 var $269=(($268+4)|0);
 var $270=HEAP8[($269)];
 var $271=($270&255);
 var $272=$271&240;
 var $273=$272>>4;
 var $274=((($273)*(10))&-1);
 var $275=$event;
 var $276=(($275+4)|0);
 var $277=HEAP8[($276)];
 var $278=($277&255);
 var $279=$278&15;
 var $280=((($274)+($279))|0);
 var $281=(($280)&255);
 var $282=$event;
 var $283=(($282+4)|0);
 HEAP8[($283)]=$281;
 label=58;break;
 case 36: 
 var $285=$event;
 var $286=(($285+3)|0);
 HEAP8[($286)]=10;
 label=58;break;
 case 37: 
 var $288=$event;
 var $289=(($288+4)|0);
 var $290=HEAP8[($289)];
 var $291=($290&255);
 var $292=($291|0)==0;
 if($292){label=38;break;}else{label=39;break;}
 case 38: 
 var $294=$event;
 var $295=(($294+3)|0);
 HEAP8[($295)]=13;
 label=39;break;
 case 39: 
 var $297=$event;
 var $298=(($297+4)|0);
 var $299=HEAP8[($298)];
 var $300=($299&255);
 var $301=($300|0)==255;
 if($301){label=40;break;}else{label=41;break;}
 case 40: 
 var $303=$event;
 var $304=(($303+3)|0);
 HEAP8[($304)]=0;
 var $305=$event;
 var $306=(($305+4)|0);
 HEAP8[($306)]=0;
 var $307=$event;
 var $308=(($307+2)|0);
 HEAP8[($308)]=1;
 label=56;break;
 case 41: 
 var $310=$event;
 var $311=(($310+4)|0);
 var $312=HEAP8[($311)];
 var $313=($312&255);
 var $314=($313|0)==254;
 if($314){label=42;break;}else{label=43;break;}
 case 42: 
 var $316=$event;
 var $317=(($316+3)|0);
 HEAP8[($317)]=0;
 var $318=$event;
 var $319=(($318+4)|0);
 HEAP8[($319)]=0;
 label=55;break;
 case 43: 
 var $321=$event;
 var $322=(($321+4)|0);
 var $323=HEAP8[($322)];
 var $324=($323&255);
 var $325=($324|0)==241;
 if($325){label=44;break;}else{label=45;break;}
 case 44: 
 var $327=$event;
 var $328=(($327+3)|0);
 HEAP8[($328)]=14;
 var $329=$event;
 var $330=(($329+4)|0);
 HEAP8[($330)]=-109;
 label=54;break;
 case 45: 
 var $332=$event;
 var $333=(($332+4)|0);
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=($335|0)==242;
 if($336){label=46;break;}else{label=47;break;}
 case 46: 
 var $338=$event;
 var $339=(($338+3)|0);
 HEAP8[($339)]=14;
 var $340=$event;
 var $341=(($340+4)|0);
 HEAP8[($341)]=-61;
 label=53;break;
 case 47: 
 var $343=$event;
 var $344=(($343+4)|0);
 var $345=HEAP8[($344)];
 var $346=($345&255);
 var $347=($346|0)==243;
 if($347){label=48;break;}else{label=49;break;}
 case 48: 
 var $349=$event;
 var $350=(($349+3)|0);
 HEAP8[($350)]=14;
 var $351=$event;
 var $352=(($351+4)|0);
 HEAP8[($352)]=-45;
 label=52;break;
 case 49: 
 var $354=$event;
 var $355=(($354+4)|0);
 var $356=HEAP8[($355)];
 var $357=($356&255);
 var $358=($357|0)>10;
 if($358){label=50;break;}else{label=51;break;}
 case 50: 
 var $360=$event;
 var $361=(($360+3)|0);
 HEAP8[($361)]=-85;
 var $362=$event;
 var $363=(($362+4)|0);
 var $364=HEAP8[($363)];
 var $365=($364&255);
 var $366=((($365)*(125))&-1);
 var $367=(((($366|0))/(33))&-1);
 var $368=(($367)&255);
 var $369=$event;
 var $370=(($369+4)|0);
 HEAP8[($370)]=$368;
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=58;break;
 case 57: 
 var $378=$event;
 var $379=(($378+3)|0);
 HEAP8[($379)]=0;
 var $380=$event;
 var $381=(($380+4)|0);
 HEAP8[($381)]=0;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 var $384=$j;
 var $385=((($384)+(1))|0);
 $j=$385;
 label=28;break;
 case 60: 
 label=61;break;
 case 61: 
 var $388=$i;
 var $389=((($388)+(1))|0);
 $i=$389;
 label=26;break;
 case 62: 
 var $391=$patbuf;
 _free($391);
 $1=0;
 label=63;break;
 case 63: 
 var $393=$1;
 STACKTOP=sp;return $393;
  default: assert(0, "bad label: " + label);
 }
}
function _get_nibbles($mem,$nbnum,$nbs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $res;
 $1=$mem;
 $2=$nbnum;
 $3=$nbs;
 $res=0;
 label=2;break;
 case 2: 
 var $5=$3;
 var $6=((($5)-(1))&255);
 $3=$6;
 var $7=(($5<<24)>>24)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$res;
 var $10=($9&65535);
 var $11=$10<<4;
 var $12=(($11)&65535);
 $res=$12;
 var $13=$1;
 var $14=$2;
 var $15=_get_nibble($13,$14);
 var $16=($15&255);
 var $17=$res;
 var $18=($17&65535);
 var $19=$18|$16;
 var $20=(($19)&65535);
 $res=$20;
 label=2;break;
 case 4: 
 var $22=$res;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }
}
function _get_nibble($mem,$nbnum){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $mloc;
 var $res;
 $1=$mem;
 $2=$nbnum;
 var $3=$1;
 var $4=$2;
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=(((($6|0))/(2))&-1);
 var $8=(($3+$7)|0);
 $mloc=$8;
 var $9=$2;
 var $10=HEAP16[(($9)>>1)];
 var $11=($10&65535);
 var $12=$11&1;
 var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$mloc;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&15;
 var $19=(($18)&255);
 $res=$19;
 label=4;break;
 case 3: 
 var $21=$mloc;
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23>>4;
 var $25=(($24)&255);
 $res=$25;
 label=4;break;
 case 4: 
 var $27=$2;
 var $28=HEAP16[(($27)>>1)];
 var $29=((($28)+(1))&65535);
 HEAP16[(($27)>>1)]=$29;
 var $30=$res;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _med4_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1296385028;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,0);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _med4_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4792)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $y;
 var $m0;
 var $mask=sp;
 var $transp;
 var $masksz;
 var $pos;
 var $vermaj;
 var $vermin;
 var $trkvol=(sp)+(8);
 var $buf=(sp)+(24);
 var $event;
 var $flags;
 var $hexvol;
 var $num_ins;
 var $num_smp;
 var $smp_idx;
 var $tempo;
 var $temp_inst=(sp)+(1048);
 var $c;
 var $size;
 var $buf1=(sp)+(4120);
 var $loop_len;
 var $size2;
 var $plen;
 var $chn;
 var $size3;
 var $plen4;
 var $rows;
 var $ctl=(sp)+(4160);
 var $chn5;
 var $chmsk;
 var $linemask=(sp)+(4168);
 var $fxmask=(sp)+(4200);
 var $x;
 var $num_masks;
 var $stream=(sp)+(4232);
 var $c6;
 var $s;
 var $line;
 var $_len;
 var $_type;
 var $_mask=(sp)+(4248);
 var $_pos;
 var $length;
 var $type;
 var $synth=(sp)+(4256);
 var $xxi;
 var $sub;
 var $xxs;
 var $length7;
 var $type8;
 var $pos9;
 var $pos10;
 var $id;
 var $size11;
 var $s2;
 var $pos12;
 var $ver;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $hexvol=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 $vermaj=2;
 $vermin=10;
 var $14=$3;
 var $15=_hio_tell($14);
 $pos=$15;
 var $16=$3;
 var $17=_hio_seek($16,0,2);
 var $18=$3;
 var $19=_hio_tell($18);
 var $20=($19|0)>2000;
 if($20){label=4;break;}else{label=11;break;}
 case 4: 
 var $22=$3;
 var $23=_hio_seek($22,-1024,1);
 var $24=(($buf)|0);
 var $25=$3;
 var $26=_hio_read($24,1,1024,$25);
 $i=0;
 label=5;break;
 case 5: 
 var $28=$i;
 var $29=($28|0)<1013;
 if($29){label=6;break;}else{label=10;break;}
 case 6: 
 var $31=(($buf)|0);
 var $32=$i;
 var $33=(($31+$32)|0);
 var $34=_memcmp($33,26608,8);
 var $35=($34|0)!=0;
 if($35){label=8;break;}else{label=7;break;}
 case 7: 
 var $37=(($buf)|0);
 var $38=$i;
 var $39=(($37+$38)|0);
 var $40=(($39+10)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 $vermaj=$42;
 var $43=(($buf)|0);
 var $44=$i;
 var $45=(($43+$44)|0);
 var $46=(($45+11)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 $vermin=$48;
 label=10;break;
 case 8: 
 label=9;break;
 case 9: 
 var $51=$i;
 var $52=((($51)+(1))|0);
 $i=$52;
 label=5;break;
 case 10: 
 label=11;break;
 case 11: 
 var $55=$3;
 var $56=$4;
 var $57=$pos;
 var $58=((($56)+($57))|0);
 var $59=_hio_seek($55,$58,0);
 var $60=$mod;
 var $61=(($60+64)|0);
 var $62=(($61)|0);
 var $63=$vermaj;
 var $64=$vermin;
 var $65=_snprintf($62,64,24736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$63,HEAP32[(((tempVarArgs)+(8))>>2)]=$64,tempVarArgs)); STACKTOP=tempVarArgs;
 var $66=$3;
 var $67=_hio_read8($66);
 $m0=$67;
 $masksz=0;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($mask)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($mask+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 $i=0;
 label=12;break;
 case 12: 
 var $69=$m0;
 var $70=($69&255);
 var $71=($70|0)!=0;
 if($71){label=13;break;}else{var $76=0;label=14;break;}
 case 13: 
 var $73=$i;
 var $74=($73|0)<8;
 var $76=$74;label=14;break;
 case 14: 
 var $76;
 if($76){label=15;break;}else{label=19;break;}
 case 15: 
 var $78=$m0;
 var $79=($78&255);
 var $80=$79&128;
 var $81=($80|0)!=0;
 if($81){label=16;break;}else{label=17;break;}
 case 16: 
 var $ld$3$0=(($mask)|0);
 var $83$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($mask+4)|0);
 var $83$1=HEAP32[(($ld$4$1)>>2)];
 var $84$0=($83$0<<8)|(0>>>24);
 var $84$1=($83$1<<8)|($83$0>>>24);
 var $st$5$0=(($mask)|0);
 HEAP32[(($st$5$0)>>2)]=$84$0;
 var $st$6$1=(($mask+4)|0);
 HEAP32[(($st$6$1)>>2)]=$84$1;
 var $85=$3;
 var $86=_hio_read8($85);
 var $87$0=($86&255);
 var $87$1=0;
 var $ld$7$0=(($mask)|0);
 var $88$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($mask+4)|0);
 var $88$1=HEAP32[(($ld$8$1)>>2)];
 var $89$0=$88$0|$87$0;
 var $89$1=$88$1|$87$1;
 var $st$9$0=(($mask)|0);
 HEAP32[(($st$9$0)>>2)]=$89$0;
 var $st$10$1=(($mask+4)|0);
 HEAP32[(($st$10$1)>>2)]=$89$1;
 var $90=$masksz;
 var $91=((($90)+(1))|0);
 $masksz=$91;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $94=$i;
 var $95=((($94)+(1))|0);
 $i=$95;
 var $96=$m0;
 var $97=($96&255);
 var $98=$97<<1;
 var $99=(($98)&255);
 $m0=$99;
 label=12;break;
 case 19: 
 var $101=$masksz;
 var $102=(((8)-($101))|0);
 var $103=($102<<3);
 var $ld$11$0=(($mask)|0);
 var $104$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($mask+4)|0);
 var $104$1=HEAP32[(($ld$12$1)>>2)];
 var $105$0=$103;
 var $105$1=0;
 var $106$0=_bitshift64Shl($104$0,$104$1,$105$0);var $106$1=tempRet0;
 var $st$13$0=(($mask)|0);
 HEAP32[(($st$13$0)>>2)]=$106$0;
 var $st$14$1=(($mask+4)|0);
 HEAP32[(($st$14$1)>>2)]=$106$1;
 $num_ins=0;
 var $107=$temp_inst;
 _memset($107, 0, 3072)|0;
 $i=0;
 label=20;break;
 case 20: 
 var $ld$15$0=(($mask)|0);
 var $109$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($mask+4)|0);
 var $109$1=HEAP32[(($ld$16$1)>>2)];
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $110=(($109$0|0) != ($$etemp$17$0|0)) | (($109$1|0) != ($$etemp$17$1|0));
 if($110){label=21;break;}else{var $115=0;label=22;break;}
 case 21: 
 var $112=$i;
 var $113=($112|0)<64;
 var $115=$113;label=22;break;
 case 22: 
 var $115;
 if($115){label=23;break;}else{label=43;break;}
 case 23: 
 $loop_len=0;
 var $ld$18$0=(($mask)|0);
 var $117$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($mask+4)|0);
 var $117$1=HEAP32[(($ld$19$1)>>2)];
 var $$etemp$20$0=0;
 var $$etemp$20$1=0;
 var $118=(($117$1|0) > ($$etemp$20$1|0)) | (((($117$1|0) == ($$etemp$20$1|0) & ($117$0>>>0) >  ($$etemp$20$0>>>0))));
 if($118){label=24;break;}else{label=25;break;}
 case 24: 
 label=42;break;
 case 25: 
 var $121=$3;
 var $122=_hio_read8($121);
 $c=$122;
 var $123=$3;
 var $124=_hio_read8($123);
 $size=$124;
 $j=0;
 label=26;break;
 case 26: 
 var $126=$j;
 var $127=$size;
 var $128=($127&255);
 var $129=($126|0)<($128|0);
 if($129){label=27;break;}else{label=29;break;}
 case 27: 
 var $131=$3;
 var $132=_hio_read8($131);
 var $133=$j;
 var $134=(($buf1+$133)|0);
 HEAP8[($134)]=$132;
 label=28;break;
 case 28: 
 var $136=$j;
 var $137=((($136)+(1))|0);
 $j=$137;
 label=26;break;
 case 29: 
 var $139=$j;
 var $140=(($buf1+$139)|0);
 HEAP8[($140)]=0;
 var $141=$i;
 var $142=(($temp_inst+((($141)*(48))&-1))|0);
 var $143=(($142+40)|0);
 HEAP32[(($143)>>2)]=64;
 var $144=$c;
 var $145=($144&255);
 var $146=$145&1;
 var $147=($146|0)==0;
 if($147){label=30;break;}else{label=31;break;}
 case 30: 
 var $149=$3;
 var $150=_hio_read16b($149);
 var $151=($150&65535);
 var $152=$151<<1;
 var $153=$i;
 var $154=(($temp_inst+((($153)*(48))&-1))|0);
 var $155=(($154+32)|0);
 HEAP32[(($155)>>2)]=$152;
 label=31;break;
 case 31: 
 var $157=$c;
 var $158=($157&255);
 var $159=$158&2;
 var $160=($159|0)==0;
 if($160){label=32;break;}else{label=33;break;}
 case 32: 
 var $162=$3;
 var $163=_hio_read16b($162);
 var $164=($163&65535);
 var $165=$164<<1;
 var $166=(($165)&65535);
 $loop_len=$166;
 label=33;break;
 case 33: 
 var $168=$c;
 var $169=($168&255);
 var $170=$169&4;
 var $171=($170|0)==0;
 if($171){label=34;break;}else{label=35;break;}
 case 34: 
 var $173=$3;
 var $174=_hio_read8($173);
 label=35;break;
 case 35: 
 var $176=$c;
 var $177=($176&255);
 var $178=$177&8;
 var $179=($178|0)==0;
 if($179){label=36;break;}else{label=37;break;}
 case 36: 
 var $181=$3;
 var $182=_hio_read8($181);
 label=37;break;
 case 37: 
 var $184=$c;
 var $185=($184&255);
 var $186=$185&48;
 var $187=($186|0)==0;
 if($187){label=38;break;}else{label=39;break;}
 case 38: 
 var $189=$3;
 var $190=_hio_read8($189);
 var $191=($190&255);
 var $192=$i;
 var $193=(($temp_inst+((($192)*(48))&-1))|0);
 var $194=(($193+40)|0);
 HEAP32[(($194)>>2)]=$191;
 label=39;break;
 case 39: 
 var $196=$c;
 var $197=($196&255);
 var $198=$197&64;
 var $199=($198|0)==0;
 if($199){label=40;break;}else{label=41;break;}
 case 40: 
 var $201=$3;
 var $202=_hio_read8s($201);
 var $203=(($202<<24)>>24);
 var $204=$i;
 var $205=(($temp_inst+((($204)*(48))&-1))|0);
 var $206=(($205+44)|0);
 HEAP32[(($206)>>2)]=$203;
 label=41;break;
 case 41: 
 var $208=$i;
 var $209=(($temp_inst+((($208)*(48))&-1))|0);
 var $210=(($209+32)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=$loop_len;
 var $213=($212&65535);
 var $214=((($211)+($213))|0);
 var $215=$i;
 var $216=(($temp_inst+((($215)*(48))&-1))|0);
 var $217=(($216+36)|0);
 HEAP32[(($217)>>2)]=$214;
 var $218=$i;
 var $219=(($temp_inst+((($218)*(48))&-1))|0);
 var $220=(($219)|0);
 var $221=(($220)|0);
 var $222=(($buf1)|0);
 var $223=_copy_adjust($221,$222,32);
 var $224=$num_ins;
 var $225=((($224)+(1))|0);
 $num_ins=$225;
 label=42;break;
 case 42: 
 var $227=$i;
 var $228=((($227)+(1))|0);
 $i=$228;
 var $ld$21$0=(($mask)|0);
 var $229$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($mask+4)|0);
 var $229$1=HEAP32[(($ld$22$1)>>2)];
 var $230$0=($229$0<<1)|(0>>>31);
 var $230$1=($229$1<<1)|($229$0>>>31);
 var $st$23$0=(($mask)|0);
 HEAP32[(($st$23$0)>>2)]=$230$0;
 var $st$24$1=(($mask+4)|0);
 HEAP32[(($st$24$1)>>2)]=$230$1;
 label=20;break;
 case 43: 
 var $232=$3;
 var $233=_hio_read16b($232);
 var $234=($233&65535);
 var $235=$mod;
 var $236=(($235+128)|0);
 HEAP32[(($236)>>2)]=$234;
 var $237=$3;
 var $238=_hio_read16b($237);
 var $239=($238&65535);
 var $240=$mod;
 var $241=(($240+156)|0);
 HEAP32[(($241)>>2)]=$239;
 var $242=$mod;
 var $243=(($242+156)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=($244|0)>256;
 if($245){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=238;break;
 case 45: 
 var $248=$mod;
 var $249=(($248+952)|0);
 var $250=(($249)|0);
 var $251=$mod;
 var $252=(($251+156)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=$3;
 var $255=_hio_read($250,1,$253,$254);
 var $256=$3;
 var $257=_hio_read16b($256);
 var $258=($257&65535);
 $tempo=$258;
 var $259=$tempo;
 var $260=($259|0)<=10;
 if($260){label=46;break;}else{label=47;break;}
 case 46: 
 var $262=$tempo;
 var $263=$mod;
 var $264=(($263+148)|0);
 HEAP32[(($264)>>2)]=$262;
 var $265=$mod;
 var $266=(($265+152)|0);
 HEAP32[(($266)>>2)]=125;
 label=48;break;
 case 47: 
 var $268=$tempo;
 var $269=((($268)*(125))&-1);
 var $270=(((($269|0))/(33))&-1);
 var $271=$mod;
 var $272=(($271+152)|0);
 HEAP32[(($272)>>2)]=$270;
 label=48;break;
 case 48: 
 var $274=$3;
 var $275=_hio_read8s($274);
 var $276=(($275<<24)>>24);
 $transp=$276;
 var $277=$3;
 var $278=_hio_read8s($277);
 var $279=$3;
 var $280=_hio_read8s($279);
 var $281=(($280<<24)>>24);
 $flags=$281;
 var $282=$3;
 var $283=_hio_read8($282);
 var $284=($283&255);
 var $285=$mod;
 var $286=(($285+148)|0);
 HEAP32[(($286)>>2)]=$284;
 var $287=$flags;
 var $288=$287^-1;
 var $289=$288&32;
 var $290=($289|0)!=0;
 if($290){label=49;break;}else{label=50;break;}
 case 49: 
 var $292=$2;
 var $293=(($292+1280)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=$294|192;
 HEAP32[(($293)>>2)]=$295;
 label=50;break;
 case 50: 
 var $297=$flags;
 var $298=$297&16;
 var $299=($298|0)!=0;
 if($299){label=51;break;}else{label=52;break;}
 case 51: 
 $hexvol=1;
 label=52;break;
 case 52: 
 var $302=$vermaj;
 var $303=($302|0)==2;
 if($303){label=53;break;}else{label=54;break;}
 case 53: 
 var $305=$flags;
 var $306=$305&32;
 var $307=($306|0)!=0;
 var $308=($307?5:6);
 var $309=$mod;
 var $310=(($309+148)|0);
 HEAP32[(($310)>>2)]=$308;
 label=54;break;
 case 54: 
 var $312=$3;
 var $313=_hio_seek($312,20,1);
 var $314=(($trkvol)|0);
 var $315=$3;
 var $316=_hio_read($314,1,16,$315);
 var $317=$3;
 var $318=_hio_read8($317);
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 $i=0;
 label=63;break;
 case 63: 
 var $328=$i;
 var $329=($328|0)<64;
 if($329){label=64;break;}else{label=66;break;}
 case 64: 
 var $331=$transp;
 var $332=$i;
 var $333=(($temp_inst+((($332)*(48))&-1))|0);
 var $334=(($333+44)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=((($335)+($331))|0);
 HEAP32[(($334)>>2)]=$336;
 label=65;break;
 case 65: 
 var $338=$i;
 var $339=((($338)+(1))|0);
 $i=$339;
 label=63;break;
 case 66: 
 var $341=$mod;
 var $342=(($341+136)|0);
 HEAP32[(($342)>>2)]=0;
 var $343=$3;
 var $344=_hio_tell($343);
 $pos=$344;
 $i=0;
 label=67;break;
 case 67: 
 var $346=$i;
 var $347=$mod;
 var $348=(($347+128)|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=($346|0)<($349|0);
 if($350){label=68;break;}else{label=72;break;}
 case 68: 
 var $352=$3;
 var $353=_hio_read8($352);
 var $354=($353&255);
 $size2=$354;
 var $355=$3;
 var $356=_hio_read8($355);
 var $357=($356&255);
 $chn=$357;
 var $358=$chn;
 var $359=$mod;
 var $360=(($359+136)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=($358|0)>($361|0);
 if($362){label=69;break;}else{label=70;break;}
 case 69: 
 var $364=$chn;
 var $365=$mod;
 var $366=(($365+136)|0);
 HEAP32[(($366)>>2)]=$364;
 label=70;break;
 case 70: 
 var $368=$3;
 var $369=_hio_read8($368);
 var $370=$3;
 var $371=_hio_read16b($370);
 var $372=($371&65535);
 $plen=$372;
 var $373=$3;
 var $374=$size2;
 var $375=$plen;
 var $376=((($374)+($375))|0);
 var $377=((($376)-(4))|0);
 var $378=_hio_seek($373,$377,1);
 label=71;break;
 case 71: 
 var $380=$i;
 var $381=((($380)+(1))|0);
 $i=$381;
 label=67;break;
 case 72: 
 var $383=$mod;
 var $384=(($383+136)|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=$mod;
 var $387=(($386+128)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=(Math_imul($385,$388)|0);
 var $390=$mod;
 var $391=(($390+132)|0);
 HEAP32[(($391)>>2)]=$389;
 var $392=$mod;
 var $393=_pattern_init($392);
 var $394=($393|0)<0;
 if($394){label=73;break;}else{label=74;break;}
 case 73: 
 $1=-1;
 label=238;break;
 case 74: 
 var $397=$3;
 var $398=$pos;
 var $399=_hio_seek($397,$398,0);
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 $i=0;
 label=77;break;
 case 77: 
 var $403=$i;
 var $404=$mod;
 var $405=(($404+128)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=($403|0)<($406|0);
 if($407){label=78;break;}else{label=140;break;}
 case 78: 
 var $409=$3;
 var $410=_hio_read8($409);
 var $411=($410&255);
 $size3=$411;
 var $412=$3;
 var $413=_hio_tell($412);
 $pos=$413;
 var $414=$3;
 var $415=_hio_read8($414);
 $chn5=$415;
 var $416=$chn5;
 var $417=($416&255);
 var $418=$mod;
 var $419=(($418+136)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=($417|0)>($420|0);
 if($421){label=79;break;}else{label=80;break;}
 case 79: 
 $1=-1;
 label=238;break;
 case 80: 
 var $424=$3;
 var $425=_hio_read8($424);
 var $426=($425&255);
 var $427=((($426)+(1))|0);
 $rows=$427;
 var $428=$3;
 var $429=_hio_read16b($428);
 var $430=($429&65535);
 $plen4=$430;
 $j=0;
 label=81;break;
 case 81: 
 var $432=$j;
 var $433=($432|0)<4;
 if($433){label=82;break;}else{label=87;break;}
 case 82: 
 var $435=$rows;
 var $436=$j;
 var $437=($436<<6);
 var $438=($435|0)>($437|0);
 if($438){label=83;break;}else{label=84;break;}
 case 83: 
 var $440=$3;
 var $441=_hio_read8($440);
 var $442=$j;
 var $443=(($ctl+$442)|0);
 HEAP8[($443)]=$441;
 label=85;break;
 case 84: 
 label=87;break;
 case 85: 
 label=86;break;
 case 86: 
 var $447=$j;
 var $448=((($447)+(1))|0);
 $j=$448;
 label=81;break;
 case 87: 
 var $450=$mod;
 var $451=$i;
 var $452=$rows;
 var $453=_pattern_tracks_alloc($450,$451,$452);
 var $454=($453|0)<0;
 if($454){label=88;break;}else{label=89;break;}
 case 88: 
 $1=-1;
 label=238;break;
 case 89: 
 $y=0;
 label=90;break;
 case 90: 
 var $458=$y;
 var $459=($458|0)<8;
 if($459){label=91;break;}else{label=93;break;}
 case 91: 
 var $461=$y;
 var $462=(($linemask+($461<<2))|0);
 HEAP32[(($462)>>2)]=0;
 var $463=$y;
 var $464=(($fxmask+($463<<2))|0);
 HEAP32[(($464)>>2)]=0;
 label=92;break;
 case 92: 
 var $466=$y;
 var $467=((($466)+(1))|0);
 $y=$467;
 label=90;break;
 case 93: 
 $num_masks=0;
 $y=0;
 label=94;break;
 case 94: 
 var $470=$y;
 var $471=($470|0)<8;
 if($471){label=95;break;}else{label=112;break;}
 case 95: 
 var $473=$rows;
 var $474=$y;
 var $475=($474<<5);
 var $476=($473|0)>($475|0);
 if($476){label=96;break;}else{label=109;break;}
 case 96: 
 var $478=$y;
 var $479=(((($478|0))/(2))&-1);
 var $480=(($ctl+$479)|0);
 var $481=HEAP8[($480)];
 var $482=($481&255);
 $c6=$482;
 var $483=$y;
 var $484=(((($483|0))%(2))&-1);
 var $485=($484<<2);
 $s=$485;
 var $486=$c6;
 var $487=$s;
 var $488=128>>($487|0);
 var $489=$486&$488;
 var $490=($489|0)!=0;
 if($490){label=97;break;}else{label=98;break;}
 case 97: 
 var $505=-1;label=102;break;
 case 98: 
 var $493=$c6;
 var $494=$s;
 var $495=64>>($494|0);
 var $496=$493&$495;
 var $497=($496|0)!=0;
 if($497){label=99;break;}else{label=100;break;}
 case 99: 
 var $503=0;label=101;break;
 case 100: 
 var $500=$3;
 var $501=_hio_read32b($500);
 var $503=$501;label=101;break;
 case 101: 
 var $503;
 var $505=$503;label=102;break;
 case 102: 
 var $505;
 var $506=$y;
 var $507=(($linemask+($506<<2))|0);
 HEAP32[(($507)>>2)]=$505;
 var $508=$c6;
 var $509=$s;
 var $510=32>>($509|0);
 var $511=$508&$510;
 var $512=($511|0)!=0;
 if($512){label=103;break;}else{label=104;break;}
 case 103: 
 var $527=-1;label=108;break;
 case 104: 
 var $515=$c6;
 var $516=$s;
 var $517=16>>($516|0);
 var $518=$515&$517;
 var $519=($518|0)!=0;
 if($519){label=105;break;}else{label=106;break;}
 case 105: 
 var $525=0;label=107;break;
 case 106: 
 var $522=$3;
 var $523=_hio_read32b($522);
 var $525=$523;label=107;break;
 case 107: 
 var $525;
 var $527=$525;label=108;break;
 case 108: 
 var $527;
 var $528=$y;
 var $529=(($fxmask+($528<<2))|0);
 HEAP32[(($529)>>2)]=$527;
 var $530=$num_masks;
 var $531=((($530)+(1))|0);
 $num_masks=$531;
 label=110;break;
 case 109: 
 label=112;break;
 case 110: 
 label=111;break;
 case 111: 
 var $535=$y;
 var $536=((($535)+(1))|0);
 $y=$536;
 label=94;break;
 case 112: 
 var $538=$3;
 var $539=$pos;
 var $540=$size3;
 var $541=((($539)+($540))|0);
 var $542=_hio_seek($538,$541,0);
 var $543=$3;
 _stream_init($543,$stream);
 $y=0;
 label=113;break;
 case 113: 
 var $545=$y;
 var $546=$num_masks;
 var $547=($545|0)<($546|0);
 if($547){label=114;break;}else{label=138;break;}
 case 114: 
 $j=0;
 label=115;break;
 case 115: 
 var $550=$j;
 var $551=($550|0)<32;
 if($551){label=116;break;}else{label=136;break;}
 case 116: 
 var $553=$y;
 var $554=($553<<5);
 var $555=$j;
 var $556=((($554)+($555))|0);
 $line=$556;
 var $557=$y;
 var $558=(($linemask+($557<<2))|0);
 var $559=HEAP32[(($558)>>2)];
 var $560=$559&-2147483648;
 var $561=($560|0)!=0;
 if($561){label=117;break;}else{label=126;break;}
 case 117: 
 var $563=$chn5;
 var $564=($563&255);
 var $565=_stream_read_aligned16($stream,$564);
 var $566=($565&65535);
 $chmsk=$566;
 $k=0;
 label=118;break;
 case 118: 
 var $568=$k;
 var $569=$chn5;
 var $570=($569&255);
 var $571=($568|0)<($570|0);
 if($571){label=119;break;}else{label=125;break;}
 case 119: 
 var $573=$line;
 var $574=$k;
 var $575=$i;
 var $576=$2;
 var $577=(($576)|0);
 var $578=(($577+168)|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=(($579+($575<<2))|0);
 var $581=HEAP32[(($580)>>2)];
 var $582=(($581+4)|0);
 var $583=(($582+($574<<2))|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=$2;
 var $586=(($585)|0);
 var $587=(($586+172)|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=(($588+($584<<2))|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590+4)|0);
 var $592=(($591+($573<<3))|0);
 $event=$592;
 var $593=$chmsk;
 var $594=$593&32768;
 var $595=($594|0)!=0;
 if($595){label=120;break;}else{label=123;break;}
 case 120: 
 var $597=_stream_read12($stream);
 $x=$597;
 var $598=$x;
 var $599=$598>>>4;
 var $600=(($599)&255);
 var $601=$event;
 var $602=(($601)|0);
 HEAP8[($602)]=$600;
 var $603=$event;
 var $604=(($603)|0);
 var $605=HEAP8[($604)];
 var $606=(($605<<24)>>24)!=0;
 if($606){label=121;break;}else{label=122;break;}
 case 121: 
 var $608=$event;
 var $609=(($608)|0);
 var $610=HEAP8[($609)];
 var $611=($610&255);
 var $612=((($611)+(48))|0);
 var $613=(($612)&255);
 HEAP8[($609)]=$613;
 label=122;break;
 case 122: 
 var $615=$x;
 var $616=$615&15;
 var $617=(($616)&255);
 var $618=$event;
 var $619=(($618+1)|0);
 HEAP8[($619)]=$617;
 label=123;break;
 case 123: 
 label=124;break;
 case 124: 
 var $622=$k;
 var $623=((($622)+(1))|0);
 $k=$623;
 var $624=$chmsk;
 var $625=$624<<1;
 $chmsk=$625;
 label=118;break;
 case 125: 
 label=126;break;
 case 126: 
 var $628=$y;
 var $629=(($fxmask+($628<<2))|0);
 var $630=HEAP32[(($629)>>2)];
 var $631=$630&-2147483648;
 var $632=($631|0)!=0;
 if($632){label=127;break;}else{label=134;break;}
 case 127: 
 var $634=$chn5;
 var $635=($634&255);
 var $636=_stream_read_aligned16($stream,$635);
 var $637=($636&65535);
 $chmsk=$637;
 $k=0;
 label=128;break;
 case 128: 
 var $639=$k;
 var $640=$chn5;
 var $641=($640&255);
 var $642=($639|0)<($641|0);
 if($642){label=129;break;}else{label=133;break;}
 case 129: 
 var $644=$line;
 var $645=$k;
 var $646=$i;
 var $647=$2;
 var $648=(($647)|0);
 var $649=(($648+168)|0);
 var $650=HEAP32[(($649)>>2)];
 var $651=(($650+($646<<2))|0);
 var $652=HEAP32[(($651)>>2)];
 var $653=(($652+4)|0);
 var $654=(($653+($645<<2))|0);
 var $655=HEAP32[(($654)>>2)];
 var $656=$2;
 var $657=(($656)|0);
 var $658=(($657+172)|0);
 var $659=HEAP32[(($658)>>2)];
 var $660=(($659+($655<<2))|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=(($661+4)|0);
 var $663=(($662+($644<<3))|0);
 $event=$663;
 var $664=$chmsk;
 var $665=$664&32768;
 var $666=($665|0)!=0;
 if($666){label=130;break;}else{label=131;break;}
 case 130: 
 var $668=_stream_read12($stream);
 $x=$668;
 var $669=$x;
 var $670=$669>>>8;
 var $671=(($670)&255);
 var $672=$event;
 var $673=(($672+3)|0);
 HEAP8[($673)]=$671;
 var $674=$x;
 var $675=$674&255;
 var $676=(($675)&255);
 var $677=$event;
 var $678=(($677+4)|0);
 HEAP8[($678)]=$676;
 var $679=$event;
 _fix_effect380($679);
 label=131;break;
 case 131: 
 label=132;break;
 case 132: 
 var $682=$k;
 var $683=((($682)+(1))|0);
 $k=$683;
 var $684=$chmsk;
 var $685=$684<<1;
 $chmsk=$685;
 label=128;break;
 case 133: 
 label=134;break;
 case 134: 
 var $688=$y;
 var $689=(($linemask+($688<<2))|0);
 var $690=HEAP32[(($689)>>2)];
 var $691=$690<<1;
 HEAP32[(($689)>>2)]=$691;
 var $692=$y;
 var $693=(($fxmask+($692<<2))|0);
 var $694=HEAP32[(($693)>>2)];
 var $695=$694<<1;
 HEAP32[(($693)>>2)]=$695;
 label=135;break;
 case 135: 
 var $697=$j;
 var $698=((($697)+(1))|0);
 $j=$698;
 label=115;break;
 case 136: 
 label=137;break;
 case 137: 
 var $701=$y;
 var $702=((($701)+(1))|0);
 $y=$702;
 label=113;break;
 case 138: 
 var $704=$3;
 var $705=$pos;
 var $706=$size3;
 var $707=((($705)+($706))|0);
 var $708=$plen4;
 var $709=((($707)+($708))|0);
 var $710=_hio_seek($704,$709,0);
 label=139;break;
 case 139: 
 var $712=$i;
 var $713=((($712)+(1))|0);
 $i=$713;
 label=77;break;
 case 140: 
 var $715=$num_ins;
 var $716=$mod;
 var $717=(($716+140)|0);
 HEAP32[(($717)>>2)]=$715;
 var $718=$2;
 var $719=_med_new_module_extras($718);
 var $720=($719|0)!=0;
 if($720){label=141;break;}else{label=142;break;}
 case 141: 
 $1=-1;
 label=238;break;
 case 142: 
 var $723=$3;
 var $724=_hio_read32b($723);
 var $725$0=$724;
 var $725$1=0;
 var $st$25$0=(($mask)|0);
 HEAP32[(($st$25$0)>>2)]=$725$0;
 var $st$26$1=(($mask+4)|0);
 HEAP32[(($st$26$1)>>2)]=$725$1;
 var $ld$27$0=(($mask)|0);
 var $726$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($mask+4)|0);
 var $726$1=HEAP32[(($ld$28$1)>>2)];
 var $$etemp$29$0=1296385110;
 var $$etemp$29$1=0;
 var $727=(($726$0|0) == ($$etemp$29$0|0)) & (($726$1|0) == ($$etemp$29$1|0));
 if($727){label=143;break;}else{label=146;break;}
 case 143: 
 var $729=$mod;
 var $730=(($729+144)|0);
 HEAP32[(($730)>>2)]=0;
 var $731=$mod;
 var $732=_instrument_init($731);
 var $733=($732|0)<0;
 if($733){label=144;break;}else{label=145;break;}
 case 144: 
 $1=-1;
 label=238;break;
 case 145: 
 var $736=$3;
 var $737=_hio_seek($736,-4,1);
 label=219;break;
 case 146: 
 var $ld$30$0=(($mask)|0);
 var $739$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($mask+4)|0);
 var $739$1=HEAP32[(($ld$31$1)>>2)];
 var $740$0=0;
 var $740$1=$739$0;
 var $st$32$0=(($mask)|0);
 HEAP32[(($st$32$0)>>2)]=$740$0;
 var $st$33$1=(($mask+4)|0);
 HEAP32[(($st$33$1)>>2)]=$740$1;
 var $741=$3;
 var $742=_hio_read32b($741);
 var $743$0=$742;
 var $743$1=0;
 var $ld$34$0=(($mask)|0);
 var $744$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($mask+4)|0);
 var $744$1=HEAP32[(($ld$35$1)>>2)];
 var $745$0=$744$0|$743$0;
 var $745$1=$744$1|$743$1;
 var $st$36$0=(($mask)|0);
 HEAP32[(($st$36$0)>>2)]=$745$0;
 var $st$37$1=(($mask+4)|0);
 HEAP32[(($st$37$1)>>2)]=$745$1;
 var $ld$38$0=(($mask)|0);
 var $746$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($mask+4)|0);
 var $746$1=HEAP32[(($ld$39$1)>>2)];
 var $747$0=($746$0<<1)|(0>>>31);
 var $747$1=($746$1<<1)|($746$0>>>31);
 var $st$40$0=(($mask)|0);
 HEAP32[(($st$40$0)>>2)]=$747$0;
 var $st$41$1=(($mask+4)|0);
 HEAP32[(($st$41$1)>>2)]=$747$1;
 var $748=$3;
 var $749=_hio_tell($748);
 $pos=$749;
 $num_smp=0;
 var $ld$42$0=(($mask)|0);
 var $750$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($mask+4)|0);
 var $750$1=HEAP32[(($ld$43$1)>>2)];
 var $st$44$0=(($_mask)|0);
 HEAP32[(($st$44$0)>>2)]=$750$0;
 var $st$45$1=(($_mask+4)|0);
 HEAP32[(($st$45$1)>>2)]=$750$1;
 $i=0;
 label=147;break;
 case 147: 
 var $ld$46$0=(($_mask)|0);
 var $752$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($_mask+4)|0);
 var $752$1=HEAP32[(($ld$47$1)>>2)];
 var $$etemp$48$0=0;
 var $$etemp$48$1=0;
 var $753=(($752$0|0) != ($$etemp$48$0|0)) | (($752$1|0) != ($$etemp$48$1|0));
 if($753){label=148;break;}else{var $758=0;label=149;break;}
 case 148: 
 var $755=$i;
 var $756=($755|0)<64;
 var $758=$756;label=149;break;
 case 149: 
 var $758;
 if($758){label=150;break;}else{label=160;break;}
 case 150: 
 var $ld$49$0=(($_mask)|0);
 var $760$0=HEAP32[(($ld$49$0)>>2)];
 var $ld$50$1=(($_mask+4)|0);
 var $760$1=HEAP32[(($ld$50$1)>>2)];
 var $$etemp$51$0=0;
 var $$etemp$51$1=0;
 var $761=(($760$1|0) > ($$etemp$51$1|0)) | (((($760$1|0) == ($$etemp$51$1|0) & ($760$0>>>0) >  ($$etemp$51$0>>>0))));
 if($761){label=151;break;}else{label=152;break;}
 case 151: 
 label=159;break;
 case 152: 
 var $764=$3;
 var $765=_hio_read32b($764);
 $_len=$765;
 var $766=$3;
 var $767=_hio_read16b($766);
 var $768=(($767<<16)>>16);
 $_type=$768;
 var $769=$3;
 var $770=_hio_tell($769);
 $_pos=$770;
 var $771=$_type;
 var $772=($771|0)==0;
 if($772){label=154;break;}else{label=153;break;}
 case 153: 
 var $774=$_type;
 var $775=($774|0)==-2;
 if($775){label=154;break;}else{label=155;break;}
 case 154: 
 var $777=$num_smp;
 var $778=((($777)+(1))|0);
 $num_smp=$778;
 label=158;break;
 case 155: 
 var $780=$_type;
 var $781=($780|0)==-1;
 if($781){label=156;break;}else{label=157;break;}
 case 156: 
 var $783=$3;
 var $784=_hio_seek($783,20,1);
 var $785=$3;
 var $786=_hio_read16b($785);
 var $787=($786&65535);
 var $788=$num_smp;
 var $789=((($788)+($787))|0);
 $num_smp=$789;
 label=157;break;
 case 157: 
 label=158;break;
 case 158: 
 var $792=$3;
 var $793=$_pos;
 var $794=$_len;
 var $795=((($793)+($794))|0);
 var $796=_hio_seek($792,$795,0);
 label=159;break;
 case 159: 
 var $798=$i;
 var $799=((($798)+(1))|0);
 $i=$799;
 var $ld$52$0=(($_mask)|0);
 var $800$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($_mask+4)|0);
 var $800$1=HEAP32[(($ld$53$1)>>2)];
 var $801$0=($800$0<<1)|(0>>>31);
 var $801$1=($800$1<<1)|($800$0>>>31);
 var $st$54$0=(($_mask)|0);
 HEAP32[(($st$54$0)>>2)]=$801$0;
 var $st$55$1=(($_mask+4)|0);
 HEAP32[(($st$55$1)>>2)]=$801$1;
 label=147;break;
 case 160: 
 var $803=$3;
 var $804=$pos;
 var $805=_hio_seek($803,$804,0);
 var $806=$num_smp;
 var $807=$mod;
 var $808=(($807+144)|0);
 HEAP32[(($808)>>2)]=$806;
 var $809=$mod;
 var $810=_instrument_init($809);
 var $811=($810|0)<0;
 if($811){label=161;break;}else{label=162;break;}
 case 161: 
 $1=-1;
 label=238;break;
 case 162: 
 label=163;break;
 case 163: 
 label=164;break;
 case 164: 
 $smp_idx=0;
 $i=0;
 label=165;break;
 case 165: 
 var $ld$56$0=(($mask)|0);
 var $817$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($mask+4)|0);
 var $817$1=HEAP32[(($ld$57$1)>>2)];
 var $$etemp$58$0=0;
 var $$etemp$58$1=0;
 var $818=(($817$0|0) != ($$etemp$58$0|0)) | (($817$1|0) != ($$etemp$58$1|0));
 if($818){label=166;break;}else{var $824=0;label=167;break;}
 case 166: 
 var $820=$i;
 var $821=$num_ins;
 var $822=($820|0)<($821|0);
 var $824=$822;label=167;break;
 case 167: 
 var $824;
 if($824){label=168;break;}else{label=218;break;}
 case 168: 
 var $ld$59$0=(($mask)|0);
 var $826$0=HEAP32[(($ld$59$0)>>2)];
 var $ld$60$1=(($mask+4)|0);
 var $826$1=HEAP32[(($ld$60$1)>>2)];
 var $$etemp$61$0=0;
 var $$etemp$61$1=0;
 var $827=(($826$1|0) > ($$etemp$61$1|0)) | (((($826$1|0) == ($$etemp$61$1|0) & ($826$0>>>0) >  ($$etemp$61$0>>>0))));
 if($827){label=169;break;}else{label=170;break;}
 case 169: 
 label=217;break;
 case 170: 
 var $830=$i;
 var $831=$mod;
 var $832=(($831+176)|0);
 var $833=HEAP32[(($832)>>2)];
 var $834=(($833+((($830)*(764))&-1))|0);
 $xxi=$834;
 var $835=$3;
 var $836=_hio_read32b($835);
 $length=$836;
 var $837=$3;
 var $838=_hio_read16b($837);
 var $839=(($838<<16)>>16);
 $type=$839;
 var $840=$xxi;
 var $841=(($840)|0);
 var $842=(($841)|0);
 var $843=$i;
 var $844=(($temp_inst+((($843)*(48))&-1))|0);
 var $845=(($844)|0);
 var $846=(($845)|0);
 var $847=_strlcpy($842,$846,32);
 label=171;break;
 case 171: 
 label=172;break;
 case 172: 
 var $850=$type;
 var $851=($850|0)==-2;
 if($851){label=173;break;}else{label=184;break;}
 case 173: 
 var $853=$3;
 var $854=_hio_tell($853);
 $pos9=$854;
 var $855=$3;
 var $856=_hio_read32b($855);
 var $857=$3;
 var $858=_hio_read16b($857);
 var $859=$3;
 var $860=_hio_read16b($859);
 var $861=$3;
 var $862=_hio_read16b($861);
 var $863=$3;
 var $864=_hio_read16b($863);
 var $865=(($synth+10)|0);
 HEAP16[(($865)>>1)]=$864;
 var $866=$3;
 var $867=_hio_read16b($866);
 var $868=(($synth+12)|0);
 HEAP16[(($868)>>1)]=$867;
 var $869=$3;
 var $870=_hio_read16b($869);
 var $871=(($synth+14)|0);
 HEAP16[(($871)>>1)]=$870;
 var $872=$3;
 var $873=_hio_read16b($872);
 var $874=(($synth+16)|0);
 HEAP16[(($874)>>1)]=$873;
 var $875=$3;
 var $876=_hio_read8($875);
 var $877=(($synth+18)|0);
 HEAP8[($877)]=$876;
 var $878=$3;
 var $879=_hio_read8($878);
 var $880=(($synth+19)|0);
 HEAP8[($880)]=$879;
 var $881=$3;
 var $882=_hio_read16b($881);
 var $883=(($synth+20)|0);
 HEAP16[(($883)>>1)]=$882;
 var $884=(($synth+22)|0);
 var $885=(($884)|0);
 var $886=(($synth+14)|0);
 var $887=HEAP16[(($886)>>1)];
 var $888=($887&65535);
 var $889=$3;
 var $890=_hio_read($885,1,$888,$889);
 var $891=(($synth+150)|0);
 var $892=(($891)|0);
 var $893=(($synth+16)|0);
 var $894=HEAP16[(($893)>>1)];
 var $895=($894&65535);
 var $896=$3;
 var $897=_hio_read($892,1,$895,$896);
 var $898=$3;
 var $899=$pos9;
 var $900=$3;
 var $901=_hio_read32b($900);
 var $902=((($899)+($901))|0);
 var $903=_hio_seek($898,$902,0);
 var $904=$3;
 var $905=_hio_read32b($904);
 $length7=$905;
 var $906=$3;
 var $907=_hio_read16b($906);
 var $908=($907&65535);
 $type8=$908;
 var $909=$xxi;
 var $910=_med_new_instrument_extras($909);
 var $911=($910|0)!=0;
 if($911){label=174;break;}else{label=175;break;}
 case 174: 
 $1=-1;
 label=238;break;
 case 175: 
 var $914=$xxi;
 var $915=(($914+36)|0);
 HEAP32[(($915)>>2)]=1;
 var $916=$mod;
 var $917=$i;
 var $918=_subinstrument_alloc($916,$917,1);
 var $919=($918|0)<0;
 if($919){label=176;break;}else{label=177;break;}
 case 176: 
 $1=-1;
 label=238;break;
 case 177: 
 var $922=$xxi;
 var $923=(($922+756)|0);
 var $924=HEAP32[(($923)>>2)];
 var $925=(($924)|0);
 $sub=$925;
 var $926=(($synth+18)|0);
 var $927=HEAP8[($926)];
 var $928=($927&255);
 var $929=$xxi;
 var $930=(($929+760)|0);
 var $931=HEAP32[(($930)>>2)];
 var $932=$931;
 var $933=(($932+4)|0);
 HEAP32[(($933)>>2)]=$928;
 var $934=(($synth+19)|0);
 var $935=HEAP8[($934)];
 var $936=($935&255);
 var $937=$xxi;
 var $938=(($937+760)|0);
 var $939=HEAP32[(($938)>>2)];
 var $940=$939;
 var $941=(($940+8)|0);
 HEAP32[(($941)>>2)]=$936;
 var $942=$sub;
 var $943=(($942+8)|0);
 HEAP32[(($943)>>2)]=128;
 var $944=$i;
 var $945=(($temp_inst+((($944)*(48))&-1))|0);
 var $946=(($945+40)|0);
 var $947=HEAP32[(($946)>>2)];
 var $948=$sub;
 var $949=(($948)|0);
 HEAP32[(($949)>>2)]=$947;
 var $950=$i;
 var $951=(($temp_inst+((($950)*(48))&-1))|0);
 var $952=(($951+44)|0);
 var $953=HEAP32[(($952)>>2)];
 var $954=$sub;
 var $955=(($954+12)|0);
 HEAP32[(($955)>>2)]=$953;
 var $956=$smp_idx;
 var $957=$sub;
 var $958=(($957+40)|0);
 HEAP32[(($958)>>2)]=$956;
 var $959=$sub;
 var $960=(($959+16)|0);
 HEAP32[(($960)>>2)]=0;
 var $961=$smp_idx;
 var $962=$mod;
 var $963=(($962+180)|0);
 var $964=HEAP32[(($963)>>2)];
 var $965=(($964+((($961)*(52))&-1))|0);
 $xxs=$965;
 var $966=$length7;
 var $967=$xxs;
 var $968=(($967+32)|0);
 HEAP32[(($968)>>2)]=$966;
 var $969=$i;
 var $970=(($temp_inst+((($969)*(48))&-1))|0);
 var $971=(($970+32)|0);
 var $972=HEAP32[(($971)>>2)];
 var $973=$xxs;
 var $974=(($973+36)|0);
 HEAP32[(($974)>>2)]=$972;
 var $975=$i;
 var $976=(($temp_inst+((($975)*(48))&-1))|0);
 var $977=(($976+36)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$xxs;
 var $980=(($979+40)|0);
 HEAP32[(($980)>>2)]=$978;
 var $981=$i;
 var $982=(($temp_inst+((($981)*(48))&-1))|0);
 var $983=(($982+36)|0);
 var $984=HEAP32[(($983)>>2)];
 var $985=($984|0)>2;
 var $986=($985?2:0);
 var $987=$xxs;
 var $988=(($987+44)|0);
 HEAP32[(($988)>>2)]=$986;
 label=178;break;
 case 178: 
 label=179;break;
 case 179: 
 var $991=$2;
 var $992=$3;
 var $993=$xxs;
 var $994=_load_sample($991,$992,0,$993,0);
 var $995=($994|0)<0;
 if($995){label=180;break;}else{label=181;break;}
 case 180: 
 $1=-1;
 label=238;break;
 case 181: 
 var $998=$smp_idx;
 var $999=((($998)+(1))|0);
 $smp_idx=$999;
 var $1000=$2;
 var $1001=$i;
 var $1002=_mmd_alloc_tables($1000,$1001,$synth);
 var $1003=($1002|0)!=0;
 if($1003){label=182;break;}else{label=183;break;}
 case 182: 
 $1=-1;
 label=238;break;
 case 183: 
 label=217;break;
 case 184: 
 var $1007=$type;
 var $1008=($1007|0)==-1;
 if($1008){label=185;break;}else{label=208;break;}
 case 185: 
 var $1010=$3;
 var $1011=_hio_tell($1010);
 $pos10=$1011;
 var $1012=$3;
 var $1013=_hio_read32b($1012);
 var $1014=$3;
 var $1015=_hio_read16b($1014);
 var $1016=$3;
 var $1017=_hio_read16b($1016);
 var $1018=$3;
 var $1019=_hio_read16b($1018);
 var $1020=$3;
 var $1021=_hio_read16b($1020);
 var $1022=(($synth+10)|0);
 HEAP16[(($1022)>>1)]=$1021;
 var $1023=$3;
 var $1024=_hio_read16b($1023);
 var $1025=(($synth+12)|0);
 HEAP16[(($1025)>>1)]=$1024;
 var $1026=$3;
 var $1027=_hio_read16b($1026);
 var $1028=(($synth+14)|0);
 HEAP16[(($1028)>>1)]=$1027;
 var $1029=$3;
 var $1030=_hio_read16b($1029);
 var $1031=(($synth+16)|0);
 HEAP16[(($1031)>>1)]=$1030;
 var $1032=$3;
 var $1033=_hio_read8($1032);
 var $1034=(($synth+18)|0);
 HEAP8[($1034)]=$1033;
 var $1035=$3;
 var $1036=_hio_read8($1035);
 var $1037=(($synth+19)|0);
 HEAP8[($1037)]=$1036;
 var $1038=$3;
 var $1039=_hio_read16b($1038);
 var $1040=(($synth+20)|0);
 HEAP16[(($1040)>>1)]=$1039;
 var $1041=(($synth+22)|0);
 var $1042=(($1041)|0);
 var $1043=(($synth+14)|0);
 var $1044=HEAP16[(($1043)>>1)];
 var $1045=($1044&65535);
 var $1046=$3;
 var $1047=_hio_read($1042,1,$1045,$1046);
 var $1048=(($synth+150)|0);
 var $1049=(($1048)|0);
 var $1050=(($synth+16)|0);
 var $1051=HEAP16[(($1050)>>1)];
 var $1052=($1051&65535);
 var $1053=$3;
 var $1054=_hio_read($1049,1,$1052,$1053);
 var $1055=(($synth+20)|0);
 var $1056=HEAP16[(($1055)>>1)];
 var $1057=($1056&65535);
 var $1058=($1057|0)==65535;
 if($1058){label=186;break;}else{label=187;break;}
 case 186: 
 label=217;break;
 case 187: 
 var $1061=(($synth+20)|0);
 var $1062=HEAP16[(($1061)>>1)];
 var $1063=($1062&65535);
 var $1064=($1063|0)>64;
 if($1064){label=188;break;}else{label=189;break;}
 case 188: 
 $1=-1;
 label=238;break;
 case 189: 
 $j=0;
 label=190;break;
 case 190: 
 var $1068=$j;
 var $1069=(($synth+20)|0);
 var $1070=HEAP16[(($1069)>>1)];
 var $1071=($1070&65535);
 var $1072=($1068|0)<($1071|0);
 if($1072){label=191;break;}else{label=193;break;}
 case 191: 
 var $1074=$3;
 var $1075=_hio_read32b($1074);
 var $1076=$j;
 var $1077=(($synth+280)|0);
 var $1078=(($1077+($1076<<2))|0);
 HEAP32[(($1078)>>2)]=$1075;
 label=192;break;
 case 192: 
 var $1080=$j;
 var $1081=((($1080)+(1))|0);
 $j=$1081;
 label=190;break;
 case 193: 
 label=194;break;
 case 194: 
 label=195;break;
 case 195: 
 var $1085=$i;
 var $1086=$mod;
 var $1087=(($1086+176)|0);
 var $1088=HEAP32[(($1087)>>2)];
 var $1089=(($1088+((($1085)*(764))&-1))|0);
 var $1090=_med_new_instrument_extras($1089);
 var $1091=($1090|0)!=0;
 if($1091){label=196;break;}else{label=197;break;}
 case 196: 
 $1=-1;
 label=238;break;
 case 197: 
 var $1094=(($synth+20)|0);
 var $1095=HEAP16[(($1094)>>1)];
 var $1096=($1095&65535);
 var $1097=$i;
 var $1098=$mod;
 var $1099=(($1098+176)|0);
 var $1100=HEAP32[(($1099)>>2)];
 var $1101=(($1100+((($1097)*(764))&-1))|0);
 var $1102=(($1101+36)|0);
 HEAP32[(($1102)>>2)]=$1096;
 var $1103=$mod;
 var $1104=$i;
 var $1105=(($synth+20)|0);
 var $1106=HEAP16[(($1105)>>1)];
 var $1107=($1106&65535);
 var $1108=_subinstrument_alloc($1103,$1104,$1107);
 var $1109=($1108|0)<0;
 if($1109){label=198;break;}else{label=199;break;}
 case 198: 
 $1=-1;
 label=238;break;
 case 199: 
 var $1112=(($synth+18)|0);
 var $1113=HEAP8[($1112)];
 var $1114=($1113&255);
 var $1115=$xxi;
 var $1116=(($1115+760)|0);
 var $1117=HEAP32[(($1116)>>2)];
 var $1118=$1117;
 var $1119=(($1118+4)|0);
 HEAP32[(($1119)>>2)]=$1114;
 var $1120=(($synth+19)|0);
 var $1121=HEAP8[($1120)];
 var $1122=($1121&255);
 var $1123=$xxi;
 var $1124=(($1123+760)|0);
 var $1125=HEAP32[(($1124)>>2)];
 var $1126=$1125;
 var $1127=(($1126+8)|0);
 HEAP32[(($1127)>>2)]=$1122;
 $j=0;
 label=200;break;
 case 200: 
 var $1129=$j;
 var $1130=(($synth+20)|0);
 var $1131=HEAP16[(($1130)>>1)];
 var $1132=($1131&65535);
 var $1133=($1129|0)<($1132|0);
 if($1133){label=201;break;}else{label=205;break;}
 case 201: 
 var $1135=$j;
 var $1136=$xxi;
 var $1137=(($1136+756)|0);
 var $1138=HEAP32[(($1137)>>2)];
 var $1139=(($1138+($1135<<6))|0);
 $sub=$1139;
 var $1140=$sub;
 var $1141=(($1140+8)|0);
 HEAP32[(($1141)>>2)]=128;
 var $1142=$i;
 var $1143=(($temp_inst+((($1142)*(48))&-1))|0);
 var $1144=(($1143+40)|0);
 var $1145=HEAP32[(($1144)>>2)];
 var $1146=$sub;
 var $1147=(($1146)|0);
 HEAP32[(($1147)>>2)]=$1145;
 var $1148=$i;
 var $1149=(($temp_inst+((($1148)*(48))&-1))|0);
 var $1150=(($1149+44)|0);
 var $1151=HEAP32[(($1150)>>2)];
 var $1152=((($1151)-(24))|0);
 var $1153=$sub;
 var $1154=(($1153+12)|0);
 HEAP32[(($1154)>>2)]=$1152;
 var $1155=$smp_idx;
 var $1156=$sub;
 var $1157=(($1156+40)|0);
 HEAP32[(($1157)>>2)]=$1155;
 var $1158=$sub;
 var $1159=(($1158+16)|0);
 HEAP32[(($1159)>>2)]=0;
 var $1160=$3;
 var $1161=$pos10;
 var $1162=$j;
 var $1163=(($synth+280)|0);
 var $1164=(($1163+($1162<<2))|0);
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=((($1161)+($1165))|0);
 var $1167=_hio_seek($1160,$1166,0);
 var $1168=$smp_idx;
 var $1169=$mod;
 var $1170=(($1169+180)|0);
 var $1171=HEAP32[(($1170)>>2)];
 var $1172=(($1171+((($1168)*(52))&-1))|0);
 $xxs=$1172;
 var $1173=$3;
 var $1174=_hio_read16b($1173);
 var $1175=($1174&65535);
 var $1176=($1175<<1);
 var $1177=$xxs;
 var $1178=(($1177+32)|0);
 HEAP32[(($1178)>>2)]=$1176;
 var $1179=$xxs;
 var $1180=(($1179+36)|0);
 HEAP32[(($1180)>>2)]=0;
 var $1181=$xxs;
 var $1182=(($1181+32)|0);
 var $1183=HEAP32[(($1182)>>2)];
 var $1184=$xxs;
 var $1185=(($1184+40)|0);
 HEAP32[(($1185)>>2)]=$1183;
 var $1186=$xxs;
 var $1187=(($1186+44)|0);
 HEAP32[(($1187)>>2)]=2;
 var $1188=$2;
 var $1189=$3;
 var $1190=$xxs;
 var $1191=_load_sample($1188,$1189,0,$1190,0);
 var $1192=($1191|0)<0;
 if($1192){label=202;break;}else{label=203;break;}
 case 202: 
 $1=-1;
 label=238;break;
 case 203: 
 var $1195=$smp_idx;
 var $1196=((($1195)+(1))|0);
 $smp_idx=$1196;
 label=204;break;
 case 204: 
 var $1198=$j;
 var $1199=((($1198)+(1))|0);
 $j=$1199;
 label=200;break;
 case 205: 
 var $1201=$2;
 var $1202=$i;
 var $1203=_mmd_alloc_tables($1201,$1202,$synth);
 var $1204=($1203|0)!=0;
 if($1204){label=206;break;}else{label=207;break;}
 case 206: 
 $1=-1;
 label=238;break;
 case 207: 
 var $1207=$3;
 var $1208=$pos10;
 var $1209=$length;
 var $1210=((($1208)+($1209))|0);
 var $1211=_hio_seek($1207,$1210,0);
 label=217;break;
 case 208: 
 var $1213=$type;
 var $1214=($1213|0)!=0;
 if($1214){label=209;break;}else{label=210;break;}
 case 209: 
 var $1216=$3;
 var $1217=$length;
 var $1218=_hio_seek($1216,$1217,1);
 label=217;break;
 case 210: 
 var $1220=$xxi;
 var $1221=(($1220+36)|0);
 HEAP32[(($1221)>>2)]=1;
 var $1222=$mod;
 var $1223=$i;
 var $1224=_subinstrument_alloc($1222,$1223,1);
 var $1225=($1224|0)<0;
 if($1225){label=211;break;}else{label=212;break;}
 case 211: 
 $1=-1;
 label=238;break;
 case 212: 
 var $1228=$xxi;
 var $1229=(($1228+756)|0);
 var $1230=HEAP32[(($1229)>>2)];
 var $1231=(($1230)|0);
 $sub=$1231;
 var $1232=$i;
 var $1233=(($temp_inst+((($1232)*(48))&-1))|0);
 var $1234=(($1233+40)|0);
 var $1235=HEAP32[(($1234)>>2)];
 var $1236=$sub;
 var $1237=(($1236)|0);
 HEAP32[(($1237)>>2)]=$1235;
 var $1238=$sub;
 var $1239=(($1238+8)|0);
 HEAP32[(($1239)>>2)]=128;
 var $1240=$i;
 var $1241=(($temp_inst+((($1240)*(48))&-1))|0);
 var $1242=(($1241+44)|0);
 var $1243=HEAP32[(($1242)>>2)];
 var $1244=$sub;
 var $1245=(($1244+12)|0);
 HEAP32[(($1245)>>2)]=$1243;
 var $1246=$smp_idx;
 var $1247=$sub;
 var $1248=(($1247+40)|0);
 HEAP32[(($1248)>>2)]=$1246;
 var $1249=$smp_idx;
 var $1250=$mod;
 var $1251=(($1250+180)|0);
 var $1252=HEAP32[(($1251)>>2)];
 var $1253=(($1252+((($1249)*(52))&-1))|0);
 $xxs=$1253;
 var $1254=$length;
 var $1255=$xxs;
 var $1256=(($1255+32)|0);
 HEAP32[(($1256)>>2)]=$1254;
 var $1257=$i;
 var $1258=(($temp_inst+((($1257)*(48))&-1))|0);
 var $1259=(($1258+32)|0);
 var $1260=HEAP32[(($1259)>>2)];
 var $1261=$xxs;
 var $1262=(($1261+36)|0);
 HEAP32[(($1262)>>2)]=$1260;
 var $1263=$i;
 var $1264=(($temp_inst+((($1263)*(48))&-1))|0);
 var $1265=(($1264+36)|0);
 var $1266=HEAP32[(($1265)>>2)];
 var $1267=$xxs;
 var $1268=(($1267+40)|0);
 HEAP32[(($1268)>>2)]=$1266;
 var $1269=$i;
 var $1270=(($temp_inst+((($1269)*(48))&-1))|0);
 var $1271=(($1270+36)|0);
 var $1272=HEAP32[(($1271)>>2)];
 var $1273=($1272|0)>2;
 var $1274=($1273?2:0);
 var $1275=$xxs;
 var $1276=(($1275+44)|0);
 HEAP32[(($1276)>>2)]=$1274;
 label=213;break;
 case 213: 
 label=214;break;
 case 214: 
 var $1279=$2;
 var $1280=$3;
 var $1281=$xxs;
 var $1282=_load_sample($1279,$1280,0,$1281,0);
 var $1283=($1282|0)<0;
 if($1283){label=215;break;}else{label=216;break;}
 case 215: 
 $1=-1;
 label=238;break;
 case 216: 
 var $1286=$smp_idx;
 var $1287=((($1286)+(1))|0);
 $smp_idx=$1287;
 label=217;break;
 case 217: 
 var $1289=$i;
 var $1290=((($1289)+(1))|0);
 $i=$1290;
 var $ld$62$0=(($mask)|0);
 var $1291$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($mask+4)|0);
 var $1291$1=HEAP32[(($ld$63$1)>>2)];
 var $1292$0=($1291$0<<1)|(0>>>31);
 var $1292$1=($1291$1<<1)|($1291$0>>>31);
 var $st$64$0=(($mask)|0);
 HEAP32[(($st$64$0)>>2)]=$1292$0;
 var $st$65$1=(($mask+4)|0);
 HEAP32[(($st$65$1)>>2)]=$1292$1;
 label=165;break;
 case 218: 
 var $1294=$3;
 var $1295=_hio_read16b($1294);
 label=219;break;
 case 219: 
 label=220;break;
 case 220: 
 var $1298=$3;
 var $1299=_hio_eof($1298);
 var $1300=($1299|0)!=0;
 var $1301=$1300^1;
 if($1301){label=221;break;}else{label=237;break;}
 case 221: 
 var $1303=$3;
 var $1304=_hio_read32b($1303);
 $id=$1304;
 var $1305=($1304|0)<0;
 if($1305){label=222;break;}else{label=223;break;}
 case 222: 
 label=237;break;
 case 223: 
 var $1308=$3;
 var $1309=_hio_read32b($1308);
 $size11=$1309;
 var $1310=($1309|0)<0;
 if($1310){label=224;break;}else{label=225;break;}
 case 224: 
 label=237;break;
 case 225: 
 var $1313=$3;
 var $1314=_hio_tell($1313);
 $pos12=$1314;
 var $1315=$id;
 if(($1315|0)==1296385110){ label=226;break;}else if(($1315|0)==1095650895){ label=229;break;}else if(($1315|0)==1212957763){ label=235;break;}else{label=236;break;}
 case 226: 
 var $1317=$3;
 var $1318=_hio_read32b($1317);
 $ver=$1318;
 label=227;break;
 case 227: 
 label=228;break;
 case 228: 
 label=236;break;
 case 229: 
 var $1322=$size11;
 var $1323=($1322|0)<1023;
 if($1323){label=230;break;}else{label=231;break;}
 case 230: 
 var $1325=$size11;
 var $1328=$1325;label=232;break;
 case 231: 
 var $1328=1023;label=232;break;
 case 232: 
 var $1328;
 $s2=$1328;
 var $1329=(($buf)|0);
 var $1330=$s2;
 var $1331=$3;
 var $1332=_hio_read($1329,1,$1330,$1331);
 var $1333=$s2;
 var $1334=(($buf+$1333)|0);
 HEAP8[($1334)]=0;
 label=233;break;
 case 233: 
 label=234;break;
 case 234: 
 label=236;break;
 case 235: 
 label=236;break;
 case 236: 
 var $1339=$3;
 var $1340=$pos12;
 var $1341=$size11;
 var $1342=((($1340)+($1341))|0);
 var $1343=_hio_seek($1339,$1342,0);
 label=220;break;
 case 237: 
 $1=0;
 label=238;break;
 case 238: 
 var $1346=$1;
 STACKTOP=sp;return $1346;
  default: assert(0, "bad label: " + label);
 }
}
function _stream_init($f,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$s;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=(($6+8)|0);
 HEAP8[($7)]=0;
 var $8=$2;
 var $9=(($8+4)|0);
 HEAP32[(($9)>>2)]=0;
 STACKTOP=sp;return;
}
function _stream_read_aligned16($s,$bits){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$s;
 $3=$bits;
 var $4=$3;
 var $5=($4|0)<=4;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=_stream_read4($7);
 var $9=$8<<12;
 var $10=(($9)&65535);
 $1=$10;
 label=8;break;
 case 3: 
 var $12=$3;
 var $13=($12|0)<=8;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=$2;
 var $16=_stream_read8($15);
 var $17=$16<<8;
 var $18=(($17)&65535);
 $1=$18;
 label=8;break;
 case 5: 
 var $20=$3;
 var $21=($20|0)<=12;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=$2;
 var $24=_stream_read12($23);
 var $25=$24<<4;
 var $26=(($25)&65535);
 $1=$26;
 label=8;break;
 case 7: 
 var $28=$2;
 var $29=_stream_read16($28);
 $1=$29;
 label=8;break;
 case 8: 
 var $31=$1;
 STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }
}
function _stream_read12($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 $1=$s;
 var $2=$1;
 var $3=_stream_read4($2);
 $a=$3;
 var $4=$1;
 var $5=_stream_read4($4);
 $b=$5;
 var $6=$1;
 var $7=_stream_read4($6);
 $c=$7;
 var $8=$a;
 var $9=$8<<8;
 var $10=$b;
 var $11=$10<<4;
 var $12=$9|$11;
 var $13=$c;
 var $14=$12|$13;
 STACKTOP=sp;return $14;
}
function _fix_effect380($event){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$event;
 var $2=$1;
 var $3=(($2+3)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 switch(($5|0)){case 0:case 1:case 2:case 3:case 4:{ label=2;break;}case 12:{ label=3;break;}case 13:{ label=4;break;}case 15:{ label=5;break;}default:{label=25;break;}}break;
 case 2: 
 label=26;break;
 case 3: 
 var $8=$1;
 var $9=(($8+4)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&240;
 var $13=$12>>4;
 var $14=((($13)*(10))&-1);
 var $15=$1;
 var $16=(($15+4)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=$18&15;
 var $20=((($14)+($19))|0);
 var $21=(($20)&255);
 var $22=$1;
 var $23=(($22+4)|0);
 HEAP8[($23)]=$21;
 label=26;break;
 case 4: 
 var $25=$1;
 var $26=(($25+3)|0);
 HEAP8[($26)]=10;
 label=26;break;
 case 5: 
 var $28=$1;
 var $29=(($28+4)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=($31|0)==0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$1;
 var $35=(($34+3)|0);
 HEAP8[($35)]=13;
 label=7;break;
 case 7: 
 var $37=$1;
 var $38=(($37+4)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=($40|0)==255;
 if($41){label=8;break;}else{label=9;break;}
 case 8: 
 var $43=$1;
 var $44=(($43+3)|0);
 HEAP8[($44)]=0;
 var $45=$1;
 var $46=(($45+4)|0);
 HEAP8[($46)]=0;
 var $47=$1;
 var $48=(($47+2)|0);
 HEAP8[($48)]=1;
 label=24;break;
 case 9: 
 var $50=$1;
 var $51=(($50+4)|0);
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=($53|0)==254;
 if($54){label=10;break;}else{label=11;break;}
 case 10: 
 var $56=$1;
 var $57=(($56+3)|0);
 HEAP8[($57)]=0;
 var $58=$1;
 var $59=(($58+4)|0);
 HEAP8[($59)]=0;
 label=23;break;
 case 11: 
 var $61=$1;
 var $62=(($61+4)|0);
 var $63=HEAP8[($62)];
 var $64=($63&255);
 var $65=($64|0)==241;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 var $67=$1;
 var $68=(($67+3)|0);
 HEAP8[($68)]=14;
 var $69=$1;
 var $70=(($69+4)|0);
 HEAP8[($70)]=-109;
 label=22;break;
 case 13: 
 var $72=$1;
 var $73=(($72+4)|0);
 var $74=HEAP8[($73)];
 var $75=($74&255);
 var $76=($75|0)==242;
 if($76){label=14;break;}else{label=15;break;}
 case 14: 
 var $78=$1;
 var $79=(($78+3)|0);
 HEAP8[($79)]=14;
 var $80=$1;
 var $81=(($80+4)|0);
 HEAP8[($81)]=-61;
 label=21;break;
 case 15: 
 var $83=$1;
 var $84=(($83+4)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=($86|0)==243;
 if($87){label=16;break;}else{label=17;break;}
 case 16: 
 var $89=$1;
 var $90=(($89+3)|0);
 HEAP8[($90)]=14;
 var $91=$1;
 var $92=(($91+4)|0);
 HEAP8[($92)]=-45;
 label=20;break;
 case 17: 
 var $94=$1;
 var $95=(($94+4)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=($97|0)>10;
 if($98){label=18;break;}else{label=19;break;}
 case 18: 
 var $100=$1;
 var $101=(($100+3)|0);
 HEAP8[($101)]=-85;
 var $102=$1;
 var $103=(($102+4)|0);
 var $104=HEAP8[($103)];
 var $105=($104&255);
 var $106=((($105)*(125))&-1);
 var $107=(((($106|0))/(33))&-1);
 var $108=(($107)&255);
 var $109=$1;
 var $110=(($109+4)|0);
 HEAP8[($110)]=$108;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=26;break;
 case 25: 
 var $118=$1;
 var $119=(($118+3)|0);
 HEAP8[($119)]=0;
 var $120=$1;
 var $121=(($120+4)|0);
 HEAP8[($121)]=0;
 label=26;break;
 case 26: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _stream_read4($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$s;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 var $7=$6^1;
 var $8=($7&1);
 var $9=$2;
 var $10=(($9+4)|0);
 HEAP32[(($10)>>2)]=$8;
 var $11=$2;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=$2;
 var $17=(($16+8)|0);
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=$19&15;
 $1=$20;
 label=4;break;
 case 3: 
 var $22=$2;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=_hio_read8($24);
 var $26=$2;
 var $27=(($26+8)|0);
 HEAP8[($27)]=$25;
 var $28=$2;
 var $29=(($28+8)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=$31>>4;
 $1=$32;
 label=4;break;
 case 4: 
 var $34=$1;
 STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _stream_read8($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 $1=$s;
 var $2=$1;
 var $3=_stream_read4($2);
 $a=$3;
 var $4=$1;
 var $5=_stream_read4($4);
 $b=$5;
 var $6=$a;
 var $7=$6<<4;
 var $8=$b;
 var $9=$7|$8;
 STACKTOP=sp;return $9;
}
function _stream_read16($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 var $d;
 $1=$s;
 var $2=$1;
 var $3=_stream_read4($2);
 $a=$3;
 var $4=$1;
 var $5=_stream_read4($4);
 $b=$5;
 var $6=$1;
 var $7=_stream_read4($6);
 $c=$7;
 var $8=$1;
 var $9=_stream_read4($8);
 $d=$9;
 var $10=$a;
 var $11=$10<<12;
 var $12=$b;
 var $13=$12<<8;
 var $14=$11|$13;
 var $15=$c;
 var $16=$15<<4;
 var $17=$14|$16;
 var $18=$d;
 var $19=$17|$18;
 var $20=(($19)&65535);
 STACKTOP=sp;return $20;
}
function _mfp_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+384)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 var $i;
 var $len;
 var $lps;
 var $lsz;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=29;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=$2;
 var $13=_hio_read($11,1,384,$12);
 var $14=($13>>>0)<384;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=29;break;
 case 5: 
 var $17=(($buf+249)|0);
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=($19|0)!=127;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=29;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $24=$i;
 var $25=($24|0)<31;
 if($25){label=9;break;}else{label=24;break;}
 case 9: 
 var $27=(($buf)|0);
 var $28=$i;
 var $29=($28<<3);
 var $30=(($27+$29)|0);
 var $31=_readmem16b($30);
 var $32=($31&65535);
 $len=$32;
 var $33=$len;
 var $34=($33|0)>32767;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=29;break;
 case 11: 
 var $37=$i;
 var $38=($37<<3);
 var $39=((($38)+(2))|0);
 var $40=(($buf+$39)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$42&240;
 var $44=($43|0)!=0;
 if($44){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=29;break;
 case 13: 
 var $47=$i;
 var $48=($47<<3);
 var $49=((($48)+(3))|0);
 var $50=(($buf+$49)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=($52|0)>64;
 if($53){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=29;break;
 case 15: 
 var $56=(($buf)|0);
 var $57=$i;
 var $58=($57<<3);
 var $59=(($56+$58)|0);
 var $60=(($59+4)|0);
 var $61=_readmem16b($60);
 var $62=($61&65535);
 $lps=$62;
 var $63=$lps;
 var $64=$len;
 var $65=($63|0)>($64|0);
 if($65){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=29;break;
 case 17: 
 var $68=(($buf)|0);
 var $69=$i;
 var $70=($69<<3);
 var $71=(($68+$70)|0);
 var $72=(($71+6)|0);
 var $73=_readmem16b($72);
 var $74=($73&65535);
 $lsz=$74;
 var $75=$lps;
 var $76=$lsz;
 var $77=((($75)+($76))|0);
 var $78=((($77)-(1))|0);
 var $79=$len;
 var $80=($78|0)>($79|0);
 if($80){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=29;break;
 case 19: 
 var $83=$len;
 var $84=($83|0)>0;
 if($84){label=20;break;}else{label=22;break;}
 case 20: 
 var $86=$lsz;
 var $87=($86|0)==0;
 if($87){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=29;break;
 case 22: 
 label=23;break;
 case 23: 
 var $91=$i;
 var $92=((($91)+(1))|0);
 $i=$92;
 label=8;break;
 case 24: 
 var $94=(($buf+248)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=(($buf)|0);
 var $98=(($97+378)|0);
 var $99=_readmem16b($98);
 var $100=($99&65535);
 var $101=($96|0)!=($100|0);
 if($101){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=29;break;
 case 26: 
 var $104=(($buf)|0);
 var $105=(($104+378)|0);
 var $106=_readmem16b($105);
 var $107=($106&65535);
 var $108=(($buf)|0);
 var $109=(($108+380)|0);
 var $110=_readmem16b($109);
 var $111=($110&65535);
 var $112=($107|0)!=($111|0);
 if($112){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-1;
 label=29;break;
 case 28: 
 var $115=$2;
 var $116=$3;
 _read_title($115,$116,0);
 $1=0;
 label=29;break;
 case 29: 
 var $118=$1;
 STACKTOP=sp;return $118;
  default: assert(0, "bad label: " + label);
 }
}
function _mfp_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+7256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $x;
 var $y;
 var $event;
 var $st=sp;
 var $smp_filename=(sp)+(80);
 var $s;
 var $size1;
 var $size2;
 var $pat_addr;
 var $pat_table=(sp)+(4176);
 var $buf=(sp)+(6224);
 var $mod_event=(sp)+(7248);
 var $row;
 var $loop_size;
 var $x1;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$2;
 _set_type($12,23248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $19=$mod;
 var $20=(($19+136)|0);
 HEAP32[(($20)>>2)]=4;
 var $21=$mod;
 var $22=(($21+144)|0);
 HEAP32[(($22)>>2)]=31;
 var $23=$mod;
 var $24=(($23+140)|0);
 HEAP32[(($24)>>2)]=31;
 var $25=$mod;
 var $26=_instrument_init($25);
 var $27=($26|0)<0;
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=86;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $31=$i;
 var $32=($31|0)<31;
 if($32){label=13;break;}else{label=21;break;}
 case 13: 
 var $34=$mod;
 var $35=$i;
 var $36=_subinstrument_alloc($34,$35,1);
 var $37=($36|0)<0;
 if($37){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=86;break;
 case 15: 
 var $40=$3;
 var $41=_hio_read16b($40);
 var $42=($41&65535);
 var $43=($42<<1);
 var $44=$i;
 var $45=$mod;
 var $46=(($45+180)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+((($44)*(52))&-1))|0);
 var $49=(($48+32)|0);
 HEAP32[(($49)>>2)]=$43;
 var $50=$3;
 var $51=_hio_read8($50);
 var $52=($51&255);
 var $53=$52<<4;
 var $54=(($53)&255);
 var $55=(($54<<24)>>24);
 var $56=$i;
 var $57=$mod;
 var $58=(($57+176)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+((($56)*(764))&-1))|0);
 var $61=(($60+756)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62)|0);
 var $64=(($63+16)|0);
 HEAP32[(($64)>>2)]=$55;
 var $65=$3;
 var $66=_hio_read8($65);
 var $67=($66&255);
 var $68=$i;
 var $69=$mod;
 var $70=(($69+176)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+((($68)*(764))&-1))|0);
 var $73=(($72+756)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74)|0);
 var $76=(($75)|0);
 HEAP32[(($76)>>2)]=$67;
 var $77=$3;
 var $78=_hio_read16b($77);
 var $79=($78&65535);
 var $80=($79<<1);
 var $81=$i;
 var $82=$mod;
 var $83=(($82+180)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+((($81)*(52))&-1))|0);
 var $86=(($85+36)|0);
 HEAP32[(($86)>>2)]=$80;
 var $87=$3;
 var $88=_hio_read16b($87);
 var $89=($88&65535);
 $loop_size=$89;
 var $90=$i;
 var $91=$mod;
 var $92=(($91+180)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+((($90)*(52))&-1))|0);
 var $95=(($94+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$loop_size;
 var $98=($97<<1);
 var $99=((($96)+($98))|0);
 var $100=$i;
 var $101=$mod;
 var $102=(($101+180)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+((($100)*(52))&-1))|0);
 var $105=(($104+40)|0);
 HEAP32[(($105)>>2)]=$99;
 var $106=$loop_size;
 var $107=($106|0)>1;
 var $108=($107?2:0);
 var $109=$i;
 var $110=$mod;
 var $111=(($110+180)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+((($109)*(52))&-1))|0);
 var $114=(($113+44)|0);
 HEAP32[(($114)>>2)]=$108;
 var $115=$i;
 var $116=$mod;
 var $117=(($116+176)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+((($115)*(764))&-1))|0);
 var $120=(($119+756)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121)|0);
 var $123=(($122+8)|0);
 HEAP32[(($123)>>2)]=128;
 var $124=$i;
 var $125=$i;
 var $126=$mod;
 var $127=(($126+176)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+((($125)*(764))&-1))|0);
 var $130=(($129+756)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131)|0);
 var $133=(($132+40)|0);
 HEAP32[(($133)>>2)]=$124;
 var $134=$i;
 var $135=$mod;
 var $136=(($135+176)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+((($134)*(764))&-1))|0);
 var $139=(($138+40)|0);
 HEAP32[(($139)>>2)]=4095;
 var $140=$i;
 var $141=$mod;
 var $142=(($141+180)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($143+((($140)*(52))&-1))|0);
 var $145=(($144+32)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)>0;
 if($147){label=16;break;}else{label=17;break;}
 case 16: 
 var $149=$i;
 var $150=$mod;
 var $151=(($150+176)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+((($149)*(764))&-1))|0);
 var $154=(($153+36)|0);
 HEAP32[(($154)>>2)]=1;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $159=$i;
 var $160=((($159)+(1))|0);
 $i=$160;
 label=12;break;
 case 21: 
 var $162=$3;
 var $163=_hio_read8($162);
 var $164=($163&255);
 var $165=$mod;
 var $166=(($165+128)|0);
 HEAP32[(($166)>>2)]=$164;
 var $167=$mod;
 var $168=(($167+156)|0);
 HEAP32[(($168)>>2)]=$164;
 var $169=$3;
 var $170=_hio_read8($169);
 $i=0;
 label=22;break;
 case 22: 
 var $172=$i;
 var $173=($172|0)<128;
 if($173){label=23;break;}else{label=25;break;}
 case 23: 
 var $175=$3;
 var $176=_hio_read8($175);
 var $177=$i;
 var $178=$mod;
 var $179=(($178+952)|0);
 var $180=(($179+$177)|0);
 HEAP8[($180)]=$176;
 label=24;break;
 case 24: 
 var $182=$i;
 var $183=((($182)+(1))|0);
 $i=$183;
 label=22;break;
 case 25: 
 var $185=$mod;
 var $186=(($185+128)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$mod;
 var $189=(($188+136)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(Math_imul($187,$190)|0);
 var $192=$mod;
 var $193=(($192+132)|0);
 HEAP32[(($193)>>2)]=$191;
 var $194=$mod;
 var $195=_pattern_init($194);
 var $196=($195|0)<0;
 if($196){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=86;break;
 case 27: 
 var $199=$3;
 var $200=_hio_read16b($199);
 var $201=($200&65535);
 $size1=$201;
 var $202=$3;
 var $203=_hio_read16b($202);
 var $204=($203&65535);
 $size2=$204;
 $i=0;
 label=28;break;
 case 28: 
 var $206=$i;
 var $207=$size1;
 var $208=($206|0)<($207|0);
 if($208){label=29;break;}else{label=35;break;}
 case 29: 
 $j=0;
 label=30;break;
 case 30: 
 var $211=$j;
 var $212=($211|0)<4;
 if($212){label=31;break;}else{label=33;break;}
 case 31: 
 var $214=$3;
 var $215=_hio_read16b($214);
 var $216=($215&65535);
 var $217=$j;
 var $218=$i;
 var $219=(($pat_table+($218<<4))|0);
 var $220=(($219+($217<<2))|0);
 HEAP32[(($220)>>2)]=$216;
 label=32;break;
 case 32: 
 var $222=$j;
 var $223=((($222)+(1))|0);
 $j=$223;
 label=30;break;
 case 33: 
 label=34;break;
 case 34: 
 var $226=$i;
 var $227=((($226)+(1))|0);
 $i=$227;
 label=28;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $231=$3;
 var $232=_hio_tell($231);
 $pat_addr=$232;
 $i=0;
 label=38;break;
 case 38: 
 var $234=$i;
 var $235=$mod;
 var $236=(($235+128)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=($234|0)<($237|0);
 if($238){label=39;break;}else{label=59;break;}
 case 39: 
 var $240=$mod;
 var $241=$i;
 var $242=_pattern_tracks_alloc($240,$241,64);
 var $243=($242|0)<0;
 if($243){label=40;break;}else{label=41;break;}
 case 40: 
 $1=-1;
 label=86;break;
 case 41: 
 $j=0;
 label=42;break;
 case 42: 
 var $247=$j;
 var $248=($247|0)<4;
 if($248){label=43;break;}else{label=57;break;}
 case 43: 
 var $250=$3;
 var $251=$pat_addr;
 var $252=$j;
 var $253=$i;
 var $254=(($pat_table+($253<<4))|0);
 var $255=(($254+($252<<2))|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=((($251)+($256))|0);
 var $258=_hio_seek($250,$257,0);
 var $259=(($buf)|0);
 var $260=$3;
 var $261=_hio_read($259,1,1024,$260);
 $k=0;
 $row=0;
 label=44;break;
 case 44: 
 var $263=$k;
 var $264=($263|0)<4;
 if($264){label=45;break;}else{label=55;break;}
 case 45: 
 $x=0;
 label=46;break;
 case 46: 
 var $267=$x;
 var $268=($267|0)<4;
 if($268){label=47;break;}else{label=53;break;}
 case 47: 
 $y=0;
 label=48;break;
 case 48: 
 var $271=$y;
 var $272=($271|0)<4;
 if($272){label=49;break;}else{label=51;break;}
 case 49: 
 var $274=$row;
 var $275=$j;
 var $276=$i;
 var $277=$2;
 var $278=(($277)|0);
 var $279=(($278+168)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($280+($276<<2))|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=(($282+4)|0);
 var $284=(($283+($275<<2))|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=$2;
 var $287=(($286)|0);
 var $288=(($287+172)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+($285<<2))|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+4)|0);
 var $293=(($292+($274<<3))|0);
 $event=$293;
 var $294=$mod_event;
 var $295=$k;
 var $296=(($buf+$295)|0);
 var $297=HEAP8[($296)];
 var $298=($297&255);
 var $299=$x;
 var $300=((($298)+($299))|0);
 var $301=(($buf+$300)|0);
 var $302=HEAP8[($301)];
 var $303=($302&255);
 var $304=$y;
 var $305=((($303)+($304))|0);
 var $306=(($buf+$305)|0);
 var $307=HEAP8[($306)];
 var $308=($307&255);
 var $309=($308<<1);
 var $310=(($buf+$309)|0);
 assert(4 % 1 === 0);HEAP8[($294)]=HEAP8[($310)];HEAP8[((($294)+(1))|0)]=HEAP8[((($310)+(1))|0)];HEAP8[((($294)+(2))|0)]=HEAP8[((($310)+(2))|0)];HEAP8[((($294)+(3))|0)]=HEAP8[((($310)+(3))|0)];
 var $311=$event;
 var $312=(($mod_event)|0);
 _decode_protracker_event($311,$312);
 label=50;break;
 case 50: 
 var $314=$y;
 var $315=((($314)+(1))|0);
 $y=$315;
 var $316=$row;
 var $317=((($316)+(1))|0);
 $row=$317;
 label=48;break;
 case 51: 
 label=52;break;
 case 52: 
 var $320=$x;
 var $321=((($320)+(1))|0);
 $x=$321;
 label=46;break;
 case 53: 
 label=54;break;
 case 54: 
 var $324=$k;
 var $325=((($324)+(1))|0);
 $k=$325;
 label=44;break;
 case 55: 
 label=56;break;
 case 56: 
 var $328=$j;
 var $329=((($328)+(1))|0);
 $j=$329;
 label=42;break;
 case 57: 
 label=58;break;
 case 58: 
 var $332=$i;
 var $333=((($332)+(1))|0);
 $i=$333;
 label=38;break;
 case 59: 
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 var $337=$2;
 var $338=(($337+1212)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=_strlen($339);
 var $341=($340>>>0)<5;
 if($341){label=63;break;}else{label=62;break;}
 case 62: 
 var $343=$2;
 var $344=(($343+1212)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=(($345+3)|0);
 var $347=HEAP8[($346)];
 var $348=(($347<<24)>>24);
 var $349=($348|0)!=46;
 if($349){label=63;break;}else{label=64;break;}
 case 63: 
 var $351=HEAP32[((_stderr)>>2)];
 var $352=$2;
 var $353=(($352+1212)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=_fprintf($351,26552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$354,tempVarArgs)); STACKTOP=tempVarArgs;
 label=81;break;
 case 64: 
 var $357=$2;
 var $358=(($357+1212)|0);
 var $359=HEAP32[(($358)>>2)];
 var $360=(($359)|0);
 HEAP8[($360)]=115;
 var $361=$2;
 var $362=(($361+1212)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(($363+1)|0);
 HEAP8[($364)]=109;
 var $365=$2;
 var $366=(($365+1212)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($367+2)|0);
 HEAP8[($368)]=112;
 var $369=(($smp_filename)|0);
 var $370=$2;
 var $371=(($370+1208)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=$2;
 var $374=(($373+1212)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=_snprintf($369,4096,24728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$372,HEAP32[(((tempVarArgs)+(8))>>2)]=$375,tempVarArgs)); STACKTOP=tempVarArgs;
 var $377=(($smp_filename)|0);
 var $378=_stat($377,$st);
 var $379=($378|0)<0;
 if($379){label=65;break;}else{label=72;break;}
 case 65: 
 var $381=$2;
 var $382=(($381+1212)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=_strchr($383,45);
 var $385=($384|0)!=0;
 if($385){label=66;break;}else{label=69;break;}
 case 66: 
 var $387=(($smp_filename)|0);
 var $388=_strrchr($387,45);
 $x1=$388;
 var $389=($388|0)!=0;
 if($389){label=67;break;}else{label=68;break;}
 case 67: 
 var $391=$x1;
 var $392=_strcpy($391,23632);
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 var $395=(($smp_filename)|0);
 var $396=_stat($395,$st);
 var $397=($396|0)<0;
 if($397){label=70;break;}else{label=71;break;}
 case 70: 
 var $399=HEAP32[((_stderr)>>2)];
 var $400=(($smp_filename)|0);
 var $401=_fprintf($399,22920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$400,tempVarArgs)); STACKTOP=tempVarArgs;
 label=81;break;
 case 71: 
 label=72;break;
 case 72: 
 var $404=(($smp_filename)|0);
 var $405=_hio_open_file($404,22128);
 $s=$405;
 var $406=($405|0)==0;
 if($406){label=73;break;}else{label=74;break;}
 case 73: 
 var $408=HEAP32[((_stderr)>>2)];
 var $409=(($smp_filename)|0);
 var $410=_fprintf($408,21472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$409,tempVarArgs)); STACKTOP=tempVarArgs;
 label=81;break;
 case 74: 
 $i=0;
 label=75;break;
 case 75: 
 var $413=$i;
 var $414=$mod;
 var $415=(($414+140)|0);
 var $416=HEAP32[(($415)>>2)];
 var $417=($413|0)<($416|0);
 if($417){label=76;break;}else{label=80;break;}
 case 76: 
 var $419=$2;
 var $420=$s;
 var $421=$i;
 var $422=$mod;
 var $423=(($422+176)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=(($424+((($421)*(764))&-1))|0);
 var $426=(($425+756)|0);
 var $427=HEAP32[(($426)>>2)];
 var $428=(($427)|0);
 var $429=(($428+40)|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=$mod;
 var $432=(($431+180)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=(($433+((($430)*(52))&-1))|0);
 var $435=_load_sample($419,$420,512,$434,0);
 var $436=($435|0)<0;
 if($436){label=77;break;}else{label=78;break;}
 case 77: 
 $1=-1;
 label=86;break;
 case 78: 
 label=79;break;
 case 79: 
 var $440=$i;
 var $441=((($440)+(1))|0);
 $i=$441;
 label=75;break;
 case 80: 
 var $443=$s;
 var $444=_hio_close($443);
 var $445=$2;
 var $446=(($445+1280)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=$447|8192;
 HEAP32[(($446)>>2)]=$448;
 $1=0;
 label=86;break;
 case 81: 
 $i=0;
 label=82;break;
 case 82: 
 var $451=$i;
 var $452=$mod;
 var $453=(($452+140)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=($451|0)<($454|0);
 if($455){label=83;break;}else{label=85;break;}
 case 83: 
 var $457=$i;
 var $458=$mod;
 var $459=(($458+176)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=(($460+((($457)*(764))&-1))|0);
 var $462=(($461+36)|0);
 HEAP32[(($462)>>2)]=0;
 var $463=$i;
 var $464=$mod;
 var $465=(($464+180)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=(($466+((($463)*(52))&-1))|0);
 var $468=$467;
 _memset($468, 0, 52)|0;
 label=84;break;
 case 84: 
 var $470=$i;
 var $471=((($470)+(1))|0);
 $i=$471;
 label=82;break;
 case 85: 
 $1=0;
 label=86;break;
 case 86: 
 var $474=$1;
 STACKTOP=sp;return $474;
  default: assert(0, "bad label: " + label);
 }
}
function _mgt_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $sng_ptr;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read24b($5);
 var $7=($6|0)!=5064532;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read8($10);
 var $12=$2;
 var $13=_hio_read32b($12);
 var $14=($13|0)!=-1119009965;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $17=$2;
 var $18=_hio_seek($17,18,1);
 var $19=$2;
 var $20=_hio_read32b($19);
 $sng_ptr=$20;
 var $21=$2;
 var $22=$4;
 var $23=$sng_ptr;
 var $24=((($22)+($23))|0);
 var $25=_hio_seek($21,$24,0);
 var $26=$2;
 var $27=$3;
 _read_title($26,$27,32);
 $1=0;
 label=6;break;
 case 6: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _mgt_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $ver;
 var $sng_ptr;
 var $seq_ptr;
 var $ins_ptr;
 var $pat_ptr;
 var $trk_ptr;
 var $smp_ptr;
 var $sdata=sp;
 var $c2spd;
 var $flags;
 var $offset;
 var $rows;
 var $b;
 var $note;
 var $f2p;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read24b($12);
 var $14=$3;
 var $15=_hio_read8($14);
 var $16=($15&255);
 $ver=$16;
 var $17=$3;
 var $18=_hio_read32b($17);
 var $19=$2;
 var $20=$ver;
 var $21=$20&240;
 var $22=$21>>4;
 var $23=$ver;
 var $24=$23&15;
 _set_type($19,26528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$22,HEAP32[(((tempVarArgs)+(8))>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs;
 var $25=$3;
 var $26=_hio_read16b($25);
 var $27=($26&65535);
 var $28=$mod;
 var $29=(($28+136)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$3;
 var $31=_hio_read16b($30);
 var $32=$3;
 var $33=_hio_read16b($32);
 var $34=($33&65535);
 var $35=$mod;
 var $36=(($35+156)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$3;
 var $38=_hio_read16b($37);
 var $39=($38&65535);
 var $40=$mod;
 var $41=(($40+128)|0);
 HEAP32[(($41)>>2)]=$39;
 var $42=$3;
 var $43=_hio_read16b($42);
 var $44=($43&65535);
 var $45=$mod;
 var $46=(($45+132)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$3;
 var $48=_hio_read16b($47);
 var $49=($48&65535);
 var $50=$mod;
 var $51=(($50+144)|0);
 HEAP32[(($51)>>2)]=$49;
 var $52=$mod;
 var $53=(($52+140)|0);
 HEAP32[(($53)>>2)]=$49;
 var $54=$3;
 var $55=_hio_read16b($54);
 var $56=$3;
 var $57=_hio_read32b($56);
 var $58=$3;
 var $59=_hio_read32b($58);
 $sng_ptr=$59;
 var $60=$3;
 var $61=_hio_read32b($60);
 $seq_ptr=$61;
 var $62=$3;
 var $63=_hio_read32b($62);
 $ins_ptr=$63;
 var $64=$3;
 var $65=_hio_read32b($64);
 $pat_ptr=$65;
 var $66=$3;
 var $67=_hio_read32b($66);
 $trk_ptr=$67;
 var $68=$3;
 var $69=_hio_read32b($68);
 $smp_ptr=$69;
 var $70=$3;
 var $71=_hio_read32b($70);
 var $72=$3;
 var $73=_hio_read32b($72);
 var $74=$3;
 var $75=$4;
 var $76=$sng_ptr;
 var $77=((($75)+($76))|0);
 var $78=_hio_seek($74,$77,0);
 var $79=$mod;
 var $80=(($79)|0);
 var $81=(($80)|0);
 var $82=$3;
 var $83=_hio_read($81,1,32,$82);
 var $84=$3;
 var $85=_hio_read32b($84);
 $seq_ptr=$85;
 var $86=$3;
 var $87=_hio_read16b($86);
 var $88=($87&65535);
 var $89=$mod;
 var $90=(($89+156)|0);
 HEAP32[(($90)>>2)]=$88;
 var $91=$3;
 var $92=_hio_read16b($91);
 var $93=($92&65535);
 var $94=$mod;
 var $95=(($94+160)|0);
 HEAP32[(($95)>>2)]=$93;
 var $96=$3;
 var $97=_hio_read8($96);
 var $98=($97&255);
 var $99=$mod;
 var $100=(($99+152)|0);
 HEAP32[(($100)>>2)]=$98;
 var $101=$3;
 var $102=_hio_read8($101);
 var $103=($102&255);
 var $104=$mod;
 var $105=(($104+148)|0);
 HEAP32[(($105)>>2)]=$103;
 var $106=$3;
 var $107=_hio_read16b($106);
 var $108=$3;
 var $109=_hio_read8($108);
 var $110=$3;
 var $111=_hio_read8($110);
 $i=0;
 label=4;break;
 case 4: 
 var $113=$i;
 var $114=$mod;
 var $115=(($114+136)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($113|0)<($116|0);
 if($117){label=5;break;}else{label=7;break;}
 case 5: 
 var $119=$3;
 var $120=_hio_read16b($119);
 label=6;break;
 case 6: 
 var $122=$i;
 var $123=((($122)+(1))|0);
 $i=$123;
 label=4;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $131=$3;
 var $132=$4;
 var $133=$seq_ptr;
 var $134=((($132)+($133))|0);
 var $135=_hio_seek($131,$134,0);
 $i=0;
 label=14;break;
 case 14: 
 var $137=$i;
 var $138=$mod;
 var $139=(($138+156)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($137|0)<($140|0);
 if($141){label=15;break;}else{label=17;break;}
 case 15: 
 var $143=$3;
 var $144=_hio_read16b($143);
 var $145=(($144)&255);
 var $146=$i;
 var $147=$mod;
 var $148=(($147+952)|0);
 var $149=(($148+$146)|0);
 HEAP8[($149)]=$145;
 label=16;break;
 case 16: 
 var $151=$i;
 var $152=((($151)+(1))|0);
 $i=$152;
 label=14;break;
 case 17: 
 var $154=$mod;
 var $155=_instrument_init($154);
 var $156=($155|0)<0;
 if($156){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=101;break;
 case 19: 
 var $159=$3;
 var $160=$4;
 var $161=$ins_ptr;
 var $162=((($160)+($161))|0);
 var $163=_hio_seek($159,$162,0);
 $i=0;
 label=20;break;
 case 20: 
 var $165=$i;
 var $166=$mod;
 var $167=(($166+140)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($165|0)<($168|0);
 if($169){label=21;break;}else{label=27;break;}
 case 21: 
 var $171=$mod;
 var $172=$i;
 var $173=_subinstrument_alloc($171,$172,1);
 var $174=($173|0)<0;
 if($174){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=101;break;
 case 23: 
 var $177=$i;
 var $178=$mod;
 var $179=(($178+176)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+((($177)*(764))&-1))|0);
 var $182=(($181)|0);
 var $183=(($182)|0);
 var $184=$3;
 var $185=_hio_read($183,1,32,$184);
 var $186=$3;
 var $187=_hio_read32b($186);
 var $188=$i;
 var $189=(($sdata+($188<<2))|0);
 HEAP32[(($189)>>2)]=$187;
 var $190=$3;
 var $191=_hio_read32b($190);
 var $192=$i;
 var $193=$mod;
 var $194=(($193+180)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+((($192)*(52))&-1))|0);
 var $197=(($196+32)|0);
 HEAP32[(($197)>>2)]=$191;
 var $198=$3;
 var $199=_hio_read32b($198);
 var $200=$i;
 var $201=$mod;
 var $202=(($201+180)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+((($200)*(52))&-1))|0);
 var $205=(($204+36)|0);
 HEAP32[(($205)>>2)]=$199;
 var $206=$i;
 var $207=$mod;
 var $208=(($207+180)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+((($206)*(52))&-1))|0);
 var $211=(($210+36)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=$3;
 var $214=_hio_read32b($213);
 var $215=((($212)+($214))|0);
 var $216=$i;
 var $217=$mod;
 var $218=(($217+180)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+((($216)*(52))&-1))|0);
 var $221=(($220+40)|0);
 HEAP32[(($221)>>2)]=$215;
 var $222=$3;
 var $223=_hio_read32b($222);
 var $224=$3;
 var $225=_hio_read32b($224);
 var $226=$3;
 var $227=_hio_read32b($226);
 $c2spd=$227;
 var $228=$c2spd;
 var $229=$i;
 var $230=$mod;
 var $231=(($230+176)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+((($229)*(764))&-1))|0);
 var $234=(($233+756)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235)|0);
 var $237=(($236+12)|0);
 var $238=$i;
 var $239=$mod;
 var $240=(($239+176)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($241+((($238)*(764))&-1))|0);
 var $243=(($242+756)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244)|0);
 var $246=(($245+16)|0);
 _c2spd_to_note($228,$237,$246);
 var $247=$3;
 var $248=_hio_read16b($247);
 var $249=($248&65535);
 var $250=$249>>4;
 var $251=$i;
 var $252=$mod;
 var $253=(($252+176)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+((($251)*(764))&-1))|0);
 var $256=(($255+756)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=(($257)|0);
 var $259=(($258)|0);
 HEAP32[(($259)>>2)]=$250;
 var $260=$3;
 var $261=_hio_read8($260);
 var $262=$3;
 var $263=_hio_read8($262);
 var $264=$i;
 var $265=$mod;
 var $266=(($265+176)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($267+((($264)*(764))&-1))|0);
 var $269=(($268+756)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270)|0);
 var $272=(($271+8)|0);
 HEAP32[(($272)>>2)]=128;
 var $273=$3;
 var $274=_hio_read8($273);
 var $275=($274&255);
 $flags=$275;
 var $276=$flags;
 var $277=$276&3;
 var $278=($277|0)!=0;
 var $279=($278?2:0);
 var $280=$i;
 var $281=$mod;
 var $282=(($281+180)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283+((($280)*(52))&-1))|0);
 var $285=(($284+44)|0);
 HEAP32[(($285)>>2)]=$279;
 var $286=$flags;
 var $287=$286&2;
 var $288=($287|0)!=0;
 var $289=($288?4:0);
 var $290=$i;
 var $291=$mod;
 var $292=(($291+180)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293+((($290)*(52))&-1))|0);
 var $295=(($294+44)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=$296|$289;
 HEAP32[(($295)>>2)]=$297;
 var $298=$3;
 var $299=_hio_read8($298);
 var $300=($299&255);
 var $301=0;
 var $302=$i;
 var $303=$mod;
 var $304=(($303+176)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+((($302)*(764))&-1))|0);
 var $307=(($306+756)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(($308)|0);
 var $310=(($309+16)|0);
 var $311=HEAP32[(($310)>>2)];
 var $312=((($311)+($301))|0);
 HEAP32[(($310)>>2)]=$312;
 var $313=$3;
 var $314=_hio_read8($313);
 var $315=$3;
 var $316=_hio_read8($315);
 var $317=$3;
 var $318=_hio_read8($317);
 var $319=$3;
 var $320=_hio_read8($319);
 var $321=$3;
 var $322=_hio_read16b($321);
 var $323=$3;
 var $324=_hio_read32b($323);
 var $325=$3;
 var $326=_hio_read32b($325);
 var $327=$i;
 var $328=$mod;
 var $329=(($328+180)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($330+((($327)*(52))&-1))|0);
 var $332=(($331+32)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=($333|0)!=0;
 var $335=$334^1;
 var $336=$335^1;
 var $337=($336&1);
 var $338=$i;
 var $339=$mod;
 var $340=(($339+176)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($341+((($338)*(764))&-1))|0);
 var $343=(($342+36)|0);
 HEAP32[(($343)>>2)]=$337;
 var $344=$i;
 var $345=$i;
 var $346=$mod;
 var $347=(($346+176)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($348+((($345)*(764))&-1))|0);
 var $350=(($349+756)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=(($351)|0);
 var $353=(($352+40)|0);
 HEAP32[(($353)>>2)]=$344;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $357=$i;
 var $358=((($357)+(1))|0);
 $i=$358;
 label=20;break;
 case 27: 
 var $360=$mod;
 var $361=_pattern_init($360);
 var $362=($361|0)<0;
 if($362){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=101;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 $i=1;
 label=32;break;
 case 32: 
 var $368=$i;
 var $369=$mod;
 var $370=(($369+132)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=($368|0)<($371|0);
 if($372){label=33;break;}else{label=78;break;}
 case 33: 
 var $374=$3;
 var $375=$4;
 var $376=$trk_ptr;
 var $377=((($375)+($376))|0);
 var $378=$i;
 var $379=($378<<2);
 var $380=((($377)+($379))|0);
 var $381=_hio_seek($374,$380,0);
 var $382=$3;
 var $383=_hio_read32b($382);
 $offset=$383;
 var $384=$3;
 var $385=$4;
 var $386=$offset;
 var $387=((($385)+($386))|0);
 var $388=_hio_seek($384,$387,0);
 var $389=$3;
 var $390=_hio_read16b($389);
 var $391=($390&65535);
 $rows=$391;
 var $392=$mod;
 var $393=$i;
 var $394=$rows;
 var $395=_track_alloc($392,$393,$394);
 var $396=($395|0)<0;
 if($396){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=101;break;
 case 35: 
 $j=0;
 label=36;break;
 case 36: 
 var $400=$j;
 var $401=$rows;
 var $402=($400|0)<($401|0);
 if($402){label=37;break;}else{label=76;break;}
 case 37: 
 var $404=$3;
 var $405=_hio_read8($404);
 $b=$405;
 var $406=$b;
 var $407=($406&255);
 var $408=$407&3;
 var $409=$j;
 var $410=((($409)+($408))|0);
 $j=$410;
 $note=0;
 var $411=$j;
 var $412=$i;
 var $413=$mod;
 var $414=(($413+172)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=(($415+($412<<2))|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=(($417+4)|0);
 var $419=(($418+($411<<3))|0);
 $event=$419;
 var $420=$b;
 var $421=($420&255);
 var $422=$421&4;
 var $423=($422|0)!=0;
 if($423){label=38;break;}else{label=39;break;}
 case 38: 
 var $425=$3;
 var $426=_hio_read8($425);
 $note=$426;
 label=39;break;
 case 39: 
 var $428=$b;
 var $429=($428&255);
 var $430=$429&8;
 var $431=($430|0)!=0;
 if($431){label=40;break;}else{label=41;break;}
 case 40: 
 var $433=$3;
 var $434=_hio_read8($433);
 var $435=$event;
 var $436=(($435+1)|0);
 HEAP8[($436)]=$434;
 label=41;break;
 case 41: 
 var $438=$b;
 var $439=($438&255);
 var $440=$439&16;
 var $441=($440|0)!=0;
 if($441){label=42;break;}else{label=43;break;}
 case 42: 
 var $443=$3;
 var $444=_hio_read8($443);
 var $445=$event;
 var $446=(($445+2)|0);
 HEAP8[($446)]=$444;
 label=43;break;
 case 43: 
 var $448=$b;
 var $449=($448&255);
 var $450=$449&32;
 var $451=($450|0)!=0;
 if($451){label=44;break;}else{label=45;break;}
 case 44: 
 var $453=$3;
 var $454=_hio_read8($453);
 var $455=$event;
 var $456=(($455+3)|0);
 HEAP8[($456)]=$454;
 label=45;break;
 case 45: 
 var $458=$b;
 var $459=($458&255);
 var $460=$459&64;
 var $461=($460|0)!=0;
 if($461){label=46;break;}else{label=47;break;}
 case 46: 
 var $463=$3;
 var $464=_hio_read8($463);
 var $465=$event;
 var $466=(($465+4)|0);
 HEAP8[($466)]=$464;
 label=47;break;
 case 47: 
 var $468=$b;
 var $469=($468&255);
 var $470=$469&128;
 var $471=($470|0)!=0;
 if($471){label=48;break;}else{label=49;break;}
 case 48: 
 var $473=$3;
 var $474=_hio_read8($473);
 $f2p=$474;
 label=49;break;
 case 49: 
 var $476=$note;
 var $477=($476&255);
 var $478=($477|0)==1;
 if($478){label=50;break;}else{label=51;break;}
 case 50: 
 var $480=$event;
 var $481=(($480)|0);
 HEAP8[($481)]=-127;
 label=54;break;
 case 51: 
 var $483=$note;
 var $484=($483&255);
 var $485=($484|0)>11;
 if($485){label=52;break;}else{label=53;break;}
 case 52: 
 var $487=$note;
 var $488=($487&255);
 var $489=((($488)+(1))|0);
 var $490=(($489)&255);
 var $491=$event;
 var $492=(($491)|0);
 HEAP8[($492)]=$490;
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $495=$event;
 var $496=(($495+3)|0);
 var $497=HEAP8[($496)];
 var $498=($497&255);
 var $499=($498|0)<16;
 if($499){label=55;break;}else{label=56;break;}
 case 55: 
 label=60;break;
 case 56: 
 var $502=$event;
 var $503=(($502+3)|0);
 var $504=HEAP8[($503)];
 var $505=($504&255);
 switch(($505|0)){case 19:case 20:case 21:case 23:case 28:case 29:case 30:{ label=57;break;}default:{label=58;break;}}break;
 case 57: 
 var $507=$event;
 var $508=(($507+3)|0);
 HEAP8[($508)]=14;
 var $509=$event;
 var $510=(($509+3)|0);
 var $511=HEAP8[($510)];
 var $512=($511&255);
 var $513=$512&15;
 var $514=$513<<4;
 var $515=$event;
 var $516=(($515+4)|0);
 var $517=HEAP8[($516)];
 var $518=($517&255);
 var $519=$518&15;
 var $520=$514|$519;
 var $521=(($520)&255);
 var $522=$event;
 var $523=(($522+4)|0);
 HEAP8[($523)]=$521;
 label=59;break;
 case 58: 
 var $525=$event;
 var $526=(($525+4)|0);
 HEAP8[($526)]=0;
 var $527=$event;
 var $528=(($527+3)|0);
 HEAP8[($528)]=0;
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 var $531=$event;
 var $532=(($531+2)|0);
 var $533=HEAP8[($532)];
 var $534=($533&255);
 var $535=($534|0)>=16;
 if($535){label=61;break;}else{label=63;break;}
 case 61: 
 var $537=$event;
 var $538=(($537+2)|0);
 var $539=HEAP8[($538)];
 var $540=($539&255);
 var $541=($540|0)<=80;
 if($541){label=62;break;}else{label=63;break;}
 case 62: 
 var $543=$event;
 var $544=(($543+2)|0);
 var $545=HEAP8[($544)];
 var $546=($545&255);
 var $547=((($546)-(15))|0);
 var $548=(($547)&255);
 HEAP8[($544)]=$548;
 label=75;break;
 case 63: 
 var $550=$event;
 var $551=(($550+2)|0);
 var $552=HEAP8[($551)];
 var $553=($552&255);
 var $554=$553>>4;
 switch(($554|0)){case 6:{ label=64;break;}case 7:{ label=65;break;}case 8:{ label=66;break;}case 9:{ label=67;break;}case 10:{ label=68;break;}case 11:{ label=69;break;}case 12:{ label=70;break;}case 13:{ label=71;break;}case 14:{ label=72;break;}case 15:{ label=73;break;}default:{label=74;break;}}break;
 case 64: 
 var $556=$event;
 var $557=(($556+5)|0);
 HEAP8[($557)]=-92;
 var $558=$event;
 var $559=(($558+2)|0);
 var $560=HEAP8[($559)];
 var $561=($560&255);
 var $562=((($561)-(96))|0);
 var $563=(($562)&255);
 var $564=$event;
 var $565=(($564+6)|0);
 HEAP8[($565)]=$563;
 label=74;break;
 case 65: 
 var $567=$event;
 var $568=(($567+5)|0);
 HEAP8[($568)]=-92;
 var $569=$event;
 var $570=(($569+2)|0);
 var $571=HEAP8[($570)];
 var $572=($571&255);
 var $573=((($572)-(112))|0);
 var $574=$573<<4;
 var $575=(($574)&255);
 var $576=$event;
 var $577=(($576+6)|0);
 HEAP8[($577)]=$575;
 label=74;break;
 case 66: 
 var $579=$event;
 var $580=(($579+5)|0);
 HEAP8[($580)]=14;
 var $581=$event;
 var $582=(($581+2)|0);
 var $583=HEAP8[($582)];
 var $584=($583&255);
 var $585=((($584)-(128))|0);
 var $586=176|$585;
 var $587=(($586)&255);
 var $588=$event;
 var $589=(($588+6)|0);
 HEAP8[($589)]=$587;
 label=74;break;
 case 67: 
 var $591=$event;
 var $592=(($591+5)|0);
 HEAP8[($592)]=14;
 var $593=$event;
 var $594=(($593+2)|0);
 var $595=HEAP8[($594)];
 var $596=($595&255);
 var $597=((($596)-(144))|0);
 var $598=160|$597;
 var $599=(($598)&255);
 var $600=$event;
 var $601=(($600+6)|0);
 HEAP8[($601)]=$599;
 label=74;break;
 case 68: 
 var $603=$event;
 var $604=(($603+5)|0);
 HEAP8[($604)]=4;
 var $605=$event;
 var $606=(($605+2)|0);
 var $607=HEAP8[($606)];
 var $608=($607&255);
 var $609=((($608)-(160))|0);
 var $610=$609<<4;
 var $611=(($610)&255);
 var $612=$event;
 var $613=(($612+6)|0);
 HEAP8[($613)]=$611;
 label=74;break;
 case 69: 
 var $615=$event;
 var $616=(($615+5)|0);
 HEAP8[($616)]=4;
 var $617=$event;
 var $618=(($617+2)|0);
 var $619=HEAP8[($618)];
 var $620=($619&255);
 var $621=((($620)-(176))|0);
 var $622=(($621)&255);
 var $623=$event;
 var $624=(($623+6)|0);
 HEAP8[($624)]=$622;
 label=74;break;
 case 70: 
 var $626=$event;
 var $627=(($626+5)|0);
 HEAP8[($627)]=8;
 var $628=$event;
 var $629=(($628+2)|0);
 var $630=HEAP8[($629)];
 var $631=($630&255);
 var $632=((($631)-(192))|0);
 var $633=$632<<4;
 var $634=((($633)+(8))|0);
 var $635=(($634)&255);
 var $636=$event;
 var $637=(($636+6)|0);
 HEAP8[($637)]=$635;
 label=74;break;
 case 71: 
 var $639=$event;
 var $640=(($639+5)|0);
 HEAP8[($640)]=25;
 var $641=$event;
 var $642=(($641+2)|0);
 var $643=HEAP8[($642)];
 var $644=($643&255);
 var $645=((($644)-(208))|0);
 var $646=$645<<4;
 var $647=(($646)&255);
 var $648=$event;
 var $649=(($648+6)|0);
 HEAP8[($649)]=$647;
 label=74;break;
 case 72: 
 var $651=$event;
 var $652=(($651+5)|0);
 HEAP8[($652)]=25;
 var $653=$event;
 var $654=(($653+2)|0);
 var $655=HEAP8[($654)];
 var $656=($655&255);
 var $657=((($656)-(224))|0);
 var $658=(($657)&255);
 var $659=$event;
 var $660=(($659+6)|0);
 HEAP8[($660)]=$658;
 label=74;break;
 case 73: 
 var $662=$event;
 var $663=(($662+5)|0);
 HEAP8[($663)]=3;
 var $664=$event;
 var $665=(($664+2)|0);
 var $666=HEAP8[($665)];
 var $667=($666&255);
 var $668=((($667)-(240))|0);
 var $669=$668<<4;
 var $670=(($669)&255);
 var $671=$event;
 var $672=(($671+6)|0);
 HEAP8[($672)]=$670;
 label=74;break;
 case 74: 
 var $674=$event;
 var $675=(($674+2)|0);
 HEAP8[($675)]=0;
 label=75;break;
 case 75: 
 var $677=$j;
 var $678=((($677)+(1))|0);
 $j=$678;
 label=36;break;
 case 76: 
 label=77;break;
 case 77: 
 var $681=$i;
 var $682=((($681)+(1))|0);
 $i=$682;
 label=32;break;
 case 78: 
 var $684=_calloc(523,1);
 var $685=$684;
 var $686=$mod;
 var $687=(($686+172)|0);
 var $688=HEAP32[(($687)>>2)];
 var $689=(($688)|0);
 HEAP32[(($689)>>2)]=$685;
 var $690=$mod;
 var $691=(($690+172)|0);
 var $692=HEAP32[(($691)>>2)];
 var $693=(($692)|0);
 var $694=HEAP32[(($693)>>2)];
 var $695=(($694)|0);
 HEAP32[(($695)>>2)]=64;
 label=79;break;
 case 79: 
 label=80;break;
 case 80: 
 var $698=$3;
 var $699=$4;
 var $700=$pat_ptr;
 var $701=((($699)+($700))|0);
 var $702=_hio_seek($698,$701,0);
 $i=0;
 label=81;break;
 case 81: 
 var $704=$i;
 var $705=$mod;
 var $706=(($705+128)|0);
 var $707=HEAP32[(($706)>>2)];
 var $708=($704|0)<($707|0);
 if($708){label=82;break;}else{label=90;break;}
 case 82: 
 var $710=$mod;
 var $711=$i;
 var $712=_pattern_alloc($710,$711);
 var $713=($712|0)<0;
 if($713){label=83;break;}else{label=84;break;}
 case 83: 
 $1=-1;
 label=101;break;
 case 84: 
 var $716=$3;
 var $717=_hio_read16b($716);
 var $718=($717&65535);
 var $719=$i;
 var $720=$mod;
 var $721=(($720+168)|0);
 var $722=HEAP32[(($721)>>2)];
 var $723=(($722+($719<<2))|0);
 var $724=HEAP32[(($723)>>2)];
 var $725=(($724)|0);
 HEAP32[(($725)>>2)]=$718;
 $j=0;
 label=85;break;
 case 85: 
 var $727=$j;
 var $728=$mod;
 var $729=(($728+136)|0);
 var $730=HEAP32[(($729)>>2)];
 var $731=($727|0)<($730|0);
 if($731){label=86;break;}else{label=88;break;}
 case 86: 
 var $733=$3;
 var $734=_hio_read16b($733);
 var $735=($734&65535);
 var $736=((($735)-(1))|0);
 var $737=$j;
 var $738=$i;
 var $739=$mod;
 var $740=(($739+168)|0);
 var $741=HEAP32[(($740)>>2)];
 var $742=(($741+($738<<2))|0);
 var $743=HEAP32[(($742)>>2)];
 var $744=(($743+4)|0);
 var $745=(($744+($737<<2))|0);
 HEAP32[(($745)>>2)]=$736;
 label=87;break;
 case 87: 
 var $747=$j;
 var $748=((($747)+(1))|0);
 $j=$748;
 label=85;break;
 case 88: 
 label=89;break;
 case 89: 
 var $751=$i;
 var $752=((($751)+(1))|0);
 $i=$752;
 label=81;break;
 case 90: 
 label=91;break;
 case 91: 
 label=92;break;
 case 92: 
 $i=0;
 label=93;break;
 case 93: 
 var $757=$i;
 var $758=$mod;
 var $759=(($758+140)|0);
 var $760=HEAP32[(($759)>>2)];
 var $761=($757|0)<($760|0);
 if($761){label=94;break;}else{label=100;break;}
 case 94: 
 var $763=$i;
 var $764=$mod;
 var $765=(($764+176)|0);
 var $766=HEAP32[(($765)>>2)];
 var $767=(($766+((($763)*(764))&-1))|0);
 var $768=(($767+36)|0);
 var $769=HEAP32[(($768)>>2)];
 var $770=($769|0)==0;
 if($770){label=95;break;}else{label=96;break;}
 case 95: 
 label=99;break;
 case 96: 
 var $773=$3;
 var $774=$4;
 var $775=$i;
 var $776=(($sdata+($775<<2))|0);
 var $777=HEAP32[(($776)>>2)];
 var $778=((($774)+($777))|0);
 var $779=_hio_seek($773,$778,0);
 var $780=$2;
 var $781=$3;
 var $782=$i;
 var $783=$mod;
 var $784=(($783+180)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=(($785+((($782)*(52))&-1))|0);
 var $787=_load_sample($780,$781,0,$786,0);
 var $788=($787|0)<0;
 if($788){label=97;break;}else{label=98;break;}
 case 97: 
 $1=-1;
 label=101;break;
 case 98: 
 label=99;break;
 case 99: 
 var $792=$i;
 var $793=((($792)+(1))|0);
 $i=$793;
 label=93;break;
 case 100: 
 $1=0;
 label=101;break;
 case 101: 
 var $796=$1;
 STACKTOP=sp;return $796;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd1_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $id=sp;
 var $offset;
 var $len;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($id)|0);
 var $6=$2;
 var $7=_hio_read($5,1,4,$6);
 var $8=($7>>>0)<4;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=10;break;
 case 3: 
 var $11=(($id)|0);
 var $12=_memcmp($11,22912,4);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 var $15=(($id)|0);
 var $16=_memcmp($15,22120,4);
 var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=10;break;
 case 6: 
 var $20=$2;
 var $21=_hio_seek($20,28,1);
 var $22=$2;
 var $23=_hio_read32b($22);
 $offset=$23;
 var $24=$offset;
 var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 var $27=$2;
 var $28=$4;
 var $29=$offset;
 var $30=((($28)+($29))|0);
 var $31=((($30)+(44))|0);
 var $32=_hio_seek($27,$31,0);
 var $33=$2;
 var $34=_hio_read32b($33);
 $offset=$34;
 var $35=$2;
 var $36=_hio_read32b($35);
 $len=$36;
 var $37=$2;
 var $38=$4;
 var $39=$offset;
 var $40=((($38)+($39))|0);
 var $41=_hio_seek($37,$40,0);
 var $42=$2;
 var $43=$3;
 var $44=$len;
 _read_title($42,$43,$44);
 label=9;break;
 case 8: 
 var $46=$2;
 var $47=$3;
 _read_title($46,$47,0);
 label=9;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $50=$1;
 STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd1_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1560)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $header=sp;
 var $song=(sp)+(56);
 var $block=(sp)+(848);
 var $instr=(sp)+(856);
 var $synth=(sp)+(864);
 var $exp_smp=(sp)+(1400);
 var $expdata=(sp)+(1424);
 var $event;
 var $ver;
 var $smp_idx;
 var $e=(sp)+(1512);
 var $song_offset;
 var $blockarr_offset;
 var $smplarr_offset;
 var $expdata_offset;
 var $expsmp_offset;
 var $songname_offset;
 var $iinfo_offset;
 var $pos;
 var $bpm_on;
 var $bpmlen;
 var $med_8ch;
 var $smpl_offset;
 var $type;
 var $block_offset;
 var $block_offset1;
 var $smpl_offset2;
 var $name=(sp)+(1520);
 var $sub;
 var $xxs;
 var $ret;
 var $ret3;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $ver=0;
 $smp_idx=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($header)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,4,1,$14);
 var $16=(($header)|0);
 var $17=$16;
 var $18=(($17+3)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 var $21=((($20)-(49))|0);
 var $22=((($21)+(1))|0);
 $ver=$22;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $25=$3;
 var $26=_hio_read32b($25);
 var $27=(($header+4)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=$3;
 var $29=_hio_read32b($28);
 $song_offset=$29;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $32=$3;
 var $33=_hio_read16b($32);
 var $34=$3;
 var $35=_hio_read16b($34);
 var $36=$3;
 var $37=_hio_read32b($36);
 $blockarr_offset=$37;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $40=$3;
 var $41=_hio_read32b($40);
 var $42=$3;
 var $43=_hio_read32b($42);
 $smplarr_offset=$43;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $46=$3;
 var $47=_hio_read32b($46);
 var $48=$3;
 var $49=_hio_read32b($48);
 $expdata_offset=$49;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $52=$3;
 var $53=_hio_read32b($52);
 var $54=$3;
 var $55=_hio_read16b($54);
 var $56=(($header+40)|0);
 HEAP16[(($56)>>1)]=$55;
 var $57=$3;
 var $58=_hio_read16b($57);
 var $59=(($header+42)|0);
 HEAP16[(($59)>>1)]=$58;
 var $60=$3;
 var $61=_hio_read16b($60);
 var $62=(($header+44)|0);
 HEAP16[(($62)>>1)]=$61;
 var $63=$3;
 var $64=_hio_read16b($63);
 var $65=(($header+46)|0);
 HEAP16[(($65)>>1)]=$64;
 var $66=$3;
 var $67=_hio_read16b($66);
 var $68=(($header+48)|0);
 HEAP16[(($68)>>1)]=$67;
 var $69=$3;
 var $70=_hio_read8($69);
 var $71=(($header+50)|0);
 HEAP8[($71)]=$70;
 var $72=$3;
 var $73=_hio_read8($72);
 var $74=(($header+51)|0);
 HEAP8[($74)]=$73;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $77=$3;
 var $78=$4;
 var $79=$song_offset;
 var $80=((($78)+($79))|0);
 var $81=_hio_seek($77,$80,0);
 var $82=($81|0)!=0;
 if($82){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=231;break;
 case 17: 
 $i=0;
 label=18;break;
 case 18: 
 var $86=$i;
 var $87=($86|0)<63;
 if($87){label=19;break;}else{label=21;break;}
 case 19: 
 var $89=$3;
 var $90=_hio_read16b($89);
 var $91=$i;
 var $92=(($song)|0);
 var $93=(($92+($91<<3))|0);
 var $94=(($93)|0);
 HEAP16[(($94)>>1)]=$90;
 var $95=$3;
 var $96=_hio_read16b($95);
 var $97=$i;
 var $98=(($song)|0);
 var $99=(($98+($97<<3))|0);
 var $100=(($99+2)|0);
 HEAP16[(($100)>>1)]=$96;
 var $101=$3;
 var $102=_hio_read8($101);
 var $103=$i;
 var $104=(($song)|0);
 var $105=(($104+($103<<3))|0);
 var $106=(($105+4)|0);
 HEAP8[($106)]=$102;
 var $107=$3;
 var $108=_hio_read8($107);
 var $109=$i;
 var $110=(($song)|0);
 var $111=(($110+($109<<3))|0);
 var $112=(($111+5)|0);
 HEAP8[($112)]=$108;
 var $113=$3;
 var $114=_hio_read8($113);
 var $115=$i;
 var $116=(($song)|0);
 var $117=(($116+($115<<3))|0);
 var $118=(($117+6)|0);
 HEAP8[($118)]=$114;
 var $119=$3;
 var $120=_hio_read8s($119);
 var $121=$i;
 var $122=(($song)|0);
 var $123=(($122+($121<<3))|0);
 var $124=(($123+7)|0);
 HEAP8[($124)]=$120;
 label=20;break;
 case 20: 
 var $126=$i;
 var $127=((($126)+(1))|0);
 $i=$127;
 label=18;break;
 case 21: 
 var $129=$3;
 var $130=_hio_read16b($129);
 var $131=(($song+504)|0);
 HEAP16[(($131)>>1)]=$130;
 var $132=$3;
 var $133=_hio_read16b($132);
 var $134=(($song+506)|0);
 HEAP16[(($134)>>1)]=$133;
 var $135=(($song+506)|0);
 var $136=HEAP16[(($135)>>1)];
 var $137=($136&65535);
 var $138=($137|0)>256;
 if($138){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=231;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 var $144=$i;
 var $145=($144|0)<256;
 if($145){label=27;break;}else{label=29;break;}
 case 27: 
 var $147=$3;
 var $148=_hio_read8($147);
 var $149=$i;
 var $150=(($song+508)|0);
 var $151=(($150+$149)|0);
 HEAP8[($151)]=$148;
 label=28;break;
 case 28: 
 var $153=$i;
 var $154=((($153)+(1))|0);
 $i=$154;
 label=26;break;
 case 29: 
 var $156=$3;
 var $157=_hio_read16b($156);
 var $158=(($song+764)|0);
 HEAP16[(($158)>>1)]=$157;
 var $159=$3;
 var $160=_hio_read8($159);
 var $161=(($song+766)|0);
 HEAP8[($161)]=$160;
 var $162=$3;
 var $163=_hio_read8($162);
 var $164=(($song+767)|0);
 HEAP8[($164)]=$163;
 var $165=$3;
 var $166=_hio_read8($165);
 var $167=(($song+768)|0);
 HEAP8[($167)]=$166;
 var $168=$3;
 var $169=_hio_read8($168);
 var $170=(($song+769)|0);
 HEAP8[($170)]=$169;
 $i=0;
 label=30;break;
 case 30: 
 var $172=$i;
 var $173=($172|0)<16;
 if($173){label=31;break;}else{label=33;break;}
 case 31: 
 var $175=$3;
 var $176=_hio_read8($175);
 var $177=$i;
 var $178=(($song+770)|0);
 var $179=(($178+$177)|0);
 HEAP8[($179)]=$176;
 label=32;break;
 case 32: 
 var $181=$i;
 var $182=((($181)+(1))|0);
 $i=$182;
 label=30;break;
 case 33: 
 var $184=$3;
 var $185=_hio_read8($184);
 var $186=(($song+786)|0);
 HEAP8[($186)]=$185;
 var $187=$3;
 var $188=_hio_read8($187);
 var $189=(($song+787)|0);
 HEAP8[($189)]=$188;
 var $190=$2;
 var $191=(($190+1264)|0);
 HEAP32[(($191)>>2)]=8363;
 var $192=(($song+767)|0);
 var $193=HEAP8[($192)];
 var $194=($193&255);
 var $195=$194&32;
 var $196=($195|0)!=0;
 var $197=($196?0:192);
 var $198=$2;
 var $199=(($198+1280)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$200|$197;
 HEAP32[(($199)>>2)]=$201;
 var $202=(($song+767)|0);
 var $203=HEAP8[($202)];
 var $204=($203&255);
 var $205=$204&64;
 $med_8ch=$205;
 var $206=(($song+768)|0);
 var $207=HEAP8[($206)];
 var $208=($207&255);
 var $209=$208&32;
 $bpm_on=$209;
 var $210=(($song+768)|0);
 var $211=HEAP8[($210)];
 var $212=($211&255);
 var $213=$212&31;
 var $214=((($213)+(1))|0);
 $bpmlen=$214;
 var $215=$2;
 var $216=(($215+1256)|0);
 HEAPF64[(($216)>>3)]=2.64;
 var $217=$2;
 var $218=$med_8ch;
 var $219=(($song+764)|0);
 var $220=HEAP16[(($219)>>1)];
 var $221=($220&65535);
 var $222=$bpm_on;
 var $223=$bpmlen;
 _mmd_set_bpm($217,$218,$221,$222,$223);
 var $224=(($song+769)|0);
 var $225=HEAP8[($224)];
 var $226=($225&255);
 var $227=$mod;
 var $228=(($227+148)|0);
 HEAP32[(($228)>>2)]=$226;
 var $229=(($song+504)|0);
 var $230=HEAP16[(($229)>>1)];
 var $231=($230&65535);
 var $232=$mod;
 var $233=(($232+128)|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=(($song+787)|0);
 var $235=HEAP8[($234)];
 var $236=($235&255);
 var $237=$mod;
 var $238=(($237+140)|0);
 HEAP32[(($238)>>2)]=$236;
 var $239=(($song+506)|0);
 var $240=HEAP16[(($239)>>1)];
 var $241=($240&65535);
 var $242=$mod;
 var $243=(($242+156)|0);
 HEAP32[(($243)>>2)]=$241;
 var $244=$mod;
 var $245=(($244+160)|0);
 HEAP32[(($245)>>2)]=0;
 var $246=$mod;
 var $247=(($246+136)|0);
 HEAP32[(($247)>>2)]=0;
 var $248=$mod;
 var $249=(($248+952)|0);
 var $250=$249;
 var $251=(($song+508)|0);
 var $252=$251;
 var $253=$mod;
 var $254=(($253+156)|0);
 var $255=HEAP32[(($254)>>2)];
 assert($255 % 1 === 0);(_memcpy($250, $252, $255)|0);
 var $256=$mod;
 var $257=(($256)|0);
 var $258=(($257)|0);
 HEAP8[($258)]=0;
 var $259=$mod;
 var $260=(($259+144)|0);
 HEAP32[(($260)>>2)]=0;
 $i=0;
 label=34;break;
 case 34: 
 var $262=$i;
 var $263=$mod;
 var $264=(($263+140)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($262|0)<($265|0);
 if($266){label=35;break;}else{label=46;break;}
 case 35: 
 var $268=$3;
 var $269=$4;
 var $270=$smplarr_offset;
 var $271=((($269)+($270))|0);
 var $272=$i;
 var $273=($272<<2);
 var $274=((($271)+($273))|0);
 var $275=_hio_seek($268,$274,0);
 var $276=($275|0)!=0;
 if($276){label=36;break;}else{label=37;break;}
 case 36: 
 $1=-1;
 label=231;break;
 case 37: 
 var $279=$3;
 var $280=_hio_read32b($279);
 $smpl_offset=$280;
 var $281=$smpl_offset;
 var $282=($281|0)==0;
 if($282){label=38;break;}else{label=39;break;}
 case 38: 
 label=45;break;
 case 39: 
 var $285=$3;
 var $286=$4;
 var $287=$smpl_offset;
 var $288=((($286)+($287))|0);
 var $289=_hio_seek($285,$288,0);
 var $290=($289|0)!=0;
 if($290){label=40;break;}else{label=41;break;}
 case 40: 
 $1=-1;
 label=231;break;
 case 41: 
 var $293=$3;
 var $294=_hio_read32b($293);
 var $295=$3;
 var $296=_hio_read16b($295);
 $type=$296;
 var $297=$type;
 var $298=(($297<<16)>>16);
 var $299=($298|0)==-1;
 if($299){label=42;break;}else{label=43;break;}
 case 42: 
 var $301=$3;
 var $302=_hio_seek($301,14,1);
 var $303=$3;
 var $304=_hio_read16b($303);
 var $305=($304&65535);
 var $306=$mod;
 var $307=(($306+144)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=((($308)+($305))|0);
 HEAP32[(($307)>>2)]=$309;
 label=44;break;
 case 43: 
 var $311=$mod;
 var $312=(($311+144)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=((($313)+(1))|0);
 HEAP32[(($312)>>2)]=$314;
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $317=$i;
 var $318=((($317)+(1))|0);
 $i=$318;
 label=34;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $322=(($expdata+8)|0);
 HEAP16[(($322)>>1)]=0;
 var $323=(($expdata+10)|0);
 HEAP16[(($323)>>1)]=0;
 var $324=(($expdata+24)|0);
 HEAP16[(($324)>>1)]=0;
 var $325=(($expdata+26)|0);
 HEAP16[(($325)>>1)]=0;
 $expsmp_offset=0;
 $iinfo_offset=0;
 var $326=$expdata_offset;
 var $327=($326|0)!=0;
 if($327){label=49;break;}else{label=66;break;}
 case 49: 
 var $329=$3;
 var $330=$4;
 var $331=$expdata_offset;
 var $332=((($330)+($331))|0);
 var $333=_hio_seek($329,$332,0);
 var $334=($333|0)!=0;
 if($334){label=50;break;}else{label=51;break;}
 case 50: 
 $1=-1;
 label=231;break;
 case 51: 
 var $337=$3;
 var $338=_hio_read32b($337);
 var $339=$3;
 var $340=_hio_read32b($339);
 $expsmp_offset=$340;
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 var $343=$3;
 var $344=_hio_read16b($343);
 var $345=(($expdata+8)|0);
 HEAP16[(($345)>>1)]=$344;
 var $346=$3;
 var $347=_hio_read16b($346);
 var $348=(($expdata+10)|0);
 HEAP16[(($348)>>1)]=$347;
 var $349=$3;
 var $350=_hio_read32b($349);
 var $351=$3;
 var $352=_hio_read32b($351);
 var $353=$3;
 var $354=_hio_read32b($353);
 $iinfo_offset=$354;
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 var $357=$3;
 var $358=_hio_read16b($357);
 var $359=(($expdata+24)|0);
 HEAP16[(($359)>>1)]=$358;
 var $360=$3;
 var $361=_hio_read16b($360);
 var $362=(($expdata+26)|0);
 HEAP16[(($362)>>1)]=$361;
 var $363=$3;
 var $364=_hio_read32b($363);
 var $365=$3;
 var $366=_hio_read32b($365);
 var $367=$3;
 var $368=_hio_read32b($367);
 var $369=$3;
 var $370=_hio_read32b($369);
 var $371=$3;
 var $372=_hio_read32b($371);
 $songname_offset=$372;
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $375=$3;
 var $376=_hio_read32b($375);
 var $377=(($expdata+48)|0);
 HEAP32[(($377)>>2)]=$376;
 var $378=$3;
 var $379=$4;
 var $380=$songname_offset;
 var $381=((($379)+($380))|0);
 var $382=_hio_seek($378,$381,0);
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $i=0;
 label=60;break;
 case 60: 
 var $386=$i;
 var $387=(($expdata+48)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=($386>>>0)<($388>>>0);
 if($389){label=61;break;}else{label=65;break;}
 case 61: 
 var $391=$i;
 var $392=($391|0)>=64;
 if($392){label=62;break;}else{label=63;break;}
 case 62: 
 label=65;break;
 case 63: 
 var $395=$3;
 var $396=_hio_read8($395);
 var $397=$i;
 var $398=$mod;
 var $399=(($398)|0);
 var $400=(($399+$397)|0);
 HEAP8[($400)]=$396;
 label=64;break;
 case 64: 
 var $402=$i;
 var $403=((($402)+(1))|0);
 $i=$403;
 label=60;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 $i=0;
 label=69;break;
 case 69: 
 var $409=$i;
 var $410=$mod;
 var $411=(($410+128)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=($409|0)<($412|0);
 if($413){label=70;break;}else{label=85;break;}
 case 70: 
 var $415=$3;
 var $416=$4;
 var $417=$blockarr_offset;
 var $418=((($416)+($417))|0);
 var $419=$i;
 var $420=($419<<2);
 var $421=((($418)+($420))|0);
 var $422=_hio_seek($415,$421,0);
 var $423=($422|0)!=0;
 if($423){label=71;break;}else{label=72;break;}
 case 71: 
 $1=-1;
 label=231;break;
 case 72: 
 var $426=$3;
 var $427=_hio_read32b($426);
 $block_offset=$427;
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 var $430=$block_offset;
 var $431=($430|0)==0;
 if($431){label=75;break;}else{label=76;break;}
 case 75: 
 label=84;break;
 case 76: 
 var $434=$3;
 var $435=$4;
 var $436=$block_offset;
 var $437=((($435)+($436))|0);
 var $438=_hio_seek($434,$437,0);
 var $439=($438|0)!=0;
 if($439){label=77;break;}else{label=78;break;}
 case 77: 
 $1=-1;
 label=231;break;
 case 78: 
 var $442=$ver;
 var $443=($442|0)>0;
 if($443){label=79;break;}else{label=80;break;}
 case 79: 
 var $445=$3;
 var $446=_hio_read16b($445);
 var $447=(($block)|0);
 HEAP16[(($447)>>1)]=$446;
 var $448=$3;
 var $449=_hio_read16b($448);
 var $450=(($block+2)|0);
 HEAP16[(($450)>>1)]=$449;
 label=81;break;
 case 80: 
 var $452=$3;
 var $453=_hio_read8($452);
 var $454=($453&255);
 var $455=(($block)|0);
 HEAP16[(($455)>>1)]=$454;
 var $456=$3;
 var $457=_hio_read8($456);
 var $458=($457&255);
 var $459=(($block+2)|0);
 HEAP16[(($459)>>1)]=$458;
 label=81;break;
 case 81: 
 var $461=(($block)|0);
 var $462=HEAP16[(($461)>>1)];
 var $463=($462&65535);
 var $464=$mod;
 var $465=(($464+136)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=($463|0)>($466|0);
 if($467){label=82;break;}else{label=83;break;}
 case 82: 
 var $469=(($block)|0);
 var $470=HEAP16[(($469)>>1)];
 var $471=($470&65535);
 var $472=$mod;
 var $473=(($472+136)|0);
 HEAP32[(($473)>>2)]=$471;
 label=83;break;
 case 83: 
 label=84;break;
 case 84: 
 var $476=$i;
 var $477=((($476)+(1))|0);
 $i=$477;
 label=69;break;
 case 85: 
 var $479=$mod;
 var $480=(($479+128)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=$mod;
 var $483=(($482+136)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=(Math_imul($481,$484)|0);
 var $486=$mod;
 var $487=(($486+132)|0);
 HEAP32[(($487)>>2)]=$485;
 var $488=$2;
 var $489=$ver;
 var $490=($489|0)==0;
 if($490){label=86;break;}else{label=87;break;}
 case 86: 
 var $492=$mod;
 var $493=(($492+136)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=($494|0)>4;
 var $496=($495?26504:24712);
 var $499=$496;label=88;break;
 case 87: 
 var $499=23608;label=88;break;
 case 88: 
 var $499;
 _set_type($488,$499,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=89;break;
 case 89: 
 label=90;break;
 case 90: 
 label=91;break;
 case 91: 
 label=92;break;
 case 92: 
 label=93;break;
 case 93: 
 label=94;break;
 case 94: 
 label=95;break;
 case 95: 
 label=96;break;
 case 96: 
 label=97;break;
 case 97: 
 label=98;break;
 case 98: 
 label=99;break;
 case 99: 
 label=100;break;
 case 100: 
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 var $514=$mod;
 var $515=_pattern_init($514);
 var $516=($515|0)<0;
 if($516){label=103;break;}else{label=104;break;}
 case 103: 
 $1=-1;
 label=231;break;
 case 104: 
 $i=0;
 label=105;break;
 case 105: 
 var $520=$i;
 var $521=$mod;
 var $522=(($521+128)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=($520|0)<($523|0);
 if($524){label=106;break;}else{label=148;break;}
 case 106: 
 var $526=$3;
 var $527=$4;
 var $528=$blockarr_offset;
 var $529=((($527)+($528))|0);
 var $530=$i;
 var $531=($530<<2);
 var $532=((($529)+($531))|0);
 var $533=_hio_seek($526,$532,0);
 var $534=($533|0)!=0;
 if($534){label=107;break;}else{label=108;break;}
 case 107: 
 $1=-1;
 label=231;break;
 case 108: 
 var $537=$3;
 var $538=_hio_read32b($537);
 $block_offset1=$538;
 var $539=$block_offset1;
 var $540=($539|0)==0;
 if($540){label=109;break;}else{label=110;break;}
 case 109: 
 label=147;break;
 case 110: 
 var $543=$3;
 var $544=$4;
 var $545=$block_offset1;
 var $546=((($544)+($545))|0);
 var $547=_hio_seek($543,$546,0);
 var $548=($547|0)!=0;
 if($548){label=111;break;}else{label=112;break;}
 case 111: 
 $1=-1;
 label=231;break;
 case 112: 
 var $551=$ver;
 var $552=($551|0)>0;
 if($552){label=113;break;}else{label=114;break;}
 case 113: 
 var $554=$3;
 var $555=_hio_read16b($554);
 var $556=(($block)|0);
 HEAP16[(($556)>>1)]=$555;
 var $557=$3;
 var $558=_hio_read16b($557);
 var $559=(($block+2)|0);
 HEAP16[(($559)>>1)]=$558;
 var $560=$3;
 var $561=_hio_read32b($560);
 label=115;break;
 case 114: 
 var $563=$3;
 var $564=_hio_read8($563);
 var $565=($564&255);
 var $566=(($block)|0);
 HEAP16[(($566)>>1)]=$565;
 var $567=$3;
 var $568=_hio_read8($567);
 var $569=($568&255);
 var $570=(($block+2)|0);
 HEAP16[(($570)>>1)]=$569;
 label=115;break;
 case 115: 
 var $572=$mod;
 var $573=$i;
 var $574=(($block+2)|0);
 var $575=HEAP16[(($574)>>1)];
 var $576=($575&65535);
 var $577=((($576)+(1))|0);
 var $578=_pattern_tracks_alloc($572,$573,$577);
 var $579=($578|0)<0;
 if($579){label=116;break;}else{label=117;break;}
 case 116: 
 $1=-1;
 label=231;break;
 case 117: 
 var $582=$ver;
 var $583=($582|0)>0;
 if($583){label=118;break;}else{label=132;break;}
 case 118: 
 $j=0;
 label=119;break;
 case 119: 
 var $586=$j;
 var $587=$i;
 var $588=$mod;
 var $589=(($588+168)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590+($587<<2))|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(($592)|0);
 var $594=HEAP32[(($593)>>2)];
 var $595=($586|0)<($594|0);
 if($595){label=120;break;}else{label=131;break;}
 case 120: 
 $k=0;
 label=121;break;
 case 121: 
 var $598=$k;
 var $599=(($block)|0);
 var $600=HEAP16[(($599)>>1)];
 var $601=($600&65535);
 var $602=($598|0)<($601|0);
 if($602){label=122;break;}else{label=129;break;}
 case 122: 
 var $604=$3;
 var $605=_hio_read8($604);
 var $606=(($e)|0);
 HEAP8[($606)]=$605;
 var $607=$3;
 var $608=_hio_read8($607);
 var $609=(($e+1)|0);
 HEAP8[($609)]=$608;
 var $610=$3;
 var $611=_hio_read8($610);
 var $612=(($e+2)|0);
 HEAP8[($612)]=$611;
 var $613=$3;
 var $614=_hio_read8($613);
 var $615=(($e+3)|0);
 HEAP8[($615)]=$614;
 var $616=$j;
 var $617=$k;
 var $618=$i;
 var $619=$2;
 var $620=(($619)|0);
 var $621=(($620+168)|0);
 var $622=HEAP32[(($621)>>2)];
 var $623=(($622+($618<<2))|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=(($624+4)|0);
 var $626=(($625+($617<<2))|0);
 var $627=HEAP32[(($626)>>2)];
 var $628=$2;
 var $629=(($628)|0);
 var $630=(($629+172)|0);
 var $631=HEAP32[(($630)>>2)];
 var $632=(($631+($627<<2))|0);
 var $633=HEAP32[(($632)>>2)];
 var $634=(($633+4)|0);
 var $635=(($634+($616<<3))|0);
 $event=$635;
 var $636=(($e)|0);
 var $637=HEAP8[($636)];
 var $638=($637&255);
 var $639=$638&127;
 var $640=(($639)&255);
 var $641=$event;
 var $642=(($641)|0);
 HEAP8[($642)]=$640;
 var $643=$event;
 var $644=(($643)|0);
 var $645=HEAP8[($644)];
 var $646=(($645<<24)>>24)!=0;
 if($646){label=123;break;}else{label=124;break;}
 case 123: 
 var $648=(($song+766)|0);
 var $649=HEAP8[($648)];
 var $650=(($649<<24)>>24);
 var $651=((($650)+(48))|0);
 var $652=$event;
 var $653=(($652)|0);
 var $654=HEAP8[($653)];
 var $655=($654&255);
 var $656=((($655)+($651))|0);
 var $657=(($656)&255);
 HEAP8[($653)]=$657;
 label=124;break;
 case 124: 
 var $659=(($e+1)|0);
 var $660=HEAP8[($659)];
 var $661=($660&255);
 var $662=$661&63;
 var $663=(($662)&255);
 var $664=$event;
 var $665=(($664+1)|0);
 HEAP8[($665)]=$663;
 var $666=$event;
 var $667=(($666+1)|0);
 var $668=HEAP8[($667)];
 var $669=($668&255);
 var $670=($669|0)!=0;
 if($670){label=125;break;}else{label=127;break;}
 case 125: 
 var $672=$event;
 var $673=(($672)|0);
 var $674=HEAP8[($673)];
 var $675=(($674<<24)>>24)!=0;
 if($675){label=127;break;}else{label=126;break;}
 case 126: 
 var $677=$event;
 var $678=(($677+5)|0);
 HEAP8[($678)]=-79;
 var $679=$event;
 var $680=(($679+1)|0);
 var $681=HEAP8[($680)];
 var $682=$event;
 var $683=(($682+6)|0);
 HEAP8[($683)]=$681;
 var $684=$event;
 var $685=(($684+1)|0);
 HEAP8[($685)]=0;
 label=127;break;
 case 127: 
 var $687=(($e+2)|0);
 var $688=HEAP8[($687)];
 var $689=$event;
 var $690=(($689+3)|0);
 HEAP8[($690)]=$688;
 var $691=(($e+3)|0);
 var $692=HEAP8[($691)];
 var $693=$event;
 var $694=(($693+4)|0);
 HEAP8[($694)]=$692;
 var $695=$event;
 var $696=$bpm_on;
 var $697=$bpmlen;
 var $698=$med_8ch;
 _mmd_xlat_fx($695,$696,$697,$698);
 label=128;break;
 case 128: 
 var $700=$k;
 var $701=((($700)+(1))|0);
 $k=$701;
 label=121;break;
 case 129: 
 label=130;break;
 case 130: 
 var $704=$j;
 var $705=((($704)+(1))|0);
 $j=$705;
 label=119;break;
 case 131: 
 label=146;break;
 case 132: 
 $j=0;
 label=133;break;
 case 133: 
 var $709=$j;
 var $710=$i;
 var $711=$mod;
 var $712=(($711+168)|0);
 var $713=HEAP32[(($712)>>2)];
 var $714=(($713+($710<<2))|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=(($715)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=($709|0)<($717|0);
 if($718){label=134;break;}else{label=145;break;}
 case 134: 
 $k=0;
 label=135;break;
 case 135: 
 var $721=$k;
 var $722=(($block)|0);
 var $723=HEAP16[(($722)>>1)];
 var $724=($723&65535);
 var $725=($721|0)<($724|0);
 if($725){label=136;break;}else{label=143;break;}
 case 136: 
 var $727=$3;
 var $728=_hio_read8($727);
 var $729=(($e)|0);
 HEAP8[($729)]=$728;
 var $730=$3;
 var $731=_hio_read8($730);
 var $732=(($e+1)|0);
 HEAP8[($732)]=$731;
 var $733=$3;
 var $734=_hio_read8($733);
 var $735=(($e+2)|0);
 HEAP8[($735)]=$734;
 var $736=$j;
 var $737=$k;
 var $738=$i;
 var $739=$2;
 var $740=(($739)|0);
 var $741=(($740+168)|0);
 var $742=HEAP32[(($741)>>2)];
 var $743=(($742+($738<<2))|0);
 var $744=HEAP32[(($743)>>2)];
 var $745=(($744+4)|0);
 var $746=(($745+($737<<2))|0);
 var $747=HEAP32[(($746)>>2)];
 var $748=$2;
 var $749=(($748)|0);
 var $750=(($749+172)|0);
 var $751=HEAP32[(($750)>>2)];
 var $752=(($751+($747<<2))|0);
 var $753=HEAP32[(($752)>>2)];
 var $754=(($753+4)|0);
 var $755=(($754+($736<<3))|0);
 $event=$755;
 var $756=(($e)|0);
 var $757=HEAP8[($756)];
 var $758=($757&255);
 var $759=$758&63;
 var $760=(($759)&255);
 var $761=$event;
 var $762=(($761)|0);
 HEAP8[($762)]=$760;
 var $763=$event;
 var $764=(($763)|0);
 var $765=HEAP8[($764)];
 var $766=(($765<<24)>>24)!=0;
 if($766){label=137;break;}else{label=138;break;}
 case 137: 
 var $768=$event;
 var $769=(($768)|0);
 var $770=HEAP8[($769)];
 var $771=($770&255);
 var $772=((($771)+(48))|0);
 var $773=(($772)&255);
 HEAP8[($769)]=$773;
 label=138;break;
 case 138: 
 var $775=(($e+1)|0);
 var $776=HEAP8[($775)];
 var $777=($776&255);
 var $778=$777>>4;
 var $779=(($e)|0);
 var $780=HEAP8[($779)];
 var $781=($780&255);
 var $782=$781&128;
 var $783=$782>>3;
 var $784=$778|$783;
 var $785=(($e)|0);
 var $786=HEAP8[($785)];
 var $787=($786&255);
 var $788=$787&64;
 var $789=$788>>1;
 var $790=$784|$789;
 var $791=(($790)&255);
 var $792=$event;
 var $793=(($792+1)|0);
 HEAP8[($793)]=$791;
 var $794=$event;
 var $795=(($794+1)|0);
 var $796=HEAP8[($795)];
 var $797=($796&255);
 var $798=($797|0)!=0;
 if($798){label=139;break;}else{label=141;break;}
 case 139: 
 var $800=$event;
 var $801=(($800)|0);
 var $802=HEAP8[($801)];
 var $803=(($802<<24)>>24)!=0;
 if($803){label=141;break;}else{label=140;break;}
 case 140: 
 var $805=$event;
 var $806=(($805+5)|0);
 HEAP8[($806)]=-79;
 var $807=$event;
 var $808=(($807+1)|0);
 var $809=HEAP8[($808)];
 var $810=$event;
 var $811=(($810+6)|0);
 HEAP8[($811)]=$809;
 var $812=$event;
 var $813=(($812+1)|0);
 HEAP8[($813)]=0;
 label=141;break;
 case 141: 
 var $815=(($e+1)|0);
 var $816=HEAP8[($815)];
 var $817=($816&255);
 var $818=$817&15;
 var $819=(($818)&255);
 var $820=$event;
 var $821=(($820+3)|0);
 HEAP8[($821)]=$819;
 var $822=(($e+2)|0);
 var $823=HEAP8[($822)];
 var $824=$event;
 var $825=(($824+4)|0);
 HEAP8[($825)]=$823;
 var $826=$event;
 var $827=$bpm_on;
 var $828=$bpmlen;
 var $829=$med_8ch;
 _mmd_xlat_fx($826,$827,$828,$829);
 label=142;break;
 case 142: 
 var $831=$k;
 var $832=((($831)+(1))|0);
 $k=$832;
 label=135;break;
 case 143: 
 label=144;break;
 case 144: 
 var $835=$j;
 var $836=((($835)+(1))|0);
 $j=$836;
 label=133;break;
 case 145: 
 label=146;break;
 case 146: 
 label=147;break;
 case 147: 
 var $840=$i;
 var $841=((($840)+(1))|0);
 $i=$841;
 label=105;break;
 case 148: 
 var $843=$2;
 var $844=_med_new_module_extras($843);
 var $845=($844|0)!=0;
 if($845){label=149;break;}else{label=150;break;}
 case 149: 
 $1=-1;
 label=231;break;
 case 150: 
 label=151;break;
 case 151: 
 label=152;break;
 case 152: 
 var $850=$mod;
 var $851=_instrument_init($850);
 var $852=($851|0)<0;
 if($852){label=153;break;}else{label=154;break;}
 case 153: 
 $1=-1;
 label=231;break;
 case 154: 
 label=155;break;
 case 155: 
 label=156;break;
 case 156: 
 $i=0;
 $smp_idx=0;
 label=157;break;
 case 157: 
 var $858=$i;
 var $859=$mod;
 var $860=(($859+140)|0);
 var $861=HEAP32[(($860)>>2)];
 var $862=($858|0)<($861|0);
 if($862){label=158;break;}else{label=206;break;}
 case 158: 
 var $864=$name;
 _memset($864, 0, 40)|0;
 var $865=$3;
 var $866=$4;
 var $867=$smplarr_offset;
 var $868=((($866)+($867))|0);
 var $869=$i;
 var $870=($869<<2);
 var $871=((($868)+($870))|0);
 var $872=_hio_seek($865,$871,0);
 var $873=($872|0)!=0;
 if($873){label=159;break;}else{label=160;break;}
 case 159: 
 $1=-1;
 label=231;break;
 case 160: 
 var $876=$3;
 var $877=_hio_read32b($876);
 $smpl_offset2=$877;
 label=161;break;
 case 161: 
 label=162;break;
 case 162: 
 var $880=$smpl_offset2;
 var $881=($880|0)==0;
 if($881){label=163;break;}else{label=164;break;}
 case 163: 
 label=205;break;
 case 164: 
 var $884=$3;
 var $885=$4;
 var $886=$smpl_offset2;
 var $887=((($885)+($886))|0);
 var $888=_hio_seek($884,$887,0);
 var $889=($888|0)!=0;
 if($889){label=165;break;}else{label=166;break;}
 case 165: 
 $1=-1;
 label=231;break;
 case 166: 
 var $892=$3;
 var $893=_hio_read32b($892);
 var $894=(($instr)|0);
 HEAP32[(($894)>>2)]=$893;
 var $895=$3;
 var $896=_hio_read16b($895);
 var $897=(($instr+4)|0);
 HEAP16[(($897)>>1)]=$896;
 var $898=$3;
 var $899=_hio_tell($898);
 $pos=$899;
 var $900=$expdata_offset;
 var $901=($900|0)!=0;
 if($901){label=167;break;}else{label=171;break;}
 case 167: 
 var $903=$i;
 var $904=(($expdata+24)|0);
 var $905=HEAP16[(($904)>>1)];
 var $906=($905&65535);
 var $907=($903|0)<($906|0);
 if($907){label=168;break;}else{label=171;break;}
 case 168: 
 var $909=$3;
 var $910=$iinfo_offset;
 var $911=$i;
 var $912=(($expdata+26)|0);
 var $913=HEAP16[(($912)>>1)];
 var $914=($913&65535);
 var $915=(Math_imul($911,$914)|0);
 var $916=((($910)+($915))|0);
 var $917=_hio_seek($909,$916,0);
 var $918=($917|0)!=0;
 if($918){label=169;break;}else{label=170;break;}
 case 169: 
 $1=-1;
 label=231;break;
 case 170: 
 var $921=(($name)|0);
 var $922=$3;
 var $923=_hio_read($921,40,1,$922);
 label=171;break;
 case 171: 
 label=172;break;
 case 172: 
 label=173;break;
 case 173: 
 var $927=(($exp_smp+3)|0);
 HEAP8[($927)]=0;
 var $928=$expdata_offset;
 var $929=($928|0)!=0;
 if($929){label=174;break;}else{label=178;break;}
 case 174: 
 var $931=$i;
 var $932=(($expdata+8)|0);
 var $933=HEAP16[(($932)>>1)];
 var $934=($933&65535);
 var $935=($931|0)<($934|0);
 if($935){label=175;break;}else{label=178;break;}
 case 175: 
 var $937=$3;
 var $938=$expsmp_offset;
 var $939=$i;
 var $940=(($expdata+10)|0);
 var $941=HEAP16[(($940)>>1)];
 var $942=($941&65535);
 var $943=(Math_imul($939,$942)|0);
 var $944=((($938)+($943))|0);
 var $945=_hio_seek($937,$944,0);
 var $946=($945|0)!=0;
 if($946){label=176;break;}else{label=177;break;}
 case 176: 
 $1=-1;
 label=231;break;
 case 177: 
 var $949=$3;
 var $950=_hio_read8($949);
 var $951=(($exp_smp)|0);
 HEAP8[($951)]=$950;
 var $952=$3;
 var $953=_hio_read8($952);
 var $954=(($exp_smp+1)|0);
 HEAP8[($954)]=$953;
 var $955=$3;
 var $956=_hio_read8($955);
 var $957=(($exp_smp+2)|0);
 HEAP8[($957)]=$956;
 var $958=$3;
 var $959=_hio_read8($958);
 var $960=(($exp_smp+3)|0);
 HEAP8[($960)]=$959;
 label=178;break;
 case 178: 
 var $962=$3;
 var $963=$pos;
 var $964=_hio_seek($962,$963,0);
 var $965=(($instr+4)|0);
 var $966=HEAP16[(($965)>>1)];
 var $967=(($966<<16)>>16);
 var $968=($967|0)==-2;
 if($968){label=179;break;}else{label=184;break;}
 case 179: 
 var $970=$3;
 var $971=$2;
 var $972=$i;
 var $973=$smp_idx;
 var $974=$i;
 var $975=(($song)|0);
 var $976=(($975+($974<<3))|0);
 var $977=_mmd_load_hybrid_instrument($970,$971,$972,$973,$synth,$exp_smp,$976);
 $ret=$977;
 var $978=$smp_idx;
 var $979=((($978)+(1))|0);
 $smp_idx=$979;
 var $980=$ret;
 var $981=($980|0)<0;
 if($981){label=180;break;}else{label=181;break;}
 case 180: 
 $1=-1;
 label=231;break;
 case 181: 
 var $984=$2;
 var $985=$i;
 var $986=_mmd_alloc_tables($984,$985,$synth);
 var $987=($986|0)!=0;
 if($987){label=182;break;}else{label=183;break;}
 case 182: 
 $1=-1;
 label=231;break;
 case 183: 
 label=205;break;
 case 184: 
 var $991=(($instr+4)|0);
 var $992=HEAP16[(($991)>>1)];
 var $993=(($992<<16)>>16);
 var $994=($993|0)==-1;
 if($994){label=185;break;}else{label=192;break;}
 case 185: 
 var $996=$3;
 var $997=$2;
 var $998=$i;
 var $999=$smp_idx;
 var $1000=$i;
 var $1001=(($song)|0);
 var $1002=(($1001+($1000<<3))|0);
 var $1003=_mmd_load_synth_instrument($996,$997,$998,$999,$synth,$exp_smp,$1002);
 $ret3=$1003;
 var $1004=$ret3;
 var $1005=($1004|0)>0;
 if($1005){label=186;break;}else{label=187;break;}
 case 186: 
 label=205;break;
 case 187: 
 var $1008=$ret3;
 var $1009=($1008|0)<0;
 if($1009){label=188;break;}else{label=189;break;}
 case 188: 
 $1=-1;
 label=231;break;
 case 189: 
 var $1012=(($synth+20)|0);
 var $1013=HEAP16[(($1012)>>1)];
 var $1014=($1013&65535);
 var $1015=$smp_idx;
 var $1016=((($1015)+($1014))|0);
 $smp_idx=$1016;
 var $1017=$2;
 var $1018=$i;
 var $1019=_mmd_alloc_tables($1017,$1018,$synth);
 var $1020=($1019|0)!=0;
 if($1020){label=190;break;}else{label=191;break;}
 case 190: 
 $1=-1;
 label=231;break;
 case 191: 
 label=205;break;
 case 192: 
 var $1024=(($instr+4)|0);
 var $1025=HEAP16[(($1024)>>1)];
 var $1026=(($1025<<16)>>16);
 var $1027=($1026|0)!=0;
 if($1027){label=193;break;}else{label=194;break;}
 case 193: 
 label=205;break;
 case 194: 
 var $1030=$i;
 var $1031=$mod;
 var $1032=(($1031+176)|0);
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=(($1033+((($1030)*(764))&-1))|0);
 var $1035=(($1034+36)|0);
 HEAP32[(($1035)>>2)]=1;
 var $1036=$mod;
 var $1037=$i;
 var $1038=_subinstrument_alloc($1036,$1037,1);
 var $1039=($1038|0)<0;
 if($1039){label=195;break;}else{label=196;break;}
 case 195: 
 $1=-1;
 label=231;break;
 case 196: 
 var $1042=$i;
 var $1043=$mod;
 var $1044=(($1043+176)|0);
 var $1045=HEAP32[(($1044)>>2)];
 var $1046=(($1045+((($1042)*(764))&-1))|0);
 var $1047=(($1046+756)|0);
 var $1048=HEAP32[(($1047)>>2)];
 var $1049=(($1048)|0);
 $sub=$1049;
 var $1050=$i;
 var $1051=(($song)|0);
 var $1052=(($1051+($1050<<3))|0);
 var $1053=(($1052+6)|0);
 var $1054=HEAP8[($1053)];
 var $1055=($1054&255);
 var $1056=$sub;
 var $1057=(($1056)|0);
 HEAP32[(($1057)>>2)]=$1055;
 var $1058=$sub;
 var $1059=(($1058+8)|0);
 HEAP32[(($1059)>>2)]=128;
 var $1060=$i;
 var $1061=(($song)|0);
 var $1062=(($1061+($1060<<3))|0);
 var $1063=(($1062+7)|0);
 var $1064=HEAP8[($1063)];
 var $1065=(($1064<<24)>>24);
 var $1066=$sub;
 var $1067=(($1066+12)|0);
 HEAP32[(($1067)>>2)]=$1065;
 var $1068=$smp_idx;
 var $1069=$sub;
 var $1070=(($1069+40)|0);
 HEAP32[(($1070)>>2)]=$1068;
 var $1071=(($exp_smp+3)|0);
 var $1072=HEAP8[($1071)];
 var $1073=(($1072<<24)>>24);
 var $1074=$1073<<4;
 var $1075=$sub;
 var $1076=(($1075+16)|0);
 HEAP32[(($1076)>>2)]=$1074;
 var $1077=$smp_idx;
 var $1078=$mod;
 var $1079=(($1078+180)|0);
 var $1080=HEAP32[(($1079)>>2)];
 var $1081=(($1080+((($1077)*(52))&-1))|0);
 $xxs=$1081;
 var $1082=(($instr)|0);
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=$xxs;
 var $1085=(($1084+32)|0);
 HEAP32[(($1085)>>2)]=$1083;
 var $1086=$i;
 var $1087=(($song)|0);
 var $1088=(($1087+($1086<<3))|0);
 var $1089=(($1088)|0);
 var $1090=HEAP16[(($1089)>>1)];
 var $1091=($1090&65535);
 var $1092=($1091<<1);
 var $1093=$xxs;
 var $1094=(($1093+36)|0);
 HEAP32[(($1094)>>2)]=$1092;
 var $1095=$xxs;
 var $1096=(($1095+36)|0);
 var $1097=HEAP32[(($1096)>>2)];
 var $1098=$i;
 var $1099=(($song)|0);
 var $1100=(($1099+($1098<<3))|0);
 var $1101=(($1100+2)|0);
 var $1102=HEAP16[(($1101)>>1)];
 var $1103=($1102&65535);
 var $1104=($1103<<1);
 var $1105=((($1097)+($1104))|0);
 var $1106=$xxs;
 var $1107=(($1106+40)|0);
 HEAP32[(($1107)>>2)]=$1105;
 var $1108=$xxs;
 var $1109=(($1108+44)|0);
 HEAP32[(($1109)>>2)]=0;
 var $1110=$i;
 var $1111=(($song)|0);
 var $1112=(($1111+($1110<<3))|0);
 var $1113=(($1112+2)|0);
 var $1114=HEAP16[(($1113)>>1)];
 var $1115=($1114&65535);
 var $1116=($1115|0)>1;
 if($1116){label=197;break;}else{label=198;break;}
 case 197: 
 var $1118=$xxs;
 var $1119=(($1118+44)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=$1120|2;
 HEAP32[(($1119)>>2)]=$1121;
 label=198;break;
 case 198: 
 label=199;break;
 case 199: 
 label=200;break;
 case 200: 
 var $1125=$3;
 var $1126=$4;
 var $1127=$smpl_offset2;
 var $1128=((($1126)+($1127))|0);
 var $1129=((($1128)+(6))|0);
 var $1130=_hio_seek($1125,$1129,0);
 var $1131=($1130|0)!=0;
 if($1131){label=201;break;}else{label=202;break;}
 case 201: 
 $1=-1;
 label=231;break;
 case 202: 
 var $1134=$2;
 var $1135=$3;
 var $1136=$xxs;
 var $1137=_load_sample($1134,$1135,0,$1136,0);
 var $1138=($1137|0)<0;
 if($1138){label=203;break;}else{label=204;break;}
 case 203: 
 $1=-1;
 label=231;break;
 case 204: 
 var $1141=$smp_idx;
 var $1142=((($1141)+(1))|0);
 $smp_idx=$1142;
 label=205;break;
 case 205: 
 var $1144=$i;
 var $1145=((($1144)+(1))|0);
 $i=$1145;
 label=157;break;
 case 206: 
 $i=0;
 label=207;break;
 case 207: 
 var $1148=$i;
 var $1149=$mod;
 var $1150=(($1149+128)|0);
 var $1151=HEAP32[(($1150)>>2)];
 var $1152=($1148|0)<($1151|0);
 if($1152){label=208;break;}else{label=226;break;}
 case 208: 
 $j=0;
 label=209;break;
 case 209: 
 var $1155=$j;
 var $1156=$i;
 var $1157=$mod;
 var $1158=(($1157+168)|0);
 var $1159=HEAP32[(($1158)>>2)];
 var $1160=(($1159+($1156<<2))|0);
 var $1161=HEAP32[(($1160)>>2)];
 var $1162=(($1161)|0);
 var $1163=HEAP32[(($1162)>>2)];
 var $1164=($1155|0)<($1163|0);
 if($1164){label=210;break;}else{label=224;break;}
 case 210: 
 $k=0;
 label=211;break;
 case 211: 
 var $1167=$k;
 var $1168=$mod;
 var $1169=(($1168+136)|0);
 var $1170=HEAP32[(($1169)>>2)];
 var $1171=($1167|0)<($1170|0);
 if($1171){label=212;break;}else{label=222;break;}
 case 212: 
 var $1173=$j;
 var $1174=$k;
 var $1175=$i;
 var $1176=$2;
 var $1177=(($1176)|0);
 var $1178=(($1177+168)|0);
 var $1179=HEAP32[(($1178)>>2)];
 var $1180=(($1179+($1175<<2))|0);
 var $1181=HEAP32[(($1180)>>2)];
 var $1182=(($1181+4)|0);
 var $1183=(($1182+($1174<<2))|0);
 var $1184=HEAP32[(($1183)>>2)];
 var $1185=$2;
 var $1186=(($1185)|0);
 var $1187=(($1186+172)|0);
 var $1188=HEAP32[(($1187)>>2)];
 var $1189=(($1188+($1184<<2))|0);
 var $1190=HEAP32[(($1189)>>2)];
 var $1191=(($1190+4)|0);
 var $1192=(($1191+($1173<<3))|0);
 $event=$1192;
 var $1193=$event;
 var $1194=(($1193)|0);
 var $1195=HEAP8[($1194)];
 var $1196=(($1195<<24)>>24)!=0;
 if($1196){label=213;break;}else{label=214;break;}
 case 213: 
 var $1198=$event;
 var $1199=(($1198+1)|0);
 var $1200=HEAP8[($1199)];
 var $1201=(($1200<<24)>>24)!=0;
 if($1201){label=215;break;}else{label=214;break;}
 case 214: 
 label=221;break;
 case 215: 
 var $1204=$event;
 var $1205=(($1204+1)|0);
 var $1206=HEAP8[($1205)];
 var $1207=($1206&255);
 var $1208=((($1207)-(1))|0);
 var $1209=$2;
 var $1210=(($1209+6548)|0);
 var $1211=HEAP32[(($1210)>>2)];
 var $1212=$1211;
 var $1213=(($1212+8)|0);
 var $1214=HEAP32[(($1213)>>2)];
 var $1215=(($1214+($1208<<2))|0);
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=($1216|0)!=0;
 if($1217){label=220;break;}else{label=216;break;}
 case 216: 
 label=217;break;
 case 217: 
 var $1220=$event;
 var $1221=(($1220)|0);
 var $1222=HEAP8[($1221)];
 var $1223=($1222&255);
 var $1224=($1223|0)>84;
 if($1224){label=218;break;}else{label=219;break;}
 case 218: 
 var $1226=$event;
 var $1227=(($1226)|0);
 var $1228=HEAP8[($1227)];
 var $1229=($1228&255);
 var $1230=((($1229)-(12))|0);
 var $1231=(($1230)&255);
 HEAP8[($1227)]=$1231;
 label=217;break;
 case 219: 
 label=220;break;
 case 220: 
 label=221;break;
 case 221: 
 var $1235=$k;
 var $1236=((($1235)+(1))|0);
 $k=$1236;
 label=211;break;
 case 222: 
 label=223;break;
 case 223: 
 var $1239=$j;
 var $1240=((($1239)+(1))|0);
 $j=$1240;
 label=209;break;
 case 224: 
 label=225;break;
 case 225: 
 var $1243=$i;
 var $1244=((($1243)+(1))|0);
 $i=$1244;
 label=207;break;
 case 226: 
 $i=0;
 label=227;break;
 case 227: 
 var $1247=$i;
 var $1248=$mod;
 var $1249=(($1248+136)|0);
 var $1250=HEAP32[(($1249)>>2)];
 var $1251=($1247|0)<($1250|0);
 if($1251){label=228;break;}else{label=230;break;}
 case 228: 
 var $1253=$i;
 var $1254=(($song+770)|0);
 var $1255=(($1254+$1253)|0);
 var $1256=HEAP8[($1255)];
 var $1257=($1256&255);
 var $1258=$i;
 var $1259=$mod;
 var $1260=(($1259+184)|0);
 var $1261=(($1260+((($1258)*(12))&-1))|0);
 var $1262=(($1261+4)|0);
 HEAP32[(($1262)>>2)]=$1257;
 var $1263=$i;
 var $1264=((($1263)+(1))|0);
 var $1265=(((($1264|0))/(2))&-1);
 var $1266=(((($1265|0))%(2))&-1);
 var $1267=((($1266)*(255))&-1);
 var $1268=$i;
 var $1269=$mod;
 var $1270=(($1269+184)|0);
 var $1271=(($1270+((($1268)*(12))&-1))|0);
 var $1272=(($1271)|0);
 HEAP32[(($1272)>>2)]=$1267;
 label=229;break;
 case 229: 
 var $1274=$i;
 var $1275=((($1274)+(1))|0);
 $i=$1275;
 label=227;break;
 case 230: 
 $1=0;
 label=231;break;
 case 231: 
 var $1278=$1;
 STACKTOP=sp;return $1278;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd3_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $id=sp;
 var $offset;
 var $len;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($id)|0);
 var $6=$2;
 var $7=_hio_read($5,1,4,$6);
 var $8=($7>>>0)<4;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=10;break;
 case 3: 
 var $11=(($id)|0);
 var $12=_memcmp($11,23600,4);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 var $15=(($id)|0);
 var $16=_memcmp($15,22904,4);
 var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=10;break;
 case 6: 
 var $20=$2;
 var $21=_hio_seek($20,28,1);
 var $22=$2;
 var $23=_hio_read32b($22);
 $offset=$23;
 var $24=$offset;
 var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 var $27=$2;
 var $28=$4;
 var $29=$offset;
 var $30=((($28)+($29))|0);
 var $31=((($30)+(44))|0);
 var $32=_hio_seek($27,$31,0);
 var $33=$2;
 var $34=_hio_read32b($33);
 $offset=$34;
 var $35=$2;
 var $36=_hio_read32b($35);
 $len=$36;
 var $37=$2;
 var $38=$4;
 var $39=$offset;
 var $40=((($38)+($39))|0);
 var $41=_hio_seek($37,$40,0);
 var $42=$2;
 var $43=$3;
 var $44=$len;
 _read_title($42,$43,$44);
 label=9;break;
 case 8: 
 var $46=$2;
 var $47=$3;
 _read_title($46,$47,0);
 label=9;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $50=$1;
 STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd3_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1560)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $header=sp;
 var $song=(sp)+(56);
 var $block=(sp)+(848);
 var $instr=(sp)+(856);
 var $synth=(sp)+(864);
 var $exp_smp=(sp)+(1400);
 var $expdata=(sp)+(1424);
 var $event;
 var $ver;
 var $smp_idx;
 var $e=(sp)+(1512);
 var $song_offset;
 var $seqtable_offset;
 var $trackvols_offset;
 var $trackpans_offset;
 var $blockarr_offset;
 var $smplarr_offset;
 var $expdata_offset;
 var $expsmp_offset;
 var $songname_offset;
 var $iinfo_offset;
 var $playseq_offset;
 var $pos;
 var $bpm_on;
 var $bpmlen;
 var $med_8ch;
 var $smpl_offset;
 var $type;
 var $block_offset;
 var $block_offset1;
 var $smpl_offset2;
 var $name=(sp)+(1520);
 var $sub;
 var $xxs;
 var $ret;
 var $ret3;
 var $p;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $ver=0;
 $smp_idx=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($header)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,4,1,$14);
 var $16=(($header)|0);
 var $17=$16;
 var $18=(($17+3)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 var $21=((($20)-(49))|0);
 var $22=((($21)+(1))|0);
 $ver=$22;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $25=$3;
 var $26=_hio_read32b($25);
 var $27=(($header+4)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=$3;
 var $29=_hio_read32b($28);
 $song_offset=$29;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $32=$3;
 var $33=_hio_read16b($32);
 var $34=$3;
 var $35=_hio_read16b($34);
 var $36=$3;
 var $37=_hio_read32b($36);
 $blockarr_offset=$37;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $40=$3;
 var $41=_hio_read32b($40);
 var $42=$3;
 var $43=_hio_read32b($42);
 $smplarr_offset=$43;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $46=$3;
 var $47=_hio_read32b($46);
 var $48=$3;
 var $49=_hio_read32b($48);
 $expdata_offset=$49;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $52=$3;
 var $53=_hio_read32b($52);
 var $54=$3;
 var $55=_hio_read16b($54);
 var $56=(($header+40)|0);
 HEAP16[(($56)>>1)]=$55;
 var $57=$3;
 var $58=_hio_read16b($57);
 var $59=(($header+42)|0);
 HEAP16[(($59)>>1)]=$58;
 var $60=$3;
 var $61=_hio_read16b($60);
 var $62=(($header+44)|0);
 HEAP16[(($62)>>1)]=$61;
 var $63=$3;
 var $64=_hio_read16b($63);
 var $65=(($header+46)|0);
 HEAP16[(($65)>>1)]=$64;
 var $66=$3;
 var $67=_hio_read16b($66);
 var $68=(($header+48)|0);
 HEAP16[(($68)>>1)]=$67;
 var $69=$3;
 var $70=_hio_read8($69);
 var $71=(($header+50)|0);
 HEAP8[($71)]=$70;
 var $72=$3;
 var $73=_hio_read8($72);
 var $74=(($header+51)|0);
 HEAP8[($74)]=$73;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $77=$3;
 var $78=$4;
 var $79=$song_offset;
 var $80=((($78)+($79))|0);
 var $81=_hio_seek($77,$80,0);
 $i=0;
 label=16;break;
 case 16: 
 var $83=$i;
 var $84=($83|0)<63;
 if($84){label=17;break;}else{label=19;break;}
 case 17: 
 var $86=$3;
 var $87=_hio_read16b($86);
 var $88=$i;
 var $89=(($song)|0);
 var $90=(($89+($88<<3))|0);
 var $91=(($90)|0);
 HEAP16[(($91)>>1)]=$87;
 var $92=$3;
 var $93=_hio_read16b($92);
 var $94=$i;
 var $95=(($song)|0);
 var $96=(($95+($94<<3))|0);
 var $97=(($96+2)|0);
 HEAP16[(($97)>>1)]=$93;
 var $98=$3;
 var $99=_hio_read8($98);
 var $100=$i;
 var $101=(($song)|0);
 var $102=(($101+($100<<3))|0);
 var $103=(($102+4)|0);
 HEAP8[($103)]=$99;
 var $104=$3;
 var $105=_hio_read8($104);
 var $106=$i;
 var $107=(($song)|0);
 var $108=(($107+($106<<3))|0);
 var $109=(($108+5)|0);
 HEAP8[($109)]=$105;
 var $110=$3;
 var $111=_hio_read8($110);
 var $112=$i;
 var $113=(($song)|0);
 var $114=(($113+($112<<3))|0);
 var $115=(($114+6)|0);
 HEAP8[($115)]=$111;
 var $116=$3;
 var $117=_hio_read8s($116);
 var $118=$i;
 var $119=(($song)|0);
 var $120=(($119+($118<<3))|0);
 var $121=(($120+7)|0);
 HEAP8[($121)]=$117;
 label=18;break;
 case 18: 
 var $123=$i;
 var $124=((($123)+(1))|0);
 $i=$124;
 label=16;break;
 case 19: 
 var $126=$3;
 var $127=_hio_read16b($126);
 var $128=(($song+504)|0);
 HEAP16[(($128)>>1)]=$127;
 var $129=$3;
 var $130=_hio_read16b($129);
 var $131=(($song+506)|0);
 HEAP16[(($131)>>1)]=$130;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $134=$3;
 var $135=_hio_read32b($134);
 $seqtable_offset=$135;
 var $136=$3;
 var $137=_hio_read32b($136);
 var $138=$3;
 var $139=_hio_read32b($138);
 $trackvols_offset=$139;
 var $140=$3;
 var $141=_hio_read16b($140);
 var $142=(($song+520)|0);
 HEAP16[(($142)>>1)]=$141;
 var $143=$3;
 var $144=_hio_read16b($143);
 var $145=(($song+522)|0);
 HEAP16[(($145)>>1)]=$144;
 var $146=$3;
 var $147=_hio_read32b($146);
 $trackpans_offset=$147;
 var $148=$3;
 var $149=_hio_read32b($148);
 var $150=(($song+528)|0);
 HEAP32[(($150)>>2)]=$149;
 var $151=$3;
 var $152=_hio_read16b($151);
 var $153=(($song+532)|0);
 HEAP16[(($153)>>1)]=$152;
 var $154=$3;
 var $155=_hio_read16b($154);
 var $156=(($song+534)|0);
 HEAP16[(($156)>>1)]=$155;
 var $157=$3;
 var $158=_hio_read8($157);
 var $159=(($song+536)|0);
 HEAP8[($159)]=$158;
 var $160=$3;
 var $161=_hio_read8($160);
 var $162=(($song+537)|0);
 HEAP8[($162)]=$161;
 var $163=$3;
 var $164=_hio_read16b($163);
 var $165=(($song+538)|0);
 HEAP16[(($165)>>1)]=$164;
 var $166=$3;
 var $167=_hio_read8($166);
 var $168=(($song+540)|0);
 HEAP8[($168)]=$167;
 var $169=$3;
 var $170=_hio_seek($169,223,1);
 var $171=$3;
 var $172=_hio_read16b($171);
 var $173=(($song+764)|0);
 HEAP16[(($173)>>1)]=$172;
 var $174=$3;
 var $175=_hio_read8($174);
 var $176=(($song+766)|0);
 HEAP8[($176)]=$175;
 var $177=$3;
 var $178=_hio_read8($177);
 var $179=(($song+767)|0);
 HEAP8[($179)]=$178;
 var $180=$3;
 var $181=_hio_read8($180);
 var $182=(($song+768)|0);
 HEAP8[($182)]=$181;
 var $183=$3;
 var $184=_hio_read8($183);
 var $185=(($song+769)|0);
 HEAP8[($185)]=$184;
 $i=0;
 label=22;break;
 case 22: 
 var $187=$i;
 var $188=($187|0)<16;
 if($188){label=23;break;}else{label=25;break;}
 case 23: 
 var $190=$3;
 var $191=_hio_read8($190);
 label=24;break;
 case 24: 
 var $193=$i;
 var $194=((($193)+(1))|0);
 $i=$194;
 label=22;break;
 case 25: 
 var $196=$3;
 var $197=_hio_read8($196);
 var $198=(($song+786)|0);
 HEAP8[($198)]=$197;
 var $199=$3;
 var $200=_hio_read8($199);
 var $201=(($song+787)|0);
 HEAP8[($201)]=$200;
 var $202=$3;
 var $203=$4;
 var $204=$seqtable_offset;
 var $205=((($203)+($204))|0);
 var $206=_hio_seek($202,$205,0);
 var $207=$3;
 var $208=_hio_read32b($207);
 $playseq_offset=$208;
 var $209=$3;
 var $210=$4;
 var $211=$playseq_offset;
 var $212=((($210)+($211))|0);
 var $213=_hio_seek($209,$212,0);
 var $214=$3;
 var $215=_hio_seek($214,32,1);
 var $216=$3;
 var $217=_hio_read32b($216);
 var $218=$3;
 var $219=_hio_read32b($218);
 var $220=$3;
 var $221=_hio_read16b($220);
 var $222=($221&65535);
 var $223=$mod;
 var $224=(($223+156)|0);
 HEAP32[(($224)>>2)]=$222;
 $i=0;
 label=26;break;
 case 26: 
 var $226=$i;
 var $227=$mod;
 var $228=(($227+156)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($226|0)<($229|0);
 if($230){label=27;break;}else{label=29;break;}
 case 27: 
 var $232=$3;
 var $233=_hio_read16b($232);
 var $234=(($233)&255);
 var $235=$i;
 var $236=$mod;
 var $237=(($236+952)|0);
 var $238=(($237+$235)|0);
 HEAP8[($238)]=$234;
 label=28;break;
 case 28: 
 var $240=$i;
 var $241=((($240)+(1))|0);
 $i=$241;
 label=26;break;
 case 29: 
 var $243=$2;
 var $244=(($243+1264)|0);
 HEAP32[(($244)>>2)]=8363;
 var $245=(($song+767)|0);
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=$247&32;
 var $249=($248|0)!=0;
 var $250=($249?0:192);
 var $251=$2;
 var $252=(($251+1280)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=$253|$250;
 HEAP32[(($252)>>2)]=$254;
 var $255=(($song+767)|0);
 var $256=HEAP8[($255)];
 var $257=($256&255);
 var $258=$257&64;
 $med_8ch=$258;
 var $259=(($song+768)|0);
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=$261&32;
 $bpm_on=$262;
 var $263=(($song+768)|0);
 var $264=HEAP8[($263)];
 var $265=($264&255);
 var $266=$265&31;
 var $267=((($266)+(1))|0);
 $bpmlen=$267;
 var $268=$2;
 var $269=(($268+1256)|0);
 HEAPF64[(($269)>>3)]=2.64;
 var $270=$2;
 var $271=$med_8ch;
 var $272=(($song+764)|0);
 var $273=HEAP16[(($272)>>1)];
 var $274=($273&65535);
 var $275=$bpm_on;
 var $276=$bpmlen;
 _mmd_set_bpm($270,$271,$274,$275,$276);
 var $277=(($song+769)|0);
 var $278=HEAP8[($277)];
 var $279=($278&255);
 var $280=$mod;
 var $281=(($280+148)|0);
 HEAP32[(($281)>>2)]=$279;
 var $282=(($song+504)|0);
 var $283=HEAP16[(($282)>>1)];
 var $284=($283&65535);
 var $285=$mod;
 var $286=(($285+128)|0);
 HEAP32[(($286)>>2)]=$284;
 var $287=(($song+787)|0);
 var $288=HEAP8[($287)];
 var $289=($288&255);
 var $290=$mod;
 var $291=(($290+140)|0);
 HEAP32[(($291)>>2)]=$289;
 var $292=$mod;
 var $293=(($292+160)|0);
 HEAP32[(($293)>>2)]=0;
 var $294=$mod;
 var $295=(($294+136)|0);
 HEAP32[(($295)>>2)]=0;
 var $296=$mod;
 var $297=(($296)|0);
 var $298=(($297)|0);
 HEAP8[($298)]=0;
 var $299=$mod;
 var $300=(($299+144)|0);
 HEAP32[(($300)>>2)]=0;
 $i=0;
 label=30;break;
 case 30: 
 var $302=$i;
 var $303=$mod;
 var $304=(($303+140)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=($302|0)<($305|0);
 if($306){label=31;break;}else{label=38;break;}
 case 31: 
 var $308=$3;
 var $309=$4;
 var $310=$smplarr_offset;
 var $311=((($309)+($310))|0);
 var $312=$i;
 var $313=($312<<2);
 var $314=((($311)+($313))|0);
 var $315=_hio_seek($308,$314,0);
 var $316=$3;
 var $317=_hio_read32b($316);
 $smpl_offset=$317;
 var $318=$smpl_offset;
 var $319=($318|0)==0;
 if($319){label=32;break;}else{label=33;break;}
 case 32: 
 label=37;break;
 case 33: 
 var $322=$3;
 var $323=$4;
 var $324=$smpl_offset;
 var $325=((($323)+($324))|0);
 var $326=_hio_seek($322,$325,0);
 var $327=$3;
 var $328=_hio_read32b($327);
 var $329=$3;
 var $330=_hio_read16b($329);
 $type=$330;
 var $331=$type;
 var $332=(($331<<16)>>16);
 var $333=($332|0)==-1;
 if($333){label=34;break;}else{label=35;break;}
 case 34: 
 var $335=$3;
 var $336=_hio_seek($335,14,1);
 var $337=$3;
 var $338=_hio_read16b($337);
 var $339=($338&65535);
 var $340=$mod;
 var $341=(($340+144)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=((($342)+($339))|0);
 HEAP32[(($341)>>2)]=$343;
 label=36;break;
 case 35: 
 var $345=$mod;
 var $346=(($345+144)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=((($347)+(1))|0);
 HEAP32[(($346)>>2)]=$348;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $351=$i;
 var $352=((($351)+(1))|0);
 $i=$352;
 label=30;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $356=(($expdata+8)|0);
 HEAP16[(($356)>>1)]=0;
 var $357=(($expdata+10)|0);
 HEAP16[(($357)>>1)]=0;
 var $358=(($expdata+24)|0);
 HEAP16[(($358)>>1)]=0;
 var $359=(($expdata+26)|0);
 HEAP16[(($359)>>1)]=0;
 $expsmp_offset=0;
 $iinfo_offset=0;
 var $360=$expdata_offset;
 var $361=($360|0)!=0;
 if($361){label=41;break;}else{label=56;break;}
 case 41: 
 var $363=$3;
 var $364=$4;
 var $365=$expdata_offset;
 var $366=((($364)+($365))|0);
 var $367=_hio_seek($363,$366,0);
 var $368=$3;
 var $369=_hio_read32b($368);
 var $370=$3;
 var $371=_hio_read32b($370);
 $expsmp_offset=$371;
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $374=$3;
 var $375=_hio_read16b($374);
 var $376=(($expdata+8)|0);
 HEAP16[(($376)>>1)]=$375;
 var $377=$3;
 var $378=_hio_read16b($377);
 var $379=(($expdata+10)|0);
 HEAP16[(($379)>>1)]=$378;
 var $380=$3;
 var $381=_hio_read32b($380);
 var $382=$3;
 var $383=_hio_read32b($382);
 var $384=$3;
 var $385=_hio_read32b($384);
 $iinfo_offset=$385;
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $388=$3;
 var $389=_hio_read16b($388);
 var $390=(($expdata+24)|0);
 HEAP16[(($390)>>1)]=$389;
 var $391=$3;
 var $392=_hio_read16b($391);
 var $393=(($expdata+26)|0);
 HEAP16[(($393)>>1)]=$392;
 var $394=$3;
 var $395=_hio_read32b($394);
 var $396=$3;
 var $397=_hio_read32b($396);
 var $398=$3;
 var $399=_hio_read32b($398);
 var $400=$3;
 var $401=_hio_read32b($400);
 var $402=$3;
 var $403=_hio_read32b($402);
 $songname_offset=$403;
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $406=$3;
 var $407=_hio_read32b($406);
 var $408=(($expdata+48)|0);
 HEAP32[(($408)>>2)]=$407;
 var $409=$3;
 var $410=$4;
 var $411=$songname_offset;
 var $412=((($410)+($411))|0);
 var $413=_hio_seek($409,$412,0);
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 $i=0;
 label=50;break;
 case 50: 
 var $417=$i;
 var $418=(($expdata+48)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=($417>>>0)<($419>>>0);
 if($420){label=51;break;}else{label=55;break;}
 case 51: 
 var $422=$i;
 var $423=($422|0)>=64;
 if($423){label=52;break;}else{label=53;break;}
 case 52: 
 label=55;break;
 case 53: 
 var $426=$3;
 var $427=_hio_read8($426);
 var $428=$i;
 var $429=$mod;
 var $430=(($429)|0);
 var $431=(($430+$428)|0);
 HEAP8[($431)]=$427;
 label=54;break;
 case 54: 
 var $433=$i;
 var $434=((($433)+(1))|0);
 $i=$434;
 label=50;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 $i=0;
 label=59;break;
 case 59: 
 var $440=$i;
 var $441=$mod;
 var $442=(($441+128)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=($440|0)<($443|0);
 if($444){label=60;break;}else{label=68;break;}
 case 60: 
 var $446=$3;
 var $447=$4;
 var $448=$blockarr_offset;
 var $449=((($447)+($448))|0);
 var $450=$i;
 var $451=($450<<2);
 var $452=((($449)+($451))|0);
 var $453=_hio_seek($446,$452,0);
 var $454=$3;
 var $455=_hio_read32b($454);
 $block_offset=$455;
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 var $458=$block_offset;
 var $459=($458|0)==0;
 if($459){label=63;break;}else{label=64;break;}
 case 63: 
 label=67;break;
 case 64: 
 var $462=$3;
 var $463=$4;
 var $464=$block_offset;
 var $465=((($463)+($464))|0);
 var $466=_hio_seek($462,$465,0);
 var $467=$3;
 var $468=_hio_read16b($467);
 var $469=(($block)|0);
 HEAP16[(($469)>>1)]=$468;
 var $470=$3;
 var $471=_hio_read16b($470);
 var $472=(($block+2)|0);
 HEAP16[(($472)>>1)]=$471;
 var $473=(($block)|0);
 var $474=HEAP16[(($473)>>1)];
 var $475=($474&65535);
 var $476=$mod;
 var $477=(($476+136)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=($475|0)>($478|0);
 if($479){label=65;break;}else{label=66;break;}
 case 65: 
 var $481=(($block)|0);
 var $482=HEAP16[(($481)>>1)];
 var $483=($482&65535);
 var $484=$mod;
 var $485=(($484+136)|0);
 HEAP32[(($485)>>2)]=$483;
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $488=$i;
 var $489=((($488)+(1))|0);
 $i=$489;
 label=59;break;
 case 68: 
 var $491=$mod;
 var $492=(($491+128)|0);
 var $493=HEAP32[(($492)>>2)];
 var $494=$mod;
 var $495=(($494+136)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(Math_imul($493,$496)|0);
 var $498=$mod;
 var $499=(($498+132)|0);
 HEAP32[(($499)>>2)]=$497;
 var $500=$ver;
 var $501=($500|0)==2;
 if($501){label=69;break;}else{label=70;break;}
 case 69: 
 var $503=$2;
 _set_type($503,26472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=71;break;
 case 70: 
 var $505=$2;
 var $506=$ver;
 var $507=((($506)+(48))|0);
 _set_type($505,24664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$507,tempVarArgs)); STACKTOP=tempVarArgs;
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 label=79;break;
 case 79: 
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 label=82;break;
 case 82: 
 label=83;break;
 case 83: 
 label=84;break;
 case 84: 
 label=85;break;
 case 85: 
 var $523=$mod;
 var $524=_pattern_init($523);
 var $525=($524|0)<0;
 if($525){label=86;break;}else{label=87;break;}
 case 86: 
 $1=-1;
 label=181;break;
 case 87: 
 $i=0;
 label=88;break;
 case 88: 
 var $529=$i;
 var $530=$mod;
 var $531=(($530+128)|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=($529|0)<($532|0);
 if($533){label=89;break;}else{label=108;break;}
 case 89: 
 var $535=$3;
 var $536=$4;
 var $537=$blockarr_offset;
 var $538=((($536)+($537))|0);
 var $539=$i;
 var $540=($539<<2);
 var $541=((($538)+($540))|0);
 var $542=_hio_seek($535,$541,0);
 var $543=$3;
 var $544=_hio_read32b($543);
 $block_offset1=$544;
 var $545=$block_offset1;
 var $546=($545|0)==0;
 if($546){label=90;break;}else{label=91;break;}
 case 90: 
 label=107;break;
 case 91: 
 var $549=$3;
 var $550=$4;
 var $551=$block_offset1;
 var $552=((($550)+($551))|0);
 var $553=_hio_seek($549,$552,0);
 var $554=$3;
 var $555=_hio_read16b($554);
 var $556=(($block)|0);
 HEAP16[(($556)>>1)]=$555;
 var $557=$3;
 var $558=_hio_read16b($557);
 var $559=(($block+2)|0);
 HEAP16[(($559)>>1)]=$558;
 var $560=$3;
 var $561=_hio_read32b($560);
 var $562=$mod;
 var $563=$i;
 var $564=(($block+2)|0);
 var $565=HEAP16[(($564)>>1)];
 var $566=($565&65535);
 var $567=((($566)+(1))|0);
 var $568=_pattern_tracks_alloc($562,$563,$567);
 var $569=($568|0)<0;
 if($569){label=92;break;}else{label=93;break;}
 case 92: 
 $1=-1;
 label=181;break;
 case 93: 
 $j=0;
 label=94;break;
 case 94: 
 var $573=$j;
 var $574=$i;
 var $575=$mod;
 var $576=(($575+168)|0);
 var $577=HEAP32[(($576)>>2)];
 var $578=(($577+($574<<2))|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=(($579)|0);
 var $581=HEAP32[(($580)>>2)];
 var $582=($573|0)<($581|0);
 if($582){label=95;break;}else{label=106;break;}
 case 95: 
 $k=0;
 label=96;break;
 case 96: 
 var $585=$k;
 var $586=(($block)|0);
 var $587=HEAP16[(($586)>>1)];
 var $588=($587&65535);
 var $589=($585|0)<($588|0);
 if($589){label=97;break;}else{label=104;break;}
 case 97: 
 var $591=$3;
 var $592=_hio_read8($591);
 var $593=(($e)|0);
 HEAP8[($593)]=$592;
 var $594=$3;
 var $595=_hio_read8($594);
 var $596=(($e+1)|0);
 HEAP8[($596)]=$595;
 var $597=$3;
 var $598=_hio_read8($597);
 var $599=(($e+2)|0);
 HEAP8[($599)]=$598;
 var $600=$3;
 var $601=_hio_read8($600);
 var $602=(($e+3)|0);
 HEAP8[($602)]=$601;
 var $603=$j;
 var $604=$k;
 var $605=$i;
 var $606=$2;
 var $607=(($606)|0);
 var $608=(($607+168)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=(($609+($605<<2))|0);
 var $611=HEAP32[(($610)>>2)];
 var $612=(($611+4)|0);
 var $613=(($612+($604<<2))|0);
 var $614=HEAP32[(($613)>>2)];
 var $615=$2;
 var $616=(($615)|0);
 var $617=(($616+172)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=(($618+($614<<2))|0);
 var $620=HEAP32[(($619)>>2)];
 var $621=(($620+4)|0);
 var $622=(($621+($603<<3))|0);
 $event=$622;
 var $623=(($e)|0);
 var $624=HEAP8[($623)];
 var $625=($624&255);
 var $626=$625&127;
 var $627=(($626)&255);
 var $628=$event;
 var $629=(($628)|0);
 HEAP8[($629)]=$627;
 var $630=$event;
 var $631=(($630)|0);
 var $632=HEAP8[($631)];
 var $633=(($632<<24)>>24)!=0;
 if($633){label=98;break;}else{label=99;break;}
 case 98: 
 var $635=(($song+766)|0);
 var $636=HEAP8[($635)];
 var $637=(($636<<24)>>24);
 var $638=((($637)+(24))|0);
 var $639=$event;
 var $640=(($639)|0);
 var $641=HEAP8[($640)];
 var $642=($641&255);
 var $643=((($642)+($638))|0);
 var $644=(($643)&255);
 HEAP8[($640)]=$644;
 label=99;break;
 case 99: 
 var $646=(($e+1)|0);
 var $647=HEAP8[($646)];
 var $648=($647&255);
 var $649=$648&63;
 var $650=(($649)&255);
 var $651=$event;
 var $652=(($651+1)|0);
 HEAP8[($652)]=$650;
 var $653=$event;
 var $654=(($653+1)|0);
 var $655=HEAP8[($654)];
 var $656=($655&255);
 var $657=($656|0)!=0;
 if($657){label=100;break;}else{label=102;break;}
 case 100: 
 var $659=$event;
 var $660=(($659)|0);
 var $661=HEAP8[($660)];
 var $662=(($661<<24)>>24)!=0;
 if($662){label=102;break;}else{label=101;break;}
 case 101: 
 var $664=$event;
 var $665=(($664+5)|0);
 HEAP8[($665)]=-79;
 var $666=$event;
 var $667=(($666+1)|0);
 var $668=HEAP8[($667)];
 var $669=$event;
 var $670=(($669+6)|0);
 HEAP8[($670)]=$668;
 var $671=$event;
 var $672=(($671+1)|0);
 HEAP8[($672)]=0;
 label=102;break;
 case 102: 
 var $674=(($e+2)|0);
 var $675=HEAP8[($674)];
 var $676=$event;
 var $677=(($676+3)|0);
 HEAP8[($677)]=$675;
 var $678=(($e+3)|0);
 var $679=HEAP8[($678)];
 var $680=$event;
 var $681=(($680+4)|0);
 HEAP8[($681)]=$679;
 var $682=$event;
 var $683=$bpm_on;
 var $684=$bpmlen;
 var $685=$med_8ch;
 _mmd_xlat_fx($682,$683,$684,$685);
 label=103;break;
 case 103: 
 var $687=$k;
 var $688=((($687)+(1))|0);
 $k=$688;
 label=96;break;
 case 104: 
 label=105;break;
 case 105: 
 var $691=$j;
 var $692=((($691)+(1))|0);
 $j=$692;
 label=94;break;
 case 106: 
 label=107;break;
 case 107: 
 var $695=$i;
 var $696=((($695)+(1))|0);
 $i=$696;
 label=88;break;
 case 108: 
 var $698=$2;
 var $699=_med_new_module_extras($698);
 var $700=($699|0)!=0;
 if($700){label=109;break;}else{label=110;break;}
 case 109: 
 $1=-1;
 label=181;break;
 case 110: 
 label=111;break;
 case 111: 
 label=112;break;
 case 112: 
 var $705=$mod;
 var $706=_instrument_init($705);
 var $707=($706|0)<0;
 if($707){label=113;break;}else{label=114;break;}
 case 113: 
 $1=-1;
 label=181;break;
 case 114: 
 label=115;break;
 case 115: 
 label=116;break;
 case 116: 
 $i=0;
 $smp_idx=0;
 label=117;break;
 case 117: 
 var $713=$i;
 var $714=$mod;
 var $715=(($714+140)|0);
 var $716=HEAP32[(($715)>>2)];
 var $717=($713|0)<($716|0);
 if($717){label=118;break;}else{label=162;break;}
 case 118: 
 var $719=$name;
 _memset($719, 0, 40)|0;
 var $720=$3;
 var $721=$4;
 var $722=$smplarr_offset;
 var $723=((($721)+($722))|0);
 var $724=$i;
 var $725=($724<<2);
 var $726=((($723)+($725))|0);
 var $727=_hio_seek($720,$726,0);
 var $728=$3;
 var $729=_hio_read32b($728);
 $smpl_offset2=$729;
 label=119;break;
 case 119: 
 label=120;break;
 case 120: 
 var $732=$smpl_offset2;
 var $733=($732|0)==0;
 if($733){label=121;break;}else{label=122;break;}
 case 121: 
 label=161;break;
 case 122: 
 var $736=$3;
 var $737=$4;
 var $738=$smpl_offset2;
 var $739=((($737)+($738))|0);
 var $740=_hio_seek($736,$739,0);
 var $741=$3;
 var $742=_hio_read32b($741);
 var $743=(($instr)|0);
 HEAP32[(($743)>>2)]=$742;
 var $744=$3;
 var $745=_hio_read16b($744);
 var $746=(($instr+4)|0);
 HEAP16[(($746)>>1)]=$745;
 var $747=$3;
 var $748=_hio_tell($747);
 $pos=$748;
 var $749=$expdata_offset;
 var $750=($749|0)!=0;
 if($750){label=123;break;}else{label=127;break;}
 case 123: 
 var $752=$i;
 var $753=(($expdata+24)|0);
 var $754=HEAP16[(($753)>>1)];
 var $755=($754&65535);
 var $756=($752|0)<($755|0);
 if($756){label=124;break;}else{label=127;break;}
 case 124: 
 var $758=$3;
 var $759=$iinfo_offset;
 var $760=$i;
 var $761=(($expdata+26)|0);
 var $762=HEAP16[(($761)>>1)];
 var $763=($762&65535);
 var $764=(Math_imul($760,$763)|0);
 var $765=((($759)+($764))|0);
 var $766=_hio_seek($758,$765,0);
 var $767=(($name)|0);
 var $768=$3;
 var $769=_hio_read($767,40,1,$768);
 label=125;break;
 case 125: 
 label=126;break;
 case 126: 
 label=127;break;
 case 127: 
 var $773=(($exp_smp+3)|0);
 HEAP8[($773)]=0;
 var $774=$expdata_offset;
 var $775=($774|0)!=0;
 if($775){label=128;break;}else{label=132;break;}
 case 128: 
 var $777=$i;
 var $778=(($expdata+8)|0);
 var $779=HEAP16[(($778)>>1)];
 var $780=($779&65535);
 var $781=($777|0)<($780|0);
 if($781){label=129;break;}else{label=132;break;}
 case 129: 
 var $783=$3;
 var $784=$expsmp_offset;
 var $785=$i;
 var $786=(($expdata+10)|0);
 var $787=HEAP16[(($786)>>1)];
 var $788=($787&65535);
 var $789=(Math_imul($785,$788)|0);
 var $790=((($784)+($789))|0);
 var $791=_hio_seek($783,$790,0);
 var $792=$3;
 var $793=_hio_read8($792);
 var $794=(($exp_smp)|0);
 HEAP8[($794)]=$793;
 var $795=$3;
 var $796=_hio_read8($795);
 var $797=(($exp_smp+1)|0);
 HEAP8[($797)]=$796;
 var $798=$3;
 var $799=_hio_read8($798);
 var $800=(($exp_smp+2)|0);
 HEAP8[($800)]=$799;
 var $801=$3;
 var $802=_hio_read8($801);
 var $803=(($exp_smp+3)|0);
 HEAP8[($803)]=$802;
 var $804=(($expdata+10)|0);
 var $805=HEAP16[(($804)>>1)];
 var $806=($805&65535);
 var $807=($806|0)>4;
 if($807){label=130;break;}else{label=131;break;}
 case 130: 
 var $809=$3;
 var $810=_hio_read8($809);
 var $811=(($exp_smp+4)|0);
 HEAP8[($811)]=$810;
 var $812=$3;
 var $813=_hio_read8($812);
 var $814=(($exp_smp+5)|0);
 HEAP8[($814)]=$813;
 label=131;break;
 case 131: 
 label=132;break;
 case 132: 
 var $817=$3;
 var $818=$pos;
 var $819=_hio_seek($817,$818,0);
 var $820=(($instr+4)|0);
 var $821=HEAP16[(($820)>>1)];
 var $822=(($821<<16)>>16);
 var $823=($822|0)==-2;
 if($823){label=133;break;}else{label=140;break;}
 case 133: 
 var $825=$mod;
 var $826=$i;
 var $827=_subinstrument_alloc($825,$826,1);
 var $828=($827|0)<0;
 if($828){label=134;break;}else{label=135;break;}
 case 134: 
 $1=-1;
 label=181;break;
 case 135: 
 var $831=$3;
 var $832=$2;
 var $833=$i;
 var $834=$smp_idx;
 var $835=$i;
 var $836=(($song)|0);
 var $837=(($836+($835<<3))|0);
 var $838=_mmd_load_hybrid_instrument($831,$832,$833,$834,$synth,$exp_smp,$837);
 $ret=$838;
 var $839=$ret;
 var $840=($839|0)<0;
 if($840){label=136;break;}else{label=137;break;}
 case 136: 
 $1=-1;
 label=181;break;
 case 137: 
 var $843=$smp_idx;
 var $844=((($843)+(1))|0);
 $smp_idx=$844;
 var $845=$2;
 var $846=$i;
 var $847=_mmd_alloc_tables($845,$846,$synth);
 var $848=($847|0)!=0;
 if($848){label=138;break;}else{label=139;break;}
 case 138: 
 $1=-1;
 label=181;break;
 case 139: 
 label=161;break;
 case 140: 
 var $852=(($instr+4)|0);
 var $853=HEAP16[(($852)>>1)];
 var $854=(($853<<16)>>16);
 var $855=($854|0)==-1;
 if($855){label=141;break;}else{label=148;break;}
 case 141: 
 var $857=$3;
 var $858=$2;
 var $859=$i;
 var $860=$smp_idx;
 var $861=$i;
 var $862=(($song)|0);
 var $863=(($862+($861<<3))|0);
 var $864=_mmd_load_synth_instrument($857,$858,$859,$860,$synth,$exp_smp,$863);
 $ret3=$864;
 var $865=$ret3;
 var $866=($865|0)>0;
 if($866){label=142;break;}else{label=143;break;}
 case 142: 
 label=161;break;
 case 143: 
 var $869=$ret3;
 var $870=($869|0)<0;
 if($870){label=144;break;}else{label=145;break;}
 case 144: 
 $1=-1;
 label=181;break;
 case 145: 
 var $873=(($synth+20)|0);
 var $874=HEAP16[(($873)>>1)];
 var $875=($874&65535);
 var $876=$smp_idx;
 var $877=((($876)+($875))|0);
 $smp_idx=$877;
 var $878=$2;
 var $879=$i;
 var $880=_mmd_alloc_tables($878,$879,$synth);
 var $881=($880|0)!=0;
 if($881){label=146;break;}else{label=147;break;}
 case 146: 
 $1=-1;
 label=181;break;
 case 147: 
 label=161;break;
 case 148: 
 var $885=(($instr+4)|0);
 var $886=HEAP16[(($885)>>1)];
 var $887=(($886<<16)>>16);
 var $888=$887&-49;
 var $889=($888|0)!=0;
 if($889){label=149;break;}else{label=150;break;}
 case 149: 
 label=161;break;
 case 150: 
 var $892=$i;
 var $893=$mod;
 var $894=(($893+176)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=(($895+((($892)*(764))&-1))|0);
 var $897=(($896+36)|0);
 HEAP32[(($897)>>2)]=1;
 var $898=$mod;
 var $899=$i;
 var $900=_subinstrument_alloc($898,$899,1);
 var $901=($900|0)<0;
 if($901){label=151;break;}else{label=152;break;}
 case 151: 
 $1=-1;
 label=181;break;
 case 152: 
 var $904=$i;
 var $905=$mod;
 var $906=(($905+176)|0);
 var $907=HEAP32[(($906)>>2)];
 var $908=(($907+((($904)*(764))&-1))|0);
 var $909=(($908+756)|0);
 var $910=HEAP32[(($909)>>2)];
 var $911=(($910)|0);
 $sub=$911;
 var $912=$i;
 var $913=(($song)|0);
 var $914=(($913+($912<<3))|0);
 var $915=(($914+6)|0);
 var $916=HEAP8[($915)];
 var $917=($916&255);
 var $918=$sub;
 var $919=(($918)|0);
 HEAP32[(($919)>>2)]=$917;
 var $920=$sub;
 var $921=(($920+8)|0);
 HEAP32[(($921)>>2)]=128;
 var $922=$i;
 var $923=(($song)|0);
 var $924=(($923+($922<<3))|0);
 var $925=(($924+7)|0);
 var $926=HEAP8[($925)];
 var $927=(($926<<24)>>24);
 var $928=$sub;
 var $929=(($928+12)|0);
 HEAP32[(($929)>>2)]=$927;
 var $930=$smp_idx;
 var $931=$sub;
 var $932=(($931+40)|0);
 HEAP32[(($932)>>2)]=$930;
 var $933=(($exp_smp+3)|0);
 var $934=HEAP8[($933)];
 var $935=(($934<<24)>>24);
 var $936=$935<<4;
 var $937=$sub;
 var $938=(($937+16)|0);
 HEAP32[(($938)>>2)]=$936;
 var $939=$smp_idx;
 var $940=$mod;
 var $941=(($940+180)|0);
 var $942=HEAP32[(($941)>>2)];
 var $943=(($942+((($939)*(52))&-1))|0);
 $xxs=$943;
 var $944=(($instr)|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=$xxs;
 var $947=(($946+32)|0);
 HEAP32[(($947)>>2)]=$945;
 var $948=$i;
 var $949=(($song)|0);
 var $950=(($949+($948<<3))|0);
 var $951=(($950)|0);
 var $952=HEAP16[(($951)>>1)];
 var $953=($952&65535);
 var $954=($953<<1);
 var $955=$xxs;
 var $956=(($955+36)|0);
 HEAP32[(($956)>>2)]=$954;
 var $957=$xxs;
 var $958=(($957+36)|0);
 var $959=HEAP32[(($958)>>2)];
 var $960=$i;
 var $961=(($song)|0);
 var $962=(($961+($960<<3))|0);
 var $963=(($962+2)|0);
 var $964=HEAP16[(($963)>>1)];
 var $965=($964&65535);
 var $966=($965<<1);
 var $967=((($959)+($966))|0);
 var $968=$xxs;
 var $969=(($968+40)|0);
 HEAP32[(($969)>>2)]=$967;
 var $970=$xxs;
 var $971=(($970+44)|0);
 HEAP32[(($971)>>2)]=0;
 var $972=$i;
 var $973=(($song)|0);
 var $974=(($973+($972<<3))|0);
 var $975=(($974+2)|0);
 var $976=HEAP16[(($975)>>1)];
 var $977=($976&65535);
 var $978=($977|0)>1;
 if($978){label=153;break;}else{label=154;break;}
 case 153: 
 var $980=$xxs;
 var $981=(($980+44)|0);
 var $982=HEAP32[(($981)>>2)];
 var $983=$982|2;
 HEAP32[(($981)>>2)]=$983;
 label=154;break;
 case 154: 
 var $985=(($instr+4)|0);
 var $986=HEAP16[(($985)>>1)];
 var $987=(($986<<16)>>16);
 var $988=$987&16;
 var $989=($988|0)!=0;
 if($989){label=155;break;}else{label=156;break;}
 case 155: 
 var $991=$xxs;
 var $992=(($991+44)|0);
 var $993=HEAP32[(($992)>>2)];
 var $994=$993|1;
 HEAP32[(($992)>>2)]=$994;
 var $995=$xxs;
 var $996=(($995+32)|0);
 var $997=HEAP32[(($996)>>2)];
 var $998=$997>>1;
 HEAP32[(($996)>>2)]=$998;
 var $999=$xxs;
 var $1000=(($999+36)|0);
 var $1001=HEAP32[(($1000)>>2)];
 var $1002=$1001>>1;
 HEAP32[(($1000)>>2)]=$1002;
 var $1003=$xxs;
 var $1004=(($1003+40)|0);
 var $1005=HEAP32[(($1004)>>2)];
 var $1006=$1005>>1;
 HEAP32[(($1004)>>2)]=$1006;
 label=156;break;
 case 156: 
 label=157;break;
 case 157: 
 label=158;break;
 case 158: 
 var $1010=$3;
 var $1011=$4;
 var $1012=$smpl_offset2;
 var $1013=((($1011)+($1012))|0);
 var $1014=((($1013)+(6))|0);
 var $1015=_hio_seek($1010,$1014,0);
 var $1016=$2;
 var $1017=$3;
 var $1018=$xxs;
 var $1019=_load_sample($1016,$1017,64,$1018,0);
 var $1020=($1019|0)<0;
 if($1020){label=159;break;}else{label=160;break;}
 case 159: 
 $1=-1;
 label=181;break;
 case 160: 
 var $1023=$smp_idx;
 var $1024=((($1023)+(1))|0);
 $smp_idx=$1024;
 label=161;break;
 case 161: 
 var $1026=$i;
 var $1027=((($1026)+(1))|0);
 $i=$1027;
 label=117;break;
 case 162: 
 var $1029=$3;
 var $1030=$4;
 var $1031=$trackvols_offset;
 var $1032=((($1030)+($1031))|0);
 var $1033=_hio_seek($1029,$1032,0);
 $i=0;
 label=163;break;
 case 163: 
 var $1035=$i;
 var $1036=$mod;
 var $1037=(($1036+136)|0);
 var $1038=HEAP32[(($1037)>>2)];
 var $1039=($1035|0)<($1038|0);
 if($1039){label=164;break;}else{label=166;break;}
 case 164: 
 var $1041=$3;
 var $1042=_hio_read8($1041);
 var $1043=($1042&255);
 var $1044=$i;
 var $1045=$mod;
 var $1046=(($1045+184)|0);
 var $1047=(($1046+((($1044)*(12))&-1))|0);
 var $1048=(($1047+4)|0);
 HEAP32[(($1048)>>2)]=$1043;
 label=165;break;
 case 165: 
 var $1050=$i;
 var $1051=((($1050)+(1))|0);
 $i=$1051;
 label=163;break;
 case 166: 
 var $1053=$trackpans_offset;
 var $1054=($1053|0)!=0;
 if($1054){label=167;break;}else{label=175;break;}
 case 167: 
 var $1056=$3;
 var $1057=$4;
 var $1058=$trackpans_offset;
 var $1059=((($1057)+($1058))|0);
 var $1060=_hio_seek($1056,$1059,0);
 $i=0;
 label=168;break;
 case 168: 
 var $1062=$i;
 var $1063=$mod;
 var $1064=(($1063+136)|0);
 var $1065=HEAP32[(($1064)>>2)];
 var $1066=($1062|0)<($1065|0);
 if($1066){label=169;break;}else{label=174;break;}
 case 169: 
 var $1068=$3;
 var $1069=_hio_read8s($1068);
 var $1070=(($1069<<24)>>24);
 var $1071=($1070<<3);
 $p=$1071;
 var $1072=$p;
 var $1073=($1072|0)>127;
 if($1073){label=170;break;}else{label=171;break;}
 case 170: 
 var $1078=127;label=172;break;
 case 171: 
 var $1076=$p;
 var $1078=$1076;label=172;break;
 case 172: 
 var $1078;
 var $1079=((($1078)+(128))|0);
 var $1080=$i;
 var $1081=$mod;
 var $1082=(($1081+184)|0);
 var $1083=(($1082+((($1080)*(12))&-1))|0);
 var $1084=(($1083)|0);
 HEAP32[(($1084)>>2)]=$1079;
 label=173;break;
 case 173: 
 var $1086=$i;
 var $1087=((($1086)+(1))|0);
 $i=$1087;
 label=168;break;
 case 174: 
 label=180;break;
 case 175: 
 $i=0;
 label=176;break;
 case 176: 
 var $1091=$i;
 var $1092=$mod;
 var $1093=(($1092+136)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1091|0)<($1094|0);
 if($1095){label=177;break;}else{label=179;break;}
 case 177: 
 var $1097=$i;
 var $1098=$mod;
 var $1099=(($1098+184)|0);
 var $1100=(($1099+((($1097)*(12))&-1))|0);
 var $1101=(($1100)|0);
 HEAP32[(($1101)>>2)]=128;
 label=178;break;
 case 178: 
 var $1103=$i;
 var $1104=((($1103)+(1))|0);
 $i=$1104;
 label=176;break;
 case 179: 
 label=180;break;
 case 180: 
 $1=0;
 label=181;break;
 case 181: 
 var $1108=$1;
 STACKTOP=sp;return $1108;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd_xlat_fx($event,$bpm_on,$bpmlen,$med_8ch){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$event;
 $2=$bpm_on;
 $3=$bpmlen;
 $4=$med_8ch;
 var $5=$1;
 var $6=(($5+3)|0);
 var $7=HEAP8[($6)];
 var $8=($7&255);
 switch(($8|0)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:{ label=2;break;}case 17:{ label=25;break;}case 18:{ label=26;break;}case 20:{ label=27;break;}case 21:{ label=28;break;}case 22:{ label=29;break;}case 8:{ label=3;break;}case 24:{ label=32;break;}case 25:{ label=35;break;}case 26:{ label=36;break;}case 27:{ label=37;break;}case 29:{ label=38;break;}case 30:{ label=39;break;}case 9:{ label=4;break;}case 10:case 11:case 12:{ label=5;break;}case 13:{ label=6;break;}case 14:{ label=7;break;}case 15:{ label=8;break;}default:{label=40;break;}}break;
 case 2: 
 label=41;break;
 case 3: 
 var $11=$1;
 var $12=(($11+4)|0);
 HEAP8[($12)]=0;
 var $13=$1;
 var $14=(($13+3)|0);
 HEAP8[($14)]=0;
 label=41;break;
 case 4: 
 var $16=$1;
 var $17=(($16+3)|0);
 HEAP8[($17)]=15;
 label=41;break;
 case 5: 
 label=41;break;
 case 6: 
 var $20=$1;
 var $21=(($20+3)|0);
 HEAP8[($21)]=10;
 label=41;break;
 case 7: 
 var $23=$1;
 var $24=(($23+4)|0);
 HEAP8[($24)]=0;
 var $25=$1;
 var $26=(($25+3)|0);
 HEAP8[($26)]=0;
 label=41;break;
 case 8: 
 var $28=$1;
 var $29=(($28+4)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=($31|0)==0;
 if($32){label=9;break;}else{label=10;break;}
 case 9: 
 var $34=$1;
 var $35=(($34+3)|0);
 HEAP8[($35)]=13;
 label=41;break;
 case 10: 
 var $37=$1;
 var $38=(($37+4)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=($40|0)<=240;
 if($41){label=11;break;}else{label=15;break;}
 case 11: 
 var $43=$1;
 var $44=(($43+3)|0);
 HEAP8[($44)]=-85;
 var $45=$4;
 var $46=($45|0)!=0;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $48=$1;
 var $49=(($48+4)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=_get_8ch_tempo($51);
 var $59=$52;label=14;break;
 case 13: 
 var $54=$1;
 var $55=(($54+4)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $59=$57;label=14;break;
 case 14: 
 var $59;
 var $60=(($59)&255);
 var $61=$1;
 var $62=(($61+4)|0);
 HEAP8[($62)]=$60;
 label=41;break;
 case 15: 
 var $64=$1;
 var $65=(($64+4)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 switch(($67|0)){case 241:{ label=16;break;}case 242:{ label=17;break;}case 243:{ label=18;break;}case 248:case 249:case 250:case 251:case 253:case 254:{ label=19;break;}case 255:{ label=20;break;}default:{label=21;break;}}break;
 case 16: 
 var $69=$1;
 var $70=(($69+3)|0);
 HEAP8[($70)]=14;
 var $71=$1;
 var $72=(($71+4)|0);
 HEAP8[($72)]=-109;
 label=22;break;
 case 17: 
 var $74=$1;
 var $75=(($74+3)|0);
 HEAP8[($75)]=14;
 var $76=$1;
 var $77=(($76+4)|0);
 HEAP8[($77)]=-45;
 label=22;break;
 case 18: 
 var $79=$1;
 var $80=(($79+3)|0);
 HEAP8[($80)]=14;
 var $81=$1;
 var $82=(($81+4)|0);
 HEAP8[($82)]=-110;
 label=22;break;
 case 19: 
 var $84=$1;
 var $85=(($84+4)|0);
 HEAP8[($85)]=0;
 var $86=$1;
 var $87=(($86+3)|0);
 HEAP8[($87)]=0;
 label=22;break;
 case 20: 
 var $89=$1;
 var $90=(($89+3)|0);
 HEAP8[($90)]=14;
 var $91=$1;
 var $92=(($91+4)|0);
 HEAP8[($92)]=-61;
 label=22;break;
 case 21: 
 var $94=$1;
 var $95=(($94+4)|0);
 HEAP8[($95)]=0;
 var $96=$1;
 var $97=(($96+3)|0);
 HEAP8[($97)]=0;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=41;break;
 case 25: 
 var $102=$1;
 var $103=(($102+3)|0);
 HEAP8[($103)]=-81;
 label=41;break;
 case 26: 
 var $105=$1;
 var $106=(($105+3)|0);
 HEAP8[($106)]=-80;
 label=41;break;
 case 27: 
 var $108=$1;
 var $109=(($108+3)|0);
 HEAP8[($109)]=-122;
 label=41;break;
 case 28: 
 var $111=$1;
 var $112=(($111+3)|0);
 HEAP8[($112)]=-90;
 label=41;break;
 case 29: 
 var $114=$1;
 var $115=(($114+3)|0);
 HEAP8[($115)]=14;
 var $116=$1;
 var $117=(($116+4)|0);
 var $118=HEAP8[($117)];
 var $119=($118&255);
 var $120=($119|0)>15;
 if($120){label=30;break;}else{label=31;break;}
 case 30: 
 var $122=$1;
 var $123=(($122+4)|0);
 HEAP8[($123)]=15;
 label=31;break;
 case 31: 
 var $125=$1;
 var $126=(($125+4)|0);
 var $127=HEAP8[($126)];
 var $128=($127&255);
 var $129=$128|96;
 var $130=(($129)&255);
 HEAP8[($126)]=$130;
 label=41;break;
 case 32: 
 var $132=$1;
 var $133=(($132+3)|0);
 HEAP8[($133)]=14;
 var $134=$1;
 var $135=(($134+4)|0);
 var $136=HEAP8[($135)];
 var $137=($136&255);
 var $138=($137|0)>15;
 if($138){label=33;break;}else{label=34;break;}
 case 33: 
 var $140=$1;
 var $141=(($140+4)|0);
 HEAP8[($141)]=15;
 label=34;break;
 case 34: 
 var $143=$1;
 var $144=(($143+4)|0);
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=$146|192;
 var $148=(($147)&255);
 HEAP8[($144)]=$148;
 label=41;break;
 case 35: 
 var $150=$1;
 var $151=(($150+3)|0);
 HEAP8[($151)]=9;
 label=41;break;
 case 36: 
 var $153=$1;
 var $154=(($153+3)|0);
 HEAP8[($154)]=-83;
 label=41;break;
 case 37: 
 var $156=$1;
 var $157=(($156+3)|0);
 HEAP8[($157)]=-82;
 label=41;break;
 case 38: 
 var $159=$1;
 var $160=(($159+3)|0);
 HEAP8[($160)]=13;
 label=41;break;
 case 39: 
 var $162=$1;
 var $163=(($162+3)|0);
 HEAP8[($163)]=-77;
 label=41;break;
 case 40: 
 var $165=$1;
 var $166=(($165+4)|0);
 HEAP8[($166)]=0;
 var $167=$1;
 var $168=(($167+3)|0);
 HEAP8[($168)]=0;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_8ch_tempo($tempo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$tempo;
 var $3=$2;
 var $4=($3|0)>0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=$2;
 var $7=($6|0)>10;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=10;label=5;break;
 case 4: 
 var $10=$2;
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 $2=$12;
 var $13=$2;
 var $14=((($13)-(1))|0);
 var $15=((7392+($14<<2))|0);
 var $16=HEAP32[(($15)>>2)];
 $1=$16;
 label=7;break;
 case 6: 
 var $18=$2;
 $1=$18;
 label=7;break;
 case 7: 
 var $20=$1;
 STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd_alloc_tables($m,$i,$synth){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $me;
 $2=$m;
 $3=$i;
 $4=$synth;
 var $5=$2;
 var $6=(($5+6548)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 $me=$8;
 var $9=$4;
 var $10=(($9+14)|0);
 var $11=HEAP16[(($10)>>1)];
 var $12=($11&65535);
 var $13=_calloc(1,$12);
 var $14=$3;
 var $15=$me;
 var $16=(($15+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+($14<<2))|0);
 HEAP32[(($18)>>2)]=$13;
 var $19=$3;
 var $20=$me;
 var $21=(($20+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+($19<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=2;break;}else{label=3;break;}
 case 2: 
 label=7;break;
 case 3: 
 var $28=$3;
 var $29=$me;
 var $30=(($29+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+($28<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$4;
 var $35=(($34+22)|0);
 var $36=$35;
 var $37=$4;
 var $38=(($37+14)|0);
 var $39=HEAP16[(($38)>>1)];
 var $40=($39&65535);
 assert($40 % 1 === 0);(_memcpy($33, $36, $40)|0);
 var $41=$4;
 var $42=(($41+16)|0);
 var $43=HEAP16[(($42)>>1)];
 var $44=($43&65535);
 var $45=_calloc(1,$44);
 var $46=$3;
 var $47=$me;
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+($46<<2))|0);
 HEAP32[(($50)>>2)]=$45;
 var $51=$3;
 var $52=$me;
 var $53=(($52+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+($51<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $60=$3;
 var $61=$me;
 var $62=(($61+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+($60<<2))|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$4;
 var $67=(($66+150)|0);
 var $68=$67;
 var $69=$4;
 var $70=(($69+16)|0);
 var $71=HEAP16[(($70)>>1)];
 var $72=($71&65535);
 assert($72 % 1 === 0);(_memcpy($65, $68, $72)|0);
 $1=0;
 label=8;break;
 case 6: 
 var $74=$3;
 var $75=$me;
 var $76=(($75+4)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+($74<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 _free($79);
 label=7;break;
 case 7: 
 $1=-1;
 label=8;break;
 case 8: 
 var $82=$1;
 STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd_load_hybrid_instrument($f,$m,$i,$smp_idx,$synth,$exp_smp,$sample){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $mod;
 var $xxi;
 var $sub;
 var $xxs;
 var $length;
 var $type;
 var $pos;
 $2=$f;
 $3=$m;
 $4=$i;
 $5=$smp_idx;
 $6=$synth;
 $7=$exp_smp;
 $8=$sample;
 var $9=$3;
 var $10=(($9)|0);
 $mod=$10;
 var $11=$4;
 var $12=$mod;
 var $13=(($12+176)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+((($11)*(764))&-1))|0);
 $xxi=$15;
 var $16=$2;
 var $17=_hio_tell($16);
 $pos=$17;
 var $18=$2;
 var $19=_hio_read8($18);
 var $20=$6;
 var $21=(($20+6)|0);
 HEAP8[($21)]=$19;
 var $22=$2;
 var $23=_hio_seek($22,3,1);
 var $24=$2;
 var $25=_hio_read16b($24);
 var $26=$6;
 var $27=(($26+10)|0);
 HEAP16[(($27)>>1)]=$25;
 var $28=$2;
 var $29=_hio_read16b($28);
 var $30=$6;
 var $31=(($30+12)|0);
 HEAP16[(($31)>>1)]=$29;
 var $32=$2;
 var $33=_hio_read16b($32);
 var $34=$6;
 var $35=(($34+14)|0);
 HEAP16[(($35)>>1)]=$33;
 var $36=$2;
 var $37=_hio_read16b($36);
 var $38=$6;
 var $39=(($38+16)|0);
 HEAP16[(($39)>>1)]=$37;
 var $40=$2;
 var $41=_hio_read8($40);
 var $42=$6;
 var $43=(($42+18)|0);
 HEAP8[($43)]=$41;
 var $44=$2;
 var $45=_hio_read8($44);
 var $46=$6;
 var $47=(($46+19)|0);
 HEAP8[($47)]=$45;
 var $48=$2;
 var $49=_hio_read16b($48);
 var $50=$6;
 var $51=(($50+20)|0);
 HEAP16[(($51)>>1)]=$49;
 var $52=$6;
 var $53=(($52+22)|0);
 var $54=(($53)|0);
 var $55=$2;
 var $56=_hio_read($54,1,128,$55);
 var $57=$6;
 var $58=(($57+150)|0);
 var $59=(($58)|0);
 var $60=$2;
 var $61=_hio_read($59,1,128,$60);
 var $62=$2;
 var $63=$pos;
 var $64=((($63)-(6))|0);
 var $65=$2;
 var $66=_hio_read32b($65);
 var $67=((($64)+($66))|0);
 var $68=_hio_seek($62,$67,0);
 var $69=$2;
 var $70=_hio_read32b($69);
 $length=$70;
 var $71=$2;
 var $72=_hio_read16b($71);
 var $73=($72&65535);
 $type=$73;
 var $74=$xxi;
 var $75=_med_new_instrument_extras($74);
 var $76=($75|0)!=0;
 if($76){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 var $79=$xxi;
 var $80=(($79+36)|0);
 HEAP32[(($80)>>2)]=1;
 var $81=$mod;
 var $82=$4;
 var $83=_subinstrument_alloc($81,$82,1);
 var $84=($83|0)<0;
 if($84){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=8;break;
 case 5: 
 var $87=$6;
 var $88=(($87+18)|0);
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=$xxi;
 var $92=(($91+760)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$93;
 var $95=(($94+4)|0);
 HEAP32[(($95)>>2)]=$90;
 var $96=$6;
 var $97=(($96+19)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$xxi;
 var $101=(($100+760)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$102;
 var $104=(($103+8)|0);
 HEAP32[(($104)>>2)]=$99;
 var $105=$xxi;
 var $106=(($105+756)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107)|0);
 $sub=$108;
 var $109=$sub;
 var $110=(($109+8)|0);
 HEAP32[(($110)>>2)]=128;
 var $111=$8;
 var $112=(($111+6)|0);
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=$sub;
 var $116=(($115)|0);
 HEAP32[(($116)>>2)]=$114;
 var $117=$8;
 var $118=(($117+7)|0);
 var $119=HEAP8[($118)];
 var $120=(($119<<24)>>24);
 var $121=$sub;
 var $122=(($121+12)|0);
 HEAP32[(($122)>>2)]=$120;
 var $123=$5;
 var $124=$sub;
 var $125=(($124+40)|0);
 HEAP32[(($125)>>2)]=$123;
 var $126=$7;
 var $127=(($126+3)|0);
 var $128=HEAP8[($127)];
 var $129=(($128<<24)>>24);
 var $130=$sub;
 var $131=(($130+16)|0);
 HEAP32[(($131)>>2)]=$129;
 var $132=$5;
 var $133=$mod;
 var $134=(($133+180)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135+((($132)*(52))&-1))|0);
 $xxs=$136;
 var $137=$length;
 var $138=$xxs;
 var $139=(($138+32)|0);
 HEAP32[(($139)>>2)]=$137;
 var $140=$8;
 var $141=(($140)|0);
 var $142=HEAP16[(($141)>>1)];
 var $143=($142&65535);
 var $144=($143<<1);
 var $145=$xxs;
 var $146=(($145+36)|0);
 HEAP32[(($146)>>2)]=$144;
 var $147=$xxs;
 var $148=(($147+36)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$8;
 var $151=(($150+2)|0);
 var $152=HEAP16[(($151)>>1)];
 var $153=($152&65535);
 var $154=($153<<1);
 var $155=((($149)+($154))|0);
 var $156=$xxs;
 var $157=(($156+40)|0);
 HEAP32[(($157)>>2)]=$155;
 var $158=$8;
 var $159=(($158+2)|0);
 var $160=HEAP16[(($159)>>1)];
 var $161=($160&65535);
 var $162=($161|0)>1;
 var $163=($162?2:0);
 var $164=$xxs;
 var $165=(($164+44)|0);
 HEAP32[(($165)>>2)]=$163;
 var $166=$3;
 var $167=$2;
 var $168=$xxs;
 var $169=_load_sample($166,$167,0,$168,0);
 var $170=($169|0)<0;
 if($170){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=8;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $174=$1;
 STACKTOP=sp;return $174;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd_load_synth_instrument($f,$m,$i,$smp_idx,$synth,$exp_smp,$sample){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $mod;
 var $xxi;
 var $pos;
 var $j;
 var $sub;
 var $xxs;
 $2=$f;
 $3=$m;
 $4=$i;
 $5=$smp_idx;
 $6=$synth;
 $7=$exp_smp;
 $8=$sample;
 var $9=$3;
 var $10=(($9)|0);
 $mod=$10;
 var $11=$4;
 var $12=$mod;
 var $13=(($12+176)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+((($11)*(764))&-1))|0);
 $xxi=$15;
 var $16=$2;
 var $17=_hio_tell($16);
 $pos=$17;
 var $18=$2;
 var $19=_hio_read8($18);
 var $20=$6;
 var $21=(($20+6)|0);
 HEAP8[($21)]=$19;
 var $22=$2;
 var $23=_hio_seek($22,3,1);
 var $24=$2;
 var $25=_hio_read16b($24);
 var $26=$6;
 var $27=(($26+10)|0);
 HEAP16[(($27)>>1)]=$25;
 var $28=$2;
 var $29=_hio_read16b($28);
 var $30=$6;
 var $31=(($30+12)|0);
 HEAP16[(($31)>>1)]=$29;
 var $32=$2;
 var $33=_hio_read16b($32);
 var $34=$6;
 var $35=(($34+14)|0);
 HEAP16[(($35)>>1)]=$33;
 var $36=$2;
 var $37=_hio_read16b($36);
 var $38=$6;
 var $39=(($38+16)|0);
 HEAP16[(($39)>>1)]=$37;
 var $40=$2;
 var $41=_hio_read8($40);
 var $42=$6;
 var $43=(($42+18)|0);
 HEAP8[($43)]=$41;
 var $44=$2;
 var $45=_hio_read8($44);
 var $46=$6;
 var $47=(($46+19)|0);
 HEAP8[($47)]=$45;
 var $48=$2;
 var $49=_hio_read16b($48);
 var $50=$6;
 var $51=(($50+20)|0);
 HEAP16[(($51)>>1)]=$49;
 var $52=$6;
 var $53=(($52+22)|0);
 var $54=(($53)|0);
 var $55=$2;
 var $56=_hio_read($54,1,128,$55);
 var $57=$6;
 var $58=(($57+150)|0);
 var $59=(($58)|0);
 var $60=$2;
 var $61=_hio_read($59,1,128,$60);
 $j=0;
 label=2;break;
 case 2: 
 var $63=$j;
 var $64=($63|0)<64;
 if($64){label=3;break;}else{label=5;break;}
 case 3: 
 var $66=$2;
 var $67=_hio_read32b($66);
 var $68=$j;
 var $69=$6;
 var $70=(($69+280)|0);
 var $71=(($70+($68<<2))|0);
 HEAP32[(($71)>>2)]=$67;
 label=4;break;
 case 4: 
 var $73=$j;
 var $74=((($73)+(1))|0);
 $j=$74;
 label=2;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $78=$6;
 var $79=(($78+20)|0);
 var $80=HEAP16[(($79)>>1)];
 var $81=($80&65535);
 var $82=($81|0)==65535;
 if($82){label=8;break;}else{label=9;break;}
 case 8: 
 $1=1;
 label=22;break;
 case 9: 
 var $85=$6;
 var $86=(($85+20)|0);
 var $87=HEAP16[(($86)>>1)];
 var $88=($87&65535);
 var $89=($88|0)>64;
 if($89){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=22;break;
 case 11: 
 var $92=$4;
 var $93=$mod;
 var $94=(($93+176)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+((($92)*(764))&-1))|0);
 var $97=_med_new_instrument_extras($96);
 var $98=($97|0)!=0;
 if($98){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=22;break;
 case 13: 
 var $101=$6;
 var $102=(($101+20)|0);
 var $103=HEAP16[(($102)>>1)];
 var $104=($103&65535);
 var $105=$4;
 var $106=$mod;
 var $107=(($106+176)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+((($105)*(764))&-1))|0);
 var $110=(($109+36)|0);
 HEAP32[(($110)>>2)]=$104;
 var $111=$mod;
 var $112=$4;
 var $113=$6;
 var $114=(($113+20)|0);
 var $115=HEAP16[(($114)>>1)];
 var $116=($115&65535);
 var $117=_subinstrument_alloc($111,$112,$116);
 var $118=($117|0)<0;
 if($118){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=22;break;
 case 15: 
 var $121=$6;
 var $122=(($121+18)|0);
 var $123=HEAP8[($122)];
 var $124=($123&255);
 var $125=$xxi;
 var $126=(($125+760)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$127;
 var $129=(($128+4)|0);
 HEAP32[(($129)>>2)]=$124;
 var $130=$6;
 var $131=(($130+19)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=$xxi;
 var $135=(($134+760)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$136;
 var $138=(($137+8)|0);
 HEAP32[(($138)>>2)]=$133;
 $j=0;
 label=16;break;
 case 16: 
 var $140=$j;
 var $141=$6;
 var $142=(($141+20)|0);
 var $143=HEAP16[(($142)>>1)];
 var $144=($143&65535);
 var $145=($140|0)<($144|0);
 if($145){label=17;break;}else{label=21;break;}
 case 17: 
 var $147=$j;
 var $148=$xxi;
 var $149=(($148+756)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+($147<<6))|0);
 $sub=$151;
 var $152=$5;
 var $153=$mod;
 var $154=(($153+180)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+((($152)*(52))&-1))|0);
 $xxs=$156;
 var $157=$sub;
 var $158=(($157+8)|0);
 HEAP32[(($158)>>2)]=128;
 var $159=$8;
 var $160=(($159+6)|0);
 var $161=HEAP8[($160)];
 var $162=($161&255);
 var $163=$sub;
 var $164=(($163)|0);
 HEAP32[(($164)>>2)]=$162;
 var $165=$8;
 var $166=(($165+7)|0);
 var $167=HEAP8[($166)];
 var $168=(($167<<24)>>24);
 var $169=((($168)-(24))|0);
 var $170=$sub;
 var $171=(($170+12)|0);
 HEAP32[(($171)>>2)]=$169;
 var $172=$5;
 var $173=$sub;
 var $174=(($173+40)|0);
 HEAP32[(($174)>>2)]=$172;
 var $175=$7;
 var $176=(($175+3)|0);
 var $177=HEAP8[($176)];
 var $178=(($177<<24)>>24);
 var $179=$sub;
 var $180=(($179+16)|0);
 HEAP32[(($180)>>2)]=$178;
 var $181=$2;
 var $182=$pos;
 var $183=((($182)-(6))|0);
 var $184=$j;
 var $185=$6;
 var $186=(($185+280)|0);
 var $187=(($186+($184<<2))|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=((($183)+($188))|0);
 var $190=_hio_seek($181,$189,0);
 var $191=$2;
 var $192=_hio_read16b($191);
 var $193=($192&65535);
 var $194=($193<<1);
 var $195=$xxs;
 var $196=(($195+32)|0);
 HEAP32[(($196)>>2)]=$194;
 var $197=$xxs;
 var $198=(($197+36)|0);
 HEAP32[(($198)>>2)]=0;
 var $199=$5;
 var $200=$mod;
 var $201=(($200+180)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+((($199)*(52))&-1))|0);
 var $204=(($203+32)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=$xxs;
 var $207=(($206+40)|0);
 HEAP32[(($207)>>2)]=$205;
 var $208=$xxs;
 var $209=(($208+44)|0);
 HEAP32[(($209)>>2)]=2;
 var $210=$3;
 var $211=$2;
 var $212=$xxs;
 var $213=_load_sample($210,$211,0,$212,0);
 var $214=($213|0)<0;
 if($214){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=22;break;
 case 19: 
 var $217=$5;
 var $218=((($217)+(1))|0);
 $5=$218;
 label=20;break;
 case 20: 
 var $220=$j;
 var $221=((($220)+(1))|0);
 $j=$221;
 label=16;break;
 case 21: 
 $1=0;
 label=22;break;
 case 22: 
 var $224=$1;
 STACKTOP=sp;return $224;
  default: assert(0, "bad label: " + label);
 }
}
function _mmd_set_bpm($m,$med_8ch,$deftempo,$bpm_on,$bpmlen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 $1=$m;
 $2=$med_8ch;
 $3=$deftempo;
 $4=$bpm_on;
 $5=$bpmlen;
 var $6=$1;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$2;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$3;
 var $12=_get_8ch_tempo($11);
 var $13=$mod;
 var $14=(($13+152)|0);
 HEAP32[(($14)>>2)]=$12;
 label=6;break;
 case 3: 
 var $16=$3;
 var $17=$mod;
 var $18=(($17+152)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$4;
 var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$5;
 var $23=($22|0);
 var $24=(40)/($23);
 var $25=$1;
 var $26=(($25+1256)|0);
 HEAPF64[(($26)>>3)]=$24;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mod_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $buf=sp;
 var $st=(sp)+(8);
 var $smp_size;
 var $num_pat;
 var $x;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(1080))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=(($buf)|0);
 var $10=$2;
 var $11=_hio_read($9,1,4,$10);
 var $12=($11>>>0)<4;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=55;break;
 case 3: 
 var $15=(($buf)|0);
 var $16=(($15+2)|0);
 var $17=_strncmp($16,26144,2);
 var $18=($17|0)!=0;
 if($18){label=10;break;}else{label=4;break;}
 case 4: 
 var $20=(($buf)|0);
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24);
 var $23=_isdigit($22);
 var $24=($23|0)!=0;
 if($24){label=5;break;}else{label=10;break;}
 case 5: 
 var $26=(($buf+1)|0);
 var $27=HEAP8[($26)];
 var $28=(($27<<24)>>24);
 var $29=_isdigit($28);
 var $30=($29|0)!=0;
 if($30){label=6;break;}else{label=10;break;}
 case 6: 
 var $32=(($buf)|0);
 var $33=HEAP8[($32)];
 var $34=(($33<<24)>>24);
 var $35=((($34)-(48))|0);
 var $36=((($35)*(10))&-1);
 var $37=(($buf+1)|0);
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=((($36)+($39))|0);
 var $41=((($40)-(48))|0);
 $i=$41;
 var $42=$i;
 var $43=($42|0)>0;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=$i;
 var $46=($45|0)<=32;
 if($46){label=8;break;}else{label=9;break;}
 case 8: 
 label=54;break;
 case 9: 
 label=10;break;
 case 10: 
 var $50=(($buf)|0);
 var $51=(($50+1)|0);
 var $52=_strncmp($51,25784,3);
 var $53=($52|0)!=0;
 if($53){label=15;break;}else{label=11;break;}
 case 11: 
 var $55=(($buf)|0);
 var $56=HEAP8[($55)];
 var $57=(($56<<24)>>24);
 var $58=_isdigit($57);
 var $59=($58|0)!=0;
 if($59){label=12;break;}else{label=15;break;}
 case 12: 
 var $61=(($buf)|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24);
 var $64=((($63)-(48))|0);
 var $65=($64|0)!=0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 label=54;break;
 case 14: 
 label=15;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $70=$i;
 var $71=((5368+($70<<4))|0);
 var $72=(($71+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)!=0;
 if($74){label=17;break;}else{label=21;break;}
 case 17: 
 var $76=(($buf)|0);
 var $77=$i;
 var $78=((5368+($77<<4))|0);
 var $79=(($78)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=_memcmp($76,$80,4);
 var $82=($81|0)!=0;
 if($82){label=19;break;}else{label=18;break;}
 case 18: 
 label=21;break;
 case 19: 
 label=20;break;
 case 20: 
 var $86=$i;
 var $87=((($86)+(1))|0);
 $i=$87;
 label=16;break;
 case 21: 
 var $89=$i;
 var $90=((5368+($89<<4))|0);
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=55;break;
 case 23: 
 var $96=$2;
 var $97=$4;
 var $98=((($97)+(20))|0);
 var $99=_hio_seek($96,$98,0);
 $i=0;
 label=24;break;
 case 24: 
 var $101=$i;
 var $102=($101|0)<31;
 if($102){label=25;break;}else{label=37;break;}
 case 25: 
 var $104=$2;
 var $105=_hio_seek($104,22,1);
 var $106=$2;
 var $107=_hio_read16b($106);
 var $108=($107&65535);
 var $109=$108&32768;
 var $110=($109|0)!=0;
 if($110){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=55;break;
 case 27: 
 var $113=$2;
 var $114=_hio_read8($113);
 var $115=($114&255);
 var $116=$115&240;
 var $117=($116|0)!=0;
 if($117){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=55;break;
 case 29: 
 var $120=$2;
 var $121=_hio_read8($120);
 var $122=($121&255);
 var $123=($122|0)>64;
 if($123){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=55;break;
 case 31: 
 var $126=$2;
 var $127=_hio_read16b($126);
 var $128=($127&65535);
 var $129=$128&32768;
 var $130=($129|0)!=0;
 if($130){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=55;break;
 case 33: 
 var $133=$2;
 var $134=_hio_read16b($133);
 var $135=($134&65535);
 var $136=$135&32768;
 var $137=($136|0)!=0;
 if($137){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=55;break;
 case 35: 
 label=36;break;
 case 36: 
 var $141=$i;
 var $142=((($141)+(1))|0);
 $i=$142;
 label=24;break;
 case 37: 
 var $144=$2;
 var $145=(($144)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)!=0;
 if($147){label=38;break;}else{label=39;break;}
 case 38: 
 label=54;break;
 case 39: 
 var $150=$2;
 var $151=_hio_stat($150,$st);
 $smp_size=0;
 var $152=$2;
 var $153=$4;
 var $154=((($153)+(20))|0);
 var $155=_hio_seek($152,$154,0);
 $i=0;
 label=40;break;
 case 40: 
 var $157=$i;
 var $158=($157|0)<31;
 if($158){label=41;break;}else{label=43;break;}
 case 41: 
 var $160=$2;
 var $161=_hio_seek($160,22,1);
 var $162=$2;
 var $163=_hio_read16b($162);
 var $164=($163&65535);
 var $165=($164<<1);
 var $166=$smp_size;
 var $167=((($166)+($165))|0);
 $smp_size=$167;
 var $168=$2;
 var $169=_hio_seek($168,6,1);
 label=42;break;
 case 42: 
 var $171=$i;
 var $172=((($171)+(1))|0);
 $i=$172;
 label=40;break;
 case 43: 
 $num_pat=0;
 var $174=$2;
 var $175=$4;
 var $176=((($175)+(952))|0);
 var $177=_hio_seek($174,$176,0);
 $i=0;
 label=44;break;
 case 44: 
 var $179=$i;
 var $180=($179|0)<128;
 if($180){label=45;break;}else{label=51;break;}
 case 45: 
 var $182=$2;
 var $183=_hio_read8($182);
 $x=$183;
 var $184=$x;
 var $185=($184&255);
 var $186=($185|0)>127;
 if($186){label=46;break;}else{label=47;break;}
 case 46: 
 label=51;break;
 case 47: 
 var $189=$x;
 var $190=($189&255);
 var $191=$num_pat;
 var $192=($190|0)>($191|0);
 if($192){label=48;break;}else{label=49;break;}
 case 48: 
 var $194=$x;
 var $195=($194&255);
 $num_pat=$195;
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 var $198=$i;
 var $199=((($198)+(1))|0);
 $i=$199;
 label=44;break;
 case 51: 
 var $201=$num_pat;
 var $202=((($201)+(1))|0);
 $num_pat=$202;
 var $203=$4;
 var $204=((($203)+(1084))|0);
 var $205=$num_pat;
 var $206=((($205)*(768))&-1);
 var $207=((($204)+($206))|0);
 var $208=$smp_size;
 var $209=((($207)+($208))|0);
 var $210=(($st+36)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=($209|0)==($211|0);
 if($212){label=52;break;}else{label=53;break;}
 case 52: 
 $1=-1;
 label=55;break;
 case 53: 
 label=54;break;
 case 54: 
 var $216=$2;
 var $217=$4;
 var $218=(($217)|0);
 var $219=_hio_seek($216,$218,0);
 var $220=$2;
 var $221=$3;
 _read_title($220,$221,20);
 $1=0;
 label=55;break;
 case 55: 
 var $223=$1;
 STACKTOP=sp;return $223;
  default: assert(0, "bad label: " + label);
 }
}
function _mod_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5488)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $smp_size;
 var $pat_size;
 var $wow;
 var $ptsong;
 var $event;
 var $mh=sp;
 var $mod_event=(sp)+(1088);
 var $x;
 var $pathname=(sp)+(1096);
 var $tracker;
 var $detected;
 var $magic=(sp)+(5192);
 var $idbuffer=(sp)+(5200);
 var $ptkloop;
 var $tracker_id;
 var $pos;
 var $flags;
 var $s;
 var $sn=(sp)+(5232);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $ptsong=0;
 var $7=$pathname;
 _memset($7, 0, 4096)|0;
 $tracker=32104;
 $detected=0;
 $ptkloop=0;
 $tracker_id=0;
 label=2;break;
 case 2: 
 var $9=$3;
 var $10=$4;
 var $11=_hio_seek($9,$10,0);
 label=3;break;
 case 3: 
 var $13=$mod;
 var $14=(($13+140)|0);
 HEAP32[(($14)>>2)]=31;
 var $15=$mod;
 var $16=(($15+140)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$mod;
 var $19=(($18+144)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$mod;
 var $21=(($20+136)|0);
 HEAP32[(($21)>>2)]=0;
 $smp_size=0;
 $pat_size=0;
 var $22=$2;
 var $23=(($22+1280)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$24|8192;
 HEAP32[(($23)>>2)]=$25;
 var $26=(($mh)|0);
 var $27=$26;
 var $28=$3;
 var $29=_hio_read($27,20,1,$28);
 $i=0;
 label=4;break;
 case 4: 
 var $31=$i;
 var $32=($31|0)<31;
 if($32){label=5;break;}else{label=7;break;}
 case 5: 
 var $34=$i;
 var $35=(($mh+20)|0);
 var $36=(($35+((($34)*(30))&-1))|0);
 var $37=(($36)|0);
 var $38=$37;
 var $39=$3;
 var $40=_hio_read($38,22,1,$39);
 var $41=$3;
 var $42=_hio_read16b($41);
 var $43=$i;
 var $44=(($mh+20)|0);
 var $45=(($44+((($43)*(30))&-1))|0);
 var $46=(($45+22)|0);
 HEAP16[(($46)>>1)]=$42;
 var $47=$3;
 var $48=_hio_read8($47);
 var $49=$i;
 var $50=(($mh+20)|0);
 var $51=(($50+((($49)*(30))&-1))|0);
 var $52=(($51+24)|0);
 HEAP8[($52)]=$48;
 var $53=$3;
 var $54=_hio_read8($53);
 var $55=$i;
 var $56=(($mh+20)|0);
 var $57=(($56+((($55)*(30))&-1))|0);
 var $58=(($57+25)|0);
 HEAP8[($58)]=$54;
 var $59=$3;
 var $60=_hio_read16b($59);
 var $61=$i;
 var $62=(($mh+20)|0);
 var $63=(($62+((($61)*(30))&-1))|0);
 var $64=(($63+26)|0);
 HEAP16[(($64)>>1)]=$60;
 var $65=$3;
 var $66=_hio_read16b($65);
 var $67=$i;
 var $68=(($mh+20)|0);
 var $69=(($68+((($67)*(30))&-1))|0);
 var $70=(($69+28)|0);
 HEAP16[(($70)>>1)]=$66;
 var $71=$i;
 var $72=(($mh+20)|0);
 var $73=(($72+((($71)*(30))&-1))|0);
 var $74=(($73+22)|0);
 var $75=HEAP16[(($74)>>1)];
 var $76=($75&65535);
 var $77=($76<<1);
 var $78=$smp_size;
 var $79=((($78)+($77))|0);
 $smp_size=$79;
 label=6;break;
 case 6: 
 var $81=$i;
 var $82=((($81)+(1))|0);
 $i=$82;
 label=4;break;
 case 7: 
 var $84=$3;
 var $85=_hio_read8($84);
 var $86=(($mh+950)|0);
 HEAP8[($86)]=$85;
 var $87=$3;
 var $88=_hio_read8($87);
 var $89=(($mh+951)|0);
 HEAP8[($89)]=$88;
 var $90=(($mh+952)|0);
 var $91=$90;
 var $92=$3;
 var $93=_hio_read($91,128,1,$92);
 var $94=$magic;
 _memset($94, 0, 8)|0;
 var $95=(($magic)|0);
 var $96=$3;
 var $97=_hio_read($95,4,1,$96);
 $i=0;
 label=8;break;
 case 8: 
 var $99=$i;
 var $100=((5368+($99<<4))|0);
 var $101=(($100+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($102|0)!=0;
 if($103){label=9;break;}else{label=13;break;}
 case 9: 
 var $105=(($magic)|0);
 var $106=$i;
 var $107=((5368+($106<<4))|0);
 var $108=(($107)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=_strncmp($105,$109,4);
 var $111=($110|0)!=0;
 if($111){label=11;break;}else{label=10;break;}
 case 10: 
 var $113=$i;
 var $114=((5368+($113<<4))|0);
 var $115=(($114+12)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$mod;
 var $118=(($117+136)|0);
 HEAP32[(($118)>>2)]=$116;
 var $119=$i;
 var $120=((5368+($119<<4))|0);
 var $121=(($120+8)|0);
 var $122=HEAP32[(($121)>>2)];
 $tracker_id=$122;
 var $123=$i;
 var $124=((5368+($123<<4))|0);
 var $125=(($124+4)|0);
 var $126=HEAP32[(($125)>>2)];
 $detected=$126;
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 var $129=$i;
 var $130=((($129)+(1))|0);
 $i=$130;
 label=8;break;
 case 13: 
 var $132=$mod;
 var $133=(($132+136)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)!=0;
 if($135){label=24;break;}else{label=14;break;}
 case 14: 
 var $137=(($magic)|0);
 var $138=(($137+2)|0);
 var $139=_strncmp($138,26144,2);
 var $140=($139|0)!=0;
 if($140){label=18;break;}else{label=15;break;}
 case 15: 
 var $142=(($magic)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24);
 var $145=_isdigit($144);
 var $146=($145|0)!=0;
 if($146){label=16;break;}else{label=18;break;}
 case 16: 
 var $148=(($magic+1)|0);
 var $149=HEAP8[($148)];
 var $150=(($149<<24)>>24);
 var $151=_isdigit($150);
 var $152=($151|0)!=0;
 if($152){label=17;break;}else{label=18;break;}
 case 17: 
 var $154=(($magic)|0);
 var $155=HEAP8[($154)];
 var $156=(($155<<24)>>24);
 var $157=((($156)-(48))|0);
 var $158=((($157)*(10))&-1);
 var $159=(($magic+1)|0);
 var $160=HEAP8[($159)];
 var $161=(($160<<24)>>24);
 var $162=((($158)+($161))|0);
 var $163=((($162)-(48))|0);
 var $164=$mod;
 var $165=(($164+136)|0);
 HEAP32[(($165)>>2)]=$163;
 label=23;break;
 case 18: 
 var $167=(($magic)|0);
 var $168=(($167+1)|0);
 var $169=_strncmp($168,25784,3);
 var $170=($169|0)!=0;
 if($170){label=21;break;}else{label=19;break;}
 case 19: 
 var $172=(($magic)|0);
 var $173=HEAP8[($172)];
 var $174=(($173<<24)>>24);
 var $175=_isdigit($174);
 var $176=($175|0)!=0;
 if($176){label=20;break;}else{label=21;break;}
 case 20: 
 var $178=(($magic)|0);
 var $179=HEAP8[($178)];
 var $180=(($179<<24)>>24);
 var $181=((($180)-(48))|0);
 var $182=$mod;
 var $183=(($182+136)|0);
 HEAP32[(($183)>>2)]=$181;
 label=22;break;
 case 21: 
 $1=-1;
 label=232;break;
 case 22: 
 label=23;break;
 case 23: 
 var $187=$mod;
 var $188=(($187+136)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$189&1;
 var $191=($190|0)!=0;
 var $192=($191?6:4);
 $tracker_id=$192;
 $detected=1;
 var $193=$2;
 var $194=(($193+1280)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=$195&-8193;
 HEAP32[(($194)>>2)]=$196;
 label=24;break;
 case 24: 
 var $198=$mod;
 var $199=(($198)|0);
 var $200=(($199)|0);
 var $201=(($mh)|0);
 var $202=(($201)|0);
 var $203=_strlcpy($200,$202,20);
 var $204=(($mh+950)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$mod;
 var $208=(($207+156)|0);
 HEAP32[(($208)>>2)]=$206;
 var $209=$mod;
 var $210=(($209+160)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=$mod;
 var $213=(($212+156)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($211|0)>=($214|0);
 if($215){label=25;break;}else{label=26;break;}
 case 25: 
 var $217=$mod;
 var $218=(($217+160)|0);
 HEAP32[(($218)>>2)]=0;
 label=26;break;
 case 26: 
 var $220=$mod;
 var $221=(($220+952)|0);
 var $222=$221;
 var $223=(($mh+952)|0);
 var $224=$223;
 assert(128 % 1 === 0);(_memcpy($222, $224, 128)|0);
 $i=0;
 label=27;break;
 case 27: 
 var $226=$i;
 var $227=($226|0)<128;
 if($227){label=28;break;}else{label=34;break;}
 case 28: 
 var $229=$i;
 var $230=$mod;
 var $231=(($230+952)|0);
 var $232=(($231+$229)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=($234|0)>127;
 if($235){label=29;break;}else{label=30;break;}
 case 29: 
 label=34;break;
 case 30: 
 var $238=$i;
 var $239=$mod;
 var $240=(($239+952)|0);
 var $241=(($240+$238)|0);
 var $242=HEAP8[($241)];
 var $243=($242&255);
 var $244=$mod;
 var $245=(($244+128)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=($243|0)>($246|0);
 if($247){label=31;break;}else{label=32;break;}
 case 31: 
 var $249=$i;
 var $250=$mod;
 var $251=(($250+952)|0);
 var $252=(($251+$249)|0);
 var $253=HEAP8[($252)];
 var $254=($253&255);
 var $255=$mod;
 var $256=(($255+128)|0);
 HEAP32[(($256)>>2)]=$254;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $259=$i;
 var $260=((($259)+(1))|0);
 $i=$260;
 label=27;break;
 case 34: 
 var $262=$mod;
 var $263=(($262+128)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=((($264)+(1))|0);
 HEAP32[(($263)>>2)]=$265;
 var $266=$mod;
 var $267=(($266+136)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=($268<<8);
 var $270=$mod;
 var $271=(($270+128)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(Math_imul($269,$272)|0);
 $pat_size=$273;
 var $274=$mod;
 var $275=_instrument_init($274);
 var $276=($275|0)<0;
 if($276){label=35;break;}else{label=36;break;}
 case 35: 
 $1=-1;
 label=232;break;
 case 36: 
 $i=0;
 label=37;break;
 case 37: 
 var $280=$i;
 var $281=$mod;
 var $282=(($281+140)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($280|0)<($283|0);
 if($284){label=38;break;}else{label=48;break;}
 case 38: 
 var $286=$mod;
 var $287=$i;
 var $288=_subinstrument_alloc($286,$287,1);
 var $289=($288|0)<0;
 if($289){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=232;break;
 case 40: 
 var $292=$i;
 var $293=(($mh+20)|0);
 var $294=(($293+((($292)*(30))&-1))|0);
 var $295=(($294+22)|0);
 var $296=HEAP16[(($295)>>1)];
 var $297=($296&65535);
 var $298=($297<<1);
 var $299=$i;
 var $300=$mod;
 var $301=(($300+180)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+((($299)*(52))&-1))|0);
 var $304=(($303+32)|0);
 HEAP32[(($304)>>2)]=$298;
 var $305=$i;
 var $306=(($mh+20)|0);
 var $307=(($306+((($305)*(30))&-1))|0);
 var $308=(($307+26)|0);
 var $309=HEAP16[(($308)>>1)];
 var $310=($309&65535);
 var $311=($310<<1);
 var $312=$i;
 var $313=$mod;
 var $314=(($313+180)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=(($315+((($312)*(52))&-1))|0);
 var $317=(($316+36)|0);
 HEAP32[(($317)>>2)]=$311;
 var $318=$i;
 var $319=$mod;
 var $320=(($319+180)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=(($321+((($318)*(52))&-1))|0);
 var $323=(($322+36)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=$i;
 var $326=(($mh+20)|0);
 var $327=(($326+((($325)*(30))&-1))|0);
 var $328=(($327+28)|0);
 var $329=HEAP16[(($328)>>1)];
 var $330=($329&65535);
 var $331=($330<<1);
 var $332=((($324)+($331))|0);
 var $333=$i;
 var $334=$mod;
 var $335=(($334+180)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+((($333)*(52))&-1))|0);
 var $338=(($337+40)|0);
 HEAP32[(($338)>>2)]=$332;
 var $339=$i;
 var $340=$mod;
 var $341=(($340+180)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($342+((($339)*(52))&-1))|0);
 var $344=(($343+40)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=$i;
 var $347=$mod;
 var $348=(($347+180)|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=(($349+((($346)*(52))&-1))|0);
 var $351=(($350+32)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=($345|0)>($352|0);
 if($353){label=41;break;}else{label=42;break;}
 case 41: 
 var $355=$i;
 var $356=$mod;
 var $357=(($356+180)|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=(($358+((($355)*(52))&-1))|0);
 var $360=(($359+32)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=$i;
 var $363=$mod;
 var $364=(($363+180)|0);
 var $365=HEAP32[(($364)>>2)];
 var $366=(($365+((($362)*(52))&-1))|0);
 var $367=(($366+40)|0);
 HEAP32[(($367)>>2)]=$361;
 label=42;break;
 case 42: 
 var $369=$i;
 var $370=(($mh+20)|0);
 var $371=(($370+((($369)*(30))&-1))|0);
 var $372=(($371+28)|0);
 var $373=HEAP16[(($372)>>1)];
 var $374=($373&65535);
 var $375=($374|0)>1;
 if($375){label=43;break;}else{var $386=0;label=44;break;}
 case 43: 
 var $377=$i;
 var $378=$mod;
 var $379=(($378+180)|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=(($380+((($377)*(52))&-1))|0);
 var $382=(($381+40)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($383|0)>=4;
 var $386=$384;label=44;break;
 case 44: 
 var $386;
 var $387=($386?2:0);
 var $388=$i;
 var $389=$mod;
 var $390=(($389+180)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=(($391+((($388)*(52))&-1))|0);
 var $393=(($392+44)|0);
 HEAP32[(($393)>>2)]=$387;
 var $394=$i;
 var $395=(($mh+20)|0);
 var $396=(($395+((($394)*(30))&-1))|0);
 var $397=(($396+24)|0);
 var $398=HEAP8[($397)];
 var $399=(($398<<24)>>24);
 var $400=$399<<4;
 var $401=(($400)&255);
 var $402=(($401<<24)>>24);
 var $403=$i;
 var $404=$mod;
 var $405=(($404+176)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=(($406+((($403)*(764))&-1))|0);
 var $408=(($407+756)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($409)|0);
 var $411=(($410+16)|0);
 HEAP32[(($411)>>2)]=$402;
 var $412=$i;
 var $413=(($mh+20)|0);
 var $414=(($413+((($412)*(30))&-1))|0);
 var $415=(($414+25)|0);
 var $416=HEAP8[($415)];
 var $417=(($416<<24)>>24);
 var $418=$i;
 var $419=$mod;
 var $420=(($419+176)|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=(($421+((($418)*(764))&-1))|0);
 var $423=(($422+756)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=(($424)|0);
 var $426=(($425)|0);
 HEAP32[(($426)>>2)]=$417;
 var $427=$i;
 var $428=$mod;
 var $429=(($428+176)|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=(($430+((($427)*(764))&-1))|0);
 var $432=(($431+756)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=(($433)|0);
 var $435=(($434+8)|0);
 HEAP32[(($435)>>2)]=128;
 var $436=$i;
 var $437=$i;
 var $438=$mod;
 var $439=(($438+176)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($440+((($437)*(764))&-1))|0);
 var $442=(($441+756)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=(($443)|0);
 var $445=(($444+40)|0);
 HEAP32[(($445)>>2)]=$436;
 var $446=$mod;
 var $447=$i;
 var $448=$i;
 var $449=(($mh+20)|0);
 var $450=(($449+((($448)*(30))&-1))|0);
 var $451=(($450)|0);
 var $452=(($451)|0);
 var $453=_instrument_name($446,$447,$452,22);
 var $454=$i;
 var $455=$mod;
 var $456=(($455+180)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=(($457+((($454)*(52))&-1))|0);
 var $459=(($458+32)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=($460|0)>0;
 if($461){label=45;break;}else{label=46;break;}
 case 45: 
 var $463=$i;
 var $464=$mod;
 var $465=(($464+176)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=(($466+((($463)*(764))&-1))|0);
 var $468=(($467+36)|0);
 HEAP32[(($468)>>2)]=1;
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $471=$i;
 var $472=((($471)+(1))|0);
 $i=$472;
 label=37;break;
 case 48: 
 var $474=$detected;
 var $475=($474|0)!=0;
 if($475){label=49;break;}else{label=50;break;}
 case 49: 
 label=158;break;
 case 50: 
 var $478=$mod;
 var $479=(($478+128)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=($480<<2);
 var $482=$mod;
 var $483=(($482+136)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=(Math_imul($481,$484)|0);
 var $486=($485<<6);
 var $487=((($486)+(1084))|0);
 var $488=$smp_size;
 var $489=((($487)+($488))|0);
 var $490=$2;
 var $491=(($490+1240)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($489|0)<($492|0);
 if($493){label=51;break;}else{label=54;break;}
 case 51: 
 var $495=$3;
 var $496=_hio_tell($495);
 $pos=$496;
 var $497=$3;
 var $498=$4;
 var $499=((($498)+(1084))|0);
 var $500=$mod;
 var $501=(($500+128)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=($502<<2);
 var $504=$mod;
 var $505=(($504+136)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=(Math_imul($503,$506)|0);
 var $508=($507<<6);
 var $509=((($499)+($508))|0);
 var $510=$smp_size;
 var $511=((($509)+($510))|0);
 var $512=_hio_seek($497,$511,0);
 var $513=(($idbuffer)|0);
 var $514=$3;
 var $515=_hio_read($513,1,4,$514);
 var $516=$3;
 var $517=$4;
 var $518=$pos;
 var $519=((($517)+($518))|0);
 var $520=_hio_seek($516,$519,0);
 var $521=(($idbuffer)|0);
 var $522=_memcmp($521,25656,4);
 var $523=($522|0)!=0;
 if($523){label=53;break;}else{label=52;break;}
 case 52: 
 $tracker_id=8;
 label=158;break;
 case 53: 
 label=54;break;
 case 54: 
 var $527=(($magic)|0);
 var $528=_strncmp($527,23080,4);
 var $529=($528|0)!=0;
 if($529){var $544=0;label=56;break;}else{label=55;break;}
 case 55: 
 var $531=$mod;
 var $532=(($531+128)|0);
 var $533=HEAP32[(($532)>>2)];
 var $534=($533<<5);
 var $535=($534<<6);
 var $536=((($535)+(1084))|0);
 var $537=$smp_size;
 var $538=((($536)+($537))|0);
 var $539=$2;
 var $540=(($539+1240)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=($538|0)==($541|0);
 var $544=$542;label=56;break;
 case 56: 
 var $544;
 var $545=($544&1);
 $wow=$545;
 if($544){label=57;break;}else{label=58;break;}
 case 57: 
 var $547=$mod;
 var $548=(($547+136)|0);
 HEAP32[(($548)>>2)]=8;
 $tracker_id=9;
 label=158;break;
 case 58: 
 var $550=(($magic)|0);
 var $551=_strncmp($550,23080,4);
 var $552=($551|0)!=0;
 if($552){var $564=0;label=60;break;}else{label=59;break;}
 case 59: 
 var $554=$mod;
 var $555=(($554+128)|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=($556<<10);
 var $558=((($557)+(1084))|0);
 var $559=$2;
 var $560=(($559+1240)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=($558|0)==($561|0);
 var $564=$562;label=60;break;
 case 60: 
 var $564;
 var $565=($564&1);
 $ptsong=$565;
 if($564){label=61;break;}else{label=62;break;}
 case 61: 
 $tracker_id=0;
 label=158;break;
 case 62: 
 label=63;break;
 case 63: 
 var $569=$mod;
 var $570=(($569+136)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=($571|0)==4;
 if($572){label=64;break;}else{label=66;break;}
 case 64: 
 var $574=(($mh+951)|0);
 var $575=HEAP8[($574)];
 var $576=($575&255);
 var $577=$mod;
 var $578=(($577+128)|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=($576|0)==($579|0);
 if($580){label=65;break;}else{label=66;break;}
 case 65: 
 $tracker_id=2;
 label=76;break;
 case 66: 
 var $583=$mod;
 var $584=(($583+136)|0);
 var $585=HEAP32[(($584)>>2)];
 var $586=($585|0)==4;
 if($586){label=67;break;}else{label=69;break;}
 case 67: 
 var $588=(($mh+951)|0);
 var $589=HEAP8[($588)];
 var $590=($589&255);
 var $591=($590|0)==120;
 if($591){label=68;break;}else{label=69;break;}
 case 68: 
 $tracker_id=1;
 label=75;break;
 case 69: 
 var $594=(($mh+951)|0);
 var $595=HEAP8[($594)];
 var $596=($595&255);
 var $597=($596|0)<127;
 if($597){label=70;break;}else{label=74;break;}
 case 70: 
 var $599=$mod;
 var $600=(($599+136)|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=($601|0)==4;
 if($602){label=71;break;}else{label=72;break;}
 case 71: 
 $tracker_id=1;
 label=73;break;
 case 72: 
 $tracker_id=99;
 label=73;break;
 case 73: 
 var $606=(($mh+951)|0);
 var $607=HEAP8[($606)];
 var $608=($607&255);
 var $609=$mod;
 var $610=(($609+160)|0);
 HEAP32[(($610)>>2)]=$608;
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 var $614=$mod;
 var $615=(($614+136)|0);
 var $616=HEAP32[(($615)>>2)];
 var $617=($616|0)!=4;
 if($617){label=77;break;}else{label=79;break;}
 case 77: 
 var $619=(($mh+951)|0);
 var $620=HEAP8[($619)];
 var $621=($620&255);
 var $622=($621|0)==127;
 if($622){label=78;break;}else{label=79;break;}
 case 78: 
 $tracker_id=10;
 var $624=$2;
 var $625=(($624+1280)|0);
 var $626=HEAP32[(($625)>>2)];
 var $627=$626&-8193;
 HEAP32[(($625)>>2)]=$627;
 var $628=$2;
 var $629=(($628+1284)|0);
 HEAP32[(($629)>>2)]=2;
 label=79;break;
 case 79: 
 var $631=$mod;
 var $632=(($631+136)|0);
 var $633=HEAP32[(($632)>>2)];
 var $634=($633|0)==4;
 if($634){label=80;break;}else{label=90;break;}
 case 80: 
 var $636=(($mh+951)|0);
 var $637=HEAP8[($636)];
 var $638=($637&255);
 var $639=($638|0)==127;
 if($639){label=81;break;}else{label=90;break;}
 case 81: 
 $i=0;
 label=82;break;
 case 82: 
 var $642=$i;
 var $643=($642|0)<31;
 if($643){label=83;break;}else{label=87;break;}
 case 83: 
 var $645=$i;
 var $646=(($mh+20)|0);
 var $647=(($646+((($645)*(30))&-1))|0);
 var $648=(($647+28)|0);
 var $649=HEAP16[(($648)>>1)];
 var $650=($649&65535);
 var $651=($650|0)==0;
 if($651){label=84;break;}else{label=85;break;}
 case 84: 
 label=87;break;
 case 85: 
 label=86;break;
 case 86: 
 var $655=$i;
 var $656=((($655)+(1))|0);
 $i=$656;
 label=82;break;
 case 87: 
 var $658=$i;
 var $659=($658|0)<31;
 if($659){label=88;break;}else{label=89;break;}
 case 88: 
 $tracker_id=98;
 label=89;break;
 case 89: 
 label=90;break;
 case 90: 
 var $663=(($mh+951)|0);
 var $664=HEAP8[($663)];
 var $665=($664&255);
 var $666=($665|0)!=120;
 if($666){label=91;break;}else{label=157;break;}
 case 91: 
 var $668=(($mh+951)|0);
 var $669=HEAP8[($668)];
 var $670=($669&255);
 var $671=($670|0)<127;
 if($671){label=92;break;}else{label=157;break;}
 case 92: 
 $i=0;
 label=93;break;
 case 93: 
 var $674=$i;
 var $675=($674|0)<31;
 if($675){label=94;break;}else{label=98;break;}
 case 94: 
 var $677=$i;
 var $678=(($mh+20)|0);
 var $679=(($678+((($677)*(30))&-1))|0);
 var $680=(($679+28)|0);
 var $681=HEAP16[(($680)>>1)];
 var $682=($681&65535);
 var $683=($682|0)==0;
 if($683){label=95;break;}else{label=96;break;}
 case 95: 
 label=98;break;
 case 96: 
 label=97;break;
 case 97: 
 var $687=$i;
 var $688=((($687)+(1))|0);
 $i=$688;
 label=93;break;
 case 98: 
 var $690=$i;
 var $691=($690|0)==31;
 if($691){label=99;break;}else{label=133;break;}
 case 99: 
 $i=0;
 label=100;break;
 case 100: 
 var $694=$i;
 var $695=($694|0)<31;
 if($695){label=101;break;}else{label=106;break;}
 case 101: 
 var $697=$i;
 var $698=(($mh+20)|0);
 var $699=(($698+((($697)*(30))&-1))|0);
 var $700=(($699+22)|0);
 var $701=HEAP16[(($700)>>1)];
 var $702=($701&65535);
 var $703=($702|0)==1;
 if($703){label=102;break;}else{label=104;break;}
 case 102: 
 var $705=$i;
 var $706=(($mh+20)|0);
 var $707=(($706+((($705)*(30))&-1))|0);
 var $708=(($707+25)|0);
 var $709=HEAP8[($708)];
 var $710=(($709<<24)>>24);
 var $711=($710|0)==0;
 if($711){label=103;break;}else{label=104;break;}
 case 103: 
 $tracker_id=97;
 label=158;break;
 case 104: 
 label=105;break;
 case 105: 
 var $715=$i;
 var $716=((($715)+(1))|0);
 $i=$716;
 label=100;break;
 case 106: 
 $i=0;
 label=107;break;
 case 107: 
 var $719=$i;
 var $720=($719|0)<31;
 if($720){label=108;break;}else{label=112;break;}
 case 108: 
 var $722=$i;
 var $723=(($mh+20)|0);
 var $724=(($723+((($722)*(30))&-1))|0);
 var $725=(($724)|0);
 var $726=(($725)|0);
 var $727=_is_st_ins($726);
 var $728=($727|0)!=0;
 if($728){label=109;break;}else{label=110;break;}
 case 109: 
 label=112;break;
 case 110: 
 label=111;break;
 case 111: 
 var $732=$i;
 var $733=((($732)+(1))|0);
 $i=$733;
 label=107;break;
 case 112: 
 var $735=$i;
 var $736=($735|0)==31;
 if($736){label=113;break;}else{label=132;break;}
 case 113: 
 $i=0;
 label=114;break;
 case 114: 
 var $739=$i;
 var $740=($739|0)<31;
 if($740){label=115;break;}else{label=124;break;}
 case 115: 
 var $742=$i;
 var $743=(($mh+20)|0);
 var $744=(($743+((($742)*(30))&-1))|0);
 var $745=(($744+22)|0);
 var $746=HEAP16[(($745)>>1)];
 var $747=($746&65535);
 var $748=($747|0)==0;
 if($748){label=116;break;}else{label=122;break;}
 case 116: 
 var $750=$i;
 var $751=(($mh+20)|0);
 var $752=(($751+((($750)*(30))&-1))|0);
 var $753=(($752+28)|0);
 var $754=HEAP16[(($753)>>1)];
 var $755=($754&65535);
 var $756=($755|0)==1;
 if($756){label=117;break;}else{label=122;break;}
 case 117: 
 var $758=$mod;
 var $759=(($758+136)|0);
 var $760=HEAP32[(($759)>>2)];
 if(($760|0)==4){ label=118;break;}else if(($760|0)==6|($760|0)==8){ label=119;break;}else{label=120;break;}
 case 118: 
 $tracker_id=1;
 label=121;break;
 case 119: 
 $tracker_id=5;
 label=121;break;
 case 120: 
 $tracker_id=99;
 label=121;break;
 case 121: 
 label=158;break;
 case 122: 
 label=123;break;
 case 123: 
 var $767=$i;
 var $768=((($767)+(1))|0);
 $i=$768;
 label=114;break;
 case 124: 
 var $770=$mod;
 var $771=(($770+136)|0);
 var $772=HEAP32[(($771)>>2)];
 var $773=($772|0)==4;
 if($773){label=125;break;}else{label=126;break;}
 case 125: 
 $tracker_id=0;
 label=131;break;
 case 126: 
 var $776=$mod;
 var $777=(($776+136)|0);
 var $778=HEAP32[(($777)>>2)];
 var $779=($778|0)==6;
 if($779){label=128;break;}else{label=127;break;}
 case 127: 
 var $781=$mod;
 var $782=(($781+136)|0);
 var $783=HEAP32[(($782)>>2)];
 var $784=($783|0)==8;
 if($784){label=128;break;}else{label=129;break;}
 case 128: 
 $tracker_id=3;
 var $786=$2;
 var $787=(($786+1280)|0);
 var $788=HEAP32[(($787)>>2)];
 var $789=$788&-8193;
 HEAP32[(($787)>>2)]=$789;
 label=130;break;
 case 129: 
 $tracker_id=99;
 label=130;break;
 case 130: 
 label=131;break;
 case 131: 
 label=132;break;
 case 132: 
 label=156;break;
 case 133: 
 $i=15;
 label=134;break;
 case 134: 
 var $796=$i;
 var $797=($796|0)<31;
 if($797){label=135;break;}else{label=140;break;}
 case 135: 
 var $799=$i;
 var $800=(($mh+20)|0);
 var $801=(($800+((($799)*(30))&-1))|0);
 var $802=(($801)|0);
 var $803=(($802)|0);
 var $804=_strlen($803);
 var $805=($804|0)!=0;
 if($805){label=137;break;}else{label=136;break;}
 case 136: 
 var $807=$i;
 var $808=(($mh+20)|0);
 var $809=(($808+((($807)*(30))&-1))|0);
 var $810=(($809+22)|0);
 var $811=HEAP16[(($810)>>1)];
 var $812=($811&65535);
 var $813=($812|0)>0;
 if($813){label=137;break;}else{label=138;break;}
 case 137: 
 label=140;break;
 case 138: 
 label=139;break;
 case 139: 
 var $817=$i;
 var $818=((($817)+(1))|0);
 $i=$818;
 label=134;break;
 case 140: 
 var $820=$i;
 var $821=($820|0)==31;
 if($821){label=141;break;}else{label=143;break;}
 case 141: 
 var $823=(($mh+20)|0);
 var $824=(($823+420)|0);
 var $825=(($824)|0);
 var $826=(($825)|0);
 var $827=_is_st_ins($826);
 var $828=($827|0)!=0;
 if($828){label=142;break;}else{label=143;break;}
 case 142: 
 $tracker_id=96;
 label=158;break;
 case 143: 
 $i=0;
 label=144;break;
 case 144: 
 var $832=$i;
 var $833=($832|0)<31;
 if($833){label=145;break;}else{label=149;break;}
 case 145: 
 var $835=$i;
 var $836=(($mh+20)|0);
 var $837=(($836+((($835)*(30))&-1))|0);
 var $838=(($837)|0);
 var $839=(($838)|0);
 var $840=_is_st_ins($839);
 var $841=($840|0)!=0;
 if($841){label=146;break;}else{label=147;break;}
 case 146: 
 label=149;break;
 case 147: 
 label=148;break;
 case 148: 
 var $845=$i;
 var $846=((($845)+(1))|0);
 $i=$846;
 label=144;break;
 case 149: 
 var $848=$i;
 var $849=($848|0)<31;
 if($849){label=150;break;}else{label=151;break;}
 case 150: 
 $tracker_id=95;
 label=158;break;
 case 151: 
 var $852=$mod;
 var $853=(($852+136)|0);
 var $854=HEAP32[(($853)>>2)];
 var $855=($854|0)==4;
 if($855){label=154;break;}else{label=152;break;}
 case 152: 
 var $857=$mod;
 var $858=(($857+136)|0);
 var $859=HEAP32[(($858)>>2)];
 var $860=($859|0)==6;
 if($860){label=154;break;}else{label=153;break;}
 case 153: 
 var $862=$mod;
 var $863=(($862+136)|0);
 var $864=HEAP32[(($863)>>2)];
 var $865=($864|0)==8;
 if($865){label=154;break;}else{label=155;break;}
 case 154: 
 $tracker_id=3;
 var $867=$2;
 var $868=(($867+1280)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=$869&-8193;
 HEAP32[(($868)>>2)]=$870;
 label=158;break;
 case 155: 
 $tracker_id=99;
 label=156;break;
 case 156: 
 label=157;break;
 case 157: 
 label=158;break;
 case 158: 
 var $875=$tracker_id;
 switch(($875|0)){case 0:{ label=159;break;}case 1:{ label=160;break;}case 2:{ label=161;break;}case 3:case 4:case 6:{ label=162;break;}case 5:{ label=163;break;}case 7:{ label=164;break;}case 8:{ label=165;break;}case 9:{ label=166;break;}case 10:{ label=167;break;}case 96:case 97:{ label=168;break;}case 98:{ label=169;break;}case 95:case 99:{ label=171;break;}default:{label=170;break;}}break;
 case 159: 
 $tracker=25496;
 $ptkloop=1;
 label=172;break;
 case 160: 
 $tracker=25424;
 $ptkloop=1;
 label=172;break;
 case 161: 
 $tracker=25248;
 $ptkloop=1;
 label=172;break;
 case 162: 
 $tracker=25184;
 label=172;break;
 case 163: 
 $tracker=24992;
 label=172;break;
 case 164: 
 $tracker=24784;
 label=172;break;
 case 165: 
 $tracker=24640;
 label=172;break;
 case 166: 
 $tracker=24504;
 label=172;break;
 case 167: 
 $tracker=24280;
 label=172;break;
 case 168: 
 $tracker=24168;
 label=172;break;
 case 169: 
 $tracker=24080;
 label=172;break;
 case 170: 
 label=171;break;
 case 171: 
 $tracker=23984;
 label=172;break;
 case 172: 
 var $890=$mod;
 var $891=(($890+136)|0);
 var $892=HEAP32[(($891)>>2)];
 var $893=$mod;
 var $894=(($893+128)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=(Math_imul($892,$895)|0);
 var $897=$mod;
 var $898=(($897+132)|0);
 HEAP32[(($898)>>2)]=$896;
 var $899=(($magic)|0);
 var $900=_memcmp($899,23080,4);
 var $901=($900|0)!=0;
 if($901){label=173;break;}else{label=174;break;}
 case 173: 
 var $903=$tracker_id;
 var $904=($903|0)==8;
 if($904){label=174;break;}else{label=175;break;}
 case 174: 
 var $906=$mod;
 var $907=(($906+64)|0);
 var $908=(($907)|0);
 var $909=$tracker;
 var $910=_snprintf($908,64,23848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$909,tempVarArgs)); STACKTOP=tempVarArgs;
 label=176;break;
 case 175: 
 var $912=$mod;
 var $913=(($912+64)|0);
 var $914=(($913)|0);
 var $915=$tracker;
 var $916=(($magic)|0);
 var $917=_snprintf($914,64,23816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$915,HEAP32[(((tempVarArgs)+(8))>>2)]=$916,tempVarArgs)); STACKTOP=tempVarArgs;
 label=176;break;
 case 176: 
 label=177;break;
 case 177: 
 label=178;break;
 case 178: 
 label=179;break;
 case 179: 
 label=180;break;
 case 180: 
 label=181;break;
 case 181: 
 label=182;break;
 case 182: 
 $i=0;
 label=183;break;
 case 183: 
 var $926=$i;
 var $927=$mod;
 var $928=(($927+140)|0);
 var $929=HEAP32[(($928)>>2)];
 var $930=($926|0)<($929|0);
 if($930){label=184;break;}else{label=188;break;}
 case 184: 
 label=185;break;
 case 185: 
 label=186;break;
 case 186: 
 label=187;break;
 case 187: 
 var $935=$i;
 var $936=((($935)+(1))|0);
 $i=$936;
 label=183;break;
 case 188: 
 var $938=$mod;
 var $939=_pattern_init($938);
 var $940=($939|0)<0;
 if($940){label=189;break;}else{label=190;break;}
 case 189: 
 $1=-1;
 label=232;break;
 case 190: 
 label=191;break;
 case 191: 
 label=192;break;
 case 192: 
 $i=0;
 label=193;break;
 case 193: 
 var $946=$i;
 var $947=$mod;
 var $948=(($947+128)|0);
 var $949=HEAP32[(($948)>>2)];
 var $950=($946|0)<($949|0);
 if($950){label=194;break;}else{label=206;break;}
 case 194: 
 var $952=$mod;
 var $953=$i;
 var $954=_pattern_tracks_alloc($952,$953,64);
 var $955=($954|0)<0;
 if($955){label=195;break;}else{label=196;break;}
 case 195: 
 $1=-1;
 label=232;break;
 case 196: 
 $j=0;
 label=197;break;
 case 197: 
 var $959=$j;
 var $960=$mod;
 var $961=(($960+136)|0);
 var $962=HEAP32[(($961)>>2)];
 var $963=($962<<6);
 var $964=($959|0)<($963|0);
 if($964){label=198;break;}else{label=204;break;}
 case 198: 
 var $966=$j;
 var $967=$mod;
 var $968=(($967+136)|0);
 var $969=HEAP32[(($968)>>2)];
 var $970=(((($966|0))/(($969|0)))&-1);
 var $971=$j;
 var $972=$mod;
 var $973=(($972+136)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=(((($971|0))%(($974|0)))&-1);
 var $976=$i;
 var $977=$2;
 var $978=(($977)|0);
 var $979=(($978+168)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=(($980+($976<<2))|0);
 var $982=HEAP32[(($981)>>2)];
 var $983=(($982+4)|0);
 var $984=(($983+($975<<2))|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=$2;
 var $987=(($986)|0);
 var $988=(($987+172)|0);
 var $989=HEAP32[(($988)>>2)];
 var $990=(($989+($985<<2))|0);
 var $991=HEAP32[(($990)>>2)];
 var $992=(($991+4)|0);
 var $993=(($992+($970<<3))|0);
 $event=$993;
 var $994=(($mod_event)|0);
 var $995=$3;
 var $996=_hio_read($994,1,4,$995);
 var $997=$tracker_id;
 if(($997|0)==1){ label=199;break;}else if(($997|0)==0){ label=200;break;}else{label=201;break;}
 case 199: 
 var $999=$event;
 var $1000=(($mod_event)|0);
 _decode_noisetracker_event($999,$1000);
 label=202;break;
 case 200: 
 label=201;break;
 case 201: 
 var $1003=$event;
 var $1004=(($mod_event)|0);
 _decode_protracker_event($1003,$1004);
 label=202;break;
 case 202: 
 label=203;break;
 case 203: 
 var $1007=$j;
 var $1008=((($1007)+(1))|0);
 $j=$1008;
 label=197;break;
 case 204: 
 label=205;break;
 case 205: 
 var $1011=$i;
 var $1012=((($1011)+(1))|0);
 $i=$1012;
 label=193;break;
 case 206: 
 var $1014=$2;
 var $1015=(($1014+1216)|0);
 var $1016=HEAP32[(($1015)>>2)];
 var $1017=($1016|0)!=0;
 if($1017){label=207;break;}else{label=209;break;}
 case 207: 
 var $1019=$2;
 var $1020=(($1019+1216)|0);
 var $1021=HEAP32[(($1020)>>2)];
 var $1022=_strrchr($1021,47);
 $x=$1022;
 var $1023=($1022|0)!=0;
 if($1023){label=208;break;}else{label=209;break;}
 case 208: 
 var $1025=(($pathname)|0);
 var $1026=$2;
 var $1027=(($1026+1216)|0);
 var $1028=HEAP32[(($1027)>>2)];
 var $1029=$x;
 var $1030=$2;
 var $1031=(($1030+1216)|0);
 var $1032=HEAP32[(($1031)>>2)];
 var $1033=$1029;
 var $1034=$1032;
 var $1035=((($1033)-($1034))|0);
 var $1036=_strlcpy($1025,$1028,$1035);
 label=209;break;
 case 209: 
 label=210;break;
 case 210: 
 label=211;break;
 case 211: 
 $i=0;
 label=212;break;
 case 212: 
 var $1041=$i;
 var $1042=$mod;
 var $1043=(($1042+144)|0);
 var $1044=HEAP32[(($1043)>>2)];
 var $1045=($1041|0)<($1044|0);
 if($1045){label=213;break;}else{label=226;break;}
 case 213: 
 var $1047=$i;
 var $1048=$mod;
 var $1049=(($1048+180)|0);
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=(($1050+((($1047)*(52))&-1))|0);
 var $1052=(($1051+32)|0);
 var $1053=HEAP32[(($1052)>>2)];
 var $1054=($1053|0)!=0;
 if($1054){label=215;break;}else{label=214;break;}
 case 214: 
 label=225;break;
 case 215: 
 var $1057=$ptkloop;
 var $1058=($1057|0)!=0;
 var $1059=($1058?512:0);
 $flags=$1059;
 var $1060=$ptsong;
 var $1061=($1060|0)!=0;
 if($1061){label=216;break;}else{label=221;break;}
 case 216: 
 var $1063=(($sn)|0);
 var $1064=(($pathname)|0);
 var $1065=$i;
 var $1066=$mod;
 var $1067=(($1066+176)|0);
 var $1068=HEAP32[(($1067)>>2)];
 var $1069=(($1068+((($1065)*(764))&-1))|0);
 var $1070=(($1069)|0);
 var $1071=(($1070)|0);
 var $1072=_snprintf($1063,64,23752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$1064,HEAP32[(((tempVarArgs)+(8))>>2)]=$1071,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1073=(($sn)|0);
 var $1074=_hio_open_file($1073,23704);
 $s=$1074;
 var $1075=($1074|0)!=0;
 if($1075){label=217;break;}else{label=220;break;}
 case 217: 
 var $1077=$2;
 var $1078=$s;
 var $1079=$flags;
 var $1080=$i;
 var $1081=$mod;
 var $1082=(($1081+180)|0);
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=(($1083+((($1080)*(52))&-1))|0);
 var $1085=_load_sample($1077,$1078,$1079,$1084,0);
 var $1086=($1085|0)<0;
 if($1086){label=218;break;}else{label=219;break;}
 case 218: 
 var $1088=$s;
 var $1089=_hio_close($1088);
 $1=-1;
 label=232;break;
 case 219: 
 var $1091=$s;
 var $1092=_hio_close($1091);
 label=220;break;
 case 220: 
 label=224;break;
 case 221: 
 var $1095=$2;
 var $1096=$3;
 var $1097=$flags;
 var $1098=$i;
 var $1099=$mod;
 var $1100=(($1099+180)|0);
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=(($1101+((($1098)*(52))&-1))|0);
 var $1103=_load_sample($1095,$1096,$1097,$1102,0);
 var $1104=($1103|0)<0;
 if($1104){label=222;break;}else{label=223;break;}
 case 222: 
 $1=-1;
 label=232;break;
 case 223: 
 label=224;break;
 case 224: 
 label=225;break;
 case 225: 
 var $1109=$i;
 var $1110=((($1109)+(1))|0);
 $i=$1110;
 label=212;break;
 case 226: 
 var $1112=$mod;
 var $1113=(($1112+136)|0);
 var $1114=HEAP32[(($1113)>>2)];
 var $1115=($1114|0)>4;
 if($1115){label=227;break;}else{label=228;break;}
 case 227: 
 var $1117=$2;
 var $1118=(($1117+1280)|0);
 var $1119=HEAP32[(($1118)>>2)];
 var $1120=$1119&-8193;
 HEAP32[(($1118)>>2)]=$1120;
 var $1121=$2;
 var $1122=(($1121+1280)|0);
 var $1123=HEAP32[(($1122)>>2)];
 var $1124=$1123|32;
 HEAP32[(($1122)>>2)]=$1124;
 var $1125=$2;
 var $1126=(($1125+1284)|0);
 HEAP32[(($1126)>>2)]=1;
 label=231;break;
 case 228: 
 var $1128=$tracker;
 var $1129=_strcmp($1128,25496);
 var $1130=($1129|0)==0;
 if($1130){label=229;break;}else{label=230;break;}
 case 229: 
 var $1132=$2;
 var $1133=(($1132+1280)|0);
 var $1134=HEAP32[(($1133)>>2)];
 var $1135=$1134|4;
 HEAP32[(($1133)>>2)]=$1135;
 label=230;break;
 case 230: 
 label=231;break;
 case 231: 
 $1=0;
 label=232;break;
 case 232: 
 var $1139=$1;
 STACKTOP=sp;return $1139;
  default: assert(0, "bad label: " + label);
 }
}
function _is_st_ins($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$s;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24);
 var $7=($6|0)!=115;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=$2;
 var $10=(($9)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24);
 var $13=($12|0)!=83;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=14;break;
 case 4: 
 var $16=$2;
 var $17=(($16+1)|0);
 var $18=HEAP8[($17)];
 var $19=(($18<<24)>>24);
 var $20=($19|0)!=116;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $22=$2;
 var $23=(($22+1)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 var $26=($25|0)!=84;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=14;break;
 case 7: 
 var $29=$2;
 var $30=(($29+2)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24);
 var $33=($32|0)!=45;
 if($33){label=9;break;}else{label=8;break;}
 case 8: 
 var $35=$2;
 var $36=(($35+5)|0);
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=($38|0)!=58;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 label=14;break;
 case 10: 
 var $42=$2;
 var $43=(($42+3)|0);
 var $44=HEAP8[($43)];
 var $45=(($44<<24)>>24);
 var $46=_isdigit($45);
 var $47=($46|0)!=0;
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 var $49=$2;
 var $50=(($49+4)|0);
 var $51=HEAP8[($50)];
 var $52=(($51<<24)>>24);
 var $53=_isdigit($52);
 var $54=($53|0)!=0;
 if($54){label=13;break;}else{label=12;break;}
 case 12: 
 $1=0;
 label=14;break;
 case 13: 
 $1=1;
 label=14;break;
 case 14: 
 var $58=$1;
 STACKTOP=sp;return $58;
  default: assert(0, "bad label: " + label);
 }
}
function _mtm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,4,$6);
 var $8=($7>>>0)<4;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,24632,3);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=8;break;
 case 5: 
 var $16=(($buf+3)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=($18|0)!=16;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=8;break;
 case 7: 
 var $22=$2;
 var $23=$3;
 _read_title($22,$23,20);
 $1=0;
 label=8;break;
 case 8: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _mtm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+368)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $mfh=sp;
 var $mih=(sp)+(72);
 var $mt=(sp)+(112);
 var $mp=(sp)+(304);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($mfh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,3,1,$14);
 var $16=$3;
 var $17=_hio_read8($16);
 var $18=(($mfh+3)|0);
 HEAP8[($18)]=$17;
 var $19=(($mfh+4)|0);
 var $20=$19;
 var $21=$3;
 var $22=_hio_read($20,20,1,$21);
 var $23=$3;
 var $24=_hio_read16l($23);
 var $25=(($mfh+24)|0);
 HEAP16[(($25)>>1)]=$24;
 var $26=$3;
 var $27=_hio_read8($26);
 var $28=(($mfh+26)|0);
 HEAP8[($28)]=$27;
 var $29=$3;
 var $30=_hio_read8($29);
 var $31=(($mfh+27)|0);
 HEAP8[($31)]=$30;
 var $32=$3;
 var $33=_hio_read16l($32);
 var $34=(($mfh+28)|0);
 HEAP16[(($34)>>1)]=$33;
 var $35=$3;
 var $36=_hio_read8($35);
 var $37=(($mfh+30)|0);
 HEAP8[($37)]=$36;
 var $38=$3;
 var $39=_hio_read8($38);
 var $40=(($mfh+31)|0);
 HEAP8[($40)]=$39;
 var $41=$3;
 var $42=_hio_read8($41);
 var $43=(($mfh+32)|0);
 HEAP8[($43)]=$42;
 var $44=$3;
 var $45=_hio_read8($44);
 var $46=(($mfh+33)|0);
 HEAP8[($46)]=$45;
 var $47=(($mfh+34)|0);
 var $48=$47;
 var $49=$3;
 var $50=_hio_read($48,32,1,$49);
 var $51=(($mfh+24)|0);
 var $52=HEAP16[(($51)>>1)];
 var $53=($52&65535);
 var $54=((($53)+(1))|0);
 var $55=$mod;
 var $56=(($55+132)|0);
 HEAP32[(($56)>>2)]=$54;
 var $57=(($mfh+26)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=((($59)+(1))|0);
 var $61=$mod;
 var $62=(($61+128)|0);
 HEAP32[(($62)>>2)]=$60;
 var $63=(($mfh+27)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=((($65)+(1))|0);
 var $67=$mod;
 var $68=(($67+156)|0);
 HEAP32[(($68)>>2)]=$66;
 var $69=(($mfh+30)|0);
 var $70=HEAP8[($69)];
 var $71=($70&255);
 var $72=$mod;
 var $73=(($72+140)|0);
 HEAP32[(($73)>>2)]=$71;
 var $74=$mod;
 var $75=(($74+140)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$mod;
 var $78=(($77+144)|0);
 HEAP32[(($78)>>2)]=$76;
 var $79=(($mfh+33)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=$mod;
 var $83=(($82+136)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=$mod;
 var $85=(($84+148)|0);
 HEAP32[(($85)>>2)]=6;
 var $86=$mod;
 var $87=(($86+152)|0);
 HEAP32[(($87)>>2)]=125;
 var $88=$mod;
 var $89=(($88)|0);
 var $90=(($89)|0);
 var $91=(($mfh+4)|0);
 var $92=(($91)|0);
 var $93=_strlcpy($90,$92,20);
 var $94=$2;
 var $95=(($mfh+3)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=$97&240;
 var $99=$98>>4;
 var $100=(($mfh+3)|0);
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$102&15;
 _set_type($94,26352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$99,HEAP32[(((tempVarArgs)+(8))>>2)]=$103,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $110=$mod;
 var $111=_instrument_init($110);
 var $112=($111|0)<0;
 if($112){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=75;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $116=$i;
 var $117=$mod;
 var $118=(($117+140)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($116|0)<($119|0);
 if($120){label=13;break;}else{label=23;break;}
 case 13: 
 var $122=$mod;
 var $123=$i;
 var $124=_subinstrument_alloc($122,$123,1);
 var $125=($124|0)<0;
 if($125){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=75;break;
 case 15: 
 var $128=(($mih)|0);
 var $129=$128;
 var $130=$3;
 var $131=_hio_read($129,22,1,$130);
 var $132=$3;
 var $133=_hio_read32l($132);
 var $134=(($mih+24)|0);
 HEAP32[(($134)>>2)]=$133;
 var $135=$3;
 var $136=_hio_read32l($135);
 var $137=(($mih+28)|0);
 HEAP32[(($137)>>2)]=$136;
 var $138=$3;
 var $139=_hio_read32l($138);
 var $140=(($mih+32)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=$3;
 var $142=_hio_read8($141);
 var $143=(($mih+36)|0);
 HEAP8[($143)]=$142;
 var $144=$3;
 var $145=_hio_read8($144);
 var $146=(($mih+37)|0);
 HEAP8[($146)]=$145;
 var $147=$3;
 var $148=_hio_read8($147);
 var $149=(($mih+38)|0);
 HEAP8[($149)]=$148;
 var $150=(($mih+24)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$i;
 var $153=$mod;
 var $154=(($153+180)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+((($152)*(52))&-1))|0);
 var $157=(($156+32)|0);
 HEAP32[(($157)>>2)]=$151;
 var $158=(($mih+28)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$i;
 var $161=$mod;
 var $162=(($161+180)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+((($160)*(52))&-1))|0);
 var $165=(($164+36)|0);
 HEAP32[(($165)>>2)]=$159;
 var $166=(($mih+32)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$i;
 var $169=$mod;
 var $170=(($169+180)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+((($168)*(52))&-1))|0);
 var $173=(($172+40)|0);
 HEAP32[(($173)>>2)]=$167;
 var $174=$i;
 var $175=$mod;
 var $176=(($175+180)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+((($174)*(52))&-1))|0);
 var $179=(($178+40)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($180|0)!=0;
 var $182=($181?2:0);
 var $183=$i;
 var $184=$mod;
 var $185=(($184+180)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+((($183)*(52))&-1))|0);
 var $188=(($187+44)|0);
 HEAP32[(($188)>>2)]=$182;
 var $189=(($mfh+31)|0);
 var $190=HEAP8[($189)];
 var $191=($190&255);
 var $192=$191&1;
 var $193=($192|0)!=0;
 if($193){label=16;break;}else{label=17;break;}
 case 16: 
 var $195=$i;
 var $196=$mod;
 var $197=(($196+180)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+((($195)*(52))&-1))|0);
 var $200=(($199+44)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$201|1;
 HEAP32[(($200)>>2)]=$202;
 var $203=$i;
 var $204=$mod;
 var $205=(($204+180)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+((($203)*(52))&-1))|0);
 var $208=(($207+32)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$209>>1;
 HEAP32[(($208)>>2)]=$210;
 var $211=$i;
 var $212=$mod;
 var $213=(($212+180)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+((($211)*(52))&-1))|0);
 var $216=(($215+36)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$217>>1;
 HEAP32[(($216)>>2)]=$218;
 var $219=$i;
 var $220=$mod;
 var $221=(($220+180)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($222+((($219)*(52))&-1))|0);
 var $224=(($223+40)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=$225>>1;
 HEAP32[(($224)>>2)]=$226;
 label=17;break;
 case 17: 
 var $228=(($mih+37)|0);
 var $229=HEAP8[($228)];
 var $230=($229&255);
 var $231=$i;
 var $232=$mod;
 var $233=(($232+176)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+((($231)*(764))&-1))|0);
 var $236=(($235+756)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237)|0);
 var $239=(($238)|0);
 HEAP32[(($239)>>2)]=$230;
 var $240=(($mih+36)|0);
 var $241=HEAP8[($240)];
 var $242=($241&255);
 var $243=$i;
 var $244=$mod;
 var $245=(($244+176)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246+((($243)*(764))&-1))|0);
 var $248=(($247+756)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249)|0);
 var $251=(($250+16)|0);
 HEAP32[(($251)>>2)]=$242;
 var $252=$i;
 var $253=$mod;
 var $254=(($253+176)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(($255+((($252)*(764))&-1))|0);
 var $257=(($256+756)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(($258)|0);
 var $260=(($259+8)|0);
 HEAP32[(($260)>>2)]=128;
 var $261=$i;
 var $262=$i;
 var $263=$mod;
 var $264=(($263+176)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+((($262)*(764))&-1))|0);
 var $267=(($266+756)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268)|0);
 var $270=(($269+40)|0);
 HEAP32[(($270)>>2)]=$261;
 var $271=$mod;
 var $272=$i;
 var $273=(($mih)|0);
 var $274=(($273)|0);
 var $275=_instrument_name($271,$272,$274,22);
 var $276=$i;
 var $277=$mod;
 var $278=(($277+180)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+((($276)*(52))&-1))|0);
 var $281=(($280+32)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)>0;
 if($283){label=18;break;}else{label=19;break;}
 case 18: 
 var $285=$i;
 var $286=$mod;
 var $287=(($286+176)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=(($288+((($285)*(764))&-1))|0);
 var $290=(($289+36)|0);
 HEAP32[(($290)>>2)]=1;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $295=$i;
 var $296=((($295)+(1))|0);
 $i=$296;
 label=12;break;
 case 23: 
 var $298=$mod;
 var $299=(($298+952)|0);
 var $300=(($299)|0);
 var $301=$3;
 var $302=_hio_read($300,1,128,$301);
 var $303=$mod;
 var $304=_pattern_init($303);
 var $305=($304|0)<0;
 if($305){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=75;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 $i=0;
 label=28;break;
 case 28: 
 var $311=$i;
 var $312=$mod;
 var $313=(($312+132)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=($311|0)<($314|0);
 if($315){label=29;break;}else{label=46;break;}
 case 29: 
 var $317=$mod;
 var $318=$i;
 var $319=(($mfh+32)|0);
 var $320=HEAP8[($319)];
 var $321=($320&255);
 var $322=_track_alloc($317,$318,$321);
 var $323=($322|0)<0;
 if($323){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=75;break;
 case 31: 
 var $326=$i;
 var $327=($326|0)==0;
 if($327){label=32;break;}else{label=33;break;}
 case 32: 
 label=45;break;
 case 33: 
 var $330=$mt;
 var $331=$3;
 var $332=_hio_read($330,3,64,$331);
 $j=0;
 label=34;break;
 case 34: 
 var $334=$j;
 var $335=($334|0)<64;
 if($335){label=35;break;}else{label=44;break;}
 case 35: 
 var $337=$j;
 var $338=((($337)*(3))&-1);
 var $339=(($mt+$338)|0);
 var $340=HEAP8[($339)];
 var $341=($340&255);
 var $342=$341>>2;
 var $343=(($342)&255);
 var $344=$j;
 var $345=$i;
 var $346=$mod;
 var $347=(($346+172)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($348+($345<<2))|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=(($350+4)|0);
 var $352=(($351+($344<<3))|0);
 var $353=(($352)|0);
 HEAP8[($353)]=$343;
 var $354=(($343<<24)>>24)!=0;
 if($354){label=36;break;}else{label=37;break;}
 case 36: 
 var $356=$j;
 var $357=$i;
 var $358=$mod;
 var $359=(($358+172)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360+($357<<2))|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=(($362+4)|0);
 var $364=(($363+($356<<3))|0);
 var $365=(($364)|0);
 var $366=HEAP8[($365)];
 var $367=($366&255);
 var $368=((($367)+(37))|0);
 var $369=(($368)&255);
 HEAP8[($365)]=$369;
 label=37;break;
 case 37: 
 var $371=$j;
 var $372=((($371)*(3))&-1);
 var $373=(($mt+$372)|0);
 var $374=HEAP8[($373)];
 var $375=($374&255);
 var $376=$375&3;
 var $377=$376<<4;
 var $378=$j;
 var $379=((($378)*(3))&-1);
 var $380=((($379)+(1))|0);
 var $381=(($mt+$380)|0);
 var $382=HEAP8[($381)];
 var $383=($382&255);
 var $384=$383&240;
 var $385=$384>>4;
 var $386=((($377)+($385))|0);
 var $387=(($386)&255);
 var $388=$j;
 var $389=$i;
 var $390=$mod;
 var $391=(($390+172)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=(($392+($389<<2))|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=(($394+4)|0);
 var $396=(($395+($388<<3))|0);
 var $397=(($396+1)|0);
 HEAP8[($397)]=$387;
 var $398=$j;
 var $399=((($398)*(3))&-1);
 var $400=((($399)+(1))|0);
 var $401=(($mt+$400)|0);
 var $402=HEAP8[($401)];
 var $403=($402&255);
 var $404=$403&15;
 var $405=(($404)&255);
 var $406=$j;
 var $407=$i;
 var $408=$mod;
 var $409=(($408+172)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($410+($407<<2))|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($412+4)|0);
 var $414=(($413+($406<<3))|0);
 var $415=(($414+3)|0);
 HEAP8[($415)]=$405;
 var $416=$j;
 var $417=((($416)*(3))&-1);
 var $418=((($417)+(2))|0);
 var $419=(($mt+$418)|0);
 var $420=HEAP8[($419)];
 var $421=$j;
 var $422=$i;
 var $423=$mod;
 var $424=(($423+172)|0);
 var $425=HEAP32[(($424)>>2)];
 var $426=(($425+($422<<2))|0);
 var $427=HEAP32[(($426)>>2)];
 var $428=(($427+4)|0);
 var $429=(($428+($421<<3))|0);
 var $430=(($429+4)|0);
 HEAP8[($430)]=$420;
 var $431=$j;
 var $432=$i;
 var $433=$mod;
 var $434=(($433+172)|0);
 var $435=HEAP32[(($434)>>2)];
 var $436=(($435+($432<<2))|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=(($437+4)|0);
 var $439=(($438+($431<<3))|0);
 var $440=(($439+3)|0);
 var $441=HEAP8[($440)];
 var $442=($441&255);
 var $443=($442|0)>15;
 if($443){label=38;break;}else{label=39;break;}
 case 38: 
 var $445=$j;
 var $446=$i;
 var $447=$mod;
 var $448=(($447+172)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=(($449+($446<<2))|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=(($451+4)|0);
 var $453=(($452+($445<<3))|0);
 var $454=(($453+4)|0);
 HEAP8[($454)]=0;
 var $455=$j;
 var $456=$i;
 var $457=$mod;
 var $458=(($457+172)|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=(($459+($456<<2))|0);
 var $461=HEAP32[(($460)>>2)];
 var $462=(($461+4)|0);
 var $463=(($462+($455<<3))|0);
 var $464=(($463+3)|0);
 HEAP8[($464)]=0;
 label=39;break;
 case 39: 
 var $466=$j;
 var $467=$i;
 var $468=$mod;
 var $469=(($468+172)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+($467<<2))|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($472+4)|0);
 var $474=(($473+($466<<3))|0);
 var $475=(($474+3)|0);
 var $476=HEAP8[($475)];
 var $477=($476&255);
 var $478=($477|0)==14;
 if($478){label=40;break;}else{label=42;break;}
 case 40: 
 var $480=$j;
 var $481=$i;
 var $482=$mod;
 var $483=(($482+172)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=(($484+($481<<2))|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=(($486+4)|0);
 var $488=(($487+($480<<3))|0);
 var $489=(($488+4)|0);
 var $490=HEAP8[($489)];
 var $491=($490&255);
 var $492=$491&240;
 var $493=$492>>4;
 var $494=($493|0)==8;
 if($494){label=41;break;}else{label=42;break;}
 case 41: 
 var $496=$j;
 var $497=$i;
 var $498=$mod;
 var $499=(($498+172)|0);
 var $500=HEAP32[(($499)>>2)];
 var $501=(($500+($497<<2))|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=(($502+4)|0);
 var $504=(($503+($496<<3))|0);
 var $505=(($504+3)|0);
 HEAP8[($505)]=8;
 var $506=$j;
 var $507=$i;
 var $508=$mod;
 var $509=(($508+172)|0);
 var $510=HEAP32[(($509)>>2)];
 var $511=(($510+($507<<2))|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($512+4)|0);
 var $514=(($513+($506<<3))|0);
 var $515=(($514+4)|0);
 var $516=HEAP8[($515)];
 var $517=($516&255);
 var $518=$517<<4;
 var $519=(($518)&255);
 HEAP8[($515)]=$519;
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $522=$j;
 var $523=((($522)+(1))|0);
 $j=$523;
 label=34;break;
 case 44: 
 label=45;break;
 case 45: 
 var $526=$i;
 var $527=((($526)+(1))|0);
 $i=$527;
 label=28;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 $i=0;
 label=49;break;
 case 49: 
 var $532=$i;
 var $533=$mod;
 var $534=(($533+128)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=($532|0)<($535|0);
 if($536){label=50;break;}else{label=62;break;}
 case 50: 
 var $538=$mod;
 var $539=$i;
 var $540=_pattern_alloc($538,$539);
 var $541=($540|0)<0;
 if($541){label=51;break;}else{label=52;break;}
 case 51: 
 $1=-1;
 label=75;break;
 case 52: 
 var $544=$i;
 var $545=$mod;
 var $546=(($545+168)|0);
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547+($544<<2))|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=(($549)|0);
 HEAP32[(($550)>>2)]=64;
 $j=0;
 label=53;break;
 case 53: 
 var $552=$j;
 var $553=($552|0)<32;
 if($553){label=54;break;}else{label=56;break;}
 case 54: 
 var $555=$3;
 var $556=_hio_read16l($555);
 var $557=$j;
 var $558=(($mp+($557<<1))|0);
 HEAP16[(($558)>>1)]=$556;
 label=55;break;
 case 55: 
 var $560=$j;
 var $561=((($560)+(1))|0);
 $j=$561;
 label=53;break;
 case 56: 
 $j=0;
 label=57;break;
 case 57: 
 var $564=$j;
 var $565=$mod;
 var $566=(($565+136)|0);
 var $567=HEAP32[(($566)>>2)];
 var $568=($564|0)<($567|0);
 if($568){label=58;break;}else{label=60;break;}
 case 58: 
 var $570=$j;
 var $571=(($mp+($570<<1))|0);
 var $572=HEAP16[(($571)>>1)];
 var $573=($572&65535);
 var $574=$j;
 var $575=$i;
 var $576=$mod;
 var $577=(($576+168)|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=(($578+($575<<2))|0);
 var $580=HEAP32[(($579)>>2)];
 var $581=(($580+4)|0);
 var $582=(($581+($574<<2))|0);
 HEAP32[(($582)>>2)]=$573;
 label=59;break;
 case 59: 
 var $584=$j;
 var $585=((($584)+(1))|0);
 $j=$585;
 label=57;break;
 case 60: 
 label=61;break;
 case 61: 
 var $588=$i;
 var $589=((($588)+(1))|0);
 $i=$589;
 label=49;break;
 case 62: 
 var $591=$3;
 var $592=(($mfh+28)|0);
 var $593=HEAP16[(($592)>>1)];
 var $594=($593&65535);
 var $595=_hio_seek($591,$594,1);
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 $i=0;
 label=65;break;
 case 65: 
 var $599=$i;
 var $600=$mod;
 var $601=(($600+140)|0);
 var $602=HEAP32[(($601)>>2)];
 var $603=($599|0)<($602|0);
 if($603){label=66;break;}else{label=70;break;}
 case 66: 
 var $605=$2;
 var $606=$3;
 var $607=$i;
 var $608=$mod;
 var $609=(($608+180)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=(($610+((($607)*(52))&-1))|0);
 var $612=_load_sample($605,$606,2,$611,0);
 var $613=($612|0)<0;
 if($613){label=67;break;}else{label=68;break;}
 case 67: 
 $1=-1;
 label=75;break;
 case 68: 
 label=69;break;
 case 69: 
 var $617=$i;
 var $618=((($617)+(1))|0);
 $i=$618;
 label=65;break;
 case 70: 
 $i=0;
 label=71;break;
 case 71: 
 var $621=$i;
 var $622=$mod;
 var $623=(($622+136)|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=($621|0)<($624|0);
 if($625){label=72;break;}else{label=74;break;}
 case 72: 
 var $627=$i;
 var $628=(($mfh+34)|0);
 var $629=(($628+$627)|0);
 var $630=HEAP8[($629)];
 var $631=($630&255);
 var $632=$631<<4;
 var $633=$i;
 var $634=$mod;
 var $635=(($634+184)|0);
 var $636=(($635+((($633)*(12))&-1))|0);
 var $637=(($636)|0);
 HEAP32[(($637)>>2)]=$632;
 label=73;break;
 case 73: 
 var $639=$i;
 var $640=((($639)+(1))|0);
 $i=$640;
 label=71;break;
 case 74: 
 $1=0;
 label=75;break;
 case 75: 
 var $643=$1;
 STACKTOP=sp;return $643;
  default: assert(0, "bad label: " + label);
 }
}
function _no_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1313800192;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 var $12=$2;
 var $13=_hio_read8($12);
 var $14=($13&255);
 _read_title($10,$11,$14);
 $1=0;
 label=4;break;
 case 4: 
 var $16=$1;
 STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _no_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $k;
 var $nsize;
 var $x;
 var $x1;
 var $hasname;
 var $c2spd;
 var $x2;
 var $x3;
 var $note;
 var $ins;
 var $vol;
 var $fxt;
 var $fxp;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$2;
 _set_type($14,26336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=$3;
 var $16=_hio_read8($15);
 var $17=($16&255);
 $nsize=$17;
 $i=0;
 label=4;break;
 case 4: 
 var $19=$i;
 var $20=$nsize;
 var $21=($19|0)<($20|0);
 if($21){label=5;break;}else{label=9;break;}
 case 5: 
 var $23=$3;
 var $24=_hio_read8($23);
 $x=$24;
 var $25=$i;
 var $26=($25|0)<64;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$x;
 var $29=$i;
 var $30=$mod;
 var $31=(($30)|0);
 var $32=(($31+$29)|0);
 HEAP8[($32)]=$28;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $35=$i;
 var $36=((($35)+(1))|0);
 $i=$36;
 label=4;break;
 case 9: 
 var $38=$3;
 var $39=_hio_read16l($38);
 var $40=$3;
 var $41=_hio_read16l($40);
 var $42=$3;
 var $43=_hio_read16l($42);
 var $44=$3;
 var $45=_hio_read16l($44);
 var $46=$3;
 var $47=_hio_read8($46);
 var $48=$3;
 var $49=_hio_read8($48);
 var $50=($49&255);
 var $51=$mod;
 var $52=(($51+128)|0);
 HEAP32[(($52)>>2)]=$50;
 var $53=$3;
 var $54=_hio_read8($53);
 var $55=$3;
 var $56=_hio_read8($55);
 var $57=($56&255);
 var $58=$mod;
 var $59=(($58+136)|0);
 HEAP32[(($59)>>2)]=$57;
 var $60=$mod;
 var $61=(($60+128)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$mod;
 var $64=(($63+136)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(Math_imul($62,$65)|0);
 var $67=$mod;
 var $68=(($67+132)|0);
 HEAP32[(($68)>>2)]=$66;
 var $69=$3;
 var $70=_hio_read8($69);
 var $71=$3;
 var $72=_hio_read16l($71);
 var $73=$3;
 var $74=_hio_read16l($73);
 var $75=$3;
 var $76=_hio_read8($75);
 var $77=$mod;
 var $78=(($77+144)|0);
 HEAP32[(($78)>>2)]=63;
 var $79=$mod;
 var $80=(($79+140)|0);
 HEAP32[(($80)>>2)]=63;
 $i=0;
 label=10;break;
 case 10: 
 var $82=$i;
 var $83=($82|0)<256;
 if($83){label=11;break;}else{label=15;break;}
 case 11: 
 var $85=$3;
 var $86=_hio_read8($85);
 $x1=$86;
 var $87=$x1;
 var $88=($87&255);
 var $89=($88|0)==255;
 if($89){label=12;break;}else{label=13;break;}
 case 12: 
 label=15;break;
 case 13: 
 var $92=$x1;
 var $93=$i;
 var $94=$mod;
 var $95=(($94+952)|0);
 var $96=(($95+$93)|0);
 HEAP8[($96)]=$92;
 label=14;break;
 case 14: 
 var $98=$i;
 var $99=((($98)+(1))|0);
 $i=$99;
 label=10;break;
 case 15: 
 var $101=$3;
 var $102=$i;
 var $103=(((255)-($102))|0);
 var $104=_hio_seek($101,$103,1);
 var $105=$i;
 var $106=$mod;
 var $107=(($106+156)|0);
 HEAP32[(($107)>>2)]=$105;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $114=$mod;
 var $115=_instrument_init($114);
 var $116=($115|0)<0;
 if($116){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=80;break;
 case 23: 
 $i=0;
 label=24;break;
 case 24: 
 var $120=$i;
 var $121=$mod;
 var $122=(($121+140)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=($120|0)<($123|0);
 if($124){label=25;break;}else{label=43;break;}
 case 25: 
 var $126=$mod;
 var $127=$i;
 var $128=_subinstrument_alloc($126,$127,1);
 var $129=($128|0)<0;
 if($129){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=80;break;
 case 27: 
 var $132=$3;
 var $133=_hio_read8($132);
 var $134=($133&255);
 $nsize=$134;
 $hasname=0;
 $j=0;
 label=28;break;
 case 28: 
 var $136=$j;
 var $137=$nsize;
 var $138=($136|0)<($137|0);
 if($138){label=29;break;}else{label=35;break;}
 case 29: 
 var $140=$3;
 var $141=_hio_read8($140);
 $x2=$141;
 var $142=$x2;
 var $143=($142&255);
 var $144=($143|0)!=32;
 if($144){label=30;break;}else{label=31;break;}
 case 30: 
 $hasname=1;
 label=31;break;
 case 31: 
 var $147=$j;
 var $148=($147|0)<32;
 if($148){label=32;break;}else{label=33;break;}
 case 32: 
 var $150=$x2;
 var $151=$j;
 var $152=$i;
 var $153=$mod;
 var $154=(($153+176)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+((($152)*(764))&-1))|0);
 var $157=(($156)|0);
 var $158=(($157+$151)|0);
 HEAP8[($158)]=$150;
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $161=$j;
 var $162=((($161)+(1))|0);
 $j=$162;
 label=28;break;
 case 35: 
 var $164=$hasname;
 var $165=($164|0)!=0;
 if($165){label=37;break;}else{label=36;break;}
 case 36: 
 var $167=$i;
 var $168=$mod;
 var $169=(($168+176)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+((($167)*(764))&-1))|0);
 var $172=(($171)|0);
 var $173=(($172)|0);
 HEAP8[($173)]=0;
 label=37;break;
 case 37: 
 var $175=$3;
 var $176=_hio_read32l($175);
 var $177=$3;
 var $178=_hio_read32l($177);
 var $179=$3;
 var $180=_hio_read8($179);
 var $181=($180&255);
 var $182=$i;
 var $183=$mod;
 var $184=(($183+176)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+((($182)*(764))&-1))|0);
 var $187=(($186+756)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188)|0);
 var $190=(($189)|0);
 HEAP32[(($190)>>2)]=$181;
 var $191=$3;
 var $192=_hio_read16l($191);
 var $193=($192&65535);
 $c2spd=$193;
 var $194=$3;
 var $195=_hio_read16l($194);
 var $196=($195&65535);
 var $197=$i;
 var $198=$mod;
 var $199=(($198+180)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+((($197)*(52))&-1))|0);
 var $202=(($201+32)|0);
 HEAP32[(($202)>>2)]=$196;
 var $203=$3;
 var $204=_hio_read16l($203);
 var $205=($204&65535);
 var $206=$i;
 var $207=$mod;
 var $208=(($207+180)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+((($206)*(52))&-1))|0);
 var $211=(($210+36)|0);
 HEAP32[(($211)>>2)]=$205;
 var $212=$3;
 var $213=_hio_read16l($212);
 var $214=($213&65535);
 var $215=$i;
 var $216=$mod;
 var $217=(($216+180)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+((($215)*(52))&-1))|0);
 var $220=(($219+40)|0);
 HEAP32[(($220)>>2)]=$214;
 var $221=$3;
 var $222=_hio_read32l($221);
 var $223=$3;
 var $224=_hio_read16l($223);
 var $225=$i;
 var $226=$mod;
 var $227=(($226+180)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+((($225)*(52))&-1))|0);
 var $230=(($229+32)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($231|0)>0;
 if($232){label=38;break;}else{label=39;break;}
 case 38: 
 var $234=$i;
 var $235=$mod;
 var $236=(($235+176)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+((($234)*(764))&-1))|0);
 var $239=(($238+36)|0);
 HEAP32[(($239)>>2)]=1;
 label=39;break;
 case 39: 
 var $241=$i;
 var $242=$mod;
 var $243=(($242+180)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+((($241)*(52))&-1))|0);
 var $246=(($245+40)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)>0;
 var $249=($248?2:0);
 var $250=$i;
 var $251=$mod;
 var $252=(($251+180)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+((($250)*(52))&-1))|0);
 var $255=(($254+44)|0);
 HEAP32[(($255)>>2)]=$249;
 var $256=$i;
 var $257=$mod;
 var $258=(($257+176)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+((($256)*(764))&-1))|0);
 var $261=(($260+756)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262)|0);
 var $264=(($263+16)|0);
 HEAP32[(($264)>>2)]=0;
 var $265=$i;
 var $266=$mod;
 var $267=(($266+176)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+((($265)*(764))&-1))|0);
 var $270=(($269+756)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($271)|0);
 var $273=(($272+8)|0);
 HEAP32[(($273)>>2)]=128;
 var $274=$i;
 var $275=$i;
 var $276=$mod;
 var $277=(($276+176)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($278+((($275)*(764))&-1))|0);
 var $280=(($279+756)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($281)|0);
 var $283=(($282+40)|0);
 HEAP32[(($283)>>2)]=$274;
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $286=$c2spd;
 var $287=((($286)*(8363))&-1);
 var $288=(((($287|0))/(8448))&-1);
 $c2spd=$288;
 var $289=$c2spd;
 var $290=$i;
 var $291=$mod;
 var $292=(($291+176)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293+((($290)*(764))&-1))|0);
 var $295=(($294+756)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296)|0);
 var $298=(($297+12)|0);
 var $299=$i;
 var $300=$mod;
 var $301=(($300+176)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+((($299)*(764))&-1))|0);
 var $304=(($303+756)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305)|0);
 var $307=(($306+16)|0);
 _c2spd_to_note($289,$298,$307);
 label=42;break;
 case 42: 
 var $309=$i;
 var $310=((($309)+(1))|0);
 $i=$310;
 label=24;break;
 case 43: 
 var $312=$mod;
 var $313=_pattern_init($312);
 var $314=($313|0)<0;
 if($314){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=80;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 $i=0;
 label=48;break;
 case 48: 
 var $320=$i;
 var $321=$mod;
 var $322=(($321+128)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=($320|0)<($323|0);
 if($324){label=49;break;}else{label=69;break;}
 case 49: 
 var $326=$mod;
 var $327=$i;
 var $328=_pattern_tracks_alloc($326,$327,64);
 var $329=($328|0)<0;
 if($329){label=50;break;}else{label=51;break;}
 case 50: 
 $1=-1;
 label=80;break;
 case 51: 
 $j=0;
 label=52;break;
 case 52: 
 var $333=$j;
 var $334=$i;
 var $335=$mod;
 var $336=(($335+168)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=(($337+($334<<2))|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=($333|0)<($341|0);
 if($342){label=53;break;}else{label=67;break;}
 case 53: 
 $k=0;
 label=54;break;
 case 54: 
 var $345=$k;
 var $346=$mod;
 var $347=(($346+136)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=($345|0)<($348|0);
 if($349){label=55;break;}else{label=65;break;}
 case 55: 
 var $351=$j;
 var $352=$k;
 var $353=$i;
 var $354=$2;
 var $355=(($354)|0);
 var $356=(($355+168)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+($353<<2))|0);
 var $359=HEAP32[(($358)>>2)];
 var $360=(($359+4)|0);
 var $361=(($360+($352<<2))|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=$2;
 var $364=(($363)|0);
 var $365=(($364+172)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(($366+($362<<2))|0);
 var $368=HEAP32[(($367)>>2)];
 var $369=(($368+4)|0);
 var $370=(($369+($351<<3))|0);
 $event=$370;
 var $371=$3;
 var $372=_hio_read32l($371);
 $x3=$372;
 var $373=$x3;
 var $374=$373&63;
 $note=$374;
 var $375=$x3;
 var $376=$375&8128;
 var $377=$376>>>6;
 $ins=$377;
 var $378=$x3;
 var $379=$378&1040384;
 var $380=$379>>>13;
 $vol=$380;
 var $381=$x3;
 var $382=$381&15728640;
 var $383=$382>>>20;
 $fxt=$383;
 var $384=$x3;
 var $385=$384&-16777216;
 var $386=$385>>>24;
 $fxp=$386;
 var $387=$note;
 var $388=($387|0)!=63;
 if($388){label=56;break;}else{label=57;break;}
 case 56: 
 var $390=$note;
 var $391=((($390)+(36))|0);
 var $392=(($391)&255);
 var $393=$event;
 var $394=(($393)|0);
 HEAP8[($394)]=$392;
 label=57;break;
 case 57: 
 var $396=$ins;
 var $397=($396|0)!=127;
 if($397){label=58;break;}else{label=59;break;}
 case 58: 
 var $399=$ins;
 var $400=((($399)+(1))|0);
 var $401=(($400)&255);
 var $402=$event;
 var $403=(($402+1)|0);
 HEAP8[($403)]=$401;
 label=59;break;
 case 59: 
 var $405=$vol;
 var $406=($405|0)!=127;
 if($406){label=60;break;}else{label=61;break;}
 case 60: 
 var $408=$vol;
 var $409=(($408)&255);
 var $410=$event;
 var $411=(($410+2)|0);
 HEAP8[($411)]=$409;
 label=61;break;
 case 61: 
 var $413=$fxt;
 var $414=($413|0)!=15;
 if($414){label=62;break;}else{label=63;break;}
 case 62: 
 var $416=$fxt;
 var $417=((7672+$416)|0);
 var $418=HEAP8[($417)];
 var $419=$event;
 var $420=(($419+3)|0);
 HEAP8[($420)]=$418;
 var $421=$fxp;
 var $422=(($421)&255);
 var $423=$event;
 var $424=(($423+4)|0);
 HEAP8[($424)]=$422;
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 var $427=$k;
 var $428=((($427)+(1))|0);
 $k=$428;
 label=54;break;
 case 65: 
 label=66;break;
 case 66: 
 var $431=$j;
 var $432=((($431)+(1))|0);
 $j=$432;
 label=52;break;
 case 67: 
 label=68;break;
 case 68: 
 var $435=$i;
 var $436=((($435)+(1))|0);
 $i=$436;
 label=48;break;
 case 69: 
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 $i=0;
 label=72;break;
 case 72: 
 var $441=$i;
 var $442=$mod;
 var $443=(($442+140)|0);
 var $444=HEAP32[(($443)>>2)];
 var $445=($441|0)<($444|0);
 if($445){label=73;break;}else{label=79;break;}
 case 73: 
 var $447=$i;
 var $448=$mod;
 var $449=(($448+180)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=(($450+((($447)*(52))&-1))|0);
 var $452=(($451+32)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=($453|0)==0;
 if($454){label=74;break;}else{label=75;break;}
 case 74: 
 label=78;break;
 case 75: 
 var $457=$2;
 var $458=$3;
 var $459=$i;
 var $460=$mod;
 var $461=(($460+180)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=(($462+((($459)*(52))&-1))|0);
 var $464=_load_sample($457,$458,2,$463,0);
 var $465=($464|0)<0;
 if($465){label=76;break;}else{label=77;break;}
 case 76: 
 $1=-1;
 label=80;break;
 case 77: 
 label=78;break;
 case 78: 
 var $469=$i;
 var $470=((($469)+(1))|0);
 $i=$470;
 label=72;break;
 case 79: 
 var $472=$2;
 var $473=(($472+1280)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=$474|8389153;
 HEAP32[(($473)>>2)]=$475;
 var $476=$2;
 var $477=(($476+1284)|0);
 HEAP32[(($477)>>2)]=2;
 $1=0;
 label=80;break;
 case 80: 
 var $479=$1;
 STACKTOP=sp;return $479;
  default: assert(0, "bad label: " + label);
 }
}
function _okt_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $magic=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($magic)|0);
 var $6=$2;
 var $7=_hio_read($5,1,8,$6);
 var $8=($7>>>0)<8;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $11=(($magic)|0);
 var $12=_strncmp($11,20384,8);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $16=$2;
 var $17=$3;
 _read_title($16,$17,0);
 $1=0;
 label=6;break;
 case 6: 
 var $19=$1;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _okt_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+296)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $handle;
 var $data=sp;
 var $ret;
 $2=$m;
 $3=$f;
 $4=$start;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=$4;
 var $8=_hio_seek($6,$7,0);
 label=3;break;
 case 3: 
 var $10=$3;
 var $11=_hio_seek($10,8,1);
 var $12=_iff_new();
 $handle=$12;
 var $13=$handle;
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=16;break;
 case 5: 
 var $17=$data;
 _memset($17, 0, 296)|0;
 var $18=$handle;
 var $19=_iff_register($18,26328,466);
 $ret=$19;
 var $20=$handle;
 var $21=_iff_register($20,24624,368);
 var $22=$ret;
 var $23=$22|$21;
 $ret=$23;
 var $24=$handle;
 var $25=_iff_register($24,23544,452);
 var $26=$ret;
 var $27=$26|$25;
 $ret=$27;
 var $28=$handle;
 var $29=_iff_register($28,22864,434);
 var $30=$ret;
 var $31=$30|$29;
 $ret=$31;
 var $32=$handle;
 var $33=_iff_register($32,22080,532);
 var $34=$ret;
 var $35=$34|$33;
 $ret=$35;
 var $36=$handle;
 var $37=_iff_register($36,21440,322);
 var $38=$ret;
 var $39=$38|$37;
 $ret=$39;
 var $40=$handle;
 var $41=_iff_register($40,21120,528);
 var $42=$ret;
 var $43=$42|$41;
 $ret=$43;
 var $44=$handle;
 var $45=_iff_register($44,20696,294);
 var $46=$ret;
 var $47=$46|$45;
 $ret=$47;
 var $48=$ret;
 var $49=($48|0)!=0;
 if($49){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=16;break;
 case 7: 
 var $52=$2;
 _set_type($52,22712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $59=$handle;
 var $60=$2;
 var $61=$3;
 var $62=$data;
 var $63=_iff_load($59,$60,$61,$62);
 var $64=($63|0)<0;
 if($64){label=14;break;}else{label=15;break;}
 case 14: 
 var $66=$handle;
 _iff_release($66);
 $1=-1;
 label=16;break;
 case 15: 
 var $68=$handle;
 _iff_release($68);
 $1=0;
 label=16;break;
 case 16: 
 var $70=$1;
 STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }
}
function _get_cmod($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7+136)|0);
 HEAP32[(($8)>>2)]=0;
 $i=0;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=($10|0)<4;
 if($11){label=3;break;}else{label=9;break;}
 case 3: 
 var $13=$3;
 var $14=_hio_read16b($13);
 var $15=($14&65535);
 $j=$15;
 var $16=$j;
 var $17=($16|0)!=0;
 var $18=$17^1;
 var $19=$18^1;
 var $20=($19&1);
 $k=$20;
 label=4;break;
 case 4: 
 var $22=$k;
 var $23=($22|0)>=0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=$i;
 var $26=((($25)+(1))|0);
 var $27=(((($26|0))/(2))&-1);
 var $28=(((($27|0))%(2))&-1);
 var $29=((($28)*(255))&-1);
 var $30=$mod;
 var $31=(($30+136)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$mod;
 var $34=(($33+184)|0);
 var $35=(($34+((($32)*(12))&-1))|0);
 var $36=(($35)|0);
 HEAP32[(($36)>>2)]=$29;
 var $37=$mod;
 var $38=(($37+136)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=((($39)+(1))|0);
 HEAP32[(($38)>>2)]=$40;
 label=6;break;
 case 6: 
 var $42=$k;
 var $43=((($42)-(1))|0);
 $k=$43;
 label=4;break;
 case 7: 
 label=8;break;
 case 8: 
 var $46=$i;
 var $47=((($46)+(1))|0);
 $i=$47;
 label=2;break;
 case 9: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_samp477($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $i;
 var $j;
 var $looplen;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$3;
 var $11=(((($10|0))/(32))&-1);
 var $12=$mod;
 var $13=(($12+140)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$mod;
 var $15=(($14+140)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$mod;
 var $18=(($17+144)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$mod;
 var $20=_instrument_init($19);
 var $21=($20|0)<0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=12;break;
 case 3: 
 $i=0;
 $j=0;
 label=4;break;
 case 4: 
 var $25=$i;
 var $26=$mod;
 var $27=(($26+140)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($25|0)<($28|0);
 if($29){label=5;break;}else{label=11;break;}
 case 5: 
 var $31=$mod;
 var $32=$i;
 var $33=_subinstrument_alloc($31,$32,1);
 var $34=($33|0)<0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=12;break;
 case 7: 
 var $37=$i;
 var $38=$mod;
 var $39=(($38+176)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+((($37)*(764))&-1))|0);
 var $42=(($41)|0);
 var $43=(($42)|0);
 var $44=$4;
 var $45=_hio_read($43,1,20,$44);
 var $46=$i;
 var $47=$mod;
 var $48=(($47+176)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+((($46)*(764))&-1))|0);
 var $51=(($50)|0);
 var $52=(($51)|0);
 var $53=_str_adj($52);
 var $54=$4;
 var $55=_hio_read32b($54);
 var $56=$55&-2;
 var $57=$j;
 var $58=$mod;
 var $59=(($58+180)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+((($57)*(52))&-1))|0);
 var $62=(($61+32)|0);
 HEAP32[(($62)>>2)]=$56;
 var $63=$4;
 var $64=_hio_read16b($63);
 var $65=($64&65535);
 var $66=$j;
 var $67=$mod;
 var $68=(($67+180)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+((($66)*(52))&-1))|0);
 var $71=(($70+36)|0);
 HEAP32[(($71)>>2)]=$65;
 var $72=$4;
 var $73=_hio_read16b($72);
 var $74=($73&65535);
 $looplen=$74;
 var $75=$j;
 var $76=$mod;
 var $77=(($76+180)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+((($75)*(52))&-1))|0);
 var $80=(($79+36)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$looplen;
 var $83=((($81)+($82))|0);
 var $84=$j;
 var $85=$mod;
 var $86=(($85+180)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+((($84)*(52))&-1))|0);
 var $89=(($88+40)|0);
 HEAP32[(($89)>>2)]=$83;
 var $90=$looplen;
 var $91=($90|0)>2;
 var $92=($91?2:0);
 var $93=$j;
 var $94=$mod;
 var $95=(($94+180)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+((($93)*(52))&-1))|0);
 var $98=(($97+44)|0);
 HEAP32[(($98)>>2)]=$92;
 var $99=$4;
 var $100=_hio_read16b($99);
 var $101=($100&65535);
 var $102=$i;
 var $103=$mod;
 var $104=(($103+176)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+((($102)*(764))&-1))|0);
 var $107=(($106+756)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108)|0);
 var $110=(($109)|0);
 HEAP32[(($110)>>2)]=$101;
 var $111=$4;
 var $112=_hio_read16b($111);
 var $113=($112&65535);
 var $114=$i;
 var $115=$data;
 var $116=(($115)|0);
 var $117=(($116+($114<<2))|0);
 HEAP32[(($117)>>2)]=$113;
 var $118=$i;
 var $119=$mod;
 var $120=(($119+176)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+((($118)*(764))&-1))|0);
 var $123=(($122+756)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124)|0);
 var $126=(($125+8)|0);
 HEAP32[(($126)>>2)]=128;
 var $127=$j;
 var $128=$i;
 var $129=$mod;
 var $130=(($129+176)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+((($128)*(764))&-1))|0);
 var $133=(($132+756)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134)|0);
 var $136=(($135+40)|0);
 HEAP32[(($136)>>2)]=$127;
 var $137=$i;
 var $138=$j;
 var $139=$data;
 var $140=(($139+144)|0);
 var $141=(($140+($138<<2))|0);
 HEAP32[(($141)>>2)]=$137;
 var $142=$j;
 var $143=$mod;
 var $144=(($143+180)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+((($142)*(52))&-1))|0);
 var $147=(($146+32)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)>0;
 if($149){label=8;break;}else{label=9;break;}
 case 8: 
 var $151=$j;
 var $152=$mod;
 var $153=(($152+176)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+((($151)*(764))&-1))|0);
 var $156=(($155+36)|0);
 HEAP32[(($156)>>2)]=1;
 var $157=$j;
 var $158=((($157)+(1))|0);
 $j=$158;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $161=$i;
 var $162=((($161)+(1))|0);
 $i=$162;
 label=4;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 var $165=$1;
 STACKTOP=sp;return $165;
  default: assert(0, "bad label: " + label);
 }
}
function _get_spee($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read16b($7);
 var $9=($8&65535);
 var $10=$mod;
 var $11=(($10+148)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$mod;
 var $13=(($12+152)|0);
 HEAP32[(($13)>>2)]=125;
 STACKTOP=sp;return 0;
}
function _get_slen($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read16b($7);
 var $9=($8&65535);
 var $10=$mod;
 var $11=(($10+128)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$mod;
 var $13=(($12+128)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$mod;
 var $16=(($15+136)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(Math_imul($14,$17)|0);
 var $19=$mod;
 var $20=(($19+132)|0);
 HEAP32[(($20)>>2)]=$18;
 STACKTOP=sp;return 0;
}
function _get_plen478($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$3;
 var $8=_hio_read16b($7);
 var $9=($8&65535);
 var $10=$mod;
 var $11=(($10+156)|0);
 HEAP32[(($11)>>2)]=$9;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_patt479($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7+952)|0);
 var $9=(($8)|0);
 var $10=$mod;
 var $11=(($10+156)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$3;
 var $14=_hio_read($9,1,$12,$13);
 STACKTOP=sp;return 0;
}
function _get_pbod480($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $j;
 var $rows;
 var $event;
 var $note;
 var $ins;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 var $10=$data;
 var $11=(($10+288)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$mod;
 var $14=(($13+128)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($12|0)>=($15|0);
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=36;break;
 case 3: 
 var $19=$data;
 var $20=(($19+288)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)!=0;
 if($22){label=9;break;}else{label=4;break;}
 case 4: 
 var $24=$mod;
 var $25=_pattern_init($24);
 var $26=($25|0)<0;
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=36;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $32=$4;
 var $33=_hio_read16b($32);
 $rows=$33;
 var $34=$mod;
 var $35=$data;
 var $36=(($35+288)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$rows;
 var $39=($38&65535);
 var $40=_pattern_tracks_alloc($34,$37,$39);
 var $41=($40|0)<0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=36;break;
 case 11: 
 $j=0;
 label=12;break;
 case 12: 
 var $45=$j;
 var $46=$rows;
 var $47=($46&65535);
 var $48=$mod;
 var $49=(($48+136)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(Math_imul($47,$50)|0);
 var $52=($45|0)<($51|0);
 if($52){label=13;break;}else{label=35;break;}
 case 13: 
 var $54=$j;
 var $55=$mod;
 var $56=(($55+136)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(((($54|0))/(($57|0)))&-1);
 var $59=$j;
 var $60=$mod;
 var $61=(($60+136)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(((($59|0))%(($62|0)))&-1);
 var $64=$data;
 var $65=(($64+288)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$2;
 var $68=(($67)|0);
 var $69=(($68+168)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+($66<<2))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+4)|0);
 var $74=(($73+($63<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$2;
 var $77=(($76)|0);
 var $78=(($77+172)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+($75<<2))|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+4)|0);
 var $83=(($82+($58<<3))|0);
 $event=$83;
 var $84=$event;
 var $85=$84;
 _memset($85, 0, 8)|0;
 var $86=$4;
 var $87=_hio_read8($86);
 $note=$87;
 var $88=$4;
 var $89=_hio_read8($88);
 $ins=$89;
 var $90=$note;
 var $91=(($90<<24)>>24)!=0;
 if($91){label=14;break;}else{label=15;break;}
 case 14: 
 var $93=$note;
 var $94=($93&255);
 var $95=((($94)+(48))|0);
 var $96=(($95)&255);
 var $97=$event;
 var $98=(($97)|0);
 HEAP8[($98)]=$96;
 var $99=$ins;
 var $100=($99&255);
 var $101=((($100)+(1))|0);
 var $102=(($101)&255);
 var $103=$event;
 var $104=(($103+1)|0);
 HEAP8[($104)]=$102;
 label=15;break;
 case 15: 
 var $106=$4;
 var $107=_hio_read8($106);
 var $108=($107&255);
 var $109=((7544+($108<<2))|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110)&255);
 var $112=$event;
 var $113=(($112+3)|0);
 HEAP8[($113)]=$111;
 var $114=$4;
 var $115=_hio_read8($114);
 var $116=$event;
 var $117=(($116+4)|0);
 HEAP8[($117)]=$115;
 var $118=$event;
 var $119=(($118+3)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=($121|0)==12;
 if($122){label=16;break;}else{label=29;break;}
 case 16: 
 var $124=$event;
 var $125=(($124+4)|0);
 var $126=HEAP8[($125)];
 var $127=($126&255);
 var $128=($127|0)>64;
 if($128){label=17;break;}else{label=29;break;}
 case 17: 
 var $130=$event;
 var $131=(($130+4)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=($133|0)<=80;
 if($134){label=18;break;}else{label=19;break;}
 case 18: 
 var $136=$event;
 var $137=(($136+3)|0);
 HEAP8[($137)]=10;
 var $138=$event;
 var $139=(($138+4)|0);
 var $140=HEAP8[($139)];
 var $141=($140&255);
 var $142=((($141)-(64))|0);
 var $143=(($142)&255);
 HEAP8[($139)]=$143;
 label=28;break;
 case 19: 
 var $145=$event;
 var $146=(($145+4)|0);
 var $147=HEAP8[($146)];
 var $148=($147&255);
 var $149=($148|0)<=96;
 if($149){label=20;break;}else{label=21;break;}
 case 20: 
 var $151=$event;
 var $152=(($151+3)|0);
 HEAP8[($152)]=10;
 var $153=$event;
 var $154=(($153+4)|0);
 var $155=HEAP8[($154)];
 var $156=($155&255);
 var $157=((($156)-(80))|0);
 var $158=$157<<4;
 var $159=(($158)&255);
 var $160=$event;
 var $161=(($160+4)|0);
 HEAP8[($161)]=$159;
 label=27;break;
 case 21: 
 var $163=$event;
 var $164=(($163+4)|0);
 var $165=HEAP8[($164)];
 var $166=($165&255);
 var $167=($166|0)<=112;
 if($167){label=22;break;}else{label=23;break;}
 case 22: 
 var $169=$event;
 var $170=(($169+3)|0);
 HEAP8[($170)]=-82;
 var $171=$event;
 var $172=(($171+4)|0);
 var $173=HEAP8[($172)];
 var $174=($173&255);
 var $175=((($174)-(96))|0);
 var $176=(($175)&255);
 var $177=$event;
 var $178=(($177+4)|0);
 HEAP8[($178)]=$176;
 label=26;break;
 case 23: 
 var $180=$event;
 var $181=(($180+4)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=($183|0)<=128;
 if($184){label=24;break;}else{label=25;break;}
 case 24: 
 var $186=$event;
 var $187=(($186+3)|0);
 HEAP8[($187)]=-83;
 var $188=$event;
 var $189=(($188+4)|0);
 var $190=HEAP8[($189)];
 var $191=($190&255);
 var $192=((($191)-(112))|0);
 var $193=(($192)&255);
 var $194=$event;
 var $195=(($194+4)|0);
 HEAP8[($195)]=$193;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $201=$event;
 var $202=(($201+3)|0);
 var $203=HEAP8[($202)];
 var $204=($203&255);
 var $205=($204|0)==0;
 if($205){label=30;break;}else{label=31;break;}
 case 30: 
 var $207=$event;
 var $208=(($207+4)|0);
 var $209=HEAP8[($208)];
 var $210=($209&255);
 var $211=$210&240;
 var $212=$211>>4;
 var $213=(((24)-($212))|0);
 var $214=(((($213|0))%(12))&-1);
 var $215=$214<<4;
 var $216=$event;
 var $217=(($216+4)|0);
 var $218=HEAP8[($217)];
 var $219=($218&255);
 var $220=$219&15;
 var $221=$215|$220;
 var $222=(($221)&255);
 var $223=$event;
 var $224=(($223+4)|0);
 HEAP8[($224)]=$222;
 label=31;break;
 case 31: 
 var $226=$event;
 var $227=(($226+3)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=($229|0)==255;
 if($230){label=32;break;}else{label=33;break;}
 case 32: 
 var $232=$event;
 var $233=(($232+4)|0);
 HEAP8[($233)]=0;
 var $234=$event;
 var $235=(($234+3)|0);
 HEAP8[($235)]=0;
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $238=$j;
 var $239=((($238)+(1))|0);
 $j=$239;
 label=12;break;
 case 35: 
 var $241=$data;
 var $242=(($241+288)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((($243)+(1))|0);
 HEAP32[(($242)>>2)]=$244;
 $1=0;
 label=36;break;
 case 36: 
 var $246=$1;
 STACKTOP=sp;return $246;
  default: assert(0, "bad label: " + label);
 }
}
function _get_sbod($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $data;
 var $flags;
 var $i;
 $2=$m;
 $3=$size;
 $4=$f;
 $5=$parm;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$5;
 var $9=$8;
 $data=$9;
 $flags=0;
 var $10=$data;
 var $11=(($10+292)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$mod;
 var $14=(($13+140)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($12|0)>=($15|0);
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=11;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $21=$data;
 var $22=(($21+292)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$data;
 var $25=(($24+144)|0);
 var $26=(($25+($23<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 $i=$27;
 var $28=$i;
 var $29=$data;
 var $30=(($29)|0);
 var $31=(($30+($28<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=6;break;}
 case 6: 
 var $35=$i;
 var $36=$data;
 var $37=(($36)|0);
 var $38=(($37+($35<<2))|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=7;break;}else{label=8;break;}
 case 7: 
 $flags=8;
 label=8;break;
 case 8: 
 var $43=$2;
 var $44=$4;
 var $45=$flags;
 var $46=$i;
 var $47=$mod;
 var $48=(($47+176)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+((($46)*(764))&-1))|0);
 var $51=(($50+756)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52)|0);
 var $54=(($53+40)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$mod;
 var $57=(($56+180)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+((($55)*(52))&-1))|0);
 var $60=_load_sample($43,$44,$45,$59,0);
 var $61=($60|0)<0;
 if($61){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=11;break;
 case 10: 
 var $64=$data;
 var $65=(($64+292)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=((($66)+(1))|0);
 HEAP32[(($65)>>2)]=$67;
 $1=0;
 label=11;break;
 case 11: 
 var $69=$1;
 STACKTOP=sp;return $69;
  default: assert(0, "bad label: " + label);
 }
}
function _pw_move_data($out,$in,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$out;
 $2=$in;
 $3=$len;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_move_data($4,$5,$6);
 STACKTOP=sp;return $7;
}
function _pw_write_zero($out,$len){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $buf=sp;
 var $l;
 $1=$out;
 $2=$len;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=($4|0)>1024;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=1024;label=5;break;
 case 4: 
 var $8=$2;
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 $l=$10;
 var $11=$buf;
 var $12=$l;
 _memset($11, 0, $12)|0;
 var $13=(($buf)|0);
 var $14=$l;
 var $15=$1;
 var $16=_fwrite($13,1,$14,$15);
 var $17=$l;
 var $18=$2;
 var $19=((($18)-($17))|0);
 $2=$19;
 label=6;break;
 case 6: 
 var $21=$l;
 var $22=($21|0)>0;
 if($22){label=7;break;}else{var $27=0;label=8;break;}
 case 7: 
 var $24=$2;
 var $25=($24|0)>0;
 var $27=$25;label=8;break;
 case 8: 
 var $27;
 if($27){label=2;break;}else{label=9;break;}
 case 9: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _pw_wizardry($in,$out,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $st=sp;
 var $size;
 var $in_size;
 var $data;
 var $file_in;
 var $file_out;
 var $title=(sp)+(80);
 var $i;
 $2=$in;
 $3=$out;
 $4=$name;
 $size=-1;
 var $5=$2;
 var $6=_dup($5);
 var $7=_fdopen($6,22608);
 $file_in=$7;
 var $8=$file_in;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=27;break;
 case 3: 
 var $12=$3;
 var $13=_dup($12);
 var $14=_fdopen($13,26272);
 $file_out=$14;
 var $15=$file_out;
 var $16=($15|0)==0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=27;break;
 case 5: 
 var $19=$file_in;
 var $20=_fileno($19);
 var $21=_fstat($20,$st);
 var $22=($21|0)<0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 $in_size=-1;
 label=8;break;
 case 7: 
 var $25=(($st+36)|0);
 var $26=HEAP32[(($25)>>2)];
 $in_size=$26;
 label=8;break;
 case 8: 
 var $28=$in_size;
 var $29=($28|0)<2048;
 if($29){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-2;
 label=27;break;
 case 10: 
 var $32=$in_size;
 var $33=((($32)+(4096))|0);
 var $34=_malloc($33);
 $data=$34;
 var $35=$data;
 var $36=($35|0)==0;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 _perror(24568);
 $1=-1;
 label=27;break;
 case 12: 
 var $39=$data;
 var $40=$in_size;
 var $41=$file_in;
 var $42=_fread($39,$40,1,$41);
 $i=0;
 label=13;break;
 case 13: 
 var $44=$i;
 var $45=((3912+($44<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)!=0;
 if($47){label=14;break;}else{label=20;break;}
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $51=$i;
 var $52=((3912+($51<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+4)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$data;
 var $57=(($title)|0);
 var $58=$in_size;
 var $59=FUNCTION_TABLE[$55]($56,$57,$58);
 var $60=($59|0)>=0;
 if($60){label=17;break;}else{label=18;break;}
 case 17: 
 label=20;break;
 case 18: 
 label=19;break;
 case 19: 
 var $64=$i;
 var $65=((($64)+(1))|0);
 $i=$65;
 label=13;break;
 case 20: 
 var $67=$i;
 var $68=((3912+($67<<2))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 if($70){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=27;break;
 case 22: 
 var $73=$file_in;
 var $74=_fseek($73,0,0);
 var $75=$i;
 var $76=((3912+($75<<2))|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+8)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$file_in;
 var $81=$file_out;
 var $82=FUNCTION_TABLE[$79]($80,$81);
 $size=$82;
 var $83=$size;
 var $84=($83|0)<0;
 if($84){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=27;break;
 case 24: 
 var $87=$file_out;
 var $88=_fclose($87);
 var $89=$file_in;
 var $90=_fclose($89);
 var $91=$data;
 _free($91);
 var $92=$4;
 var $93=($92|0)!=0;
 if($93){label=25;break;}else{label=26;break;}
 case 25: 
 var $95=$i;
 var $96=((3912+($95<<2))|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$4;
 HEAP32[(($100)>>2)]=$99;
 label=26;break;
 case 26: 
 $1=0;
 label=27;break;
 case 27: 
 var $103=$1;
 STACKTOP=sp;return $103;
  default: assert(0, "bad label: " + label);
 }
}
function _pw_check($b,$s,$info){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $res;
 var $title=sp;
 $2=$b;
 $3=$s;
 $4=$info;
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=((3912+($6<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=16;break;}
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$i;
 var $14=((3912+($13<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$2;
 var $19=(($title)|0);
 var $20=$3;
 var $21=FUNCTION_TABLE[$17]($18,$19,$20);
 $res=$21;
 var $22=$res;
 var $23=($22|0)>0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$res;
 $1=$25;
 label=17;break;
 case 7: 
 var $27=$res;
 var $28=($27|0)==0;
 if($28){label=8;break;}else{label=13;break;}
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $32=$4;
 var $33=($32|0)!=0;
 if($33){label=11;break;}else{label=12;break;}
 case 11: 
 var $35=$4;
 var $36=(($35)|0);
 var $37=$36;
 var $38=$title;
 assert(21 % 1 === 0);(_memcpy($37, $38, 21)|0);
 var $39=$4;
 var $40=(($39+64)|0);
 var $41=(($40)|0);
 var $42=$i;
 var $43=((3912+($42<<2))|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=_strlcpy($41,$46,64);
 label=12;break;
 case 12: 
 $1=0;
 label=17;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $52=$i;
 var $53=((($52)+(1))|0);
 $i=$53;
 label=2;break;
 case 16: 
 $1=-1;
 label=17;break;
 case 17: 
 var $56=$1;
 STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _pw_read_title($b,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$b;
 $2=$t;
 $3=$s;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 var $8=$1;
 var $9=($8|0)==0;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$2;
 HEAP8[($11)]=0;
 label=8;break;
 case 5: 
 var $13=$3;
 var $14=($13|0)>20;
 if($14){label=6;break;}else{label=7;break;}
 case 6: 
 $3=20;
 label=7;break;
 case 7: 
 var $17=$2;
 var $18=$1;
 var $19=$3;
 assert($19 % 1 === 0);(_memcpy($17, $18, $19)|0);
 var $20=$3;
 var $21=$2;
 var $22=(($21+$20)|0);
 HEAP8[($22)]=0;
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _test_pru1($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1080;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1080)-($9))|0);
 $1=$10;
 label=15;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13+1080)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=83;
 if($17){label=9;break;}else{label=6;break;}
 case 6: 
 var $19=$2;
 var $20=(($19+1081)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)!=78;
 if($23){label=9;break;}else{label=7;break;}
 case 7: 
 var $25=$2;
 var $26=(($25+1082)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 var $29=($28|0)!=84;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=$2;
 var $32=(($31+1083)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=($34|0)!=46;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=15;break;
 case 10: 
 var $38=$start;
 var $39=((($38)+(951))|0);
 var $40=$2;
 var $41=(($40+$39)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=($43|0)!=127;
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=15;break;
 case 12: 
 var $47=$start;
 var $48=((($47)+(950))|0);
 var $49=$2;
 var $50=(($49+$48)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=($52|0)>127;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=15;break;
 case 14: 
 var $56=$2;
 var $57=$3;
 _pw_read_title($56,$57,20);
 $1=0;
 label=15;break;
 case 15: 
 var $59=$1;
 STACKTOP=sp;return $59;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_pru1($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $header=sp;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $npat;
 var $max;
 var $ptable=(sp)+(2048);
 var $ssize;
 var $i;
 var $j;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$header;
 _memset($3, 0, 2048)|0;
 var $4=$ptable;
 _memset($4, 0, 128)|0;
 var $5=(($header)|0);
 var $6=$1;
 var $7=_fread($5,950,1,$6);
 var $8=(($header)|0);
 var $9=$2;
 var $10=_fwrite($8,950,1,$9);
 $i=0;
 label=2;break;
 case 2: 
 var $12=$i;
 var $13=($12|0)<31;
 if($13){label=3;break;}else{label=5;break;}
 case 3: 
 var $15=(($header)|0);
 var $16=$i;
 var $17=((($16)*(30))&-1);
 var $18=(($15+$17)|0);
 var $19=(($18+42)|0);
 var $20=_readmem16b($19);
 var $21=($20&65535);
 var $22=($21<<1);
 var $23=$ssize;
 var $24=((($23)+($22))|0);
 $ssize=$24;
 label=4;break;
 case 4: 
 var $26=$i;
 var $27=((($26)+(1))|0);
 $i=$27;
 label=2;break;
 case 5: 
 var $29=$2;
 var $30=$1;
 var $31=_read8($30);
 $npat=$31;
 _write8($29,$31);
 var $32=$header;
 _memset($32, 0, 2048)|0;
 var $33=(($header)|0);
 var $34=$1;
 var $35=_fread($33,129,1,$34);
 var $36=(($header)|0);
 var $37=$2;
 var $38=_fwrite($36,129,1,$37);
 var $39=$2;
 _write32b($39,1294879534);
 $max=0;
 $i=1;
 label=6;break;
 case 6: 
 var $41=$i;
 var $42=($41|0)<129;
 if($42){label=7;break;}else{label=11;break;}
 case 7: 
 var $44=$i;
 var $45=(($header+$44)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=$max;
 var $49=($48&255);
 var $50=($47|0)>($49|0);
 if($50){label=8;break;}else{label=9;break;}
 case 8: 
 var $52=$i;
 var $53=(($header+$52)|0);
 var $54=HEAP8[($53)];
 $max=$54;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $57=$i;
 var $58=((($57)+(1))|0);
 $i=$58;
 label=6;break;
 case 11: 
 var $60=$1;
 var $61=_fseek($60,1084,0);
 $i=0;
 label=12;break;
 case 12: 
 var $63=$i;
 var $64=$max;
 var $65=($64&255);
 var $66=($63|0)<=($65|0);
 if($66){label=13;break;}else{label=19;break;}
 case 13: 
 $j=0;
 label=14;break;
 case 14: 
 var $69=$j;
 var $70=($69|0)<256;
 if($70){label=15;break;}else{label=17;break;}
 case 15: 
 var $72=$1;
 var $73=_read8($72);
 var $74=(($header)|0);
 HEAP8[($74)]=$73;
 var $75=$1;
 var $76=_read8($75);
 var $77=(($header+1)|0);
 HEAP8[($77)]=$76;
 var $78=$1;
 var $79=_read8($78);
 var $80=(($header+2)|0);
 HEAP8[($80)]=$79;
 var $81=$1;
 var $82=_read8($81);
 var $83=(($header+3)|0);
 HEAP8[($83)]=$82;
 var $84=(($header)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=$86&240;
 var $88=(($87)&255);
 $c1=$88;
 var $89=(($header)|0);
 var $90=HEAP8[($89)];
 var $91=($90&255);
 var $92=$91&15;
 var $93=$92<<4;
 var $94=(($93)&255);
 $c3=$94;
 var $95=(($header+2)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=$c3;
 var $99=($98&255);
 var $100=$99|$97;
 var $101=(($100)&255);
 $c3=$101;
 var $102=(($header+3)|0);
 var $103=HEAP8[($102)];
 $c4=$103;
 var $104=(($header+1)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 var $107=((4504+($106<<1))|0);
 var $108=(($107)|0);
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=$c1;
 var $112=($111&255);
 var $113=$112|$110;
 var $114=(($113)&255);
 $c1=$114;
 var $115=(($header+1)|0);
 var $116=HEAP8[($115)];
 var $117=($116&255);
 var $118=((4504+($117<<1))|0);
 var $119=(($118+1)|0);
 var $120=HEAP8[($119)];
 $c2=$120;
 var $121=$2;
 var $122=$c1;
 _write8($121,$122);
 var $123=$2;
 var $124=$c2;
 _write8($123,$124);
 var $125=$2;
 var $126=$c3;
 _write8($125,$126);
 var $127=$2;
 var $128=$c4;
 _write8($127,$128);
 label=16;break;
 case 16: 
 var $130=$j;
 var $131=((($130)+(1))|0);
 $j=$131;
 label=14;break;
 case 17: 
 label=18;break;
 case 18: 
 var $134=$i;
 var $135=((($134)+(1))|0);
 $i=$135;
 label=12;break;
 case 19: 
 var $137=$2;
 var $138=$1;
 var $139=$ssize;
 var $140=_pw_move_data($137,$138,$139);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_pru2($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $k;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<260;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((260)-($9))|0);
 $1=$10;
 label=23;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=83;
 if($17){label=9;break;}else{label=6;break;}
 case 6: 
 var $19=$2;
 var $20=(($19+1)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)!=78;
 if($23){label=9;break;}else{label=7;break;}
 case 7: 
 var $25=$2;
 var $26=(($25+2)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 var $29=($28|0)!=84;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=$2;
 var $32=(($31+3)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=($34|0)!=33;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=23;break;
 case 10: 
 $k=0;
 label=11;break;
 case 11: 
 var $39=$k;
 var $40=($39|0)<31;
 if($40){label=12;break;}else{label=16;break;}
 case 12: 
 var $42=$start;
 var $43=((($42)+(11))|0);
 var $44=$k;
 var $45=($44<<3);
 var $46=((($43)+($45))|0);
 var $47=$2;
 var $48=(($47+$46)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=($50|0)>64;
 if($51){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=23;break;
 case 14: 
 label=15;break;
 case 15: 
 var $55=$k;
 var $56=((($55)+(1))|0);
 $k=$56;
 label=11;break;
 case 16: 
 $k=0;
 label=17;break;
 case 17: 
 var $59=$k;
 var $60=($59|0)<31;
 if($60){label=18;break;}else{label=22;break;}
 case 18: 
 var $62=$start;
 var $63=((($62)+(10))|0);
 var $64=$k;
 var $65=($64<<3);
 var $66=((($63)+($65))|0);
 var $67=$2;
 var $68=(($67+$66)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 var $71=($70|0)>15;
 if($71){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=23;break;
 case 20: 
 label=21;break;
 case 21: 
 var $75=$k;
 var $76=((($75)+(1))|0);
 $k=$76;
 label=17;break;
 case 22: 
 var $78=$3;
 _pw_read_title(0,$78,0);
 $1=0;
 label=23;break;
 case 23: 
 var $80=$1;
 STACKTOP=sp;return $80;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_pru2($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $header=sp;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $npat;
 var $ptable=(sp)+(2048);
 var $max;
 var $v=(sp)+(2176);
 var $size;
 var $ssize;
 var $i;
 var $j;
 $1=$in;
 $2=$out;
 $max=0;
 $ssize=0;
 var $3=$header;
 _memset($3, 0, 2048)|0;
 var $4=$ptable;
 _memset($4, 0, 128)|0;
 var $5=$2;
 var $6=_pw_write_zero($5,20);
 var $7=$1;
 var $8=_fseek($7,8,0);
 $i=0;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=($10|0)<31;
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$2;
 var $14=_pw_write_zero($13,22);
 var $15=$2;
 var $16=$1;
 var $17=_read16b($16);
 var $18=($17&65535);
 $size=$18;
 var $19=(($18)&65535);
 _write16b($15,$19);
 var $20=$size;
 var $21=($20<<1);
 var $22=$ssize;
 var $23=((($22)+($21))|0);
 $ssize=$23;
 var $24=$2;
 var $25=$1;
 var $26=_read8($25);
 _write8($24,$26);
 var $27=$2;
 var $28=$1;
 var $29=_read8($28);
 _write8($27,$29);
 var $30=$2;
 var $31=$1;
 var $32=_read16b($31);
 _write16b($30,$32);
 var $33=$2;
 var $34=$1;
 var $35=_read16b($34);
 _write16b($33,$35);
 label=4;break;
 case 4: 
 var $37=$i;
 var $38=((($37)+(1))|0);
 $i=$38;
 label=2;break;
 case 5: 
 var $40=$2;
 var $41=$1;
 var $42=_read8($41);
 $npat=$42;
 _write8($40,$42);
 var $43=$2;
 var $44=$1;
 var $45=_read8($44);
 _write8($43,$45);
 $i=0;
 label=6;break;
 case 6: 
 var $47=$i;
 var $48=($47|0)<128;
 if($48){label=7;break;}else{label=12;break;}
 case 7: 
 var $50=$2;
 var $51=$1;
 var $52=_read8($51);
 $c1=$52;
 _write8($50,$52);
 var $53=$c1;
 var $54=($53&255);
 var $55=$max;
 var $56=($55&255);
 var $57=($54|0)>($56|0);
 if($57){label=8;break;}else{label=9;break;}
 case 8: 
 var $59=$c1;
 var $60=($59&255);
 var $65=$60;label=10;break;
 case 9: 
 var $62=$max;
 var $63=($62&255);
 var $65=$63;label=10;break;
 case 10: 
 var $65;
 var $66=(($65)&255);
 $max=$66;
 label=11;break;
 case 11: 
 var $68=$i;
 var $69=((($68)+(1))|0);
 $i=$69;
 label=6;break;
 case 12: 
 var $71=$2;
 _write32b($71,1294879534);
 var $72=$1;
 var $73=_fseek($72,770,0);
 $i=0;
 label=13;break;
 case 13: 
 var $75=$i;
 var $76=$max;
 var $77=($76&255);
 var $78=($75|0)<=($77|0);
 if($78){label=14;break;}else{label=29;break;}
 case 14: 
 $j=0;
 label=15;break;
 case 15: 
 var $81=$j;
 var $82=($81|0)<256;
 if($82){label=16;break;}else{label=27;break;}
 case 16: 
 $c4=0;
 $c3=0;
 $c2=0;
 $c1=0;
 var $84=$1;
 var $85=_read8($84);
 var $86=(($header)|0);
 HEAP8[($86)]=$85;
 var $87=(($header)|0);
 var $88=HEAP8[($87)];
 var $89=($88&255);
 var $90=($89|0)==128;
 if($90){label=17;break;}else{label=18;break;}
 case 17: 
 var $92=$2;
 _write32b($92,0);
 label=25;break;
 case 18: 
 var $94=(($header)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=($96|0)==192;
 if($97){label=19;break;}else{label=20;break;}
 case 19: 
 var $99=(($v)|0);
 var $100=(($99)|0);
 var $101=$2;
 var $102=_fwrite($100,4,1,$101);
 var $103=(($v)|0);
 var $104=(($103)|0);
 var $105=HEAP8[($104)];
 $c1=$105;
 var $106=(($v)|0);
 var $107=(($106+1)|0);
 var $108=HEAP8[($107)];
 $c2=$108;
 var $109=(($v)|0);
 var $110=(($109+2)|0);
 var $111=HEAP8[($110)];
 $c3=$111;
 var $112=(($v)|0);
 var $113=(($112+3)|0);
 var $114=HEAP8[($113)];
 $c4=$114;
 label=24;break;
 case 20: 
 var $116=(($header)|0);
 var $117=HEAP8[($116)];
 var $118=($117&255);
 var $119=($118|0)!=192;
 if($119){label=21;break;}else{label=23;break;}
 case 21: 
 var $121=(($header)|0);
 var $122=HEAP8[($121)];
 var $123=($122&255);
 var $124=($123|0)!=192;
 if($124){label=22;break;}else{label=23;break;}
 case 22: 
 var $126=$1;
 var $127=_read8($126);
 var $128=(($header+1)|0);
 HEAP8[($128)]=$127;
 var $129=$1;
 var $130=_read8($129);
 var $131=(($header+2)|0);
 HEAP8[($131)]=$130;
 var $132=(($header+1)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$134&128;
 var $136=$135>>3;
 var $137=(($136)&255);
 $c1=$137;
 var $138=(($header)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 var $141=$140>>1;
 var $142=((4504+($141<<1))|0);
 var $143=(($142)|0);
 var $144=HEAP8[($143)];
 var $145=($144&255);
 var $146=$c1;
 var $147=($146&255);
 var $148=$147|$145;
 var $149=(($148)&255);
 $c1=$149;
 var $150=(($header)|0);
 var $151=HEAP8[($150)];
 var $152=($151&255);
 var $153=$152>>1;
 var $154=((4504+($153<<1))|0);
 var $155=(($154+1)|0);
 var $156=HEAP8[($155)];
 $c2=$156;
 var $157=(($header+1)|0);
 var $158=HEAP8[($157)];
 var $159=($158&255);
 var $160=$159&112;
 var $161=$160<<1;
 var $162=(($161)&255);
 $c3=$162;
 var $163=(($header)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=$165&1;
 var $167=$166<<4;
 var $168=$c3;
 var $169=($168&255);
 var $170=$169|$167;
 var $171=(($170)&255);
 $c3=$171;
 var $172=(($header+1)|0);
 var $173=HEAP8[($172)];
 var $174=($173&255);
 var $175=$174&15;
 var $176=$c3;
 var $177=($176&255);
 var $178=$177|$175;
 var $179=(($178)&255);
 $c3=$179;
 var $180=(($header+2)|0);
 var $181=HEAP8[($180)];
 $c4=$181;
 var $182=$2;
 var $183=$c1;
 _write8($182,$183);
 var $184=$2;
 var $185=$c2;
 _write8($184,$185);
 var $186=$2;
 var $187=$c3;
 _write8($186,$187);
 var $188=$2;
 var $189=$c4;
 _write8($188,$189);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $193=(($v+4)|0);
 var $194=(($193)|0);
 var $195=HEAP8[($194)];
 var $196=(($v)|0);
 var $197=(($196)|0);
 HEAP8[($197)]=$195;
 var $198=(($v+4)|0);
 var $199=(($198+1)|0);
 var $200=HEAP8[($199)];
 var $201=(($v)|0);
 var $202=(($201+1)|0);
 HEAP8[($202)]=$200;
 var $203=(($v+4)|0);
 var $204=(($203+2)|0);
 var $205=HEAP8[($204)];
 var $206=(($v)|0);
 var $207=(($206+2)|0);
 HEAP8[($207)]=$205;
 var $208=(($v+4)|0);
 var $209=(($208+3)|0);
 var $210=HEAP8[($209)];
 var $211=(($v)|0);
 var $212=(($211+3)|0);
 HEAP8[($212)]=$210;
 var $213=(($v+8)|0);
 var $214=(($213)|0);
 var $215=HEAP8[($214)];
 var $216=(($v+4)|0);
 var $217=(($216)|0);
 HEAP8[($217)]=$215;
 var $218=(($v+8)|0);
 var $219=(($218+1)|0);
 var $220=HEAP8[($219)];
 var $221=(($v+4)|0);
 var $222=(($221+1)|0);
 HEAP8[($222)]=$220;
 var $223=(($v+8)|0);
 var $224=(($223+2)|0);
 var $225=HEAP8[($224)];
 var $226=(($v+4)|0);
 var $227=(($226+2)|0);
 HEAP8[($227)]=$225;
 var $228=(($v+8)|0);
 var $229=(($228+3)|0);
 var $230=HEAP8[($229)];
 var $231=(($v+4)|0);
 var $232=(($231+3)|0);
 HEAP8[($232)]=$230;
 var $233=(($v+12)|0);
 var $234=(($233)|0);
 var $235=HEAP8[($234)];
 var $236=(($v+8)|0);
 var $237=(($236)|0);
 HEAP8[($237)]=$235;
 var $238=(($v+12)|0);
 var $239=(($238+1)|0);
 var $240=HEAP8[($239)];
 var $241=(($v+8)|0);
 var $242=(($241+1)|0);
 HEAP8[($242)]=$240;
 var $243=(($v+12)|0);
 var $244=(($243+2)|0);
 var $245=HEAP8[($244)];
 var $246=(($v+8)|0);
 var $247=(($246+2)|0);
 HEAP8[($247)]=$245;
 var $248=(($v+12)|0);
 var $249=(($248+3)|0);
 var $250=HEAP8[($249)];
 var $251=(($v+8)|0);
 var $252=(($251+3)|0);
 HEAP8[($252)]=$250;
 var $253=$c1;
 var $254=(($v+12)|0);
 var $255=(($254)|0);
 HEAP8[($255)]=$253;
 var $256=$c2;
 var $257=(($v+12)|0);
 var $258=(($257+1)|0);
 HEAP8[($258)]=$256;
 var $259=$c3;
 var $260=(($v+12)|0);
 var $261=(($260+2)|0);
 HEAP8[($261)]=$259;
 var $262=$c4;
 var $263=(($v+12)|0);
 var $264=(($263+3)|0);
 HEAP8[($264)]=$262;
 label=26;break;
 case 26: 
 var $266=$j;
 var $267=((($266)+(1))|0);
 $j=$267;
 label=15;break;
 case 27: 
 label=28;break;
 case 28: 
 var $270=$i;
 var $271=((($270)+(1))|0);
 $i=$271;
 label=13;break;
 case 29: 
 var $273=$2;
 var $274=$1;
 var $275=$ssize;
 var $276=_pw_move_data($273,$274,$275);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_skyt($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 var $i;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<260;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((260)-($9))|0);
 $1=$10;
 label=14;break;
 case 4: 
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $14=$i;
 var $15=($14|0)<31;
 if($15){label=7;break;}else{label=11;break;}
 case 7: 
 var $17=$start;
 var $18=$i;
 var $19=($18<<3);
 var $20=((($17)+($19))|0);
 var $21=((($20)+(4))|0);
 var $22=$2;
 var $23=(($22+$21)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=($25|0)>64;
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=14;break;
 case 9: 
 label=10;break;
 case 10: 
 var $30=$i;
 var $31=((($30)+(1))|0);
 $i=$31;
 label=6;break;
 case 11: 
 var $33=$2;
 var $34=$start;
 var $35=(($33+$34)|0);
 var $36=(($35+256)|0);
 var $37=_readmem32b($36);
 var $38=($37|0)!=1397446996;
 if($38){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=14;break;
 case 13: 
 var $41=$3;
 _pw_read_title(0,$41,0);
 $1=0;
 label=14;break;
 case 14: 
 var $43=$1;
 STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_skyt($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $ptable=sp;
 var $pat_pos;
 var $pat=(sp)+(128);
 var $i;
 var $j;
 var $k;
 var $trkval=(sp)+(1152);
 var $trk_addr;
 var $size;
 var $ssize;
 var $x;
 $1=$in;
 $2=$out;
 $i=0;
 $j=0;
 $k=0;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$trkval;
 _memset($4, 0, 512)|0;
 var $5=$2;
 var $6=_pw_write_zero($5,20);
 $i=0;
 label=2;break;
 case 2: 
 var $8=$i;
 var $9=($8|0)<31;
 if($9){label=3;break;}else{label=5;break;}
 case 3: 
 var $11=$2;
 var $12=_pw_write_zero($11,22);
 var $13=$2;
 var $14=$1;
 var $15=_read16b($14);
 var $16=($15&65535);
 $size=$16;
 var $17=(($16)&65535);
 _write16b($13,$17);
 var $18=$size;
 var $19=($18<<1);
 var $20=$ssize;
 var $21=((($20)+($19))|0);
 $ssize=$21;
 var $22=$2;
 var $23=$1;
 var $24=_read8($23);
 _write8($22,$24);
 var $25=$2;
 var $26=$1;
 var $27=_read8($26);
 _write8($25,$27);
 var $28=$2;
 var $29=$1;
 var $30=_read16b($29);
 _write16b($28,$30);
 var $31=$2;
 var $32=$1;
 var $33=_read16b($32);
 _write16b($31,$33);
 label=4;break;
 case 4: 
 var $35=$i;
 var $36=((($35)+(1))|0);
 $i=$36;
 label=2;break;
 case 5: 
 var $38=$1;
 var $39=_read32b($38);
 var $40=$1;
 var $41=_read32b($40);
 var $42=$1;
 var $43=_read32b($42);
 var $44=$2;
 var $45=$1;
 var $46=_read8($45);
 var $47=($46&255);
 var $48=((($47)+(1))|0);
 var $49=(($48)&255);
 $pat_pos=$49;
 _write8($44,$49);
 var $50=$2;
 _write8($50,127);
 $i=0;
 label=6;break;
 case 6: 
 var $52=$i;
 var $53=$pat_pos;
 var $54=($53&255);
 var $55=($52|0)<($54|0);
 if($55){label=7;break;}else{label=13;break;}
 case 7: 
 $j=0;
 label=8;break;
 case 8: 
 var $58=$j;
 var $59=($58|0)<4;
 if($59){label=9;break;}else{label=11;break;}
 case 9: 
 var $61=$1;
 var $62=_read16b($61);
 var $63=($62&65535);
 var $64=$j;
 var $65=$i;
 var $66=(($trkval+($65<<4))|0);
 var $67=(($66+($64<<2))|0);
 HEAP32[(($67)>>2)]=$63;
 label=10;break;
 case 10: 
 var $69=$j;
 var $70=((($69)+(1))|0);
 $j=$70;
 label=8;break;
 case 11: 
 label=12;break;
 case 12: 
 var $73=$i;
 var $74=((($73)+(1))|0);
 $i=$74;
 label=6;break;
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 var $77=$i;
 var $78=($77|0)<128;
 if($78){label=15;break;}else{label=20;break;}
 case 15: 
 var $80=$2;
 var $81=$i;
 var $82=$pat_pos;
 var $83=($82&255);
 var $84=($81|0)<($83|0);
 if($84){label=16;break;}else{label=17;break;}
 case 16: 
 var $86=$i;
 var $89=$86;label=18;break;
 case 17: 
 var $89=0;label=18;break;
 case 18: 
 var $89;
 var $90=(($89)&255);
 _write8($80,$90);
 label=19;break;
 case 19: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=14;break;
 case 20: 
 var $95=$2;
 _write32b($95,1294879534);
 var $96=$1;
 var $97=_read8($96);
 var $98=$1;
 var $99=_ftell($98);
 $trk_addr=$99;
 $i=0;
 label=21;break;
 case 21: 
 var $101=$i;
 var $102=$pat_pos;
 var $103=($102&255);
 var $104=($101|0)<($103|0);
 if($104){label=22;break;}else{label=32;break;}
 case 22: 
 var $106=$pat;
 _memset($106, 0, 1024)|0;
 $j=0;
 label=23;break;
 case 23: 
 var $108=$j;
 var $109=($108|0)<4;
 if($109){label=24;break;}else{label=30;break;}
 case 24: 
 var $111=$1;
 var $112=$trk_addr;
 var $113=$j;
 var $114=$i;
 var $115=(($trkval+($114<<4))|0);
 var $116=(($115+($113<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=((($117)-(1))|0);
 var $119=$118<<8;
 var $120=((($112)+($119))|0);
 var $121=_fseek($111,$120,0);
 $k=0;
 label=25;break;
 case 25: 
 var $123=$k;
 var $124=($123|0)<64;
 if($124){label=26;break;}else{label=28;break;}
 case 26: 
 var $126=$k;
 var $127=($126<<4);
 var $128=$j;
 var $129=($128<<2);
 var $130=((($127)+($129))|0);
 $x=$130;
 var $131=$1;
 var $132=_read8($131);
 $c1=$132;
 var $133=$1;
 var $134=_read8($133);
 $c2=$134;
 var $135=$1;
 var $136=_read8($135);
 $c3=$136;
 var $137=$1;
 var $138=_read8($137);
 $c4=$138;
 var $139=$c2;
 var $140=($139&255);
 var $141=$140&240;
 var $142=$c1;
 var $143=($142&255);
 var $144=((4504+($143<<1))|0);
 var $145=(($144)|0);
 var $146=HEAP8[($145)];
 var $147=($146&255);
 var $148=$141|$147;
 var $149=(($148)&255);
 var $150=$x;
 var $151=(($pat+$150)|0);
 HEAP8[($151)]=$149;
 var $152=$c1;
 var $153=($152&255);
 var $154=((4504+($153<<1))|0);
 var $155=(($154+1)|0);
 var $156=HEAP8[($155)];
 var $157=$x;
 var $158=((($157)+(1))|0);
 var $159=(($pat+$158)|0);
 HEAP8[($159)]=$156;
 var $160=$c2;
 var $161=($160&255);
 var $162=$161<<4;
 var $163=$162&240;
 var $164=$c3;
 var $165=($164&255);
 var $166=$163|$165;
 var $167=(($166)&255);
 var $168=$x;
 var $169=((($168)+(2))|0);
 var $170=(($pat+$169)|0);
 HEAP8[($170)]=$167;
 var $171=$c4;
 var $172=$x;
 var $173=((($172)+(3))|0);
 var $174=(($pat+$173)|0);
 HEAP8[($174)]=$171;
 label=27;break;
 case 27: 
 var $176=$k;
 var $177=((($176)+(1))|0);
 $k=$177;
 label=25;break;
 case 28: 
 label=29;break;
 case 29: 
 var $180=$j;
 var $181=((($180)+(1))|0);
 $j=$181;
 label=23;break;
 case 30: 
 var $183=(($pat)|0);
 var $184=$2;
 var $185=_fwrite($183,1024,1,$184);
 label=31;break;
 case 31: 
 var $187=$i;
 var $188=((($187)+(1))|0);
 $i=$188;
 label=21;break;
 case 32: 
 var $190=$2;
 var $191=$1;
 var $192=$ssize;
 var $193=_pw_move_data($190,$191,$192);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_starpack($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 var $j;
 var $k;
 var $l;
 var $m;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 var $5=$start;
 var $6=((($5)+(268))|0);
 var $7=$2;
 var $8=(($7+$6)|0);
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10<<8;
 var $12=$start;
 var $13=((($12)+(269))|0);
 var $14=$2;
 var $15=(($14+$13)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=((($11)+($17))|0);
 $l=$18;
 var $19=$l;
 var $20=$19&3;
 var $21=($20|0)!=0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=54;break;
 case 3: 
 var $24=$l;
 var $25=(((($24|0))/(4))&-1);
 $k=$25;
 var $26=$k;
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=4;break;}
 case 4: 
 var $29=$k;
 var $30=($29|0)>127;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=54;break;
 case 6: 
 var $33=$start;
 var $34=((($33)+(784))|0);
 var $35=$2;
 var $36=(($35+$34)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=($38|0)!=0;
 if($39){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=54;break;
 case 8: 
 $k=0;
 label=9;break;
 case 9: 
 var $43=$k;
 var $44=($43|0)<31;
 if($44){label=10;break;}else{label=14;break;}
 case 10: 
 var $46=$start;
 var $47=((($46)+(20))|0);
 var $48=$k;
 var $49=($48<<3);
 var $50=((($47)+($49))|0);
 var $51=$2;
 var $52=(($51+$50)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=$54<<8;
 var $56=$start;
 var $57=((($56)+(21))|0);
 var $58=$k;
 var $59=($58<<3);
 var $60=((($57)+($59))|0);
 var $61=$2;
 var $62=(($61+$60)|0);
 var $63=HEAP8[($62)];
 var $64=($63&255);
 var $65=((($55)+($64))|0);
 var $66=($65<<1);
 $j=$66;
 var $67=$start;
 var $68=((($67)+(24))|0);
 var $69=$k;
 var $70=($69<<3);
 var $71=((($68)+($70))|0);
 var $72=$2;
 var $73=(($72+$71)|0);
 var $74=HEAP8[($73)];
 var $75=($74&255);
 var $76=$75<<8;
 var $77=$start;
 var $78=((($77)+(25))|0);
 var $79=$k;
 var $80=($79<<3);
 var $81=((($78)+($80))|0);
 var $82=$2;
 var $83=(($82+$81)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=((($76)+($85))|0);
 var $87=($86<<1);
 var $88=$start;
 var $89=((($88)+(26))|0);
 var $90=$k;
 var $91=($90<<3);
 var $92=((($89)+($91))|0);
 var $93=$2;
 var $94=(($93+$92)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=$96<<8;
 var $98=$start;
 var $99=((($98)+(27))|0);
 var $100=$k;
 var $101=($100<<3);
 var $102=((($99)+($101))|0);
 var $103=$2;
 var $104=(($103+$102)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 var $107=((($97)+($106))|0);
 var $108=($107<<1);
 var $109=((($87)+($108))|0);
 $ssize=$109;
 var $110=$j;
 var $111=((($110)+(2))|0);
 var $112=$ssize;
 var $113=($111|0)<($112|0);
 if($113){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=54;break;
 case 12: 
 label=13;break;
 case 13: 
 var $117=$k;
 var $118=((($117)+(1))|0);
 $k=$118;
 label=9;break;
 case 14: 
 $k=0;
 label=15;break;
 case 15: 
 var $121=$k;
 var $122=($121|0)<31;
 if($122){label=16;break;}else{label=21;break;}
 case 16: 
 var $124=$start;
 var $125=((($124)+(22))|0);
 var $126=$k;
 var $127=($126<<3);
 var $128=((($125)+($127))|0);
 var $129=$2;
 var $130=(($129+$128)|0);
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=($132|0)>15;
 if($133){label=18;break;}else{label=17;break;}
 case 17: 
 var $135=$start;
 var $136=((($135)+(23))|0);
 var $137=$k;
 var $138=($137<<3);
 var $139=((($136)+($138))|0);
 var $140=$2;
 var $141=(($140+$139)|0);
 var $142=HEAP8[($141)];
 var $143=($142&255);
 var $144=($143|0)>64;
 if($144){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=54;break;
 case 19: 
 label=20;break;
 case 20: 
 var $148=$k;
 var $149=((($148)+(1))|0);
 $k=$149;
 label=15;break;
 case 21: 
 var $151=$start;
 var $152=((($151)+(784))|0);
 var $153=$2;
 var $154=(($153+$152)|0);
 var $155=HEAP8[($154)];
 var $156=($155&255);
 var $157=$156<<24;
 var $158=$start;
 var $159=((($158)+(785))|0);
 var $160=$2;
 var $161=(($160+$159)|0);
 var $162=HEAP8[($161)];
 var $163=($162&255);
 var $164=$163<<16;
 var $165=((($157)+($164))|0);
 var $166=$start;
 var $167=((($166)+(786))|0);
 var $168=$2;
 var $169=(($168+$167)|0);
 var $170=HEAP8[($169)];
 var $171=($170&255);
 var $172=$171<<8;
 var $173=((($165)+($172))|0);
 var $174=$start;
 var $175=((($174)+(787))|0);
 var $176=$2;
 var $177=(($176+$175)|0);
 var $178=HEAP8[($177)];
 var $179=($178&255);
 var $180=((($173)+($179))|0);
 $k=$180;
 var $181=$k;
 var $182=($181|0)<788;
 if($182){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=54;break;
 case 23: 
 $j=0;
 label=24;break;
 case 24: 
 var $186=$j;
 var $187=$l;
 var $188=($186|0)<($187|0);
 if($188){label=25;break;}else{label=29;break;}
 case 25: 
 var $190=$start;
 var $191=((($190)+(272))|0);
 var $192=$j;
 var $193=((($191)+($192))|0);
 var $194=$2;
 var $195=(($194+$193)|0);
 var $196=HEAP8[($195)];
 var $197=($196&255);
 var $198=$197<<24;
 var $199=$start;
 var $200=((($199)+(273))|0);
 var $201=$j;
 var $202=((($200)+($201))|0);
 var $203=$2;
 var $204=(($203+$202)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$206<<16;
 var $208=((($198)+($207))|0);
 var $209=$start;
 var $210=((($209)+(274))|0);
 var $211=$j;
 var $212=((($210)+($211))|0);
 var $213=$2;
 var $214=(($213+$212)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=$216<<8;
 var $218=((($208)+($217))|0);
 var $219=$start;
 var $220=((($219)+(275))|0);
 var $221=$j;
 var $222=((($220)+($221))|0);
 var $223=$2;
 var $224=(($223+$222)|0);
 var $225=HEAP8[($224)];
 var $226=($225&255);
 var $227=((($218)+($226))|0);
 $m=$227;
 var $228=$m;
 var $229=$k;
 var $230=($228|0)>($229|0);
 if($230){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=54;break;
 case 27: 
 label=28;break;
 case 28: 
 var $234=$j;
 var $235=((($234)+(4))|0);
 $j=$235;
 label=24;break;
 case 29: 
 var $237=$j;
 var $238=((($237)+(2))|0);
 $j=$238;
 label=30;break;
 case 30: 
 var $240=$j;
 var $241=($240|0)<128;
 if($241){label=31;break;}else{label=35;break;}
 case 31: 
 var $243=$start;
 var $244=((($243)+(272))|0);
 var $245=$j;
 var $246=($245<<2);
 var $247=((($244)+($246))|0);
 var $248=$2;
 var $249=(($248+$247)|0);
 var $250=HEAP8[($249)];
 var $251=($250&255);
 var $252=$251<<24;
 var $253=$start;
 var $254=((($253)+(273))|0);
 var $255=$j;
 var $256=($255<<2);
 var $257=((($254)+($256))|0);
 var $258=$2;
 var $259=(($258+$257)|0);
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=$261<<16;
 var $263=((($252)+($262))|0);
 var $264=$start;
 var $265=((($264)+(274))|0);
 var $266=$j;
 var $267=($266<<2);
 var $268=((($265)+($267))|0);
 var $269=$2;
 var $270=(($269+$268)|0);
 var $271=HEAP8[($270)];
 var $272=($271&255);
 var $273=$272<<8;
 var $274=((($263)+($273))|0);
 var $275=$start;
 var $276=((($275)+(275))|0);
 var $277=$j;
 var $278=($277<<2);
 var $279=((($276)+($278))|0);
 var $280=$2;
 var $281=(($280+$279)|0);
 var $282=HEAP8[($281)];
 var $283=($282&255);
 var $284=((($274)+($283))|0);
 $m=$284;
 var $285=$m;
 var $286=($285|0)!=0;
 if($286){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=54;break;
 case 33: 
 label=34;break;
 case 34: 
 var $290=$j;
 var $291=((($290)+(1))|0);
 $j=$291;
 label=30;break;
 case 35: 
 var $293=$start;
 var $294=((($293)+(788))|0);
 $j=$294;
 label=36;break;
 case 36: 
 var $296=$j;
 var $297=$k;
 var $298=$start;
 var $299=((($297)+($298))|0);
 var $300=((($299)-(4))|0);
 var $301=($296|0)<($300|0);
 if($301){label=37;break;}else{label=53;break;}
 case 37: 
 var $303=$j;
 var $304=$2;
 var $305=(($304+$303)|0);
 var $306=HEAP8[($305)];
 var $307=($306&255);
 var $308=($307|0)==128;
 if($308){label=38;break;}else{label=39;break;}
 case 38: 
 var $310=$j;
 var $311=((($310)+(1))|0);
 $j=$311;
 label=36;break;
 case 39: 
 var $313=$j;
 var $314=$2;
 var $315=(($314+$313)|0);
 var $316=HEAP8[($315)];
 var $317=($316&255);
 var $318=($317|0)>128;
 if($318){label=40;break;}else{label=41;break;}
 case 40: 
 $1=-1;
 label=54;break;
 case 41: 
 var $321=$j;
 var $322=$2;
 var $323=(($322+$321)|0);
 var $324=HEAP8[($323)];
 var $325=($324&255);
 var $326=($325|0)==0;
 if($326){label=42;break;}else{label=46;break;}
 case 42: 
 var $328=$j;
 var $329=((($328)+(1))|0);
 var $330=$2;
 var $331=(($330+$329)|0);
 var $332=HEAP8[($331)];
 var $333=($332&255);
 var $334=($333|0)==0;
 if($334){label=43;break;}else{label=46;break;}
 case 43: 
 var $336=$j;
 var $337=((($336)+(2))|0);
 var $338=$2;
 var $339=(($338+$337)|0);
 var $340=HEAP8[($339)];
 var $341=($340&255);
 var $342=($341|0)==0;
 if($342){label=44;break;}else{label=46;break;}
 case 44: 
 var $344=$j;
 var $345=((($344)+(3))|0);
 var $346=$2;
 var $347=(($346+$345)|0);
 var $348=HEAP8[($347)];
 var $349=($348&255);
 var $350=($349|0)==0;
 if($350){label=45;break;}else{label=46;break;}
 case 45: 
 $1=-1;
 label=54;break;
 case 46: 
 var $353=$j;
 var $354=((($353)+(2))|0);
 var $355=$2;
 var $356=(($355+$354)|0);
 var $357=HEAP8[($356)];
 var $358=($357&255);
 var $359=((($358)*(15))&-1);
 var $360=($359|0)==12;
 if($360){label=47;break;}else{label=49;break;}
 case 47: 
 var $362=$j;
 var $363=((($362)+(3))|0);
 var $364=$2;
 var $365=(($364+$363)|0);
 var $366=HEAP8[($365)];
 var $367=($366&255);
 var $368=($367|0)>64;
 if($368){label=48;break;}else{label=49;break;}
 case 48: 
 $1=-1;
 label=54;break;
 case 49: 
 var $371=$j;
 var $372=((($371)+(2))|0);
 var $373=$2;
 var $374=(($373+$372)|0);
 var $375=HEAP8[($374)];
 var $376=($375&255);
 var $377=((($376)*(15))&-1);
 var $378=($377|0)==13;
 if($378){label=50;break;}else{label=52;break;}
 case 50: 
 var $380=$j;
 var $381=((($380)+(3))|0);
 var $382=$2;
 var $383=(($382+$381)|0);
 var $384=HEAP8[($383)];
 var $385=($384&255);
 var $386=($385|0)>64;
 if($386){label=51;break;}else{label=52;break;}
 case 51: 
 $1=-1;
 label=54;break;
 case 52: 
 var $389=$j;
 var $390=((($389)+(4))|0);
 $j=$390;
 label=36;break;
 case 53: 
 var $392=$2;
 var $393=$3;
 _pw_read_title($392,$393,20);
 $1=0;
 label=54;break;
 case 54: 
 var $395=$1;
 STACKTOP=sp;return $395;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_starpack($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2816)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $c5;
 var $pnum=sp;
 var $pnum_tmp=(sp)+(128);
 var $pat_pos;
 var $buffer=(sp)+(256);
 var $num_pat;
 var $i;
 var $j;
 var $k;
 var $size;
 var $ssize;
 var $paddr=(sp)+(1280);
 var $paddr_tmp=(sp)+(1792);
 var $paddr_tmp2=(sp)+(2304);
 var $tmp_ptr;
 var $tmp1;
 var $tmp2;
 var $smp_addr;
 var $ofs;
 $1=$in;
 $2=$out;
 $num_pat=0;
 $i=0;
 $j=0;
 $k=0;
 $ssize=0;
 $smp_addr=0;
 var $3=$pnum;
 _memset($3, 0, 128)|0;
 var $4=$pnum_tmp;
 _memset($4, 0, 128)|0;
 var $5=$paddr;
 _memset($5, 0, 512)|0;
 var $6=$paddr_tmp;
 _memset($6, 0, 512)|0;
 var $7=$paddr_tmp2;
 _memset($7, 0, 512)|0;
 var $8=$2;
 var $9=$1;
 var $10=_pw_move_data($8,$9,20);
 $i=0;
 label=2;break;
 case 2: 
 var $12=$i;
 var $13=($12|0)<31;
 if($13){label=3;break;}else{label=5;break;}
 case 3: 
 var $15=$2;
 var $16=_pw_write_zero($15,22);
 var $17=$2;
 var $18=$1;
 var $19=_read16b($18);
 var $20=($19&65535);
 $size=$20;
 var $21=(($20)&65535);
 _write16b($17,$21);
 var $22=$size;
 var $23=($22<<1);
 var $24=$ssize;
 var $25=((($24)+($23))|0);
 $ssize=$25;
 var $26=$2;
 var $27=$1;
 var $28=_read8($27);
 _write8($26,$28);
 var $29=$2;
 var $30=$1;
 var $31=_read8($30);
 _write8($29,$31);
 var $32=$2;
 var $33=$1;
 var $34=_read16b($33);
 _write16b($32,$34);
 var $35=$2;
 var $36=$1;
 var $37=_read16b($36);
 _write16b($35,$37);
 label=4;break;
 case 4: 
 var $39=$i;
 var $40=((($39)+(1))|0);
 $i=$40;
 label=2;break;
 case 5: 
 var $42=$1;
 var $43=_read16b($42);
 var $44=(($43)&255);
 $pat_pos=$44;
 var $45=$1;
 var $46=_fseek($45,2,1);
 $i=0;
 label=6;break;
 case 6: 
 var $48=$i;
 var $49=($48|0)<128;
 if($49){label=7;break;}else{label=9;break;}
 case 7: 
 var $51=$1;
 var $52=_read32b($51);
 var $53=$i;
 var $54=(($paddr+($53<<2))|0);
 HEAP32[(($54)>>2)]=$52;
 label=8;break;
 case 8: 
 var $56=$i;
 var $57=((($56)+(1))|0);
 $i=$57;
 label=6;break;
 case 9: 
 $tmp_ptr=0;
 $i=0;
 label=10;break;
 case 10: 
 var $60=$i;
 var $61=$pat_pos;
 var $62=($61&255);
 var $63=($60|0)<($62|0);
 if($63){label=11;break;}else{label=23;break;}
 case 11: 
 var $65=$i;
 var $66=($65|0)==0;
 if($66){label=12;break;}else{label=13;break;}
 case 12: 
 var $68=(($pnum)|0);
 HEAP8[($68)]=0;
 var $69=$tmp_ptr;
 var $70=((($69)+(1))|0);
 $tmp_ptr=$70;
 label=22;break;
 case 13: 
 $j=0;
 label=14;break;
 case 14: 
 var $73=$j;
 var $74=$i;
 var $75=($73|0)<($74|0);
 if($75){label=15;break;}else{label=19;break;}
 case 15: 
 var $77=$i;
 var $78=(($paddr+($77<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$j;
 var $81=(($paddr+($80<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($79|0)==($82|0);
 if($83){label=16;break;}else{label=17;break;}
 case 16: 
 var $85=$j;
 var $86=(($pnum+$85)|0);
 var $87=HEAP8[($86)];
 var $88=$i;
 var $89=(($pnum+$88)|0);
 HEAP8[($89)]=$87;
 label=19;break;
 case 17: 
 label=18;break;
 case 18: 
 var $92=$j;
 var $93=((($92)+(1))|0);
 $j=$93;
 label=14;break;
 case 19: 
 var $95=$j;
 var $96=$i;
 var $97=($95|0)==($96|0);
 if($97){label=20;break;}else{label=21;break;}
 case 20: 
 var $99=$tmp_ptr;
 var $100=((($99)+(1))|0);
 $tmp_ptr=$100;
 var $101=(($99)&255);
 var $102=$i;
 var $103=(($pnum+$102)|0);
 HEAP8[($103)]=$101;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $106=$i;
 var $107=((($106)+(1))|0);
 $i=$107;
 label=10;break;
 case 23: 
 $i=0;
 label=24;break;
 case 24: 
 var $110=$i;
 var $111=($110|0)<128;
 if($111){label=25;break;}else{label=27;break;}
 case 25: 
 var $113=$i;
 var $114=(($paddr+($113<<2))|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=$i;
 var $117=(($paddr_tmp+($116<<2))|0);
 HEAP32[(($117)>>2)]=$115;
 label=26;break;
 case 26: 
 var $119=$i;
 var $120=((($119)+(1))|0);
 $i=$120;
 label=24;break;
 case 27: 
 label=28;break;
 case 28: 
 $i=0;
 label=29;break;
 case 29: 
 var $124=$i;
 var $125=$pat_pos;
 var $126=($125&255);
 var $127=($124|0)<($126|0);
 if($127){label=30;break;}else{label=38;break;}
 case 30: 
 $j=0;
 label=31;break;
 case 31: 
 var $130=$j;
 var $131=$i;
 var $132=($130|0)<($131|0);
 if($132){label=32;break;}else{label=36;break;}
 case 32: 
 var $134=$i;
 var $135=(($paddr_tmp+($134<<2))|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$j;
 var $138=(($paddr_tmp+($137<<2))|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($136|0)<($139|0);
 if($140){label=33;break;}else{label=34;break;}
 case 33: 
 var $142=$j;
 var $143=(($pnum+$142)|0);
 var $144=HEAP8[($143)];
 var $145=($144&255);
 $tmp2=$145;
 var $146=$i;
 var $147=(($pnum+$146)|0);
 var $148=HEAP8[($147)];
 var $149=$j;
 var $150=(($pnum+$149)|0);
 HEAP8[($150)]=$148;
 var $151=$tmp2;
 var $152=(($151)&255);
 var $153=$i;
 var $154=(($pnum+$153)|0);
 HEAP8[($154)]=$152;
 var $155=$j;
 var $156=(($paddr_tmp+($155<<2))|0);
 var $157=HEAP32[(($156)>>2)];
 $tmp1=$157;
 var $158=$i;
 var $159=(($paddr_tmp+($158<<2))|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=$j;
 var $162=(($paddr_tmp+($161<<2))|0);
 HEAP32[(($162)>>2)]=$160;
 var $163=$tmp1;
 var $164=$i;
 var $165=(($paddr_tmp+($164<<2))|0);
 HEAP32[(($165)>>2)]=$163;
 label=28;break;
 case 34: 
 label=35;break;
 case 35: 
 var $168=$j;
 var $169=((($168)+(1))|0);
 $j=$169;
 label=31;break;
 case 36: 
 label=37;break;
 case 37: 
 var $172=$i;
 var $173=((($172)+(1))|0);
 $i=$173;
 label=29;break;
 case 38: 
 $j=0;
 $i=0;
 label=39;break;
 case 39: 
 var $176=$i;
 var $177=($176|0)<128;
 if($177){label=40;break;}else{label=46;break;}
 case 40: 
 var $179=$i;
 var $180=($179|0)==0;
 if($180){label=41;break;}else{label=42;break;}
 case 41: 
 var $182=$i;
 var $183=(($paddr_tmp+($182<<2))|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=$j;
 var $186=(($paddr_tmp2+($185<<2))|0);
 HEAP32[(($186)>>2)]=$184;
 label=45;break;
 case 42: 
 var $188=$i;
 var $189=(($paddr_tmp+($188<<2))|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$j;
 var $192=(($paddr_tmp2+($191<<2))|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($190|0)==($193|0);
 if($194){label=43;break;}else{label=44;break;}
 case 43: 
 label=45;break;
 case 44: 
 var $197=$i;
 var $198=(($paddr_tmp+($197<<2))|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$j;
 var $201=((($200)+(1))|0);
 $j=$201;
 var $202=(($paddr_tmp2+($201<<2))|0);
 HEAP32[(($202)>>2)]=$199;
 label=45;break;
 case 45: 
 var $204=$i;
 var $205=((($204)+(1))|0);
 $i=$205;
 label=39;break;
 case 46: 
 $j=0;
 $i=0;
 label=47;break;
 case 47: 
 var $208=$i;
 var $209=$pat_pos;
 var $210=($209&255);
 var $211=((($210)-(1))|0);
 var $212=($208|0)<($211|0);
 if($212){label=48;break;}else{label=52;break;}
 case 48: 
 var $214=$i;
 var $215=(($paddr_tmp2+($214<<2))|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$j;
 var $218=(($paddr_tmp+($217<<2))|0);
 HEAP32[(($218)>>2)]=$216;
 var $219=$j;
 var $220=((($219)+(1))|0);
 $j=$220;
 var $221=$i;
 var $222=((($221)+(1))|0);
 var $223=(($paddr_tmp2+($222<<2))|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$i;
 var $226=(($paddr_tmp2+($225<<2))|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=((($224)-($227))|0);
 var $229=($228|0)>1024;
 if($229){label=49;break;}else{label=50;break;}
 case 49: 
 var $231=$i;
 var $232=(($paddr_tmp2+($231<<2))|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=((($233)+(1024))|0);
 var $235=$j;
 var $236=(($paddr_tmp+($235<<2))|0);
 HEAP32[(($236)>>2)]=$234;
 var $237=$j;
 var $238=((($237)+(1))|0);
 $j=$238;
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $241=$i;
 var $242=((($241)+(1))|0);
 $i=$242;
 label=47;break;
 case 52: 
 $i=0;
 label=53;break;
 case 53: 
 var $245=$i;
 var $246=($245|0)<128;
 if($246){label=54;break;}else{label=62;break;}
 case 54: 
 $j=0;
 label=55;break;
 case 55: 
 var $249=$j;
 var $250=($249|0)<128;
 if($250){label=56;break;}else{label=60;break;}
 case 56: 
 var $252=$i;
 var $253=(($paddr+($252<<2))|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=$j;
 var $256=(($paddr_tmp+($255<<2))|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($254|0)==($257|0);
 if($258){label=57;break;}else{label=58;break;}
 case 57: 
 var $260=$j;
 var $261=(($260)&255);
 var $262=$i;
 var $263=(($pnum_tmp+$262)|0);
 HEAP8[($263)]=$261;
 label=60;break;
 case 58: 
 label=59;break;
 case 59: 
 var $266=$j;
 var $267=((($266)+(1))|0);
 $j=$267;
 label=55;break;
 case 60: 
 label=61;break;
 case 61: 
 var $270=$i;
 var $271=((($270)+(1))|0);
 $i=$271;
 label=53;break;
 case 62: 
 var $273=$pnum;
 _memset($273, 0, 128)|0;
 $i=0;
 label=63;break;
 case 63: 
 var $275=$i;
 var $276=$pat_pos;
 var $277=($276&255);
 var $278=($275|0)<($277|0);
 if($278){label=64;break;}else{label=66;break;}
 case 64: 
 var $280=$i;
 var $281=(($pnum_tmp+$280)|0);
 var $282=HEAP8[($281)];
 var $283=$i;
 var $284=(($pnum+$283)|0);
 HEAP8[($284)]=$282;
 label=65;break;
 case 65: 
 var $286=$i;
 var $287=((($286)+(1))|0);
 $i=$287;
 label=63;break;
 case 66: 
 var $289=$2;
 var $290=$pat_pos;
 _write8($289,$290);
 $i=0;
 label=67;break;
 case 67: 
 var $292=$i;
 var $293=$pat_pos;
 var $294=($293&255);
 var $295=($292|0)<($294|0);
 if($295){label=68;break;}else{label=72;break;}
 case 68: 
 var $297=$i;
 var $298=(($pnum+$297)|0);
 var $299=HEAP8[($298)];
 var $300=($299&255);
 var $301=$num_pat;
 var $302=($301&255);
 var $303=($300|0)>($302|0);
 if($303){label=69;break;}else{label=70;break;}
 case 69: 
 var $305=$i;
 var $306=(($pnum+$305)|0);
 var $307=HEAP8[($306)];
 $num_pat=$307;
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 var $310=$i;
 var $311=((($310)+(1))|0);
 $i=$311;
 label=67;break;
 case 72: 
 var $313=$2;
 _write8($313,127);
 var $314=(($pnum)|0);
 var $315=$2;
 var $316=_fwrite($314,128,1,$315);
 var $317=$2;
 _write32b($317,1294879534);
 var $318=$1;
 var $319=_fseek($318,784,0);
 var $320=$1;
 var $321=_read32b($320);
 var $322=((($321)+(788))|0);
 $smp_addr=$322;
 var $323=$num_pat;
 var $324=($323&255);
 var $325=((($324)+(1))|0);
 var $326=(($325)&255);
 $num_pat=$326;
 $i=0;
 label=73;break;
 case 73: 
 var $328=$i;
 var $329=$num_pat;
 var $330=($329&255);
 var $331=($328|0)<($330|0);
 if($331){label=74;break;}else{label=86;break;}
 case 74: 
 var $333=$buffer;
 _memset($333, 0, 1024)|0;
 $j=0;
 label=75;break;
 case 75: 
 var $335=$j;
 var $336=($335|0)<64;
 if($336){label=76;break;}else{label=84;break;}
 case 76: 
 $k=0;
 label=77;break;
 case 77: 
 var $339=$k;
 var $340=($339|0)<4;
 if($340){label=78;break;}else{label=82;break;}
 case 78: 
 var $342=$j;
 var $343=($342<<4);
 var $344=$k;
 var $345=($344<<2);
 var $346=((($343)+($345))|0);
 $ofs=$346;
 var $347=$1;
 var $348=_read8($347);
 $c1=$348;
 var $349=$c1;
 var $350=($349&255);
 var $351=($350|0)==128;
 if($351){label=79;break;}else{label=80;break;}
 case 79: 
 label=81;break;
 case 80: 
 var $354=$1;
 var $355=_read8($354);
 $c2=$355;
 var $356=$1;
 var $357=_read8($356);
 $c3=$357;
 var $358=$1;
 var $359=_read8($358);
 $c4=$359;
 var $360=$c1;
 var $361=($360&255);
 var $362=$361&15;
 var $363=(($362)&255);
 var $364=$ofs;
 var $365=(($buffer+$364)|0);
 HEAP8[($365)]=$363;
 var $366=$c2;
 var $367=$ofs;
 var $368=((($367)+(1))|0);
 var $369=(($buffer+$368)|0);
 HEAP8[($369)]=$366;
 var $370=$c3;
 var $371=($370&255);
 var $372=$371&15;
 var $373=(($372)&255);
 var $374=$ofs;
 var $375=((($374)+(2))|0);
 var $376=(($buffer+$375)|0);
 HEAP8[($376)]=$373;
 var $377=$c4;
 var $378=$ofs;
 var $379=((($378)+(3))|0);
 var $380=(($buffer+$379)|0);
 HEAP8[($380)]=$377;
 var $381=$c1;
 var $382=($381&255);
 var $383=$382&240;
 var $384=$c3;
 var $385=($384&255);
 var $386=$385>>4;
 var $387=$386&15;
 var $388=$383|$387;
 var $389=$388>>2;
 var $390=(($389)&255);
 $c5=$390;
 var $391=$c5;
 var $392=($391&255);
 var $393=$392&240;
 var $394=$ofs;
 var $395=(($buffer+$394)|0);
 var $396=HEAP8[($395)];
 var $397=($396&255);
 var $398=$397|$393;
 var $399=(($398)&255);
 HEAP8[($395)]=$399;
 var $400=$c5;
 var $401=($400&255);
 var $402=$401<<4;
 var $403=$402&240;
 var $404=$ofs;
 var $405=((($404)+(2))|0);
 var $406=(($buffer+$405)|0);
 var $407=HEAP8[($406)];
 var $408=($407&255);
 var $409=$408|$403;
 var $410=(($409)&255);
 HEAP8[($406)]=$410;
 label=81;break;
 case 81: 
 var $412=$k;
 var $413=((($412)+(1))|0);
 $k=$413;
 label=77;break;
 case 82: 
 label=83;break;
 case 83: 
 var $416=$j;
 var $417=((($416)+(1))|0);
 $j=$417;
 label=75;break;
 case 84: 
 var $419=(($buffer)|0);
 var $420=$2;
 var $421=_fwrite($419,1024,1,$420);
 label=85;break;
 case 85: 
 var $423=$i;
 var $424=((($423)+(1))|0);
 $i=$424;
 label=73;break;
 case 86: 
 var $426=$1;
 var $427=$smp_addr;
 var $428=_fseek($426,$427,0);
 var $429=$2;
 var $430=$1;
 var $431=$ssize;
 var $432=_pw_move_data($429,$430,$431);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_tdd($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $start;
 var $ssize;
 var $d;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<564;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((564)-($9))|0);
 $1=$10;
 label=58;break;
 case 4: 
 label=5;break;
 case 5: 
 $ssize=0;
 $j=0;
 label=6;break;
 case 6: 
 var $14=$j;
 var $15=($14|0)<31;
 if($15){label=7;break;}else{label=20;break;}
 case 7: 
 var $17=$2;
 var $18=$start;
 var $19=(($17+$18)|0);
 var $20=$j;
 var $21=((($20)*(14))&-1);
 var $22=(($19+$21)|0);
 $d=$22;
 var $23=$d;
 var $24=(($23+130)|0);
 var $25=_readmem32b($24);
 $k=$25;
 var $26=$d;
 var $27=(($26+134)|0);
 var $28=_readmem16b($27);
 var $29=($28&65535);
 $l=$29;
 var $30=$d;
 var $31=(($30+138)|0);
 var $32=_readmem32b($31);
 $m=$32;
 var $33=$d;
 var $34=(($33+142)|0);
 var $35=_readmem16b($34);
 var $36=($35&65535);
 $n=$36;
 var $37=$start;
 var $38=$j;
 var $39=((($38)*(14))&-1);
 var $40=((($37)+($39))|0);
 var $41=((($40)+(137))|0);
 var $42=$2;
 var $43=(($42+$41)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=($45|0)>64;
 if($46){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=58;break;
 case 9: 
 var $49=$m;
 var $50=$k;
 var $51=($49|0)<($50|0);
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=58;break;
 case 11: 
 var $54=$k;
 var $55=($54|0)<564;
 if($55){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=$m;
 var $58=($57|0)<564;
 if($58){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=58;break;
 case 14: 
 var $61=$m;
 var $62=$k;
 var $63=((($61)-($62))|0);
 var $64=$l;
 var $65=($63|0)>($64|0);
 if($65){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=58;break;
 case 16: 
 var $68=$m;
 var $69=$k;
 var $70=((($68)-($69))|0);
 var $71=$n;
 var $72=((($70)+($71))|0);
 var $73=$l;
 var $74=((($73)+(2))|0);
 var $75=($72|0)>($74|0);
 if($75){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=58;break;
 case 18: 
 var $78=$l;
 var $79=$ssize;
 var $80=((($79)+($78))|0);
 $ssize=$80;
 label=19;break;
 case 19: 
 var $82=$j;
 var $83=((($82)+(1))|0);
 $j=$83;
 label=6;break;
 case 20: 
 var $85=$ssize;
 var $86=($85|0)<=2;
 if($86){label=22;break;}else{label=21;break;}
 case 21: 
 var $88=$ssize;
 var $89=($88|0)>2031585;
 if($89){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=58;break;
 case 23: 
 var $92=$start;
 var $93=$2;
 var $94=(($93+$92)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=($96|0)>127;
 if($97){label=25;break;}else{label=24;break;}
 case 24: 
 var $99=$start;
 var $100=$2;
 var $101=(($100+$99)|0);
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=($103|0)==0;
 if($104){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=58;break;
 case 26: 
 $k=0;
 $j=0;
 label=27;break;
 case 27: 
 var $108=$j;
 var $109=($108|0)<128;
 if($109){label=28;break;}else{label=34;break;}
 case 28: 
 var $111=$start;
 var $112=$j;
 var $113=((($111)+($112))|0);
 var $114=((($113)+(2))|0);
 var $115=$2;
 var $116=(($115+$114)|0);
 var $117=HEAP8[($116)];
 var $118=($117&255);
 var $119=($118|0)>127;
 if($119){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=58;break;
 case 30: 
 var $122=$start;
 var $123=$j;
 var $124=((($122)+($123))|0);
 var $125=((($124)+(2))|0);
 var $126=$2;
 var $127=(($126+$125)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=$k;
 var $131=($129|0)>($130|0);
 if($131){label=31;break;}else{label=32;break;}
 case 31: 
 var $133=$start;
 var $134=$j;
 var $135=((($133)+($134))|0);
 var $136=((($135)+(2))|0);
 var $137=$2;
 var $138=(($137+$136)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 $k=$140;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $143=$j;
 var $144=((($143)+(1))|0);
 $j=$144;
 label=27;break;
 case 34: 
 var $146=$k;
 var $147=((($146)+(1))|0);
 $k=$147;
 var $148=$k;
 var $149=($148<<10);
 $k=$149;
 var $150=$start;
 var $151=$2;
 var $152=(($151+$150)|0);
 var $153=HEAP8[($152)];
 var $154=($153&255);
 var $155=((($154)+(2))|0);
 $j=$155;
 label=35;break;
 case 35: 
 var $157=$j;
 var $158=($157|0)<128;
 if($158){label=36;break;}else{label=40;break;}
 case 36: 
 var $160=$start;
 var $161=$j;
 var $162=((($160)+($161))|0);
 var $163=((($162)+(2))|0);
 var $164=$2;
 var $165=(($164+$163)|0);
 var $166=HEAP8[($165)];
 var $167=($166&255);
 var $168=($167|0)!=0;
 if($168){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=58;break;
 case 38: 
 label=39;break;
 case 39: 
 var $172=$j;
 var $173=((($172)+(1))|0);
 $j=$173;
 label=35;break;
 case 40: 
 var $175=$start;
 var $176=((($175)+(564))|0);
 var $177=$ssize;
 var $178=((($176)+($177))|0);
 $l=$178;
 $j=0;
 label=41;break;
 case 41: 
 var $180=$j;
 var $181=$k;
 var $182=($180|0)<($181|0);
 if($182){label=42;break;}else{label=57;break;}
 case 42: 
 var $184=$l;
 var $185=$j;
 var $186=((($184)+($185))|0);
 var $187=$2;
 var $188=(($187+$186)|0);
 var $189=HEAP8[($188)];
 var $190=($189&255);
 var $191=($190|0)>31;
 if($191){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=58;break;
 case 44: 
 var $194=$l;
 var $195=$j;
 var $196=((($194)+($195))|0);
 var $197=((($196)+(1))|0);
 var $198=$2;
 var $199=(($198+$197)|0);
 var $200=HEAP8[($199)];
 var $201=($200&255);
 var $202=($201|0)>72;
 if($202){label=46;break;}else{label=45;break;}
 case 45: 
 var $204=$l;
 var $205=$j;
 var $206=((($204)+($205))|0);
 var $207=((($206)+(1))|0);
 var $208=$2;
 var $209=(($208+$207)|0);
 var $210=HEAP8[($209)];
 var $211=($210&255);
 var $212=$211&1;
 var $213=($212|0)==1;
 if($213){label=46;break;}else{label=47;break;}
 case 46: 
 $1=-1;
 label=58;break;
 case 47: 
 var $216=$l;
 var $217=$j;
 var $218=((($216)+($217))|0);
 var $219=((($218)+(2))|0);
 var $220=$2;
 var $221=(($220+$219)|0);
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223&15;
 var $225=($224|0)==12;
 if($225){label=48;break;}else{label=50;break;}
 case 48: 
 var $227=$l;
 var $228=$j;
 var $229=((($227)+($228))|0);
 var $230=((($229)+(3))|0);
 var $231=$2;
 var $232=(($231+$230)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=($234|0)>64;
 if($235){label=49;break;}else{label=50;break;}
 case 49: 
 $1=-1;
 label=58;break;
 case 50: 
 var $238=$l;
 var $239=$j;
 var $240=((($238)+($239))|0);
 var $241=((($240)+(2))|0);
 var $242=$2;
 var $243=(($242+$241)|0);
 var $244=HEAP8[($243)];
 var $245=($244&255);
 var $246=$245&15;
 var $247=($246|0)==13;
 if($247){label=51;break;}else{label=53;break;}
 case 51: 
 var $249=$l;
 var $250=$j;
 var $251=((($249)+($250))|0);
 var $252=((($251)+(3))|0);
 var $253=$2;
 var $254=(($253+$252)|0);
 var $255=HEAP8[($254)];
 var $256=($255&255);
 var $257=($256|0)>64;
 if($257){label=52;break;}else{label=53;break;}
 case 52: 
 $1=-1;
 label=58;break;
 case 53: 
 var $260=$l;
 var $261=$j;
 var $262=((($260)+($261))|0);
 var $263=((($262)+(2))|0);
 var $264=$2;
 var $265=(($264+$263)|0);
 var $266=HEAP8[($265)];
 var $267=($266&255);
 var $268=$267&15;
 var $269=($268|0)==11;
 if($269){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=58;break;
 case 55: 
 label=56;break;
 case 56: 
 var $273=$j;
 var $274=((($273)+(4))|0);
 $j=$274;
 label=41;break;
 case 57: 
 var $276=$3;
 _pw_read_title(0,$276,0);
 $1=-1;
 label=58;break;
 case 58: 
 var $278=$1;
 STACKTOP=sp;return $278;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_tdd($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp;
 var $pat=sp;
 var $pmax;
 var $i;
 var $j;
 var $k;
 var $size;
 var $ssize;
 var $saddr=(sp)+(1024);
 var $ssizes=(sp)+(1152);
 var $x;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$saddr;
 _memset($3, 0, 124)|0;
 var $4=$ssizes;
 _memset($4, 0, 124)|0;
 var $5=$2;
 var $6=_pw_write_zero($5,1080);
 var $7=_malloc(130);
 $tmp=$7;
 var $8=$tmp;
 _memset($8, 0, 130)|0;
 var $9=$2;
 var $10=_fseek($9,950,0);
 var $11=$tmp;
 var $12=$1;
 var $13=_fread($11,130,1,$12);
 var $14=$tmp;
 var $15=$2;
 var $16=_fwrite($14,130,1,$15);
 $i=0;
 $pmax=0;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=($18|0)<128;
 if($19){label=3;break;}else{label=7;break;}
 case 3: 
 var $21=$i;
 var $22=((($21)+(2))|0);
 var $23=$tmp;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=$pmax;
 var $28=($27&255);
 var $29=($26|0)>($28|0);
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=$i;
 var $32=((($31)+(2))|0);
 var $33=$tmp;
 var $34=(($33+$32)|0);
 var $35=HEAP8[($34)];
 $pmax=$35;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $38=$i;
 var $39=((($38)+(1))|0);
 $i=$39;
 label=2;break;
 case 7: 
 var $41=$tmp;
 _free($41);
 $i=0;
 label=8;break;
 case 8: 
 var $43=$i;
 var $44=($43|0)<31;
 if($44){label=9;break;}else{label=11;break;}
 case 9: 
 var $46=$2;
 var $47=$i;
 var $48=((($47)*(30))&-1);
 var $49=((($48)+(42))|0);
 var $50=_fseek($46,$49,0);
 var $51=$1;
 var $52=_read32b($51);
 var $53=$i;
 var $54=(($saddr+($53<<2))|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=$2;
 var $56=$1;
 var $57=_read16b($56);
 var $58=($57&65535);
 $size=$58;
 var $59=(($58)&65535);
 _write16b($55,$59);
 var $60=$size;
 var $61=$ssize;
 var $62=((($61)+($60))|0);
 $ssize=$62;
 var $63=$size;
 var $64=$i;
 var $65=(($ssizes+($64<<2))|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=$2;
 var $67=$1;
 var $68=_read8($67);
 _write8($66,$68);
 var $69=$2;
 var $70=$1;
 var $71=_read8($70);
 _write8($69,$71);
 var $72=$2;
 var $73=$1;
 var $74=_read32b($73);
 var $75=$i;
 var $76=(($saddr+($75<<2))|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=((($74)-($77))|0);
 var $79=(((($78>>>0))/(2))&-1);
 var $80=(($79)&65535);
 _write16b($72,$80);
 var $81=$2;
 var $82=$1;
 var $83=_read16b($82);
 _write16b($81,$83);
 label=10;break;
 case 10: 
 var $85=$i;
 var $86=((($85)+(1))|0);
 $i=$86;
 label=8;break;
 case 11: 
 var $88=$1;
 var $89=$ssize;
 var $90=_fseek($88,$89,1);
 var $91=$2;
 var $92=_fseek($91,0,2);
 var $93=$2;
 _write32b($93,1294879534);
 var $94=_malloc(1024);
 $tmp=$94;
 $i=0;
 label=12;break;
 case 12: 
 var $96=$i;
 var $97=$pmax;
 var $98=($97&255);
 var $99=($96|0)<=($98|0);
 if($99){label=13;break;}else{label=23;break;}
 case 13: 
 var $101=$tmp;
 _memset($101, 0, 1024)|0;
 var $102=$pat;
 _memset($102, 0, 1024)|0;
 var $103=$tmp;
 var $104=$1;
 var $105=_fread($103,1024,1,$104);
 $j=0;
 label=14;break;
 case 14: 
 var $107=$j;
 var $108=($107|0)<64;
 if($108){label=15;break;}else{label=21;break;}
 case 15: 
 $k=0;
 label=16;break;
 case 16: 
 var $111=$k;
 var $112=($111|0)<4;
 if($112){label=17;break;}else{label=19;break;}
 case 17: 
 var $114=$j;
 var $115=($114<<4);
 var $116=$k;
 var $117=($116<<2);
 var $118=((($115)+($117))|0);
 $x=$118;
 var $119=$x;
 var $120=((($119)+(3))|0);
 var $121=$tmp;
 var $122=(($121+$120)|0);
 var $123=HEAP8[($122)];
 var $124=$x;
 var $125=((($124)+(3))|0);
 var $126=(($pat+$125)|0);
 HEAP8[($126)]=$123;
 var $127=$x;
 var $128=((($127)+(2))|0);
 var $129=$tmp;
 var $130=(($129+$128)|0);
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&15;
 var $134=(($133)&255);
 var $135=$x;
 var $136=((($135)+(2))|0);
 var $137=(($pat+$136)|0);
 HEAP8[($137)]=$134;
 var $138=$x;
 var $139=$tmp;
 var $140=(($139+$138)|0);
 var $141=HEAP8[($140)];
 var $142=($141&255);
 var $143=$142&240;
 var $144=(($143)&255);
 var $145=$x;
 var $146=(($pat+$145)|0);
 HEAP8[($146)]=$144;
 var $147=$x;
 var $148=$tmp;
 var $149=(($148+$147)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 var $152=$151<<4;
 var $153=$152&240;
 var $154=$x;
 var $155=((($154)+(2))|0);
 var $156=(($pat+$155)|0);
 var $157=HEAP8[($156)];
 var $158=($157&255);
 var $159=$158|$153;
 var $160=(($159)&255);
 HEAP8[($156)]=$160;
 var $161=$x;
 var $162=((($161)+(1))|0);
 var $163=$tmp;
 var $164=(($163+$162)|0);
 var $165=HEAP8[($164)];
 var $166=($165&255);
 var $167=(((($166|0))/(2))&-1);
 var $168=((4504+($167<<1))|0);
 var $169=(($168)|0);
 var $170=HEAP8[($169)];
 var $171=($170&255);
 var $172=$x;
 var $173=(($pat+$172)|0);
 var $174=HEAP8[($173)];
 var $175=($174&255);
 var $176=$175|$171;
 var $177=(($176)&255);
 HEAP8[($173)]=$177;
 var $178=$x;
 var $179=((($178)+(1))|0);
 var $180=$tmp;
 var $181=(($180+$179)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=(((($183|0))/(2))&-1);
 var $185=((4504+($184<<1))|0);
 var $186=(($185+1)|0);
 var $187=HEAP8[($186)];
 var $188=$x;
 var $189=((($188)+(1))|0);
 var $190=(($pat+$189)|0);
 HEAP8[($190)]=$187;
 label=18;break;
 case 18: 
 var $192=$k;
 var $193=((($192)+(1))|0);
 $k=$193;
 label=16;break;
 case 19: 
 label=20;break;
 case 20: 
 var $196=$j;
 var $197=((($196)+(1))|0);
 $j=$197;
 label=14;break;
 case 21: 
 var $199=(($pat)|0);
 var $200=$2;
 var $201=_fwrite($199,1024,1,$200);
 label=22;break;
 case 22: 
 var $203=$i;
 var $204=((($203)+(1))|0);
 $i=$204;
 label=12;break;
 case 23: 
 var $206=$tmp;
 _free($206);
 $i=0;
 label=24;break;
 case 24: 
 var $208=$i;
 var $209=($208|0)<31;
 if($209){label=25;break;}else{label=29;break;}
 case 25: 
 var $211=$i;
 var $212=(($ssizes+($211<<2))|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=($213|0)==0;
 if($214){label=26;break;}else{label=27;break;}
 case 26: 
 label=28;break;
 case 27: 
 var $217=$1;
 var $218=$i;
 var $219=(($saddr+($218<<2))|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=_fseek($217,$220,0);
 var $222=$2;
 var $223=$1;
 var $224=$i;
 var $225=(($ssizes+($224<<2))|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=_pw_move_data($222,$223,$226);
 label=28;break;
 case 28: 
 var $229=$i;
 var $230=((($229)+(1))|0);
 $i=$230;
 label=24;break;
 case 29: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_p50a($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$data;
 $2=$t;
 $3=$s;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_theplayer_test($4,$5,$6,80);
 STACKTOP=sp;return $7;
}
function _depack_p50a($in,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$in;
 $2=$out;
 var $3=$1;
 var $4=$2;
 var $5=_theplayer_depack($3,$4,80);
 STACKTOP=sp;return $5;
}
function _test_p60a($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$data;
 $2=$t;
 $3=$s;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_theplayer_test($4,$5,$6,96);
 STACKTOP=sp;return $7;
}
function _depack_p60a($in,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$in;
 $2=$out;
 var $3=$1;
 var $4=$2;
 var $5=_theplayer_depack($3,$4,96);
 STACKTOP=sp;return $5;
}
function _theplayer_depack($in,$out,$version){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3584)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $c1;
 var $c3;
 var $smp_buffer;
 var $pat_pos;
 var $npat;
 var $nins;
 var $tdata;
 var $ptable=sp;
 var $isize=(sp)+(128);
 var $delta;
 var $pack;
 var $taddr=(sp)+(256);
 var $tdata_addr;
 var $sdata_addr;
 var $ssize;
 var $i;
 var $j;
 var $k;
 var $smp_size=(sp)+(2304);
 var $saddr=(sp)+(2432);
 var $unpacked_ssize;
 var $val;
 var $buf=(sp)+(2560);
 $2=$in;
 $3=$out;
 $4=$version;
 $pat_pos=0;
 $npat=0;
 $nins=0;
 $delta=0;
 $pack=0;
 $tdata_addr=0;
 $sdata_addr=0;
 $ssize=0;
 var $5=_calloc(512,256);
 $tdata=$5;
 var $6=$tdata;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=66;break;
 case 3: 
 var $10=$taddr;
 _memset($10, 0, 2048)|0;
 var $11=$ptable;
 _memset($11, 0, 128)|0;
 var $12=$smp_size;
 _memset($12, 0, 124)|0;
 var $13=$isize;
 _memset($13, 0, 124)|0;
 var $14=(($saddr)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$2;
 var $16=_read16b($15);
 var $17=($16&65535);
 $sdata_addr=$17;
 var $18=$2;
 var $19=_read8($18);
 var $20=($19&255);
 $npat=$20;
 var $21=$2;
 var $22=_read8($21);
 var $23=($22&255);
 $nins=$23;
 var $24=$nins;
 var $25=$24&128;
 var $26=($25|0)!=0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 $delta=1;
 label=5;break;
 case 5: 
 var $29=$4;
 var $30=($29|0)>=96;
 if($30){label=6;break;}else{label=8;break;}
 case 6: 
 var $32=$nins;
 var $33=$32&64;
 var $34=($33|0)!=0;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 $pack=1;
 var $36=$tdata;
 _free($36);
 $1=-1;
 label=66;break;
 case 8: 
 var $38=$nins;
 var $39=$38&63;
 $nins=$39;
 var $40=$pack;
 var $41=($40&255);
 var $42=($41|0)==1;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 var $44=$2;
 var $45=_read32b($44);
 $unpacked_ssize=$45;
 label=10;break;
 case 10: 
 var $47=$3;
 var $48=_pw_write_zero($47,20);
 $i=0;
 label=11;break;
 case 11: 
 var $50=$i;
 var $51=$nins;
 var $52=($50|0)<($51|0);
 if($52){label=12;break;}else{label=22;break;}
 case 12: 
 var $54=$3;
 var $55=_pw_write_zero($54,22);
 var $56=$2;
 var $57=_read16b($56);
 var $58=($57&65535);
 var $59=$i;
 var $60=(($isize+($59<<2))|0);
 HEAP32[(($60)>>2)]=$58;
 $j=$58;
 var $61=$j;
 var $62=($61|0)>65280;
 if($62){label=13;break;}else{label=14;break;}
 case 13: 
 var $64=$j;
 var $65=(((65535)-($64))|0);
 var $66=(($smp_size+($65<<2))|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$i;
 var $69=(($smp_size+($68<<2))|0);
 HEAP32[(($69)>>2)]=$67;
 var $70=$j;
 var $71=(((65535)-($70))|0);
 var $72=(($isize+($71<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$i;
 var $75=(($isize+($74<<2))|0);
 HEAP32[(($75)>>2)]=$73;
 var $76=$j;
 var $77=(((65535)-($76))|0);
 var $78=(($saddr+($77<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$i;
 var $81=(($saddr+($80<<2))|0);
 HEAP32[(($81)>>2)]=$79;
 label=17;break;
 case 14: 
 var $83=$i;
 var $84=($83|0)>0;
 if($84){label=15;break;}else{label=16;break;}
 case 15: 
 var $86=$i;
 var $87=((($86)-(1))|0);
 var $88=(($saddr+($87<<2))|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$i;
 var $91=((($90)-(1))|0);
 var $92=(($smp_size+($91<<2))|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=((($89)+($93))|0);
 var $95=$i;
 var $96=(($saddr+($95<<2))|0);
 HEAP32[(($96)>>2)]=$94;
 label=16;break;
 case 16: 
 var $98=$j;
 var $99=($98<<1);
 var $100=$i;
 var $101=(($smp_size+($100<<2))|0);
 HEAP32[(($101)>>2)]=$99;
 var $102=$i;
 var $103=(($smp_size+($102<<2))|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=$ssize;
 var $106=((($105)+($104))|0);
 $ssize=$106;
 label=17;break;
 case 17: 
 var $108=$i;
 var $109=(($smp_size+($108<<2))|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(((($110|0))/(2))&-1);
 $j=$111;
 var $112=$3;
 var $113=$i;
 var $114=(($isize+($113<<2))|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115)&65535);
 _write16b($112,$116);
 var $117=$2;
 var $118=_read8($117);
 $c1=$118;
 var $119=$3;
 var $120=$c1;
 var $121=($120&255);
 var $122=$121&63;
 var $123=(($122)&255);
 _write8($119,$123);
 var $124=$3;
 var $125=$2;
 var $126=_read8($125);
 _write8($124,$126);
 var $127=$2;
 var $128=_read16b($127);
 var $129=($128&65535);
 $val=$129;
 var $130=$val;
 var $131=($130|0)==65535;
 if($131){label=18;break;}else{label=19;break;}
 case 18: 
 var $133=$3;
 _write16b($133,0);
 var $134=$3;
 _write16b($134,1);
 label=20;break;
 case 19: 
 var $136=$3;
 var $137=$val;
 var $138=(($137)&65535);
 _write16b($136,$138);
 var $139=$3;
 var $140=$j;
 var $141=$val;
 var $142=((($140)-($141))|0);
 var $143=(($142)&65535);
 _write16b($139,$143);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $146=$i;
 var $147=((($146)+(1))|0);
 $i=$147;
 label=11;break;
 case 22: 
 var $149=$buf;
 _memset($149, 0, 30)|0;
 var $150=(($buf+29)|0);
 HEAP8[($150)]=1;
 label=23;break;
 case 23: 
 var $152=$i;
 var $153=($152|0)<31;
 if($153){label=24;break;}else{label=26;break;}
 case 24: 
 var $155=(($buf)|0);
 var $156=$3;
 var $157=_fwrite($155,30,1,$156);
 label=25;break;
 case 25: 
 var $159=$i;
 var $160=((($159)+(1))|0);
 $i=$160;
 label=23;break;
 case 26: 
 $i=0;
 label=27;break;
 case 27: 
 var $163=$i;
 var $164=$npat;
 var $165=($163|0)<($164|0);
 if($165){label=28;break;}else{label=34;break;}
 case 28: 
 $j=0;
 label=29;break;
 case 29: 
 var $168=$j;
 var $169=($168|0)<4;
 if($169){label=30;break;}else{label=32;break;}
 case 30: 
 var $171=$2;
 var $172=_read16b($171);
 var $173=($172&65535);
 var $174=$j;
 var $175=$i;
 var $176=(($taddr+($175<<4))|0);
 var $177=(($176+($174<<2))|0);
 HEAP32[(($177)>>2)]=$173;
 label=31;break;
 case 31: 
 var $179=$j;
 var $180=((($179)+(1))|0);
 $j=$180;
 label=29;break;
 case 32: 
 label=33;break;
 case 33: 
 var $183=$i;
 var $184=((($183)+(1))|0);
 $i=$184;
 label=27;break;
 case 34: 
 $pat_pos=0;
 label=35;break;
 case 35: 
 var $187=$pat_pos;
 var $188=($187|0)<128;
 if($188){label=36;break;}else{label=43;break;}
 case 36: 
 var $190=$2;
 var $191=_read8($190);
 $c1=$191;
 var $192=$c1;
 var $193=($192&255);
 var $194=($193|0)==255;
 if($194){label=37;break;}else{label=38;break;}
 case 37: 
 label=43;break;
 case 38: 
 var $197=$4;
 var $198=($197|0)>=96;
 if($198){label=39;break;}else{label=40;break;}
 case 39: 
 var $200=$c1;
 var $201=($200&255);
 var $207=$201;label=41;break;
 case 40: 
 var $203=$c1;
 var $204=($203&255);
 var $205=(((($204|0))/(2))&-1);
 var $207=$205;label=41;break;
 case 41: 
 var $207;
 var $208=(($207)&255);
 var $209=$pat_pos;
 var $210=(($ptable+$209)|0);
 HEAP8[($210)]=$208;
 label=42;break;
 case 42: 
 var $212=$pat_pos;
 var $213=((($212)+(1))|0);
 $pat_pos=$213;
 label=35;break;
 case 43: 
 var $215=$3;
 var $216=$pat_pos;
 var $217=(($216)&255);
 _write8($215,$217);
 var $218=$3;
 _write8($218,127);
 var $219=(($ptable)|0);
 var $220=$3;
 var $221=_fwrite($219,128,1,$220);
 var $222=$3;
 _write32b($222,1294879534);
 var $223=$2;
 var $224=_ftell($223);
 $tdata_addr=$224;
 var $225=$2;
 var $226=$npat;
 var $227=$tdata;
 var $228=$tdata_addr;
 var $229=(($taddr)|0);
 _decode_pattern($225,$226,$227,$228,$229);
 $i=0;
 label=44;break;
 case 44: 
 var $231=$i;
 var $232=$npat;
 var $233=($231|0)<($232|0);
 if($233){label=45;break;}else{label=55;break;}
 case 45: 
 var $235=$buf;
 _memset($235, 0, 1024)|0;
 $j=0;
 label=46;break;
 case 46: 
 var $237=$j;
 var $238=($237|0)<64;
 if($238){label=47;break;}else{label=53;break;}
 case 47: 
 $k=0;
 label=48;break;
 case 48: 
 var $241=$k;
 var $242=($241|0)<4;
 if($242){label=49;break;}else{label=51;break;}
 case 49: 
 var $244=$j;
 var $245=($244<<4);
 var $246=$k;
 var $247=($246<<2);
 var $248=((($245)+($247))|0);
 var $249=(($buf+$248)|0);
 var $250=$i;
 var $251=($250<<2);
 var $252=$k;
 var $253=((($251)+($252))|0);
 var $254=($253<<9);
 var $255=$j;
 var $256=($255<<2);
 var $257=((($254)+($256))|0);
 var $258=$tdata;
 var $259=(($258+$257)|0);
 assert(4 % 1 === 0);HEAP8[($249)]=HEAP8[($259)];HEAP8[((($249)+(1))|0)]=HEAP8[((($259)+(1))|0)];HEAP8[((($249)+(2))|0)]=HEAP8[((($259)+(2))|0)];HEAP8[((($249)+(3))|0)]=HEAP8[((($259)+(3))|0)];
 label=50;break;
 case 50: 
 var $261=$k;
 var $262=((($261)+(1))|0);
 $k=$262;
 label=48;break;
 case 51: 
 label=52;break;
 case 52: 
 var $265=$j;
 var $266=((($265)+(1))|0);
 $j=$266;
 label=46;break;
 case 53: 
 var $268=(($buf)|0);
 var $269=$3;
 var $270=_fwrite($268,1024,1,$269);
 label=54;break;
 case 54: 
 var $272=$i;
 var $273=((($272)+(1))|0);
 $i=$273;
 label=44;break;
 case 55: 
 var $275=$tdata;
 _free($275);
 $i=0;
 label=56;break;
 case 56: 
 var $277=$i;
 var $278=$nins;
 var $279=($277|0)<($278|0);
 if($279){label=57;break;}else{label=65;break;}
 case 57: 
 var $281=$2;
 var $282=$sdata_addr;
 var $283=$i;
 var $284=(($saddr+($283<<2))|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=((($282)+($285))|0);
 var $287=_fseek($281,$286,0);
 var $288=$i;
 var $289=(($smp_size+($288<<2))|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=_malloc($290);
 $smp_buffer=$291;
 var $292=$smp_buffer;
 var $293=$i;
 var $294=(($smp_size+($293<<2))|0);
 var $295=HEAP32[(($294)>>2)];
 _memset($292, 0, $295)|0;
 var $296=$smp_buffer;
 var $297=$i;
 var $298=(($smp_size+($297<<2))|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=$2;
 var $301=_fread($296,$299,1,$300);
 var $302=$delta;
 var $303=($302&255);
 var $304=($303|0)==1;
 if($304){label=58;break;}else{label=63;break;}
 case 58: 
 $j=1;
 label=59;break;
 case 59: 
 var $307=$j;
 var $308=$i;
 var $309=(($smp_size+($308<<2))|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=($307|0)<($310|0);
 if($311){label=60;break;}else{label=62;break;}
 case 60: 
 var $313=$j;
 var $314=$smp_buffer;
 var $315=(($314+$313)|0);
 var $316=HEAP8[($315)];
 var $317=(($316<<24)>>24);
 var $318=(((256)-($317))|0);
 var $319=$j;
 var $320=((($319)-(1))|0);
 var $321=$smp_buffer;
 var $322=(($321+$320)|0);
 var $323=HEAP8[($322)];
 var $324=(($323<<24)>>24);
 var $325=((($318)+($324))|0);
 var $326=(($325)&255);
 $c3=$326;
 var $327=$c3;
 var $328=$j;
 var $329=$smp_buffer;
 var $330=(($329+$328)|0);
 HEAP8[($330)]=$327;
 label=61;break;
 case 61: 
 var $332=$j;
 var $333=((($332)+(1))|0);
 $j=$333;
 label=59;break;
 case 62: 
 label=63;break;
 case 63: 
 var $336=$smp_buffer;
 var $337=$i;
 var $338=(($smp_size+($337<<2))|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=$3;
 var $341=_fwrite($336,$339,1,$340);
 var $342=$smp_buffer;
 _free($342);
 label=64;break;
 case 64: 
 var $344=$i;
 var $345=((($344)+(1))|0);
 $i=$345;
 label=56;break;
 case 65: 
 $1=0;
 label=66;break;
 case 66: 
 var $348=$1;
 STACKTOP=sp;return $348;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_pattern($in,$npat,$tdata,$tdata_addr,$taddr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $j;
 var $k;
 var $l;
 var $max_row;
 var $effect;
 var $pos;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $x;
 var $lines;
 $1=$in;
 $2=$npat;
 $3=$tdata;
 $4=$tdata_addr;
 $5=$taddr;
 $i=0;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=$2;
 var $9=($7|0)<($8|0);
 if($9){label=3;break;}else{label=55;break;}
 case 3: 
 $max_row=63;
 $j=0;
 label=4;break;
 case 4: 
 var $12=$j;
 var $13=($12|0)<4;
 if($13){label=5;break;}else{label=53;break;}
 case 5: 
 var $15=$1;
 var $16=$j;
 var $17=$i;
 var $18=$5;
 var $19=(($18+($17<<4))|0);
 var $20=(($19+($16<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$4;
 var $23=((($21)+($22))|0);
 var $24=_fseek($15,$23,0);
 $k=0;
 label=6;break;
 case 6: 
 var $26=$k;
 var $27=$max_row;
 var $28=($26|0)<=($27|0);
 if($28){label=7;break;}else{label=51;break;}
 case 7: 
 var $30=$i;
 var $31=($30<<2);
 var $32=$j;
 var $33=((($31)+($32))|0);
 var $34=($33<<9);
 var $35=$k;
 var $36=($35<<2);
 var $37=((($34)+($36))|0);
 var $38=$3;
 var $39=(($38+$37)|0);
 $x=$39;
 var $40=$1;
 var $41=_read8($40);
 $c1=$41;
 var $42=$1;
 var $43=_read8($42);
 $c2=$43;
 var $44=$1;
 var $45=_read8($44);
 $c3=$45;
 var $46=$c1;
 var $47=($46&255);
 var $48=$47&128;
 var $49=($48|0)!=0;
 if($49){label=8;break;}else{label=22;break;}
 case 8: 
 var $51=$c1;
 var $52=($51&255);
 var $53=($52|0)!=128;
 if($53){label=9;break;}else{label=22;break;}
 case 9: 
 var $55=$1;
 var $56=_read8($55);
 $c4=$56;
 var $57=$c1;
 var $58=($57&255);
 var $59=(((255)-($58))|0);
 var $60=(($59)&255);
 $c1=$60;
 var $61=$x;
 var $62=$c1;
 var $63=$c2;
 var $64=$c3;
 var $65=_set_event($61,$62,$63,$64);
 var $66=($65&255);
 $effect=$66;
 var $67=$effect;
 var $68=($67|0)==13;
 if($68){label=10;break;}else{label=11;break;}
 case 10: 
 var $70=$k;
 $max_row=$70;
 label=51;break;
 case 11: 
 var $72=$effect;
 var $73=($72|0)==11;
 if($73){label=12;break;}else{label=13;break;}
 case 12: 
 var $75=$k;
 $max_row=$75;
 label=51;break;
 case 13: 
 var $77=$c4;
 var $78=($77&255);
 var $79=($78|0)<128;
 if($79){label=14;break;}else{label=15;break;}
 case 14: 
 var $81=$c4;
 var $82=($81&255);
 var $83=$k;
 var $84=((($83)+($82))|0);
 $k=$84;
 label=50;break;
 case 15: 
 var $86=$c4;
 var $87=($86&255);
 var $88=(((256)-($87))|0);
 var $89=(($88)&255);
 $c4=$89;
 $l=0;
 label=16;break;
 case 16: 
 var $91=$l;
 var $92=$c4;
 var $93=($92&255);
 var $94=($91|0)<($93|0);
 if($94){label=17;break;}else{label=21;break;}
 case 17: 
 var $96=$k;
 var $97=((($96)+(1))|0);
 $k=$97;
 var $98=($97|0)>=64;
 if($98){label=18;break;}else{label=19;break;}
 case 18: 
 label=21;break;
 case 19: 
 var $101=$i;
 var $102=($101<<2);
 var $103=$j;
 var $104=((($102)+($103))|0);
 var $105=($104<<9);
 var $106=$k;
 var $107=($106<<2);
 var $108=((($105)+($107))|0);
 var $109=$3;
 var $110=(($109+$108)|0);
 $x=$110;
 var $111=$x;
 var $112=$c1;
 var $113=$c2;
 var $114=$c3;
 var $115=_set_event($111,$112,$113,$114);
 label=20;break;
 case 20: 
 var $117=$l;
 var $118=((($117)+(1))|0);
 $l=$118;
 label=16;break;
 case 21: 
 label=50;break;
 case 22: 
 var $121=$c1;
 var $122=($121&255);
 var $123=($122|0)==128;
 if($123){label=23;break;}else{label=45;break;}
 case 23: 
 var $125=$1;
 var $126=_read8($125);
 $c4=$126;
 var $127=$1;
 var $128=_ftell($127);
 $pos=$128;
 var $129=$c2;
 var $130=($129&255);
 $lines=$130;
 var $131=$1;
 var $132=$c3;
 var $133=($132&255);
 var $134=$133<<8;
 var $135=$c4;
 var $136=($135&255);
 var $137=((($134)+($136))|0);
 var $138=(((-$137))|0);
 var $139=_fseek($131,$138,1);
 $l=0;
 label=24;break;
 case 24: 
 var $141=$l;
 var $142=$lines;
 var $143=($141|0)<=($142|0);
 if($143){label=25;break;}else{label=44;break;}
 case 25: 
 var $145=$i;
 var $146=($145<<2);
 var $147=$j;
 var $148=((($146)+($147))|0);
 var $149=($148<<9);
 var $150=$k;
 var $151=($150<<2);
 var $152=((($149)+($151))|0);
 var $153=$3;
 var $154=(($153+$152)|0);
 $x=$154;
 var $155=$1;
 var $156=_read8($155);
 $c1=$156;
 var $157=$1;
 var $158=_read8($157);
 $c2=$158;
 var $159=$1;
 var $160=_read8($159);
 $c3=$160;
 var $161=$c1;
 var $162=($161&255);
 var $163=$162&128;
 var $164=($163|0)!=0;
 if($164){label=26;break;}else{label=42;break;}
 case 26: 
 var $166=$c1;
 var $167=($166&255);
 var $168=($167|0)!=128;
 if($168){label=27;break;}else{label=42;break;}
 case 27: 
 var $170=$1;
 var $171=_read8($170);
 $c4=$171;
 var $172=$c1;
 var $173=($172&255);
 var $174=(((255)-($173))|0);
 var $175=(($174)&255);
 $c1=$175;
 var $176=$k;
 var $177=($176|0)>=64;
 if($177){label=28;break;}else{label=29;break;}
 case 28: 
 label=43;break;
 case 29: 
 var $180=$x;
 var $181=$c1;
 var $182=$c2;
 var $183=$c3;
 var $184=_set_event($180,$181,$182,$183);
 var $185=($184&255);
 $effect=$185;
 var $186=$effect;
 var $187=($186|0)==13;
 if($187){label=30;break;}else{label=31;break;}
 case 30: 
 var $189=$k;
 $max_row=$189;
 $l=9999;
 $k=9999;
 label=43;break;
 case 31: 
 var $191=$effect;
 var $192=($191|0)==11;
 if($192){label=32;break;}else{label=33;break;}
 case 32: 
 var $194=$k;
 $max_row=$194;
 $l=9999;
 $k=9999;
 label=43;break;
 case 33: 
 var $196=$c4;
 var $197=($196&255);
 var $198=($197|0)<128;
 if($198){label=34;break;}else{label=35;break;}
 case 34: 
 var $200=$c4;
 var $201=($200&255);
 var $202=$k;
 var $203=((($202)+($201))|0);
 $k=$203;
 label=43;break;
 case 35: 
 var $205=$c4;
 var $206=($205&255);
 var $207=(((256)-($206))|0);
 var $208=(($207)&255);
 $c4=$208;
 $l=0;
 label=36;break;
 case 36: 
 var $210=$l;
 var $211=$c4;
 var $212=($211&255);
 var $213=($210|0)<($212|0);
 if($213){label=37;break;}else{label=41;break;}
 case 37: 
 var $215=$k;
 var $216=((($215)+(1))|0);
 $k=$216;
 var $217=($216|0)>=64;
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 label=41;break;
 case 39: 
 var $220=$i;
 var $221=($220<<2);
 var $222=$j;
 var $223=((($221)+($222))|0);
 var $224=($223<<9);
 var $225=$k;
 var $226=($225<<2);
 var $227=((($224)+($226))|0);
 var $228=$3;
 var $229=(($228+$227)|0);
 $x=$229;
 var $230=$x;
 var $231=$c1;
 var $232=$c2;
 var $233=$c3;
 var $234=_set_event($230,$231,$232,$233);
 label=40;break;
 case 40: 
 var $236=$l;
 var $237=((($236)+(1))|0);
 $l=$237;
 label=36;break;
 case 41: 
 label=42;break;
 case 42: 
 var $240=$i;
 var $241=($240<<2);
 var $242=$j;
 var $243=((($241)+($242))|0);
 var $244=($243<<9);
 var $245=$k;
 var $246=($245<<2);
 var $247=((($244)+($246))|0);
 var $248=$3;
 var $249=(($248+$247)|0);
 $x=$249;
 var $250=$x;
 var $251=$c1;
 var $252=$c2;
 var $253=$c3;
 var $254=_set_event($250,$251,$252,$253);
 label=43;break;
 case 43: 
 var $256=$l;
 var $257=((($256)+(1))|0);
 $l=$257;
 var $258=$k;
 var $259=((($258)+(1))|0);
 $k=$259;
 label=24;break;
 case 44: 
 var $261=$1;
 var $262=$pos;
 var $263=_fseek($261,$262,0);
 var $264=$k;
 var $265=((($264)-(1))|0);
 $k=$265;
 label=50;break;
 case 45: 
 var $267=$i;
 var $268=($267<<2);
 var $269=$j;
 var $270=((($268)+($269))|0);
 var $271=($270<<9);
 var $272=$k;
 var $273=($272<<2);
 var $274=((($271)+($273))|0);
 var $275=$3;
 var $276=(($275+$274)|0);
 $x=$276;
 var $277=$x;
 var $278=$c1;
 var $279=$c2;
 var $280=$c3;
 var $281=_set_event($277,$278,$279,$280);
 var $282=($281&255);
 $effect=$282;
 var $283=$effect;
 var $284=($283|0)==13;
 if($284){label=46;break;}else{label=47;break;}
 case 46: 
 var $286=$k;
 $max_row=$286;
 label=51;break;
 case 47: 
 var $288=$effect;
 var $289=($288|0)==11;
 if($289){label=48;break;}else{label=49;break;}
 case 48: 
 var $291=$k;
 $max_row=$291;
 label=51;break;
 case 49: 
 label=50;break;
 case 50: 
 var $294=$k;
 var $295=((($294)+(1))|0);
 $k=$295;
 label=6;break;
 case 51: 
 label=52;break;
 case 52: 
 var $298=$j;
 var $299=((($298)+(1))|0);
 $j=$299;
 label=4;break;
 case 53: 
 label=54;break;
 case 54: 
 var $302=$i;
 var $303=((($302)+(1))|0);
 $i=$303;
 label=2;break;
 case 55: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_event($x,$c1,$c2,$c3){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $b;
 $1=$x;
 $2=$c1;
 $3=$c2;
 $4=$c3;
 var $5=$2;
 var $6=($5&255);
 var $7=$6<<4;
 var $8=$7&16;
 var $9=$2;
 var $10=($9&255);
 var $11=(((($10|0))/(2))&-1);
 var $12=((4504+($11<<1))|0);
 var $13=(($12)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$8|$15;
 var $17=(($16)&255);
 var $18=$1;
 var $19=(($18+1)|0);
 $1=$19;
 HEAP8[($18)]=$17;
 var $20=$2;
 var $21=($20&255);
 var $22=(((($21|0))/(2))&-1);
 var $23=((4504+($22<<1))|0);
 var $24=(($23+1)|0);
 var $25=HEAP8[($24)];
 var $26=$1;
 var $27=(($26+1)|0);
 $1=$27;
 HEAP8[($26)]=$25;
 var $28=$3;
 var $29=($28&255);
 var $30=$29&15;
 var $31=(($30)&255);
 $b=$31;
 var $32=$b;
 var $33=($32&255);
 var $34=($33|0)==8;
 if($34){label=2;break;}else{label=3;break;}
 case 2: 
 var $36=$3;
 var $37=($36&255);
 var $38=((($37)-(8))|0);
 var $39=(($38)&255);
 $3=$39;
 label=3;break;
 case 3: 
 var $41=$3;
 var $42=$1;
 var $43=(($42+1)|0);
 $1=$43;
 HEAP8[($42)]=$41;
 var $44=$b;
 var $45=($44&255);
 var $46=($45|0)==5;
 if($46){label=6;break;}else{label=4;break;}
 case 4: 
 var $48=$b;
 var $49=($48&255);
 var $50=($49|0)==6;
 if($50){label=6;break;}else{label=5;break;}
 case 5: 
 var $52=$b;
 var $53=($52&255);
 var $54=($53|0)==10;
 if($54){label=6;break;}else{label=10;break;}
 case 6: 
 var $56=$4;
 var $57=($56&255);
 var $58=($57|0)>127;
 if($58){label=7;break;}else{label=8;break;}
 case 7: 
 var $60=$4;
 var $61=($60&255);
 var $62=(((256)-($61))|0);
 var $63=$62<<4;
 var $68=$63;label=9;break;
 case 8: 
 var $65=$4;
 var $66=($65&255);
 var $68=$66;label=9;break;
 case 9: 
 var $68;
 var $69=(($68)&255);
 $4=$69;
 label=10;break;
 case 10: 
 var $71=$4;
 var $72=$1;
 var $73=(($72+1)|0);
 $1=$73;
 HEAP8[($72)]=$71;
 var $74=$b;
 STACKTOP=sp;return $74;
  default: assert(0, "bad label: " + label);
 }
}
function _theplayer_test($data,$t,$s,$version){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $5=$version;
 $start=0;
 var $6=$start;
 var $7=((($6)+(2))|0);
 var $8=$2;
 var $9=(($8+$7)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 $m=$11;
 var $12=$m;
 var $13=($12|0)>127;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $15=$m;
 var $16=($15|0)==0;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=84;break;
 case 4: 
 var $19=$start;
 var $20=((($19)+(3))|0);
 var $21=$2;
 var $22=(($21+$20)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=$24&63;
 $k=$25;
 var $26=$k;
 var $27=($26|0)>31;
 if($27){label=6;break;}else{label=5;break;}
 case 5: 
 var $29=$k;
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=84;break;
 case 7: 
 $l=0;
 label=8;break;
 case 8: 
 var $34=$l;
 var $35=$k;
 var $36=($34|0)<($35|0);
 if($36){label=9;break;}else{label=15;break;}
 case 9: 
 var $38=$start;
 var $39=((($38)+(7))|0);
 var $40=$l;
 var $41=((($40)*(6))&-1);
 var $42=((($39)+($41))|0);
 var $43=$2;
 var $44=(($43+$42)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=($46|0)>64;
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=84;break;
 case 11: 
 var $50=$start;
 var $51=((($50)+(6))|0);
 var $52=$l;
 var $53=((($52)*(6))&-1);
 var $54=((($51)+($53))|0);
 var $55=$2;
 var $56=(($55+$54)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=($58|0)>15;
 if($59){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=84;break;
 case 13: 
 label=14;break;
 case 14: 
 var $63=$l;
 var $64=((($63)+(1))|0);
 $l=$64;
 label=8;break;
 case 15: 
 $ssize=0;
 $n=0;
 label=16;break;
 case 16: 
 var $67=$n;
 var $68=$k;
 var $69=($67|0)<($68|0);
 if($69){label=17;break;}else{label=32;break;}
 case 17: 
 var $71=$2;
 var $72=$start;
 var $73=(($71+$72)|0);
 var $74=$n;
 var $75=((($74)*(6))&-1);
 var $76=(($73+$75)|0);
 var $77=(($76+4)|0);
 var $78=_readmem16b($77);
 var $79=($78&65535);
 $o=$79;
 var $80=$o;
 var $81=($80|0)<65503;
 if($81){label=18;break;}else{label=19;break;}
 case 18: 
 var $83=$o;
 var $84=($83|0)>32768;
 if($84){label=20;break;}else{label=19;break;}
 case 19: 
 var $86=$o;
 var $87=($86|0)==0;
 if($87){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=84;break;
 case 21: 
 var $90=$o;
 var $91=($90|0)<65280;
 if($91){label=22;break;}else{label=23;break;}
 case 22: 
 var $93=$o;
 var $94=($93<<1);
 var $95=$ssize;
 var $96=((($95)+($94))|0);
 $ssize=$96;
 label=23;break;
 case 23: 
 var $98=$2;
 var $99=$start;
 var $100=(($98+$99)|0);
 var $101=(($100+8)|0);
 var $102=$n;
 var $103=((($102)*(6))&-1);
 var $104=(($101+$103)|0);
 var $105=_readmem16b($104);
 var $106=($105&65535);
 $j=$106;
 var $107=$j;
 var $108=($107|0)!=65535;
 if($108){label=24;break;}else{label=26;break;}
 case 24: 
 var $110=$j;
 var $111=$o;
 var $112=($110|0)>=($111|0);
 if($112){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=84;break;
 case 26: 
 var $115=$o;
 var $116=($115|0)>65503;
 if($116){label=27;break;}else{label=30;break;}
 case 27: 
 var $118=$o;
 var $119=(((65535)-($118))|0);
 var $120=$k;
 var $121=($119|0)>($120|0);
 if($121){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=84;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $126=$n;
 var $127=((($126)+(1))|0);
 $n=$127;
 label=16;break;
 case 32: 
 var $129=$2;
 var $130=$start;
 var $131=(($129+$130)|0);
 var $132=_readmem16b($131);
 var $133=($132&65535);
 $j=$133;
 var $134=$j;
 var $135=$k;
 var $136=((($135)*(6))&-1);
 var $137=((($136)+(4))|0);
 var $138=$m;
 var $139=($138<<3);
 var $140=((($137)+($139))|0);
 var $141=($134|0)<($140|0);
 if($141){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=84;break;
 case 34: 
 $l=0;
 label=35;break;
 case 35: 
 var $145=$l;
 var $146=$m;
 var $147=($146<<2);
 var $148=($145|0)<($147|0);
 if($148){label=36;break;}else{label=40;break;}
 case 36: 
 var $150=$2;
 var $151=$start;
 var $152=(($150+$151)|0);
 var $153=(($152+4)|0);
 var $154=$k;
 var $155=((($154)*(6))&-1);
 var $156=(($153+$155)|0);
 var $157=$l;
 var $158=($157<<1);
 var $159=(($156+$158)|0);
 var $160=_readmem16b($159);
 var $161=($160&65535);
 $o=$161;
 var $162=$o;
 var $163=$k;
 var $164=((($163)*(6))&-1);
 var $165=((($162)+($164))|0);
 var $166=((($165)+(4))|0);
 var $167=$m;
 var $168=($167<<3);
 var $169=((($166)+($168))|0);
 var $170=$j;
 var $171=($169|0)>($170|0);
 if($171){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=84;break;
 case 38: 
 label=39;break;
 case 39: 
 var $175=$l;
 var $176=((($175)+(1))|0);
 $l=$176;
 label=35;break;
 case 40: 
 $l=0;
 $o=0;
 label=41;break;
 case 41: 
 var $179=$4;
 var $180=$start;
 var $181=$k;
 var $182=((($181)*(6))&-1);
 var $183=((($180)+($182))|0);
 var $184=((($183)+(4))|0);
 var $185=$m;
 var $186=($185<<3);
 var $187=((($184)+($186))|0);
 var $188=($179|0)<($187|0);
 if($188){label=42;break;}else{label=43;break;}
 case 42: 
 var $190=$start;
 var $191=$k;
 var $192=((($191)*(6))&-1);
 var $193=((($190)+($192))|0);
 var $194=((($193)+(4))|0);
 var $195=$m;
 var $196=($195<<3);
 var $197=((($194)+($196))|0);
 var $198=$4;
 var $199=((($197)-($198))|0);
 $1=$199;
 label=84;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $203=$start;
 var $204=$k;
 var $205=((($204)*(6))&-1);
 var $206=((($203)+($205))|0);
 var $207=((($206)+(4))|0);
 var $208=$m;
 var $209=($208<<3);
 var $210=((($207)+($209))|0);
 var $211=$l;
 var $212=((($210)+($211))|0);
 var $213=$2;
 var $214=(($213+$212)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=($216|0)!=255;
 if($217){label=46;break;}else{var $222=0;label=47;break;}
 case 46: 
 var $219=$l;
 var $220=($219|0)<128;
 var $222=$220;label=47;break;
 case 47: 
 var $222;
 if($222){label=48;break;}else{label=60;break;}
 case 48: 
 var $224=$5;
 var $225=($224|0)>=96;
 if($225){label=49;break;}else{label=52;break;}
 case 49: 
 var $227=$start;
 var $228=$k;
 var $229=((($228)*(6))&-1);
 var $230=((($227)+($229))|0);
 var $231=((($230)+(4))|0);
 var $232=$m;
 var $233=($232<<3);
 var $234=((($231)+($233))|0);
 var $235=$l;
 var $236=((($234)+($235))|0);
 var $237=$2;
 var $238=(($237+$236)|0);
 var $239=HEAP8[($238)];
 var $240=($239&255);
 var $241=$m;
 var $242=((($241)-(1))|0);
 var $243=($240|0)>($242|0);
 if($243){label=50;break;}else{label=51;break;}
 case 50: 
 $1=-1;
 label=84;break;
 case 51: 
 label=57;break;
 case 52: 
 var $247=$start;
 var $248=$k;
 var $249=((($248)*(6))&-1);
 var $250=((($247)+($249))|0);
 var $251=((($250)+(4))|0);
 var $252=$m;
 var $253=($252<<3);
 var $254=((($251)+($253))|0);
 var $255=$l;
 var $256=((($254)+($255))|0);
 var $257=$2;
 var $258=(($257+$256)|0);
 var $259=HEAP8[($258)];
 var $260=($259&255);
 var $261=$260&1;
 var $262=($261|0)!=0;
 if($262){label=53;break;}else{label=54;break;}
 case 53: 
 $1=-1;
 label=84;break;
 case 54: 
 var $265=$start;
 var $266=$k;
 var $267=((($266)*(6))&-1);
 var $268=((($265)+($267))|0);
 var $269=((($268)+(4))|0);
 var $270=$m;
 var $271=($270<<3);
 var $272=((($269)+($271))|0);
 var $273=$l;
 var $274=((($272)+($273))|0);
 var $275=$2;
 var $276=(($275+$274)|0);
 var $277=HEAP8[($276)];
 var $278=($277&255);
 var $279=$m;
 var $280=($279<<1);
 var $281=($278|0)>($280|0);
 if($281){label=55;break;}else{label=56;break;}
 case 55: 
 $1=-1;
 label=84;break;
 case 56: 
 label=57;break;
 case 57: 
 var $285=$start;
 var $286=$k;
 var $287=((($286)*(6))&-1);
 var $288=((($285)+($287))|0);
 var $289=((($288)+(4))|0);
 var $290=$m;
 var $291=($290<<3);
 var $292=((($289)+($291))|0);
 var $293=$l;
 var $294=((($292)+($293))|0);
 var $295=$2;
 var $296=(($295+$294)|0);
 var $297=HEAP8[($296)];
 var $298=($297&255);
 var $299=$o;
 var $300=($298|0)>($299|0);
 if($300){label=58;break;}else{label=59;break;}
 case 58: 
 var $302=$start;
 var $303=$k;
 var $304=((($303)*(6))&-1);
 var $305=((($302)+($304))|0);
 var $306=((($305)+(4))|0);
 var $307=$m;
 var $308=($307<<3);
 var $309=((($306)+($308))|0);
 var $310=$l;
 var $311=((($309)+($310))|0);
 var $312=$2;
 var $313=(($312+$311)|0);
 var $314=HEAP8[($313)];
 var $315=($314&255);
 $o=$315;
 label=59;break;
 case 59: 
 var $317=$l;
 var $318=((($317)+(1))|0);
 $l=$318;
 label=45;break;
 case 60: 
 var $320=$k;
 var $321=((($320)*(6))&-1);
 var $322=((($321)+(4))|0);
 var $323=$m;
 var $324=($323<<3);
 var $325=((($322)+($324))|0);
 var $326=$l;
 var $327=((($325)+($326))|0);
 var $328=$j;
 var $329=($327|0)>($328|0);
 if($329){label=61;break;}else{label=62;break;}
 case 61: 
 $1=-1;
 label=84;break;
 case 62: 
 var $332=$l;
 var $333=($332|0)==0;
 if($333){label=64;break;}else{label=63;break;}
 case 63: 
 var $335=$l;
 var $336=($335|0)==128;
 if($336){label=64;break;}else{label=65;break;}
 case 64: 
 $1=-1;
 label=84;break;
 case 65: 
 var $339=$5;
 var $340=($339|0)>=96;
 if($340){label=66;break;}else{label=67;break;}
 case 66: 
 var $342=$o;
 var $343=((($342)+(1))|0);
 $o=$343;
 label=68;break;
 case 67: 
 var $345=$o;
 var $346=(((($345|0))/(2))&-1);
 var $347=((($346)+(1))|0);
 $o=$347;
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 var $350=$4;
 var $351=$start;
 var $352=$j;
 var $353=((($351)+($352))|0);
 var $354=((($353)+(1))|0);
 var $355=($350|0)<($354|0);
 if($355){label=70;break;}else{label=71;break;}
 case 70: 
 var $357=$start;
 var $358=$j;
 var $359=((($357)+($358))|0);
 var $360=((($359)+(1))|0);
 var $361=$4;
 var $362=((($360)-($361))|0);
 $1=$362;
 label=84;break;
 case 71: 
 label=72;break;
 case 72: 
 var $365=$l;
 var $366=((($365)+(1))|0);
 $l=$366;
 var $367=$k;
 var $368=((($367)*(6))&-1);
 var $369=((($368)+(4))|0);
 var $370=$m;
 var $371=($370<<3);
 var $372=((($369)+($371))|0);
 var $373=$l;
 var $374=((($372)+($373))|0);
 $n=$374;
 label=73;break;
 case 73: 
 var $376=$n;
 var $377=$j;
 var $378=($376|0)<($377|0);
 if($378){label=74;break;}else{label=83;break;}
 case 74: 
 var $380=$start;
 var $381=$n;
 var $382=((($380)+($381))|0);
 var $383=$2;
 var $384=(($383+$382)|0);
 var $385=HEAP8[($384)];
 var $386=($385&255);
 var $387=$386^-1;
 var $388=$387&128;
 var $389=($388|0)!=0;
 if($389){label=75;break;}else{label=80;break;}
 case 75: 
 var $391=$start;
 var $392=$n;
 var $393=((($391)+($392))|0);
 var $394=$2;
 var $395=(($394+$393)|0);
 var $396=HEAP8[($395)];
 var $397=($396&255);
 var $398=($397|0)>73;
 if($398){label=76;break;}else{label=77;break;}
 case 76: 
 $1=-1;
 label=84;break;
 case 77: 
 var $401=$start;
 var $402=$n;
 var $403=((($401)+($402))|0);
 var $404=$2;
 var $405=(($404+$403)|0);
 var $406=HEAP8[($405)];
 var $407=($406&255);
 var $408=$407<<4;
 var $409=$408&16;
 var $410=$start;
 var $411=$n;
 var $412=((($410)+($411))|0);
 var $413=((($412)+(1))|0);
 var $414=$2;
 var $415=(($414+$413)|0);
 var $416=HEAP8[($415)];
 var $417=($416&255);
 var $418=$417>>4;
 var $419=$418&15;
 var $420=$409|$419;
 var $421=$k;
 var $422=($420|0)>($421|0);
 if($422){label=78;break;}else{label=79;break;}
 case 78: 
 $1=-1;
 label=84;break;
 case 79: 
 var $425=$n;
 var $426=((($425)+(2))|0);
 $n=$426;
 label=81;break;
 case 80: 
 var $428=$n;
 var $429=((($428)+(3))|0);
 $n=$429;
 label=81;break;
 case 81: 
 label=82;break;
 case 82: 
 var $432=$n;
 var $433=((($432)+(1))|0);
 $n=$433;
 label=73;break;
 case 83: 
 var $435=$3;
 _pw_read_title(0,$435,0);
 $1=0;
 label=84;break;
 case 84: 
 var $437=$1;
 STACKTOP=sp;return $437;
  default: assert(0, "bad label: " + label);
 }
}
function _test_titanics($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<182;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((182)-($9))|0);
 $1=$10;
 label=41;break;
 case 4: 
 label=5;break;
 case 5: 
 $ssize=0;
 $n=0;
 $k=0;
 label=6;break;
 case 6: 
 var $14=$k;
 var $15=($14|0)<15;
 if($15){label=7;break;}else{label=26;break;}
 case 7: 
 var $17=$start;
 var $18=((($17)+(7))|0);
 var $19=$k;
 var $20=((($19)*(12))&-1);
 var $21=((($18)+($20))|0);
 var $22=$2;
 var $23=(($22+$21)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=($25|0)>64;
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=41;break;
 case 9: 
 var $29=$start;
 var $30=((($29)+(6))|0);
 var $31=$k;
 var $32=((($31)*(12))&-1);
 var $33=((($30)+($32))|0);
 var $34=$2;
 var $35=(($34+$33)|0);
 var $36=HEAP8[($35)];
 var $37=($36&255);
 var $38=($37|0)!=0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=41;break;
 case 11: 
 var $41=$2;
 var $42=$start;
 var $43=(($41+$42)|0);
 var $44=$k;
 var $45=((($44)*(12))&-1);
 var $46=(($43+$45)|0);
 var $47=_readmem32b($46);
 $o=$47;
 var $48=$o;
 var $49=($48|0)<180;
 if($49){label=12;break;}else{label=14;break;}
 case 12: 
 var $51=$o;
 var $52=($51|0)!=0;
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=41;break;
 case 14: 
 var $55=$2;
 var $56=$start;
 var $57=(($55+$56)|0);
 var $58=$k;
 var $59=((($58)*(12))&-1);
 var $60=(($57+$59)|0);
 var $61=(($60+4)|0);
 var $62=_readmem16b($61);
 var $63=($62&65535);
 $j=$63;
 var $64=$2;
 var $65=$start;
 var $66=(($64+$65)|0);
 var $67=$k;
 var $68=((($67)*(12))&-1);
 var $69=(($66+$68)|0);
 var $70=(($69+8)|0);
 var $71=_readmem16b($70);
 var $72=($71&65535);
 $l=$72;
 var $73=$2;
 var $74=$start;
 var $75=(($73+$74)|0);
 var $76=$k;
 var $77=((($76)*(12))&-1);
 var $78=(($75+$77)|0);
 var $79=(($78+10)|0);
 var $80=_readmem16b($79);
 var $81=($80&65535);
 $m=$81;
 var $82=$l;
 var $83=$j;
 var $84=($82|0)>($83|0);
 if($84){label=17;break;}else{label=15;break;}
 case 15: 
 var $86=$m;
 var $87=$j;
 var $88=((($87)+(1))|0);
 var $89=($86|0)>($88|0);
 if($89){label=17;break;}else{label=16;break;}
 case 16: 
 var $91=$j;
 var $92=($91|0)>32768;
 if($92){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=41;break;
 case 18: 
 var $95=$m;
 var $96=($95|0)==0;
 if($96){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=41;break;
 case 20: 
 var $99=$j;
 var $100=($99|0)==0;
 if($100){label=21;break;}else{label=24;break;}
 case 21: 
 var $102=$l;
 var $103=($102|0)!=0;
 if($103){label=23;break;}else{label=22;break;}
 case 22: 
 var $105=$m;
 var $106=($105|0)!=1;
 if($106){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=41;break;
 case 24: 
 var $109=$j;
 var $110=$ssize;
 var $111=((($110)+($109))|0);
 $ssize=$111;
 label=25;break;
 case 25: 
 var $113=$k;
 var $114=((($113)+(1))|0);
 $k=$114;
 label=6;break;
 case 26: 
 var $116=$ssize;
 var $117=($116|0)<2;
 if($117){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-1;
 label=41;break;
 case 28: 
 $o=-1;
 $k=0;
 $l=0;
 label=29;break;
 case 29: 
 var $121=$k;
 var $122=($121|0)<256;
 if($122){label=30;break;}else{label=38;break;}
 case 30: 
 var $124=$2;
 var $125=$start;
 var $126=(($124+$125)|0);
 var $127=$k;
 var $128=(($126+$127)|0);
 var $129=(($128+180)|0);
 var $130=_readmem16b($129);
 var $131=($130&65535);
 var $132=($131|0)==65535;
 if($132){label=31;break;}else{label=32;break;}
 case 31: 
 $o=0;
 label=38;break;
 case 32: 
 var $135=$2;
 var $136=$start;
 var $137=(($135+$136)|0);
 var $138=$k;
 var $139=(($137+$138)|0);
 var $140=(($139+180)|0);
 var $141=_readmem16b($140);
 var $142=($141&65535);
 $j=$142;
 var $143=$j;
 var $144=($143|0)<180;
 if($144){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=41;break;
 case 34: 
 var $147=$j;
 var $148=$l;
 var $149=($147|0)>($148|0);
 if($149){label=35;break;}else{label=36;break;}
 case 35: 
 var $151=$j;
 $l=$151;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $154=$k;
 var $155=((($154)+(2))|0);
 $k=$155;
 label=29;break;
 case 38: 
 var $157=$o;
 var $158=($157|0)==-1;
 if($158){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=41;break;
 case 40: 
 var $161=$3;
 _pw_read_title(0,$161,0);
 $1=0;
 label=41;break;
 case 41: 
 var $163=$1;
 STACKTOP=sp;return $163;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_titanics($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2656)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $buf=sp;
 var $pat_addr=(sp)+(1024);
 var $pat_addr_ord=(sp)+(1536);
 var $pat_addr_final=(sp)+(2048);
 var $max;
 var $pat;
 var $smp_addr=(sp)+(2560);
 var $smp_size=(sp)+(2624);
 var $i;
 var $j;
 var $k;
 var $x;
 var $y;
 var $c;
 var $note;
 $1=$in;
 $2=$out;
 $max=0;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=($4|0)<128;
 if($5){label=3;break;}else{label=5;break;}
 case 3: 
 var $7=$i;
 var $8=(($pat_addr_final+($7<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=$i;
 var $10=(($pat_addr_ord+($9<<2))|0);
 HEAP32[(($10)>>2)]=0;
 var $11=$i;
 var $12=(($pat_addr+($11<<2))|0);
 HEAP32[(($12)>>2)]=0;
 label=4;break;
 case 4: 
 var $14=$i;
 var $15=((($14)+(1))|0);
 $i=$15;
 label=2;break;
 case 5: 
 var $17=$2;
 var $18=_pw_write_zero($17,20);
 $i=0;
 label=6;break;
 case 6: 
 var $20=$i;
 var $21=($20|0)<15;
 if($21){label=7;break;}else{label=9;break;}
 case 7: 
 var $23=$1;
 var $24=_read32b($23);
 var $25=$i;
 var $26=(($smp_addr+($25<<2))|0);
 HEAP32[(($26)>>2)]=$24;
 var $27=$2;
 var $28=_pw_write_zero($27,22);
 var $29=$2;
 var $30=$1;
 var $31=_read16b($30);
 var $32=$i;
 var $33=(($smp_size+($32<<1))|0);
 HEAP16[(($33)>>1)]=$31;
 _write16b($29,$31);
 var $34=$i;
 var $35=(($smp_size+($34<<1))|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=($36&65535);
 var $38=($37<<1);
 var $39=(($38)&65535);
 HEAP16[(($35)>>1)]=$39;
 var $40=$2;
 var $41=$1;
 var $42=_read8($41);
 _write8($40,$42);
 var $43=$2;
 var $44=$1;
 var $45=_read8($44);
 _write8($43,$45);
 var $46=$2;
 var $47=$1;
 var $48=_read16b($47);
 _write16b($46,$48);
 var $49=$2;
 var $50=$1;
 var $51=_read16b($50);
 _write16b($49,$51);
 label=8;break;
 case 8: 
 var $53=$i;
 var $54=((($53)+(1))|0);
 $i=$54;
 label=6;break;
 case 9: 
 $i=15;
 label=10;break;
 case 10: 
 var $57=$i;
 var $58=($57|0)<31;
 if($58){label=11;break;}else{label=13;break;}
 case 11: 
 var $60=$2;
 var $61=_pw_write_zero($60,22);
 var $62=$2;
 _write16b($62,0);
 var $63=$2;
 _write8($63,0);
 var $64=$2;
 _write8($64,64);
 var $65=$2;
 _write16b($65,0);
 var $66=$2;
 _write16b($66,1);
 label=12;break;
 case 12: 
 var $68=$i;
 var $69=((($68)+(1))|0);
 $i=$69;
 label=10;break;
 case 13: 
 var $71=(($buf)|0);
 var $72=$1;
 var $73=_fread($71,2,128,$72);
 $pat=0;
 label=14;break;
 case 14: 
 var $75=$pat;
 var $76=($75&255);
 var $77=($76|0)<128;
 if($77){label=15;break;}else{label=19;break;}
 case 15: 
 var $79=$pat;
 var $80=($79&255);
 var $81=($80<<1);
 var $82=(($buf+$81)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=($84|0)==255;
 if($85){label=16;break;}else{label=17;break;}
 case 16: 
 label=19;break;
 case 17: 
 var $88=(($buf)|0);
 var $89=$pat;
 var $90=($89&255);
 var $91=($90<<1);
 var $92=(($88+$91)|0);
 var $93=_readmem16b($92);
 var $94=($93&65535);
 var $95=$pat;
 var $96=($95&255);
 var $97=(($pat_addr+($96<<2))|0);
 HEAP32[(($97)>>2)]=$94;
 var $98=$pat;
 var $99=($98&255);
 var $100=(($pat_addr_ord+($99<<2))|0);
 HEAP32[(($100)>>2)]=$94;
 label=18;break;
 case 18: 
 var $102=$pat;
 var $103=((($102)+(1))&255);
 $pat=$103;
 label=14;break;
 case 19: 
 var $105=$2;
 var $106=$pat;
 _write8($105,$106);
 var $107=$2;
 _write8($107,127);
 var $108=(($pat_addr_ord)|0);
 var $109=$108;
 var $110=$pat;
 var $111=($110&255);
 _qsort($109,$111,4,456);
 $i=0;
 $j=0;
 label=20;break;
 case 20: 
 var $113=$i;
 var $114=$pat;
 var $115=($114&255);
 var $116=($113|0)<($115|0);
 if($116){label=21;break;}else{label=28;break;}
 case 21: 
 var $118=$i;
 var $119=(($pat_addr_ord+($118<<2))|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$j;
 var $122=((($121)+(1))|0);
 $j=$122;
 var $123=(($pat_addr_final+($121<<2))|0);
 HEAP32[(($123)>>2)]=$120;
 label=22;break;
 case 22: 
 var $125=$i;
 var $126=((($125)+(1))|0);
 var $127=(($pat_addr_ord+($126<<2))|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=$i;
 var $130=(($pat_addr_ord+($129<<2))|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($128|0)==($131|0);
 if($132){label=23;break;}else{var $139=0;label=24;break;}
 case 23: 
 var $134=$i;
 var $135=$pat;
 var $136=($135&255);
 var $137=($134|0)<($136|0);
 var $139=$137;label=24;break;
 case 24: 
 var $139;
 if($139){label=25;break;}else{label=26;break;}
 case 25: 
 var $141=$i;
 var $142=((($141)+(1))|0);
 $i=$142;
 label=22;break;
 case 26: 
 label=27;break;
 case 27: 
 var $145=$i;
 var $146=((($145)+(1))|0);
 $i=$146;
 label=20;break;
 case 28: 
 var $148=$buf;
 _memset($148, 0, 128)|0;
 $i=0;
 label=29;break;
 case 29: 
 var $150=$i;
 var $151=$pat;
 var $152=($151&255);
 var $153=($150|0)<($152|0);
 if($153){label=30;break;}else{label=38;break;}
 case 30: 
 $j=0;
 label=31;break;
 case 31: 
 var $156=$i;
 var $157=(($pat_addr+($156<<2))|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$j;
 var $160=(($pat_addr_final+($159<<2))|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($158|0)!=($161|0);
 if($162){label=32;break;}else{label=34;break;}
 case 32: 
 label=33;break;
 case 33: 
 var $165=$j;
 var $166=((($165)+(1))|0);
 $j=$166;
 label=31;break;
 case 34: 
 var $168=$j;
 var $169=(($168)&255);
 var $170=$i;
 var $171=(($buf+$170)|0);
 HEAP8[($171)]=$169;
 var $172=$j;
 var $173=$max;
 var $174=($172|0)>($173|0);
 if($174){label=35;break;}else{label=36;break;}
 case 35: 
 var $176=$j;
 $max=$176;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $179=$i;
 var $180=((($179)+(1))|0);
 $i=$180;
 label=29;break;
 case 38: 
 var $182=(($buf)|0);
 var $183=$2;
 var $184=_fwrite($182,128,1,$183);
 var $185=$2;
 _write32b($185,1294879534);
 $i=0;
 label=39;break;
 case 39: 
 var $187=$i;
 var $188=$max;
 var $189=($187|0)<=($188|0);
 if($189){label=40;break;}else{label=49;break;}
 case 40: 
 var $191=$1;
 var $192=$i;
 var $193=(($pat_addr_final+($192<<2))|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=_fseek($191,$194,0);
 var $196=$buf;
 _memset($196, 0, 1024)|0;
 var $197=$1;
 var $198=_read8($197);
 $x=$198;
 $k=0;
 label=41;break;
 case 41: 
 var $200=$k;
 var $201=($200|0)<64;
 if($201){label=42;break;}else{label=47;break;}
 case 42: 
 var $203=$1;
 var $204=_read8($203);
 $y=$204;
 var $205=$y;
 var $206=($205&255);
 var $207=$206>>6;
 var $208=($207<<2);
 var $209=(($208)&255);
 $c=$209;
 var $210=$y;
 var $211=($210&255);
 var $212=$211&63;
 $note=$212;
 var $213=$note;
 var $214=($213|0)<=36;
 if($214){label=43;break;}else{label=44;break;}
 case 43: 
 var $216=$note;
 var $217=((4504+($216<<1))|0);
 var $218=(($217)|0);
 var $219=HEAP8[($218)];
 var $220=$k;
 var $221=($220<<4);
 var $222=$c;
 var $223=($222&255);
 var $224=((($221)+($223))|0);
 var $225=(($buf+$224)|0);
 HEAP8[($225)]=$219;
 var $226=$note;
 var $227=((4504+($226<<1))|0);
 var $228=(($227+1)|0);
 var $229=HEAP8[($228)];
 var $230=$k;
 var $231=($230<<4);
 var $232=$c;
 var $233=($232&255);
 var $234=((($231)+($233))|0);
 var $235=((($234)+(1))|0);
 var $236=(($buf+$235)|0);
 HEAP8[($236)]=$229;
 label=44;break;
 case 44: 
 var $238=$1;
 var $239=_read8($238);
 var $240=$k;
 var $241=($240<<4);
 var $242=$c;
 var $243=($242&255);
 var $244=((($241)+($243))|0);
 var $245=((($244)+(2))|0);
 var $246=(($buf+$245)|0);
 HEAP8[($246)]=$239;
 var $247=$1;
 var $248=_read8($247);
 var $249=$k;
 var $250=($249<<4);
 var $251=$c;
 var $252=($251&255);
 var $253=((($250)+($252))|0);
 var $254=((($253)+(3))|0);
 var $255=(($buf+$254)|0);
 HEAP8[($255)]=$248;
 var $256=$x;
 var $257=($256&255);
 var $258=$257&128;
 var $259=($258|0)!=0;
 if($259){label=45;break;}else{label=46;break;}
 case 45: 
 label=47;break;
 case 46: 
 var $262=$1;
 var $263=_read8($262);
 $x=$263;
 var $264=$x;
 var $265=($264&255);
 var $266=$265&127;
 var $267=$k;
 var $268=((($267)+($266))|0);
 $k=$268;
 label=41;break;
 case 47: 
 var $270=(($buf)|0);
 var $271=$2;
 var $272=_fwrite($270,1024,1,$271);
 label=48;break;
 case 48: 
 var $274=$i;
 var $275=((($274)+(1))|0);
 $i=$275;
 label=39;break;
 case 49: 
 $i=0;
 label=50;break;
 case 50: 
 var $278=$i;
 var $279=($278|0)<15;
 if($279){label=51;break;}else{label=55;break;}
 case 51: 
 var $281=$i;
 var $282=(($smp_addr+($281<<2))|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)!=0;
 if($284){label=52;break;}else{label=53;break;}
 case 52: 
 var $286=$1;
 var $287=$i;
 var $288=(($smp_addr+($287<<2))|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=_fseek($286,$289,0);
 var $291=$2;
 var $292=$1;
 var $293=$i;
 var $294=(($smp_size+($293<<1))|0);
 var $295=HEAP16[(($294)>>1)];
 var $296=($295&65535);
 var $297=_pw_move_data($291,$292,$296);
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $300=$i;
 var $301=((($300)+(1))|0);
 $i=$301;
 label=50;break;
 case 55: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _cmplong($a,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$a;
 $2=$b;
 var $3=$1;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=($5|0)==($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $21=0;label=4;break;
 case 3: 
 var $12=$1;
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=$2;
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=($14|0)>($17|0);
 var $19=($18?1:-1);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _test_tp3($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $ssize;
 var $x;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1024;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1024)-($9))|0);
 $1=$10;
 label=41;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=_memcmp($13,26224,8);
 var $15=($14|0)!=0;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=41;break;
 case 7: 
 var $18=$2;
 var $19=$start;
 var $20=(($18+$19)|0);
 var $21=(($20+28)|0);
 var $22=_readmem16b($21);
 var $23=($22&65535);
 $l=$23;
 var $24=$l;
 var $25=$24&7;
 var $26=($25|0)!=0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=$l;
 var $29=($28|0)==0;
 if($29){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=41;break;
 case 10: 
 var $32=$l;
 var $33=(((($32|0))/(8))&-1);
 $l=$33;
 $k=0;
 label=11;break;
 case 11: 
 var $35=$k;
 var $36=$l;
 var $37=($35|0)<($36|0);
 if($37){label=12;break;}else{label=16;break;}
 case 12: 
 var $39=$start;
 var $40=((($39)+(30))|0);
 var $41=$k;
 var $42=($41<<3);
 var $43=((($40)+($42))|0);
 var $44=$2;
 var $45=(($44+$43)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=($47|0)>15;
 if($48){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=41;break;
 case 14: 
 label=15;break;
 case 15: 
 var $52=$k;
 var $53=((($52)+(1))|0);
 $k=$53;
 label=11;break;
 case 16: 
 $k=0;
 label=17;break;
 case 17: 
 var $56=$k;
 var $57=$l;
 var $58=($56|0)<($57|0);
 if($58){label=18;break;}else{label=22;break;}
 case 18: 
 var $60=$start;
 var $61=((($60)+(31))|0);
 var $62=$k;
 var $63=($62<<3);
 var $64=((($61)+($63))|0);
 var $65=$2;
 var $66=(($65+$64)|0);
 var $67=HEAP8[($66)];
 var $68=($67&255);
 var $69=($68|0)>64;
 if($69){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=41;break;
 case 20: 
 label=21;break;
 case 21: 
 var $73=$k;
 var $74=((($73)+(1))|0);
 $k=$74;
 label=17;break;
 case 22: 
 $ssize=0;
 $k=0;
 label=23;break;
 case 23: 
 var $77=$k;
 var $78=$l;
 var $79=($77|0)<($78|0);
 if($79){label=24;break;}else{label=35;break;}
 case 24: 
 var $81=$start;
 var $82=$k;
 var $83=($82<<3);
 var $84=((($81)+($83))|0);
 $x=$84;
 var $85=$2;
 var $86=$x;
 var $87=(($85+$86)|0);
 var $88=(($87+32)|0);
 var $89=_readmem16b($88);
 var $90=($89&65535);
 var $91=($90<<1);
 $j=$91;
 var $92=$2;
 var $93=$x;
 var $94=(($92+$93)|0);
 var $95=(($94+34)|0);
 var $96=_readmem16b($95);
 var $97=($96&65535);
 var $98=($97<<1);
 $m=$98;
 var $99=$2;
 var $100=$x;
 var $101=(($99+$100)|0);
 var $102=(($101+36)|0);
 var $103=_readmem16b($102);
 var $104=($103&65535);
 var $105=($104<<1);
 $n=$105;
 var $106=$j;
 var $107=($106|0)>65535;
 if($107){label=27;break;}else{label=25;break;}
 case 25: 
 var $109=$m;
 var $110=($109|0)>65535;
 if($110){label=27;break;}else{label=26;break;}
 case 26: 
 var $112=$n;
 var $113=($112|0)>65535;
 if($113){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-1;
 label=41;break;
 case 28: 
 var $116=$m;
 var $117=$n;
 var $118=((($116)+($117))|0);
 var $119=$j;
 var $120=((($119)+(2))|0);
 var $121=($118|0)>($120|0);
 if($121){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=41;break;
 case 30: 
 var $124=$m;
 var $125=($124|0)!=0;
 if($125){label=31;break;}else{label=33;break;}
 case 31: 
 var $127=$n;
 var $128=($127|0)==0;
 if($128){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=41;break;
 case 33: 
 var $131=$j;
 var $132=$ssize;
 var $133=((($132)+($131))|0);
 $ssize=$133;
 label=34;break;
 case 34: 
 var $135=$k;
 var $136=((($135)+(1))|0);
 $k=$136;
 label=23;break;
 case 35: 
 var $138=$ssize;
 var $139=($138|0)<=4;
 if($139){label=36;break;}else{label=37;break;}
 case 36: 
 $1=-1;
 label=41;break;
 case 37: 
 var $142=$start;
 var $143=$l;
 var $144=($143<<3);
 var $145=((($142)+($144))|0);
 var $146=((($145)+(31))|0);
 var $147=$2;
 var $148=(($147+$146)|0);
 var $149=HEAP8[($148)];
 var $150=($149&255);
 $j=$150;
 var $151=$l;
 var $152=($151|0)==0;
 if($152){label=39;break;}else{label=38;break;}
 case 38: 
 var $154=$l;
 var $155=($154|0)>128;
 if($155){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=41;break;
 case 40: 
 var $158=$2;
 var $159=(($158+8)|0);
 var $160=$3;
 _pw_read_title($159,$160,20);
 $1=0;
 label=41;break;
 case 41: 
 var $162=$1;
 STACKTOP=sp;return $162;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_tp3($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $pnum=sp;
 var $pdata=(sp)+(128);
 var $tmp=(sp)+(1152);
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $npat;
 var $nsmp;
 var $len;
 var $trk_ofs=(sp)+(1208);
 var $i;
 var $j;
 var $k;
 var $pat_ofs;
 var $size;
 var $ssize;
 var $max_trk_ofs;
 var $where;
 var $x;
 $1=$in;
 $2=$out;
 $i=0;
 $j=0;
 $pat_ofs=999999;
 $ssize=0;
 $max_trk_ofs=0;
 var $3=$trk_ofs;
 _memset($3, 0, 2048)|0;
 var $4=$pnum;
 _memset($4, 0, 128)|0;
 var $5=$1;
 var $6=_fseek($5,8,1);
 var $7=$2;
 var $8=$1;
 var $9=_pw_move_data($7,$8,20);
 var $10=$1;
 var $11=_read16b($10);
 var $12=($11&65535);
 var $13=(((($12|0))/(8))&-1);
 var $14=(($13)&255);
 $nsmp=$14;
 $i=0;
 label=2;break;
 case 2: 
 var $16=$i;
 var $17=$nsmp;
 var $18=($17&255);
 var $19=($16|0)<($18|0);
 if($19){label=3;break;}else{label=5;break;}
 case 3: 
 var $21=$2;
 var $22=_pw_write_zero($21,22);
 var $23=$1;
 var $24=_read8($23);
 $c3=$24;
 var $25=$1;
 var $26=_read8($25);
 $c4=$26;
 var $27=$2;
 var $28=$1;
 var $29=_read16b($28);
 var $30=($29&65535);
 $size=$30;
 var $31=(($30)&65535);
 _write16b($27,$31);
 var $32=$size;
 var $33=($32<<1);
 var $34=$ssize;
 var $35=((($34)+($33))|0);
 $ssize=$35;
 var $36=$2;
 var $37=$c3;
 _write8($36,$37);
 var $38=$2;
 var $39=$c4;
 _write8($38,$39);
 var $40=$2;
 var $41=$1;
 var $42=_read16b($41);
 _write16b($40,$42);
 var $43=$2;
 var $44=$1;
 var $45=_read16b($44);
 _write16b($43,$45);
 label=4;break;
 case 4: 
 var $47=$i;
 var $48=((($47)+(1))|0);
 $i=$48;
 label=2;break;
 case 5: 
 var $50=$tmp;
 _memset($50, 0, 30)|0;
 var $51=(($tmp+29)|0);
 HEAP8[($51)]=1;
 label=6;break;
 case 6: 
 var $53=$i;
 var $54=($53|0)<31;
 if($54){label=7;break;}else{label=9;break;}
 case 7: 
 var $56=(($tmp)|0);
 var $57=$2;
 var $58=_fwrite($56,30,1,$57);
 label=8;break;
 case 8: 
 var $60=$i;
 var $61=((($60)+(1))|0);
 $i=$61;
 label=6;break;
 case 9: 
 var $63=$1;
 var $64=_read8($63);
 var $65=$2;
 var $66=$1;
 var $67=_read8($66);
 $len=$67;
 _write8($65,$67);
 var $68=$2;
 _write8($68,127);
 $i=0;
 $npat=0;
 label=10;break;
 case 10: 
 var $70=$i;
 var $71=$len;
 var $72=($71&255);
 var $73=($70|0)<($72|0);
 if($73){label=11;break;}else{label=15;break;}
 case 11: 
 var $75=$1;
 var $76=_read16b($75);
 var $77=($76&65535);
 var $78=(((($77|0))/(8))&-1);
 var $79=(($78)&255);
 var $80=$i;
 var $81=(($pnum+$80)|0);
 HEAP8[($81)]=$79;
 var $82=$i;
 var $83=(($pnum+$82)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=$npat;
 var $87=($86&255);
 var $88=($85|0)>($87|0);
 if($88){label=12;break;}else{label=13;break;}
 case 12: 
 var $90=$i;
 var $91=(($pnum+$90)|0);
 var $92=HEAP8[($91)];
 $npat=$92;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $95=$i;
 var $96=((($95)+(1))|0);
 $i=$96;
 label=10;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $99=$i;
 var $100=$npat;
 var $101=($100&255);
 var $102=($99|0)<=($101|0);
 if($102){label=17;break;}else{label=25;break;}
 case 17: 
 $j=0;
 label=18;break;
 case 18: 
 var $105=$j;
 var $106=($105|0)<4;
 if($106){label=19;break;}else{label=23;break;}
 case 19: 
 var $108=$1;
 var $109=_read16b($108);
 var $110=($109&65535);
 var $111=$j;
 var $112=$i;
 var $113=(($trk_ofs+($112<<4))|0);
 var $114=(($113+($111<<2))|0);
 HEAP32[(($114)>>2)]=$110;
 var $115=$j;
 var $116=$i;
 var $117=(($trk_ofs+($116<<4))|0);
 var $118=(($117+($115<<2))|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$max_trk_ofs;
 var $121=($119|0)>($120|0);
 if($121){label=20;break;}else{label=21;break;}
 case 20: 
 var $123=$j;
 var $124=$i;
 var $125=(($trk_ofs+($124<<4))|0);
 var $126=(($125+($123<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 $max_trk_ofs=$127;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $130=$j;
 var $131=((($130)+(1))|0);
 $j=$131;
 label=18;break;
 case 23: 
 label=24;break;
 case 24: 
 var $134=$i;
 var $135=((($134)+(1))|0);
 $i=$135;
 label=16;break;
 case 25: 
 var $137=(($pnum)|0);
 var $138=$2;
 var $139=_fwrite($137,128,1,$138);
 var $140=$2;
 _write32b($140,1294879534);
 var $141=$1;
 var $142=_ftell($141);
 var $143=((($142)+(2))|0);
 $pat_ofs=$143;
 $i=0;
 label=26;break;
 case 26: 
 var $145=$i;
 var $146=$npat;
 var $147=($146&255);
 var $148=($145|0)<=($147|0);
 if($148){label=27;break;}else{label=70;break;}
 case 27: 
 var $150=$pdata;
 _memset($150, 0, 1024)|0;
 $j=0;
 label=28;break;
 case 28: 
 var $152=$j;
 var $153=($152|0)<4;
 if($153){label=29;break;}else{label=68;break;}
 case 29: 
 var $155=$1;
 var $156=$pat_ofs;
 var $157=$j;
 var $158=$i;
 var $159=(($trk_ofs+($158<<4))|0);
 var $160=(($159+($157<<2))|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=((($156)+($161))|0);
 var $163=_fseek($155,$162,0);
 $k=0;
 label=30;break;
 case 30: 
 var $165=$k;
 var $166=($165|0)<64;
 if($166){label=31;break;}else{label=64;break;}
 case 31: 
 var $168=$k;
 var $169=($168<<4);
 var $170=$j;
 var $171=($170<<2);
 var $172=((($169)+($171))|0);
 $x=$172;
 var $173=$1;
 var $174=_read8($173);
 $c1=$174;
 var $175=$c1;
 var $176=($175&255);
 var $177=$176&192;
 var $178=($177|0)==192;
 if($178){label=32;break;}else{label=33;break;}
 case 32: 
 var $180=$c1;
 var $181=($180&255);
 var $182=(((256)-($181))|0);
 var $183=$k;
 var $184=((($183)+($182))|0);
 $k=$184;
 var $185=$k;
 var $186=((($185)-(1))|0);
 $k=$186;
 label=63;break;
 case 33: 
 var $188=$c1;
 var $189=($188&255);
 var $190=$189&192;
 var $191=($190|0)==128;
 if($191){label=34;break;}else{label=46;break;}
 case 34: 
 var $193=$1;
 var $194=_read8($193);
 $c2=$194;
 var $195=$c1;
 var $196=($195&255);
 var $197=$196>>1;
 var $198=$197&15;
 var $199=(($198)&255);
 $fxt=$199;
 var $200=$c2;
 $fxp=$200;
 var $201=$fxt;
 var $202=($201&255);
 var $203=($202|0)==5;
 if($203){label=37;break;}else{label=35;break;}
 case 35: 
 var $205=$fxt;
 var $206=($205&255);
 var $207=($206|0)==6;
 if($207){label=37;break;}else{label=36;break;}
 case 36: 
 var $209=$fxt;
 var $210=($209&255);
 var $211=($210|0)==10;
 if($211){label=37;break;}else{label=43;break;}
 case 37: 
 var $213=$fxp;
 var $214=($213&255);
 var $215=($214|0)>128;
 if($215){label=38;break;}else{label=39;break;}
 case 38: 
 var $217=$fxp;
 var $218=($217&255);
 var $219=(((256)-($218))|0);
 var $220=(($219)&255);
 $fxp=$220;
 label=42;break;
 case 39: 
 var $222=$fxp;
 var $223=($222&255);
 var $224=($223|0)<=128;
 if($224){label=40;break;}else{label=41;break;}
 case 40: 
 var $226=$fxp;
 var $227=($226&255);
 var $228=$227<<4;
 var $229=$228&240;
 var $230=(($229)&255);
 $fxp=$230;
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $234=$fxt;
 var $235=($234&255);
 var $236=($235|0)==8;
 if($236){label=44;break;}else{label=45;break;}
 case 44: 
 $fxt=0;
 label=45;break;
 case 45: 
 var $239=$fxt;
 var $240=$x;
 var $241=((($240)+(2))|0);
 var $242=(($pdata+$241)|0);
 HEAP8[($242)]=$239;
 var $243=$fxp;
 var $244=$x;
 var $245=((($244)+(3))|0);
 var $246=(($pdata+$245)|0);
 HEAP8[($246)]=$243;
 label=63;break;
 case 46: 
 var $248=$1;
 var $249=_read8($248);
 $c2=$249;
 var $250=$c2;
 var $251=($250&255);
 var $252=$251>>4;
 var $253=$252&15;
 var $254=$c1;
 var $255=($254&255);
 var $256=$255>>2;
 var $257=$256&16;
 var $258=$253|$257;
 var $259=(($258)&255);
 $ins=$259;
 var $260=$c1;
 var $261=($260&255);
 var $262=$261&64;
 var $263=($262|0)==64;
 if($263){label=47;break;}else{label=48;break;}
 case 47: 
 var $265=$c1;
 var $266=($265&255);
 var $267=(((127)-($266))|0);
 var $268=(($267)&255);
 $note=$268;
 label=49;break;
 case 48: 
 var $270=$c1;
 var $271=($270&255);
 var $272=$271&63;
 var $273=(($272)&255);
 $note=$273;
 label=49;break;
 case 49: 
 var $275=$c2;
 var $276=($275&255);
 var $277=$276&15;
 var $278=(($277)&255);
 $fxt=$278;
 var $279=$fxt;
 var $280=($279&255);
 var $281=($280|0)==0;
 if($281){label=50;break;}else{label=51;break;}
 case 50: 
 var $283=$ins;
 var $284=($283&255);
 var $285=$284&240;
 var $286=(($285)&255);
 var $287=$x;
 var $288=(($pdata+$287)|0);
 HEAP8[($288)]=$286;
 var $289=$note;
 var $290=($289&255);
 var $291=((4504+($290<<1))|0);
 var $292=(($291)|0);
 var $293=HEAP8[($292)];
 var $294=($293&255);
 var $295=$x;
 var $296=(($pdata+$295)|0);
 var $297=HEAP8[($296)];
 var $298=($297&255);
 var $299=$298|$294;
 var $300=(($299)&255);
 HEAP8[($296)]=$300;
 var $301=$note;
 var $302=($301&255);
 var $303=((4504+($302<<1))|0);
 var $304=(($303+1)|0);
 var $305=HEAP8[($304)];
 var $306=$x;
 var $307=((($306)+(1))|0);
 var $308=(($pdata+$307)|0);
 HEAP8[($308)]=$305;
 var $309=$ins;
 var $310=($309&255);
 var $311=$310<<4;
 var $312=$311&240;
 var $313=(($312)&255);
 var $314=$x;
 var $315=((($314)+(2))|0);
 var $316=(($pdata+$315)|0);
 HEAP8[($316)]=$313;
 label=63;break;
 case 51: 
 var $318=$1;
 var $319=_read8($318);
 $c3=$319;
 var $320=$fxt;
 var $321=($320&255);
 var $322=($321|0)==8;
 if($322){label=52;break;}else{label=53;break;}
 case 52: 
 $fxt=0;
 label=53;break;
 case 53: 
 var $325=$c3;
 $fxp=$325;
 var $326=$fxt;
 var $327=($326&255);
 var $328=($327|0)==5;
 if($328){label=56;break;}else{label=54;break;}
 case 54: 
 var $330=$fxt;
 var $331=($330&255);
 var $332=($331|0)==6;
 if($332){label=56;break;}else{label=55;break;}
 case 55: 
 var $334=$fxt;
 var $335=($334&255);
 var $336=($335|0)==10;
 if($336){label=56;break;}else{label=62;break;}
 case 56: 
 var $338=$fxp;
 var $339=($338&255);
 var $340=($339|0)>128;
 if($340){label=57;break;}else{label=58;break;}
 case 57: 
 var $342=$fxp;
 var $343=($342&255);
 var $344=(((256)-($343))|0);
 var $345=(($344)&255);
 $fxp=$345;
 label=61;break;
 case 58: 
 var $347=$fxp;
 var $348=($347&255);
 var $349=($348|0)<=128;
 if($349){label=59;break;}else{label=60;break;}
 case 59: 
 var $351=$fxp;
 var $352=($351&255);
 var $353=$352<<4;
 var $354=$353&240;
 var $355=(($354)&255);
 $fxp=$355;
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 var $359=$ins;
 var $360=($359&255);
 var $361=$360&240;
 var $362=(($361)&255);
 var $363=$x;
 var $364=(($pdata+$363)|0);
 HEAP8[($364)]=$362;
 var $365=$note;
 var $366=($365&255);
 var $367=((4504+($366<<1))|0);
 var $368=(($367)|0);
 var $369=HEAP8[($368)];
 var $370=($369&255);
 var $371=$x;
 var $372=(($pdata+$371)|0);
 var $373=HEAP8[($372)];
 var $374=($373&255);
 var $375=$374|$370;
 var $376=(($375)&255);
 HEAP8[($372)]=$376;
 var $377=$note;
 var $378=($377&255);
 var $379=((4504+($378<<1))|0);
 var $380=(($379+1)|0);
 var $381=HEAP8[($380)];
 var $382=$x;
 var $383=((($382)+(1))|0);
 var $384=(($pdata+$383)|0);
 HEAP8[($384)]=$381;
 var $385=$ins;
 var $386=($385&255);
 var $387=$386<<4;
 var $388=$387&240;
 var $389=(($388)&255);
 var $390=$x;
 var $391=((($390)+(2))|0);
 var $392=(($pdata+$391)|0);
 HEAP8[($392)]=$389;
 var $393=$fxt;
 var $394=($393&255);
 var $395=$x;
 var $396=((($395)+(2))|0);
 var $397=(($pdata+$396)|0);
 var $398=HEAP8[($397)];
 var $399=($398&255);
 var $400=$399|$394;
 var $401=(($400)&255);
 HEAP8[($397)]=$401;
 var $402=$fxp;
 var $403=$x;
 var $404=((($403)+(3))|0);
 var $405=(($pdata+$404)|0);
 HEAP8[($405)]=$402;
 label=63;break;
 case 63: 
 var $407=$k;
 var $408=((($407)+(1))|0);
 $k=$408;
 label=30;break;
 case 64: 
 var $410=$1;
 var $411=_ftell($410);
 $where=$411;
 var $412=$where;
 var $413=$max_trk_ofs;
 var $414=($412|0)>($413|0);
 if($414){label=65;break;}else{label=66;break;}
 case 65: 
 var $416=$where;
 $max_trk_ofs=$416;
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $419=$j;
 var $420=((($419)+(1))|0);
 $j=$420;
 label=28;break;
 case 68: 
 var $422=(($pdata)|0);
 var $423=$2;
 var $424=_fwrite($422,1024,1,$423);
 label=69;break;
 case 69: 
 var $426=$i;
 var $427=((($426)+(1))|0);
 $i=$427;
 label=26;break;
 case 70: 
 var $429=$max_trk_ofs;
 var $430=$429&1;
 var $431=($430|0)!=0;
 if($431){label=71;break;}else{label=72;break;}
 case 71: 
 var $433=$max_trk_ofs;
 var $434=((($433)+(1))|0);
 $max_trk_ofs=$434;
 label=72;break;
 case 72: 
 var $436=$1;
 var $437=$max_trk_ofs;
 var $438=_fseek($436,$437,0);
 var $439=$2;
 var $440=$1;
 var $441=$ssize;
 var $442=_pw_move_data($439,$440,$441);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_unic_id($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $n;
 var $start;
 var $ssize;
 var $x;
 var $x1;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1084;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1084)-($9))|0);
 $1=$10;
 label=50;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=(($15+1080)|0);
 var $17=_readmem32b($16);
 var $18=($17|0)!=1294879534;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=50;break;
 case 7: 
 $ssize=0;
 $k=0;
 label=8;break;
 case 8: 
 var $22=$k;
 var $23=($22|0)<31;
 if($23){label=9;break;}else{label=13;break;}
 case 9: 
 var $25=$start;
 var $26=$k;
 var $27=((($26)*(30))&-1);
 var $28=((($25)+($27))|0);
 $x=$28;
 var $29=$2;
 var $30=$x;
 var $31=(($29+$30)|0);
 var $32=(($31+42)|0);
 var $33=_readmem16b($32);
 var $34=($33&65535);
 var $35=($34<<1);
 $j=$35;
 var $36=$j;
 var $37=$ssize;
 var $38=((($37)+($36))|0);
 $ssize=$38;
 var $39=$2;
 var $40=$x;
 var $41=(($39+$40)|0);
 var $42=(($41+46)|0);
 var $43=_readmem16b($42);
 var $44=($43&65535);
 var $45=$2;
 var $46=$x;
 var $47=(($45+$46)|0);
 var $48=(($47+48)|0);
 var $49=_readmem16b($48);
 var $50=($49&65535);
 var $51=((($44)+($50))|0);
 var $52=($51<<1);
 $n=$52;
 var $53=$j;
 var $54=((($53)+(2))|0);
 var $55=$n;
 var $56=($54|0)<($55|0);
 if($56){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=50;break;
 case 11: 
 label=12;break;
 case 12: 
 var $60=$k;
 var $61=((($60)+(1))|0);
 $k=$61;
 label=8;break;
 case 13: 
 var $63=$ssize;
 var $64=($63|0)<=2;
 if($64){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=50;break;
 case 15: 
 $k=0;
 label=16;break;
 case 16: 
 var $68=$k;
 var $69=($68|0)<31;
 if($69){label=17;break;}else{label=23;break;}
 case 17: 
 var $71=$start;
 var $72=$k;
 var $73=((($72)*(30))&-1);
 var $74=((($71)+($73))|0);
 $x1=$74;
 var $75=$x1;
 var $76=((($75)+(40))|0);
 var $77=$2;
 var $78=(($77+$76)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=($80|0)>15;
 if($81){label=20;break;}else{label=18;break;}
 case 18: 
 var $83=$x1;
 var $84=((($83)+(44))|0);
 var $85=$2;
 var $86=(($85+$84)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=($88|0)!=0;
 if($89){label=20;break;}else{label=19;break;}
 case 19: 
 var $91=$x1;
 var $92=((($91)+(45))|0);
 var $93=$2;
 var $94=(($93+$92)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=($96|0)>64;
 if($97){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=50;break;
 case 21: 
 label=22;break;
 case 22: 
 var $101=$k;
 var $102=((($101)+(1))|0);
 $k=$102;
 label=16;break;
 case 23: 
 var $104=$start;
 var $105=((($104)+(950))|0);
 var $106=$2;
 var $107=(($106+$105)|0);
 var $108=HEAP8[($107)];
 var $109=($108&255);
 $l=$109;
 var $110=$l;
 var $111=($110|0)>127;
 if($111){label=25;break;}else{label=24;break;}
 case 24: 
 var $113=$l;
 var $114=($113|0)==0;
 if($114){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=50;break;
 case 26: 
 $k=0;
 $j=0;
 label=27;break;
 case 27: 
 var $118=$j;
 var $119=$l;
 var $120=($118|0)<($119|0);
 if($120){label=28;break;}else{label=34;break;}
 case 28: 
 var $122=$start;
 var $123=((($122)+(952))|0);
 var $124=$j;
 var $125=((($123)+($124))|0);
 var $126=$2;
 var $127=(($126+$125)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=$k;
 var $131=($129|0)>($130|0);
 if($131){label=29;break;}else{label=30;break;}
 case 29: 
 var $133=$start;
 var $134=((($133)+(952))|0);
 var $135=$j;
 var $136=((($134)+($135))|0);
 var $137=$2;
 var $138=(($137+$136)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 $k=$140;
 label=30;break;
 case 30: 
 var $142=$start;
 var $143=((($142)+(952))|0);
 var $144=$j;
 var $145=((($143)+($144))|0);
 var $146=$2;
 var $147=(($146+$145)|0);
 var $148=HEAP8[($147)];
 var $149=($148&255);
 var $150=($149|0)>127;
 if($150){label=31;break;}else{label=32;break;}
 case 31: 
 $1=-1;
 label=50;break;
 case 32: 
 label=33;break;
 case 33: 
 var $154=$j;
 var $155=((($154)+(1))|0);
 $j=$155;
 label=27;break;
 case 34: 
 label=35;break;
 case 35: 
 var $158=$j;
 var $159=($158|0)!=128;
 if($159){label=36;break;}else{label=39;break;}
 case 36: 
 var $161=$start;
 var $162=((($161)+(952))|0);
 var $163=$j;
 var $164=((($162)+($163))|0);
 var $165=$2;
 var $166=(($165+$164)|0);
 var $167=HEAP8[($166)];
 var $168=($167&255);
 var $169=($168|0)!=0;
 if($169){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=50;break;
 case 38: 
 var $172=$j;
 var $173=((($172)+(1))|0);
 $j=$173;
 label=35;break;
 case 39: 
 var $175=$k;
 var $176=((($175)+(1))|0);
 $k=$176;
 label=40;break;
 case 40: 
 var $178=$4;
 var $179=$k;
 var $180=($179<<8);
 var $181=((($180)*(3))&-1);
 var $182=((($181)+(1084))|0);
 var $183=($178|0)<($182|0);
 if($183){label=41;break;}else{label=42;break;}
 case 41: 
 var $185=$k;
 var $186=($185<<8);
 var $187=((($186)*(3))&-1);
 var $188=((($187)+(1084))|0);
 var $189=$4;
 var $190=((($188)-($189))|0);
 $1=$190;
 label=50;break;
 case 42: 
 label=43;break;
 case 43: 
 $j=0;
 label=44;break;
 case 44: 
 var $194=$j;
 var $195=$k;
 var $196=$195<<8;
 var $197=($194|0)<($196|0);
 if($197){label=45;break;}else{label=49;break;}
 case 45: 
 var $199=$start;
 var $200=((($199)+(1084))|0);
 var $201=$j;
 var $202=((($201)*(3))&-1);
 var $203=((($200)+($202))|0);
 var $204=$2;
 var $205=(($204+$203)|0);
 var $206=HEAP8[($205)];
 var $207=($206&255);
 var $208=($207|0)>116;
 if($208){label=46;break;}else{label=47;break;}
 case 46: 
 $1=-1;
 label=50;break;
 case 47: 
 label=48;break;
 case 48: 
 var $212=$j;
 var $213=((($212)+(1))|0);
 $j=$213;
 label=44;break;
 case 49: 
 var $215=$2;
 var $216=$3;
 _pw_read_title($215,$216,20);
 $1=0;
 label=50;break;
 case 50: 
 var $218=$1;
 STACKTOP=sp;return $218;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_unic($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $npat;
 var $max;
 var $ins;
 var $note;
 var $fxt;
 var $fxp;
 var $fine;
 var $tmp=sp;
 var $loop_status;
 var $i;
 var $j;
 var $k;
 var $l;
 var $ssize;
 var $id;
 $1=$in;
 $2=$out;
 $max=0;
 $loop_status=2;
 $i=0;
 $j=0;
 $k=0;
 $l=0;
 $ssize=0;
 var $3=$2;
 var $4=$1;
 var $5=_pw_move_data($3,$4,20);
 $i=0;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=($7|0)<31;
 if($8){label=3;break;}else{label=14;break;}
 case 3: 
 var $10=$2;
 var $11=$1;
 var $12=_pw_move_data($10,$11,20);
 var $13=$2;
 _write8($13,0);
 var $14=$2;
 _write8($14,0);
 var $15=$1;
 var $16=_read8($15);
 $c1=$16;
 var $17=$1;
 var $18=_read8($17);
 $c2=$18;
 var $19=$c1;
 var $20=($19&255);
 var $21=$20<<8;
 var $22=$c2;
 var $23=($22&255);
 var $24=((($21)+($23))|0);
 $j=$24;
 var $25=$j;
 var $26=($25|0)!=0;
 if($26){label=4;break;}else{label=8;break;}
 case 4: 
 var $28=$j;
 var $29=($28|0)<256;
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 var $31=$c2;
 var $32=($31&255);
 var $33=(((16)-($32))|0);
 var $34=(($33)&255);
 $fine=$34;
 label=7;break;
 case 6: 
 var $36=$c2;
 var $37=($36&255);
 var $38=(((256)-($37))|0);
 var $39=(($38)&255);
 $fine=$39;
 label=7;break;
 case 7: 
 label=9;break;
 case 8: 
 $fine=0;
 label=9;break;
 case 9: 
 var $43=$2;
 var $44=$1;
 var $45=_read16b($44);
 var $46=($45&65535);
 $l=$46;
 var $47=(($46)&65535);
 _write16b($43,$47);
 var $48=$l;
 var $49=($48<<1);
 var $50=$ssize;
 var $51=((($50)+($49))|0);
 $ssize=$51;
 var $52=$1;
 var $53=_read8($52);
 var $54=$2;
 var $55=$fine;
 _write8($54,$55);
 var $56=$2;
 var $57=$1;
 var $58=_read8($57);
 _write8($56,$58);
 var $59=$1;
 var $60=_read16b($59);
 var $61=($60&65535);
 $j=$61;
 var $62=$1;
 var $63=_read16b($62);
 var $64=($63&65535);
 $k=$64;
 var $65=$j;
 var $66=($65<<1);
 var $67=$k;
 var $68=((($66)+($67))|0);
 var $69=$l;
 var $70=($68|0)<=($69|0);
 if($70){label=10;break;}else{label=12;break;}
 case 10: 
 var $72=$j;
 var $73=($72|0)!=0;
 if($73){label=11;break;}else{label=12;break;}
 case 11: 
 $loop_status=1;
 var $75=$j;
 var $76=($75<<1);
 $j=$76;
 label=12;break;
 case 12: 
 var $78=$2;
 var $79=$j;
 var $80=(($79)&65535);
 _write16b($78,$80);
 var $81=$2;
 var $82=$k;
 var $83=(($82)&65535);
 _write16b($81,$83);
 label=13;break;
 case 13: 
 var $85=$i;
 var $86=((($85)+(1))|0);
 $i=$86;
 label=2;break;
 case 14: 
 var $88=$2;
 var $89=$1;
 var $90=_read8($89);
 $npat=$90;
 _write8($88,$90);
 var $91=$2;
 _write8($91,127);
 var $92=$1;
 var $93=_read8($92);
 var $94=(($tmp)|0);
 var $95=$1;
 var $96=_fread($94,128,1,$95);
 var $97=(($tmp)|0);
 var $98=$2;
 var $99=_fwrite($97,128,1,$98);
 $i=0;
 label=15;break;
 case 15: 
 var $101=$i;
 var $102=($101|0)<128;
 if($102){label=16;break;}else{label=20;break;}
 case 16: 
 var $104=$i;
 var $105=(($tmp+$104)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$max;
 var $109=($108&255);
 var $110=($107|0)>($109|0);
 if($110){label=17;break;}else{label=18;break;}
 case 17: 
 var $112=$i;
 var $113=(($tmp+$112)|0);
 var $114=HEAP8[($113)];
 $max=$114;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $117=$i;
 var $118=((($117)+(1))|0);
 $i=$118;
 label=15;break;
 case 20: 
 var $120=$max;
 var $121=((($120)+(1))&255);
 $max=$121;
 var $122=$2;
 _write32b($122,1294879534);
 var $123=$1;
 var $124=_fseek($123,1080,0);
 var $125=$1;
 var $126=_read32b($125);
 $id=$126;
 var $127=$id;
 var $128=($127|0)!=0;
 if($128){label=21;break;}else{label=24;break;}
 case 21: 
 var $130=$id;
 var $131=($130|0)!=1294879534;
 if($131){label=22;break;}else{label=24;break;}
 case 22: 
 var $133=$id;
 var $134=($133|0)!=1431193923;
 if($134){label=23;break;}else{label=24;break;}
 case 23: 
 var $136=$1;
 var $137=_fseek($136,-4,1);
 label=24;break;
 case 24: 
 $i=0;
 label=25;break;
 case 25: 
 var $140=$i;
 var $141=$max;
 var $142=($141&255);
 var $143=($140|0)<($142|0);
 if($143){label=26;break;}else{label=34;break;}
 case 26: 
 $j=0;
 label=27;break;
 case 27: 
 var $146=$j;
 var $147=($146|0)<256;
 if($147){label=28;break;}else{label=32;break;}
 case 28: 
 var $149=$1;
 var $150=_read8($149);
 $c1=$150;
 var $151=$1;
 var $152=_read8($151);
 $c2=$152;
 var $153=$1;
 var $154=_read8($153);
 $c3=$154;
 var $155=$c1;
 var $156=($155&255);
 var $157=$156>>2;
 var $158=$157&16;
 var $159=$c2;
 var $160=($159&255);
 var $161=$160>>4;
 var $162=$161&15;
 var $163=$158|$162;
 var $164=(($163)&255);
 $ins=$164;
 var $165=$c1;
 var $166=($165&255);
 var $167=$166&63;
 var $168=(($167)&255);
 $note=$168;
 var $169=$c2;
 var $170=($169&255);
 var $171=$170&15;
 var $172=(($171)&255);
 $fxt=$172;
 var $173=$c3;
 $fxp=$173;
 var $174=$fxt;
 var $175=($174&255);
 var $176=($175|0)==13;
 if($176){label=29;break;}else{label=30;break;}
 case 29: 
 var $178=$fxp;
 var $179=($178&255);
 var $180=(((($179|0))/(10))&-1);
 var $181=(($180)&255);
 $c3=$181;
 var $182=$fxp;
 var $183=($182&255);
 var $184=(((($183|0))%(10))&-1);
 var $185=(($184)&255);
 $c4=$185;
 var $186=$c3;
 var $187=($186&255);
 var $188=($187<<4);
 var $189=$c4;
 var $190=($189&255);
 var $191=((($188)+($190))|0);
 var $192=(($191)&255);
 $fxp=$192;
 label=30;break;
 case 30: 
 var $194=$ins;
 var $195=($194&255);
 var $196=$195&240;
 var $197=$note;
 var $198=($197&255);
 var $199=((4504+($198<<1))|0);
 var $200=(($199)|0);
 var $201=HEAP8[($200)];
 var $202=($201&255);
 var $203=$196|$202;
 var $204=(($203)&255);
 var $205=$j;
 var $206=($205<<2);
 var $207=(($tmp+$206)|0);
 HEAP8[($207)]=$204;
 var $208=$note;
 var $209=($208&255);
 var $210=((4504+($209<<1))|0);
 var $211=(($210+1)|0);
 var $212=HEAP8[($211)];
 var $213=$j;
 var $214=($213<<2);
 var $215=((($214)+(1))|0);
 var $216=(($tmp+$215)|0);
 HEAP8[($216)]=$212;
 var $217=$ins;
 var $218=($217&255);
 var $219=$218<<4;
 var $220=$219&240;
 var $221=$fxt;
 var $222=($221&255);
 var $223=$220|$222;
 var $224=(($223)&255);
 var $225=$j;
 var $226=($225<<2);
 var $227=((($226)+(2))|0);
 var $228=(($tmp+$227)|0);
 HEAP8[($228)]=$224;
 var $229=$fxp;
 var $230=$j;
 var $231=($230<<2);
 var $232=((($231)+(3))|0);
 var $233=(($tmp+$232)|0);
 HEAP8[($233)]=$229;
 label=31;break;
 case 31: 
 var $235=$j;
 var $236=((($235)+(1))|0);
 $j=$236;
 label=27;break;
 case 32: 
 var $238=(($tmp)|0);
 var $239=$2;
 var $240=_fwrite($238,1024,1,$239);
 label=33;break;
 case 33: 
 var $242=$i;
 var $243=((($242)+(1))|0);
 $i=$243;
 label=25;break;
 case 34: 
 var $245=$2;
 var $246=$1;
 var $247=$ssize;
 var $248=_pw_move_data($245,$246,$247);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_unic_noid($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 var $x;
 var $y;
 var $y1;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1084;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1084)-($9))|0);
 $1=$10;
 label=83;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=(($15+1080)|0);
 var $17=_readmem32b($16);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=83;break;
 case 7: 
 $ssize=0;
 $o=0;
 $k=0;
 label=8;break;
 case 8: 
 var $22=$k;
 var $23=($22|0)<31;
 if($23){label=9;break;}else{label=33;break;}
 case 9: 
 var $25=$start;
 var $26=$k;
 var $27=((($26)*(30))&-1);
 var $28=((($25)+($27))|0);
 $x=$28;
 var $29=$2;
 var $30=$x;
 var $31=(($29+$30)|0);
 var $32=(($31+42)|0);
 var $33=_readmem16b($32);
 var $34=($33&65535);
 var $35=($34<<1);
 $j=$35;
 var $36=$2;
 var $37=$x;
 var $38=(($36+$37)|0);
 var $39=(($38+46)|0);
 var $40=_readmem16b($39);
 var $41=($40&65535);
 var $42=($41<<1);
 $m=$42;
 var $43=$2;
 var $44=$x;
 var $45=(($43+$44)|0);
 var $46=(($45+48)|0);
 var $47=_readmem16b($46);
 var $48=($47&65535);
 var $49=($48<<1);
 $n=$49;
 var $50=$j;
 var $51=$ssize;
 var $52=((($51)+($50))|0);
 $ssize=$52;
 var $53=$n;
 var $54=($53|0)!=0;
 if($54){label=10;break;}else{label=12;break;}
 case 10: 
 var $56=$j;
 var $57=((($56)+(2))|0);
 var $58=$m;
 var $59=$n;
 var $60=((($58)+($59))|0);
 var $61=($57|0)<($60|0);
 if($61){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=83;break;
 case 12: 
 var $64=$j;
 var $65=($64|0)>65535;
 if($65){label=15;break;}else{label=13;break;}
 case 13: 
 var $67=$m;
 var $68=($67|0)>65535;
 if($68){label=15;break;}else{label=14;break;}
 case 14: 
 var $70=$n;
 var $71=($70|0)>65535;
 if($71){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=83;break;
 case 16: 
 var $74=$x;
 var $75=((($74)+(45))|0);
 var $76=$2;
 var $77=(($76+$75)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=($79|0)>64;
 if($80){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=83;break;
 case 18: 
 var $83=$2;
 var $84=$x;
 var $85=(($83+$84)|0);
 var $86=(($85+40)|0);
 var $87=_readmem16b($86);
 var $88=($87&65535);
 $y=$88;
 var $89=$y;
 var $90=($89|0)!=0;
 if($90){label=19;break;}else{label=20;break;}
 case 19: 
 var $92=$j;
 var $93=($92|0)==0;
 if($93){label=22;break;}else{label=20;break;}
 case 20: 
 var $95=$y;
 var $96=($95|0)>8;
 if($96){label=21;break;}else{label=23;break;}
 case 21: 
 var $98=$y;
 var $99=($98|0)<247;
 if($99){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=83;break;
 case 23: 
 var $102=$m;
 var $103=($102|0)!=0;
 if($103){label=24;break;}else{label=26;break;}
 case 24: 
 var $105=$n;
 var $106=($105|0)<=2;
 if($106){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=83;break;
 case 26: 
 var $109=$x;
 var $110=((($109)+(45))|0);
 var $111=$2;
 var $112=(($111+$110)|0);
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=($114|0)!=0;
 if($115){label=27;break;}else{label=29;break;}
 case 27: 
 var $117=$j;
 var $118=($117|0)==0;
 if($118){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=83;break;
 case 29: 
 var $121=$j;
 var $122=($121|0)!=0;
 if($122){label=30;break;}else{label=31;break;}
 case 30: 
 var $124=$j;
 var $125=((($124)+(1))|0);
 $o=$125;
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $128=$k;
 var $129=((($128)+(1))|0);
 $k=$129;
 label=8;break;
 case 33: 
 var $131=$ssize;
 var $132=($131|0)<=2;
 if($132){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=83;break;
 case 35: 
 var $135=$start;
 var $136=((($135)+(950))|0);
 var $137=$2;
 var $138=(($137+$136)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 $l=$140;
 var $141=$l;
 var $142=($141|0)>127;
 if($142){label=37;break;}else{label=36;break;}
 case 36: 
 var $144=$l;
 var $145=($144|0)==0;
 if($145){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=83;break;
 case 38: 
 $k=0;
 $j=0;
 label=39;break;
 case 39: 
 var $149=$j;
 var $150=$l;
 var $151=($149|0)<($150|0);
 if($151){label=40;break;}else{label=46;break;}
 case 40: 
 var $153=$start;
 var $154=((($153)+(952))|0);
 var $155=$j;
 var $156=((($154)+($155))|0);
 var $157=$2;
 var $158=(($157+$156)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=$k;
 var $162=($160|0)>($161|0);
 if($162){label=41;break;}else{label=42;break;}
 case 41: 
 var $164=$start;
 var $165=((($164)+(952))|0);
 var $166=$j;
 var $167=((($165)+($166))|0);
 var $168=$2;
 var $169=(($168+$167)|0);
 var $170=HEAP8[($169)];
 var $171=($170&255);
 $k=$171;
 label=42;break;
 case 42: 
 var $173=$start;
 var $174=((($173)+(952))|0);
 var $175=$j;
 var $176=((($174)+($175))|0);
 var $177=$2;
 var $178=(($177+$176)|0);
 var $179=HEAP8[($178)];
 var $180=($179&255);
 var $181=($180|0)>127;
 if($181){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=83;break;
 case 44: 
 label=45;break;
 case 45: 
 var $185=$j;
 var $186=((($185)+(1))|0);
 $j=$186;
 label=39;break;
 case 46: 
 label=47;break;
 case 47: 
 var $189=$j;
 var $190=($189|0)!=128;
 if($190){label=48;break;}else{label=51;break;}
 case 48: 
 var $192=$start;
 var $193=((($192)+(952))|0);
 var $194=$j;
 var $195=((($193)+($194))|0);
 var $196=$2;
 var $197=(($196+$195)|0);
 var $198=HEAP8[($197)];
 var $199=($198&255);
 var $200=($199|0)!=0;
 if($200){label=49;break;}else{label=50;break;}
 case 49: 
 $1=-1;
 label=83;break;
 case 50: 
 var $203=$j;
 var $204=((($203)+(1))|0);
 $j=$204;
 label=47;break;
 case 51: 
 var $206=$k;
 var $207=((($206)+(1))|0);
 $k=$207;
 label=52;break;
 case 52: 
 var $209=$4;
 var $210=$k;
 var $211=($210<<8);
 var $212=((($211)*(3))&-1);
 var $213=((($212)+(1080))|0);
 var $214=((($213)+(2))|0);
 var $215=($209|0)<($214|0);
 if($215){label=53;break;}else{label=54;break;}
 case 53: 
 var $217=$k;
 var $218=($217<<8);
 var $219=((($218)*(3))&-1);
 var $220=((($219)+(1080))|0);
 var $221=((($220)+(2))|0);
 var $222=$4;
 var $223=((($221)-($222))|0);
 $1=$223;
 label=83;break;
 case 54: 
 label=55;break;
 case 55: 
 $j=0;
 label=56;break;
 case 56: 
 var $227=$j;
 var $228=$k;
 var $229=$228<<8;
 var $230=($227|0)<($229|0);
 if($230){label=57;break;}else{label=74;break;}
 case 57: 
 var $232=$start;
 var $233=((($232)+(1080))|0);
 var $234=$j;
 var $235=((($234)*(3))&-1);
 var $236=((($233)+($235))|0);
 $y1=$236;
 var $237=$y1;
 var $238=$2;
 var $239=(($238+$237)|0);
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=($241|0)>116;
 if($242){label=58;break;}else{label=59;break;}
 case 58: 
 $1=-1;
 label=83;break;
 case 59: 
 var $245=$y1;
 var $246=$2;
 var $247=(($246+$245)|0);
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249&63;
 var $251=($250|0)>36;
 if($251){label=60;break;}else{label=61;break;}
 case 60: 
 $1=-1;
 label=83;break;
 case 61: 
 var $254=$y1;
 var $255=((($254)+(1))|0);
 var $256=$2;
 var $257=(($256+$255)|0);
 var $258=HEAP8[($257)];
 var $259=($258&255);
 var $260=$259&15;
 var $261=($260|0)==12;
 if($261){label=62;break;}else{label=64;break;}
 case 62: 
 var $263=$y1;
 var $264=((($263)+(2))|0);
 var $265=$2;
 var $266=(($265+$264)|0);
 var $267=HEAP8[($266)];
 var $268=($267&255);
 var $269=($268|0)>64;
 if($269){label=63;break;}else{label=64;break;}
 case 63: 
 $1=-1;
 label=83;break;
 case 64: 
 var $272=$y1;
 var $273=((($272)+(1))|0);
 var $274=$2;
 var $275=(($274+$273)|0);
 var $276=HEAP8[($275)];
 var $277=($276&255);
 var $278=$277&15;
 var $279=($278|0)==11;
 if($279){label=65;break;}else{label=67;break;}
 case 65: 
 var $281=$y1;
 var $282=((($281)+(2))|0);
 var $283=$2;
 var $284=(($283+$282)|0);
 var $285=HEAP8[($284)];
 var $286=($285&255);
 var $287=($286|0)>127;
 if($287){label=66;break;}else{label=67;break;}
 case 66: 
 $1=-1;
 label=83;break;
 case 67: 
 var $290=$y1;
 var $291=((($290)+(1))|0);
 var $292=$2;
 var $293=(($292+$291)|0);
 var $294=HEAP8[($293)];
 var $295=($294&255);
 var $296=$295&15;
 var $297=($296|0)==13;
 if($297){label=68;break;}else{label=70;break;}
 case 68: 
 var $299=$y1;
 var $300=((($299)+(2))|0);
 var $301=$2;
 var $302=(($301+$300)|0);
 var $303=HEAP8[($302)];
 var $304=($303&255);
 var $305=($304|0)>64;
 if($305){label=69;break;}else{label=70;break;}
 case 69: 
 $1=-1;
 label=83;break;
 case 70: 
 var $308=$y1;
 var $309=$2;
 var $310=(($309+$308)|0);
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312>>2;
 var $314=$313&48;
 var $315=$start;
 var $316=((($315)+(1081))|0);
 var $317=$j;
 var $318=((($317)*(3))&-1);
 var $319=((($316)+($318))|0);
 var $320=((($319)+(1))|0);
 var $321=$2;
 var $322=(($321+$320)|0);
 var $323=HEAP8[($322)];
 var $324=($323&255);
 var $325=$324>>4;
 var $326=$325&15;
 var $327=$314|$326;
 $n=$327;
 var $328=$n;
 var $329=$o;
 var $330=($328|0)>($329|0);
 if($330){label=71;break;}else{label=72;break;}
 case 71: 
 $1=-1;
 label=83;break;
 case 72: 
 label=73;break;
 case 73: 
 var $334=$j;
 var $335=((($334)+(1))|0);
 $j=$335;
 label=56;break;
 case 74: 
 $j=0;
 label=75;break;
 case 75: 
 var $338=$j;
 var $339=($338|0)<20;
 if($339){label=76;break;}else{label=82;break;}
 case 76: 
 var $341=$start;
 var $342=$j;
 var $343=((($341)+($342))|0);
 var $344=$2;
 var $345=(($344+$343)|0);
 var $346=HEAP8[($345)];
 var $347=($346&255);
 var $348=($347|0)!=0;
 if($348){label=77;break;}else{label=78;break;}
 case 77: 
 var $350=$start;
 var $351=$j;
 var $352=((($350)+($351))|0);
 var $353=$2;
 var $354=(($353+$352)|0);
 var $355=HEAP8[($354)];
 var $356=($355&255);
 var $357=($356|0)<32;
 if($357){label=79;break;}else{label=78;break;}
 case 78: 
 var $359=$start;
 var $360=$j;
 var $361=((($359)+($360))|0);
 var $362=$2;
 var $363=(($362+$361)|0);
 var $364=HEAP8[($363)];
 var $365=($364&255);
 var $366=($365|0)>180;
 if($366){label=79;break;}else{label=80;break;}
 case 79: 
 $1=-1;
 label=83;break;
 case 80: 
 label=81;break;
 case 81: 
 var $370=$j;
 var $371=((($370)+(1))|0);
 $j=$371;
 label=75;break;
 case 82: 
 var $373=$2;
 var $374=$3;
 _pw_read_title($373,$374,20);
 $1=0;
 label=83;break;
 case 83: 
 var $376=$1;
 STACKTOP=sp;return $376;
  default: assert(0, "bad label: " + label);
 }
}
function _test_unic_emptyid($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 var $x;
 var $y;
 var $y1;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1084;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1084)-($9))|0);
 $1=$10;
 label=75;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=(($15+1080)|0);
 var $17=_readmem32b($16);
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=75;break;
 case 7: 
 $ssize=0;
 $o=0;
 $k=0;
 label=8;break;
 case 8: 
 var $22=$k;
 var $23=($22|0)<31;
 if($23){label=9;break;}else{label=33;break;}
 case 9: 
 var $25=$start;
 var $26=$k;
 var $27=((($26)*(30))&-1);
 var $28=((($25)+($27))|0);
 $x=$28;
 var $29=$2;
 var $30=$x;
 var $31=(($29+$30)|0);
 var $32=(($31+42)|0);
 var $33=_readmem16b($32);
 var $34=($33&65535);
 var $35=($34<<1);
 $j=$35;
 var $36=$2;
 var $37=$x;
 var $38=(($36+$37)|0);
 var $39=(($38+46)|0);
 var $40=_readmem16b($39);
 var $41=($40&65535);
 var $42=($41<<1);
 $m=$42;
 var $43=$2;
 var $44=$x;
 var $45=(($43+$44)|0);
 var $46=(($45+48)|0);
 var $47=_readmem16b($46);
 var $48=($47&65535);
 var $49=($48<<1);
 $n=$49;
 var $50=$j;
 var $51=$ssize;
 var $52=((($51)+($50))|0);
 $ssize=$52;
 var $53=$n;
 var $54=($53|0)!=0;
 if($54){label=10;break;}else{label=12;break;}
 case 10: 
 var $56=$j;
 var $57=((($56)+(2))|0);
 var $58=$m;
 var $59=$n;
 var $60=((($58)+($59))|0);
 var $61=($57|0)<($60|0);
 if($61){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=75;break;
 case 12: 
 var $64=$j;
 var $65=($64|0)>65535;
 if($65){label=15;break;}else{label=13;break;}
 case 13: 
 var $67=$m;
 var $68=($67|0)>65535;
 if($68){label=15;break;}else{label=14;break;}
 case 14: 
 var $70=$n;
 var $71=($70|0)>65535;
 if($71){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=75;break;
 case 16: 
 var $74=$x;
 var $75=((($74)+(45))|0);
 var $76=$2;
 var $77=(($76+$75)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=($79|0)>64;
 if($80){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=75;break;
 case 18: 
 var $83=$2;
 var $84=$x;
 var $85=(($83+$84)|0);
 var $86=(($85+40)|0);
 var $87=_readmem16b($86);
 var $88=($87&65535);
 $y=$88;
 var $89=$y;
 var $90=($89|0)!=0;
 if($90){label=19;break;}else{label=20;break;}
 case 19: 
 var $92=$j;
 var $93=($92|0)==0;
 if($93){label=22;break;}else{label=20;break;}
 case 20: 
 var $95=$y;
 var $96=($95|0)>8;
 if($96){label=21;break;}else{label=23;break;}
 case 21: 
 var $98=$y;
 var $99=($98|0)<247;
 if($99){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=75;break;
 case 23: 
 var $102=$m;
 var $103=($102|0)!=0;
 if($103){label=24;break;}else{label=26;break;}
 case 24: 
 var $105=$n;
 var $106=($105|0)<=2;
 if($106){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=75;break;
 case 26: 
 var $109=$x;
 var $110=((($109)+(45))|0);
 var $111=$2;
 var $112=(($111+$110)|0);
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=($114|0)!=0;
 if($115){label=27;break;}else{label=29;break;}
 case 27: 
 var $117=$j;
 var $118=($117|0)==0;
 if($118){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=75;break;
 case 29: 
 var $121=$j;
 var $122=($121|0)!=0;
 if($122){label=30;break;}else{label=31;break;}
 case 30: 
 var $124=$j;
 var $125=((($124)+(1))|0);
 $o=$125;
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $128=$k;
 var $129=((($128)+(1))|0);
 $k=$129;
 label=8;break;
 case 33: 
 var $131=$ssize;
 var $132=($131|0)<=2;
 if($132){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=75;break;
 case 35: 
 var $135=$start;
 var $136=((($135)+(950))|0);
 var $137=$2;
 var $138=(($137+$136)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 $l=$140;
 var $141=$l;
 var $142=($141|0)>127;
 if($142){label=37;break;}else{label=36;break;}
 case 36: 
 var $144=$l;
 var $145=($144|0)==0;
 if($145){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=75;break;
 case 38: 
 $k=0;
 $j=0;
 label=39;break;
 case 39: 
 var $149=$j;
 var $150=$l;
 var $151=($149|0)<($150|0);
 if($151){label=40;break;}else{label=46;break;}
 case 40: 
 var $153=$start;
 var $154=((($153)+(952))|0);
 var $155=$j;
 var $156=((($154)+($155))|0);
 var $157=$2;
 var $158=(($157+$156)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=$k;
 var $162=($160|0)>($161|0);
 if($162){label=41;break;}else{label=42;break;}
 case 41: 
 var $164=$start;
 var $165=((($164)+(952))|0);
 var $166=$j;
 var $167=((($165)+($166))|0);
 var $168=$2;
 var $169=(($168+$167)|0);
 var $170=HEAP8[($169)];
 var $171=($170&255);
 $k=$171;
 label=42;break;
 case 42: 
 var $173=$start;
 var $174=((($173)+(952))|0);
 var $175=$j;
 var $176=((($174)+($175))|0);
 var $177=$2;
 var $178=(($177+$176)|0);
 var $179=HEAP8[($178)];
 var $180=($179&255);
 var $181=($180|0)>127;
 if($181){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=75;break;
 case 44: 
 label=45;break;
 case 45: 
 var $185=$j;
 var $186=((($185)+(1))|0);
 $j=$186;
 label=39;break;
 case 46: 
 label=47;break;
 case 47: 
 var $189=$j;
 var $190=($189|0)!=128;
 if($190){label=48;break;}else{label=51;break;}
 case 48: 
 var $192=$start;
 var $193=((($192)+(952))|0);
 var $194=$j;
 var $195=((($193)+($194))|0);
 var $196=$2;
 var $197=(($196+$195)|0);
 var $198=HEAP8[($197)];
 var $199=($198&255);
 var $200=($199|0)!=0;
 if($200){label=49;break;}else{label=50;break;}
 case 49: 
 $1=-1;
 label=75;break;
 case 50: 
 var $203=$j;
 var $204=((($203)+(1))|0);
 $j=$204;
 label=47;break;
 case 51: 
 var $206=$k;
 var $207=((($206)+(1))|0);
 $k=$207;
 label=52;break;
 case 52: 
 var $209=$4;
 var $210=$k;
 var $211=($210<<8);
 var $212=((($211)*(3))&-1);
 var $213=((($212)+(1084))|0);
 var $214=((($213)+(2))|0);
 var $215=($209|0)<($214|0);
 if($215){label=53;break;}else{label=54;break;}
 case 53: 
 var $217=$k;
 var $218=($217<<8);
 var $219=((($218)*(3))&-1);
 var $220=((($219)+(1084))|0);
 var $221=((($220)+(2))|0);
 var $222=$4;
 var $223=((($221)-($222))|0);
 $1=$223;
 label=75;break;
 case 54: 
 label=55;break;
 case 55: 
 $j=0;
 label=56;break;
 case 56: 
 var $227=$j;
 var $228=$k;
 var $229=$228<<8;
 var $230=($227|0)<($229|0);
 if($230){label=57;break;}else{label=74;break;}
 case 57: 
 var $232=$start;
 var $233=((($232)+(1084))|0);
 var $234=$j;
 var $235=((($234)*(3))&-1);
 var $236=((($233)+($235))|0);
 $y1=$236;
 var $237=$y1;
 var $238=$2;
 var $239=(($238+$237)|0);
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=($241|0)>116;
 if($242){label=58;break;}else{label=59;break;}
 case 58: 
 $1=-1;
 label=75;break;
 case 59: 
 var $245=$y1;
 var $246=$2;
 var $247=(($246+$245)|0);
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249&63;
 var $251=($250|0)>36;
 if($251){label=60;break;}else{label=61;break;}
 case 60: 
 $1=-1;
 label=75;break;
 case 61: 
 var $254=$y1;
 var $255=((($254)+(1))|0);
 var $256=$2;
 var $257=(($256+$255)|0);
 var $258=HEAP8[($257)];
 var $259=($258&255);
 var $260=$259&15;
 var $261=($260|0)==12;
 if($261){label=62;break;}else{label=64;break;}
 case 62: 
 var $263=$y1;
 var $264=((($263)+(2))|0);
 var $265=$2;
 var $266=(($265+$264)|0);
 var $267=HEAP8[($266)];
 var $268=($267&255);
 var $269=($268|0)>64;
 if($269){label=63;break;}else{label=64;break;}
 case 63: 
 $1=-1;
 label=75;break;
 case 64: 
 var $272=$y1;
 var $273=((($272)+(1))|0);
 var $274=$2;
 var $275=(($274+$273)|0);
 var $276=HEAP8[($275)];
 var $277=($276&255);
 var $278=$277&15;
 var $279=($278|0)==11;
 if($279){label=65;break;}else{label=67;break;}
 case 65: 
 var $281=$y1;
 var $282=((($281)+(2))|0);
 var $283=$2;
 var $284=(($283+$282)|0);
 var $285=HEAP8[($284)];
 var $286=($285&255);
 var $287=($286|0)>127;
 if($287){label=66;break;}else{label=67;break;}
 case 66: 
 $1=-1;
 label=75;break;
 case 67: 
 var $290=$y1;
 var $291=((($290)+(1))|0);
 var $292=$2;
 var $293=(($292+$291)|0);
 var $294=HEAP8[($293)];
 var $295=($294&255);
 var $296=$295&15;
 var $297=($296|0)==13;
 if($297){label=68;break;}else{label=70;break;}
 case 68: 
 var $299=$y1;
 var $300=((($299)+(2))|0);
 var $301=$2;
 var $302=(($301+$300)|0);
 var $303=HEAP8[($302)];
 var $304=($303&255);
 var $305=($304|0)>64;
 if($305){label=69;break;}else{label=70;break;}
 case 69: 
 $1=-1;
 label=75;break;
 case 70: 
 var $308=$y1;
 var $309=$2;
 var $310=(($309+$308)|0);
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312>>2;
 var $314=$313&48;
 var $315=$start;
 var $316=((($315)+(1085))|0);
 var $317=$j;
 var $318=((($317)*(3))&-1);
 var $319=((($316)+($318))|0);
 var $320=((($319)+(1))|0);
 var $321=$2;
 var $322=(($321+$320)|0);
 var $323=HEAP8[($322)];
 var $324=($323&255);
 var $325=$324>>4;
 var $326=$325&15;
 var $327=$314|$326;
 $n=$327;
 var $328=$n;
 var $329=$o;
 var $330=($328|0)>($329|0);
 if($330){label=71;break;}else{label=72;break;}
 case 71: 
 $1=-1;
 label=75;break;
 case 72: 
 label=73;break;
 case 73: 
 var $334=$j;
 var $335=((($334)+(1))|0);
 $j=$335;
 label=56;break;
 case 74: 
 var $337=$2;
 var $338=$3;
 _pw_read_title($337,$338,20);
 $1=0;
 label=75;break;
 case 75: 
 var $340=$1;
 STACKTOP=sp;return $340;
  default: assert(0, "bad label: " + label);
 }
}
function _test_unic2($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 var $x;
 var $y;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1084;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1084)-($9))|0);
 $1=$10;
 label=69;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=(($15+1080)|0);
 var $17=_readmem32b($16);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=69;break;
 case 7: 
 $o=0;
 $ssize=0;
 $k=0;
 label=8;break;
 case 8: 
 var $22=$k;
 var $23=($22|0)<31;
 if($23){label=9;break;}else{label=27;break;}
 case 9: 
 var $25=$start;
 var $26=$k;
 var $27=((($26)*(30))&-1);
 var $28=((($25)+($27))|0);
 $x=$28;
 var $29=$2;
 var $30=$x;
 var $31=(($29+$30)|0);
 var $32=(($31+22)|0);
 var $33=_readmem16b($32);
 var $34=($33&65535);
 var $35=($34<<1);
 $j=$35;
 var $36=$2;
 var $37=$x;
 var $38=(($36+$37)|0);
 var $39=(($38+26)|0);
 var $40=_readmem16b($39);
 var $41=($40&65535);
 var $42=($41<<1);
 $m=$42;
 var $43=$2;
 var $44=$x;
 var $45=(($43+$44)|0);
 var $46=(($45+28)|0);
 var $47=_readmem16b($46);
 var $48=($47&65535);
 var $49=($48<<1);
 $n=$49;
 var $50=$j;
 var $51=$ssize;
 var $52=((($51)+($50))|0);
 $ssize=$52;
 var $53=$j;
 var $54=((($53)+(2))|0);
 var $55=$m;
 var $56=$n;
 var $57=((($55)+($56))|0);
 var $58=($54|0)<($57|0);
 if($58){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=69;break;
 case 11: 
 var $61=$j;
 var $62=($61|0)>65535;
 if($62){label=14;break;}else{label=12;break;}
 case 12: 
 var $64=$m;
 var $65=($64|0)>65535;
 if($65){label=14;break;}else{label=13;break;}
 case 13: 
 var $67=$n;
 var $68=($67|0)>65535;
 if($68){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=69;break;
 case 15: 
 var $71=$x;
 var $72=((($71)+(25))|0);
 var $73=$2;
 var $74=(($73+$72)|0);
 var $75=HEAP8[($74)];
 var $76=($75&255);
 var $77=($76|0)>64;
 if($77){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=69;break;
 case 17: 
 var $80=$2;
 var $81=$x;
 var $82=(($80+$81)|0);
 var $83=(($82+20)|0);
 var $84=_readmem16b($83);
 var $85=($84&65535);
 var $86=($85|0)!=0;
 if($86){label=18;break;}else{label=20;break;}
 case 18: 
 var $88=$j;
 var $89=($88|0)==0;
 if($89){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=69;break;
 case 20: 
 var $92=$x;
 var $93=((($92)+(25))|0);
 var $94=$2;
 var $95=(($94+$93)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=($97|0)!=0;
 if($98){label=21;break;}else{label=23;break;}
 case 21: 
 var $100=$j;
 var $101=($100|0)==0;
 if($101){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=69;break;
 case 23: 
 var $104=$j;
 var $105=($104|0)!=0;
 if($105){label=24;break;}else{label=25;break;}
 case 24: 
 var $107=$j;
 var $108=((($107)+(1))|0);
 $o=$108;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $111=$k;
 var $112=((($111)+(1))|0);
 $k=$112;
 label=8;break;
 case 27: 
 var $114=$ssize;
 var $115=($114|0)<=2;
 if($115){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=69;break;
 case 29: 
 var $118=$start;
 var $119=((($118)+(930))|0);
 var $120=$2;
 var $121=(($120+$119)|0);
 var $122=HEAP8[($121)];
 var $123=($122&255);
 $l=$123;
 var $124=$l;
 var $125=($124|0)>127;
 if($125){label=31;break;}else{label=30;break;}
 case 30: 
 var $127=$l;
 var $128=($127|0)==0;
 if($128){label=31;break;}else{label=32;break;}
 case 31: 
 $1=-1;
 label=69;break;
 case 32: 
 $k=0;
 $j=0;
 label=33;break;
 case 33: 
 var $132=$j;
 var $133=$l;
 var $134=($132|0)<($133|0);
 if($134){label=34;break;}else{label=40;break;}
 case 34: 
 var $136=$start;
 var $137=((($136)+(932))|0);
 var $138=$j;
 var $139=((($137)+($138))|0);
 var $140=$2;
 var $141=(($140+$139)|0);
 var $142=HEAP8[($141)];
 var $143=($142&255);
 var $144=$k;
 var $145=($143|0)>($144|0);
 if($145){label=35;break;}else{label=36;break;}
 case 35: 
 var $147=$start;
 var $148=((($147)+(932))|0);
 var $149=$j;
 var $150=((($148)+($149))|0);
 var $151=$2;
 var $152=(($151+$150)|0);
 var $153=HEAP8[($152)];
 var $154=($153&255);
 $k=$154;
 label=36;break;
 case 36: 
 var $156=$start;
 var $157=((($156)+(932))|0);
 var $158=$j;
 var $159=((($157)+($158))|0);
 var $160=$2;
 var $161=(($160+$159)|0);
 var $162=HEAP8[($161)];
 var $163=($162&255);
 var $164=($163|0)>127;
 if($164){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=69;break;
 case 38: 
 label=39;break;
 case 39: 
 var $168=$j;
 var $169=((($168)+(1))|0);
 $j=$169;
 label=33;break;
 case 40: 
 var $171=$j;
 var $172=((($171)+(2))|0);
 $j=$172;
 label=41;break;
 case 41: 
 var $174=$j;
 var $175=($174|0)!=128;
 if($175){label=42;break;}else{label=45;break;}
 case 42: 
 var $177=$start;
 var $178=((($177)+(932))|0);
 var $179=$j;
 var $180=((($178)+($179))|0);
 var $181=$2;
 var $182=(($181+$180)|0);
 var $183=HEAP8[($182)];
 var $184=($183&255);
 var $185=($184|0)!=0;
 if($185){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=69;break;
 case 44: 
 var $188=$j;
 var $189=((($188)+(1))|0);
 $j=$189;
 label=41;break;
 case 45: 
 var $191=$k;
 var $192=((($191)+(1))|0);
 $k=$192;
 label=46;break;
 case 46: 
 var $194=$4;
 var $195=$k;
 var $196=($195<<8);
 var $197=((($196)*(3))&-1);
 var $198=((($197)+(1060))|0);
 var $199=((($198)+(2))|0);
 var $200=($194|0)<($199|0);
 if($200){label=47;break;}else{label=48;break;}
 case 47: 
 var $202=$k;
 var $203=($202<<8);
 var $204=((($203)*(3))&-1);
 var $205=((($204)+(1060))|0);
 var $206=((($205)+(2))|0);
 var $207=$4;
 var $208=((($206)-($207))|0);
 $1=$208;
 label=69;break;
 case 48: 
 label=49;break;
 case 49: 
 $j=0;
 label=50;break;
 case 50: 
 var $212=$j;
 var $213=$k;
 var $214=$213<<8;
 var $215=($212|0)<($214|0);
 if($215){label=51;break;}else{label=68;break;}
 case 51: 
 var $217=$start;
 var $218=((($217)+(1060))|0);
 var $219=$j;
 var $220=((($219)*(3))&-1);
 var $221=((($218)+($220))|0);
 $y=$221;
 var $222=$y;
 var $223=$2;
 var $224=(($223+$222)|0);
 var $225=HEAP8[($224)];
 var $226=($225&255);
 var $227=($226|0)>116;
 if($227){label=52;break;}else{label=53;break;}
 case 52: 
 $1=-1;
 label=69;break;
 case 53: 
 var $230=$y;
 var $231=$2;
 var $232=(($231+$230)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=$234&63;
 var $236=($235|0)>36;
 if($236){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=69;break;
 case 55: 
 var $239=$y;
 var $240=((($239)+(1))|0);
 var $241=$2;
 var $242=(($241+$240)|0);
 var $243=HEAP8[($242)];
 var $244=($243&255);
 var $245=$244&15;
 var $246=($245|0)==12;
 if($246){label=56;break;}else{label=58;break;}
 case 56: 
 var $248=$y;
 var $249=((($248)+(2))|0);
 var $250=$2;
 var $251=(($250+$249)|0);
 var $252=HEAP8[($251)];
 var $253=($252&255);
 var $254=($253|0)>64;
 if($254){label=57;break;}else{label=58;break;}
 case 57: 
 $1=-1;
 label=69;break;
 case 58: 
 var $257=$y;
 var $258=((($257)+(1))|0);
 var $259=$2;
 var $260=(($259+$258)|0);
 var $261=HEAP8[($260)];
 var $262=($261&255);
 var $263=$262&15;
 var $264=($263|0)==11;
 if($264){label=59;break;}else{label=61;break;}
 case 59: 
 var $266=$y;
 var $267=((($266)+(2))|0);
 var $268=$2;
 var $269=(($268+$267)|0);
 var $270=HEAP8[($269)];
 var $271=($270&255);
 var $272=($271|0)>127;
 if($272){label=60;break;}else{label=61;break;}
 case 60: 
 $1=-1;
 label=69;break;
 case 61: 
 var $275=$y;
 var $276=((($275)+(1))|0);
 var $277=$2;
 var $278=(($277+$276)|0);
 var $279=HEAP8[($278)];
 var $280=($279&255);
 var $281=$280&15;
 var $282=($281|0)==13;
 if($282){label=62;break;}else{label=64;break;}
 case 62: 
 var $284=$y;
 var $285=((($284)+(2))|0);
 var $286=$2;
 var $287=(($286+$285)|0);
 var $288=HEAP8[($287)];
 var $289=($288&255);
 var $290=($289|0)>64;
 if($290){label=63;break;}else{label=64;break;}
 case 63: 
 $1=-1;
 label=69;break;
 case 64: 
 var $293=$y;
 var $294=$2;
 var $295=(($294+$293)|0);
 var $296=HEAP8[($295)];
 var $297=($296&255);
 var $298=$297>>2;
 var $299=$298&48;
 var $300=$y;
 var $301=((($300)+(2))|0);
 var $302=$2;
 var $303=(($302+$301)|0);
 var $304=HEAP8[($303)];
 var $305=($304&255);
 var $306=$305>>4;
 var $307=$306&15;
 var $308=$299|$307;
 $n=$308;
 var $309=$n;
 var $310=$o;
 var $311=($309|0)>($310|0);
 if($311){label=65;break;}else{label=66;break;}
 case 65: 
 $1=-1;
 label=69;break;
 case 66: 
 label=67;break;
 case 67: 
 var $315=$j;
 var $316=((($315)+(1))|0);
 $j=$316;
 label=50;break;
 case 68: 
 var $318=$3;
 _pw_read_title(0,$318,0);
 $1=0;
 label=69;break;
 case 69: 
 var $320=$1;
 STACKTOP=sp;return $320;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_unic2($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $npat;
 var $maxpat;
 var $ins;
 var $note;
 var $fxt;
 var $fxp;
 var $fine;
 var $tmp=sp;
 var $loop_status;
 var $i;
 var $j;
 var $k;
 var $l;
 var $ssize;
 $1=$in;
 $2=$out;
 $fine=0;
 $loop_status=2;
 $ssize=0;
 var $3=$2;
 var $4=_pw_write_zero($3,20);
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=($6|0)<31;
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=$2;
 var $10=$1;
 var $11=_pw_move_data($9,$10,20);
 var $12=$2;
 _write8($12,0);
 var $13=$2;
 _write8($13,0);
 var $14=$1;
 var $15=_read8($14);
 $c1=$15;
 var $16=$1;
 var $17=_read8($16);
 $c2=$17;
 var $18=$c1;
 var $19=($18&255);
 var $20=$19<<8;
 var $21=$c2;
 var $22=($21&255);
 var $23=((($20)+($22))|0);
 $j=$23;
 var $24=$j;
 var $25=($24|0)!=0;
 if($25){label=4;break;}else{label=8;break;}
 case 4: 
 var $27=$j;
 var $28=($27|0)<256;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 var $30=$c2;
 var $31=($30&255);
 var $32=(((16)-($31))|0);
 var $33=(($32)&255);
 $fine=$33;
 label=7;break;
 case 6: 
 var $35=$c2;
 var $36=($35&255);
 var $37=(((256)-($36))|0);
 var $38=(($37)&255);
 $fine=$38;
 label=7;break;
 case 7: 
 label=9;break;
 case 8: 
 $fine=0;
 label=9;break;
 case 9: 
 var $42=$2;
 var $43=$1;
 var $44=_read16b($43);
 var $45=($44&65535);
 $l=$45;
 var $46=(($45)&65535);
 _write16b($42,$46);
 var $47=$l;
 var $48=($47<<1);
 var $49=$ssize;
 var $50=((($49)+($48))|0);
 $ssize=$50;
 var $51=$1;
 var $52=_read8($51);
 var $53=$2;
 var $54=$fine;
 _write8($53,$54);
 var $55=$2;
 var $56=$1;
 var $57=_read8($56);
 _write8($55,$57);
 var $58=$1;
 var $59=_read16b($58);
 var $60=($59&65535);
 $j=$60;
 var $61=$1;
 var $62=_read16b($61);
 var $63=($62&65535);
 $k=$63;
 var $64=$j;
 var $65=($64<<1);
 var $66=$k;
 var $67=((($65)+($66))|0);
 var $68=$l;
 var $69=($67|0)<=($68|0);
 if($69){label=10;break;}else{label=12;break;}
 case 10: 
 var $71=$j;
 var $72=($71|0)!=0;
 if($72){label=11;break;}else{label=12;break;}
 case 11: 
 $loop_status=1;
 var $74=$j;
 var $75=($74<<1);
 $j=$75;
 label=12;break;
 case 12: 
 var $77=$2;
 var $78=$j;
 var $79=(($78)&65535);
 _write16b($77,$79);
 var $80=$2;
 var $81=$k;
 var $82=(($81)&65535);
 _write16b($80,$82);
 label=13;break;
 case 13: 
 var $84=$i;
 var $85=((($84)+(1))|0);
 $i=$85;
 label=2;break;
 case 14: 
 var $87=$2;
 var $88=$1;
 var $89=_read8($88);
 $npat=$89;
 _write8($87,$89);
 var $90=$2;
 _write8($90,127);
 var $91=$1;
 var $92=_read8($91);
 var $93=(($tmp)|0);
 var $94=$1;
 var $95=_fread($93,128,1,$94);
 var $96=(($tmp)|0);
 var $97=$2;
 var $98=_fwrite($96,128,1,$97);
 $i=0;
 $maxpat=0;
 label=15;break;
 case 15: 
 var $100=$i;
 var $101=($100|0)<128;
 if($101){label=16;break;}else{label=20;break;}
 case 16: 
 var $103=$i;
 var $104=(($tmp+$103)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 var $107=$maxpat;
 var $108=($107&255);
 var $109=($106|0)>($108|0);
 if($109){label=17;break;}else{label=18;break;}
 case 17: 
 var $111=$i;
 var $112=(($tmp+$111)|0);
 var $113=HEAP8[($112)];
 $maxpat=$113;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $116=$i;
 var $117=((($116)+(1))|0);
 $i=$117;
 label=15;break;
 case 20: 
 var $119=$maxpat;
 var $120=((($119)+(1))&255);
 $maxpat=$120;
 var $121=$2;
 _write32b($121,1294879534);
 $i=0;
 label=21;break;
 case 21: 
 var $123=$i;
 var $124=$maxpat;
 var $125=($124&255);
 var $126=($123|0)<($125|0);
 if($126){label=22;break;}else{label=30;break;}
 case 22: 
 $j=0;
 label=23;break;
 case 23: 
 var $129=$j;
 var $130=($129|0)<256;
 if($130){label=24;break;}else{label=28;break;}
 case 24: 
 var $132=$1;
 var $133=_read8($132);
 $c1=$133;
 var $134=$1;
 var $135=_read8($134);
 $c2=$135;
 var $136=$1;
 var $137=_read8($136);
 $c3=$137;
 var $138=$c1;
 var $139=($138&255);
 var $140=$139>>2;
 var $141=$140&16;
 var $142=$c2;
 var $143=($142&255);
 var $144=$143>>4;
 var $145=$144&15;
 var $146=$141|$145;
 var $147=(($146)&255);
 $ins=$147;
 var $148=$c1;
 var $149=($148&255);
 var $150=$149&63;
 var $151=(($150)&255);
 $note=$151;
 var $152=$c2;
 var $153=($152&255);
 var $154=$153&15;
 var $155=(($154)&255);
 $fxt=$155;
 var $156=$c3;
 $fxp=$156;
 var $157=$fxt;
 var $158=($157&255);
 var $159=($158|0)==13;
 if($159){label=25;break;}else{label=26;break;}
 case 25: 
 var $161=$fxp;
 var $162=($161&255);
 var $163=(((($162|0))%(10))&-1);
 var $164=(($163)&255);
 $c4=$164;
 var $165=$fxp;
 var $166=($165&255);
 var $167=(((($166|0))/(10))&-1);
 var $168=(($167)&255);
 $c3=$168;
 var $169=$c3;
 var $170=($169&255);
 var $171=($170<<4);
 var $172=$c4;
 var $173=($172&255);
 var $174=((($171)+($173))|0);
 var $175=(($174)&255);
 $fxp=$175;
 label=26;break;
 case 26: 
 var $177=$ins;
 var $178=($177&255);
 var $179=$178&240;
 var $180=(($179)&255);
 var $181=$j;
 var $182=($181<<2);
 var $183=(($tmp+$182)|0);
 HEAP8[($183)]=$180;
 var $184=$note;
 var $185=($184&255);
 var $186=((4504+($185<<1))|0);
 var $187=(($186)|0);
 var $188=HEAP8[($187)];
 var $189=($188&255);
 var $190=$j;
 var $191=($190<<2);
 var $192=(($tmp+$191)|0);
 var $193=HEAP8[($192)];
 var $194=($193&255);
 var $195=$194|$189;
 var $196=(($195)&255);
 HEAP8[($192)]=$196;
 var $197=$note;
 var $198=($197&255);
 var $199=((4504+($198<<1))|0);
 var $200=(($199+1)|0);
 var $201=HEAP8[($200)];
 var $202=$j;
 var $203=($202<<2);
 var $204=((($203)+(1))|0);
 var $205=(($tmp+$204)|0);
 HEAP8[($205)]=$201;
 var $206=$ins;
 var $207=($206&255);
 var $208=$207<<4;
 var $209=$208&240;
 var $210=$fxt;
 var $211=($210&255);
 var $212=$209|$211;
 var $213=(($212)&255);
 var $214=$j;
 var $215=($214<<2);
 var $216=((($215)+(2))|0);
 var $217=(($tmp+$216)|0);
 HEAP8[($217)]=$213;
 var $218=$fxp;
 var $219=$j;
 var $220=($219<<2);
 var $221=((($220)+(3))|0);
 var $222=(($tmp+$221)|0);
 HEAP8[($222)]=$218;
 label=27;break;
 case 27: 
 var $224=$j;
 var $225=((($224)+(1))|0);
 $j=$225;
 label=23;break;
 case 28: 
 var $227=(($tmp)|0);
 var $228=$2;
 var $229=_fwrite($227,1024,1,$228);
 label=29;break;
 case 29: 
 var $231=$i;
 var $232=((($231)+(1))|0);
 $i=$232;
 label=21;break;
 case 30: 
 var $234=$2;
 var $235=$1;
 var $236=$ssize;
 var $237=_pw_move_data($234,$235,$236);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_wn($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1082;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1082)-($9))|0);
 $1=$10;
 label=13;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13+1080)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=87;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=$2;
 var $20=(($19+1081)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)!=78;
 if($23){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=13;break;
 case 8: 
 var $26=$start;
 var $27=((($26)+(951))|0);
 var $28=$2;
 var $29=(($28+$27)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=($31|0)!=127;
 if($32){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=13;break;
 case 10: 
 var $35=$start;
 var $36=((($35)+(950))|0);
 var $37=$2;
 var $38=(($37+$36)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=($40|0)>127;
 if($41){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=13;break;
 case 12: 
 var $44=$2;
 var $45=$3;
 _pw_read_title($44,$45,20);
 $1=0;
 label=13;break;
 case 13: 
 var $47=$1;
 STACKTOP=sp;return $47;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_wn($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $npat;
 var $max;
 var $tmp=sp;
 var $ssize;
 var $i;
 var $j;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$2;
 var $4=$1;
 var $5=_pw_move_data($3,$4,950);
 $i=0;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=($7|0)<31;
 if($8){label=3;break;}else{label=5;break;}
 case 3: 
 var $10=$1;
 var $11=$i;
 var $12=((($11)*(30))&-1);
 var $13=((($12)+(42))|0);
 var $14=_fseek($10,$13,0);
 var $15=$1;
 var $16=_read16b($15);
 var $17=($16&65535);
 var $18=($17<<1);
 var $19=$ssize;
 var $20=((($19)+($18))|0);
 $ssize=$20;
 label=4;break;
 case 4: 
 var $22=$i;
 var $23=((($22)+(1))|0);
 $i=$23;
 label=2;break;
 case 5: 
 var $25=$1;
 var $26=_fseek($25,950,0);
 var $27=$2;
 var $28=$1;
 var $29=_read8($28);
 $npat=$29;
 _write8($27,$29);
 var $30=(($tmp)|0);
 var $31=$1;
 var $32=_fread($30,129,1,$31);
 var $33=(($tmp)|0);
 var $34=$2;
 var $35=_fwrite($33,129,1,$34);
 var $36=$2;
 _write32b($36,1294879534);
 $i=0;
 $max=0;
 label=6;break;
 case 6: 
 var $38=$i;
 var $39=($38|0)<128;
 if($39){label=7;break;}else{label=11;break;}
 case 7: 
 var $41=$i;
 var $42=((($41)+(1))|0);
 var $43=(($tmp+$42)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=$max;
 var $47=($46&255);
 var $48=($45|0)>($47|0);
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 var $50=$i;
 var $51=((($50)+(1))|0);
 var $52=(($tmp+$51)|0);
 var $53=HEAP8[($52)];
 $max=$53;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $56=$i;
 var $57=((($56)+(1))|0);
 $i=$57;
 label=6;break;
 case 11: 
 var $59=$max;
 var $60=((($59)+(1))&255);
 $max=$60;
 var $61=$1;
 var $62=_fseek($61,1084,0);
 $i=0;
 label=12;break;
 case 12: 
 var $64=$i;
 var $65=$max;
 var $66=($65&255);
 var $67=($64|0)<($66|0);
 if($67){label=13;break;}else{label=19;break;}
 case 13: 
 $j=0;
 label=14;break;
 case 14: 
 var $70=$j;
 var $71=($70|0)<256;
 if($71){label=15;break;}else{label=17;break;}
 case 15: 
 var $73=$1;
 var $74=_read8($73);
 $c1=$74;
 var $75=$1;
 var $76=_read8($75);
 $c2=$76;
 var $77=$1;
 var $78=_read8($77);
 $c3=$78;
 var $79=$1;
 var $80=_read8($79);
 $c4=$80;
 var $81=$2;
 var $82=$c1;
 var $83=($82&255);
 var $84=((($83)*(240))&-1);
 var $85=$c1;
 var $86=($85&255);
 var $87=(((($86|0))/(2))&-1);
 var $88=((4504+($87<<1))|0);
 var $89=(($88)|0);
 var $90=HEAP8[($89)];
 var $91=($90&255);
 var $92=$84|$91;
 var $93=(($92)&255);
 _write8($81,$93);
 var $94=$2;
 var $95=$c1;
 var $96=($95&255);
 var $97=(((($96|0))/(2))&-1);
 var $98=((4504+($97<<1))|0);
 var $99=(($98+1)|0);
 var $100=HEAP8[($99)];
 _write8($94,$100);
 var $101=$2;
 var $102=$c2;
 var $103=($102&255);
 var $104=$103<<4;
 var $105=$104&240;
 var $106=$c3;
 var $107=($106&255);
 var $108=$105|$107;
 var $109=(($108)&255);
 _write8($101,$109);
 var $110=$2;
 var $111=$c4;
 _write8($110,$111);
 label=16;break;
 case 16: 
 var $113=$j;
 var $114=((($113)+(1))|0);
 $j=$114;
 label=14;break;
 case 17: 
 label=18;break;
 case 18: 
 var $117=$i;
 var $118=((($117)+(1))|0);
 $i=$118;
 label=12;break;
 case 19: 
 var $120=$2;
 var $121=$1;
 var $122=$ssize;
 var $123=_pw_move_data($120,$121,$122);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_xann($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $l;
 var $m;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $i=0;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<2048;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((2048)-($9))|0);
 $1=$10;
 label=37;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$i;
 var $14=((($13)+(3))|0);
 var $15=$2;
 var $16=(($15+$14)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=($18|0)!=60;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=37;break;
 case 7: 
 $l=0;
 label=8;break;
 case 8: 
 var $23=$l;
 var $24=($23|0)<128;
 if($24){label=9;break;}else{label=14;break;}
 case 9: 
 var $26=$start;
 var $27=$l;
 var $28=($27<<2);
 var $29=((($26)+($28))|0);
 var $30=$2;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=$33<<24;
 var $35=$start;
 var $36=$l;
 var $37=($36<<2);
 var $38=((($35)+($37))|0);
 var $39=((($38)+(1))|0);
 var $40=$2;
 var $41=(($40+$39)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=$43<<16;
 var $45=((($34)+($44))|0);
 var $46=$start;
 var $47=$l;
 var $48=($47<<2);
 var $49=((($46)+($48))|0);
 var $50=((($49)+(2))|0);
 var $51=$2;
 var $52=(($51+$50)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=$54<<8;
 var $56=((($45)+($55))|0);
 var $57=$start;
 var $58=$l;
 var $59=($58<<2);
 var $60=((($57)+($59))|0);
 var $61=((($60)+(3))|0);
 var $62=$2;
 var $63=(($62+$61)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=((($56)+($65))|0);
 $j=$66;
 var $67=$j;
 var $68=(((($67|0))/(4))&-1);
 var $69=($68<<2);
 $k=$69;
 var $70=$k;
 var $71=$j;
 var $72=($70|0)!=($71|0);
 if($72){label=11;break;}else{label=10;break;}
 case 10: 
 var $74=$j;
 var $75=($74|0)>132156;
 if($75){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=37;break;
 case 12: 
 label=13;break;
 case 13: 
 var $79=$l;
 var $80=((($79)+(1))|0);
 $l=$80;
 label=8;break;
 case 14: 
 $j=0;
 label=15;break;
 case 15: 
 var $83=$j;
 var $84=($83|0)<64;
 if($84){label=16;break;}else{label=21;break;}
 case 16: 
 var $86=$start;
 var $87=((($86)+(3))|0);
 var $88=$j;
 var $89=($88<<2);
 var $90=((($87)+($89))|0);
 var $91=$2;
 var $92=(($91+$90)|0);
 var $93=HEAP8[($92)];
 var $94=($93&255);
 var $95=($94|0)!=60;
 if($95){label=17;break;}else{label=19;break;}
 case 17: 
 var $97=$start;
 var $98=((($97)+(3))|0);
 var $99=$j;
 var $100=($99<<2);
 var $101=((($98)+($100))|0);
 var $102=$2;
 var $103=(($102+$101)|0);
 var $104=HEAP8[($103)];
 var $105=($104&255);
 var $106=($105|0)!=0;
 if($106){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=37;break;
 case 19: 
 label=20;break;
 case 20: 
 var $110=$j;
 var $111=((($110)+(1))|0);
 $j=$111;
 label=15;break;
 case 21: 
 $j=0;
 label=22;break;
 case 22: 
 var $114=$j;
 var $115=($114|0)<31;
 if($115){label=23;break;}else{label=27;break;}
 case 23: 
 var $117=$start;
 var $118=((($117)+(519))|0);
 var $119=$j;
 var $120=($119<<4);
 var $121=((($118)+($120))|0);
 var $122=$2;
 var $123=(($122+$121)|0);
 var $124=HEAP8[($123)];
 var $125=($124&255);
 var $126=($125|0)>64;
 if($126){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=37;break;
 case 25: 
 label=26;break;
 case 26: 
 var $130=$j;
 var $131=((($130)+(1))|0);
 $j=$131;
 label=22;break;
 case 27: 
 $l=0;
 label=28;break;
 case 28: 
 var $134=$l;
 var $135=($134|0)<30;
 if($135){label=29;break;}else{label=36;break;}
 case 29: 
 var $137=$2;
 var $138=$start;
 var $139=(($137+$138)|0);
 var $140=(($139+526)|0);
 var $141=$l;
 var $142=($141<<4);
 var $143=(($140+$142)|0);
 var $144=_readmem32b($143);
 $k=$144;
 var $145=$2;
 var $146=$start;
 var $147=(($145+$146)|0);
 var $148=(($147+524)|0);
 var $149=$l;
 var $150=($149<<4);
 var $151=(($148+$150)|0);
 var $152=_readmem16b($151);
 var $153=($152&65535);
 var $154=($153<<1);
 $j=$154;
 var $155=$2;
 var $156=$start;
 var $157=(($155+$156)|0);
 var $158=(($157+520)|0);
 var $159=$l;
 var $160=((($159)+(1))|0);
 var $161=($160<<4);
 var $162=(($158+$161)|0);
 var $163=_readmem32b($162);
 $m=$163;
 var $164=$k;
 var $165=($164|0)<2108;
 if($165){label=31;break;}else{label=30;break;}
 case 30: 
 var $167=$m;
 var $168=($167|0)<2108;
 if($168){label=31;break;}else{label=32;break;}
 case 31: 
 $1=-1;
 label=37;break;
 case 32: 
 var $171=$k;
 var $172=$m;
 var $173=($171|0)>($172|0);
 if($173){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=37;break;
 case 34: 
 label=35;break;
 case 35: 
 var $177=$l;
 var $178=((($177)+(1))|0);
 $l=$178;
 label=28;break;
 case 36: 
 var $180=$3;
 _pw_read_title(0,$180,0);
 $1=0;
 label=37;break;
 case 37: 
 var $182=$1;
 STACKTOP=sp;return $182;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_xann($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c5;
 var $ptable=sp;
 var $pat;
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $fine;
 var $vol;
 var $pdata=(sp)+(128);
 var $i;
 var $j;
 var $l;
 var $size;
 var $ssize;
 var $lsize;
 $1=$in;
 $2=$out;
 $pat=0;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$pdata;
 _memset($4, 0, 1025)|0;
 var $5=$2;
 var $6=_pw_write_zero($5,20);
 var $7=$1;
 var $8=_fseek($7,518,0);
 $i=0;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=($10|0)<31;
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$2;
 var $14=_pw_write_zero($13,22);
 var $15=$1;
 var $16=_read8($15);
 $fine=$16;
 var $17=$1;
 var $18=_read8($17);
 $vol=$18;
 var $19=$1;
 var $20=_read32b($19);
 $j=$20;
 var $21=$1;
 var $22=_read16b($21);
 var $23=($22&65535);
 $lsize=$23;
 var $24=$1;
 var $25=_read32b($24);
 $l=$25;
 var $26=$2;
 var $27=$1;
 var $28=_read16b($27);
 var $29=($28&65535);
 $size=$29;
 var $30=(($29)&65535);
 _write16b($26,$30);
 var $31=$size;
 var $32=($31<<1);
 var $33=$ssize;
 var $34=((($33)+($32))|0);
 $ssize=$34;
 var $35=$j;
 var $36=$l;
 var $37=((($35)-($36))|0);
 $j=$37;
 var $38=$2;
 var $39=$fine;
 _write8($38,$39);
 var $40=$2;
 var $41=$vol;
 _write8($40,$41);
 var $42=$2;
 var $43=$j;
 var $44=(((($43|0))/(2))&-1);
 var $45=(($44)&65535);
 _write16b($42,$45);
 var $46=$2;
 var $47=$lsize;
 var $48=(($47)&65535);
 _write16b($46,$48);
 var $49=$1;
 var $50=_read16b($49);
 label=4;break;
 case 4: 
 var $52=$i;
 var $53=((($52)+(1))|0);
 $i=$53;
 label=2;break;
 case 5: 
 var $55=$1;
 var $56=_fseek($55,0,0);
 $c5=0;
 $pat=0;
 label=6;break;
 case 6: 
 var $58=$c5;
 var $59=($58&255);
 var $60=($59|0)<128;
 if($60){label=7;break;}else{label=13;break;}
 case 7: 
 var $62=$1;
 var $63=_read32b($62);
 $l=$63;
 var $64=$l;
 var $65=($64|0)==0;
 if($65){label=8;break;}else{label=9;break;}
 case 8: 
 label=13;break;
 case 9: 
 var $68=$l;
 var $69=((($68)-(60))|0);
 var $70=(((($69|0))/(1024))&-1);
 var $71=((($70)-(1))|0);
 var $72=(($71)&255);
 var $73=$c5;
 var $74=($73&255);
 var $75=(($ptable+$74)|0);
 HEAP8[($75)]=$72;
 var $76=$c5;
 var $77=($76&255);
 var $78=(($ptable+$77)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=$pat;
 var $82=($81&255);
 var $83=($80|0)>($82|0);
 if($83){label=10;break;}else{label=11;break;}
 case 10: 
 var $85=$c5;
 var $86=($85&255);
 var $87=(($ptable+$86)|0);
 var $88=HEAP8[($87)];
 $pat=$88;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $91=$c5;
 var $92=((($91)+(1))&255);
 $c5=$92;
 label=6;break;
 case 13: 
 var $94=$pat;
 var $95=((($94)+(1))&255);
 $pat=$95;
 var $96=$2;
 var $97=$c5;
 _write8($96,$97);
 var $98=$2;
 _write8($98,127);
 var $99=(($ptable)|0);
 var $100=$2;
 var $101=_fwrite($99,128,1,$100);
 var $102=$2;
 _write32b($102,1294879534);
 var $103=$1;
 var $104=_fseek($103,1084,0);
 $i=0;
 label=14;break;
 case 14: 
 var $106=$i;
 var $107=$pat;
 var $108=($107&255);
 var $109=($106|0)<($108|0);
 if($109){label=15;break;}else{label=49;break;}
 case 15: 
 $j=0;
 label=16;break;
 case 16: 
 var $112=$j;
 var $113=($112|0)<256;
 if($113){label=17;break;}else{label=47;break;}
 case 17: 
 var $115=$1;
 var $116=_read8($115);
 var $117=($116&255);
 var $118=$117>>3;
 var $119=$118&31;
 var $120=(($119)&255);
 $ins=$120;
 var $121=$1;
 var $122=_read8($121);
 $note=$122;
 var $123=$1;
 var $124=_read8($123);
 $fxt=$124;
 var $125=$1;
 var $126=_read8($125);
 $fxp=$126;
 var $127=$fxt;
 var $128=($127&255);
 switch(($128|0)){case 0:{ label=18;break;}case 4:{ label=19;break;}case 8:{ label=20;break;}case 12:{ label=21;break;}case 16:{ label=22;break;}case 20:{ label=23;break;}case 24:{ label=24;break;}case 28:{ label=25;break;}case 36:{ label=26;break;}case 40:{ label=27;break;}case 44:{ label=28;break;}case 56:{ label=29;break;}case 60:{ label=30;break;}case 64:{ label=31;break;}case 68:{ label=32;break;}case 72:{ label=33;break;}case 76:{ label=34;break;}case 80:{ label=35;break;}case 88:{ label=36;break;}case 92:{ label=37;break;}case 96:{ label=38;break;}case 132:{ label=39;break;}case 136:{ label=40;break;}case 140:{ label=41;break;}case 148:{ label=42;break;}case 152:{ label=43;break;}default:{label=44;break;}}break;
 case 18: 
 $fxt=0;
 label=45;break;
 case 19: 
 $fxt=0;
 label=45;break;
 case 20: 
 $fxt=1;
 label=45;break;
 case 21: 
 $fxt=2;
 label=45;break;
 case 22: 
 $fxt=3;
 label=45;break;
 case 23: 
 $fxt=3;
 label=45;break;
 case 24: 
 $fxt=4;
 label=45;break;
 case 25: 
 $fxt=4;
 label=45;break;
 case 26: 
 $fxt=5;
 label=45;break;
 case 27: 
 $fxt=6;
 var $139=$fxp;
 var $140=($139&255);
 var $141=$140<<4;
 var $142=$141&240;
 var $143=(($142)&255);
 $c1=$143;
 var $144=$fxp;
 var $145=($144&255);
 var $146=$145>>4;
 var $147=$146&15;
 var $148=(($147)&255);
 $c2=$148;
 var $149=$c1;
 var $150=($149&255);
 var $151=$c2;
 var $152=($151&255);
 var $153=$150|$152;
 var $154=(($153)&255);
 $fxp=$154;
 label=45;break;
 case 28: 
 $fxt=6;
 label=45;break;
 case 29: 
 $fxt=9;
 label=45;break;
 case 30: 
 $fxt=10;
 var $158=$fxp;
 var $159=($158&255);
 var $160=$159<<4;
 var $161=$160&240;
 var $162=(($161)&255);
 $c1=$162;
 var $163=$fxp;
 var $164=($163&255);
 var $165=$164>>4;
 var $166=$165&15;
 var $167=(($166)&255);
 $c2=$167;
 var $168=$c1;
 var $169=($168&255);
 var $170=$c2;
 var $171=($170&255);
 var $172=$169|$171;
 var $173=(($172)&255);
 $fxp=$173;
 label=45;break;
 case 31: 
 $fxt=10;
 label=45;break;
 case 32: 
 $fxt=11;
 label=45;break;
 case 33: 
 $fxt=12;
 label=45;break;
 case 34: 
 $fxt=13;
 label=45;break;
 case 35: 
 $fxt=15;
 label=45;break;
 case 36: 
 $fxt=14;
 $fxp=1;
 label=45;break;
 case 37: 
 $fxt=14;
 var $181=$fxp;
 var $182=($181&255);
 var $183=$182|16;
 var $184=(($183)&255);
 $fxp=$184;
 label=45;break;
 case 38: 
 $fxt=14;
 var $186=$fxp;
 var $187=($186&255);
 var $188=$187|32;
 var $189=(($188)&255);
 $fxp=$189;
 label=45;break;
 case 39: 
 $fxt=14;
 var $191=$fxp;
 var $192=($191&255);
 var $193=$192|144;
 var $194=(($193)&255);
 $fxp=$194;
 label=45;break;
 case 40: 
 $fxt=14;
 var $196=$fxp;
 var $197=($196&255);
 var $198=$197|160;
 var $199=(($198)&255);
 $fxp=$199;
 label=45;break;
 case 41: 
 $fxt=14;
 var $201=$fxp;
 var $202=($201&255);
 var $203=$202|176;
 var $204=(($203)&255);
 $fxp=$204;
 label=45;break;
 case 42: 
 $fxt=14;
 var $206=$fxp;
 var $207=($206&255);
 var $208=$207|208;
 var $209=(($208)&255);
 $fxp=$209;
 label=45;break;
 case 43: 
 $fxt=14;
 var $211=$fxp;
 var $212=($211&255);
 var $213=$212|224;
 var $214=(($213)&255);
 $fxp=$214;
 label=45;break;
 case 44: 
 $fxp=0;
 $fxt=0;
 label=45;break;
 case 45: 
 var $217=$ins;
 var $218=($217&255);
 var $219=$218&240;
 var $220=(($219)&255);
 var $221=$j;
 var $222=($221<<2);
 var $223=(($pdata+$222)|0);
 HEAP8[($223)]=$220;
 var $224=$note;
 var $225=($224&255);
 var $226=(((($225|0))/(2))&-1);
 var $227=((4504+($226<<1))|0);
 var $228=(($227)|0);
 var $229=HEAP8[($228)];
 var $230=($229&255);
 var $231=$j;
 var $232=($231<<2);
 var $233=(($pdata+$232)|0);
 var $234=HEAP8[($233)];
 var $235=($234&255);
 var $236=$235|$230;
 var $237=(($236)&255);
 HEAP8[($233)]=$237;
 var $238=$note;
 var $239=($238&255);
 var $240=(((($239|0))/(2))&-1);
 var $241=((4504+($240<<1))|0);
 var $242=(($241+1)|0);
 var $243=HEAP8[($242)];
 var $244=$j;
 var $245=($244<<2);
 var $246=((($245)+(1))|0);
 var $247=(($pdata+$246)|0);
 HEAP8[($247)]=$243;
 var $248=$ins;
 var $249=($248&255);
 var $250=$249<<4;
 var $251=$250&240;
 var $252=(($251)&255);
 var $253=$j;
 var $254=($253<<2);
 var $255=((($254)+(2))|0);
 var $256=(($pdata+$255)|0);
 HEAP8[($256)]=$252;
 var $257=$fxt;
 var $258=($257&255);
 var $259=$j;
 var $260=($259<<2);
 var $261=((($260)+(2))|0);
 var $262=(($pdata+$261)|0);
 var $263=HEAP8[($262)];
 var $264=($263&255);
 var $265=$264|$258;
 var $266=(($265)&255);
 HEAP8[($262)]=$266;
 var $267=$fxp;
 var $268=$j;
 var $269=($268<<2);
 var $270=((($269)+(3))|0);
 var $271=(($pdata+$270)|0);
 HEAP8[($271)]=$267;
 label=46;break;
 case 46: 
 var $273=$j;
 var $274=((($273)+(1))|0);
 $j=$274;
 label=16;break;
 case 47: 
 var $276=(($pdata)|0);
 var $277=$2;
 var $278=_fwrite($276,1024,1,$277);
 label=48;break;
 case 48: 
 var $280=$i;
 var $281=((($280)+(1))|0);
 $i=$281;
 label=14;break;
 case 49: 
 var $283=$2;
 var $284=$1;
 var $285=$ssize;
 var $286=_pw_move_data($283,$284,$285);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_zen($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<505;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((505)-($9))|0);
 $1=$10;
 label=37;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=_readmem32b($15);
 $l=$16;
 var $17=$l;
 var $18=($17|0)<502;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=$l;
 var $21=($20|0)>2163190;
 if($21){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=37;break;
 case 8: 
 $k=0;
 label=9;break;
 case 9: 
 var $25=$k;
 var $26=($25|0)<31;
 if($26){label=10;break;}else{label=16;break;}
 case 10: 
 var $28=$start;
 var $29=((($28)+(9))|0);
 var $30=$k;
 var $31=($30<<4);
 var $32=((($29)+($31))|0);
 var $33=$2;
 var $34=(($33+$32)|0);
 var $35=HEAP8[($34)];
 var $36=($35&255);
 var $37=($36|0)>64;
 if($37){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=37;break;
 case 12: 
 var $40=$2;
 var $41=$start;
 var $42=(($40+$41)|0);
 var $43=(($42+6)|0);
 var $44=$k;
 var $45=($44<<4);
 var $46=(($43+$45)|0);
 var $47=_readmem16b($46);
 var $48=($47&65535);
 var $49=(((($48|0))%(72))&-1);
 var $50=($49|0)!=0;
 if($50){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=37;break;
 case 14: 
 label=15;break;
 case 15: 
 var $54=$k;
 var $55=((($54)+(1))|0);
 $k=$55;
 label=9;break;
 case 16: 
 $n=0;
 $k=0;
 label=17;break;
 case 17: 
 var $58=$k;
 var $59=($58|0)<31;
 if($59){label=18;break;}else{label=27;break;}
 case 18: 
 var $61=$2;
 var $62=$start;
 var $63=(($61+$62)|0);
 var $64=(($63+10)|0);
 var $65=$k;
 var $66=($65<<4);
 var $67=(($64+$66)|0);
 var $68=_readmem16b($67);
 var $69=($68&65535);
 var $70=($69<<1);
 $o=$70;
 var $71=$2;
 var $72=$start;
 var $73=(($71+$72)|0);
 var $74=(($73+12)|0);
 var $75=$k;
 var $76=($75<<4);
 var $77=(($74+$76)|0);
 var $78=_readmem16b($77);
 var $79=($78&65535);
 var $80=($79<<1);
 $m=$80;
 var $81=$2;
 var $82=$start;
 var $83=(($81+$82)|0);
 var $84=(($83+14)|0);
 var $85=$k;
 var $86=($85<<4);
 var $87=(($84+$86)|0);
 var $88=_readmem32b($87);
 $j=$88;
 var $89=$o;
 var $90=($89|0)>65535;
 if($90){label=20;break;}else{label=19;break;}
 case 19: 
 var $92=$m;
 var $93=($92|0)>65535;
 if($93){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=37;break;
 case 21: 
 var $96=$j;
 var $97=$l;
 var $98=($96|0)<($97|0);
 if($98){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=37;break;
 case 23: 
 var $101=$j;
 var $102=$n;
 var $103=($101|0)>($102|0);
 if($103){label=24;break;}else{label=25;break;}
 case 24: 
 var $105=$j;
 $n=$105;
 var $106=$o;
 $ssize=$106;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $109=$k;
 var $110=((($109)+(1))|0);
 $k=$110;
 label=17;break;
 case 27: 
 var $112=$start;
 var $113=((($112)+(5))|0);
 var $114=$2;
 var $115=(($114+$113)|0);
 var $116=HEAP8[($115)];
 var $117=($116&255);
 $j=$117;
 var $118=$j;
 var $119=($118|0)>127;
 if($119){label=29;break;}else{label=28;break;}
 case 28: 
 var $121=$j;
 var $122=($121|0)==0;
 if($122){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=37;break;
 case 30: 
 label=31;break;
 case 31: 
 var $126=$4;
 var $127=$start;
 var $128=$l;
 var $129=((($127)+($128))|0);
 var $130=$j;
 var $131=($130<<2);
 var $132=((($129)+($131))|0);
 var $133=((($132)+(4))|0);
 var $134=($126|0)<($133|0);
 if($134){label=32;break;}else{label=33;break;}
 case 32: 
 var $136=$start;
 var $137=$l;
 var $138=((($136)+($137))|0);
 var $139=$j;
 var $140=($139<<2);
 var $141=((($138)+($140))|0);
 var $142=((($141)+(4))|0);
 var $143=$4;
 var $144=((($142)-($143))|0);
 $1=$144;
 label=37;break;
 case 33: 
 label=34;break;
 case 34: 
 var $147=$2;
 var $148=$start;
 var $149=(($147+$148)|0);
 var $150=$l;
 var $151=(($149+$150)|0);
 var $152=$j;
 var $153=($152<<2);
 var $154=(($151+$153)|0);
 var $155=_readmem32b($154);
 var $156=($155|0)!=-1;
 if($156){label=35;break;}else{label=36;break;}
 case 35: 
 $1=-1;
 label=37;break;
 case 36: 
 var $159=$3;
 _pw_read_title(0,$159,0);
 $1=0;
 label=37;break;
 case 37: 
 var $161=$1;
 STACKTOP=sp;return $161;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_zen($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $finetune;
 var $vol;
 var $pat_pos;
 var $pat_max;
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $pat=sp;
 var $ptable=(sp)+(1024);
 var $size;
 var $ssize;
 var $paddr=(sp)+(1152);
 var $paddr_Real=(sp)+(1664);
 var $ptable_addr;
 var $sdata_addr;
 var $i;
 var $j;
 var $k;
 $1=$in;
 $2=$out;
 $ssize=0;
 $sdata_addr=999999;
 var $3=$paddr;
 _memset($3, 0, 512)|0;
 var $4=$paddr_Real;
 _memset($4, 0, 512)|0;
 var $5=$ptable;
 _memset($5, 0, 128)|0;
 var $6=$1;
 var $7=_read32b($6);
 $ptable_addr=$7;
 var $8=$1;
 var $9=_read8($8);
 $pat_max=$9;
 var $10=$1;
 var $11=_read8($10);
 $pat_pos=$11;
 var $12=$2;
 var $13=_pw_write_zero($12,20);
 $i=0;
 label=2;break;
 case 2: 
 var $15=$i;
 var $16=($15|0)<31;
 if($16){label=3;break;}else{label=7;break;}
 case 3: 
 var $18=$2;
 var $19=_pw_write_zero($18,22);
 var $20=$1;
 var $21=_read16b($20);
 var $22=($21&65535);
 var $23=(((($22|0))/(72))&-1);
 var $24=(($23)&255);
 $finetune=$24;
 var $25=$1;
 var $26=_read8($25);
 var $27=$1;
 var $28=_read8($27);
 $vol=$28;
 var $29=$2;
 var $30=$1;
 var $31=_read16b($30);
 var $32=($31&65535);
 $size=$32;
 var $33=(($32)&65535);
 _write16b($29,$33);
 var $34=$size;
 var $35=($34<<1);
 var $36=$ssize;
 var $37=((($36)+($35))|0);
 $ssize=$37;
 var $38=$2;
 var $39=$finetune;
 _write8($38,$39);
 var $40=$2;
 var $41=$vol;
 _write8($40,$41);
 var $42=$1;
 var $43=_read16b($42);
 var $44=($43&65535);
 $size=$44;
 var $45=$1;
 var $46=_read32b($45);
 $k=$46;
 var $47=$k;
 var $48=$sdata_addr;
 var $49=($47|0)<($48|0);
 if($49){label=4;break;}else{label=5;break;}
 case 4: 
 var $51=$k;
 $sdata_addr=$51;
 label=5;break;
 case 5: 
 var $53=$1;
 var $54=_read32b($53);
 var $55=$k;
 var $56=((($54)-($55))|0);
 var $57=(((($56>>>0))/(2))&-1);
 $j=$57;
 var $58=$2;
 var $59=$j;
 var $60=(($59)&65535);
 _write16b($58,$60);
 var $61=$2;
 var $62=$size;
 var $63=(($62)&65535);
 _write16b($61,$63);
 label=6;break;
 case 6: 
 var $65=$i;
 var $66=((($65)+(1))|0);
 $i=$66;
 label=2;break;
 case 7: 
 var $68=$2;
 var $69=$pat_pos;
 _write8($68,$69);
 var $70=$2;
 _write8($70,127);
 var $71=$1;
 var $72=$ptable_addr;
 var $73=_fseek($71,$72,0);
 $i=0;
 label=8;break;
 case 8: 
 var $75=$i;
 var $76=$pat_pos;
 var $77=($76&255);
 var $78=($75|0)<($77|0);
 if($78){label=9;break;}else{label=11;break;}
 case 9: 
 var $80=$1;
 var $81=_read32b($80);
 var $82=$i;
 var $83=(($paddr+($82<<2))|0);
 HEAP32[(($83)>>2)]=$81;
 label=10;break;
 case 10: 
 var $85=$i;
 var $86=((($85)+(1))|0);
 $i=$86;
 label=8;break;
 case 11: 
 $c4=0;
 $i=0;
 label=12;break;
 case 12: 
 var $89=$i;
 var $90=$pat_pos;
 var $91=($90&255);
 var $92=($89|0)<($91|0);
 if($92){label=13;break;}else{label=25;break;}
 case 13: 
 var $94=$i;
 var $95=($94|0)==0;
 if($95){label=14;break;}else{label=15;break;}
 case 14: 
 var $97=(($ptable)|0);
 HEAP8[($97)]=0;
 var $98=(($paddr)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($paddr_Real)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=$c4;
 var $102=((($101)+(1))&255);
 $c4=$102;
 label=24;break;
 case 15: 
 $j=0;
 label=16;break;
 case 16: 
 var $105=$j;
 var $106=$i;
 var $107=($105|0)<($106|0);
 if($107){label=17;break;}else{label=21;break;}
 case 17: 
 var $109=$i;
 var $110=(($paddr+($109<<2))|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$j;
 var $113=(($paddr+($112<<2))|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($111|0)==($114|0);
 if($115){label=18;break;}else{label=19;break;}
 case 18: 
 var $117=$j;
 var $118=(($ptable+$117)|0);
 var $119=HEAP8[($118)];
 var $120=$i;
 var $121=(($ptable+$120)|0);
 HEAP8[($121)]=$119;
 label=21;break;
 case 19: 
 label=20;break;
 case 20: 
 var $124=$j;
 var $125=((($124)+(1))|0);
 $j=$125;
 label=16;break;
 case 21: 
 var $127=$j;
 var $128=$i;
 var $129=($127|0)==($128|0);
 if($129){label=22;break;}else{label=23;break;}
 case 22: 
 var $131=$i;
 var $132=(($paddr+($131<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$c4;
 var $135=($134&255);
 var $136=(($paddr_Real+($135<<2))|0);
 HEAP32[(($136)>>2)]=$133;
 var $137=$c4;
 var $138=$i;
 var $139=(($ptable+$138)|0);
 HEAP8[($139)]=$137;
 var $140=$c4;
 var $141=((($140)+(1))&255);
 $c4=$141;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $144=$i;
 var $145=((($144)+(1))|0);
 $i=$145;
 label=12;break;
 case 25: 
 var $147=(($ptable)|0);
 var $148=$2;
 var $149=_fwrite($147,128,1,$148);
 var $150=$2;
 _write32b($150,1294879534);
 $i=0;
 label=26;break;
 case 26: 
 var $152=$i;
 var $153=$pat_max;
 var $154=($153&255);
 var $155=($152|0)<=($154|0);
 if($155){label=27;break;}else{label=33;break;}
 case 27: 
 var $157=$pat;
 _memset($157, 0, 1024)|0;
 var $158=$1;
 var $159=$i;
 var $160=(($paddr_Real+($159<<2))|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=_fseek($158,$161,0);
 $j=0;
 label=28;break;
 case 28: 
 var $164=$j;
 var $165=($164|0)<256;
 if($165){label=29;break;}else{label=31;break;}
 case 29: 
 var $167=$1;
 var $168=_read8($167);
 $c1=$168;
 var $169=$1;
 var $170=_read8($169);
 $c2=$170;
 var $171=$1;
 var $172=_read8($171);
 $c3=$172;
 var $173=$1;
 var $174=_read8($173);
 $c4=$174;
 var $175=$c2;
 var $176=($175&255);
 var $177=$176&127;
 var $178=(((($177|0))/(2))&-1);
 var $179=(($178)&255);
 $note=$179;
 var $180=$c4;
 $fxp=$180;
 var $181=$c2;
 var $182=($181&255);
 var $183=$182<<4;
 var $184=$183&16;
 var $185=$c3;
 var $186=($185&255);
 var $187=$186>>4;
 var $188=$187&15;
 var $189=$184|$188;
 var $190=(($189)&255);
 $ins=$190;
 var $191=$c3;
 var $192=($191&255);
 var $193=$192&15;
 var $194=(($193)&255);
 $fxt=$194;
 var $195=$c1;
 var $196=($195&255);
 $k=$196;
 var $197=$ins;
 var $198=($197&255);
 var $199=$198&240;
 var $200=(($199)&255);
 var $201=$k;
 var $202=($201<<2);
 var $203=(($pat+$202)|0);
 HEAP8[($203)]=$200;
 var $204=$note;
 var $205=($204&255);
 var $206=((4504+($205<<1))|0);
 var $207=(($206)|0);
 var $208=HEAP8[($207)];
 var $209=($208&255);
 var $210=$k;
 var $211=($210<<2);
 var $212=(($pat+$211)|0);
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=$214|$209;
 var $216=(($215)&255);
 HEAP8[($212)]=$216;
 var $217=$note;
 var $218=($217&255);
 var $219=((4504+($218<<1))|0);
 var $220=(($219+1)|0);
 var $221=HEAP8[($220)];
 var $222=$k;
 var $223=($222<<2);
 var $224=((($223)+(1))|0);
 var $225=(($pat+$224)|0);
 HEAP8[($225)]=$221;
 var $226=$fxt;
 var $227=($226&255);
 var $228=$ins;
 var $229=($228&255);
 var $230=$229<<4;
 var $231=$230&240;
 var $232=$227|$231;
 var $233=(($232)&255);
 var $234=$k;
 var $235=($234<<2);
 var $236=((($235)+(2))|0);
 var $237=(($pat+$236)|0);
 HEAP8[($237)]=$233;
 var $238=$fxp;
 var $239=$k;
 var $240=($239<<2);
 var $241=((($240)+(3))|0);
 var $242=(($pat+$241)|0);
 HEAP8[($242)]=$238;
 var $243=$c1;
 var $244=($243&255);
 $j=$244;
 label=30;break;
 case 30: 
 var $246=$j;
 var $247=((($246)+(1))|0);
 $j=$247;
 label=28;break;
 case 31: 
 var $249=(($pat)|0);
 var $250=$2;
 var $251=_fwrite($249,1024,1,$250);
 label=32;break;
 case 32: 
 var $253=$i;
 var $254=((($253)+(1))|0);
 $i=$254;
 label=26;break;
 case 33: 
 var $256=$1;
 var $257=$sdata_addr;
 var $258=_fseek($256,$257,0);
 var $259=$2;
 var $260=$1;
 var $261=$ssize;
 var $262=_pw_move_data($259,$260,$261);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _psm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1347636734;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,60);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _psm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $c;
 var $r;
 var $i;
 var $event;
 var $buf=sp;
 var $p_ord;
 var $p_chn;
 var $p_pat;
 var $p_ins;
 var $p_smp=(sp)+(1024);
 var $type;
 var $ver;
 var $mode;
 var $flags;
 var $c2spd;
 var $finetune;
 var $len;
 var $b;
 var $rows;
 var $chan;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=(($buf)|0);
 var $15=$3;
 var $16=_hio_read($14,1,60,$15);
 var $17=$mod;
 var $18=(($17)|0);
 var $19=(($18)|0);
 var $20=(($buf)|0);
 var $21=_strlcpy($19,$20,64);
 var $22=$3;
 var $23=_hio_read8($22);
 var $24=($23&255);
 $type=$24;
 var $25=$3;
 var $26=_hio_read8($25);
 var $27=($26&255);
 $ver=$27;
 var $28=$3;
 var $29=_hio_read8($28);
 var $30=($29&255);
 $mode=$30;
 var $31=$type;
 var $32=$31&1;
 var $33=($32|0)!=0;
 if($33){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=61;break;
 case 5: 
 var $36=$2;
 var $37=$ver;
 var $38=$37&240;
 var $39=$38>>4;
 var $40=$ver;
 var $41=$40&15;
 _set_type($36,26152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$39,HEAP32[(((tempVarArgs)+(8))>>2)]=$41,tempVarArgs)); STACKTOP=tempVarArgs;
 var $42=$3;
 var $43=_hio_read8($42);
 var $44=($43&255);
 var $45=$mod;
 var $46=(($45+148)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$3;
 var $48=_hio_read8($47);
 var $49=($48&255);
 var $50=$mod;
 var $51=(($50+152)|0);
 HEAP32[(($51)>>2)]=$49;
 var $52=$3;
 var $53=_hio_read8($52);
 var $54=$3;
 var $55=_hio_read16l($54);
 var $56=$3;
 var $57=_hio_read16l($56);
 var $58=($57&65535);
 var $59=$mod;
 var $60=(($59+156)|0);
 HEAP32[(($60)>>2)]=$58;
 var $61=$3;
 var $62=_hio_read16l($61);
 var $63=($62&65535);
 var $64=$mod;
 var $65=(($64+128)|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=$3;
 var $67=_hio_read16l($66);
 var $68=($67&65535);
 var $69=$mod;
 var $70=(($69+140)|0);
 HEAP32[(($70)>>2)]=$68;
 var $71=$3;
 var $72=_hio_read16l($71);
 var $73=$3;
 var $74=_hio_read16l($73);
 var $75=($74&65535);
 var $76=$mod;
 var $77=(($76+136)|0);
 HEAP32[(($77)>>2)]=$75;
 var $78=$mod;
 var $79=(($78+140)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$mod;
 var $82=(($81+144)|0);
 HEAP32[(($82)>>2)]=$80;
 var $83=$mod;
 var $84=(($83+128)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$mod;
 var $87=(($86+136)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(Math_imul($85,$88)|0);
 var $90=$mod;
 var $91=(($90+132)|0);
 HEAP32[(($91)>>2)]=$89;
 var $92=$3;
 var $93=_hio_read32l($92);
 $p_ord=$93;
 var $94=$3;
 var $95=_hio_read32l($94);
 $p_chn=$95;
 var $96=$3;
 var $97=_hio_read32l($96);
 $p_pat=$97;
 var $98=$3;
 var $99=_hio_read32l($98);
 $p_ins=$99;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $106=$3;
 var $107=$4;
 var $108=$p_ord;
 var $109=((($107)+($108))|0);
 var $110=_hio_seek($106,$109,0);
 var $111=$mod;
 var $112=(($111+952)|0);
 var $113=(($112)|0);
 var $114=$mod;
 var $115=(($114+156)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$3;
 var $118=_hio_read($113,1,$116,$117);
 var $119=$3;
 var $120=$4;
 var $121=$p_chn;
 var $122=((($120)+($121))|0);
 var $123=_hio_seek($119,$122,0);
 var $124=(($buf)|0);
 var $125=$3;
 var $126=_hio_read($124,1,16,$125);
 var $127=$mod;
 var $128=_instrument_init($127);
 var $129=($128|0)<0;
 if($129){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=61;break;
 case 13: 
 var $132=$3;
 var $133=$4;
 var $134=$p_ins;
 var $135=((($133)+($134))|0);
 var $136=_hio_seek($132,$135,0);
 $i=0;
 label=14;break;
 case 14: 
 var $138=$i;
 var $139=$mod;
 var $140=(($139+140)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($138|0)<($141|0);
 if($142){label=15;break;}else{label=23;break;}
 case 15: 
 var $144=$mod;
 var $145=$i;
 var $146=_subinstrument_alloc($144,$145,1);
 var $147=($146|0)<0;
 if($147){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=61;break;
 case 17: 
 var $150=(($buf)|0);
 var $151=$3;
 var $152=_hio_read($150,1,13,$151);
 var $153=(($buf)|0);
 var $154=$3;
 var $155=_hio_read($153,1,24,$154);
 var $156=$i;
 var $157=$mod;
 var $158=(($157+176)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+((($156)*(764))&-1))|0);
 var $161=(($160)|0);
 var $162=(($161)|0);
 var $163=(($buf)|0);
 var $164=_strlcpy($162,$163,24);
 var $165=$i;
 var $166=$mod;
 var $167=(($166+176)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+((($165)*(764))&-1))|0);
 var $170=(($169)|0);
 var $171=(($170)|0);
 var $172=_str_adj($171);
 var $173=$3;
 var $174=_hio_read32l($173);
 var $175=$i;
 var $176=(($p_smp+($175<<2))|0);
 HEAP32[(($176)>>2)]=$174;
 var $177=$3;
 var $178=_hio_read32l($177);
 var $179=$3;
 var $180=_hio_read16l($179);
 var $181=$3;
 var $182=_hio_read8($181);
 var $183=($182&255);
 $flags=$183;
 var $184=$3;
 var $185=_hio_read32l($184);
 var $186=$i;
 var $187=$mod;
 var $188=(($187+180)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+((($186)*(52))&-1))|0);
 var $191=(($190+32)|0);
 HEAP32[(($191)>>2)]=$185;
 var $192=$3;
 var $193=_hio_read32l($192);
 var $194=$i;
 var $195=$mod;
 var $196=(($195+180)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+((($194)*(52))&-1))|0);
 var $199=(($198+36)|0);
 HEAP32[(($199)>>2)]=$193;
 var $200=$3;
 var $201=_hio_read32l($200);
 var $202=$i;
 var $203=$mod;
 var $204=(($203+180)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+((($202)*(52))&-1))|0);
 var $207=(($206+40)|0);
 HEAP32[(($207)>>2)]=$201;
 var $208=$3;
 var $209=_hio_read8($208);
 var $210=($209&255);
 var $211=$210<<4;
 var $212=(($211)&255);
 var $213=(($212<<24)>>24);
 $finetune=$213;
 var $214=$3;
 var $215=_hio_read8($214);
 var $216=($215&255);
 var $217=$i;
 var $218=$mod;
 var $219=(($218+176)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+((($217)*(764))&-1))|0);
 var $222=(($221+756)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223)|0);
 var $225=(($224)|0);
 HEAP32[(($225)>>2)]=$216;
 var $226=$3;
 var $227=_hio_read16l($226);
 var $228=($227&65535);
 var $229=((($228)*(8363))&-1);
 var $230=(((($229|0))/(8448))&-1);
 var $231=(($230)&65535);
 $c2spd=$231;
 var $232=$i;
 var $233=$mod;
 var $234=(($233+176)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+((($232)*(764))&-1))|0);
 var $237=(($236+756)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238)|0);
 var $240=(($239+8)|0);
 HEAP32[(($240)>>2)]=128;
 var $241=$i;
 var $242=$i;
 var $243=$mod;
 var $244=(($243+176)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+((($242)*(764))&-1))|0);
 var $247=(($246+756)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248)|0);
 var $250=(($249+40)|0);
 HEAP32[(($250)>>2)]=$241;
 var $251=$flags;
 var $252=($251&65535);
 var $253=$252&128;
 var $254=($253|0)!=0;
 var $255=($254?2:0);
 var $256=$i;
 var $257=$mod;
 var $258=(($257+180)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+((($256)*(52))&-1))|0);
 var $261=(($260+44)|0);
 HEAP32[(($261)>>2)]=$255;
 var $262=$flags;
 var $263=($262&65535);
 var $264=$263&32;
 var $265=($264|0)!=0;
 var $266=($265?4:0);
 var $267=$i;
 var $268=$mod;
 var $269=(($268+180)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+((($267)*(52))&-1))|0);
 var $272=(($271+44)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=$273|$266;
 HEAP32[(($272)>>2)]=$274;
 var $275=$c2spd;
 var $276=($275&65535);
 var $277=$i;
 var $278=$mod;
 var $279=(($278+176)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($280+((($277)*(764))&-1))|0);
 var $282=(($281+756)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283)|0);
 var $285=(($284+12)|0);
 var $286=$i;
 var $287=$mod;
 var $288=(($287+176)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+((($286)*(764))&-1))|0);
 var $291=(($290+756)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=(($292)|0);
 var $294=(($293+16)|0);
 _c2spd_to_note($276,$285,$294);
 var $295=$finetune;
 var $296=$i;
 var $297=$mod;
 var $298=(($297+176)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+((($296)*(764))&-1))|0);
 var $301=(($300+756)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302)|0);
 var $304=(($303+16)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=((($305)+($295))|0);
 HEAP32[(($304)>>2)]=$306;
 var $307=$i;
 var $308=$mod;
 var $309=(($308+180)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=(($310+((($307)*(52))&-1))|0);
 var $312=(($311+32)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=($313|0)>0;
 if($314){label=18;break;}else{label=19;break;}
 case 18: 
 var $316=$i;
 var $317=$mod;
 var $318=(($317+176)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($319+((($316)*(764))&-1))|0);
 var $321=(($320+36)|0);
 HEAP32[(($321)>>2)]=1;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $326=$i;
 var $327=((($326)+(1))|0);
 $i=$327;
 label=14;break;
 case 23: 
 var $329=$mod;
 var $330=_pattern_init($329);
 var $331=($330|0)<0;
 if($331){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=61;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $336=$3;
 var $337=$4;
 var $338=$p_pat;
 var $339=((($337)+($338))|0);
 var $340=_hio_seek($336,$339,0);
 $i=0;
 label=28;break;
 case 28: 
 var $342=$i;
 var $343=$mod;
 var $344=(($343+128)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=($342|0)<($345|0);
 if($346){label=29;break;}else{label=52;break;}
 case 29: 
 var $348=$3;
 var $349=_hio_read16l($348);
 var $350=($349&65535);
 var $351=((($350)-(4))|0);
 $len=$351;
 var $352=$3;
 var $353=_hio_read8($352);
 $rows=$353;
 var $354=$3;
 var $355=_hio_read8($354);
 $chan=$355;
 var $356=$mod;
 var $357=$i;
 var $358=$rows;
 var $359=($358&255);
 var $360=_pattern_tracks_alloc($356,$357,$359);
 var $361=($360|0)<0;
 if($361){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=61;break;
 case 31: 
 $r=0;
 label=32;break;
 case 32: 
 var $365=$r;
 var $366=$rows;
 var $367=($366&255);
 var $368=($365|0)<($367|0);
 if($368){label=33;break;}else{label=48;break;}
 case 33: 
 label=34;break;
 case 34: 
 var $371=$len;
 var $372=($371|0)>0;
 if($372){label=35;break;}else{label=46;break;}
 case 35: 
 var $374=$3;
 var $375=_hio_read8($374);
 $b=$375;
 var $376=$len;
 var $377=((($376)-(1))|0);
 $len=$377;
 var $378=$b;
 var $379=($378&255);
 var $380=($379|0)==0;
 if($380){label=36;break;}else{label=37;break;}
 case 36: 
 label=46;break;
 case 37: 
 var $383=$b;
 var $384=($383&255);
 var $385=$384&15;
 $c=$385;
 var $386=$c;
 var $387=$mod;
 var $388=(($387+136)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=($386|0)>=($389|0);
 if($390){label=38;break;}else{label=39;break;}
 case 38: 
 $1=-1;
 label=61;break;
 case 39: 
 var $393=$r;
 var $394=$c;
 var $395=$i;
 var $396=$2;
 var $397=(($396)|0);
 var $398=(($397+168)|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=(($399+($395<<2))|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=(($401+4)|0);
 var $403=(($402+($394<<2))|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=$2;
 var $406=(($405)|0);
 var $407=(($406+172)|0);
 var $408=HEAP32[(($407)>>2)];
 var $409=(($408+($404<<2))|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($410+4)|0);
 var $412=(($411+($393<<3))|0);
 $event=$412;
 var $413=$b;
 var $414=($413&255);
 var $415=$414&128;
 var $416=($415|0)!=0;
 if($416){label=40;break;}else{label=41;break;}
 case 40: 
 var $418=$3;
 var $419=_hio_read8($418);
 var $420=($419&255);
 var $421=((($420)+(36))|0);
 var $422=((($421)+(1))|0);
 var $423=(($422)&255);
 var $424=$event;
 var $425=(($424)|0);
 HEAP8[($425)]=$423;
 var $426=$3;
 var $427=_hio_read8($426);
 var $428=$event;
 var $429=(($428+1)|0);
 HEAP8[($429)]=$427;
 var $430=$len;
 var $431=((($430)-(2))|0);
 $len=$431;
 label=41;break;
 case 41: 
 var $433=$b;
 var $434=($433&255);
 var $435=$434&64;
 var $436=($435|0)!=0;
 if($436){label=42;break;}else{label=43;break;}
 case 42: 
 var $438=$3;
 var $439=_hio_read8($438);
 var $440=($439&255);
 var $441=((($440)+(1))|0);
 var $442=(($441)&255);
 var $443=$event;
 var $444=(($443+2)|0);
 HEAP8[($444)]=$442;
 var $445=$len;
 var $446=((($445)-(1))|0);
 $len=$446;
 label=43;break;
 case 43: 
 var $448=$b;
 var $449=($448&255);
 var $450=$449&32;
 var $451=($450|0)!=0;
 if($451){label=44;break;}else{label=45;break;}
 case 44: 
 var $453=$3;
 var $454=_hio_read8($453);
 var $455=$event;
 var $456=(($455+3)|0);
 HEAP8[($456)]=$454;
 var $457=$3;
 var $458=_hio_read8($457);
 var $459=$event;
 var $460=(($459+4)|0);
 HEAP8[($460)]=$458;
 var $461=$len;
 var $462=((($461)-(2))|0);
 $len=$462;
 label=45;break;
 case 45: 
 label=34;break;
 case 46: 
 label=47;break;
 case 47: 
 var $466=$r;
 var $467=((($466)+(1))|0);
 $r=$467;
 label=32;break;
 case 48: 
 var $469=$len;
 var $470=($469|0)>0;
 if($470){label=49;break;}else{label=50;break;}
 case 49: 
 var $472=$3;
 var $473=$len;
 var $474=_hio_seek($472,$473,1);
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $477=$i;
 var $478=((($477)+(1))|0);
 $i=$478;
 label=28;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 $i=0;
 label=55;break;
 case 55: 
 var $483=$i;
 var $484=$mod;
 var $485=(($484+140)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=($483|0)<($486|0);
 if($487){label=56;break;}else{label=60;break;}
 case 56: 
 var $489=$3;
 var $490=$4;
 var $491=$i;
 var $492=(($p_smp+($491<<2))|0);
 var $493=HEAP32[(($492)>>2)];
 var $494=((($490)+($493))|0);
 var $495=_hio_seek($489,$494,0);
 var $496=$2;
 var $497=$3;
 var $498=$i;
 var $499=$mod;
 var $500=(($499+176)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=(($501+((($498)*(764))&-1))|0);
 var $503=(($502+756)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=(($504)|0);
 var $506=(($505+40)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=$mod;
 var $509=(($508+180)|0);
 var $510=HEAP32[(($509)>>2)];
 var $511=(($510+((($507)*(52))&-1))|0);
 var $512=_load_sample($496,$497,1,$511,0);
 var $513=($512|0)<0;
 if($513){label=57;break;}else{label=58;break;}
 case 57: 
 $1=-1;
 label=61;break;
 case 58: 
 label=59;break;
 case 59: 
 var $517=$i;
 var $518=((($517)+(1))|0);
 $i=$518;
 label=55;break;
 case 60: 
 $1=0;
 label=61;break;
 case 61: 
 var $521=$1;
 STACKTOP=sp;return $521;
  default: assert(0, "bad label: " + label);
 }
}
function _pt3_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1179603533;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=11;break;
 case 3: 
 var $10=$2;
 var $11=_hio_read32b($10);
 var $12=$2;
 var $13=_hio_read32b($12);
 var $14=($13|0)!=1297040460;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=11;break;
 case 5: 
 var $17=$2;
 var $18=_hio_read32b($17);
 var $19=($18|0)!=1447383635;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=11;break;
 case 7: 
 var $22=$2;
 var $23=_hio_read32b($22);
 var $24=$2;
 var $25=_hio_seek($24,10,1);
 var $26=$2;
 var $27=_hio_read32b($26);
 var $28=($27|0)==1229866575;
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 var $30=$2;
 var $31=_hio_read32b($30);
 var $32=$2;
 var $33=$3;
 _read_title($32,$33,32);
 label=10;break;
 case 9: 
 var $35=$2;
 var $36=$3;
 _read_title($35,$36,0);
 label=10;break;
 case 10: 
 $1=0;
 label=11;break;
 case 11: 
 var $39=$1;
 STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _pt3_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $handle;
 var $buf=sp;
 var $ret;
 $2=$m;
 $3=$f;
 $4=$start;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=$4;
 var $8=_hio_seek($6,$7,0);
 label=3;break;
 case 3: 
 var $10=$3;
 var $11=_hio_read32b($10);
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=$3;
 var $15=_hio_read32b($14);
 var $16=$3;
 var $17=_hio_read32b($16);
 var $18=$3;
 var $19=_hio_read32b($18);
 var $20=(($buf)|0);
 var $21=$3;
 var $22=_hio_read($20,1,10,$21);
 var $23=$2;
 var $24=(($buf)|0);
 var $25=(($24+4)|0);
 _set_type($23,26128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$25,tempVarArgs)); STACKTOP=tempVarArgs;
 var $26=_iff_new();
 $handle=$26;
 var $27=$handle;
 var $28=($27|0)==0;
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=10;break;
 case 5: 
 var $31=$handle;
 var $32=_iff_register($31,24496,62);
 $ret=$32;
 var $33=$handle;
 var $34=_iff_register($33,23520,346);
 var $35=$ret;
 var $36=$35|$34;
 $ret=$36;
 var $37=$handle;
 var $38=_iff_register($37,22840,272);
 var $39=$ret;
 var $40=$39|$38;
 $ret=$40;
 var $41=$ret;
 var $42=($41|0)!=0;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=10;break;
 case 7: 
 var $45=$handle;
 _iff_set_quirk($45,2);
 var $46=$handle;
 var $47=$2;
 var $48=$3;
 var $49=_iff_load($46,$47,$48,0);
 var $50=($49|0)<0;
 if($50){label=8;break;}else{label=9;break;}
 case 8: 
 var $52=$handle;
 _iff_release($52);
 $1=-1;
 label=10;break;
 case 9: 
 var $54=$handle;
 _iff_release($54);
 $1=0;
 label=10;break;
 case 10: 
 var $56=$1;
 STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _get_info548($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $flags;
 var $day;
 var $month;
 var $year;
 var $hour;
 var $min;
 var $sec;
 var $dhour;
 var $dmin;
 var $dsec;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=$3;
 var $11=_hio_read($9,1,32,$10);
 var $12=$3;
 var $13=_hio_read16b($12);
 var $14=($13&65535);
 var $15=$mod;
 var $16=(($15+140)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$3;
 var $18=_hio_read16b($17);
 var $19=($18&65535);
 var $20=$mod;
 var $21=(($20+156)|0);
 HEAP32[(($21)>>2)]=$19;
 var $22=$3;
 var $23=_hio_read16b($22);
 var $24=($23&65535);
 var $25=$mod;
 var $26=(($25+128)|0);
 HEAP32[(($26)>>2)]=$24;
 var $27=$3;
 var $28=_hio_read16b($27);
 var $29=($28&65535);
 var $30=$mod;
 var $31=(($30+164)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$3;
 var $33=_hio_read16b($32);
 var $34=($33&65535);
 var $35=$mod;
 var $36=(($35+152)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$3;
 var $38=_hio_read16b($37);
 var $39=($38&65535);
 $flags=$39;
 var $40=$3;
 var $41=_hio_read16b($40);
 var $42=($41&65535);
 $day=$42;
 var $43=$3;
 var $44=_hio_read16b($43);
 var $45=($44&65535);
 $month=$45;
 var $46=$3;
 var $47=_hio_read16b($46);
 var $48=($47&65535);
 $year=$48;
 var $49=$3;
 var $50=_hio_read16b($49);
 var $51=($50&65535);
 $hour=$51;
 var $52=$3;
 var $53=_hio_read16b($52);
 var $54=($53&65535);
 $min=$54;
 var $55=$3;
 var $56=_hio_read16b($55);
 var $57=($56&65535);
 $sec=$57;
 var $58=$3;
 var $59=_hio_read16b($58);
 var $60=($59&65535);
 $dhour=$60;
 var $61=$3;
 var $62=_hio_read16b($61);
 var $63=($62&65535);
 $dmin=$63;
 var $64=$3;
 var $65=_hio_read16b($64);
 var $66=($65&65535);
 $dsec=$66;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_cmnt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get_ptdt($m,$size,$f,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$m;
 $2=$size;
 $3=$f;
 $4=$parm;
 var $5=$1;
 var $6=$3;
 var $7=_ptdt_load($5,$6,0);
 STACKTOP=sp;return 0;
}
function _ptdt_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $mh=sp;
 var $mod_event=(sp)+(1088);
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 var $7=(($mh)|0);
 var $8=$7;
 var $9=$3;
 var $10=_hio_read($8,20,1,$9);
 $i=0;
 label=2;break;
 case 2: 
 var $12=$i;
 var $13=($12|0)<31;
 if($13){label=3;break;}else{label=5;break;}
 case 3: 
 var $15=$i;
 var $16=(($mh+20)|0);
 var $17=(($16+((($15)*(30))&-1))|0);
 var $18=(($17)|0);
 var $19=$18;
 var $20=$3;
 var $21=_hio_read($19,22,1,$20);
 var $22=$3;
 var $23=_hio_read16b($22);
 var $24=$i;
 var $25=(($mh+20)|0);
 var $26=(($25+((($24)*(30))&-1))|0);
 var $27=(($26+22)|0);
 HEAP16[(($27)>>1)]=$23;
 var $28=$3;
 var $29=_hio_read8($28);
 var $30=$i;
 var $31=(($mh+20)|0);
 var $32=(($31+((($30)*(30))&-1))|0);
 var $33=(($32+24)|0);
 HEAP8[($33)]=$29;
 var $34=$3;
 var $35=_hio_read8($34);
 var $36=$i;
 var $37=(($mh+20)|0);
 var $38=(($37+((($36)*(30))&-1))|0);
 var $39=(($38+25)|0);
 HEAP8[($39)]=$35;
 var $40=$3;
 var $41=_hio_read16b($40);
 var $42=$i;
 var $43=(($mh+20)|0);
 var $44=(($43+((($42)*(30))&-1))|0);
 var $45=(($44+26)|0);
 HEAP16[(($45)>>1)]=$41;
 var $46=$3;
 var $47=_hio_read16b($46);
 var $48=$i;
 var $49=(($mh+20)|0);
 var $50=(($49+((($48)*(30))&-1))|0);
 var $51=(($50+28)|0);
 HEAP16[(($51)>>1)]=$47;
 label=4;break;
 case 4: 
 var $53=$i;
 var $54=((($53)+(1))|0);
 $i=$54;
 label=2;break;
 case 5: 
 var $56=$3;
 var $57=_hio_read8($56);
 var $58=(($mh+950)|0);
 HEAP8[($58)]=$57;
 var $59=$3;
 var $60=_hio_read8($59);
 var $61=(($mh+951)|0);
 HEAP8[($61)]=$60;
 var $62=(($mh+952)|0);
 var $63=$62;
 var $64=$3;
 var $65=_hio_read($63,128,1,$64);
 var $66=(($mh+1080)|0);
 var $67=$66;
 var $68=$3;
 var $69=_hio_read($67,4,1,$68);
 var $70=$mod;
 var $71=(($70+140)|0);
 HEAP32[(($71)>>2)]=31;
 var $72=$mod;
 var $73=(($72+140)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$mod;
 var $76=(($75+144)|0);
 HEAP32[(($76)>>2)]=$74;
 var $77=$mod;
 var $78=(($77+136)|0);
 HEAP32[(($78)>>2)]=4;
 var $79=(($mh+950)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=$mod;
 var $83=(($82+156)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=(($mh+951)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=$mod;
 var $88=(($87+160)|0);
 HEAP32[(($88)>>2)]=$86;
 var $89=$mod;
 var $90=(($89+952)|0);
 var $91=$90;
 var $92=(($mh+952)|0);
 var $93=$92;
 assert(128 % 1 === 0);(_memcpy($91, $93, 128)|0);
 $i=0;
 label=6;break;
 case 6: 
 var $95=$i;
 var $96=($95|0)<128;
 if($96){label=7;break;}else{label=11;break;}
 case 7: 
 var $98=$i;
 var $99=$mod;
 var $100=(($99+952)|0);
 var $101=(($100+$98)|0);
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$mod;
 var $105=(($104+128)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($103|0)>($106|0);
 if($107){label=8;break;}else{label=9;break;}
 case 8: 
 var $109=$i;
 var $110=$mod;
 var $111=(($110+952)|0);
 var $112=(($111+$109)|0);
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=$mod;
 var $116=(($115+128)|0);
 HEAP32[(($116)>>2)]=$114;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $119=$i;
 var $120=((($119)+(1))|0);
 $i=$120;
 label=6;break;
 case 11: 
 var $122=$mod;
 var $123=(($122+128)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($123)>>2)]=$125;
 var $126=$mod;
 var $127=(($126+136)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=$mod;
 var $130=(($129+128)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(Math_imul($128,$131)|0);
 var $133=$mod;
 var $134=(($133+132)|0);
 HEAP32[(($134)>>2)]=$132;
 var $135=$mod;
 var $136=_instrument_init($135);
 var $137=($136|0)<0;
 if($137){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=48;break;
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 var $141=$i;
 var $142=$mod;
 var $143=(($142+140)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($141|0)<($144|0);
 if($145){label=15;break;}else{label=23;break;}
 case 15: 
 var $147=$mod;
 var $148=$i;
 var $149=_subinstrument_alloc($147,$148,1);
 var $150=($149|0)<0;
 if($150){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=48;break;
 case 17: 
 var $153=$i;
 var $154=(($mh+20)|0);
 var $155=(($154+((($153)*(30))&-1))|0);
 var $156=(($155+22)|0);
 var $157=HEAP16[(($156)>>1)];
 var $158=($157&65535);
 var $159=($158<<1);
 var $160=$i;
 var $161=$mod;
 var $162=(($161+180)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+((($160)*(52))&-1))|0);
 var $165=(($164+32)|0);
 HEAP32[(($165)>>2)]=$159;
 var $166=$i;
 var $167=(($mh+20)|0);
 var $168=(($167+((($166)*(30))&-1))|0);
 var $169=(($168+26)|0);
 var $170=HEAP16[(($169)>>1)];
 var $171=($170&65535);
 var $172=($171<<1);
 var $173=$i;
 var $174=$mod;
 var $175=(($174+180)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+((($173)*(52))&-1))|0);
 var $178=(($177+36)|0);
 HEAP32[(($178)>>2)]=$172;
 var $179=$i;
 var $180=$mod;
 var $181=(($180+180)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+((($179)*(52))&-1))|0);
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=$i;
 var $187=(($mh+20)|0);
 var $188=(($187+((($186)*(30))&-1))|0);
 var $189=(($188+28)|0);
 var $190=HEAP16[(($189)>>1)];
 var $191=($190&65535);
 var $192=($191<<1);
 var $193=((($185)+($192))|0);
 var $194=$i;
 var $195=$mod;
 var $196=(($195+180)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+((($194)*(52))&-1))|0);
 var $199=(($198+40)|0);
 HEAP32[(($199)>>2)]=$193;
 var $200=$i;
 var $201=(($mh+20)|0);
 var $202=(($201+((($200)*(30))&-1))|0);
 var $203=(($202+28)|0);
 var $204=HEAP16[(($203)>>1)];
 var $205=($204&65535);
 var $206=($205|0)>1;
 var $207=($206?2:0);
 var $208=$i;
 var $209=$mod;
 var $210=(($209+180)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+((($208)*(52))&-1))|0);
 var $213=(($212+44)|0);
 HEAP32[(($213)>>2)]=$207;
 var $214=$i;
 var $215=$mod;
 var $216=(($215+180)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+((($214)*(52))&-1))|0);
 var $219=(($218+32)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($220|0)>0;
 if($221){label=18;break;}else{label=19;break;}
 case 18: 
 var $223=$i;
 var $224=$mod;
 var $225=(($224+176)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+((($223)*(764))&-1))|0);
 var $228=(($227+36)|0);
 HEAP32[(($228)>>2)]=1;
 label=19;break;
 case 19: 
 var $230=$i;
 var $231=(($mh+20)|0);
 var $232=(($231+((($230)*(30))&-1))|0);
 var $233=(($232+24)|0);
 var $234=HEAP8[($233)];
 var $235=(($234<<24)>>24);
 var $236=$235<<4;
 var $237=(($236)&255);
 var $238=(($237<<24)>>24);
 var $239=$i;
 var $240=$mod;
 var $241=(($240+176)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+((($239)*(764))&-1))|0);
 var $244=(($243+756)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245)|0);
 var $247=(($246+16)|0);
 HEAP32[(($247)>>2)]=$238;
 var $248=$i;
 var $249=(($mh+20)|0);
 var $250=(($249+((($248)*(30))&-1))|0);
 var $251=(($250+25)|0);
 var $252=HEAP8[($251)];
 var $253=(($252<<24)>>24);
 var $254=$i;
 var $255=$mod;
 var $256=(($255+176)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=(($257+((($254)*(764))&-1))|0);
 var $259=(($258+756)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($260)|0);
 var $262=(($261)|0);
 HEAP32[(($262)>>2)]=$253;
 var $263=$i;
 var $264=$mod;
 var $265=(($264+176)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+((($263)*(764))&-1))|0);
 var $268=(($267+756)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($269)|0);
 var $271=(($270+8)|0);
 HEAP32[(($271)>>2)]=128;
 var $272=$i;
 var $273=$i;
 var $274=$mod;
 var $275=(($274+176)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($276+((($273)*(764))&-1))|0);
 var $278=(($277+756)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279)|0);
 var $281=(($280+40)|0);
 HEAP32[(($281)>>2)]=$272;
 var $282=$i;
 var $283=$mod;
 var $284=(($283+176)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($285+((($282)*(764))&-1))|0);
 var $287=(($286+40)|0);
 HEAP32[(($287)>>2)]=4095;
 var $288=$mod;
 var $289=$i;
 var $290=$i;
 var $291=(($mh+20)|0);
 var $292=(($291+((($290)*(30))&-1))|0);
 var $293=(($292)|0);
 var $294=(($293)|0);
 var $295=_instrument_name($288,$289,$294,22);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $299=$i;
 var $300=((($299)+(1))|0);
 $i=$300;
 label=14;break;
 case 23: 
 var $302=$mod;
 var $303=_pattern_init($302);
 var $304=($303|0)<0;
 if($304){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=48;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 $i=0;
 label=28;break;
 case 28: 
 var $310=$i;
 var $311=$mod;
 var $312=(($311+128)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=($310|0)<($313|0);
 if($314){label=29;break;}else{label=37;break;}
 case 29: 
 var $316=$mod;
 var $317=$i;
 var $318=_pattern_tracks_alloc($316,$317,64);
 var $319=($318|0)<0;
 if($319){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=48;break;
 case 31: 
 $j=0;
 label=32;break;
 case 32: 
 var $323=$j;
 var $324=($323|0)<256;
 if($324){label=33;break;}else{label=35;break;}
 case 33: 
 var $326=$j;
 var $327=(((($326|0))/(4))&-1);
 var $328=$j;
 var $329=(((($328|0))%(4))&-1);
 var $330=$i;
 var $331=$2;
 var $332=(($331)|0);
 var $333=(($332+168)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334+($330<<2))|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+4)|0);
 var $338=(($337+($329<<2))|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=$2;
 var $341=(($340)|0);
 var $342=(($341+172)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($343+($339<<2))|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=(($345+4)|0);
 var $347=(($346+($327<<3))|0);
 $event=$347;
 var $348=(($mod_event)|0);
 var $349=$3;
 var $350=_hio_read($348,1,4,$349);
 var $351=$event;
 var $352=(($mod_event)|0);
 _decode_protracker_event($351,$352);
 label=34;break;
 case 34: 
 var $354=$j;
 var $355=((($354)+(1))|0);
 $j=$355;
 label=32;break;
 case 35: 
 label=36;break;
 case 36: 
 var $358=$i;
 var $359=((($358)+(1))|0);
 $i=$359;
 label=28;break;
 case 37: 
 var $361=$2;
 var $362=(($361+1280)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=$363|8192;
 HEAP32[(($362)>>2)]=$364;
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 $i=0;
 label=40;break;
 case 40: 
 var $368=$i;
 var $369=$mod;
 var $370=(($369+144)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=($368|0)<($371|0);
 if($372){label=41;break;}else{label=47;break;}
 case 41: 
 var $374=$i;
 var $375=$mod;
 var $376=(($375+180)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(($377+((($374)*(52))&-1))|0);
 var $379=(($378+32)|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=($380|0)!=0;
 if($381){label=43;break;}else{label=42;break;}
 case 42: 
 label=46;break;
 case 43: 
 var $384=$2;
 var $385=$3;
 var $386=$i;
 var $387=$mod;
 var $388=(($387+180)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($389+((($386)*(52))&-1))|0);
 var $391=_load_sample($384,$385,0,$390,0);
 var $392=($391|0)<0;
 if($392){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=48;break;
 case 45: 
 label=46;break;
 case 46: 
 var $396=$i;
 var $397=((($396)+(1))|0);
 $i=$397;
 label=40;break;
 case 47: 
 $1=0;
 label=48;break;
 case 48: 
 var $400=$1;
 STACKTOP=sp;return $400;
  default: assert(0, "bad label: " + label);
 }
}
function _ptm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(44))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=$2;
 var $10=_hio_read32b($9);
 var $11=($10|0)!=1347702086;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $14=$2;
 var $15=$4;
 var $16=(($15)|0);
 var $17=_hio_seek($14,$16,0);
 var $18=$2;
 var $19=$3;
 _read_title($18,$19,28);
 $1=0;
 label=4;break;
 case 4: 
 var $21=$1;
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _ptm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1720)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $c;
 var $r;
 var $i;
 var $smp_ofs=sp;
 var $event;
 var $pfh=(sp)+(1024);
 var $pih=(sp)+(1632);
 var $n;
 var $b;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($pfh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,28,1,$14);
 var $16=$3;
 var $17=_hio_read8($16);
 var $18=(($pfh+28)|0);
 HEAP8[($18)]=$17;
 var $19=$3;
 var $20=_hio_read8($19);
 var $21=(($pfh+29)|0);
 HEAP8[($21)]=$20;
 var $22=$3;
 var $23=_hio_read8($22);
 var $24=(($pfh+30)|0);
 HEAP8[($24)]=$23;
 var $25=$3;
 var $26=_hio_read8($25);
 var $27=(($pfh+31)|0);
 HEAP8[($27)]=$26;
 var $28=$3;
 var $29=_hio_read16l($28);
 var $30=(($pfh+32)|0);
 HEAP16[(($30)>>1)]=$29;
 var $31=$3;
 var $32=_hio_read16l($31);
 var $33=(($pfh+34)|0);
 HEAP16[(($33)>>1)]=$32;
 var $34=$3;
 var $35=_hio_read16l($34);
 var $36=(($pfh+36)|0);
 HEAP16[(($36)>>1)]=$35;
 var $37=$3;
 var $38=_hio_read16l($37);
 var $39=(($pfh+38)|0);
 HEAP16[(($39)>>1)]=$38;
 var $40=$3;
 var $41=_hio_read16l($40);
 var $42=(($pfh+40)|0);
 HEAP16[(($42)>>1)]=$41;
 var $43=$3;
 var $44=_hio_read16l($43);
 var $45=(($pfh+42)|0);
 HEAP16[(($45)>>1)]=$44;
 var $46=$3;
 var $47=_hio_read32b($46);
 var $48=(($pfh+44)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($pfh+48)|0);
 var $50=$49;
 var $51=$3;
 var $52=_hio_read($50,16,1,$51);
 var $53=(($pfh+64)|0);
 var $54=$53;
 var $55=$3;
 var $56=_hio_read($54,32,1,$55);
 var $57=(($pfh+96)|0);
 var $58=$57;
 var $59=$3;
 var $60=_hio_read($58,256,1,$59);
 $i=0;
 label=4;break;
 case 4: 
 var $62=$i;
 var $63=($62|0)<128;
 if($63){label=5;break;}else{label=7;break;}
 case 5: 
 var $65=$3;
 var $66=_hio_read16l($65);
 var $67=$i;
 var $68=(($pfh+352)|0);
 var $69=(($68+($67<<1))|0);
 HEAP16[(($69)>>1)]=$66;
 label=6;break;
 case 6: 
 var $71=$i;
 var $72=((($71)+(1))|0);
 $i=$72;
 label=4;break;
 case 7: 
 var $74=(($pfh+32)|0);
 var $75=HEAP16[(($74)>>1)];
 var $76=($75&65535);
 var $77=$mod;
 var $78=(($77+156)|0);
 HEAP32[(($78)>>2)]=$76;
 var $79=(($pfh+34)|0);
 var $80=HEAP16[(($79)>>1)];
 var $81=($80&65535);
 var $82=$mod;
 var $83=(($82+140)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=(($pfh+36)|0);
 var $85=HEAP16[(($84)>>1)];
 var $86=($85&65535);
 var $87=$mod;
 var $88=(($87+128)|0);
 HEAP32[(($88)>>2)]=$86;
 var $89=(($pfh+38)|0);
 var $90=HEAP16[(($89)>>1)];
 var $91=($90&65535);
 var $92=$mod;
 var $93=(($92+136)|0);
 HEAP32[(($93)>>2)]=$91;
 var $94=$mod;
 var $95=(($94+128)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$mod;
 var $98=(($97+136)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(Math_imul($96,$99)|0);
 var $101=$mod;
 var $102=(($101+132)|0);
 HEAP32[(($102)>>2)]=$100;
 var $103=$mod;
 var $104=(($103+140)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$mod;
 var $107=(($106+144)|0);
 HEAP32[(($107)>>2)]=$105;
 var $108=$mod;
 var $109=(($108+148)|0);
 HEAP32[(($109)>>2)]=6;
 var $110=$mod;
 var $111=(($110+152)|0);
 HEAP32[(($111)>>2)]=125;
 var $112=$mod;
 var $113=(($112+952)|0);
 var $114=$113;
 var $115=(($pfh+96)|0);
 var $116=$115;
 assert(256 % 1 === 0);(_memcpy($114, $116, 256)|0);
 var $117=$2;
 var $118=(($117+1264)|0);
 HEAP32[(($118)>>2)]=8363;
 var $119=$mod;
 var $120=(($119)|0);
 var $121=(($120)|0);
 var $122=(($pfh)|0);
 var $123=(($122)|0);
 var $124=_copy_adjust($121,$123,28);
 var $125=$2;
 var $126=(($pfh+30)|0);
 var $127=HEAP8[($126)];
 var $128=($127&255);
 var $129=(($pfh+29)|0);
 var $130=HEAP8[($129)];
 var $131=($130&255);
 _set_type($125,26096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$128,HEAP32[(((tempVarArgs)+(8))>>2)]=$131,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $138=$mod;
 var $139=_instrument_init($138);
 var $140=($139|0)<0;
 if($140){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=93;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $144=$i;
 var $145=$mod;
 var $146=(($145+140)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($144|0)<($147|0);
 if($148){label=17;break;}else{label=33;break;}
 case 17: 
 var $150=$3;
 var $151=_hio_read8($150);
 var $152=(($pih)|0);
 HEAP8[($152)]=$151;
 var $153=(($pih+1)|0);
 var $154=$153;
 var $155=$3;
 var $156=_hio_read($154,12,1,$155);
 var $157=$3;
 var $158=_hio_read8($157);
 var $159=(($pih+13)|0);
 HEAP8[($159)]=$158;
 var $160=$3;
 var $161=_hio_read16l($160);
 var $162=(($pih+14)|0);
 HEAP16[(($162)>>1)]=$161;
 var $163=$3;
 var $164=_hio_read16l($163);
 var $165=(($pih+16)|0);
 HEAP16[(($165)>>1)]=$164;
 var $166=$3;
 var $167=_hio_read32l($166);
 var $168=(($pih+20)|0);
 HEAP32[(($168)>>2)]=$167;
 var $169=$3;
 var $170=_hio_read32l($169);
 var $171=(($pih+24)|0);
 HEAP32[(($171)>>2)]=$170;
 var $172=$3;
 var $173=_hio_read32l($172);
 var $174=(($pih+28)|0);
 HEAP32[(($174)>>2)]=$173;
 var $175=$3;
 var $176=_hio_read32l($175);
 var $177=(($pih+32)|0);
 HEAP32[(($177)>>2)]=$176;
 var $178=$3;
 var $179=_hio_read32l($178);
 var $180=(($pih+36)|0);
 HEAP32[(($180)>>2)]=$179;
 var $181=$3;
 var $182=_hio_read32l($181);
 var $183=(($pih+40)|0);
 HEAP32[(($183)>>2)]=$182;
 var $184=$3;
 var $185=_hio_read32l($184);
 var $186=(($pih+44)|0);
 HEAP32[(($186)>>2)]=$185;
 var $187=$3;
 var $188=_hio_read8($187);
 var $189=(($pih+48)|0);
 HEAP8[($189)]=$188;
 var $190=$3;
 var $191=_hio_read8($190);
 var $192=(($pih+49)|0);
 HEAP8[($192)]=$191;
 var $193=(($pih+50)|0);
 var $194=$193;
 var $195=$3;
 var $196=_hio_read($194,28,1,$195);
 var $197=$3;
 var $198=_hio_read32b($197);
 var $199=(($pih+80)|0);
 HEAP32[(($199)>>2)]=$198;
 var $200=(($pih)|0);
 var $201=HEAP8[($200)];
 var $202=($201&255);
 var $203=$202&3;
 var $204=($203|0)!=1;
 if($204){label=18;break;}else{label=19;break;}
 case 18: 
 label=32;break;
 case 19: 
 var $207=$mod;
 var $208=$i;
 var $209=_subinstrument_alloc($207,$208,1);
 var $210=($209|0)<0;
 if($210){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=93;break;
 case 21: 
 var $213=(($pih+20)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=$i;
 var $216=(($smp_ofs+($215<<2))|0);
 HEAP32[(($216)>>2)]=$214;
 var $217=(($pih+24)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$i;
 var $220=$mod;
 var $221=(($220+180)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($222+((($219)*(52))&-1))|0);
 var $224=(($223+32)|0);
 HEAP32[(($224)>>2)]=$218;
 var $225=(($pih+28)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=$i;
 var $228=$mod;
 var $229=(($228+180)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+((($227)*(52))&-1))|0);
 var $232=(($231+36)|0);
 HEAP32[(($232)>>2)]=$226;
 var $233=(($pih+32)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$i;
 var $236=$mod;
 var $237=(($236+180)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+((($235)*(52))&-1))|0);
 var $240=(($239+40)|0);
 HEAP32[(($240)>>2)]=$234;
 var $241=$i;
 var $242=$mod;
 var $243=(($242+180)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+((($241)*(52))&-1))|0);
 var $246=(($245+32)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)>0;
 if($248){label=22;break;}else{label=23;break;}
 case 22: 
 var $250=$i;
 var $251=$mod;
 var $252=(($251+176)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+((($250)*(764))&-1))|0);
 var $255=(($254+36)|0);
 HEAP32[(($255)>>2)]=1;
 label=23;break;
 case 23: 
 var $257=$i;
 var $258=$mod;
 var $259=(($258+180)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($260+((($257)*(52))&-1))|0);
 var $262=(($261+44)|0);
 HEAP32[(($262)>>2)]=0;
 var $263=(($pih)|0);
 var $264=HEAP8[($263)];
 var $265=($264&255);
 var $266=$265&4;
 var $267=($266|0)!=0;
 if($267){label=24;break;}else{label=25;break;}
 case 24: 
 var $269=$i;
 var $270=$mod;
 var $271=(($270+180)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(($272+((($269)*(52))&-1))|0);
 var $274=(($273+44)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=$275|2;
 HEAP32[(($274)>>2)]=$276;
 label=25;break;
 case 25: 
 var $278=(($pih)|0);
 var $279=HEAP8[($278)];
 var $280=($279&255);
 var $281=$280&8;
 var $282=($281|0)!=0;
 if($282){label=26;break;}else{label=27;break;}
 case 26: 
 var $284=$i;
 var $285=$mod;
 var $286=(($285+180)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+((($284)*(52))&-1))|0);
 var $289=(($288+44)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=$290|6;
 HEAP32[(($289)>>2)]=$291;
 label=27;break;
 case 27: 
 var $293=(($pih)|0);
 var $294=HEAP8[($293)];
 var $295=($294&255);
 var $296=$295&16;
 var $297=($296|0)!=0;
 if($297){label=28;break;}else{label=29;break;}
 case 28: 
 var $299=$i;
 var $300=$mod;
 var $301=(($300+180)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+((($299)*(52))&-1))|0);
 var $304=(($303+44)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 var $307=$i;
 var $308=$mod;
 var $309=(($308+180)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=(($310+((($307)*(52))&-1))|0);
 var $312=(($311+32)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=$313>>1;
 HEAP32[(($312)>>2)]=$314;
 var $315=$i;
 var $316=$mod;
 var $317=(($316+180)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=(($318+((($315)*(52))&-1))|0);
 var $320=(($319+36)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=$321>>1;
 HEAP32[(($320)>>2)]=$322;
 var $323=$i;
 var $324=$mod;
 var $325=(($324+180)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($326+((($323)*(52))&-1))|0);
 var $328=(($327+40)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=$329>>1;
 HEAP32[(($328)>>2)]=$330;
 label=29;break;
 case 29: 
 var $332=(($pih+13)|0);
 var $333=HEAP8[($332)];
 var $334=($333&255);
 var $335=$i;
 var $336=$mod;
 var $337=(($336+176)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=(($338+((($335)*(764))&-1))|0);
 var $340=(($339+756)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($341)|0);
 var $343=(($342)|0);
 HEAP32[(($343)>>2)]=$334;
 var $344=$i;
 var $345=$mod;
 var $346=(($345+176)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=(($347+((($344)*(764))&-1))|0);
 var $349=(($348+756)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=(($350)|0);
 var $352=(($351+8)|0);
 HEAP32[(($352)>>2)]=128;
 var $353=$i;
 var $354=$i;
 var $355=$mod;
 var $356=(($355+176)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+((($354)*(764))&-1))|0);
 var $359=(($358+756)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360)|0);
 var $362=(($361+40)|0);
 HEAP32[(($362)>>2)]=$353;
 var $363=(($pih+80)|0);
 HEAP32[(($363)>>2)]=0;
 var $364=$mod;
 var $365=$i;
 var $366=(($pih+50)|0);
 var $367=(($366)|0);
 var $368=_instrument_name($364,$365,$367,28);
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $371=(($pih+14)|0);
 var $372=HEAP16[(($371)>>1)];
 var $373=($372&65535);
 var $374=$i;
 var $375=$mod;
 var $376=(($375+176)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(($377+((($374)*(764))&-1))|0);
 var $379=(($378+756)|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=(($380)|0);
 var $382=(($381+12)|0);
 var $383=$i;
 var $384=$mod;
 var $385=(($384+176)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386+((($383)*(764))&-1))|0);
 var $388=(($387+756)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($389)|0);
 var $391=(($390+16)|0);
 _c2spd_to_note($373,$382,$391);
 label=32;break;
 case 32: 
 var $393=$i;
 var $394=((($393)+(1))|0);
 $i=$394;
 label=16;break;
 case 33: 
 var $396=$mod;
 var $397=_pattern_init($396);
 var $398=($397|0)<0;
 if($398){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=93;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 $i=0;
 label=38;break;
 case 38: 
 var $404=$i;
 var $405=$mod;
 var $406=(($405+128)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=($404|0)<($407|0);
 if($408){label=39;break;}else{label=76;break;}
 case 39: 
 var $410=$i;
 var $411=(($pfh+352)|0);
 var $412=(($411+($410<<1))|0);
 var $413=HEAP16[(($412)>>1)];
 var $414=(($413<<16)>>16)!=0;
 if($414){label=41;break;}else{label=40;break;}
 case 40: 
 label=75;break;
 case 41: 
 var $417=$mod;
 var $418=$i;
 var $419=_pattern_tracks_alloc($417,$418,64);
 var $420=($419|0)<0;
 if($420){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=93;break;
 case 43: 
 var $423=$3;
 var $424=$4;
 var $425=$i;
 var $426=(($pfh+352)|0);
 var $427=(($426+($425<<1))|0);
 var $428=HEAP16[(($427)>>1)];
 var $429=($428&65535);
 var $430=($429<<4);
 var $431=((($424)+($430))|0);
 var $432=_hio_seek($423,$431,0);
 $r=0;
 label=44;break;
 case 44: 
 var $434=$r;
 var $435=($434|0)<64;
 if($435){label=45;break;}else{label=74;break;}
 case 45: 
 var $437=$3;
 var $438=_hio_read8($437);
 $b=$438;
 var $439=$b;
 var $440=(($439<<24)>>24)!=0;
 if($440){label=47;break;}else{label=46;break;}
 case 46: 
 var $442=$r;
 var $443=((($442)+(1))|0);
 $r=$443;
 label=44;break;
 case 47: 
 var $445=$b;
 var $446=($445&255);
 var $447=$446&31;
 $c=$447;
 var $448=$c;
 var $449=$mod;
 var $450=(($449+136)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=($448|0)>=($451|0);
 if($452){label=48;break;}else{label=49;break;}
 case 48: 
 label=44;break;
 case 49: 
 var $455=$r;
 var $456=$c;
 var $457=$i;
 var $458=$2;
 var $459=(($458)|0);
 var $460=(($459+168)|0);
 var $461=HEAP32[(($460)>>2)];
 var $462=(($461+($457<<2))|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=(($463+4)|0);
 var $465=(($464+($456<<2))|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=$2;
 var $468=(($467)|0);
 var $469=(($468+172)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+($466<<2))|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($472+4)|0);
 var $474=(($473+($455<<3))|0);
 $event=$474;
 var $475=$b;
 var $476=($475&255);
 var $477=$476&32;
 var $478=($477|0)!=0;
 if($478){label=50;break;}else{label=55;break;}
 case 50: 
 var $480=$3;
 var $481=_hio_read8($480);
 $n=$481;
 var $482=$n;
 var $483=($482&255);
 if(($483|0)==255){ label=51;break;}else if(($483|0)==254){ label=52;break;}else{label=53;break;}
 case 51: 
 $n=0;
 label=54;break;
 case 52: 
 $n=-127;
 label=54;break;
 case 53: 
 var $487=$n;
 var $488=($487&255);
 var $489=((($488)+(12))|0);
 var $490=(($489)&255);
 $n=$490;
 label=54;break;
 case 54: 
 var $492=$n;
 var $493=$event;
 var $494=(($493)|0);
 HEAP8[($494)]=$492;
 var $495=$3;
 var $496=_hio_read8($495);
 var $497=$event;
 var $498=(($497+1)|0);
 HEAP8[($498)]=$496;
 label=55;break;
 case 55: 
 var $500=$b;
 var $501=($500&255);
 var $502=$501&64;
 var $503=($502|0)!=0;
 if($503){label=56;break;}else{label=71;break;}
 case 56: 
 var $505=$3;
 var $506=_hio_read8($505);
 var $507=$event;
 var $508=(($507+3)|0);
 HEAP8[($508)]=$506;
 var $509=$3;
 var $510=_hio_read8($509);
 var $511=$event;
 var $512=(($511+4)|0);
 HEAP8[($512)]=$510;
 var $513=$event;
 var $514=(($513+3)|0);
 var $515=HEAP8[($514)];
 var $516=($515&255);
 var $517=($516|0)>23;
 if($517){label=57;break;}else{label=58;break;}
 case 57: 
 var $519=$event;
 var $520=(($519+4)|0);
 HEAP8[($520)]=0;
 var $521=$event;
 var $522=(($521+3)|0);
 HEAP8[($522)]=0;
 label=58;break;
 case 58: 
 var $524=$event;
 var $525=(($524+3)|0);
 var $526=HEAP8[($525)];
 var $527=($526&255);
 switch(($527|0)){case 14:{ label=59;break;}case 16:{ label=62;break;}case 17:{ label=63;break;}case 18:{ label=64;break;}case 19:{ label=65;break;}case 20:{ label=66;break;}case 21:{ label=67;break;}case 22:{ label=68;break;}case 23:{ label=69;break;}default:{label=70;break;}}break;
 case 59: 
 var $529=$event;
 var $530=(($529+4)|0);
 var $531=HEAP8[($530)];
 var $532=($531&255);
 var $533=$532&240;
 var $534=$533>>4;
 var $535=($534|0)==8;
 if($535){label=60;break;}else{label=61;break;}
 case 60: 
 var $537=$event;
 var $538=(($537+3)|0);
 HEAP8[($538)]=8;
 var $539=$event;
 var $540=(($539+4)|0);
 var $541=HEAP8[($540)];
 var $542=($541&255);
 var $543=$542&15;
 var $544=$543<<4;
 var $545=(($544)&255);
 var $546=$event;
 var $547=(($546+4)|0);
 HEAP8[($547)]=$545;
 label=61;break;
 case 61: 
 label=70;break;
 case 62: 
 var $550=$event;
 var $551=(($550+3)|0);
 HEAP8[($551)]=16;
 label=70;break;
 case 63: 
 var $553=$event;
 var $554=(($553+3)|0);
 HEAP8[($554)]=27;
 label=70;break;
 case 64: 
 var $556=$event;
 var $557=(($556+3)|0);
 HEAP8[($557)]=-84;
 label=70;break;
 case 65: 
 var $559=$event;
 var $560=(($559+3)|0);
 HEAP8[($560)]=-100;
 label=70;break;
 case 66: 
 var $562=$event;
 var $563=(($562+3)|0);
 HEAP8[($563)]=-99;
 label=70;break;
 case 67: 
 var $565=$event;
 var $566=(($565+3)|0);
 HEAP8[($566)]=-97;
 label=70;break;
 case 68: 
 var $568=$event;
 var $569=(($568+3)|0);
 HEAP8[($569)]=-98;
 label=70;break;
 case 69: 
 var $571=$event;
 var $572=(($571+4)|0);
 HEAP8[($572)]=0;
 var $573=$event;
 var $574=(($573+3)|0);
 HEAP8[($574)]=0;
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 var $577=$b;
 var $578=($577&255);
 var $579=$578&128;
 var $580=($579|0)!=0;
 if($580){label=72;break;}else{label=73;break;}
 case 72: 
 var $582=$3;
 var $583=_hio_read8($582);
 var $584=($583&255);
 var $585=((($584)+(1))|0);
 var $586=(($585)&255);
 var $587=$event;
 var $588=(($587+2)|0);
 HEAP8[($588)]=$586;
 label=73;break;
 case 73: 
 label=44;break;
 case 74: 
 label=75;break;
 case 75: 
 var $592=$i;
 var $593=((($592)+(1))|0);
 $i=$593;
 label=38;break;
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 $i=0;
 label=79;break;
 case 79: 
 var $598=$i;
 var $599=$mod;
 var $600=(($599+144)|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=($598|0)<($601|0);
 if($602){label=80;break;}else{label=88;break;}
 case 80: 
 var $604=$i;
 var $605=$mod;
 var $606=(($605+176)|0);
 var $607=HEAP32[(($606)>>2)];
 var $608=(($607+((($604)*(764))&-1))|0);
 var $609=(($608+36)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=($610|0)==0;
 if($611){label=81;break;}else{label=82;break;}
 case 81: 
 label=87;break;
 case 82: 
 var $614=$i;
 var $615=$mod;
 var $616=(($615+180)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=(($617+((($614)*(52))&-1))|0);
 var $619=(($618+32)|0);
 var $620=HEAP32[(($619)>>2)];
 var $621=($620|0)==0;
 if($621){label=83;break;}else{label=84;break;}
 case 83: 
 label=87;break;
 case 84: 
 var $624=$3;
 var $625=$4;
 var $626=$i;
 var $627=(($smp_ofs+($626<<2))|0);
 var $628=HEAP32[(($627)>>2)];
 var $629=((($625)+($628))|0);
 var $630=_hio_seek($624,$629,0);
 var $631=$2;
 var $632=$3;
 var $633=$i;
 var $634=$mod;
 var $635=(($634+180)|0);
 var $636=HEAP32[(($635)>>2)];
 var $637=(($636+((($633)*(52))&-1))|0);
 var $638=_load_sample($631,$632,4,$637,0);
 var $639=($638|0)<0;
 if($639){label=85;break;}else{label=86;break;}
 case 85: 
 $1=-1;
 label=93;break;
 case 86: 
 label=87;break;
 case 87: 
 var $643=$i;
 var $644=((($643)+(1))|0);
 $i=$644;
 label=79;break;
 case 88: 
 var $646=$2;
 var $647=(($646+1276)|0);
 HEAP32[(($647)>>2)]=4224;
 $i=0;
 label=89;break;
 case 89: 
 var $649=$i;
 var $650=$mod;
 var $651=(($650+136)|0);
 var $652=HEAP32[(($651)>>2)];
 var $653=($649|0)<($652|0);
 if($653){label=90;break;}else{label=92;break;}
 case 90: 
 var $655=$i;
 var $656=(($pfh+64)|0);
 var $657=(($656+$655)|0);
 var $658=HEAP8[($657)];
 var $659=($658&255);
 var $660=$659<<4;
 var $661=$i;
 var $662=$mod;
 var $663=(($662+184)|0);
 var $664=(($663+((($661)*(12))&-1))|0);
 var $665=(($664)|0);
 HEAP32[(($665)>>2)]=$660;
 label=91;break;
 case 91: 
 var $667=$i;
 var $668=((($667)+(1))|0);
 $i=$668;
 label=89;break;
 case 92: 
 var $670=$2;
 var $671=(($670+1280)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672|8389153;
 HEAP32[(($671)>>2)]=$673;
 var $674=$2;
 var $675=(($674+1284)|0);
 HEAP32[(($675)>>2)]=2;
 $1=0;
 label=93;break;
 case 93: 
 var $677=$1;
 STACKTOP=sp;return $677;
  default: assert(0, "bad label: " + label);
 }
}
function _pw_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $11=$2;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$3;
 var $15=$4;
 var $16=_pw_test_format($13,$14,$15,0);
 $1=$16;
 label=4;break;
 case 4: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _pw_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $mh=sp;
 var $mod_event=(sp)+(1088);
 var $name=(sp)+(1096);
 var $tmp=(sp)+(1104);
 var $i;
 var $j;
 var $fd;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 var $7=(($tmp)|0);
 var $8=_get_temp_dir($7,4096);
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=67;break;
 case 3: 
 var $12=(($tmp)|0);
 var $13=_strlcat($12,26080,4096);
 var $14=(($tmp)|0);
 var $15=_mkstemp($14);
 $fd=$15;
 var $16=($15|0)<0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=67;break;
 case 5: 
 var $19=$3;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=_fileno($21);
 var $23=$fd;
 var $24=_pw_wizardry($22,$23,$name);
 var $25=($24|0)<0;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$fd;
 var $28=_close($27);
 var $29=(($tmp)|0);
 var $30=_unlink($29);
 $1=-1;
 label=67;break;
 case 7: 
 var $32=$fd;
 var $33=_hio_open_fd($32,24488);
 $3=$33;
 var $34=($33|0)==0;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=$fd;
 var $37=_close($36);
 var $38=(($tmp)|0);
 var $39=_unlink($38);
 $1=-1;
 label=67;break;
 case 9: 
 label=10;break;
 case 10: 
 var $42=$3;
 var $43=$4;
 var $44=_hio_seek($42,$43,0);
 label=11;break;
 case 11: 
 var $46=(($mh)|0);
 var $47=$46;
 var $48=$3;
 var $49=_hio_read($47,20,1,$48);
 $i=0;
 label=12;break;
 case 12: 
 var $51=$i;
 var $52=($51|0)<31;
 if($52){label=13;break;}else{label=15;break;}
 case 13: 
 var $54=$i;
 var $55=(($mh+20)|0);
 var $56=(($55+((($54)*(30))&-1))|0);
 var $57=(($56)|0);
 var $58=$57;
 var $59=$3;
 var $60=_hio_read($58,22,1,$59);
 var $61=$3;
 var $62=_hio_read16b($61);
 var $63=$i;
 var $64=(($mh+20)|0);
 var $65=(($64+((($63)*(30))&-1))|0);
 var $66=(($65+22)|0);
 HEAP16[(($66)>>1)]=$62;
 var $67=$3;
 var $68=_hio_read8($67);
 var $69=$i;
 var $70=(($mh+20)|0);
 var $71=(($70+((($69)*(30))&-1))|0);
 var $72=(($71+24)|0);
 HEAP8[($72)]=$68;
 var $73=$3;
 var $74=_hio_read8($73);
 var $75=$i;
 var $76=(($mh+20)|0);
 var $77=(($76+((($75)*(30))&-1))|0);
 var $78=(($77+25)|0);
 HEAP8[($78)]=$74;
 var $79=$3;
 var $80=_hio_read16b($79);
 var $81=$i;
 var $82=(($mh+20)|0);
 var $83=(($82+((($81)*(30))&-1))|0);
 var $84=(($83+26)|0);
 HEAP16[(($84)>>1)]=$80;
 var $85=$3;
 var $86=_hio_read16b($85);
 var $87=$i;
 var $88=(($mh+20)|0);
 var $89=(($88+((($87)*(30))&-1))|0);
 var $90=(($89+28)|0);
 HEAP16[(($90)>>1)]=$86;
 label=14;break;
 case 14: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=12;break;
 case 15: 
 var $95=$3;
 var $96=_hio_read8($95);
 var $97=(($mh+950)|0);
 HEAP8[($97)]=$96;
 var $98=$3;
 var $99=_hio_read8($98);
 var $100=(($mh+951)|0);
 HEAP8[($100)]=$99;
 var $101=(($mh+952)|0);
 var $102=$101;
 var $103=$3;
 var $104=_hio_read($102,128,1,$103);
 var $105=(($mh+1080)|0);
 var $106=$105;
 var $107=$3;
 var $108=_hio_read($106,4,1,$107);
 var $109=(($mh+1080)|0);
 var $110=(($109)|0);
 var $111=_memcmp($110,23512,4);
 var $112=($111|0)!=0;
 if($112){label=16;break;}else{label=17;break;}
 case 16: 
 label=66;break;
 case 17: 
 var $115=$mod;
 var $116=(($115+140)|0);
 HEAP32[(($116)>>2)]=31;
 var $117=$mod;
 var $118=(($117+140)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$mod;
 var $121=(($120+144)|0);
 HEAP32[(($121)>>2)]=$119;
 var $122=$mod;
 var $123=(($122+136)|0);
 HEAP32[(($123)>>2)]=4;
 var $124=(($mh+950)|0);
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$mod;
 var $128=(($127+156)|0);
 HEAP32[(($128)>>2)]=$126;
 var $129=(($mh+951)|0);
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$mod;
 var $133=(($132+160)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=$mod;
 var $135=(($134+952)|0);
 var $136=$135;
 var $137=(($mh+952)|0);
 var $138=$137;
 assert(128 % 1 === 0);(_memcpy($136, $138, 128)|0);
 $i=0;
 label=18;break;
 case 18: 
 var $140=$i;
 var $141=($140|0)<128;
 if($141){label=19;break;}else{label=25;break;}
 case 19: 
 var $143=$mod;
 var $144=(($143+136)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($145|0)>4;
 if($146){label=20;break;}else{label=21;break;}
 case 20: 
 var $148=$i;
 var $149=$mod;
 var $150=(($149+952)|0);
 var $151=(($150+$148)|0);
 var $152=HEAP8[($151)];
 var $153=($152&255);
 var $154=$153>>1;
 var $155=(($154)&255);
 HEAP8[($151)]=$155;
 label=21;break;
 case 21: 
 var $157=$i;
 var $158=$mod;
 var $159=(($158+952)|0);
 var $160=(($159+$157)|0);
 var $161=HEAP8[($160)];
 var $162=($161&255);
 var $163=$mod;
 var $164=(($163+128)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($162|0)>($165|0);
 if($166){label=22;break;}else{label=23;break;}
 case 22: 
 var $168=$i;
 var $169=$mod;
 var $170=(($169+952)|0);
 var $171=(($170+$168)|0);
 var $172=HEAP8[($171)];
 var $173=($172&255);
 var $174=$mod;
 var $175=(($174+128)|0);
 HEAP32[(($175)>>2)]=$173;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $178=$i;
 var $179=((($178)+(1))|0);
 $i=$179;
 label=18;break;
 case 25: 
 var $181=$mod;
 var $182=(($181+128)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=((($183)+(1))|0);
 HEAP32[(($182)>>2)]=$184;
 var $185=$mod;
 var $186=(($185+136)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$mod;
 var $189=(($188+128)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(Math_imul($187,$190)|0);
 var $192=$mod;
 var $193=(($192+132)|0);
 HEAP32[(($193)>>2)]=$191;
 var $194=$mod;
 var $195=(($194)|0);
 var $196=(($195)|0);
 var $197=(($mh)|0);
 var $198=(($197)|0);
 var $199=_snprintf($196,64,22832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$198,tempVarArgs)); STACKTOP=tempVarArgs;
 var $200=$mod;
 var $201=(($200+64)|0);
 var $202=(($201)|0);
 var $203=HEAP32[(($name)>>2)];
 var $204=_snprintf($202,64,22832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$203,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $211=$mod;
 var $212=_instrument_init($211);
 var $213=($212|0)<0;
 if($213){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=67;break;
 case 33: 
 $i=0;
 label=34;break;
 case 34: 
 var $217=$i;
 var $218=$mod;
 var $219=(($218+140)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($217|0)<($220|0);
 if($221){label=35;break;}else{label=43;break;}
 case 35: 
 var $223=$mod;
 var $224=$i;
 var $225=_subinstrument_alloc($223,$224,1);
 var $226=($225|0)<0;
 if($226){label=36;break;}else{label=37;break;}
 case 36: 
 $1=-1;
 label=67;break;
 case 37: 
 var $229=$i;
 var $230=(($mh+20)|0);
 var $231=(($230+((($229)*(30))&-1))|0);
 var $232=(($231+22)|0);
 var $233=HEAP16[(($232)>>1)];
 var $234=($233&65535);
 var $235=($234<<1);
 var $236=$i;
 var $237=$mod;
 var $238=(($237+180)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239+((($236)*(52))&-1))|0);
 var $241=(($240+32)|0);
 HEAP32[(($241)>>2)]=$235;
 var $242=$i;
 var $243=(($mh+20)|0);
 var $244=(($243+((($242)*(30))&-1))|0);
 var $245=(($244+26)|0);
 var $246=HEAP16[(($245)>>1)];
 var $247=($246&65535);
 var $248=($247<<1);
 var $249=$i;
 var $250=$mod;
 var $251=(($250+180)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=(($252+((($249)*(52))&-1))|0);
 var $254=(($253+36)|0);
 HEAP32[(($254)>>2)]=$248;
 var $255=$i;
 var $256=$mod;
 var $257=(($256+180)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(($258+((($255)*(52))&-1))|0);
 var $260=(($259+36)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=$i;
 var $263=(($mh+20)|0);
 var $264=(($263+((($262)*(30))&-1))|0);
 var $265=(($264+28)|0);
 var $266=HEAP16[(($265)>>1)];
 var $267=($266&65535);
 var $268=($267<<1);
 var $269=((($261)+($268))|0);
 var $270=$i;
 var $271=$mod;
 var $272=(($271+180)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+((($270)*(52))&-1))|0);
 var $275=(($274+40)|0);
 HEAP32[(($275)>>2)]=$269;
 var $276=$i;
 var $277=(($mh+20)|0);
 var $278=(($277+((($276)*(30))&-1))|0);
 var $279=(($278+28)|0);
 var $280=HEAP16[(($279)>>1)];
 var $281=($280&65535);
 var $282=($281|0)>1;
 var $283=($282?2:0);
 var $284=$i;
 var $285=$mod;
 var $286=(($285+180)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+((($284)*(52))&-1))|0);
 var $289=(($288+44)|0);
 HEAP32[(($289)>>2)]=$283;
 var $290=$i;
 var $291=(($mh+20)|0);
 var $292=(($291+((($290)*(30))&-1))|0);
 var $293=(($292+24)|0);
 var $294=HEAP8[($293)];
 var $295=(($294<<24)>>24);
 var $296=$295<<4;
 var $297=(($296)&255);
 var $298=(($297<<24)>>24);
 var $299=$i;
 var $300=$mod;
 var $301=(($300+176)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+((($299)*(764))&-1))|0);
 var $304=(($303+756)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305)|0);
 var $307=(($306+16)|0);
 HEAP32[(($307)>>2)]=$298;
 var $308=$i;
 var $309=(($mh+20)|0);
 var $310=(($309+((($308)*(30))&-1))|0);
 var $311=(($310+25)|0);
 var $312=HEAP8[($311)];
 var $313=(($312<<24)>>24);
 var $314=$i;
 var $315=$mod;
 var $316=(($315+176)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(($317+((($314)*(764))&-1))|0);
 var $319=(($318+756)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320)|0);
 var $322=(($321)|0);
 HEAP32[(($322)>>2)]=$313;
 var $323=$i;
 var $324=$mod;
 var $325=(($324+176)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($326+((($323)*(764))&-1))|0);
 var $328=(($327+756)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($329)|0);
 var $331=(($330+8)|0);
 HEAP32[(($331)>>2)]=128;
 var $332=$i;
 var $333=$i;
 var $334=$mod;
 var $335=(($334+176)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+((($333)*(764))&-1))|0);
 var $338=(($337+756)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($339)|0);
 var $341=(($340+40)|0);
 HEAP32[(($341)>>2)]=$332;
 var $342=$i;
 var $343=$mod;
 var $344=(($343+176)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=(($345+((($342)*(764))&-1))|0);
 var $347=(($346+40)|0);
 HEAP32[(($347)>>2)]=4095;
 var $348=$i;
 var $349=$mod;
 var $350=(($349+180)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=(($351+((($348)*(52))&-1))|0);
 var $353=(($352+32)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=($354|0)>0;
 if($355){label=38;break;}else{label=39;break;}
 case 38: 
 var $357=$i;
 var $358=$mod;
 var $359=(($358+176)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360+((($357)*(764))&-1))|0);
 var $362=(($361+36)|0);
 HEAP32[(($362)>>2)]=1;
 label=39;break;
 case 39: 
 var $364=$mod;
 var $365=$i;
 var $366=$i;
 var $367=(($mh+20)|0);
 var $368=(($367+((($366)*(30))&-1))|0);
 var $369=(($368)|0);
 var $370=(($369)|0);
 var $371=_instrument_name($364,$365,$370,22);
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 var $375=$i;
 var $376=((($375)+(1))|0);
 $i=$376;
 label=34;break;
 case 43: 
 var $378=$mod;
 var $379=_pattern_init($378);
 var $380=($379|0)<0;
 if($380){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=67;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 $i=0;
 label=48;break;
 case 48: 
 var $386=$i;
 var $387=$mod;
 var $388=(($387+128)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=($386|0)<($389|0);
 if($390){label=49;break;}else{label=57;break;}
 case 49: 
 var $392=$mod;
 var $393=$i;
 var $394=_pattern_tracks_alloc($392,$393,64);
 var $395=($394|0)<0;
 if($395){label=50;break;}else{label=51;break;}
 case 50: 
 $1=-1;
 label=67;break;
 case 51: 
 $j=0;
 label=52;break;
 case 52: 
 var $399=$j;
 var $400=($399|0)<256;
 if($400){label=53;break;}else{label=55;break;}
 case 53: 
 var $402=$j;
 var $403=(((($402|0))/(4))&-1);
 var $404=$j;
 var $405=(((($404|0))%(4))&-1);
 var $406=$i;
 var $407=$2;
 var $408=(($407)|0);
 var $409=(($408+168)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($410+($406<<2))|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($412+4)|0);
 var $414=(($413+($405<<2))|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=$2;
 var $417=(($416)|0);
 var $418=(($417+172)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=(($419+($415<<2))|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=(($421+4)|0);
 var $423=(($422+($403<<3))|0);
 $event=$423;
 var $424=(($mod_event)|0);
 var $425=$3;
 var $426=_hio_read($424,1,4,$425);
 var $427=$event;
 var $428=(($mod_event)|0);
 _decode_protracker_event($427,$428);
 label=54;break;
 case 54: 
 var $430=$j;
 var $431=((($430)+(1))|0);
 $j=$431;
 label=52;break;
 case 55: 
 label=56;break;
 case 56: 
 var $434=$i;
 var $435=((($434)+(1))|0);
 $i=$435;
 label=48;break;
 case 57: 
 var $437=$2;
 var $438=(($437+1280)|0);
 var $439=HEAP32[(($438)>>2)];
 var $440=$439|8192;
 HEAP32[(($438)>>2)]=$440;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $i=0;
 label=60;break;
 case 60: 
 var $444=$i;
 var $445=$mod;
 var $446=(($445+144)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=($444|0)<($447|0);
 if($448){label=61;break;}else{label=65;break;}
 case 61: 
 var $450=$2;
 var $451=$3;
 var $452=$i;
 var $453=$mod;
 var $454=(($453+180)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=(($455+((($452)*(52))&-1))|0);
 var $457=_load_sample($450,$451,0,$456,0);
 var $458=($457|0)<0;
 if($458){label=62;break;}else{label=63;break;}
 case 62: 
 label=66;break;
 case 63: 
 label=64;break;
 case 64: 
 var $462=$i;
 var $463=((($462)+(1))|0);
 $i=$463;
 label=60;break;
 case 65: 
 var $465=$3;
 var $466=_hio_close($465);
 var $467=(($tmp)|0);
 var $468=_unlink($467);
 $1=0;
 label=67;break;
 case 66: 
 var $470=$3;
 var $471=_hio_close($470);
 var $472=(($tmp)|0);
 var $473=_unlink($472);
 $1=-1;
 label=67;break;
 case 67: 
 var $475=$1;
 STACKTOP=sp;return $475;
  default: assert(0, "bad label: " + label);
 }
}
function _pw_test_format($f,$t,$start,$info){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $b;
 var $extra;
 var $s;
 var $buf;
 $2=$f;
 $3=$t;
 $4=$start;
 $5=$info;
 $s=65536;
 var $6=_calloc(1,65536);
 $b=$6;
 var $7=$b;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=9;break;
 case 3: 
 var $11=$b;
 var $12=$s;
 var $13=$2;
 var $14=_fread($11,$12,1,$13);
 label=4;break;
 case 4: 
 var $16=$b;
 var $17=$s;
 var $18=$5;
 var $19=_pw_check($16,$17,$18);
 $extra=$19;
 var $20=($19|0)>0;
 if($20){label=5;break;}else{label=8;break;}
 case 5: 
 var $22=$b;
 var $23=$s;
 var $24=$extra;
 var $25=((($23)+($24))|0);
 var $26=_realloc($22,$25);
 $buf=$26;
 var $27=$buf;
 var $28=($27|0)==0;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $30=$b;
 _free($30);
 $1=-1;
 label=9;break;
 case 7: 
 var $32=$buf;
 $b=$32;
 var $33=$b;
 var $34=$s;
 var $35=(($33+$34)|0);
 var $36=$extra;
 var $37=$2;
 var $38=_fread($35,$36,1,$37);
 var $39=$extra;
 var $40=$s;
 var $41=((($40)+($39))|0);
 $s=$41;
 label=4;break;
 case 8: 
 var $43=$b;
 _free($43);
 var $44=$extra;
 var $45=($44|0)==0;
 var $46=($45?0:-1);
 $1=$46;
 label=9;break;
 case 9: 
 var $48=$1;
 STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }
}
function _rad_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,16,$6);
 var $8=($7>>>0)<16;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,24464,16);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $16=$2;
 var $17=$3;
 _read_title($16,$17,0);
 $1=0;
 label=6;break;
 case 6: 
 var $19=$1;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _rad_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $sid=sp;
 var $ppat=(sp)+(16);
 var $b;
 var $r;
 var $c;
 var $version;
 var $flags;
 var $pos;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_seek($12,16,0);
 var $14=$3;
 var $15=_hio_read8($14);
 $version=$15;
 var $16=$3;
 var $17=_hio_read8($16);
 $flags=$17;
 var $18=$mod;
 var $19=(($18+136)|0);
 HEAP32[(($19)>>2)]=9;
 var $20=$mod;
 var $21=(($20+152)|0);
 HEAP32[(($21)>>2)]=125;
 var $22=$flags;
 var $23=($22&255);
 var $24=$23&31;
 var $25=$mod;
 var $26=(($25+148)|0);
 HEAP32[(($26)>>2)]=$24;
 var $27=$mod;
 var $28=(($27+148)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)<=2;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 var $32=$mod;
 var $33=(($32+148)|0);
 HEAP32[(($33)>>2)]=6;
 label=5;break;
 case 5: 
 var $35=$mod;
 var $36=(($35+144)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=$2;
 var $38=$version;
 var $39=($38&255);
 var $40=$39&240;
 var $41=$40>>4;
 var $42=$version;
 var $43=($42&255);
 var $44=$43&15;
 _set_type($37,26040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$41,HEAP32[(((tempVarArgs)+(8))>>2)]=$44,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $51=$flags;
 var $52=($51&255);
 var $53=$52&128;
 var $54=($53|0)!=0;
 if($54){label=12;break;}else{label=16;break;}
 case 12: 
 label=13;break;
 case 13: 
 var $57=$3;
 var $58=_hio_read8($57);
 $b=$58;
 var $59=($58&255);
 var $60=($59|0)!=0;
 if($60){label=14;break;}else{label=15;break;}
 case 14: 
 label=13;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $66=$3;
 var $67=_hio_tell($66);
 $pos=$67;
 var $68=$mod;
 var $69=(($68+140)|0);
 HEAP32[(($69)>>2)]=0;
 label=19;break;
 case 19: 
 var $71=$3;
 var $72=_hio_read8($71);
 $b=$72;
 var $73=($72&255);
 var $74=($73|0)!=0;
 if($74){label=20;break;}else{label=21;break;}
 case 20: 
 var $76=$b;
 var $77=($76&255);
 var $78=$mod;
 var $79=(($78+140)|0);
 HEAP32[(($79)>>2)]=$77;
 var $80=(($sid)|0);
 var $81=$3;
 var $82=_hio_read($80,1,11,$81);
 label=19;break;
 case 21: 
 var $84=$3;
 var $85=$pos;
 var $86=_hio_seek($84,$85,0);
 var $87=$mod;
 var $88=(($87+140)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$mod;
 var $91=(($90+144)|0);
 HEAP32[(($91)>>2)]=$89;
 var $92=$mod;
 var $93=_instrument_init($92);
 var $94=($93|0)<0;
 if($94){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=91;break;
 case 23: 
 label=24;break;
 case 24: 
 var $98=$3;
 var $99=_hio_read8($98);
 $b=$99;
 var $100=($99&255);
 var $101=($100|0)!=0;
 if($101){label=25;break;}else{label=28;break;}
 case 25: 
 var $103=(($sid)|0);
 var $104=$3;
 var $105=_hio_read($103,1,11,$104);
 var $106=$2;
 var $107=$3;
 var $108=$b;
 var $109=($108&255);
 var $110=((($109)-(1))|0);
 var $111=$mod;
 var $112=(($111+180)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+((($110)*(52))&-1))|0);
 var $115=(($sid)|0);
 var $116=_load_sample($106,$107,12288,$114,$115);
 var $117=($116|0)<0;
 if($117){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=91;break;
 case 27: 
 label=24;break;
 case 28: 
 $i=0;
 label=29;break;
 case 29: 
 var $122=$i;
 var $123=$mod;
 var $124=(($123+140)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($122|0)<($125|0);
 if($126){label=30;break;}else{label=34;break;}
 case 30: 
 var $128=$mod;
 var $129=$i;
 var $130=_subinstrument_alloc($128,$129,1);
 var $131=($130|0)<0;
 if($131){label=31;break;}else{label=32;break;}
 case 31: 
 $1=-1;
 label=91;break;
 case 32: 
 var $134=$i;
 var $135=$mod;
 var $136=(($135+176)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+((($134)*(764))&-1))|0);
 var $139=(($138+756)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140)|0);
 var $142=(($141)|0);
 HEAP32[(($142)>>2)]=64;
 var $143=$i;
 var $144=$mod;
 var $145=(($144+176)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+((($143)*(764))&-1))|0);
 var $148=(($147+756)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149)|0);
 var $151=(($150+8)|0);
 HEAP32[(($151)>>2)]=128;
 var $152=$i;
 var $153=$mod;
 var $154=(($153+176)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+((($152)*(764))&-1))|0);
 var $157=(($156+756)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158)|0);
 var $160=(($159+12)|0);
 HEAP32[(($160)>>2)]=-1;
 var $161=$i;
 var $162=$i;
 var $163=$mod;
 var $164=(($163+176)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+((($162)*(764))&-1))|0);
 var $167=(($166+756)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168)|0);
 var $170=(($169+40)|0);
 HEAP32[(($170)>>2)]=$161;
 var $171=$i;
 var $172=$mod;
 var $173=(($172+176)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+((($171)*(764))&-1))|0);
 var $176=(($175+36)|0);
 HEAP32[(($176)>>2)]=1;
 label=33;break;
 case 33: 
 var $178=$i;
 var $179=((($178)+(1))|0);
 $i=$179;
 label=29;break;
 case 34: 
 var $181=$3;
 var $182=_hio_read8($181);
 var $183=($182&255);
 var $184=$mod;
 var $185=(($184+156)|0);
 HEAP32[(($185)>>2)]=$183;
 $i=0;
 $j=0;
 label=35;break;
 case 35: 
 var $187=$i;
 var $188=$mod;
 var $189=(($188+156)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($187|0)<($190|0);
 if($191){label=36;break;}else{label=40;break;}
 case 36: 
 var $193=$3;
 var $194=_hio_read8($193);
 $b=$194;
 var $195=$b;
 var $196=($195&255);
 var $197=($196|0)<128;
 if($197){label=37;break;}else{label=38;break;}
 case 37: 
 var $199=$b;
 var $200=$j;
 var $201=((($200)+(1))|0);
 $j=$201;
 var $202=$mod;
 var $203=(($202+952)|0);
 var $204=(($203+$200)|0);
 HEAP8[($204)]=$199;
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $207=$i;
 var $208=((($207)+(1))|0);
 $i=$208;
 label=35;break;
 case 40: 
 $i=0;
 var $210=$mod;
 var $211=(($210+128)|0);
 HEAP32[(($211)>>2)]=0;
 label=41;break;
 case 41: 
 var $213=$i;
 var $214=($213|0)<32;
 if($214){label=42;break;}else{label=46;break;}
 case 42: 
 var $216=$3;
 var $217=_hio_read16l($216);
 var $218=$i;
 var $219=(($ppat+($218<<1))|0);
 HEAP16[(($219)>>1)]=$217;
 var $220=$i;
 var $221=(($ppat+($220<<1))|0);
 var $222=HEAP16[(($221)>>1)];
 var $223=(($222<<16)>>16)!=0;
 if($223){label=43;break;}else{label=44;break;}
 case 43: 
 var $225=$mod;
 var $226=(($225+128)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=((($227)+(1))|0);
 HEAP32[(($226)>>2)]=$228;
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $231=$i;
 var $232=((($231)+(1))|0);
 $i=$232;
 label=41;break;
 case 46: 
 var $234=$mod;
 var $235=(($234+128)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=$mod;
 var $238=(($237+136)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(Math_imul($236,$239)|0);
 var $241=$mod;
 var $242=(($241+132)|0);
 HEAP32[(($242)>>2)]=$240;
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 var $249=$mod;
 var $250=_pattern_init($249);
 var $251=($250|0)<0;
 if($251){label=53;break;}else{label=54;break;}
 case 53: 
 $1=-1;
 label=91;break;
 case 54: 
 $i=0;
 label=55;break;
 case 55: 
 var $255=$i;
 var $256=$mod;
 var $257=(($256+128)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($255|0)<($258|0);
 if($259){label=56;break;}else{label=86;break;}
 case 56: 
 var $261=$mod;
 var $262=$i;
 var $263=_pattern_tracks_alloc($261,$262,64);
 var $264=($263|0)<0;
 if($264){label=57;break;}else{label=58;break;}
 case 57: 
 $1=-1;
 label=91;break;
 case 58: 
 var $267=$i;
 var $268=(($ppat+($267<<1))|0);
 var $269=HEAP16[(($268)>>1)];
 var $270=($269&65535);
 var $271=($270|0)==0;
 if($271){label=59;break;}else{label=60;break;}
 case 59: 
 label=85;break;
 case 60: 
 var $274=$3;
 var $275=$4;
 var $276=$i;
 var $277=(($ppat+($276<<1))|0);
 var $278=HEAP16[(($277)>>1)];
 var $279=($278&65535);
 var $280=((($275)+($279))|0);
 var $281=_hio_seek($274,$280,0);
 label=61;break;
 case 61: 
 var $283=$3;
 var $284=_hio_read8($283);
 $r=$284;
 var $285=$r;
 var $286=($285&255);
 var $287=$286&127;
 var $288=($287|0)>=64;
 if($288){label=62;break;}else{label=65;break;}
 case 62: 
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 var $294=$3;
 var $295=_hio_read8($294);
 $c=$295;
 var $296=$c;
 var $297=($296&255);
 var $298=$297&127;
 var $299=$mod;
 var $300=(($299+136)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($298|0)>=($301|0);
 if($302){label=67;break;}else{label=70;break;}
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 var $307=$r;
 var $308=($307&255);
 var $309=$308&127;
 var $310=$c;
 var $311=($310&255);
 var $312=$311&127;
 var $313=$i;
 var $314=$2;
 var $315=(($314)|0);
 var $316=(($315+168)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(($317+($313<<2))|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($319+4)|0);
 var $321=(($320+($312<<2))|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=$2;
 var $324=(($323)|0);
 var $325=(($324+172)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($326+($322<<2))|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($328+4)|0);
 var $330=(($329+($309<<3))|0);
 $event=$330;
 var $331=$3;
 var $332=_hio_read8($331);
 $b=$332;
 var $333=$b;
 var $334=($333&255);
 var $335=$334&128;
 var $336=$335>>3;
 var $337=(($336)&255);
 var $338=$event;
 var $339=(($338+1)|0);
 HEAP8[($339)]=$337;
 var $340=$b;
 var $341=($340&255);
 var $342=$341&15;
 var $343=(($342)&255);
 var $344=$event;
 var $345=(($344)|0);
 HEAP8[($345)]=$343;
 var $346=$event;
 var $347=(($346)|0);
 var $348=HEAP8[($347)];
 var $349=($348&255);
 var $350=($349|0)==15;
 if($350){label=71;break;}else{label=72;break;}
 case 71: 
 var $352=$event;
 var $353=(($352)|0);
 HEAP8[($353)]=-127;
 label=75;break;
 case 72: 
 var $355=$event;
 var $356=(($355)|0);
 var $357=HEAP8[($356)];
 var $358=(($357<<24)>>24)!=0;
 if($358){label=73;break;}else{label=74;break;}
 case 73: 
 var $360=$b;
 var $361=($360&255);
 var $362=$361&112;
 var $363=$362>>4;
 var $364=((($363)*(12))&-1);
 var $365=((($364)+(26))|0);
 var $366=$event;
 var $367=(($366)|0);
 var $368=HEAP8[($367)];
 var $369=($368&255);
 var $370=((($369)+($365))|0);
 var $371=(($370)&255);
 HEAP8[($367)]=$371;
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 var $374=$3;
 var $375=_hio_read8($374);
 $b=$375;
 var $376=$b;
 var $377=($376&255);
 var $378=$377&240;
 var $379=$378>>4;
 var $380=$event;
 var $381=(($380+1)|0);
 var $382=HEAP8[($381)];
 var $383=($382&255);
 var $384=$383|$379;
 var $385=(($384)&255);
 HEAP8[($381)]=$385;
 var $386=$b;
 var $387=($386&255);
 var $388=$387&15;
 var $389=(($388)&255);
 var $390=$event;
 var $391=(($390+3)|0);
 HEAP8[($391)]=$389;
 var $392=$event;
 var $393=(($392+3)|0);
 var $394=HEAP8[($393)];
 var $395=(($394<<24)>>24)!=0;
 if($395){label=76;break;}else{label=80;break;}
 case 76: 
 var $397=$3;
 var $398=_hio_read8($397);
 $b=$398;
 var $399=$b;
 var $400=$event;
 var $401=(($400+4)|0);
 HEAP8[($401)]=$399;
 var $402=$event;
 var $403=(($402+3)|0);
 var $404=HEAP8[($403)];
 var $405=($404&255);
 var $406=($405|0)==15;
 if($406){label=77;break;}else{label=79;break;}
 case 77: 
 var $408=$event;
 var $409=(($408+4)|0);
 var $410=HEAP8[($409)];
 var $411=($410&255);
 var $412=($411|0)<=2;
 if($412){label=78;break;}else{label=79;break;}
 case 78: 
 var $414=$event;
 var $415=(($414+4)|0);
 HEAP8[($415)]=6;
 label=79;break;
 case 79: 
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 var $419=$c;
 var $420=($419&255);
 var $421=$420^-1;
 var $422=$421&128;
 var $423=($422|0)!=0;
 if($423){label=66;break;}else{label=82;break;}
 case 82: 
 label=83;break;
 case 83: 
 var $426=$r;
 var $427=($426&255);
 var $428=$427^-1;
 var $429=$428&128;
 var $430=($429|0)!=0;
 if($430){label=61;break;}else{label=84;break;}
 case 84: 
 label=85;break;
 case 85: 
 var $433=$i;
 var $434=((($433)+(1))|0);
 $i=$434;
 label=55;break;
 case 86: 
 $i=0;
 label=87;break;
 case 87: 
 var $437=$i;
 var $438=$mod;
 var $439=(($438+136)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=($437|0)<($440|0);
 if($441){label=88;break;}else{label=90;break;}
 case 88: 
 var $443=$i;
 var $444=$mod;
 var $445=(($444+184)|0);
 var $446=(($445+((($443)*(12))&-1))|0);
 var $447=(($446)|0);
 HEAP32[(($447)>>2)]=128;
 var $448=$i;
 var $449=$mod;
 var $450=(($449+184)|0);
 var $451=(($450+((($448)*(12))&-1))|0);
 var $452=(($451+8)|0);
 HEAP32[(($452)>>2)]=1;
 label=89;break;
 case 89: 
 var $454=$i;
 var $455=((($454)+(1))|0);
 $i=$455;
 label=87;break;
 case 90: 
 var $457=$2;
 var $458=(($457+6552)|0);
 HEAP32[(($458)>>2)]=1760;
 var $459=$2;
 var $460=(($459+1280)|0);
 var $461=HEAP32[(($460)>>2)];
 var $462=$461|4096;
 HEAP32[(($460)>>2)]=$462;
 $1=0;
 label=91;break;
 case 91: 
 var $464=$1;
 STACKTOP=sp;return $464;
  default: assert(0, "bad label: " + label);
 }
}
function _rtm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,4,$6);
 var $8=($7>>>0)<4;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,26032,4);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=8;break;
 case 5: 
 var $16=$2;
 var $17=_hio_read8($16);
 var $18=($17&255);
 var $19=($18|0)!=32;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=8;break;
 case 7: 
 var $22=$2;
 var $23=$3;
 _read_title($22,$23,32);
 $1=0;
 label=8;break;
 case 8: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _rtm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+656)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $r;
 var $event;
 var $oh=sp;
 var $rh=(sp)+(48);
 var $rp=(sp)+(184);
 var $ri=(sp)+(200);
 var $rs=(sp)+(560);
 var $offset;
 var $smpnum;
 var $version;
 var $tracker_name=(sp)+(592);
 var $composer=(sp)+(616);
 var $c;
 var $xxi;
 var $sub;
 var $xxs;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_read_object_header($12,$oh,26032);
 var $14=($13|0)<0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=132;break;
 case 5: 
 var $17=(($oh+38)|0);
 var $18=HEAP16[(($17)>>1)];
 var $19=($18&65535);
 $version=$19;
 var $20=(($tracker_name)|0);
 var $21=$3;
 var $22=_hio_read($20,1,20,$21);
 var $23=(($tracker_name+20)|0);
 HEAP8[($23)]=0;
 var $24=(($composer)|0);
 var $25=$3;
 var $26=_hio_read($24,1,32,$25);
 var $27=(($composer+32)|0);
 HEAP8[($27)]=0;
 var $28=$3;
 var $29=_hio_read16l($28);
 var $30=(($rh+52)|0);
 HEAP16[(($30)>>1)]=$29;
 var $31=$3;
 var $32=_hio_read8($31);
 var $33=(($rh+54)|0);
 HEAP8[($33)]=$32;
 var $34=$3;
 var $35=_hio_read8($34);
 var $36=(($rh+55)|0);
 HEAP8[($36)]=$35;
 var $37=$3;
 var $38=_hio_read16l($37);
 var $39=(($rh+56)|0);
 HEAP16[(($39)>>1)]=$38;
 var $40=$3;
 var $41=_hio_read16l($40);
 var $42=(($rh+58)|0);
 HEAP16[(($42)>>1)]=$41;
 var $43=$3;
 var $44=_hio_read8($43);
 var $45=(($rh+60)|0);
 HEAP8[($45)]=$44;
 var $46=$3;
 var $47=_hio_read8($46);
 var $48=(($rh+61)|0);
 HEAP8[($48)]=$47;
 var $49=(($rh+62)|0);
 var $50=$49;
 var $51=$3;
 var $52=_hio_read($50,32,1,$51);
 var $53=$3;
 var $54=_hio_read32l($53);
 var $55=(($rh+96)|0);
 HEAP32[(($55)>>2)]=$54;
 var $56=$version;
 var $57=($56|0)>=274;
 if($57){label=6;break;}else{label=7;break;}
 case 6: 
 var $59=$3;
 var $60=_hio_seek($59,32,1);
 label=7;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $63=$i;
 var $64=(($rh+56)|0);
 var $65=HEAP16[(($64)>>1)];
 var $66=($65&65535);
 var $67=($63|0)<($66|0);
 if($67){label=9;break;}else{label=11;break;}
 case 9: 
 var $69=$3;
 var $70=_hio_read16l($69);
 var $71=(($70)&255);
 var $72=$i;
 var $73=$mod;
 var $74=(($73+952)|0);
 var $75=(($74+$72)|0);
 HEAP8[($75)]=$71;
 label=10;break;
 case 10: 
 var $77=$i;
 var $78=((($77)+(1))|0);
 $i=$78;
 label=8;break;
 case 11: 
 var $80=$mod;
 var $81=(($80)|0);
 var $82=(($81)|0);
 var $83=(($oh+5)|0);
 var $84=(($83)|0);
 var $85=_strlcpy($82,$84,20);
 var $86=$mod;
 var $87=(($86+64)|0);
 var $88=(($87)|0);
 var $89=(($tracker_name)|0);
 var $90=$version;
 var $91=$90>>8;
 var $92=$version;
 var $93=$92&255;
 var $94=_snprintf($88,64,24448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$89,HEAP32[(((tempVarArgs)+(8))>>2)]=$91,HEAP32[(((tempVarArgs)+(16))>>2)]=$93,tempVarArgs)); STACKTOP=tempVarArgs;
 var $95=(($rh+56)|0);
 var $96=HEAP16[(($95)>>1)];
 var $97=($96&65535);
 var $98=$mod;
 var $99=(($98+156)|0);
 HEAP32[(($99)>>2)]=$97;
 var $100=(($rh+58)|0);
 var $101=HEAP16[(($100)>>1)];
 var $102=($101&65535);
 var $103=$mod;
 var $104=(($103+128)|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=(($rh+54)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$mod;
 var $109=(($108+136)|0);
 HEAP32[(($109)>>2)]=$107;
 var $110=$mod;
 var $111=(($110+136)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$mod;
 var $114=(($113+128)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(Math_imul($112,$115)|0);
 var $117=$mod;
 var $118=(($117+132)|0);
 HEAP32[(($118)>>2)]=$116;
 var $119=(($rh+55)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=$mod;
 var $123=(($122+140)|0);
 HEAP32[(($123)>>2)]=$121;
 var $124=(($rh+60)|0);
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$mod;
 var $128=(($127+148)|0);
 HEAP32[(($128)>>2)]=$126;
 var $129=(($rh+61)|0);
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$mod;
 var $133=(($132+152)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=(($rh+52)|0);
 var $135=HEAP16[(($134)>>1)];
 var $136=($135&65535);
 var $137=$136&1;
 var $138=($137|0)!=0;
 var $139=($138?4096:0);
 var $140=$2;
 var $141=(($140+1280)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$142|$139;
 HEAP32[(($141)>>2)]=$143;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 $i=0;
 label=18;break;
 case 18: 
 var $151=$i;
 var $152=$mod;
 var $153=(($152+136)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($151|0)<($154|0);
 if($155){label=19;break;}else{label=21;break;}
 case 19: 
 var $157=$i;
 var $158=(($rh+62)|0);
 var $159=(($158+$157)|0);
 var $160=HEAP8[($159)];
 var $161=(($160<<24)>>24);
 var $162=$161&255;
 var $163=$i;
 var $164=$mod;
 var $165=(($164+184)|0);
 var $166=(($165+((($163)*(12))&-1))|0);
 var $167=(($166)|0);
 HEAP32[(($167)>>2)]=$162;
 label=20;break;
 case 20: 
 var $169=$i;
 var $170=((($169)+(1))|0);
 $i=$170;
 label=18;break;
 case 21: 
 var $172=$mod;
 var $173=_pattern_init($172);
 var $174=($173|0)<0;
 if($174){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=132;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $179=(($oh+40)|0);
 var $180=HEAP16[(($179)>>1)];
 var $181=($180&65535);
 var $182=((($181)+(42))|0);
 var $183=(($rh+96)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=((($182)+($184))|0);
 $offset=$185;
 $i=0;
 label=26;break;
 case 26: 
 var $187=$i;
 var $188=$mod;
 var $189=(($188+128)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($187|0)<($190|0);
 if($191){label=27;break;}else{label=65;break;}
 case 27: 
 var $193=$3;
 var $194=$4;
 var $195=$offset;
 var $196=((($194)+($195))|0);
 var $197=_hio_seek($193,$196,0);
 var $198=$3;
 var $199=_read_object_header($198,$oh,23504);
 var $200=($199|0)<0;
 if($200){label=28;break;}else{label=31;break;}
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 $1=-1;
 label=132;break;
 case 31: 
 var $205=$3;
 var $206=_hio_read16l($205);
 var $207=(($rp)|0);
 HEAP16[(($207)>>1)]=$206;
 var $208=$3;
 var $209=_hio_read8($208);
 var $210=(($rp+2)|0);
 HEAP8[($210)]=$209;
 var $211=$3;
 var $212=_hio_read16l($211);
 var $213=(($rp+4)|0);
 HEAP16[(($213)>>1)]=$212;
 var $214=$3;
 var $215=_hio_read32l($214);
 var $216=(($rp+8)|0);
 HEAP32[(($216)>>2)]=$215;
 var $217=(($oh+40)|0);
 var $218=HEAP16[(($217)>>1)];
 var $219=($218&65535);
 var $220=((($219)+(42))|0);
 var $221=(($rp+8)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=((($220)+($222))|0);
 var $224=$offset;
 var $225=((($224)+($223))|0);
 $offset=$225;
 var $226=$mod;
 var $227=$i;
 var $228=(($rp+4)|0);
 var $229=HEAP16[(($228)>>1)];
 var $230=($229&65535);
 var $231=_pattern_tracks_alloc($226,$227,$230);
 var $232=($231|0)<0;
 if($232){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=132;break;
 case 33: 
 $r=0;
 label=34;break;
 case 34: 
 var $236=$r;
 var $237=(($rp+4)|0);
 var $238=HEAP16[(($237)>>1)];
 var $239=($238&65535);
 var $240=($236|0)<($239|0);
 if($240){label=35;break;}else{label=63;break;}
 case 35: 
 $j=0;
 label=36;break;
 case 36: 
 var $243=$3;
 var $244=_hio_read8($243);
 $c=$244;
 var $245=$c;
 var $246=($245&255);
 var $247=($246|0)==0;
 if($247){label=37;break;}else{label=38;break;}
 case 37: 
 label=61;break;
 case 38: 
 var $250=$j;
 var $251=(($rp+2)|0);
 var $252=HEAP8[($251)];
 var $253=($252&255);
 var $254=($250|0)>=($253|0);
 if($254){label=39;break;}else{label=42;break;}
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=61;break;
 case 42: 
 var $259=$r;
 var $260=$j;
 var $261=$i;
 var $262=$2;
 var $263=(($262)|0);
 var $264=(($263+168)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+($261<<2))|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($267+4)|0);
 var $269=(($268+($260<<2))|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=$2;
 var $272=(($271)|0);
 var $273=(($272+172)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=(($274+($270<<2))|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($276+4)|0);
 var $278=(($277+($259<<3))|0);
 $event=$278;
 var $279=$c;
 var $280=($279&255);
 var $281=$280&1;
 var $282=($281|0)!=0;
 if($282){label=43;break;}else{label=44;break;}
 case 43: 
 var $284=$3;
 var $285=_hio_read8($284);
 var $286=($285&255);
 $j=$286;
 var $287=$r;
 var $288=$j;
 var $289=$i;
 var $290=$2;
 var $291=(($290)|0);
 var $292=(($291+168)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293+($289<<2))|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=(($295+4)|0);
 var $297=(($296+($288<<2))|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=$2;
 var $300=(($299)|0);
 var $301=(($300+172)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+($298<<2))|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(($304+4)|0);
 var $306=(($305+($287<<3))|0);
 $event=$306;
 label=44;break;
 case 44: 
 var $308=$c;
 var $309=($308&255);
 var $310=$309&2;
 var $311=($310|0)!=0;
 if($311){label=45;break;}else{label=49;break;}
 case 45: 
 var $313=$3;
 var $314=_hio_read8($313);
 var $315=($314&255);
 var $316=((($315)+(1))|0);
 var $317=(($316)&255);
 var $318=$event;
 var $319=(($318)|0);
 HEAP8[($319)]=$317;
 var $320=$event;
 var $321=(($320)|0);
 var $322=HEAP8[($321)];
 var $323=($322&255);
 var $324=($323|0)==255;
 if($324){label=46;break;}else{label=47;break;}
 case 46: 
 var $326=$event;
 var $327=(($326)|0);
 HEAP8[($327)]=-127;
 label=48;break;
 case 47: 
 var $329=$event;
 var $330=(($329)|0);
 var $331=HEAP8[($330)];
 var $332=($331&255);
 var $333=((($332)+(12))|0);
 var $334=(($333)&255);
 HEAP8[($330)]=$334;
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 var $337=$c;
 var $338=($337&255);
 var $339=$338&4;
 var $340=($339|0)!=0;
 if($340){label=50;break;}else{label=51;break;}
 case 50: 
 var $342=$3;
 var $343=_hio_read8($342);
 var $344=$event;
 var $345=(($344+1)|0);
 HEAP8[($345)]=$343;
 label=51;break;
 case 51: 
 var $347=$c;
 var $348=($347&255);
 var $349=$348&8;
 var $350=($349|0)!=0;
 if($350){label=52;break;}else{label=53;break;}
 case 52: 
 var $352=$3;
 var $353=_hio_read8($352);
 var $354=$event;
 var $355=(($354+3)|0);
 HEAP8[($355)]=$353;
 label=53;break;
 case 53: 
 var $357=$c;
 var $358=($357&255);
 var $359=$358&16;
 var $360=($359|0)!=0;
 if($360){label=54;break;}else{label=55;break;}
 case 54: 
 var $362=$3;
 var $363=_hio_read8($362);
 var $364=$event;
 var $365=(($364+4)|0);
 HEAP8[($365)]=$363;
 label=55;break;
 case 55: 
 var $367=$c;
 var $368=($367&255);
 var $369=$368&32;
 var $370=($369|0)!=0;
 if($370){label=56;break;}else{label=57;break;}
 case 56: 
 var $372=$3;
 var $373=_hio_read8($372);
 var $374=$event;
 var $375=(($374+5)|0);
 HEAP8[($375)]=$373;
 label=57;break;
 case 57: 
 var $377=$c;
 var $378=($377&255);
 var $379=$378&64;
 var $380=($379|0)!=0;
 if($380){label=58;break;}else{label=59;break;}
 case 58: 
 var $382=$3;
 var $383=_hio_read8($382);
 var $384=$event;
 var $385=(($384+6)|0);
 HEAP8[($385)]=$383;
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 var $388=$j;
 var $389=((($388)+(1))|0);
 $j=$389;
 label=36;break;
 case 61: 
 label=62;break;
 case 62: 
 var $392=$r;
 var $393=((($392)+(1))|0);
 $r=$393;
 label=34;break;
 case 63: 
 label=64;break;
 case 64: 
 var $396=$i;
 var $397=((($396)+(1))|0);
 $i=$397;
 label=26;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $401=$3;
 var $402=$4;
 var $403=$offset;
 var $404=((($402)+($403))|0);
 var $405=_hio_seek($401,$404,0);
 var $406=$mod;
 var $407=(($406+144)|0);
 HEAP32[(($407)>>2)]=1024;
 var $408=$mod;
 var $409=_instrument_init($408);
 var $410=($409|0)<0;
 if($410){label=68;break;}else{label=69;break;}
 case 68: 
 $1=-1;
 label=132;break;
 case 69: 
 $smpnum=0;
 $i=0;
 label=70;break;
 case 70: 
 var $414=$i;
 var $415=$mod;
 var $416=(($415+140)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=($414|0)<($417|0);
 if($418){label=71;break;}else{label=129;break;}
 case 71: 
 var $420=$i;
 var $421=$mod;
 var $422=(($421+176)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=(($423+((($420)*(764))&-1))|0);
 $xxi=$424;
 var $425=$3;
 var $426=_read_object_header($425,$oh,22824);
 var $427=($426|0)<0;
 if($427){label=72;break;}else{label=75;break;}
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 $1=-1;
 label=132;break;
 case 75: 
 var $432=$mod;
 var $433=$i;
 var $434=(($oh+5)|0);
 var $435=$434;
 var $436=_instrument_name($432,$433,$435,32);
 var $437=(($oh+40)|0);
 var $438=HEAP16[(($437)>>1)];
 var $439=($438&65535);
 var $440=($439|0)==0;
 if($440){label=76;break;}else{label=79;break;}
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 var $444=(($ri)|0);
 HEAP8[($444)]=0;
 label=128;break;
 case 79: 
 var $446=$3;
 var $447=_hio_read8($446);
 var $448=(($ri)|0);
 HEAP8[($448)]=$447;
 var $449=$3;
 var $450=_hio_read16l($449);
 var $451=(($ri+2)|0);
 HEAP16[(($451)>>1)]=$450;
 var $452=(($ri+4)|0);
 var $453=$452;
 var $454=$3;
 var $455=_hio_read($453,120,1,$454);
 var $456=$3;
 var $457=_hio_read8($456);
 var $458=(($ri+124)|0);
 var $459=(($458)|0);
 HEAP8[($459)]=$457;
 $j=0;
 label=80;break;
 case 80: 
 var $461=$j;
 var $462=($461|0)<12;
 if($462){label=81;break;}else{label=83;break;}
 case 81: 
 var $464=$3;
 var $465=_hio_read32l($464);
 var $466=$j;
 var $467=(($ri+124)|0);
 var $468=(($467+4)|0);
 var $469=(($468+($466<<3))|0);
 var $470=(($469)|0);
 HEAP32[(($470)>>2)]=$465;
 var $471=$3;
 var $472=_hio_read32l($471);
 var $473=$j;
 var $474=(($ri+124)|0);
 var $475=(($474+4)|0);
 var $476=(($475+($473<<3))|0);
 var $477=(($476+4)|0);
 HEAP32[(($477)>>2)]=$472;
 label=82;break;
 case 82: 
 var $479=$j;
 var $480=((($479)+(1))|0);
 $j=$480;
 label=80;break;
 case 83: 
 var $482=$3;
 var $483=_hio_read8($482);
 var $484=(($ri+124)|0);
 var $485=(($484+100)|0);
 HEAP8[($485)]=$483;
 var $486=$3;
 var $487=_hio_read8($486);
 var $488=(($ri+124)|0);
 var $489=(($488+101)|0);
 HEAP8[($489)]=$487;
 var $490=$3;
 var $491=_hio_read8($490);
 var $492=(($ri+124)|0);
 var $493=(($492+102)|0);
 HEAP8[($493)]=$491;
 var $494=$3;
 var $495=_hio_read16l($494);
 var $496=(($ri+124)|0);
 var $497=(($496+104)|0);
 HEAP16[(($497)>>1)]=$495;
 var $498=$3;
 var $499=_hio_read8($498);
 var $500=(($ri+232)|0);
 var $501=(($500)|0);
 HEAP8[($501)]=$499;
 $j=0;
 label=84;break;
 case 84: 
 var $503=$j;
 var $504=($503|0)<12;
 if($504){label=85;break;}else{label=87;break;}
 case 85: 
 var $506=$3;
 var $507=_hio_read32l($506);
 var $508=$j;
 var $509=(($ri+232)|0);
 var $510=(($509+4)|0);
 var $511=(($510+($508<<3))|0);
 var $512=(($511)|0);
 HEAP32[(($512)>>2)]=$507;
 var $513=$3;
 var $514=_hio_read32l($513);
 var $515=$j;
 var $516=(($ri+232)|0);
 var $517=(($516+4)|0);
 var $518=(($517+($515<<3))|0);
 var $519=(($518+4)|0);
 HEAP32[(($519)>>2)]=$514;
 label=86;break;
 case 86: 
 var $521=$j;
 var $522=((($521)+(1))|0);
 $j=$522;
 label=84;break;
 case 87: 
 var $524=$3;
 var $525=_hio_read8($524);
 var $526=(($ri+232)|0);
 var $527=(($526+100)|0);
 HEAP8[($527)]=$525;
 var $528=$3;
 var $529=_hio_read8($528);
 var $530=(($ri+232)|0);
 var $531=(($530+101)|0);
 HEAP8[($531)]=$529;
 var $532=$3;
 var $533=_hio_read8($532);
 var $534=(($ri+232)|0);
 var $535=(($534+102)|0);
 HEAP8[($535)]=$533;
 var $536=$3;
 var $537=_hio_read16l($536);
 var $538=(($ri+232)|0);
 var $539=(($538+104)|0);
 HEAP16[(($539)>>1)]=$537;
 var $540=$3;
 var $541=_hio_read8($540);
 var $542=(($ri+340)|0);
 HEAP8[($542)]=$541;
 var $543=$3;
 var $544=_hio_read8($543);
 var $545=(($ri+341)|0);
 HEAP8[($545)]=$544;
 var $546=$3;
 var $547=_hio_read8($546);
 var $548=(($ri+342)|0);
 HEAP8[($548)]=$547;
 var $549=$3;
 var $550=_hio_read8($549);
 var $551=(($ri+343)|0);
 HEAP8[($551)]=$550;
 var $552=$3;
 var $553=_hio_read16l($552);
 var $554=(($ri+344)|0);
 HEAP16[(($554)>>1)]=$553;
 var $555=$version;
 var $556=($555|0)>=272;
 if($556){label=88;break;}else{label=89;break;}
 case 88: 
 var $558=$3;
 var $559=_hio_read8($558);
 var $560=(($ri+346)|0);
 HEAP8[($560)]=$559;
 var $561=$3;
 var $562=_hio_read8($561);
 var $563=(($ri+347)|0);
 HEAP8[($563)]=$562;
 var $564=$3;
 var $565=_hio_read8($564);
 var $566=(($ri+348)|0);
 HEAP8[($566)]=$565;
 var $567=$3;
 var $568=_hio_read8($567);
 var $569=(($ri+349)|0);
 HEAP8[($569)]=$568;
 label=89;break;
 case 89: 
 var $571=$version;
 var $572=($571|0)>=274;
 if($572){label=90;break;}else{label=91;break;}
 case 90: 
 var $574=$3;
 var $575=_hio_read8($574);
 var $576=(($ri+350)|0);
 HEAP8[($576)]=$575;
 var $577=$3;
 var $578=_hio_read8($577);
 var $579=(($ri+351)|0);
 HEAP8[($579)]=$578;
 var $580=$3;
 var $581=_hio_read8($580);
 var $582=(($ri+352)|0);
 HEAP8[($582)]=$581;
 var $583=$3;
 var $584=_hio_read8($583);
 var $585=(($ri+353)|0);
 HEAP8[($585)]=$584;
 label=91;break;
 case 91: 
 var $587=(($ri)|0);
 var $588=HEAP8[($587)];
 var $589=($588&255);
 var $590=$xxi;
 var $591=(($590+36)|0);
 HEAP32[(($591)>>2)]=$589;
 label=92;break;
 case 92: 
 label=93;break;
 case 93: 
 var $594=$xxi;
 var $595=(($594+36)|0);
 var $596=HEAP32[(($595)>>2)];
 var $597=($596|0)>16;
 if($597){label=94;break;}else{label=95;break;}
 case 94: 
 var $599=$xxi;
 var $600=(($599+36)|0);
 HEAP32[(($600)>>2)]=16;
 label=95;break;
 case 95: 
 var $602=$mod;
 var $603=$i;
 var $604=$xxi;
 var $605=(($604+36)|0);
 var $606=HEAP32[(($605)>>2)];
 var $607=_subinstrument_alloc($602,$603,$606);
 var $608=($607|0)<0;
 if($608){label=96;break;}else{label=97;break;}
 case 96: 
 $1=-1;
 label=132;break;
 case 97: 
 $j=0;
 label=98;break;
 case 98: 
 var $612=$j;
 var $613=($612|0)<120;
 if($613){label=99;break;}else{label=101;break;}
 case 99: 
 var $615=$j;
 var $616=(($ri+4)|0);
 var $617=(($616+$615)|0);
 var $618=HEAP8[($617)];
 var $619=$j;
 var $620=$xxi;
 var $621=(($620+512)|0);
 var $622=(($621+($619<<1))|0);
 var $623=(($622)|0);
 HEAP8[($623)]=$618;
 label=100;break;
 case 100: 
 var $625=$j;
 var $626=((($625)+(1))|0);
 $j=$626;
 label=98;break;
 case 101: 
 var $628=(($ri+344)|0);
 var $629=HEAP16[(($628)>>1)];
 var $630=($629&65535);
 var $631=$xxi;
 var $632=(($631+40)|0);
 HEAP32[(($632)>>2)]=$630;
 var $633=(($ri+124)|0);
 var $634=(($633)|0);
 var $635=HEAP8[($634)];
 var $636=($635&255);
 var $637=$xxi;
 var $638=(($637+44)|0);
 var $639=(($638+4)|0);
 HEAP32[(($639)>>2)]=$636;
 var $640=(($ri+124)|0);
 var $641=(($640+100)|0);
 var $642=HEAP8[($641)];
 var $643=($642&255);
 var $644=$xxi;
 var $645=(($644+44)|0);
 var $646=(($645+12)|0);
 HEAP32[(($646)>>2)]=$643;
 var $647=(($ri+124)|0);
 var $648=(($647+101)|0);
 var $649=HEAP8[($648)];
 var $650=($649&255);
 var $651=$xxi;
 var $652=(($651+44)|0);
 var $653=(($652+20)|0);
 HEAP32[(($653)>>2)]=$650;
 var $654=(($ri+124)|0);
 var $655=(($654+102)|0);
 var $656=HEAP8[($655)];
 var $657=($656&255);
 var $658=$xxi;
 var $659=(($658+44)|0);
 var $660=(($659+24)|0);
 HEAP32[(($660)>>2)]=$657;
 var $661=(($ri+124)|0);
 var $662=(($661+104)|0);
 var $663=HEAP16[(($662)>>1)];
 var $664=($663&65535);
 var $665=$xxi;
 var $666=(($665+44)|0);
 var $667=(($666)|0);
 HEAP32[(($667)>>2)]=$664;
 var $668=(($ri+232)|0);
 var $669=(($668)|0);
 var $670=HEAP8[($669)];
 var $671=($670&255);
 var $672=$xxi;
 var $673=(($672+200)|0);
 var $674=(($673+4)|0);
 HEAP32[(($674)>>2)]=$671;
 var $675=(($ri+232)|0);
 var $676=(($675+100)|0);
 var $677=HEAP8[($676)];
 var $678=($677&255);
 var $679=$xxi;
 var $680=(($679+200)|0);
 var $681=(($680+12)|0);
 HEAP32[(($681)>>2)]=$678;
 var $682=(($ri+232)|0);
 var $683=(($682+101)|0);
 var $684=HEAP8[($683)];
 var $685=($684&255);
 var $686=$xxi;
 var $687=(($686+200)|0);
 var $688=(($687+20)|0);
 HEAP32[(($688)>>2)]=$685;
 var $689=(($ri+232)|0);
 var $690=(($689+102)|0);
 var $691=HEAP8[($690)];
 var $692=($691&255);
 var $693=$xxi;
 var $694=(($693+200)|0);
 var $695=(($694+24)|0);
 HEAP32[(($695)>>2)]=$692;
 var $696=(($ri+232)|0);
 var $697=(($696+104)|0);
 var $698=HEAP16[(($697)>>1)];
 var $699=($698&65535);
 var $700=$xxi;
 var $701=(($700+200)|0);
 var $702=(($701)|0);
 HEAP32[(($702)>>2)]=$699;
 $j=0;
 label=102;break;
 case 102: 
 var $704=$j;
 var $705=$xxi;
 var $706=(($705+44)|0);
 var $707=(($706+4)|0);
 var $708=HEAP32[(($707)>>2)];
 var $709=($704|0)<($708|0);
 if($709){label=103;break;}else{label=105;break;}
 case 103: 
 var $711=$j;
 var $712=(($ri+124)|0);
 var $713=(($712+4)|0);
 var $714=(($713+($711<<3))|0);
 var $715=(($714)|0);
 var $716=HEAP32[(($715)>>2)];
 var $717=(($716)&65535);
 var $718=$j;
 var $719=($718<<1);
 var $720=(($719)|0);
 var $721=$xxi;
 var $722=(($721+44)|0);
 var $723=(($722+28)|0);
 var $724=(($723+($720<<1))|0);
 HEAP16[(($724)>>1)]=$717;
 var $725=$j;
 var $726=(($ri+124)|0);
 var $727=(($726+4)|0);
 var $728=(($727+($725<<3))|0);
 var $729=(($728+4)|0);
 var $730=HEAP32[(($729)>>2)];
 var $731=(((($730|0))/(2))&-1);
 var $732=(($731)&65535);
 var $733=$j;
 var $734=($733<<1);
 var $735=((($734)+(1))|0);
 var $736=$xxi;
 var $737=(($736+44)|0);
 var $738=(($737+28)|0);
 var $739=(($738+($735<<1))|0);
 HEAP16[(($739)>>1)]=$732;
 label=104;break;
 case 104: 
 var $741=$j;
 var $742=((($741)+(1))|0);
 $j=$742;
 label=102;break;
 case 105: 
 $j=0;
 label=106;break;
 case 106: 
 var $745=$j;
 var $746=$xxi;
 var $747=(($746+200)|0);
 var $748=(($747+4)|0);
 var $749=HEAP32[(($748)>>2)];
 var $750=($745|0)<($749|0);
 if($750){label=107;break;}else{label=109;break;}
 case 107: 
 var $752=$j;
 var $753=(($ri+232)|0);
 var $754=(($753+4)|0);
 var $755=(($754+($752<<3))|0);
 var $756=(($755)|0);
 var $757=HEAP32[(($756)>>2)];
 var $758=(($757)&65535);
 var $759=$j;
 var $760=($759<<1);
 var $761=(($760)|0);
 var $762=$xxi;
 var $763=(($762+200)|0);
 var $764=(($763+28)|0);
 var $765=(($764+($761<<1))|0);
 HEAP16[(($765)>>1)]=$758;
 var $766=$j;
 var $767=(($ri+232)|0);
 var $768=(($767+4)|0);
 var $769=(($768+($766<<3))|0);
 var $770=(($769+4)|0);
 var $771=HEAP32[(($770)>>2)];
 var $772=(((($771|0))/(2))&-1);
 var $773=((($772)+(32))|0);
 var $774=(($773)&65535);
 var $775=$j;
 var $776=($775<<1);
 var $777=((($776)+(1))|0);
 var $778=$xxi;
 var $779=(($778+200)|0);
 var $780=(($779+28)|0);
 var $781=(($780+($777<<1))|0);
 HEAP16[(($781)>>1)]=$774;
 label=108;break;
 case 108: 
 var $783=$j;
 var $784=((($783)+(1))|0);
 $j=$784;
 label=106;break;
 case 109: 
 $j=0;
 label=110;break;
 case 110: 
 var $787=$j;
 var $788=$xxi;
 var $789=(($788+36)|0);
 var $790=HEAP32[(($789)>>2)];
 var $791=($787|0)<($790|0);
 if($791){label=111;break;}else{label=127;break;}
 case 111: 
 var $793=$j;
 var $794=$xxi;
 var $795=(($794+756)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=(($796+($793<<6))|0);
 $sub=$797;
 var $798=$3;
 var $799=_read_object_header($798,$oh,22040);
 var $800=($799|0)<0;
 if($800){label=112;break;}else{label=115;break;}
 case 112: 
 label=113;break;
 case 113: 
 label=114;break;
 case 114: 
 $1=-1;
 label=132;break;
 case 115: 
 var $805=$3;
 var $806=_hio_read16l($805);
 var $807=(($rs)|0);
 HEAP16[(($807)>>1)]=$806;
 var $808=$3;
 var $809=_hio_read8($808);
 var $810=(($rs+2)|0);
 HEAP8[($810)]=$809;
 var $811=$3;
 var $812=_hio_read8($811);
 var $813=(($rs+3)|0);
 HEAP8[($813)]=$812;
 var $814=$3;
 var $815=_hio_read32l($814);
 var $816=(($rs+4)|0);
 HEAP32[(($816)>>2)]=$815;
 var $817=$3;
 var $818=_hio_read32l($817);
 var $819=(($818)&255);
 var $820=(($rs+8)|0);
 HEAP8[($820)]=$819;
 var $821=$3;
 var $822=_hio_read32l($821);
 var $823=(($rs+12)|0);
 HEAP32[(($823)>>2)]=$822;
 var $824=$3;
 var $825=_hio_read32l($824);
 var $826=(($rs+16)|0);
 HEAP32[(($826)>>2)]=$825;
 var $827=$3;
 var $828=_hio_read32l($827);
 var $829=(($rs+20)|0);
 HEAP32[(($829)>>2)]=$828;
 var $830=$3;
 var $831=_hio_read8($830);
 var $832=(($rs+24)|0);
 HEAP8[($832)]=$831;
 var $833=$3;
 var $834=_hio_read8($833);
 var $835=(($rs+25)|0);
 HEAP8[($835)]=$834;
 var $836=(($rs+20)|0);
 var $837=HEAP32[(($836)>>2)];
 var $838=$sub;
 var $839=(($838+12)|0);
 var $840=$sub;
 var $841=(($840+16)|0);
 _c2spd_to_note($837,$839,$841);
 var $842=(($rs+24)|0);
 var $843=HEAP8[($842)];
 var $844=($843&255);
 var $845=(((48)-($844))|0);
 var $846=$sub;
 var $847=(($846+12)|0);
 var $848=HEAP32[(($847)>>2)];
 var $849=((($848)+($845))|0);
 HEAP32[(($847)>>2)]=$849;
 var $850=(($rs+3)|0);
 var $851=HEAP8[($850)];
 var $852=($851&255);
 var $853=(($rs+2)|0);
 var $854=HEAP8[($853)];
 var $855=($854&255);
 var $856=(Math_imul($852,$855)|0);
 var $857=(((($856|0))/(64))&-1);
 var $858=$sub;
 var $859=(($858)|0);
 HEAP32[(($859)>>2)]=$857;
 var $860=(($rs+25)|0);
 var $861=HEAP8[($860)];
 var $862=(($861<<24)>>24);
 var $863=($862<<1);
 var $864=((($863)+(128))|0);
 var $865=$sub;
 var $866=(($865+8)|0);
 HEAP32[(($866)>>2)]=$864;
 var $867=(($ri+340)|0);
 var $868=HEAP8[($867)];
 var $869=(($868<<24)>>24);
 var $870=$sub;
 var $871=(($870+20)|0);
 HEAP32[(($871)>>2)]=$869;
 var $872=(($ri+342)|0);
 var $873=HEAP8[($872)];
 var $874=(($873<<24)>>24);
 var $875=$sub;
 var $876=(($875+24)|0);
 HEAP32[(($876)>>2)]=$874;
 var $877=(($ri+343)|0);
 var $878=HEAP8[($877)];
 var $879=(($878<<24)>>24);
 var $880=$sub;
 var $881=(($880+28)|0);
 HEAP32[(($881)>>2)]=$879;
 var $882=(($ri+341)|0);
 var $883=HEAP8[($882)];
 var $884=(($883<<24)>>24);
 var $885=$sub;
 var $886=(($885+32)|0);
 HEAP32[(($886)>>2)]=$884;
 var $887=$smpnum;
 var $888=$sub;
 var $889=(($888+40)|0);
 HEAP32[(($889)>>2)]=$887;
 var $890=$smpnum;
 var $891=$mod;
 var $892=(($891+144)|0);
 var $893=HEAP32[(($892)>>2)];
 var $894=($890|0)>=($893|0);
 if($894){label=116;break;}else{label=119;break;}
 case 116: 
 var $896=$mod;
 var $897=(($896+180)|0);
 var $898=HEAP32[(($897)>>2)];
 var $899=$mod;
 var $900=(($899+144)|0);
 var $901=$mod;
 var $902=(($901+144)|0);
 var $903=HEAP32[(($902)>>2)];
 var $904=((($903)*(3))&-1);
 var $905=(((($904|0))/(2))&-1);
 var $906=_realloc_samples($898,$900,$905);
 var $907=$mod;
 var $908=(($907+180)|0);
 HEAP32[(($908)>>2)]=$906;
 var $909=$mod;
 var $910=(($909+180)|0);
 var $911=HEAP32[(($910)>>2)];
 var $912=($911|0)==0;
 if($912){label=117;break;}else{label=118;break;}
 case 117: 
 $1=-1;
 label=132;break;
 case 118: 
 label=119;break;
 case 119: 
 var $916=$smpnum;
 var $917=$mod;
 var $918=(($917+180)|0);
 var $919=HEAP32[(($918)>>2)];
 var $920=(($919+((($916)*(52))&-1))|0);
 $xxs=$920;
 var $921=$xxs;
 var $922=(($921)|0);
 var $923=(($922)|0);
 var $924=(($oh+5)|0);
 var $925=(($924)|0);
 var $926=_copy_adjust($923,$925,32);
 var $927=(($rs+4)|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=$xxs;
 var $930=(($929+32)|0);
 HEAP32[(($930)>>2)]=$928;
 var $931=(($rs+12)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=$xxs;
 var $934=(($933+36)|0);
 HEAP32[(($934)>>2)]=$932;
 var $935=(($rs+16)|0);
 var $936=HEAP32[(($935)>>2)];
 var $937=$xxs;
 var $938=(($937+40)|0);
 HEAP32[(($938)>>2)]=$936;
 var $939=$xxs;
 var $940=(($939+44)|0);
 HEAP32[(($940)>>2)]=0;
 var $941=(($rs)|0);
 var $942=HEAP16[(($941)>>1)];
 var $943=($942&65535);
 var $944=$943&2;
 var $945=($944|0)!=0;
 if($945){label=120;break;}else{label=121;break;}
 case 120: 
 var $947=$xxs;
 var $948=(($947+44)|0);
 var $949=HEAP32[(($948)>>2)];
 var $950=$949|1;
 HEAP32[(($948)>>2)]=$950;
 var $951=$xxs;
 var $952=(($951+32)|0);
 var $953=HEAP32[(($952)>>2)];
 var $954=$953>>1;
 HEAP32[(($952)>>2)]=$954;
 var $955=$xxs;
 var $956=(($955+36)|0);
 var $957=HEAP32[(($956)>>2)];
 var $958=$957>>1;
 HEAP32[(($956)>>2)]=$958;
 var $959=$xxs;
 var $960=(($959+40)|0);
 var $961=HEAP32[(($960)>>2)];
 var $962=$961>>1;
 HEAP32[(($960)>>2)]=$962;
 label=121;break;
 case 121: 
 var $964=(($rs+8)|0);
 var $965=HEAP8[($964)];
 var $966=($965&255);
 var $967=$966&3;
 var $968=($967|0)!=0;
 var $969=($968?2:0);
 var $970=$xxs;
 var $971=(($970+44)|0);
 var $972=HEAP32[(($971)>>2)];
 var $973=$972|$969;
 HEAP32[(($971)>>2)]=$973;
 var $974=(($rs+8)|0);
 var $975=HEAP8[($974)];
 var $976=($975&255);
 var $977=($976|0)==2;
 var $978=($977?4:0);
 var $979=$xxs;
 var $980=(($979+44)|0);
 var $981=HEAP32[(($980)>>2)];
 var $982=$981|$978;
 HEAP32[(($980)>>2)]=$982;
 label=122;break;
 case 122: 
 label=123;break;
 case 123: 
 var $985=$2;
 var $986=$3;
 var $987=$xxs;
 var $988=_load_sample($985,$986,1,$987,0);
 var $989=($988|0)<0;
 if($989){label=124;break;}else{label=125;break;}
 case 124: 
 $1=-1;
 label=132;break;
 case 125: 
 label=126;break;
 case 126: 
 var $993=$j;
 var $994=((($993)+(1))|0);
 $j=$994;
 var $995=$smpnum;
 var $996=((($995)+(1))|0);
 $smpnum=$996;
 label=110;break;
 case 127: 
 label=128;break;
 case 128: 
 var $999=$i;
 var $1000=((($999)+(1))|0);
 $i=$1000;
 label=70;break;
 case 129: 
 var $1002=$mod;
 var $1003=(($1002+180)|0);
 var $1004=HEAP32[(($1003)>>2)];
 var $1005=$mod;
 var $1006=(($1005+144)|0);
 var $1007=$smpnum;
 var $1008=_realloc_samples($1004,$1006,$1007);
 var $1009=$mod;
 var $1010=(($1009+180)|0);
 HEAP32[(($1010)>>2)]=$1008;
 var $1011=$mod;
 var $1012=(($1011+180)|0);
 var $1013=HEAP32[(($1012)>>2)];
 var $1014=($1013|0)==0;
 if($1014){label=130;break;}else{label=131;break;}
 case 130: 
 $1=-1;
 label=132;break;
 case 131: 
 var $1017=$2;
 var $1018=(($1017+1280)|0);
 var $1019=HEAP32[(($1018)>>2)];
 var $1020=$1019|32;
 HEAP32[(($1018)>>2)]=$1020;
 var $1021=$2;
 var $1022=(($1021+1284)|0);
 HEAP32[(($1022)>>2)]=1;
 $1=0;
 label=132;break;
 case 132: 
 var $1024=$1;
 STACKTOP=sp;return $1024;
  default: assert(0, "bad label: " + label);
 }
}
function _read_object_header($f,$h,$id){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$h;
 $4=$id;
 var $5=$3;
 var $6=(($5)|0);
 var $7=$6;
 var $8=$2;
 var $9=_hio_read($7,4,1,$8);
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $12=$4;
 var $13=$3;
 var $14=(($13)|0);
 var $15=(($14)|0);
 var $16=_memcmp($12,$15,4);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=10;break;
 case 5: 
 var $20=$2;
 var $21=_hio_read8($20);
 var $22=$3;
 var $23=(($22+4)|0);
 HEAP8[($23)]=$21;
 var $24=$3;
 var $25=(($24+4)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24);
 var $28=($27|0)!=32;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=10;break;
 case 7: 
 var $31=$3;
 var $32=(($31+5)|0);
 var $33=$32;
 var $34=$2;
 var $35=_hio_read($33,32,1,$34);
 var $36=$2;
 var $37=_hio_read8($36);
 var $38=$3;
 var $39=(($38+37)|0);
 HEAP8[($39)]=$37;
 var $40=$2;
 var $41=_hio_read16l($40);
 var $42=$3;
 var $43=(($42+38)|0);
 HEAP16[(($43)>>1)]=$41;
 var $44=$2;
 var $45=_hio_read16l($44);
 var $46=$3;
 var $47=(($46+40)|0);
 HEAP16[(($47)>>1)]=$45;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $51=$1;
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }
}
function _s3m_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(44))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=$2;
 var $10=_hio_read32b($9);
 var $11=($10|0)!=1396920909;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $14=$2;
 var $15=$4;
 var $16=(($15)|0);
 var $17=_hio_seek($14,$16,0);
 var $18=$2;
 var $19=$3;
 _read_title($18,$19,28);
 $1=0;
 label=4;break;
 case 4: 
 var $21=$1;
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _s3m_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+336)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $c;
 var $r;
 var $i;
 var $sah=sp;
 var $event;
 var $dummy=(sp)+(80);
 var $sfh=(sp)+(88);
 var $sih=(sp)+(184);
 var $pat_len;
 var $n;
 var $b;
 var $x8;
 var $tracker_name=(sp)+(264);
 var $quirk87;
 var $pp_ins;
 var $pp_pat;
 var $arpeggio_val=(sp)+(304);
 var $ret;
 var $i1;
 var $i2;
 var $i3;
 var $x;
 var $x4;
 var $i5;
 var $i6;
 var $i7;
 var $i8;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $event=0;
 $quirk87=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($sfh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,28,1,$14);
 var $16=$3;
 var $17=_hio_read8($16);
 var $18=$3;
 var $19=_hio_read8($18);
 var $20=(($sfh+29)|0);
 HEAP8[($20)]=$19;
 var $21=$3;
 var $22=_hio_read16l($21);
 var $23=$3;
 var $24=_hio_read16l($23);
 var $25=(($sfh+32)|0);
 HEAP16[(($25)>>1)]=$24;
 var $26=$3;
 var $27=_hio_read16l($26);
 var $28=(($sfh+34)|0);
 HEAP16[(($28)>>1)]=$27;
 var $29=$3;
 var $30=_hio_read16l($29);
 var $31=(($sfh+36)|0);
 HEAP16[(($31)>>1)]=$30;
 var $32=$3;
 var $33=_hio_read16l($32);
 var $34=(($sfh+38)|0);
 HEAP16[(($34)>>1)]=$33;
 var $35=$3;
 var $36=_hio_read16l($35);
 var $37=(($sfh+40)|0);
 HEAP16[(($37)>>1)]=$36;
 var $38=$3;
 var $39=_hio_read16l($38);
 var $40=(($sfh+42)|0);
 HEAP16[(($40)>>1)]=$39;
 var $41=$3;
 var $42=_hio_read32b($41);
 var $43=(($sfh+44)|0);
 HEAP32[(($43)>>2)]=$42;
 var $44=$3;
 var $45=_hio_read8($44);
 var $46=(($sfh+48)|0);
 HEAP8[($46)]=$45;
 var $47=$3;
 var $48=_hio_read8($47);
 var $49=(($sfh+49)|0);
 HEAP8[($49)]=$48;
 var $50=$3;
 var $51=_hio_read8($50);
 var $52=(($sfh+50)|0);
 HEAP8[($52)]=$51;
 var $53=$3;
 var $54=_hio_read8($53);
 var $55=(($sfh+51)|0);
 HEAP8[($55)]=$54;
 var $56=$3;
 var $57=_hio_read8($56);
 var $58=(($sfh+52)|0);
 HEAP8[($58)]=$57;
 var $59=$3;
 var $60=_hio_read8($59);
 var $61=(($sfh+53)|0);
 HEAP8[($61)]=$60;
 var $62=$3;
 var $63=_hio_read32l($62);
 var $64=$3;
 var $65=_hio_read32l($64);
 var $66=$3;
 var $67=_hio_read16l($66);
 var $68=(($sfh+62)|0);
 HEAP16[(($68)>>1)]=$67;
 var $69=(($sfh+64)|0);
 var $70=(($69)|0);
 var $71=$3;
 var $72=_hio_read($70,32,1,$71);
 var $73=(($sfh+40)|0);
 var $74=HEAP16[(($73)>>1)];
 var $75=($74&65535);
 var $76=($75|0)==4865;
 if($76){label=4;break;}else{label=6;break;}
 case 4: 
 var $78=(($sfh)|0);
 var $79=(($78+27)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=($81|0)==135;
 if($82){label=5;break;}else{label=6;break;}
 case 5: 
 $quirk87=1;
 label=6;break;
 case 6: 
 var $85=$quirk87;
 var $86=($85|0)!=0;
 if($86){label=7;break;}else{label=32;break;}
 case 7: 
 label=8;break;
 case 8: 
 $i1=0;
 label=9;break;
 case 9: 
 var $90=$i1;
 var $91=($90>>>0)<28;
 if($91){label=10;break;}else{label=14;break;}
 case 10: 
 var $93=(($sfh)|0);
 var $94=$93;
 var $95=$i1;
 var $96=(($94+$95)|0);
 var $97=HEAP8[($96)];
 var $98=($97&255);
 var $99=($98|0)==135;
 if($99){label=11;break;}else{label=12;break;}
 case 11: 
 var $101=(($sfh)|0);
 var $102=$101;
 var $103=$i1;
 var $104=(($102+$103)|0);
 HEAP8[($104)]=0;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $107=$i1;
 var $108=((($107)+(1))|0);
 $i1=$108;
 label=9;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 $i2=0;
 label=17;break;
 case 17: 
 var $113=$i2;
 var $114=($113>>>0)<2;
 if($114){label=18;break;}else{label=22;break;}
 case 18: 
 var $116=(($sfh+36)|0);
 var $117=$116;
 var $118=$i2;
 var $119=(($117+$118)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=($121|0)==135;
 if($122){label=19;break;}else{label=20;break;}
 case 19: 
 var $124=(($sfh+36)|0);
 var $125=$124;
 var $126=$i2;
 var $127=(($125+$126)|0);
 HEAP8[($127)]=0;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $130=$i2;
 var $131=((($130)+(1))|0);
 $i2=$131;
 label=17;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 $i3=0;
 label=25;break;
 case 25: 
 var $136=$i3;
 var $137=($136>>>0)<2;
 if($137){label=26;break;}else{label=30;break;}
 case 26: 
 var $139=(($sfh+38)|0);
 var $140=$139;
 var $141=$i3;
 var $142=(($140+$141)|0);
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=($144|0)==135;
 if($145){label=27;break;}else{label=28;break;}
 case 27: 
 var $147=(($sfh+38)|0);
 var $148=$147;
 var $149=$i3;
 var $150=(($148+$149)|0);
 HEAP8[($150)]=0;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $153=$i3;
 var $154=((($153)+(1))|0);
 $i3=$154;
 label=25;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $158=$mod;
 var $159=(($158)|0);
 var $160=(($159)|0);
 var $161=(($sfh)|0);
 var $162=(($161)|0);
 var $163=_copy_adjust($160,$162,28);
 var $164=(($sfh+34)|0);
 var $165=HEAP16[(($164)>>1)];
 var $166=($165&65535);
 var $167=_calloc(2,$166);
 var $168=$167;
 $pp_ins=$168;
 var $169=$pp_ins;
 var $170=($169|0)==0;
 if($170){label=33;break;}else{label=34;break;}
 case 33: 
 label=210;break;
 case 34: 
 var $173=(($sfh+36)|0);
 var $174=HEAP16[(($173)>>1)];
 var $175=($174&65535);
 var $176=_calloc(2,$175);
 var $177=$176;
 $pp_pat=$177;
 var $178=$pp_pat;
 var $179=($178|0)==0;
 if($179){label=35;break;}else{label=36;break;}
 case 35: 
 label=209;break;
 case 36: 
 var $182=(($sfh+38)|0);
 var $183=HEAP16[(($182)>>1)];
 var $184=($183&65535);
 var $185=$184&16;
 var $186=($185|0)!=0;
 if($186){label=37;break;}else{label=38;break;}
 case 37: 
 var $188=$2;
 var $189=(($188+1280)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$190|8192;
 HEAP32[(($189)>>2)]=$191;
 label=38;break;
 case 38: 
 var $193=(($sfh+38)|0);
 var $194=HEAP16[(($193)>>1)];
 var $195=($194&65535);
 var $196=$195&64;
 var $197=($196|0)!=0;
 if($197){label=39;break;}else{label=40;break;}
 case 39: 
 var $199=$2;
 var $200=(($199+1280)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$201|64;
 HEAP32[(($200)>>2)]=$202;
 label=40;break;
 case 40: 
 var $204=(($sfh+49)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$mod;
 var $208=(($207+148)|0);
 HEAP32[(($208)>>2)]=$206;
 var $209=(($sfh+50)|0);
 var $210=HEAP8[($209)];
 var $211=($210&255);
 var $212=$mod;
 var $213=(($212+152)|0);
 HEAP32[(($213)>>2)]=$211;
 $i=0;
 label=41;break;
 case 41: 
 var $215=$i;
 var $216=($215|0)<32;
 if($216){label=42;break;}else{label=49;break;}
 case 42: 
 var $218=$i;
 var $219=(($sfh+64)|0);
 var $220=(($219+$218)|0);
 var $221=HEAP8[($220)];
 var $222=($221&255);
 var $223=($222|0)==255;
 if($223){label=43;break;}else{label=44;break;}
 case 43: 
 label=48;break;
 case 44: 
 var $226=$i;
 var $227=((($226)+(1))|0);
 var $228=$mod;
 var $229=(($228+136)|0);
 HEAP32[(($229)>>2)]=$227;
 var $230=(($sfh+51)|0);
 var $231=HEAP8[($230)];
 var $232=($231&255);
 var $233=$232&128;
 var $234=($233|0)!=0;
 if($234){label=45;break;}else{label=46;break;}
 case 45: 
 var $236=$i;
 var $237=(($sfh+64)|0);
 var $238=(($237+$236)|0);
 var $239=HEAP8[($238)];
 var $240=($239&255);
 var $241=$240&127;
 $x=$241;
 var $242=$x;
 var $243=$242&15;
 var $244=($243|0)<8;
 var $245=($244?0:255);
 var $246=$i;
 var $247=$mod;
 var $248=(($247+184)|0);
 var $249=(($248+((($246)*(12))&-1))|0);
 var $250=(($249)|0);
 HEAP32[(($250)>>2)]=$245;
 label=47;break;
 case 46: 
 var $252=$i;
 var $253=$mod;
 var $254=(($253+184)|0);
 var $255=(($254+((($252)*(12))&-1))|0);
 var $256=(($255)|0);
 HEAP32[(($256)>>2)]=128;
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $259=$i;
 var $260=((($259)+(1))|0);
 $i=$260;
 label=41;break;
 case 49: 
 var $262=(($sfh+32)|0);
 var $263=HEAP16[(($262)>>1)];
 var $264=($263&65535);
 var $265=($264|0)<=256;
 if($265){label=50;break;}else{label=51;break;}
 case 50: 
 var $267=(($sfh+32)|0);
 var $268=HEAP16[(($267)>>1)];
 var $269=($268&65535);
 var $270=$mod;
 var $271=(($270+156)|0);
 HEAP32[(($271)>>2)]=$269;
 var $272=$mod;
 var $273=(($272+952)|0);
 var $274=(($273)|0);
 var $275=$mod;
 var $276=(($275+156)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=$3;
 var $279=_hio_read($274,1,$277,$278);
 label=52;break;
 case 51: 
 var $281=$mod;
 var $282=(($281+156)|0);
 HEAP32[(($282)>>2)]=256;
 var $283=$mod;
 var $284=(($283+952)|0);
 var $285=(($284)|0);
 var $286=$mod;
 var $287=(($286+156)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$3;
 var $290=_hio_read($285,1,$288,$289);
 var $291=$3;
 var $292=(($sfh+32)|0);
 var $293=HEAP16[(($292)>>1)];
 var $294=($293&65535);
 var $295=((($294)-(256))|0);
 var $296=_hio_seek($291,$295,1);
 label=52;break;
 case 52: 
 var $298=$mod;
 var $299=(($298+128)|0);
 HEAP32[(($299)>>2)]=-1;
 $i=0;
 label=53;break;
 case 53: 
 var $301=$i;
 var $302=$mod;
 var $303=(($302+156)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=($301|0)<($304|0);
 if($305){label=54;break;}else{var $315=0;label=55;break;}
 case 54: 
 var $307=$i;
 var $308=$mod;
 var $309=(($308+952)|0);
 var $310=(($309+$307)|0);
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=($312|0)<255;
 var $315=$313;label=55;break;
 case 55: 
 var $315;
 if($315){label=56;break;}else{label=60;break;}
 case 56: 
 var $317=$i;
 var $318=$mod;
 var $319=(($318+952)|0);
 var $320=(($319+$317)|0);
 var $321=HEAP8[($320)];
 var $322=($321&255);
 var $323=$mod;
 var $324=(($323+128)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=($322|0)>($325|0);
 if($326){label=57;break;}else{label=58;break;}
 case 57: 
 var $328=$i;
 var $329=$mod;
 var $330=(($329+952)|0);
 var $331=(($330+$328)|0);
 var $332=HEAP8[($331)];
 var $333=($332&255);
 var $334=$mod;
 var $335=(($334+128)|0);
 HEAP32[(($335)>>2)]=$333;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 var $338=$i;
 var $339=((($338)+(1))|0);
 $i=$339;
 label=53;break;
 case 60: 
 var $341=$mod;
 var $342=(($341+128)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=((($343)+(1))|0);
 HEAP32[(($342)>>2)]=$344;
 var $345=$mod;
 var $346=(($345+128)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=(($sfh+36)|0);
 var $349=HEAP16[(($348)>>1)];
 var $350=($349&65535);
 var $351=($347|0)>($350|0);
 if($351){label=61;break;}else{label=62;break;}
 case 61: 
 var $353=(($sfh+36)|0);
 var $354=HEAP16[(($353)>>1)];
 var $355=($354&65535);
 var $356=$mod;
 var $357=(($356+128)|0);
 HEAP32[(($357)>>2)]=$355;
 label=62;break;
 case 62: 
 var $359=$mod;
 var $360=(($359+128)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=$mod;
 var $363=(($362+136)|0);
 var $364=HEAP32[(($363)>>2)];
 var $365=(Math_imul($361,$364)|0);
 var $366=$mod;
 var $367=(($366+132)|0);
 HEAP32[(($367)>>2)]=$365;
 var $368=(($sfh+34)|0);
 var $369=HEAP16[(($368)>>1)];
 var $370=($369&65535);
 var $371=$mod;
 var $372=(($371+140)|0);
 HEAP32[(($372)>>2)]=$370;
 var $373=$mod;
 var $374=(($373+140)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=$mod;
 var $377=(($376+144)|0);
 HEAP32[(($377)>>2)]=$375;
 $i=0;
 label=63;break;
 case 63: 
 var $379=$i;
 var $380=(($sfh+34)|0);
 var $381=HEAP16[(($380)>>1)];
 var $382=($381&65535);
 var $383=($379|0)<($382|0);
 if($383){label=64;break;}else{label=66;break;}
 case 64: 
 var $385=$3;
 var $386=_hio_read16l($385);
 var $387=$i;
 var $388=$pp_ins;
 var $389=(($388+($387<<1))|0);
 HEAP16[(($389)>>1)]=$386;
 label=65;break;
 case 65: 
 var $391=$i;
 var $392=((($391)+(1))|0);
 $i=$392;
 label=63;break;
 case 66: 
 $i=0;
 label=67;break;
 case 67: 
 var $395=$i;
 var $396=(($sfh+36)|0);
 var $397=HEAP16[(($396)>>1)];
 var $398=($397&65535);
 var $399=($395|0)<($398|0);
 if($399){label=68;break;}else{label=70;break;}
 case 68: 
 var $401=$3;
 var $402=_hio_read16l($401);
 var $403=$i;
 var $404=$pp_pat;
 var $405=(($404+($403<<1))|0);
 HEAP16[(($405)>>1)]=$402;
 label=69;break;
 case 69: 
 var $407=$i;
 var $408=((($407)+(1))|0);
 $i=$408;
 label=67;break;
 case 70: 
 $i=0;
 var $410=(($sfh+53)|0);
 var $411=HEAP8[($410)];
 var $412=($411&255);
 var $413=((($412)-(252))|0);
 var $414=(($413)&255);
 HEAP8[($410)]=$414;
 label=71;break;
 case 71: 
 var $416=(($sfh+53)|0);
 var $417=HEAP8[($416)];
 var $418=(($417<<24)>>24)!=0;
 if($418){var $423=0;label=73;break;}else{label=72;break;}
 case 72: 
 var $420=$i;
 var $421=($420|0)<32;
 var $423=$421;label=73;break;
 case 73: 
 var $423;
 if($423){label=74;break;}else{label=82;break;}
 case 74: 
 var $425=$3;
 var $426=_hio_read8($425);
 $x4=$426;
 var $427=$x4;
 var $428=($427&255);
 var $429=$428&32;
 var $430=($429|0)!=0;
 if($430){label=75;break;}else{label=76;break;}
 case 75: 
 var $432=$x4;
 var $433=($432&255);
 var $434=$433<<4;
 var $435=$434&255;
 var $436=$i;
 var $437=$mod;
 var $438=(($437+184)|0);
 var $439=(($438+((($436)*(12))&-1))|0);
 var $440=(($439)|0);
 HEAP32[(($440)>>2)]=$435;
 label=80;break;
 case 76: 
 var $442=(($sfh+51)|0);
 var $443=HEAP8[($442)];
 var $444=($443&255);
 var $445=(((($444|0))%(128))&-1);
 var $446=($445|0)!=0;
 if($446){label=77;break;}else{label=78;break;}
 case 77: 
 var $448=$i;
 var $449=$448&1;
 var $450=((($449)*(160))&-1);
 var $451=((($450)+(48))|0);
 var $454=$451;label=79;break;
 case 78: 
 var $454=128;label=79;break;
 case 79: 
 var $454;
 var $455=$i;
 var $456=$mod;
 var $457=(($456+184)|0);
 var $458=(($457+((($455)*(12))&-1))|0);
 var $459=(($458)|0);
 HEAP32[(($459)>>2)]=$454;
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 var $462=$i;
 var $463=((($462)+(1))|0);
 $i=$463;
 label=71;break;
 case 82: 
 var $465=$2;
 var $466=(($465+1264)|0);
 HEAP32[(($466)>>2)]=8363;
 var $467=(($sfh+40)|0);
 var $468=HEAP16[(($467)>>1)];
 var $469=($468&65535);
 var $470=($469|0)==4864;
 if($470){label=83;break;}else{label=84;break;}
 case 83: 
 var $472=$2;
 var $473=(($472+1280)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=$474|64;
 HEAP32[(($473)>>2)]=$475;
 label=84;break;
 case 84: 
 var $477=(($sfh+40)|0);
 var $478=HEAP16[(($477)>>1)];
 var $479=($478&65535);
 var $480=$479>>12;
 switch(($480|0)){case 1:{ label=85;break;}case 2:{ label=86;break;}case 3:{ label=87;break;}case 5:{ label=94;break;}case 4:{ label=95;break;}case 6:{ label=98;break;}default:{label=99;break;}}break;
 case 85: 
 var $482=(($tracker_name)|0);
 var $483=(($sfh+40)|0);
 var $484=HEAP16[(($483)>>1)];
 var $485=($484&65535);
 var $486=$485&3840;
 var $487=$486>>8;
 var $488=(($sfh+40)|0);
 var $489=HEAP16[(($488)>>1)];
 var $490=($489&65535);
 var $491=$490&255;
 var $492=_snprintf($482,40,26000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$487,HEAP32[(((tempVarArgs)+(8))>>2)]=$491,tempVarArgs)); STACKTOP=tempVarArgs;
 var $493=$2;
 var $494=(($493+1280)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=$495|16;
 HEAP32[(($494)>>2)]=$496;
 label=100;break;
 case 86: 
 var $498=(($tracker_name)|0);
 var $499=(($sfh+40)|0);
 var $500=HEAP16[(($499)>>1)];
 var $501=($500&65535);
 var $502=$501&3840;
 var $503=$502>>8;
 var $504=(($sfh+40)|0);
 var $505=HEAP16[(($504)>>1)];
 var $506=($505&65535);
 var $507=$506&255;
 var $508=_snprintf($498,40,24424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$503,HEAP32[(((tempVarArgs)+(8))>>2)]=$507,tempVarArgs)); STACKTOP=tempVarArgs;
 label=100;break;
 case 87: 
 var $510=(($sfh+40)|0);
 var $511=HEAP16[(($510)>>1)];
 var $512=($511&65535);
 var $513=($512|0)==12822;
 if($513){label=88;break;}else{label=89;break;}
 case 88: 
 var $515=(($tracker_name)|0);
 var $516=_strcpy($515,23480);
 label=93;break;
 case 89: 
 var $518=(($sfh+40)|0);
 var $519=HEAP16[(($518)>>1)];
 var $520=($519&65535);
 var $521=($520|0)==12823;
 if($521){label=90;break;}else{label=91;break;}
 case 90: 
 var $523=(($tracker_name)|0);
 var $524=_strcpy($523,22800);
 label=92;break;
 case 91: 
 var $526=(($tracker_name)|0);
 var $527=(($sfh+40)|0);
 var $528=HEAP16[(($527)>>1)];
 var $529=($528&65535);
 var $530=$529&3840;
 var $531=$530>>8;
 var $532=(($sfh+40)|0);
 var $533=HEAP16[(($532)>>1)];
 var $534=($533&65535);
 var $535=$534&255;
 var $536=_snprintf($526,40,22016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$531,HEAP32[(((tempVarArgs)+(8))>>2)]=$535,tempVarArgs)); STACKTOP=tempVarArgs;
 label=92;break;
 case 92: 
 label=93;break;
 case 93: 
 label=100;break;
 case 94: 
 var $540=(($tracker_name)|0);
 var $541=(($sfh+40)|0);
 var $542=HEAP16[(($541)>>1)];
 var $543=($542&65535);
 var $544=$543&3840;
 var $545=$544>>8;
 var $546=(($sfh+40)|0);
 var $547=HEAP16[(($546)>>1)];
 var $548=($547&65535);
 var $549=$548&255;
 var $550=_snprintf($540,40,21400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$545,HEAP32[(((tempVarArgs)+(8))>>2)]=$549,tempVarArgs)); STACKTOP=tempVarArgs;
 label=100;break;
 case 95: 
 var $552=(($sfh+40)|0);
 var $553=HEAP16[(($552)>>1)];
 var $554=($553&65535);
 var $555=($554|0)!=16640;
 if($555){label=96;break;}else{label=97;break;}
 case 96: 
 var $557=(($tracker_name)|0);
 var $558=(($sfh+40)|0);
 var $559=HEAP16[(($558)>>1)];
 var $560=($559&65535);
 var $561=$560&3840;
 var $562=$561>>8;
 var $563=(($sfh+40)|0);
 var $564=HEAP16[(($563)>>1)];
 var $565=($564&65535);
 var $566=$565&255;
 var $567=_snprintf($557,40,21088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$562,HEAP32[(((tempVarArgs)+(8))>>2)]=$566,tempVarArgs)); STACKTOP=tempVarArgs;
 label=100;break;
 case 97: 
 label=98;break;
 case 98: 
 var $570=(($tracker_name)|0);
 var $571=(($sfh+40)|0);
 var $572=HEAP16[(($571)>>1)];
 var $573=($572&65535);
 var $574=$573&3840;
 var $575=$574>>8;
 var $576=(($sfh+40)|0);
 var $577=HEAP16[(($576)>>1)];
 var $578=($577&65535);
 var $579=$578&255;
 var $580=_snprintf($570,40,20656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$575,HEAP32[(((tempVarArgs)+(8))>>2)]=$579,tempVarArgs)); STACKTOP=tempVarArgs;
 label=100;break;
 case 99: 
 var $582=(($tracker_name)|0);
 var $583=(($sfh+40)|0);
 var $584=HEAP16[(($583)>>1)];
 var $585=($584&65535);
 var $586=_snprintf($582,40,20280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$585,tempVarArgs)); STACKTOP=tempVarArgs;
 label=100;break;
 case 100: 
 var $588=$mod;
 var $589=(($588+64)|0);
 var $590=(($589)|0);
 var $591=(($tracker_name)|0);
 var $592=_snprintf($590,64,27424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$591,tempVarArgs)); STACKTOP=tempVarArgs;
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 label=104;break;
 case 104: 
 label=105;break;
 case 105: 
 label=106;break;
 case 106: 
 var $599=$mod;
 var $600=_pattern_init($599);
 var $601=($600|0)<0;
 if($601){label=107;break;}else{label=108;break;}
 case 107: 
 label=208;break;
 case 108: 
 label=109;break;
 case 109: 
 label=110;break;
 case 110: 
 var $606=$arpeggio_val;
 _memset($606, 0, 32)|0;
 $i=0;
 label=111;break;
 case 111: 
 var $608=$i;
 var $609=$mod;
 var $610=(($609+128)|0);
 var $611=HEAP32[(($610)>>2)];
 var $612=($608|0)<($611|0);
 if($612){label=112;break;}else{label=138;break;}
 case 112: 
 var $614=$mod;
 var $615=$i;
 var $616=_pattern_tracks_alloc($614,$615,64);
 var $617=($616|0)<0;
 if($617){label=113;break;}else{label=114;break;}
 case 113: 
 $1=-1;
 label=211;break;
 case 114: 
 var $620=$i;
 var $621=$pp_pat;
 var $622=(($621+($620<<1))|0);
 var $623=HEAP16[(($622)>>1)];
 var $624=($623&65535);
 var $625=($624|0)==0;
 if($625){label=115;break;}else{label=116;break;}
 case 115: 
 label=137;break;
 case 116: 
 var $628=$3;
 var $629=$4;
 var $630=$i;
 var $631=$pp_pat;
 var $632=(($631+($630<<1))|0);
 var $633=HEAP16[(($632)>>1)];
 var $634=($633&65535);
 var $635=($634<<4);
 var $636=((($629)+($635))|0);
 var $637=_hio_seek($628,$636,0);
 $r=0;
 var $638=$3;
 var $639=_hio_read16l($638);
 var $640=($639&65535);
 var $641=((($640)-(2))|0);
 $pat_len=$641;
 label=117;break;
 case 117: 
 var $643=$pat_len;
 var $644=($643|0)>=0;
 if($644){label=118;break;}else{var $657=0;label=119;break;}
 case 118: 
 var $646=$r;
 var $647=$i;
 var $648=$mod;
 var $649=(($648+168)|0);
 var $650=HEAP32[(($649)>>2)];
 var $651=(($650+($647<<2))|0);
 var $652=HEAP32[(($651)>>2)];
 var $653=(($652)|0);
 var $654=HEAP32[(($653)>>2)];
 var $655=($646|0)<($654|0);
 var $657=$655;label=119;break;
 case 119: 
 var $657;
 if($657){label=120;break;}else{label=136;break;}
 case 120: 
 var $659=$3;
 var $660=_hio_read8($659);
 $b=$660;
 var $661=$b;
 var $662=($661&255);
 var $663=($662|0)==0;
 if($663){label=121;break;}else{label=122;break;}
 case 121: 
 var $665=$r;
 var $666=((($665)+(1))|0);
 $r=$666;
 label=117;break;
 case 122: 
 var $668=$b;
 var $669=($668&255);
 var $670=$669&31;
 $c=$670;
 var $671=$c;
 var $672=$mod;
 var $673=(($672+136)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=($671|0)>=($674|0);
 if($675){label=123;break;}else{label=124;break;}
 case 123: 
 var $699=$dummy;label=125;break;
 case 124: 
 var $678=$r;
 var $679=$c;
 var $680=$i;
 var $681=$2;
 var $682=(($681)|0);
 var $683=(($682+168)|0);
 var $684=HEAP32[(($683)>>2)];
 var $685=(($684+($680<<2))|0);
 var $686=HEAP32[(($685)>>2)];
 var $687=(($686+4)|0);
 var $688=(($687+($679<<2))|0);
 var $689=HEAP32[(($688)>>2)];
 var $690=$2;
 var $691=(($690)|0);
 var $692=(($691+172)|0);
 var $693=HEAP32[(($692)>>2)];
 var $694=(($693+($689<<2))|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=(($695+4)|0);
 var $697=(($696+($678<<3))|0);
 var $699=$697;label=125;break;
 case 125: 
 var $699;
 $event=$699;
 var $700=$b;
 var $701=($700&255);
 var $702=$701&32;
 var $703=($702|0)!=0;
 if($703){label=126;break;}else{label=131;break;}
 case 126: 
 var $705=$3;
 var $706=_hio_read8($705);
 $n=$706;
 var $707=($706&255);
 if(($707|0)==255){ label=127;break;}else if(($707|0)==254){ label=128;break;}else{label=129;break;}
 case 127: 
 $n=0;
 label=130;break;
 case 128: 
 $n=-127;
 label=130;break;
 case 129: 
 var $711=$n;
 var $712=($711&255);
 var $713=$712&240;
 var $714=$713>>4;
 var $715=((($714)*(12))&-1);
 var $716=((($715)+(13))|0);
 var $717=$n;
 var $718=($717&255);
 var $719=$718&15;
 var $720=((($716)+($719))|0);
 var $721=(($720)&255);
 $n=$721;
 label=130;break;
 case 130: 
 var $723=$n;
 var $724=$event;
 var $725=(($724)|0);
 HEAP8[($725)]=$723;
 var $726=$3;
 var $727=_hio_read8($726);
 var $728=$event;
 var $729=(($728+1)|0);
 HEAP8[($729)]=$727;
 var $730=$pat_len;
 var $731=((($730)-(2))|0);
 $pat_len=$731;
 label=131;break;
 case 131: 
 var $733=$b;
 var $734=($733&255);
 var $735=$734&64;
 var $736=($735|0)!=0;
 if($736){label=132;break;}else{label=133;break;}
 case 132: 
 var $738=$3;
 var $739=_hio_read8($738);
 var $740=($739&255);
 var $741=((($740)+(1))|0);
 var $742=(($741)&255);
 var $743=$event;
 var $744=(($743+2)|0);
 HEAP8[($744)]=$742;
 var $745=$pat_len;
 var $746=((($745)-(1))|0);
 $pat_len=$746;
 label=133;break;
 case 133: 
 var $748=$b;
 var $749=($748&255);
 var $750=$749&128;
 var $751=($750|0)!=0;
 if($751){label=134;break;}else{label=135;break;}
 case 134: 
 var $753=$3;
 var $754=_hio_read8($753);
 var $755=$event;
 var $756=(($755+3)|0);
 HEAP8[($756)]=$754;
 var $757=$3;
 var $758=_hio_read8($757);
 var $759=$event;
 var $760=(($759+4)|0);
 HEAP8[($760)]=$758;
 var $761=$c;
 var $762=$event;
 var $763=(($arpeggio_val)|0);
 _xlat_fx590($761,$762,$763);
 var $764=$pat_len;
 var $765=((($764)-(2))|0);
 $pat_len=$765;
 label=135;break;
 case 135: 
 label=117;break;
 case 136: 
 label=137;break;
 case 137: 
 var $769=$i;
 var $770=((($769)+(1))|0);
 $i=$770;
 label=111;break;
 case 138: 
 label=139;break;
 case 139: 
 label=140;break;
 case 140: 
 label=141;break;
 case 141: 
 label=142;break;
 case 142: 
 var $776=$mod;
 var $777=_instrument_init($776);
 var $778=($777|0)<0;
 if($778){label=143;break;}else{label=144;break;}
 case 143: 
 $1=-1;
 label=211;break;
 case 144: 
 label=145;break;
 case 145: 
 label=146;break;
 case 146: 
 $i=0;
 label=147;break;
 case 147: 
 var $784=$i;
 var $785=$mod;
 var $786=(($785+140)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=($784|0)<($787|0);
 if($788){label=148;break;}else{label=207;break;}
 case 148: 
 var $790=_calloc(64,1);
 var $791=$790;
 var $792=$i;
 var $793=$mod;
 var $794=(($793+176)|0);
 var $795=HEAP32[(($794)>>2)];
 var $796=(($795+((($792)*(764))&-1))|0);
 var $797=(($796+756)|0);
 HEAP32[(($797)>>2)]=$791;
 var $798=$i;
 var $799=$mod;
 var $800=(($799+176)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($801+((($798)*(764))&-1))|0);
 var $803=(($802+756)|0);
 var $804=HEAP32[(($803)>>2)];
 var $805=($804|0)==0;
 if($805){label=149;break;}else{label=150;break;}
 case 149: 
 $1=-1;
 label=211;break;
 case 150: 
 var $808=$3;
 var $809=$4;
 var $810=$i;
 var $811=$pp_ins;
 var $812=(($811+($810<<1))|0);
 var $813=HEAP16[(($812)>>1)];
 var $814=($813&65535);
 var $815=($814<<4);
 var $816=((($809)+($815))|0);
 var $817=_hio_seek($808,$816,0);
 var $818=$3;
 var $819=_hio_read8($818);
 $x8=$819;
 var $820=$i;
 var $821=$mod;
 var $822=(($821+176)|0);
 var $823=HEAP32[(($822)>>2)];
 var $824=(($823+((($820)*(764))&-1))|0);
 var $825=(($824+756)|0);
 var $826=HEAP32[(($825)>>2)];
 var $827=(($826)|0);
 var $828=(($827+8)|0);
 HEAP32[(($828)>>2)]=128;
 var $829=$i;
 var $830=$i;
 var $831=$mod;
 var $832=(($831+176)|0);
 var $833=HEAP32[(($832)>>2)];
 var $834=(($833+((($830)*(764))&-1))|0);
 var $835=(($834+756)|0);
 var $836=HEAP32[(($835)>>2)];
 var $837=(($836)|0);
 var $838=(($837+40)|0);
 HEAP32[(($838)>>2)]=$829;
 var $839=$x8;
 var $840=($839&255);
 var $841=($840|0)>=2;
 if($841){label=151;break;}else{label=160;break;}
 case 151: 
 var $843=(($sah)|0);
 var $844=$843;
 var $845=$3;
 var $846=_hio_read($844,12,1,$845);
 var $847=(($sah+12)|0);
 var $848=$847;
 var $849=$3;
 var $850=_hio_read($848,3,1,$849);
 var $851=(($sah+15)|0);
 var $852=$851;
 var $853=$3;
 var $854=_hio_read($852,12,1,$853);
 var $855=$3;
 var $856=_hio_read8($855);
 var $857=(($sah+27)|0);
 HEAP8[($857)]=$856;
 var $858=$3;
 var $859=_hio_read8($858);
 var $860=(($sah+28)|0);
 HEAP8[($860)]=$859;
 var $861=$3;
 var $862=_hio_read16l($861);
 var $863=$3;
 var $864=_hio_read16l($863);
 var $865=(($sah+32)|0);
 HEAP16[(($865)>>1)]=$864;
 var $866=$3;
 var $867=_hio_read16l($866);
 var $868=(($sah+36)|0);
 var $869=$868;
 var $870=$3;
 var $871=_hio_read($869,12,1,$870);
 var $872=(($sah+48)|0);
 var $873=$872;
 var $874=$3;
 var $875=_hio_read($873,28,1,$874);
 var $876=$3;
 var $877=_hio_read32b($876);
 var $878=(($sah+76)|0);
 HEAP32[(($878)>>2)]=$877;
 var $879=(($sah+76)|0);
 var $880=HEAP32[(($879)>>2)];
 var $881=($880|0)!=1396920905;
 if($881){label=152;break;}else{label=155;break;}
 case 152: 
 label=153;break;
 case 153: 
 label=154;break;
 case 154: 
 label=210;break;
 case 155: 
 var $886=(($sah+76)|0);
 HEAP32[(($886)>>2)]=0;
 var $887=$mod;
 var $888=$i;
 var $889=(($sah+48)|0);
 var $890=(($889)|0);
 var $891=_instrument_name($887,$888,$890,28);
 var $892=$i;
 var $893=$mod;
 var $894=(($893+176)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=(($895+((($892)*(764))&-1))|0);
 var $897=(($896+36)|0);
 HEAP32[(($897)>>2)]=1;
 var $898=(($sah+27)|0);
 var $899=HEAP8[($898)];
 var $900=($899&255);
 var $901=$i;
 var $902=$mod;
 var $903=(($902+176)|0);
 var $904=HEAP32[(($903)>>2)];
 var $905=(($904+((($901)*(764))&-1))|0);
 var $906=(($905+756)|0);
 var $907=HEAP32[(($906)>>2)];
 var $908=(($907)|0);
 var $909=(($908)|0);
 HEAP32[(($909)>>2)]=$900;
 var $910=(($sah+32)|0);
 var $911=HEAP16[(($910)>>1)];
 var $912=($911&65535);
 var $913=$i;
 var $914=$mod;
 var $915=(($914+176)|0);
 var $916=HEAP32[(($915)>>2)];
 var $917=(($916+((($913)*(764))&-1))|0);
 var $918=(($917+756)|0);
 var $919=HEAP32[(($918)>>2)];
 var $920=(($919)|0);
 var $921=(($920+12)|0);
 var $922=$i;
 var $923=$mod;
 var $924=(($923+176)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($925+((($922)*(764))&-1))|0);
 var $927=(($926+756)|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=(($928)|0);
 var $930=(($929+16)|0);
 _c2spd_to_note($912,$921,$930);
 var $931=$i;
 var $932=$mod;
 var $933=(($932+176)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=(($934+((($931)*(764))&-1))|0);
 var $936=(($935+756)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=(($937)|0);
 var $939=(($938+12)|0);
 var $940=HEAP32[(($939)>>2)];
 var $941=((($940)+(12))|0);
 HEAP32[(($939)>>2)]=$941;
 var $942=$2;
 var $943=$3;
 var $944=$i;
 var $945=$mod;
 var $946=(($945+180)|0);
 var $947=HEAP32[(($946)>>2)];
 var $948=(($947+((($944)*(52))&-1))|0);
 var $949=(($sah+15)|0);
 var $950=$949;
 var $951=_load_sample($942,$943,4096,$948,$950);
 $ret=$951;
 var $952=$ret;
 var $953=($952|0)<0;
 if($953){label=156;break;}else{label=157;break;}
 case 156: 
 $1=-1;
 label=211;break;
 case 157: 
 label=158;break;
 case 158: 
 label=159;break;
 case 159: 
 label=206;break;
 case 160: 
 var $959=(($sih)|0);
 var $960=$959;
 var $961=$3;
 var $962=_hio_read($960,13,1,$961);
 var $963=$3;
 var $964=_hio_read16l($963);
 var $965=(($sih+14)|0);
 HEAP16[(($965)>>1)]=$964;
 var $966=$3;
 var $967=_hio_read32l($966);
 var $968=(($sih+16)|0);
 HEAP32[(($968)>>2)]=$967;
 var $969=$3;
 var $970=_hio_read32l($969);
 var $971=(($sih+20)|0);
 HEAP32[(($971)>>2)]=$970;
 var $972=$3;
 var $973=_hio_read32l($972);
 var $974=(($sih+24)|0);
 HEAP32[(($974)>>2)]=$973;
 var $975=$3;
 var $976=_hio_read8($975);
 var $977=(($sih+28)|0);
 HEAP8[($977)]=$976;
 var $978=$3;
 var $979=_hio_read8($978);
 var $980=(($sih+29)|0);
 HEAP8[($980)]=$979;
 var $981=$3;
 var $982=_hio_read8($981);
 var $983=(($sih+30)|0);
 HEAP8[($983)]=$982;
 var $984=$3;
 var $985=_hio_read8($984);
 var $986=(($sih+31)|0);
 HEAP8[($986)]=$985;
 var $987=$3;
 var $988=_hio_read16l($987);
 var $989=(($sih+32)|0);
 HEAP16[(($989)>>1)]=$988;
 var $990=$3;
 var $991=_hio_read16l($990);
 var $992=(($sih+34)|0);
 HEAP16[(($992)>>1)]=$991;
 var $993=(($sih+36)|0);
 var $994=$993;
 var $995=$3;
 var $996=_hio_read($994,4,1,$995);
 var $997=$3;
 var $998=_hio_read16l($997);
 var $999=(($sih+40)|0);
 HEAP16[(($999)>>1)]=$998;
 var $1000=$3;
 var $1001=_hio_read16l($1000);
 var $1002=(($sih+42)|0);
 HEAP16[(($1002)>>1)]=$1001;
 var $1003=$3;
 var $1004=_hio_read32l($1003);
 var $1005=(($sih+44)|0);
 HEAP32[(($1005)>>2)]=$1004;
 var $1006=(($sih+48)|0);
 var $1007=$1006;
 var $1008=$3;
 var $1009=_hio_read($1007,28,1,$1008);
 var $1010=$3;
 var $1011=_hio_read32b($1010);
 var $1012=(($sih+76)|0);
 HEAP32[(($1012)>>2)]=$1011;
 var $1013=$x8;
 var $1014=($1013&255);
 var $1015=($1014|0)==1;
 if($1015){label=161;break;}else{label=165;break;}
 case 161: 
 var $1017=(($sih+76)|0);
 var $1018=HEAP32[(($1017)>>2)];
 var $1019=($1018|0)!=1396920915;
 if($1019){label=162;break;}else{label=165;break;}
 case 162: 
 label=163;break;
 case 163: 
 label=164;break;
 case 164: 
 label=208;break;
 case 165: 
 var $1024=$quirk87;
 var $1025=($1024|0)!=0;
 if($1025){label=166;break;}else{label=199;break;}
 case 166: 
 label=167;break;
 case 167: 
 $i5=0;
 label=168;break;
 case 168: 
 var $1029=$i5;
 var $1030=($1029>>>0)<4;
 if($1030){label=169;break;}else{label=173;break;}
 case 169: 
 var $1032=(($sih+16)|0);
 var $1033=$1032;
 var $1034=$i5;
 var $1035=(($1033+$1034)|0);
 var $1036=HEAP8[($1035)];
 var $1037=($1036&255);
 var $1038=($1037|0)==135;
 if($1038){label=170;break;}else{label=171;break;}
 case 170: 
 var $1040=(($sih+16)|0);
 var $1041=$1040;
 var $1042=$i5;
 var $1043=(($1041+$1042)|0);
 HEAP8[($1043)]=0;
 label=171;break;
 case 171: 
 label=172;break;
 case 172: 
 var $1046=$i5;
 var $1047=((($1046)+(1))|0);
 $i5=$1047;
 label=168;break;
 case 173: 
 label=174;break;
 case 174: 
 label=175;break;
 case 175: 
 $i6=0;
 label=176;break;
 case 176: 
 var $1052=$i6;
 var $1053=($1052>>>0)<4;
 if($1053){label=177;break;}else{label=181;break;}
 case 177: 
 var $1055=(($sih+20)|0);
 var $1056=$1055;
 var $1057=$i6;
 var $1058=(($1056+$1057)|0);
 var $1059=HEAP8[($1058)];
 var $1060=($1059&255);
 var $1061=($1060|0)==135;
 if($1061){label=178;break;}else{label=179;break;}
 case 178: 
 var $1063=(($sih+20)|0);
 var $1064=$1063;
 var $1065=$i6;
 var $1066=(($1064+$1065)|0);
 HEAP8[($1066)]=0;
 label=179;break;
 case 179: 
 label=180;break;
 case 180: 
 var $1069=$i6;
 var $1070=((($1069)+(1))|0);
 $i6=$1070;
 label=176;break;
 case 181: 
 label=182;break;
 case 182: 
 label=183;break;
 case 183: 
 $i7=0;
 label=184;break;
 case 184: 
 var $1075=$i7;
 var $1076=($1075>>>0)<4;
 if($1076){label=185;break;}else{label=189;break;}
 case 185: 
 var $1078=(($sih+24)|0);
 var $1079=$1078;
 var $1080=$i7;
 var $1081=(($1079+$1080)|0);
 var $1082=HEAP8[($1081)];
 var $1083=($1082&255);
 var $1084=($1083|0)==135;
 if($1084){label=186;break;}else{label=187;break;}
 case 186: 
 var $1086=(($sih+24)|0);
 var $1087=$1086;
 var $1088=$i7;
 var $1089=(($1087+$1088)|0);
 HEAP8[($1089)]=0;
 label=187;break;
 case 187: 
 label=188;break;
 case 188: 
 var $1092=$i7;
 var $1093=((($1092)+(1))|0);
 $i7=$1093;
 label=184;break;
 case 189: 
 label=190;break;
 case 190: 
 label=191;break;
 case 191: 
 $i8=0;
 label=192;break;
 case 192: 
 var $1098=$i8;
 var $1099=($1098>>>0)<1;
 if($1099){label=193;break;}else{label=197;break;}
 case 193: 
 var $1101=(($sih+31)|0);
 var $1102=$i8;
 var $1103=(($1101+$1102)|0);
 var $1104=HEAP8[($1103)];
 var $1105=($1104&255);
 var $1106=($1105|0)==135;
 if($1106){label=194;break;}else{label=195;break;}
 case 194: 
 var $1108=(($sih+31)|0);
 var $1109=$i8;
 var $1110=(($1108+$1109)|0);
 HEAP8[($1110)]=0;
 label=195;break;
 case 195: 
 label=196;break;
 case 196: 
 var $1113=$i8;
 var $1114=((($1113)+(1))|0);
 $i8=$1114;
 label=192;break;
 case 197: 
 label=198;break;
 case 198: 
 label=199;break;
 case 199: 
 var $1118=(($sih+16)|0);
 var $1119=HEAP32[(($1118)>>2)];
 var $1120=$i;
 var $1121=$mod;
 var $1122=(($1121+180)|0);
 var $1123=HEAP32[(($1122)>>2)];
 var $1124=(($1123+((($1120)*(52))&-1))|0);
 var $1125=(($1124+32)|0);
 HEAP32[(($1125)>>2)]=$1119;
 var $1126=(($sih+16)|0);
 var $1127=HEAP32[(($1126)>>2)];
 var $1128=($1127>>>0)>0;
 var $1129=($1128?1:0);
 var $1130=$i;
 var $1131=$mod;
 var $1132=(($1131+176)|0);
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=(($1133+((($1130)*(764))&-1))|0);
 var $1135=(($1134+36)|0);
 HEAP32[(($1135)>>2)]=$1129;
 var $1136=(($sih+20)|0);
 var $1137=HEAP32[(($1136)>>2)];
 var $1138=$i;
 var $1139=$mod;
 var $1140=(($1139+180)|0);
 var $1141=HEAP32[(($1140)>>2)];
 var $1142=(($1141+((($1138)*(52))&-1))|0);
 var $1143=(($1142+36)|0);
 HEAP32[(($1143)>>2)]=$1137;
 var $1144=(($sih+24)|0);
 var $1145=HEAP32[(($1144)>>2)];
 var $1146=$i;
 var $1147=$mod;
 var $1148=(($1147+180)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=(($1149+((($1146)*(52))&-1))|0);
 var $1151=(($1150+40)|0);
 HEAP32[(($1151)>>2)]=$1145;
 var $1152=(($sih+31)|0);
 var $1153=HEAP8[($1152)];
 var $1154=($1153&255);
 var $1155=$1154&1;
 var $1156=($1155|0)!=0;
 var $1157=($1156?2:0);
 var $1158=$i;
 var $1159=$mod;
 var $1160=(($1159+180)|0);
 var $1161=HEAP32[(($1160)>>2)];
 var $1162=(($1161+((($1158)*(52))&-1))|0);
 var $1163=(($1162+44)|0);
 HEAP32[(($1163)>>2)]=$1157;
 var $1164=(($sih+31)|0);
 var $1165=HEAP8[($1164)];
 var $1166=($1165&255);
 var $1167=$1166&4;
 var $1168=($1167|0)!=0;
 if($1168){label=200;break;}else{label=201;break;}
 case 200: 
 var $1170=$i;
 var $1171=$mod;
 var $1172=(($1171+180)|0);
 var $1173=HEAP32[(($1172)>>2)];
 var $1174=(($1173+((($1170)*(52))&-1))|0);
 var $1175=(($1174+44)|0);
 var $1176=HEAP32[(($1175)>>2)];
 var $1177=$1176|1;
 HEAP32[(($1175)>>2)]=$1177;
 label=201;break;
 case 201: 
 var $1179=(($sih+28)|0);
 var $1180=HEAP8[($1179)];
 var $1181=($1180&255);
 var $1182=$i;
 var $1183=$mod;
 var $1184=(($1183+176)|0);
 var $1185=HEAP32[(($1184)>>2)];
 var $1186=(($1185+((($1182)*(764))&-1))|0);
 var $1187=(($1186+756)|0);
 var $1188=HEAP32[(($1187)>>2)];
 var $1189=(($1188)|0);
 var $1190=(($1189)|0);
 HEAP32[(($1190)>>2)]=$1181;
 var $1191=(($sih+76)|0);
 HEAP32[(($1191)>>2)]=0;
 var $1192=$mod;
 var $1193=$i;
 var $1194=(($sih+48)|0);
 var $1195=(($1194)|0);
 var $1196=_instrument_name($1192,$1193,$1195,28);
 label=202;break;
 case 202: 
 label=203;break;
 case 203: 
 var $1199=(($sih+32)|0);
 var $1200=HEAP16[(($1199)>>1)];
 var $1201=($1200&65535);
 var $1202=$i;
 var $1203=$mod;
 var $1204=(($1203+176)|0);
 var $1205=HEAP32[(($1204)>>2)];
 var $1206=(($1205+((($1202)*(764))&-1))|0);
 var $1207=(($1206+756)|0);
 var $1208=HEAP32[(($1207)>>2)];
 var $1209=(($1208)|0);
 var $1210=(($1209+12)|0);
 var $1211=$i;
 var $1212=$mod;
 var $1213=(($1212+176)|0);
 var $1214=HEAP32[(($1213)>>2)];
 var $1215=(($1214+((($1211)*(764))&-1))|0);
 var $1216=(($1215+756)|0);
 var $1217=HEAP32[(($1216)>>2)];
 var $1218=(($1217)|0);
 var $1219=(($1218+16)|0);
 _c2spd_to_note($1201,$1210,$1219);
 var $1220=$3;
 var $1221=$4;
 var $1222=(($sih+14)|0);
 var $1223=HEAP16[(($1222)>>1)];
 var $1224=($1223&65535);
 var $1225=($1224<<4);
 var $1226=((($1221)+($1225))|0);
 var $1227=_hio_seek($1220,$1226,0);
 var $1228=$2;
 var $1229=$3;
 var $1230=(($sfh+42)|0);
 var $1231=HEAP16[(($1230)>>1)];
 var $1232=($1231&65535);
 var $1233=((($1232)-(1))|0);
 var $1234=($1233<<1);
 var $1235=$i;
 var $1236=$mod;
 var $1237=(($1236+180)|0);
 var $1238=HEAP32[(($1237)>>2)];
 var $1239=(($1238+((($1235)*(52))&-1))|0);
 var $1240=_load_sample($1228,$1229,$1234,$1239,0);
 $ret=$1240;
 var $1241=$ret;
 var $1242=($1241|0)<0;
 if($1242){label=204;break;}else{label=205;break;}
 case 204: 
 $1=-1;
 label=211;break;
 case 205: 
 label=206;break;
 case 206: 
 var $1246=$i;
 var $1247=((($1246)+(1))|0);
 $i=$1247;
 label=147;break;
 case 207: 
 var $1249=$pp_pat;
 var $1250=$1249;
 _free($1250);
 var $1251=$pp_ins;
 var $1252=$1251;
 _free($1252);
 var $1253=$2;
 var $1254=(($1253+6552)|0);
 HEAP32[(($1254)>>2)]=1760;
 var $1255=$2;
 var $1256=(($1255+1280)|0);
 var $1257=HEAP32[(($1256)>>2)];
 var $1258=$1257|8389153;
 HEAP32[(($1256)>>2)]=$1258;
 var $1259=$2;
 var $1260=(($1259+1284)|0);
 HEAP32[(($1260)>>2)]=2;
 $1=0;
 label=211;break;
 case 208: 
 var $1262=$pp_pat;
 var $1263=$1262;
 _free($1263);
 label=209;break;
 case 209: 
 var $1265=$pp_ins;
 var $1266=$1265;
 _free($1266);
 label=210;break;
 case 210: 
 $1=-1;
 label=211;break;
 case 211: 
 var $1269=$1;
 STACKTOP=sp;return $1269;
  default: assert(0, "bad label: " + label);
 }
}
function _xlat_fx590($c,$e,$arpeggio_val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $h;
 var $l;
 $1=$c;
 $2=$e;
 $3=$arpeggio_val;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=HEAP8[($5)];
 var $7=($6&255);
 var $8=$7&240;
 var $9=$8>>4;
 var $10=(($9)&255);
 $h=$10;
 var $11=$2;
 var $12=(($11+4)|0);
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=$14&15;
 var $16=(($15)&255);
 $l=$16;
 var $17=$2;
 var $18=(($17+3)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=((7512+$20)|0);
 var $22=HEAP8[($21)];
 var $23=$2;
 var $24=(($23+3)|0);
 HEAP8[($24)]=$22;
 var $25=($22&255);
 if(($25|0)==255){ label=18;break;}else if(($25|0)==0){ label=2;break;}else if(($25|0)==254){ label=6;break;}else{label=19;break;}
 case 2: 
 var $27=$2;
 var $28=(($27+4)|0);
 var $29=HEAP8[($28)];
 var $30=(($29<<24)>>24)!=0;
 if($30){label=3;break;}else{label=4;break;}
 case 3: 
 var $32=$2;
 var $33=(($32+4)|0);
 var $34=HEAP8[($33)];
 var $35=$1;
 var $36=$3;
 var $37=(($36+$35)|0);
 HEAP8[($37)]=$34;
 label=5;break;
 case 4: 
 var $39=$1;
 var $40=$3;
 var $41=(($40+$39)|0);
 var $42=HEAP8[($41)];
 var $43=$2;
 var $44=(($43+4)|0);
 HEAP8[($44)]=$42;
 label=5;break;
 case 5: 
 label=19;break;
 case 6: 
 var $47=$2;
 var $48=(($47+3)|0);
 HEAP8[($48)]=14;
 var $49=$h;
 var $50=($49&255);
 switch(($50|0)){case 4:{ label=10;break;}case 5:case 6:case 7:case 9:case 10:{ label=11;break;}case 8:{ label=12;break;}case 11:{ label=13;break;}case 12:{ label=14;break;}case 1:{ label=7;break;}case 2:{ label=8;break;}case 3:{ label=9;break;}default:{label=17;break;}}break;
 case 7: 
 var $52=$2;
 var $53=(($52+4)|0);
 var $54=HEAP8[($53)];
 var $55=($54&255);
 var $56=$55&15;
 var $57=$56|48;
 var $58=(($57)&255);
 var $59=$2;
 var $60=(($59+4)|0);
 HEAP8[($60)]=$58;
 label=17;break;
 case 8: 
 var $62=$2;
 var $63=(($62+4)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=$65&15;
 var $67=$66|80;
 var $68=(($67)&255);
 var $69=$2;
 var $70=(($69+4)|0);
 HEAP8[($70)]=$68;
 label=17;break;
 case 9: 
 var $72=$2;
 var $73=(($72+4)|0);
 var $74=HEAP8[($73)];
 var $75=($74&255);
 var $76=$75&15;
 var $77=$76|64;
 var $78=(($77)&255);
 var $79=$2;
 var $80=(($79+4)|0);
 HEAP8[($80)]=$78;
 label=17;break;
 case 10: 
 var $82=$2;
 var $83=(($82+4)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=$85&15;
 var $87=$86|112;
 var $88=(($87)&255);
 var $89=$2;
 var $90=(($89+4)|0);
 HEAP8[($90)]=$88;
 label=17;break;
 case 11: 
 var $92=$2;
 var $93=(($92+4)|0);
 HEAP8[($93)]=0;
 var $94=$2;
 var $95=(($94+3)|0);
 HEAP8[($95)]=0;
 label=17;break;
 case 12: 
 var $97=$2;
 var $98=(($97+3)|0);
 HEAP8[($98)]=22;
 var $99=$l;
 var $100=($99&255);
 var $101=$100<<4;
 var $102=(($101)&255);
 var $103=$2;
 var $104=(($103+4)|0);
 HEAP8[($104)]=$102;
 label=17;break;
 case 13: 
 var $106=$2;
 var $107=(($106+4)|0);
 var $108=HEAP8[($107)];
 var $109=($108&255);
 var $110=$109&15;
 var $111=$110|96;
 var $112=(($111)&255);
 var $113=$2;
 var $114=(($113+4)|0);
 HEAP8[($114)]=$112;
 label=17;break;
 case 14: 
 var $116=$l;
 var $117=(($116<<24)>>24)!=0;
 if($117){label=16;break;}else{label=15;break;}
 case 15: 
 var $119=$2;
 var $120=(($119+4)|0);
 HEAP8[($120)]=0;
 var $121=$2;
 var $122=(($121+3)|0);
 HEAP8[($122)]=0;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=19;break;
 case 18: 
 var $126=$2;
 var $127=(($126+4)|0);
 HEAP8[($127)]=0;
 var $128=$2;
 var $129=(($128+3)|0);
 HEAP8[($129)]=0;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _load_sample($m,$f,$flags,$xxs,$buffer){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $bytelen;
 var $extralen;
 var $unroll_extralen;
 var $i;
 var $size;
 var $buf=sp;
 var $pos;
 var $num;
 var $x2;
 var $table=(sp)+(8);
 var $x;
 var $len;
 var $lpe;
 var $lps;
 var $lpe1;
 var $lps2;
 $2=$m;
 $3=$f;
 $4=$flags;
 $5=$xxs;
 $6=$buffer;
 var $7=$4;
 var $8=$7&4096;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=7;break;}
 case 2: 
 $size=11;
 var $11=$4;
 var $12=$11&8192;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$6;
 _convert_hsc_to_sbi($15);
 label=4;break;
 case 4: 
 var $17=_malloc(15);
 var $18=$5;
 var $19=(($18+48)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$5;
 var $21=(($20+48)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=96;break;
 case 6: 
 var $26=$5;
 var $27=(($26+48)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 HEAP32[(($29)>>2)]=0;
 var $30=$5;
 var $31=(($30+48)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+4)|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=$5;
 var $35=(($34+48)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$6;
 assert(11 % 1 === 0);(_memcpy($36, $37, 11)|0);
 var $38=$5;
 var $39=(($38+44)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40|32768;
 HEAP32[(($39)>>2)]=$41;
 var $42=$5;
 var $43=(($42+32)|0);
 HEAP32[(($43)>>2)]=11;
 $1=0;
 label=96;break;
 case 7: 
 var $45=$5;
 var $46=(($45+32)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=96;break;
 case 9: 
 var $51=$2;
 var $52=($51|0)!=0;
 if($52){label=10;break;}else{label=14;break;}
 case 10: 
 var $54=$2;
 var $55=(($54+1288)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56&1;
 var $58=($57|0)!=0;
 if($58){label=11;break;}else{label=14;break;}
 case 11: 
 var $60=$4;
 var $61=$60^-1;
 var $62=$61&16;
 var $63=($62|0)!=0;
 if($63){label=12;break;}else{label=13;break;}
 case 12: 
 var $65=$3;
 var $66=$5;
 var $67=(($66+32)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=_hio_seek($65,$68,1);
 label=13;break;
 case 13: 
 $1=0;
 label=96;break;
 case 14: 
 var $72=$5;
 var $73=(($72+40)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$5;
 var $76=(($75+32)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($74|0)>($77|0);
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 var $80=$5;
 var $81=(($80+32)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$5;
 var $84=(($83+40)|0);
 HEAP32[(($84)>>2)]=$82;
 label=16;break;
 case 16: 
 var $86=$5;
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$5;
 var $90=(($89+32)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($88|0)>=($91|0);
 if($92){label=18;break;}else{label=17;break;}
 case 17: 
 var $94=$5;
 var $95=(($94+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$5;
 var $98=(($97+40)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($96|0)>=($99|0);
 if($100){label=18;break;}else{label=19;break;}
 case 18: 
 var $102=$5;
 var $103=(($102+40)|0);
 HEAP32[(($103)>>2)]=0;
 var $104=$5;
 var $105=(($104+36)|0);
 HEAP32[(($105)>>2)]=0;
 var $106=$5;
 var $107=(($106+44)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$108&-7;
 HEAP32[(($107)>>2)]=$109;
 label=19;break;
 case 19: 
 var $111=$5;
 var $112=(($111+32)|0);
 var $113=HEAP32[(($112)>>2)];
 $bytelen=$113;
 $extralen=4;
 $unroll_extralen=0;
 var $114=$5;
 var $115=(($114+44)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$116&4;
 var $118=($117|0)!=0;
 if($118){label=20;break;}else{label=23;break;}
 case 20: 
 var $120=$5;
 var $121=(($120+44)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122^-1;
 var $124=$123&2;
 var $125=($124|0)!=0;
 if($125){label=21;break;}else{label=22;break;}
 case 21: 
 var $127=$5;
 var $128=(($127+44)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=$129&-5;
 HEAP32[(($128)>>2)]=$130;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $133=$5;
 var $134=(($133+44)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$135&4;
 var $137=($136|0)!=0;
 if($137){label=24;break;}else{label=27;break;}
 case 24: 
 var $139=$5;
 var $140=(($139+40)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=$5;
 var $143=(($142+36)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=((($141)-($144))|0);
 var $146=$5;
 var $147=(($146+32)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=$5;
 var $150=(($149+40)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=((($148)-($151))|0);
 var $153=((($145)-($152))|0);
 $unroll_extralen=$153;
 var $154=$unroll_extralen;
 var $155=($154|0)<0;
 if($155){label=25;break;}else{label=26;break;}
 case 25: 
 $unroll_extralen=0;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $159=$5;
 var $160=(($159+44)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=$161&1;
 var $163=($162|0)!=0;
 if($163){label=28;break;}else{label=29;break;}
 case 28: 
 var $165=$bytelen;
 var $166=($165<<1);
 $bytelen=$166;
 var $167=$extralen;
 var $168=($167<<1);
 $extralen=$168;
 var $169=$unroll_extralen;
 var $170=($169<<1);
 $unroll_extralen=$170;
 label=29;break;
 case 29: 
 var $172=$bytelen;
 var $173=$extralen;
 var $174=((($172)+($173))|0);
 var $175=$unroll_extralen;
 var $176=((($174)+($175))|0);
 var $177=((($176)+(4))|0);
 var $178=_malloc($177);
 var $179=$5;
 var $180=(($179+48)|0);
 HEAP32[(($180)>>2)]=$178;
 var $181=$5;
 var $182=(($181+48)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=96;break;
 case 31: 
 var $187=$5;
 var $188=(($187+48)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$189;
 HEAP32[(($190)>>2)]=0;
 var $191=$5;
 var $192=(($191+48)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+4)|0);
 HEAP32[(($192)>>2)]=$194;
 var $195=$4;
 var $196=$195&16;
 var $197=($196|0)!=0;
 if($197){label=32;break;}else{label=33;break;}
 case 32: 
 var $199=$5;
 var $200=(($199+48)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$6;
 var $203=$bytelen;
 assert($203 % 1 === 0);(_memcpy($201, $202, $203)|0);
 label=42;break;
 case 33: 
 var $205=$3;
 var $206=_hio_tell($205);
 $pos=$206;
 var $207=(($buf)|0);
 var $208=$3;
 var $209=_hio_read($207,1,5,$208);
 $num=$209;
 var $210=$3;
 var $211=$pos;
 var $212=_hio_seek($210,$211,0);
 var $213=$num;
 var $214=($213|0)==5;
 if($214){label=34;break;}else{label=36;break;}
 case 34: 
 var $216=(($buf)|0);
 var $217=_memcmp($216,21824,5);
 var $218=($217|0)!=0;
 if($218){label=36;break;}else{label=35;break;}
 case 35: 
 var $220=$bytelen;
 var $221=$220>>1;
 $x2=$221;
 var $222=$3;
 var $223=_hio_seek($222,5,1);
 var $224=(($table)|0);
 var $225=$3;
 var $226=_hio_read($224,1,16,$225);
 var $227=$5;
 var $228=(($227+48)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=$x2;
 var $231=(($229+$230)|0);
 var $232=$x2;
 var $233=$3;
 var $234=_hio_read($231,1,$232,$233);
 var $235=$5;
 var $236=(($235+48)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$x2;
 var $239=(($237+$238)|0);
 var $240=$5;
 var $241=(($240+48)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($table)|0);
 var $244=$bytelen;
 _adpcm4_decoder($239,$242,$243,$244);
 label=41;break;
 case 36: 
 var $246=$5;
 var $247=(($246+48)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=$bytelen;
 var $250=$3;
 var $251=_hio_read($248,1,$249,$250);
 $x=$251;
 var $252=$x;
 var $253=$bytelen;
 var $254=($252|0)!=($253|0);
 if($254){label=37;break;}else{label=40;break;}
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $258=$5;
 var $259=(($258+48)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=$x;
 var $262=(($260+$261)|0);
 var $263=$bytelen;
 var $264=$x;
 var $265=((($263)-($264))|0);
 _memset($262, 0, $265)|0;
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 var $269=$4;
 var $270=$269&8;
 var $271=($270|0)!=0;
 if($271){label=43;break;}else{label=44;break;}
 case 43: 
 var $273=$5;
 var $274=(($273+48)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=$5;
 var $277=(($276+32)|0);
 var $278=HEAP32[(($277)>>2)];
 _convert_7bit_to_8bit($275,$278);
 label=44;break;
 case 44: 
 var $280=$5;
 var $281=(($280+44)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=$282&1;
 var $284=($283|0)!=0;
 if($284){label=45;break;}else{label=48;break;}
 case 45: 
 var $286=$4;
 var $287=$286&64;
 var $288=($287|0)!=0;
 if($288){label=46;break;}else{label=47;break;}
 case 46: 
 var $290=$5;
 var $291=(($290+48)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=$5;
 var $294=(($293+32)|0);
 var $295=HEAP32[(($294)>>2)];
 _convert_endian($292,$295);
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $298=$4;
 var $299=$298&1;
 var $300=($299|0)!=0;
 if($300){label=49;break;}else{label=50;break;}
 case 49: 
 var $302=$5;
 var $303=(($302+48)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=$5;
 var $306=(($305+32)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=$5;
 var $309=(($308+44)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=$310&1;
 _convert_delta($304,$307,$311);
 label=55;break;
 case 50: 
 var $313=$4;
 var $314=$313&4;
 var $315=($314|0)!=0;
 if($315){label=51;break;}else{label=54;break;}
 case 51: 
 var $317=$5;
 var $318=(($317+32)|0);
 var $319=HEAP32[(($318)>>2)];
 $len=$319;
 var $320=$5;
 var $321=(($320+44)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=$322&1;
 var $324=($323|0)!=0;
 if($324){label=52;break;}else{label=53;break;}
 case 52: 
 var $326=$len;
 var $327=($326<<1);
 $len=$327;
 label=53;break;
 case 53: 
 var $329=$5;
 var $330=(($329+48)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$len;
 _convert_delta($331,$332,0);
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 var $335=$4;
 var $336=$335&2;
 var $337=($336|0)!=0;
 if($337){label=56;break;}else{label=57;break;}
 case 56: 
 var $339=$5;
 var $340=(($339+48)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=$5;
 var $343=(($342+32)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=$5;
 var $346=(($345+44)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=$347&1;
 _convert_signal($341,$344,$348);
 label=57;break;
 case 57: 
 var $350=$4;
 var $351=$350&128;
 var $352=($351|0)!=0;
 if($352){label=58;break;}else{label=59;break;}
 case 58: 
 var $354=$5;
 var $355=(($354+48)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=$5;
 var $358=(($357+32)|0);
 var $359=HEAP32[(($358)>>2)];
 _convert_vidc_to_linear($356,$359);
 label=59;break;
 case 59: 
 var $361=$4;
 var $362=$361&512;
 var $363=($362|0)!=0;
 if($363){label=60;break;}else{label=64;break;}
 case 60: 
 var $365=$5;
 var $366=(($365+36)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($367|0)==0;
 if($368){label=61;break;}else{label=63;break;}
 case 61: 
 var $370=$5;
 var $371=(($370+32)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=$5;
 var $374=(($373+40)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=($372|0)>($375|0);
 if($376){label=62;break;}else{label=63;break;}
 case 62: 
 var $378=$5;
 var $379=(($378+44)|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=$380|16;
 HEAP32[(($379)>>2)]=$381;
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 var $384=$5;
 var $385=(($384+44)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=$386&4;
 var $388=($387|0)!=0;
 if($388){label=65;break;}else{label=66;break;}
 case 65: 
 var $390=$5;
 _unroll_loop($390);
 var $391=$unroll_extralen;
 var $392=$bytelen;
 var $393=((($392)+($391))|0);
 $bytelen=$393;
 label=66;break;
 case 66: 
 var $395=$5;
 var $396=(($395+44)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=$397&1;
 var $399=($398|0)!=0;
 if($399){label=67;break;}else{label=72;break;}
 case 67: 
 $i=0;
 label=68;break;
 case 68: 
 var $402=$i;
 var $403=($402|0)<8;
 if($403){label=69;break;}else{label=71;break;}
 case 69: 
 var $405=$bytelen;
 var $406=((($405)-(2))|0);
 var $407=$i;
 var $408=((($406)+($407))|0);
 var $409=$5;
 var $410=(($409+48)|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=(($411+$408)|0);
 var $413=HEAP8[($412)];
 var $414=$bytelen;
 var $415=$i;
 var $416=((($414)+($415))|0);
 var $417=$5;
 var $418=(($417+48)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=(($419+$416)|0);
 HEAP8[($420)]=$413;
 label=70;break;
 case 70: 
 var $422=$i;
 var $423=((($422)+(1))|0);
 $i=$423;
 label=68;break;
 case 71: 
 label=77;break;
 case 72: 
 $i=0;
 label=73;break;
 case 73: 
 var $427=$i;
 var $428=($427|0)<4;
 if($428){label=74;break;}else{label=76;break;}
 case 74: 
 var $430=$bytelen;
 var $431=((($430)-(1))|0);
 var $432=$i;
 var $433=((($431)+($432))|0);
 var $434=$5;
 var $435=(($434+48)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=(($436+$433)|0);
 var $438=HEAP8[($437)];
 var $439=$bytelen;
 var $440=$i;
 var $441=((($439)+($440))|0);
 var $442=$5;
 var $443=(($442+48)|0);
 var $444=HEAP32[(($443)>>2)];
 var $445=(($444+$441)|0);
 HEAP8[($445)]=$438;
 label=75;break;
 case 75: 
 var $447=$i;
 var $448=((($447)+(1))|0);
 $i=$448;
 label=73;break;
 case 76: 
 label=77;break;
 case 77: 
 var $451=$5;
 var $452=(($451+44)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=$453&1;
 var $455=($454|0)!=0;
 if($455){label=78;break;}else{label=79;break;}
 case 78: 
 var $457=$5;
 var $458=(($457+48)|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=(($459)|0);
 var $461=HEAP8[($460)];
 var $462=$5;
 var $463=(($462+48)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=((($464)-(2))|0);
 HEAP8[($465)]=$461;
 var $466=$5;
 var $467=(($466+48)|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=(($468+1)|0);
 var $470=HEAP8[($469)];
 var $471=$5;
 var $472=(($471+48)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=((($473)-(1))|0);
 HEAP8[($474)]=$470;
 label=80;break;
 case 79: 
 var $476=$5;
 var $477=(($476+48)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=(($478)|0);
 var $480=HEAP8[($479)];
 var $481=$5;
 var $482=(($481+48)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=((($483)-(1))|0);
 HEAP8[($484)]=$480;
 label=80;break;
 case 80: 
 var $486=$5;
 var $487=(($486+44)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=$488&2;
 var $490=($489|0)!=0;
 if($490){label=81;break;}else{label=95;break;}
 case 81: 
 var $492=$5;
 var $493=(($492+44)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=$494&1;
 var $496=($495|0)!=0;
 if($496){label=82;break;}else{label=89;break;}
 case 82: 
 var $498=$5;
 var $499=(($498+40)|0);
 var $500=HEAP32[(($499)>>2)];
 var $501=($500<<1);
 $lpe=$501;
 var $502=$5;
 var $503=(($502+36)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=($504<<1);
 $lps=$505;
 var $506=$5;
 var $507=(($506+44)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=$508&4;
 var $510=($509|0)!=0;
 if($510){label=83;break;}else{label=84;break;}
 case 83: 
 var $512=$5;
 var $513=(($512+40)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=$5;
 var $516=(($515+36)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=((($514)-($517))|0);
 var $519=($518<<1);
 var $520=$lpe;
 var $521=((($520)+($519))|0);
 $lpe=$521;
 label=84;break;
 case 84: 
 var $523=$lpe;
 var $524=((($523)-(2))|0);
 var $525=$5;
 var $526=(($525+48)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=(($527+$524)|0);
 var $529=HEAP8[($528)];
 var $530=$lpe;
 var $531=$5;
 var $532=(($531+48)|0);
 var $533=HEAP32[(($532)>>2)];
 var $534=(($533+$530)|0);
 HEAP8[($534)]=$529;
 var $535=$lpe;
 var $536=((($535)-(1))|0);
 var $537=$5;
 var $538=(($537+48)|0);
 var $539=HEAP32[(($538)>>2)];
 var $540=(($539+$536)|0);
 var $541=HEAP8[($540)];
 var $542=$lpe;
 var $543=((($542)+(1))|0);
 var $544=$5;
 var $545=(($544+48)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=(($546+$543)|0);
 HEAP8[($547)]=$541;
 $i=0;
 label=85;break;
 case 85: 
 var $549=$i;
 var $550=($549|0)<6;
 if($550){label=86;break;}else{label=88;break;}
 case 86: 
 var $552=$lps;
 var $553=$i;
 var $554=((($552)+($553))|0);
 var $555=$5;
 var $556=(($555+48)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=(($557+$554)|0);
 var $559=HEAP8[($558)];
 var $560=$lpe;
 var $561=((($560)+(2))|0);
 var $562=$i;
 var $563=((($561)+($562))|0);
 var $564=$5;
 var $565=(($564+48)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=(($566+$563)|0);
 HEAP8[($567)]=$559;
 label=87;break;
 case 87: 
 var $569=$i;
 var $570=((($569)+(1))|0);
 $i=$570;
 label=85;break;
 case 88: 
 label=94;break;
 case 89: 
 var $573=$5;
 var $574=(($573+40)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=$unroll_extralen;
 var $577=((($575)+($576))|0);
 $lpe1=$577;
 var $578=$5;
 var $579=(($578+36)|0);
 var $580=HEAP32[(($579)>>2)];
 $lps2=$580;
 var $581=$lpe1;
 var $582=((($581)-(1))|0);
 var $583=$5;
 var $584=(($583+48)|0);
 var $585=HEAP32[(($584)>>2)];
 var $586=(($585+$582)|0);
 var $587=HEAP8[($586)];
 var $588=$lpe1;
 var $589=$5;
 var $590=(($589+48)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=(($591+$588)|0);
 HEAP8[($592)]=$587;
 $i=0;
 label=90;break;
 case 90: 
 var $594=$i;
 var $595=($594|0)<3;
 if($595){label=91;break;}else{label=93;break;}
 case 91: 
 var $597=$lps2;
 var $598=$i;
 var $599=((($597)+($598))|0);
 var $600=$5;
 var $601=(($600+48)|0);
 var $602=HEAP32[(($601)>>2)];
 var $603=(($602+$599)|0);
 var $604=HEAP8[($603)];
 var $605=$lpe1;
 var $606=((($605)+(1))|0);
 var $607=$i;
 var $608=((($606)+($607))|0);
 var $609=$5;
 var $610=(($609+48)|0);
 var $611=HEAP32[(($610)>>2)];
 var $612=(($611+$608)|0);
 HEAP8[($612)]=$604;
 label=92;break;
 case 92: 
 var $614=$i;
 var $615=((($614)+(1))|0);
 $i=$615;
 label=90;break;
 case 93: 
 label=94;break;
 case 94: 
 label=95;break;
 case 95: 
 $1=0;
 label=96;break;
 case 96: 
 var $620=$1;
 STACKTOP=sp;return $620;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_hsc_to_sbi($a){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $b=sp;
 var $i;
 var $x;
 $1=$a;
 $i=0;
 label=2;break;
 case 2: 
 var $3=$i;
 var $4=($3|0)<10;
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 var $6=$i;
 var $7=$1;
 var $8=(($7+$6)|0);
 var $9=HEAP8[($8)];
 $x=$9;
 var $10=$i;
 var $11=((($10)+(1))|0);
 var $12=$1;
 var $13=(($12+$11)|0);
 var $14=HEAP8[($13)];
 var $15=$i;
 var $16=$1;
 var $17=(($16+$15)|0);
 HEAP8[($17)]=$14;
 var $18=$x;
 var $19=$i;
 var $20=((($19)+(1))|0);
 var $21=$1;
 var $22=(($21+$20)|0);
 HEAP8[($22)]=$18;
 label=4;break;
 case 4: 
 var $24=$i;
 var $25=((($24)+(2))|0);
 $i=$25;
 label=2;break;
 case 5: 
 var $27=$b;
 var $28=$1;
 assert(11 % 1 === 0);(_memcpy($27, $28, 11)|0);
 var $29=(($b+10)|0);
 var $30=HEAP8[($29)];
 var $31=$1;
 var $32=(($31+8)|0);
 HEAP8[($32)]=$30;
 var $33=(($b+9)|0);
 var $34=HEAP8[($33)];
 var $35=$1;
 var $36=(($35+10)|0);
 HEAP8[($36)]=$34;
 var $37=(($b+8)|0);
 var $38=HEAP8[($37)];
 var $39=$1;
 var $40=(($39+9)|0);
 HEAP8[($40)]=$38;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _adpcm4_decoder($inp,$outp,$tab,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $delta;
 var $b0;
 var $b1;
 var $i;
 $1=$inp;
 $2=$outp;
 $3=$tab;
 $4=$len;
 $delta=0;
 var $5=$4;
 var $6=((($5)+(1))|0);
 var $7=(((($6|0))/(2))&-1);
 $4=$7;
 $i=0;
 label=2;break;
 case 2: 
 var $9=$i;
 var $10=$4;
 var $11=($9|0)<($10|0);
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$1;
 var $14=HEAP8[($13)];
 $b0=$14;
 var $15=$1;
 var $16=(($15+1)|0);
 $1=$16;
 var $17=HEAP8[($15)];
 var $18=($17&255);
 var $19=$18>>4;
 var $20=(($19)&255);
 $b1=$20;
 var $21=$b0;
 var $22=($21&255);
 var $23=$22&15;
 var $24=$3;
 var $25=(($24+$23)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24);
 var $28=$delta;
 var $29=(($28<<24)>>24);
 var $30=((($29)+($27))|0);
 var $31=(($30)&255);
 $delta=$31;
 var $32=$delta;
 var $33=$2;
 var $34=(($33+1)|0);
 $2=$34;
 HEAP8[($33)]=$32;
 var $35=$b1;
 var $36=($35&255);
 var $37=$36&15;
 var $38=$3;
 var $39=(($38+$37)|0);
 var $40=HEAP8[($39)];
 var $41=(($40<<24)>>24);
 var $42=$delta;
 var $43=(($42<<24)>>24);
 var $44=((($43)+($41))|0);
 var $45=(($44)&255);
 $delta=$45;
 var $46=$delta;
 var $47=$2;
 var $48=(($47+1)|0);
 $2=$48;
 HEAP8[($47)]=$46;
 label=4;break;
 case 4: 
 var $50=$i;
 var $51=((($50)+(1))|0);
 $i=$51;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_7bit_to_8bit($p,$l){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$p;
 $2=$l;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=((($4)-(1))|0);
 $2=$5;
 var $6=($4|0)!=0;
 if($6){label=3;break;}else{label=5;break;}
 case 3: 
 var $8=$1;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10<<1;
 var $12=(($11)&255);
 HEAP8[($8)]=$12;
 label=4;break;
 case 4: 
 var $14=$1;
 var $15=(($14+1)|0);
 $1=$15;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_endian($p,$l){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $b;
 var $i;
 $1=$p;
 $2=$l;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=$2;
 var $6=($4|0)<($5|0);
 if($6){label=3;break;}else{label=5;break;}
 case 3: 
 var $8=$1;
 var $9=(($8)|0);
 var $10=HEAP8[($9)];
 $b=$10;
 var $11=$1;
 var $12=(($11+1)|0);
 var $13=HEAP8[($12)];
 var $14=$1;
 var $15=(($14)|0);
 HEAP8[($15)]=$13;
 var $16=$b;
 var $17=$1;
 var $18=(($17+1)|0);
 HEAP8[($18)]=$16;
 var $19=$1;
 var $20=(($19+2)|0);
 $1=$20;
 label=4;break;
 case 4: 
 var $22=$i;
 var $23=((($22)+(1))|0);
 $i=$23;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_delta($p,$l,$r){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $w;
 var $abs;
 $1=$p;
 $2=$l;
 $3=$r;
 var $4=$1;
 var $5=$4;
 $w=$5;
 $abs=0;
 var $6=$3;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=6;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=((($10)-(1))|0);
 $2=$11;
 var $12=($10|0)!=0;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=$w;
 var $15=HEAP16[(($14)>>1)];
 var $16=($15&65535);
 var $17=$abs;
 var $18=($17&65535);
 var $19=((($16)+($18))|0);
 var $20=(($19)&65535);
 $abs=$20;
 var $21=$abs;
 var $22=$w;
 var $23=(($22+2)|0);
 $w=$23;
 HEAP16[(($22)>>1)]=$21;
 label=3;break;
 case 5: 
 label=10;break;
 case 6: 
 label=7;break;
 case 7: 
 var $27=$2;
 var $28=((($27)-(1))|0);
 $2=$28;
 var $29=($27|0)!=0;
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 var $31=$1;
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=$abs;
 var $35=($34&65535);
 var $36=((($33)+($35))|0);
 var $37=(($36)&65535);
 $abs=$37;
 var $38=$abs;
 var $39=(($38)&255);
 var $40=$1;
 var $41=(($40+1)|0);
 $1=$41;
 HEAP8[($40)]=$39;
 label=7;break;
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_signal($p,$l,$r){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $w;
 $1=$p;
 $2=$l;
 $3=$r;
 var $4=$1;
 var $5=$4;
 $w=$5;
 var $6=$3;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=((($10)-(1))|0);
 $2=$11;
 var $12=($10|0)!=0;
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 var $14=$w;
 var $15=HEAP16[(($14)>>1)];
 var $16=($15&65535);
 var $17=((($16)+(32768))|0);
 var $18=(($17)&65535);
 HEAP16[(($14)>>1)]=$18;
 label=5;break;
 case 5: 
 var $20=$w;
 var $21=(($20+2)|0);
 $w=$21;
 label=3;break;
 case 6: 
 label=12;break;
 case 7: 
 label=8;break;
 case 8: 
 var $25=$2;
 var $26=((($25)-(1))|0);
 $2=$26;
 var $27=($25|0)!=0;
 if($27){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=$1;
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=((($31)-(128))|0);
 var $33=(($32)&255);
 HEAP8[($29)]=$33;
 label=10;break;
 case 10: 
 var $35=$1;
 var $36=(($35+1)|0);
 $1=$36;
 label=8;break;
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_vidc_to_linear($p,$l){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $x;
 $1=$p;
 $2=$l;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=$2;
 var $6=($4|0)<($5|0);
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=$i;
 var $9=$1;
 var $10=(($9+$8)|0);
 var $11=HEAP8[($10)];
 $x=$11;
 var $12=$x;
 var $13=($12&255);
 var $14=$13>>1;
 var $15=((104+$14)|0);
 var $16=HEAP8[($15)];
 var $17=$i;
 var $18=$1;
 var $19=(($18+$17)|0);
 HEAP8[($19)]=$16;
 var $20=$x;
 var $21=($20&255);
 var $22=$21&1;
 var $23=($22|0)!=0;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=$i;
 var $26=$1;
 var $27=(($26+$25)|0);
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=((($29)*(-1))&-1);
 var $31=(($30)&255);
 HEAP8[($27)]=$31;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $34=$i;
 var $35=((($34)+(1))|0);
 $i=$35;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _unroll_loop($xxs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $s8;
 var $s16;
 var $start;
 var $loop_size;
 var $i;
 $1=$xxs;
 var $2=$1;
 var $3=(($2+48)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $s16=$5;
 var $6=$1;
 var $7=(($6+48)|0);
 var $8=HEAP32[(($7)>>2)];
 $s8=$8;
 var $9=$1;
 var $10=(($9+32)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$1;
 var $13=(($12+40)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11|0)>($14|0);
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$1;
 var $18=(($17+40)|0);
 var $19=HEAP32[(($18)>>2)];
 $start=$19;
 label=4;break;
 case 3: 
 var $21=$1;
 var $22=(($21+32)|0);
 var $23=HEAP32[(($22)>>2)];
 $start=$23;
 label=4;break;
 case 4: 
 var $25=$1;
 var $26=(($25+40)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$1;
 var $29=(($28+36)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($27)-($30))|0);
 $loop_size=$31;
 var $32=$1;
 var $33=(($32+44)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$34&1;
 var $36=($35|0)!=0;
 if($36){label=5;break;}else{label=10;break;}
 case 5: 
 var $38=$start;
 var $39=$s16;
 var $40=(($39+($38<<1))|0);
 $s16=$40;
 $i=0;
 label=6;break;
 case 6: 
 var $42=$i;
 var $43=$loop_size;
 var $44=($42|0)<($43|0);
 if($44){label=7;break;}else{label=9;break;}
 case 7: 
 var $46=$s16;
 var $47=$i;
 var $48=(((-$47))|0);
 var $49=(($46+($48<<1))|0);
 var $50=((($49)-(2))|0);
 var $51=HEAP16[(($50)>>1)];
 var $52=$s16;
 var $53=$i;
 var $54=(($52+($53<<1))|0);
 HEAP16[(($54)>>1)]=$51;
 label=8;break;
 case 8: 
 var $56=$i;
 var $57=((($56)+(1))|0);
 $i=$57;
 label=6;break;
 case 9: 
 label=15;break;
 case 10: 
 var $60=$start;
 var $61=$s8;
 var $62=(($61+$60)|0);
 $s8=$62;
 $i=0;
 label=11;break;
 case 11: 
 var $64=$i;
 var $65=$loop_size;
 var $66=($64|0)<($65|0);
 if($66){label=12;break;}else{label=14;break;}
 case 12: 
 var $68=$s8;
 var $69=$i;
 var $70=(((-$69))|0);
 var $71=(($68+$70)|0);
 var $72=((($71)-(1))|0);
 var $73=HEAP8[($72)];
 var $74=$s8;
 var $75=$i;
 var $76=(($74+$75)|0);
 HEAP8[($76)]=$73;
 label=13;break;
 case 13: 
 var $78=$i;
 var $79=((($78)+(1))|0);
 $i=$79;
 label=11;break;
 case 14: 
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _sfx_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $a;
 var $b;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_seek($5,60,1);
 var $7=$2;
 var $8=_hio_read32b($7);
 $a=$8;
 var $9=$2;
 var $10=_hio_seek($9,60,1);
 var $11=$2;
 var $12=_hio_read32b($11);
 $b=$12;
 var $13=$a;
 var $14=($13|0)!=1397706311;
 if($14){label=2;break;}else{label=4;break;}
 case 2: 
 var $16=$b;
 var $17=($16|0)!=1397706311;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=5;break;
 case 4: 
 var $20=$2;
 var $21=$3;
 _read_title($20,$21,0);
 $1=0;
 label=5;break;
 case 5: 
 var $23=$1;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _sfx_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=$3;
 var $7=$4;
 var $8=_sfx_13_20_load($5,$6,15,$7);
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=$3;
 var $13=$4;
 var $14=_sfx_13_20_load($11,$12,31,$13);
 $1=$14;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $17=$1;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _sfx_13_20_load($m,$f,$nins,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $sfx=sp;
 var $sfx2=(sp)+(24);
 var $ev=(sp)+(160);
 var $ins_size=(sp)+(168);
 var $ins=(sp)+(296);
 $2=$m;
 $3=$f;
 $4=$nins;
 $5=$start;
 var $6=$2;
 var $7=(($6)|0);
 $mod=$7;
 label=2;break;
 case 2: 
 var $9=$3;
 var $10=$5;
 var $11=_hio_seek($9,$10,0);
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $14=$i;
 var $15=$4;
 var $16=($14|0)<($15|0);
 if($16){label=5;break;}else{label=7;break;}
 case 5: 
 var $18=$3;
 var $19=_hio_read32b($18);
 var $20=$i;
 var $21=(($ins_size+($20<<2))|0);
 HEAP32[(($21)>>2)]=$19;
 label=6;break;
 case 6: 
 var $23=$i;
 var $24=((($23)+(1))|0);
 $i=$24;
 label=4;break;
 case 7: 
 var $26=$3;
 var $27=_hio_read32b($26);
 var $28=(($sfx)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=$3;
 var $30=_hio_read16b($29);
 var $31=(($sfx+4)|0);
 HEAP16[(($31)>>1)]=$30;
 var $32=(($sfx+4)|0);
 var $33=HEAP16[(($32)>>1)];
 var $34=($33&65535);
 var $35=($34|0)<178;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=79;break;
 case 9: 
 var $38=(($sfx+6)|0);
 var $39=$38;
 var $40=$3;
 var $41=_hio_read($39,14,1,$40);
 var $42=(($sfx)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)!=1397706311;
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=79;break;
 case 11: 
 var $47=$4;
 var $48=$mod;
 var $49=(($48+140)|0);
 HEAP32[(($49)>>2)]=$47;
 var $50=$mod;
 var $51=(($50+140)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$mod;
 var $54=(($53+144)|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=(($sfx+4)|0);
 var $56=HEAP16[(($55)>>1)];
 var $57=($56&65535);
 var $58=(((1776930)/(($57|0)))&-1);
 var $59=$mod;
 var $60=(($59+152)|0);
 HEAP32[(($60)>>2)]=$58;
 $i=0;
 label=12;break;
 case 12: 
 var $62=$i;
 var $63=$mod;
 var $64=(($63+140)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($62|0)<($65|0);
 if($66){label=13;break;}else{label=15;break;}
 case 13: 
 var $68=$i;
 var $69=(($ins+((($68)*(30))&-1))|0);
 var $70=(($69)|0);
 var $71=$70;
 var $72=$3;
 var $73=_hio_read($71,22,1,$72);
 var $74=$3;
 var $75=_hio_read16b($74);
 var $76=$i;
 var $77=(($ins+((($76)*(30))&-1))|0);
 var $78=(($77+22)|0);
 HEAP16[(($78)>>1)]=$75;
 var $79=$3;
 var $80=_hio_read8($79);
 var $81=$i;
 var $82=(($ins+((($81)*(30))&-1))|0);
 var $83=(($82+24)|0);
 HEAP8[($83)]=$80;
 var $84=$3;
 var $85=_hio_read8($84);
 var $86=$i;
 var $87=(($ins+((($86)*(30))&-1))|0);
 var $88=(($87+25)|0);
 HEAP8[($88)]=$85;
 var $89=$3;
 var $90=_hio_read16b($89);
 var $91=$i;
 var $92=(($ins+((($91)*(30))&-1))|0);
 var $93=(($92+26)|0);
 HEAP16[(($93)>>1)]=$90;
 var $94=$3;
 var $95=_hio_read16b($94);
 var $96=$i;
 var $97=(($ins+((($96)*(30))&-1))|0);
 var $98=(($97+28)|0);
 HEAP16[(($98)>>1)]=$95;
 label=14;break;
 case 14: 
 var $100=$i;
 var $101=((($100)+(1))|0);
 $i=$101;
 label=12;break;
 case 15: 
 var $103=$3;
 var $104=_hio_read8($103);
 var $105=(($sfx2)|0);
 HEAP8[($105)]=$104;
 var $106=$3;
 var $107=_hio_read8($106);
 var $108=(($sfx2+1)|0);
 HEAP8[($108)]=$107;
 var $109=(($sfx2+2)|0);
 var $110=$109;
 var $111=$3;
 var $112=_hio_read($110,128,1,$111);
 var $113=(($sfx2)|0);
 var $114=HEAP8[($113)];
 var $115=($114&255);
 var $116=$mod;
 var $117=(($116+156)|0);
 HEAP32[(($117)>>2)]=$115;
 var $118=$mod;
 var $119=(($118+156)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($120|0)>127;
 if($121){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=79;break;
 case 17: 
 var $124=$mod;
 var $125=(($124+952)|0);
 var $126=$125;
 var $127=(($sfx2+2)|0);
 var $128=$127;
 var $129=$mod;
 var $130=(($129+156)|0);
 var $131=HEAP32[(($130)>>2)];
 assert($131 % 1 === 0);(_memcpy($126, $128, $131)|0);
 $i=0;
 var $132=$mod;
 var $133=(($132+128)|0);
 HEAP32[(($133)>>2)]=0;
 label=18;break;
 case 18: 
 var $135=$i;
 var $136=$mod;
 var $137=(($136+156)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($135|0)<($138|0);
 if($139){label=19;break;}else{label=23;break;}
 case 19: 
 var $141=$i;
 var $142=$mod;
 var $143=(($142+952)|0);
 var $144=(($143+$141)|0);
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=$mod;
 var $148=(($147+128)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($146|0)>($149|0);
 if($150){label=20;break;}else{label=21;break;}
 case 20: 
 var $152=$i;
 var $153=$mod;
 var $154=(($153+952)|0);
 var $155=(($154+$152)|0);
 var $156=HEAP8[($155)];
 var $157=($156&255);
 var $158=$mod;
 var $159=(($158+128)|0);
 HEAP32[(($159)>>2)]=$157;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $162=$i;
 var $163=((($162)+(1))|0);
 $i=$163;
 label=18;break;
 case 23: 
 var $165=$mod;
 var $166=(($165+128)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=((($167)+(1))|0);
 HEAP32[(($166)>>2)]=$168;
 var $169=$mod;
 var $170=(($169+136)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=$mod;
 var $173=(($172+128)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(Math_imul($171,$174)|0);
 var $176=$mod;
 var $177=(($176+132)|0);
 HEAP32[(($177)>>2)]=$175;
 var $178=$mod;
 var $179=(($178+140)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($180|0)==15;
 if($181){label=24;break;}else{label=25;break;}
 case 24: 
 var $183=$2;
 _set_type($183,25968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 25: 
 var $185=$2;
 _set_type($185,24384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $193=$mod;
 var $194=_instrument_init($193);
 var $195=($194|0)<0;
 if($195){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=79;break;
 case 34: 
 $i=0;
 label=35;break;
 case 35: 
 var $199=$i;
 var $200=$mod;
 var $201=(($200+140)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($199|0)<($202|0);
 if($203){label=36;break;}else{label=42;break;}
 case 36: 
 var $205=$mod;
 var $206=$i;
 var $207=_subinstrument_alloc($205,$206,1);
 var $208=($207|0)<0;
 if($208){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=79;break;
 case 38: 
 var $211=$i;
 var $212=(($ins_size+($211<<2))|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=$i;
 var $215=$mod;
 var $216=(($215+180)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+((($214)*(52))&-1))|0);
 var $219=(($218+32)|0);
 HEAP32[(($219)>>2)]=$213;
 var $220=$i;
 var $221=(($ins+((($220)*(30))&-1))|0);
 var $222=(($221+26)|0);
 var $223=HEAP16[(($222)>>1)];
 var $224=($223&65535);
 var $225=$i;
 var $226=$mod;
 var $227=(($226+180)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+((($225)*(52))&-1))|0);
 var $230=(($229+36)|0);
 HEAP32[(($230)>>2)]=$224;
 var $231=$i;
 var $232=$mod;
 var $233=(($232+180)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+((($231)*(52))&-1))|0);
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$i;
 var $239=(($ins+((($238)*(30))&-1))|0);
 var $240=(($239+28)|0);
 var $241=HEAP16[(($240)>>1)];
 var $242=($241&65535);
 var $243=($242<<1);
 var $244=((($237)+($243))|0);
 var $245=$i;
 var $246=$mod;
 var $247=(($246+180)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+((($245)*(52))&-1))|0);
 var $250=(($249+40)|0);
 HEAP32[(($250)>>2)]=$244;
 var $251=$i;
 var $252=(($ins+((($251)*(30))&-1))|0);
 var $253=(($252+28)|0);
 var $254=HEAP16[(($253)>>1)];
 var $255=($254&65535);
 var $256=($255|0)>1;
 var $257=($256?2:0);
 var $258=$i;
 var $259=$mod;
 var $260=(($259+180)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=(($261+((($258)*(52))&-1))|0);
 var $263=(($262+44)|0);
 HEAP32[(($263)>>2)]=$257;
 var $264=$i;
 var $265=$mod;
 var $266=(($265+176)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($267+((($264)*(764))&-1))|0);
 var $269=(($268+36)|0);
 HEAP32[(($269)>>2)]=1;
 var $270=$i;
 var $271=(($ins+((($270)*(30))&-1))|0);
 var $272=(($271+25)|0);
 var $273=HEAP8[($272)];
 var $274=($273&255);
 var $275=$i;
 var $276=$mod;
 var $277=(($276+176)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($278+((($275)*(764))&-1))|0);
 var $280=(($279+756)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($281)|0);
 var $283=(($282)|0);
 HEAP32[(($283)>>2)]=$274;
 var $284=$i;
 var $285=(($ins+((($284)*(30))&-1))|0);
 var $286=(($285+24)|0);
 var $287=HEAP8[($286)];
 var $288=($287&255);
 var $289=$288<<4;
 var $290=(($289)&255);
 var $291=(($290<<24)>>24);
 var $292=$i;
 var $293=$mod;
 var $294=(($293+176)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=(($295+((($292)*(764))&-1))|0);
 var $297=(($296+756)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=(($298)|0);
 var $300=(($299+16)|0);
 HEAP32[(($300)>>2)]=$291;
 var $301=$i;
 var $302=$mod;
 var $303=(($302+176)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(($304+((($301)*(764))&-1))|0);
 var $306=(($305+756)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(($307)|0);
 var $309=(($308+8)|0);
 HEAP32[(($309)>>2)]=128;
 var $310=$i;
 var $311=$i;
 var $312=$mod;
 var $313=(($312+176)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=(($314+((($311)*(764))&-1))|0);
 var $316=(($315+756)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(($317)|0);
 var $319=(($318+40)|0);
 HEAP32[(($319)>>2)]=$310;
 var $320=$mod;
 var $321=$i;
 var $322=$i;
 var $323=(($ins+((($322)*(30))&-1))|0);
 var $324=(($323)|0);
 var $325=(($324)|0);
 var $326=_instrument_name($320,$321,$325,22);
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $330=$i;
 var $331=((($330)+(1))|0);
 $i=$331;
 label=35;break;
 case 42: 
 var $333=$mod;
 var $334=_pattern_init($333);
 var $335=($334|0)<0;
 if($335){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=79;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 $i=0;
 label=47;break;
 case 47: 
 var $341=$i;
 var $342=$mod;
 var $343=(($342+128)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=($341|0)<($344|0);
 if($345){label=48;break;}else{label=68;break;}
 case 48: 
 var $347=$mod;
 var $348=$i;
 var $349=_pattern_tracks_alloc($347,$348,64);
 var $350=($349|0)<0;
 if($350){label=49;break;}else{label=50;break;}
 case 49: 
 $1=-1;
 label=79;break;
 case 50: 
 $j=0;
 label=51;break;
 case 51: 
 var $354=$j;
 var $355=$mod;
 var $356=(($355+136)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=($357<<6);
 var $359=($354|0)<($358|0);
 if($359){label=52;break;}else{label=66;break;}
 case 52: 
 var $361=$j;
 var $362=$mod;
 var $363=(($362+136)|0);
 var $364=HEAP32[(($363)>>2)];
 var $365=(((($361|0))/(($364|0)))&-1);
 var $366=$j;
 var $367=$mod;
 var $368=(($367+136)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=(((($366|0))%(($369|0)))&-1);
 var $371=$i;
 var $372=$2;
 var $373=(($372)|0);
 var $374=(($373+168)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+($371<<2))|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(($377+4)|0);
 var $379=(($378+($370<<2))|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=$2;
 var $382=(($381)|0);
 var $383=(($382+172)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=(($384+($380<<2))|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386+4)|0);
 var $388=(($387+($365<<3))|0);
 $event=$388;
 var $389=(($ev)|0);
 var $390=$3;
 var $391=_hio_read($389,1,4,$390);
 var $392=(($ev)|0);
 var $393=HEAP8[($392)];
 var $394=($393&255);
 var $395=$394&15;
 var $396=$395<<8;
 var $397=(($ev+1)|0);
 var $398=HEAP8[($397)];
 var $399=($398&255);
 var $400=$396|$399;
 var $401=_period_to_note($400);
 var $402=(($401)&255);
 var $403=$event;
 var $404=(($403)|0);
 HEAP8[($404)]=$402;
 var $405=(($ev)|0);
 var $406=HEAP8[($405)];
 var $407=($406&255);
 var $408=$407&240;
 var $409=$408>>4;
 var $410=$409<<4;
 var $411=(($ev+2)|0);
 var $412=HEAP8[($411)];
 var $413=($412&255);
 var $414=$413&240;
 var $415=$414>>4;
 var $416=$410|$415;
 var $417=(($416)&255);
 var $418=$event;
 var $419=(($418+1)|0);
 HEAP8[($419)]=$417;
 var $420=(($ev+3)|0);
 var $421=HEAP8[($420)];
 var $422=$event;
 var $423=(($422+4)|0);
 HEAP8[($423)]=$421;
 var $424=(($ev+2)|0);
 var $425=HEAP8[($424)];
 var $426=($425&255);
 var $427=$426&15;
 switch(($427|0)){case 1:{ label=53;break;}case 2:{ label=54;break;}case 5:{ label=60;break;}case 6:{ label=61;break;}case 3:case 4:case 7:case 8:{ label=62;break;}default:{label=63;break;}}break;
 case 53: 
 var $429=$event;
 var $430=(($429+3)|0);
 HEAP8[($430)]=0;
 label=64;break;
 case 54: 
 var $432=$event;
 var $433=(($432+4)|0);
 var $434=HEAP8[($433)];
 var $435=($434&255);
 var $436=$435>>4;
 var $437=($436|0)!=0;
 if($437){label=55;break;}else{label=56;break;}
 case 55: 
 var $439=$event;
 var $440=(($439+3)|0);
 HEAP8[($440)]=2;
 var $441=$event;
 var $442=(($441+4)|0);
 var $443=HEAP8[($442)];
 var $444=($443&255);
 var $445=$444>>4;
 var $446=(($445)&255);
 HEAP8[($442)]=$446;
 label=59;break;
 case 56: 
 var $448=$event;
 var $449=(($448+4)|0);
 var $450=HEAP8[($449)];
 var $451=($450&255);
 var $452=$451&15;
 var $453=($452|0)!=0;
 if($453){label=57;break;}else{label=58;break;}
 case 57: 
 var $455=$event;
 var $456=(($455+3)|0);
 HEAP8[($456)]=1;
 var $457=$event;
 var $458=(($457+4)|0);
 var $459=HEAP8[($458)];
 var $460=($459&255);
 var $461=$460&15;
 var $462=(($461)&255);
 HEAP8[($458)]=$462;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 label=64;break;
 case 60: 
 var $466=$event;
 var $467=(($466+3)|0);
 HEAP8[($467)]=-95;
 label=64;break;
 case 61: 
 var $469=$event;
 var $470=(($469+3)|0);
 HEAP8[($470)]=12;
 var $471=(($ev+3)|0);
 var $472=HEAP8[($471)];
 var $473=($472&255);
 var $474=(((64)-($473))|0);
 var $475=(($474)&255);
 var $476=$event;
 var $477=(($476+4)|0);
 HEAP8[($477)]=$475;
 label=64;break;
 case 62: 
 label=63;break;
 case 63: 
 var $480=$event;
 var $481=(($480+4)|0);
 HEAP8[($481)]=0;
 var $482=$event;
 var $483=(($482+3)|0);
 HEAP8[($483)]=0;
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 var $486=$j;
 var $487=((($486)+(1))|0);
 $j=$487;
 label=51;break;
 case 66: 
 label=67;break;
 case 67: 
 var $490=$i;
 var $491=((($490)+(1))|0);
 $i=$491;
 label=47;break;
 case 68: 
 var $493=$2;
 var $494=(($493+1280)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=$495|8192;
 HEAP32[(($494)>>2)]=$496;
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 $i=0;
 label=71;break;
 case 71: 
 var $500=$i;
 var $501=$mod;
 var $502=(($501+140)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($500|0)<($503|0);
 if($504){label=72;break;}else{label=78;break;}
 case 72: 
 var $506=$i;
 var $507=$mod;
 var $508=(($507+180)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=(($509+((($506)*(52))&-1))|0);
 var $511=(($510+32)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=($512|0)<=2;
 if($513){label=73;break;}else{label=74;break;}
 case 73: 
 label=77;break;
 case 74: 
 var $516=$2;
 var $517=$3;
 var $518=$i;
 var $519=$mod;
 var $520=(($519+180)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(($521+((($518)*(52))&-1))|0);
 var $523=_load_sample($516,$517,0,$522,0);
 var $524=($523|0)<0;
 if($524){label=75;break;}else{label=76;break;}
 case 75: 
 $1=-1;
 label=79;break;
 case 76: 
 label=77;break;
 case 77: 
 var $528=$i;
 var $529=((($528)+(1))|0);
 $i=$529;
 label=71;break;
 case 78: 
 $1=0;
 label=79;break;
 case 79: 
 var $532=$1;
 STACKTOP=sp;return $532;
  default: assert(0, "bad label: " + label);
 }
}
function _st_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+688)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $pat;
 var $smp_size;
 var $mh=sp;
 var $mod_event=(sp)+(600);
 var $st=(sp)+(608);
 var $p;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_stat($5,$st);
 var $7=(($st+36)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)<600;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=72;break;
 case 3: 
 $smp_size=0;
 var $12=$2;
 var $13=$4;
 var $14=_hio_seek($12,$13,0);
 var $15=(($mh)|0);
 var $16=(($15)|0);
 var $17=$2;
 var $18=_hio_read($16,1,20,$17);
 var $19=(($mh)|0);
 var $20=(($19)|0);
 var $21=_test_name($20,20);
 var $22=($21|0)<0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=72;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=($26|0)<15;
 if($27){label=7;break;}else{label=9;break;}
 case 7: 
 var $29=$i;
 var $30=(($mh+20)|0);
 var $31=(($30+((($29)*(30))&-1))|0);
 var $32=(($31)|0);
 var $33=(($32)|0);
 var $34=$2;
 var $35=_hio_read($33,1,22,$34);
 var $36=$2;
 var $37=_hio_read16b($36);
 var $38=$i;
 var $39=(($mh+20)|0);
 var $40=(($39+((($38)*(30))&-1))|0);
 var $41=(($40+22)|0);
 HEAP16[(($41)>>1)]=$37;
 var $42=$2;
 var $43=_hio_read8($42);
 var $44=$i;
 var $45=(($mh+20)|0);
 var $46=(($45+((($44)*(30))&-1))|0);
 var $47=(($46+24)|0);
 HEAP8[($47)]=$43;
 var $48=$2;
 var $49=_hio_read8($48);
 var $50=$i;
 var $51=(($mh+20)|0);
 var $52=(($51+((($50)*(30))&-1))|0);
 var $53=(($52+25)|0);
 HEAP8[($53)]=$49;
 var $54=$2;
 var $55=_hio_read16b($54);
 var $56=$i;
 var $57=(($mh+20)|0);
 var $58=(($57+((($56)*(30))&-1))|0);
 var $59=(($58+26)|0);
 HEAP16[(($59)>>1)]=$55;
 var $60=$2;
 var $61=_hio_read16b($60);
 var $62=$i;
 var $63=(($mh+20)|0);
 var $64=(($63+((($62)*(30))&-1))|0);
 var $65=(($64+28)|0);
 HEAP16[(($65)>>1)]=$61;
 label=8;break;
 case 8: 
 var $67=$i;
 var $68=((($67)+(1))|0);
 $i=$68;
 label=6;break;
 case 9: 
 var $70=$2;
 var $71=_hio_read8($70);
 var $72=(($mh+470)|0);
 HEAP8[($72)]=$71;
 var $73=$2;
 var $74=_hio_read8($73);
 var $75=(($mh+471)|0);
 HEAP8[($75)]=$74;
 var $76=(($mh+472)|0);
 var $77=(($76)|0);
 var $78=$2;
 var $79=_hio_read($77,1,128,$78);
 $i=0;
 $pat=0;
 label=10;break;
 case 10: 
 var $81=$i;
 var $82=($81|0)<128;
 if($82){label=11;break;}else{label=17;break;}
 case 11: 
 var $84=$i;
 var $85=(($mh+472)|0);
 var $86=(($85+$84)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=($88|0)>127;
 if($89){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=72;break;
 case 13: 
 var $92=$i;
 var $93=(($mh+472)|0);
 var $94=(($93+$92)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=$pat;
 var $98=($96|0)>($97|0);
 if($98){label=14;break;}else{label=15;break;}
 case 14: 
 var $100=$i;
 var $101=(($mh+472)|0);
 var $102=(($101+$100)|0);
 var $103=HEAP8[($102)];
 var $104=($103&255);
 $pat=$104;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $107=$i;
 var $108=((($107)+(1))|0);
 $i=$108;
 label=10;break;
 case 17: 
 var $110=$pat;
 var $111=((($110)+(1))|0);
 $pat=$111;
 var $112=$pat;
 var $113=($112|0)>127;
 if($113){label=20;break;}else{label=18;break;}
 case 18: 
 var $115=(($mh+470)|0);
 var $116=HEAP8[($115)];
 var $117=($116&255);
 var $118=($117|0)==0;
 if($118){label=20;break;}else{label=19;break;}
 case 19: 
 var $120=(($mh+470)|0);
 var $121=HEAP8[($120)];
 var $122=($121&255);
 var $123=($122|0)>127;
 if($123){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=72;break;
 case 21: 
 $i=0;
 label=22;break;
 case 22: 
 var $127=$i;
 var $128=($127|0)<15;
 if($128){label=23;break;}else{label=45;break;}
 case 23: 
 var $130=$i;
 var $131=(($mh+20)|0);
 var $132=(($131+((($130)*(30))&-1))|0);
 var $133=(($132)|0);
 var $134=(($133)|0);
 var $135=_test_name($134,22);
 var $136=($135|0)<0;
 if($136){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=72;break;
 case 25: 
 var $139=$i;
 var $140=(($mh+20)|0);
 var $141=(($140+((($139)*(30))&-1))|0);
 var $142=(($141+25)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24);
 var $145=($144|0)>64;
 if($145){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=72;break;
 case 27: 
 var $148=$i;
 var $149=(($mh+20)|0);
 var $150=(($149+((($148)*(30))&-1))|0);
 var $151=(($150+24)|0);
 var $152=HEAP8[($151)];
 var $153=(($152<<24)>>24);
 var $154=($153|0)>15;
 if($154){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=72;break;
 case 29: 
 var $157=$i;
 var $158=(($mh+20)|0);
 var $159=(($158+((($157)*(30))&-1))|0);
 var $160=(($159+22)|0);
 var $161=HEAP16[(($160)>>1)];
 var $162=($161&65535);
 var $163=($162|0)>32768;
 if($163){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=72;break;
 case 31: 
 var $166=$i;
 var $167=(($mh+20)|0);
 var $168=(($167+((($166)*(30))&-1))|0);
 var $169=(($168+26)|0);
 var $170=HEAP16[(($169)>>1)];
 var $171=($170&65535);
 var $172=$171>>1;
 var $173=($172|0)>32768;
 if($173){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=72;break;
 case 33: 
 var $176=$i;
 var $177=(($mh+20)|0);
 var $178=(($177+((($176)*(30))&-1))|0);
 var $179=(($178+28)|0);
 var $180=HEAP16[(($179)>>1)];
 var $181=($180&65535);
 var $182=($181|0)>32768;
 if($182){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=72;break;
 case 35: 
 var $185=$i;
 var $186=(($mh+20)|0);
 var $187=(($186+((($185)*(30))&-1))|0);
 var $188=(($187+26)|0);
 var $189=HEAP16[(($188)>>1)];
 var $190=($189&65535);
 var $191=$190>>1;
 var $192=$i;
 var $193=(($mh+20)|0);
 var $194=(($193+((($192)*(30))&-1))|0);
 var $195=(($194+22)|0);
 var $196=HEAP16[(($195)>>1)];
 var $197=($196&65535);
 var $198=($191|0)>($197|0);
 if($198){label=36;break;}else{label=37;break;}
 case 36: 
 $1=-1;
 label=72;break;
 case 37: 
 var $201=$i;
 var $202=(($mh+20)|0);
 var $203=(($202+((($201)*(30))&-1))|0);
 var $204=(($203+22)|0);
 var $205=HEAP16[(($204)>>1)];
 var $206=($205&65535);
 var $207=($206|0)!=0;
 if($207){label=38;break;}else{label=40;break;}
 case 38: 
 var $209=$i;
 var $210=(($mh+20)|0);
 var $211=(($210+((($209)*(30))&-1))|0);
 var $212=(($211+26)|0);
 var $213=HEAP16[(($212)>>1)];
 var $214=($213&65535);
 var $215=$214>>1;
 var $216=$i;
 var $217=(($mh+20)|0);
 var $218=(($217+((($216)*(30))&-1))|0);
 var $219=(($218+22)|0);
 var $220=HEAP16[(($219)>>1)];
 var $221=($220&65535);
 var $222=($215|0)==($221|0);
 if($222){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=72;break;
 case 40: 
 var $225=$i;
 var $226=(($mh+20)|0);
 var $227=(($226+((($225)*(30))&-1))|0);
 var $228=(($227+22)|0);
 var $229=HEAP16[(($228)>>1)];
 var $230=($229&65535);
 var $231=($230|0)==0;
 if($231){label=41;break;}else{label=43;break;}
 case 41: 
 var $233=$i;
 var $234=(($mh+20)|0);
 var $235=(($234+((($233)*(30))&-1))|0);
 var $236=(($235+26)|0);
 var $237=HEAP16[(($236)>>1)];
 var $238=($237&65535);
 var $239=($238|0)>0;
 if($239){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=72;break;
 case 43: 
 var $242=$i;
 var $243=(($mh+20)|0);
 var $244=(($243+((($242)*(30))&-1))|0);
 var $245=(($244+22)|0);
 var $246=HEAP16[(($245)>>1)];
 var $247=($246&65535);
 var $248=($247<<1);
 var $249=$smp_size;
 var $250=((($249)+($248))|0);
 $smp_size=$250;
 label=44;break;
 case 44: 
 var $252=$i;
 var $253=((($252)+(1))|0);
 $i=$253;
 label=22;break;
 case 45: 
 var $255=$smp_size;
 var $256=($255|0)<8;
 if($256){label=46;break;}else{label=47;break;}
 case 46: 
 $1=-1;
 label=72;break;
 case 47: 
 var $259=(($st+36)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=$pat;
 var $262=($261<<10);
 var $263=((($262)+(600))|0);
 var $264=$smp_size;
 var $265=((($263)+($264))|0);
 var $266=($260|0)<($265|0);
 if($266){label=48;break;}else{label=49;break;}
 case 48: 
 $1=-1;
 label=72;break;
 case 49: 
 $i=0;
 label=50;break;
 case 50: 
 var $270=$i;
 var $271=$pat;
 var $272=($270|0)<($271|0);
 if($272){label=51;break;}else{label=71;break;}
 case 51: 
 $j=0;
 label=52;break;
 case 52: 
 var $275=$j;
 var $276=($275|0)<256;
 if($276){label=53;break;}else{label=69;break;}
 case 53: 
 var $278=(($mod_event)|0);
 var $279=$2;
 var $280=_hio_read($278,1,4,$279);
 var $281=(($mod_event)|0);
 var $282=HEAP8[($281)];
 var $283=($282&255);
 var $284=$283&240;
 var $285=$284>>4;
 var $286=($285|0)!=0;
 if($286){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=72;break;
 case 55: 
 var $289=(($mod_event)|0);
 var $290=HEAP8[($289)];
 var $291=($290&255);
 var $292=$291&15;
 var $293=($292<<8);
 var $294=(($mod_event+1)|0);
 var $295=HEAP8[($294)];
 var $296=($295&255);
 var $297=((($293)+($296))|0);
 $p=$297;
 var $298=$p;
 var $299=($298|0)==0;
 if($299){label=56;break;}else{label=57;break;}
 case 56: 
 label=68;break;
 case 57: 
 var $302=$p;
 var $303=($302|0)==162;
 if($303){label=58;break;}else{label=59;break;}
 case 58: 
 label=68;break;
 case 59: 
 $k=0;
 label=60;break;
 case 60: 
 var $307=$k;
 var $308=((5032+($307<<2))|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=($309|0)>=0;
 if($310){label=61;break;}else{label=65;break;}
 case 61: 
 var $312=$p;
 var $313=$k;
 var $314=((5032+($313<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($312|0)==($315|0);
 if($316){label=62;break;}else{label=63;break;}
 case 62: 
 label=65;break;
 case 63: 
 label=64;break;
 case 64: 
 var $320=$k;
 var $321=((($320)+(1))|0);
 $k=$321;
 label=60;break;
 case 65: 
 var $323=$k;
 var $324=((5032+($323<<2))|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=($325|0)<0;
 if($326){label=66;break;}else{label=67;break;}
 case 66: 
 $1=-1;
 label=72;break;
 case 67: 
 label=68;break;
 case 68: 
 var $330=$j;
 var $331=((($330)+(1))|0);
 $j=$331;
 label=52;break;
 case 69: 
 label=70;break;
 case 70: 
 var $334=$i;
 var $335=((($334)+(1))|0);
 $i=$335;
 label=50;break;
 case 71: 
 var $337=$2;
 var $338=$4;
 var $339=_hio_seek($337,$338,0);
 var $340=$2;
 var $341=$3;
 _read_title($340,$341,20);
 $1=0;
 label=72;break;
 case 72: 
 var $343=$1;
 STACKTOP=sp;return $343;
  default: assert(0, "bad label: " + label);
 }
}
function _st_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+616)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $smp_size;
 var $ev=sp;
 var $event;
 var $mh=(sp)+(8);
 var $mod_event=(sp)+(608);
 var $ust;
 var $nt;
 var $serr;
 var $modtype;
 var $fxused;
 var $pos;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $ust=1;
 $nt=0;
 $serr=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$mod;
 var $13=(($12+140)|0);
 HEAP32[(($13)>>2)]=15;
 var $14=$mod;
 var $15=(($14+140)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$mod;
 var $18=(($17+144)|0);
 HEAP32[(($18)>>2)]=$16;
 $smp_size=0;
 var $19=(($mh)|0);
 var $20=(($19)|0);
 var $21=$3;
 var $22=_hio_read($20,1,20,$21);
 $i=0;
 label=4;break;
 case 4: 
 var $24=$i;
 var $25=($24|0)<15;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=$i;
 var $28=(($mh+20)|0);
 var $29=(($28+((($27)*(30))&-1))|0);
 var $30=(($29)|0);
 var $31=(($30)|0);
 var $32=$3;
 var $33=_hio_read($31,1,22,$32);
 var $34=$3;
 var $35=_hio_read16b($34);
 var $36=$i;
 var $37=(($mh+20)|0);
 var $38=(($37+((($36)*(30))&-1))|0);
 var $39=(($38+22)|0);
 HEAP16[(($39)>>1)]=$35;
 var $40=$3;
 var $41=_hio_read8($40);
 var $42=$i;
 var $43=(($mh+20)|0);
 var $44=(($43+((($42)*(30))&-1))|0);
 var $45=(($44+24)|0);
 HEAP8[($45)]=$41;
 var $46=$3;
 var $47=_hio_read8($46);
 var $48=$i;
 var $49=(($mh+20)|0);
 var $50=(($49+((($48)*(30))&-1))|0);
 var $51=(($50+25)|0);
 HEAP8[($51)]=$47;
 var $52=$3;
 var $53=_hio_read16b($52);
 var $54=$i;
 var $55=(($mh+20)|0);
 var $56=(($55+((($54)*(30))&-1))|0);
 var $57=(($56+26)|0);
 HEAP16[(($57)>>1)]=$53;
 var $58=$3;
 var $59=_hio_read16b($58);
 var $60=$i;
 var $61=(($mh+20)|0);
 var $62=(($61+((($60)*(30))&-1))|0);
 var $63=(($62+28)|0);
 HEAP16[(($63)>>1)]=$59;
 label=6;break;
 case 6: 
 var $65=$i;
 var $66=((($65)+(1))|0);
 $i=$66;
 label=4;break;
 case 7: 
 var $68=$3;
 var $69=_hio_read8($68);
 var $70=(($mh+470)|0);
 HEAP8[($70)]=$69;
 var $71=$3;
 var $72=_hio_read8($71);
 var $73=(($mh+471)|0);
 HEAP8[($73)]=$72;
 var $74=(($mh+472)|0);
 var $75=(($74)|0);
 var $76=$3;
 var $77=_hio_read($75,1,128,$76);
 var $78=(($mh+470)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=$mod;
 var $82=(($81+156)|0);
 HEAP32[(($82)>>2)]=$80;
 var $83=(($mh+471)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=$mod;
 var $87=(($86+160)|0);
 HEAP32[(($87)>>2)]=$85;
 var $88=$mod;
 var $89=(($88+160)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)<64;
 if($91){label=8;break;}else{label=9;break;}
 case 8: 
 $ust=0;
 label=9;break;
 case 9: 
 var $94=$mod;
 var $95=(($94+952)|0);
 var $96=$95;
 var $97=(($mh+472)|0);
 var $98=$97;
 assert(128 % 1 === 0);(_memcpy($96, $98, 128)|0);
 $i=0;
 label=10;break;
 case 10: 
 var $100=$i;
 var $101=($100|0)<128;
 if($101){label=11;break;}else{label=15;break;}
 case 11: 
 var $103=$i;
 var $104=$mod;
 var $105=(($104+952)|0);
 var $106=(($105+$103)|0);
 var $107=HEAP8[($106)];
 var $108=($107&255);
 var $109=$mod;
 var $110=(($109+128)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($108|0)>($111|0);
 if($112){label=12;break;}else{label=13;break;}
 case 12: 
 var $114=$i;
 var $115=$mod;
 var $116=(($115+952)|0);
 var $117=(($116+$114)|0);
 var $118=HEAP8[($117)];
 var $119=($118&255);
 var $120=$mod;
 var $121=(($120+128)|0);
 HEAP32[(($121)>>2)]=$119;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $124=$i;
 var $125=((($124)+(1))|0);
 $i=$125;
 label=10;break;
 case 15: 
 var $127=$mod;
 var $128=(($127+128)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=((($129)+(1))|0);
 HEAP32[(($128)>>2)]=$130;
 $i=0;
 label=16;break;
 case 16: 
 var $132=$i;
 var $133=$mod;
 var $134=(($133+140)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($132|0)<($135|0);
 if($136){label=17;break;}else{label=28;break;}
 case 17: 
 var $138=$i;
 var $139=(($mh+20)|0);
 var $140=(($139+((($138)*(30))&-1))|0);
 var $141=(($140+24)|0);
 var $142=HEAP8[($141)];
 var $143=(($142<<24)>>24)!=0;
 if($143){label=18;break;}else{label=19;break;}
 case 18: 
 $ust=0;
 label=19;break;
 case 19: 
 var $146=$i;
 var $147=(($mh+20)|0);
 var $148=(($147+((($146)*(30))&-1))|0);
 var $149=(($148+22)|0);
 var $150=HEAP16[(($149)>>1)];
 var $151=($150&65535);
 var $152=($151|0)==0;
 if($152){label=20;break;}else{label=22;break;}
 case 20: 
 var $154=$i;
 var $155=(($mh+20)|0);
 var $156=(($155+((($154)*(30))&-1))|0);
 var $157=(($156+28)|0);
 var $158=HEAP16[(($157)>>1)];
 var $159=($158&65535);
 var $160=($159|0)==1;
 if($160){label=21;break;}else{label=22;break;}
 case 21: 
 $nt=1;
 label=22;break;
 case 22: 
 var $163=$i;
 var $164=(($mh+20)|0);
 var $165=(($164+((($163)*(30))&-1))|0);
 var $166=(($165+22)|0);
 var $167=HEAP16[(($166)>>1)];
 var $168=($167&65535);
 var $169=($168|0)>4999;
 if($169){label=25;break;}else{label=23;break;}
 case 23: 
 var $171=$i;
 var $172=(($mh+20)|0);
 var $173=(($172+((($171)*(30))&-1))|0);
 var $174=(($173+26)|0);
 var $175=HEAP16[(($174)>>1)];
 var $176=($175&65535);
 var $177=($176|0)>9999;
 if($177){label=25;break;}else{label=24;break;}
 case 24: 
 var $179=$i;
 var $180=(($mh+20)|0);
 var $181=(($180+((($179)*(30))&-1))|0);
 var $182=(($181+28)|0);
 var $183=HEAP16[(($182)>>1)];
 var $184=($183&65535);
 var $185=($184|0)>4999;
 if($185){label=25;break;}else{label=26;break;}
 case 25: 
 $ust=0;
 label=26;break;
 case 26: 
 var $188=$i;
 var $189=(($mh+20)|0);
 var $190=(($189+((($188)*(30))&-1))|0);
 var $191=(($190+22)|0);
 var $192=HEAP16[(($191)>>1)];
 var $193=($192&65535);
 var $194=($193<<1);
 var $195=$smp_size;
 var $196=((($195)+($194))|0);
 $smp_size=$196;
 label=27;break;
 case 27: 
 var $198=$i;
 var $199=((($198)+(1))|0);
 $i=$199;
 label=16;break;
 case 28: 
 var $201=$mod;
 var $202=_instrument_init($201);
 var $203=($202|0)<0;
 if($203){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=143;break;
 case 30: 
 $i=0;
 label=31;break;
 case 31: 
 var $207=$i;
 var $208=$mod;
 var $209=(($208+140)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($207|0)<($210|0);
 if($211){label=32;break;}else{label=38;break;}
 case 32: 
 var $213=$mod;
 var $214=$i;
 var $215=_subinstrument_alloc($213,$214,1);
 var $216=($215|0)<0;
 if($216){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=143;break;
 case 34: 
 var $219=$i;
 var $220=(($mh+20)|0);
 var $221=(($220+((($219)*(30))&-1))|0);
 var $222=(($221+22)|0);
 var $223=HEAP16[(($222)>>1)];
 var $224=($223&65535);
 var $225=($224<<1);
 var $226=$i;
 var $227=$mod;
 var $228=(($227+180)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+((($226)*(52))&-1))|0);
 var $231=(($230+32)|0);
 HEAP32[(($231)>>2)]=$225;
 var $232=$i;
 var $233=(($mh+20)|0);
 var $234=(($233+((($232)*(30))&-1))|0);
 var $235=(($234+26)|0);
 var $236=HEAP16[(($235)>>1)];
 var $237=($236&65535);
 var $238=$i;
 var $239=$mod;
 var $240=(($239+180)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($241+((($238)*(52))&-1))|0);
 var $243=(($242+36)|0);
 HEAP32[(($243)>>2)]=$237;
 var $244=$i;
 var $245=$mod;
 var $246=(($245+180)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+((($244)*(52))&-1))|0);
 var $249=(($248+36)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=$i;
 var $252=(($mh+20)|0);
 var $253=(($252+((($251)*(30))&-1))|0);
 var $254=(($253+28)|0);
 var $255=HEAP16[(($254)>>1)];
 var $256=($255&65535);
 var $257=($256<<1);
 var $258=((($250)+($257))|0);
 var $259=$i;
 var $260=$mod;
 var $261=(($260+180)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262+((($259)*(52))&-1))|0);
 var $264=(($263+40)|0);
 HEAP32[(($264)>>2)]=$258;
 var $265=$i;
 var $266=(($mh+20)|0);
 var $267=(($266+((($265)*(30))&-1))|0);
 var $268=(($267+28)|0);
 var $269=HEAP16[(($268)>>1)];
 var $270=($269&65535);
 var $271=($270|0)>1;
 var $272=($271?2:0);
 var $273=$i;
 var $274=$mod;
 var $275=(($274+180)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($276+((($273)*(52))&-1))|0);
 var $278=(($277+44)|0);
 HEAP32[(($278)>>2)]=$272;
 var $279=$i;
 var $280=(($mh+20)|0);
 var $281=(($280+((($279)*(30))&-1))|0);
 var $282=(($281+24)|0);
 var $283=HEAP8[($282)];
 var $284=(($283<<24)>>24);
 var $285=$284<<4;
 var $286=(($285)&255);
 var $287=(($286<<24)>>24);
 var $288=$i;
 var $289=$mod;
 var $290=(($289+176)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+((($288)*(764))&-1))|0);
 var $293=(($292+756)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=(($294)|0);
 var $296=(($295+16)|0);
 HEAP32[(($296)>>2)]=$287;
 var $297=$i;
 var $298=(($mh+20)|0);
 var $299=(($298+((($297)*(30))&-1))|0);
 var $300=(($299+25)|0);
 var $301=HEAP8[($300)];
 var $302=(($301<<24)>>24);
 var $303=$i;
 var $304=$mod;
 var $305=(($304+176)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=(($306+((($303)*(764))&-1))|0);
 var $308=(($307+756)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(($309)|0);
 var $311=(($310)|0);
 HEAP32[(($311)>>2)]=$302;
 var $312=$i;
 var $313=$mod;
 var $314=(($313+176)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=(($315+((($312)*(764))&-1))|0);
 var $317=(($316+756)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=(($318)|0);
 var $320=(($319+8)|0);
 HEAP32[(($320)>>2)]=128;
 var $321=$i;
 var $322=$i;
 var $323=$mod;
 var $324=(($323+176)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=(($325+((($322)*(764))&-1))|0);
 var $327=(($326+756)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($328)|0);
 var $330=(($329+40)|0);
 HEAP32[(($330)>>2)]=$321;
 var $331=$i;
 var $332=$mod;
 var $333=(($332+176)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334+((($331)*(764))&-1))|0);
 var $336=(($335)|0);
 var $337=(($336)|0);
 var $338=$i;
 var $339=(($mh+20)|0);
 var $340=(($339+((($338)*(30))&-1))|0);
 var $341=(($340)|0);
 var $342=(($341)|0);
 var $343=_strlcpy($337,$342,22);
 var $344=$i;
 var $345=$mod;
 var $346=(($345+176)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=(($347+((($344)*(764))&-1))|0);
 var $349=(($348)|0);
 var $350=(($349)|0);
 var $351=_str_adj($350);
 var $352=$i;
 var $353=$mod;
 var $354=(($353+180)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+((($352)*(52))&-1))|0);
 var $357=(($356+32)|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=($358|0)>0;
 if($359){label=35;break;}else{label=36;break;}
 case 35: 
 var $361=$i;
 var $362=$mod;
 var $363=(($362+176)|0);
 var $364=HEAP32[(($363)>>2)];
 var $365=(($364+((($361)*(764))&-1))|0);
 var $366=(($365+36)|0);
 HEAP32[(($366)>>2)]=1;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $369=$i;
 var $370=((($369)+(1))|0);
 $i=$370;
 label=31;break;
 case 38: 
 var $372=$mod;
 var $373=(($372+136)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=$mod;
 var $376=(($375+128)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(Math_imul($374,$377)|0);
 var $379=$mod;
 var $380=(($379+132)|0);
 HEAP32[(($380)>>2)]=$378;
 var $381=$mod;
 var $382=(($381)|0);
 var $383=(($382)|0);
 var $384=(($mh)|0);
 var $385=(($384)|0);
 var $386=_strlcpy($383,$385,20);
 $fxused=0;
 var $387=$3;
 var $388=_hio_tell($387);
 $pos=$388;
 $i=0;
 label=39;break;
 case 39: 
 var $390=$i;
 var $391=$mod;
 var $392=(($391+128)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=($390|0)<($393|0);
 if($394){label=40;break;}else{label=64;break;}
 case 40: 
 $j=0;
 label=41;break;
 case 41: 
 var $397=$j;
 var $398=$mod;
 var $399=(($398+136)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=($400<<6);
 var $402=($397|0)<($401|0);
 if($402){label=42;break;}else{label=62;break;}
 case 42: 
 var $404=(($mod_event)|0);
 var $405=$3;
 var $406=_hio_read($404,1,4,$405);
 var $407=(($mod_event)|0);
 _decode_protracker_event($ev,$407);
 var $408=(($ev+3)|0);
 var $409=HEAP8[($408)];
 var $410=(($409<<24)>>24)!=0;
 if($410){label=43;break;}else{label=44;break;}
 case 43: 
 var $412=(($ev+3)|0);
 var $413=HEAP8[($412)];
 var $414=($413&255);
 var $415=1<<$414;
 var $416=$fxused;
 var $417=$416|$415;
 $fxused=$417;
 label=47;break;
 case 44: 
 var $419=(($ev+4)|0);
 var $420=HEAP8[($419)];
 var $421=(($420<<24)>>24)!=0;
 if($421){label=45;break;}else{label=46;break;}
 case 45: 
 var $423=$fxused;
 var $424=$423|1;
 $fxused=$424;
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $427=(($ev+3)|0);
 var $428=HEAP8[($427)];
 var $429=($428&255);
 var $430=($429|0)!=0;
 if($430){label=48;break;}else{label=51;break;}
 case 48: 
 var $432=(($ev+3)|0);
 var $433=HEAP8[($432)];
 var $434=($433&255);
 var $435=($434|0)!=1;
 if($435){label=49;break;}else{label=51;break;}
 case 49: 
 var $437=(($ev+3)|0);
 var $438=HEAP8[($437)];
 var $439=($438&255);
 var $440=($439|0)!=2;
 if($440){label=50;break;}else{label=51;break;}
 case 50: 
 $ust=0;
 label=51;break;
 case 51: 
 var $443=(($ev+3)|0);
 var $444=HEAP8[($443)];
 var $445=($444&255);
 var $446=($445|0)==1;
 if($446){label=52;break;}else{label=55;break;}
 case 52: 
 var $448=(($ev+4)|0);
 var $449=HEAP8[($448)];
 var $450=($449&255);
 var $451=($450|0)==0;
 if($451){label=53;break;}else{label=54;break;}
 case 53: 
 $ust=0;
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 var $455=(($ev+3)|0);
 var $456=HEAP8[($455)];
 var $457=($456&255);
 var $458=($457|0)==2;
 if($458){label=56;break;}else{label=60;break;}
 case 56: 
 var $460=(($ev+4)|0);
 var $461=HEAP8[($460)];
 var $462=($461&255);
 var $463=$462&15;
 var $464=($463|0)!=0;
 if($464){label=57;break;}else{label=59;break;}
 case 57: 
 var $466=(($ev+4)|0);
 var $467=HEAP8[($466)];
 var $468=($467&255);
 var $469=$468&240;
 var $470=($469|0)!=0;
 if($470){label=58;break;}else{label=59;break;}
 case 58: 
 $ust=0;
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 var $475=$j;
 var $476=((($475)+(1))|0);
 $j=$476;
 label=41;break;
 case 62: 
 label=63;break;
 case 63: 
 var $479=$i;
 var $480=((($479)+(1))|0);
 $i=$480;
 label=39;break;
 case 64: 
 var $482=$fxused;
 var $483=$482&-7;
 var $484=($483|0)!=0;
 if($484){label=65;break;}else{label=66;break;}
 case 65: 
 $ust=0;
 label=66;break;
 case 66: 
 var $487=$ust;
 var $488=($487|0)!=0;
 if($488){label=67;break;}else{label=68;break;}
 case 67: 
 $modtype=25928;
 label=75;break;
 case 68: 
 var $491=$fxused;
 var $492=$491&-53256;
 var $493=($492|0)==0;
 if($493){label=69;break;}else{label=70;break;}
 case 69: 
 $modtype=24352;
 label=74;break;
 case 70: 
 var $496=$fxused;
 var $497=$496&-63496;
 var $498=($497|0)==0;
 if($498){label=71;break;}else{label=72;break;}
 case 71: 
 $modtype=23456;
 label=73;break;
 case 72: 
 $modtype=22760;
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 var $504=$mod;
 var $505=(($504+64)|0);
 var $506=(($505)|0);
 var $507=$modtype;
 var $508=_snprintf($506,64,22008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$507,tempVarArgs)); STACKTOP=tempVarArgs;
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 label=79;break;
 case 79: 
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 var $515=$serr;
 var $516=($515|0)!=0;
 if($516){label=82;break;}else{label=85;break;}
 case 82: 
 label=83;break;
 case 83: 
 label=84;break;
 case 84: 
 label=85;break;
 case 85: 
 var $521=$3;
 var $522=$4;
 var $523=$pos;
 var $524=((($522)+($523))|0);
 var $525=_hio_seek($521,$524,0);
 var $526=$mod;
 var $527=_pattern_init($526);
 var $528=($527|0)<0;
 if($528){label=86;break;}else{label=87;break;}
 case 86: 
 $1=-1;
 label=143;break;
 case 87: 
 label=88;break;
 case 88: 
 label=89;break;
 case 89: 
 $i=0;
 label=90;break;
 case 90: 
 var $534=$i;
 var $535=$mod;
 var $536=(($535+128)|0);
 var $537=HEAP32[(($536)>>2)];
 var $538=($534|0)<($537|0);
 if($538){label=91;break;}else{label=99;break;}
 case 91: 
 var $540=$mod;
 var $541=$i;
 var $542=_pattern_tracks_alloc($540,$541,64);
 var $543=($542|0)<0;
 if($543){label=92;break;}else{label=93;break;}
 case 92: 
 $1=-1;
 label=143;break;
 case 93: 
 $j=0;
 label=94;break;
 case 94: 
 var $547=$j;
 var $548=$mod;
 var $549=(($548+136)|0);
 var $550=HEAP32[(($549)>>2)];
 var $551=($550<<6);
 var $552=($547|0)<($551|0);
 if($552){label=95;break;}else{label=97;break;}
 case 95: 
 var $554=$j;
 var $555=$mod;
 var $556=(($555+136)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=(((($554|0))/(($557|0)))&-1);
 var $559=$j;
 var $560=$mod;
 var $561=(($560+136)|0);
 var $562=HEAP32[(($561)>>2)];
 var $563=(((($559|0))%(($562|0)))&-1);
 var $564=$i;
 var $565=$2;
 var $566=(($565)|0);
 var $567=(($566+168)|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=(($568+($564<<2))|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=(($570+4)|0);
 var $572=(($571+($563<<2))|0);
 var $573=HEAP32[(($572)>>2)];
 var $574=$2;
 var $575=(($574)|0);
 var $576=(($575+172)|0);
 var $577=HEAP32[(($576)>>2)];
 var $578=(($577+($573<<2))|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=(($579+4)|0);
 var $581=(($580+($558<<3))|0);
 $event=$581;
 var $582=(($mod_event)|0);
 var $583=$3;
 var $584=_hio_read($582,1,4,$583);
 var $585=$event;
 var $586=(($mod_event)|0);
 _decode_protracker_event($585,$586);
 label=96;break;
 case 96: 
 var $588=$j;
 var $589=((($588)+(1))|0);
 $j=$589;
 label=94;break;
 case 97: 
 label=98;break;
 case 98: 
 var $592=$i;
 var $593=((($592)+(1))|0);
 $i=$593;
 label=90;break;
 case 99: 
 $i=0;
 label=100;break;
 case 100: 
 var $596=$i;
 var $597=$mod;
 var $598=(($597+140)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=($596|0)<($599|0);
 if($600){label=101;break;}else{label=105;break;}
 case 101: 
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 label=104;break;
 case 104: 
 var $605=$i;
 var $606=((($605)+(1))|0);
 $i=$606;
 label=100;break;
 case 105: 
 var $608=$2;
 var $609=(($608+1280)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=$610|8192;
 HEAP32[(($609)>>2)]=$611;
 var $612=$ust;
 var $613=($612|0)!=0;
 if($613){label=106;break;}else{label=129;break;}
 case 106: 
 var $615=$mod;
 var $616=(($615+160)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=$mod;
 var $619=(($618+152)|0);
 HEAP32[(($619)>>2)]=$617;
 var $620=$mod;
 var $621=(($620+160)|0);
 HEAP32[(($621)>>2)]=0;
 $i=0;
 label=107;break;
 case 107: 
 var $623=$i;
 var $624=$mod;
 var $625=(($624+140)|0);
 var $626=HEAP32[(($625)>>2)];
 var $627=($623|0)<($626|0);
 if($627){label=108;break;}else{label=110;break;}
 case 108: 
 label=109;break;
 case 109: 
 var $630=$i;
 var $631=((($630)+(1))|0);
 $i=$631;
 label=107;break;
 case 110: 
 $i=0;
 label=111;break;
 case 111: 
 var $634=$i;
 var $635=$mod;
 var $636=(($635+128)|0);
 var $637=HEAP32[(($636)>>2)];
 var $638=($634|0)<($637|0);
 if($638){label=112;break;}else{label=128;break;}
 case 112: 
 $j=0;
 label=113;break;
 case 113: 
 var $641=$j;
 var $642=$mod;
 var $643=(($642+136)|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=($644<<6);
 var $646=($641|0)<($645|0);
 if($646){label=114;break;}else{label=126;break;}
 case 114: 
 var $648=$j;
 var $649=$mod;
 var $650=(($649+136)|0);
 var $651=HEAP32[(($650)>>2)];
 var $652=(((($648|0))/(($651|0)))&-1);
 var $653=$j;
 var $654=$mod;
 var $655=(($654+136)|0);
 var $656=HEAP32[(($655)>>2)];
 var $657=(((($653|0))%(($656|0)))&-1);
 var $658=$i;
 var $659=$2;
 var $660=(($659)|0);
 var $661=(($660+168)|0);
 var $662=HEAP32[(($661)>>2)];
 var $663=(($662+($658<<2))|0);
 var $664=HEAP32[(($663)>>2)];
 var $665=(($664+4)|0);
 var $666=(($665+($657<<2))|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$2;
 var $669=(($668)|0);
 var $670=(($669+172)|0);
 var $671=HEAP32[(($670)>>2)];
 var $672=(($671+($667<<2))|0);
 var $673=HEAP32[(($672)>>2)];
 var $674=(($673+4)|0);
 var $675=(($674+($652<<3))|0);
 $event=$675;
 var $676=$event;
 var $677=(($676+3)|0);
 var $678=HEAP8[($677)];
 var $679=($678&255);
 var $680=($679|0)==1;
 if($680){label=115;break;}else{label=116;break;}
 case 115: 
 var $682=$event;
 var $683=(($682+3)|0);
 HEAP8[($683)]=0;
 label=124;break;
 case 116: 
 var $685=$event;
 var $686=(($685+3)|0);
 var $687=HEAP8[($686)];
 var $688=($687&255);
 var $689=($688|0)==2;
 if($689){label=117;break;}else{label=119;break;}
 case 117: 
 var $691=$event;
 var $692=(($691+4)|0);
 var $693=HEAP8[($692)];
 var $694=($693&255);
 var $695=$694&240;
 var $696=($695|0)==0;
 if($696){label=118;break;}else{label=119;break;}
 case 118: 
 var $698=$event;
 var $699=(($698+3)|0);
 HEAP8[($699)]=1;
 label=123;break;
 case 119: 
 var $701=$event;
 var $702=(($701+3)|0);
 var $703=HEAP8[($702)];
 var $704=($703&255);
 var $705=($704|0)==2;
 if($705){label=120;break;}else{label=122;break;}
 case 120: 
 var $707=$event;
 var $708=(($707+4)|0);
 var $709=HEAP8[($708)];
 var $710=($709&255);
 var $711=$710&15;
 var $712=($711|0)==0;
 if($712){label=121;break;}else{label=122;break;}
 case 121: 
 var $714=$event;
 var $715=(($714+4)|0);
 var $716=HEAP8[($715)];
 var $717=($716&255);
 var $718=$717>>4;
 var $719=(($718)&255);
 HEAP8[($715)]=$719;
 label=122;break;
 case 122: 
 label=123;break;
 case 123: 
 label=124;break;
 case 124: 
 label=125;break;
 case 125: 
 var $724=$j;
 var $725=((($724)+(1))|0);
 $j=$725;
 label=113;break;
 case 126: 
 label=127;break;
 case 127: 
 var $728=$i;
 var $729=((($728)+(1))|0);
 $i=$729;
 label=111;break;
 case 128: 
 label=132;break;
 case 129: 
 var $732=$mod;
 var $733=(($732+160)|0);
 var $734=HEAP32[(($733)>>2)];
 var $735=$mod;
 var $736=(($735+156)|0);
 var $737=HEAP32[(($736)>>2)];
 var $738=($734|0)>=($737|0);
 if($738){label=130;break;}else{label=131;break;}
 case 130: 
 var $740=$mod;
 var $741=(($740+160)|0);
 HEAP32[(($741)>>2)]=0;
 label=131;break;
 case 131: 
 label=132;break;
 case 132: 
 label=133;break;
 case 133: 
 label=134;break;
 case 134: 
 $i=0;
 label=135;break;
 case 135: 
 var $747=$i;
 var $748=$mod;
 var $749=(($748+144)|0);
 var $750=HEAP32[(($749)>>2)];
 var $751=($747|0)<($750|0);
 if($751){label=136;break;}else{label=142;break;}
 case 136: 
 var $753=$i;
 var $754=$mod;
 var $755=(($754+180)|0);
 var $756=HEAP32[(($755)>>2)];
 var $757=(($756+((($753)*(52))&-1))|0);
 var $758=(($757+32)|0);
 var $759=HEAP32[(($758)>>2)];
 var $760=($759|0)!=0;
 if($760){label=138;break;}else{label=137;break;}
 case 137: 
 label=141;break;
 case 138: 
 var $763=$2;
 var $764=$3;
 var $765=$i;
 var $766=$mod;
 var $767=(($766+180)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($768+((($765)*(52))&-1))|0);
 var $770=_load_sample($763,$764,512,$769,0);
 var $771=($770|0)<0;
 if($771){label=139;break;}else{label=140;break;}
 case 139: 
 $1=-1;
 label=143;break;
 case 140: 
 label=141;break;
 case 141: 
 var $775=$i;
 var $776=((($775)+(1))|0);
 $i=$776;
 label=135;break;
 case 142: 
 $1=0;
 label=143;break;
 case 143: 
 var $779=$1;
 STACKTOP=sp;return $779;
  default: assert(0, "bad label: " + label);
 }
}
function _stim_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=_hio_read32b($5);
 var $7=($6|0)!=1398032717;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 _read_title($10,$11,0);
 $1=0;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _stim_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+416)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $event;
 var $sh=sp;
 var $si=(sp)+(408);
 var $b1;
 var $b2;
 var $b3;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_read32b($12);
 var $14=(($sh)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$3;
 var $16=_hio_read32b($15);
 var $17=(($sh+4)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=$3;
 var $19=_hio_read32b($18);
 var $20=$3;
 var $21=_hio_read32b($20);
 var $22=$3;
 var $23=_hio_read16b($22);
 var $24=(($sh+16)|0);
 HEAP16[(($24)>>1)]=$23;
 var $25=$3;
 var $26=_hio_read16b($25);
 var $27=(($sh+18)|0);
 HEAP16[(($27)>>1)]=$26;
 var $28=$3;
 var $29=_hio_read16b($28);
 var $30=(($sh+20)|0);
 HEAP16[(($30)>>1)]=$29;
 var $31=(($sh+22)|0);
 var $32=$31;
 var $33=$3;
 var $34=_hio_read($32,128,1,$33);
 $i=0;
 label=4;break;
 case 4: 
 var $36=$i;
 var $37=($36|0)<64;
 if($37){label=5;break;}else{label=7;break;}
 case 5: 
 var $39=$3;
 var $40=_hio_read32b($39);
 var $41=((($40)+(12))|0);
 var $42=$i;
 var $43=(($sh+152)|0);
 var $44=(($43+($42<<2))|0);
 HEAP32[(($44)>>2)]=$41;
 label=6;break;
 case 6: 
 var $46=$i;
 var $47=((($46)+(1))|0);
 $i=$47;
 label=4;break;
 case 7: 
 var $49=(($sh+18)|0);
 var $50=HEAP16[(($49)>>1)];
 var $51=($50&65535);
 var $52=$mod;
 var $53=(($52+156)|0);
 HEAP32[(($53)>>2)]=$51;
 var $54=(($sh+20)|0);
 var $55=HEAP16[(($54)>>1)];
 var $56=($55&65535);
 var $57=$mod;
 var $58=(($57+128)|0);
 HEAP32[(($58)>>2)]=$56;
 var $59=(($sh+16)|0);
 var $60=HEAP16[(($59)>>1)];
 var $61=($60&65535);
 var $62=$mod;
 var $63=(($62+140)|0);
 HEAP32[(($63)>>2)]=$61;
 var $64=$mod;
 var $65=(($64+140)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$mod;
 var $68=(($67+144)|0);
 HEAP32[(($68)>>2)]=$66;
 var $69=$mod;
 var $70=(($69+128)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$mod;
 var $73=(($72+136)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(Math_imul($71,$74)|0);
 var $76=$mod;
 var $77=(($76+132)|0);
 HEAP32[(($77)>>2)]=$75;
 $i=0;
 label=8;break;
 case 8: 
 var $79=$i;
 var $80=$mod;
 var $81=(($80+156)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($79|0)<($82|0);
 if($83){label=9;break;}else{label=11;break;}
 case 9: 
 var $85=$i;
 var $86=(($sh+22)|0);
 var $87=(($86+$85)|0);
 var $88=HEAP8[($87)];
 var $89=$i;
 var $90=$mod;
 var $91=(($90+952)|0);
 var $92=(($91+$89)|0);
 HEAP8[($92)]=$88;
 label=10;break;
 case 10: 
 var $94=$i;
 var $95=((($94)+(1))|0);
 $i=$95;
 label=8;break;
 case 11: 
 var $97=$2;
 _set_type($97,21744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $104=$mod;
 var $105=_pattern_init($104);
 var $106=($105|0)<0;
 if($106){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=58;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 $i=0;
 label=22;break;
 case 22: 
 var $112=$i;
 var $113=$mod;
 var $114=(($113+128)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($112|0)<($115|0);
 if($116){label=23;break;}else{label=39;break;}
 case 23: 
 var $118=$mod;
 var $119=$i;
 var $120=_pattern_tracks_alloc($118,$119,64);
 var $121=($120|0)<0;
 if($121){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=58;break;
 case 25: 
 var $124=$3;
 var $125=$4;
 var $126=$i;
 var $127=(($sh+152)|0);
 var $128=(($127+($126<<2))|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=((($125)+($129))|0);
 var $131=((($130)+(8))|0);
 var $132=_hio_seek($124,$131,0);
 $j=0;
 label=26;break;
 case 26: 
 var $134=$j;
 var $135=($134|0)<4;
 if($135){label=27;break;}else{label=37;break;}
 case 27: 
 $k=0;
 label=28;break;
 case 28: 
 var $138=$k;
 var $139=($138|0)<64;
 if($139){label=29;break;}else{label=35;break;}
 case 29: 
 var $141=$k;
 var $142=$j;
 var $143=$i;
 var $144=$2;
 var $145=(($144)|0);
 var $146=(($145+168)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+($143<<2))|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+4)|0);
 var $151=(($150+($142<<2))|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$2;
 var $154=(($153)|0);
 var $155=(($154+172)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+($152<<2))|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+4)|0);
 var $160=(($159+($141<<3))|0);
 $event=$160;
 var $161=$3;
 var $162=_hio_read8($161);
 $b1=$162;
 var $163=$b1;
 var $164=($163&255);
 var $165=$164&128;
 var $166=($165|0)!=0;
 if($166){label=30;break;}else{label=31;break;}
 case 30: 
 var $168=$b1;
 var $169=($168&255);
 var $170=$169&127;
 var $171=$k;
 var $172=((($171)+($170))|0);
 $k=$172;
 label=34;break;
 case 31: 
 var $174=$3;
 var $175=_hio_read8($174);
 $b2=$175;
 var $176=$3;
 var $177=_hio_read8($176);
 $b3=$177;
 var $178=$b2;
 var $179=($178&255);
 var $180=$179&63;
 var $181=(($180)&255);
 var $182=$event;
 var $183=(($182)|0);
 HEAP8[($183)]=$181;
 var $184=($181&255);
 var $185=($184|0)!=0;
 if($185){label=32;break;}else{label=33;break;}
 case 32: 
 var $187=$event;
 var $188=(($187)|0);
 var $189=HEAP8[($188)];
 var $190=($189&255);
 var $191=((($190)+(47))|0);
 var $192=(($191)&255);
 HEAP8[($188)]=$192;
 label=33;break;
 case 33: 
 var $194=$b1;
 var $195=($194&255);
 var $196=$195&31;
 var $197=(($196)&255);
 var $198=$event;
 var $199=(($198+1)|0);
 HEAP8[($199)]=$197;
 var $200=$b2;
 var $201=($200&255);
 var $202=$201>>4;
 var $203=$202&12;
 var $204=$b1;
 var $205=($204&255);
 var $206=$205>>5;
 var $207=$203|$206;
 var $208=(($207)&255);
 var $209=$event;
 var $210=(($209+3)|0);
 HEAP8[($210)]=$208;
 var $211=$b3;
 var $212=$event;
 var $213=(($212+4)|0);
 HEAP8[($213)]=$211;
 var $214=$event;
 _disable_continue_fx($214);
 label=34;break;
 case 34: 
 var $216=$k;
 var $217=((($216)+(1))|0);
 $k=$217;
 label=28;break;
 case 35: 
 label=36;break;
 case 36: 
 var $220=$j;
 var $221=((($220)+(1))|0);
 $j=$221;
 label=26;break;
 case 37: 
 label=38;break;
 case 38: 
 var $224=$i;
 var $225=((($224)+(1))|0);
 $i=$225;
 label=22;break;
 case 39: 
 var $227=$mod;
 var $228=_instrument_init($227);
 var $229=($228|0)<0;
 if($229){label=40;break;}else{label=41;break;}
 case 40: 
 $1=-1;
 label=58;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $234=$3;
 var $235=$4;
 var $236=(($sh+4)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=((($235)+($237))|0);
 var $239=$mod;
 var $240=(($239+144)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=($241<<2);
 var $243=((($238)+($242))|0);
 var $244=_hio_seek($234,$243,0);
 $i=0;
 label=44;break;
 case 44: 
 var $246=$i;
 var $247=$mod;
 var $248=(($247+144)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($246|0)<($249|0);
 if($250){label=45;break;}else{label=57;break;}
 case 45: 
 var $252=$3;
 var $253=_hio_read16b($252);
 var $254=(($si)|0);
 HEAP16[(($254)>>1)]=$253;
 var $255=$3;
 var $256=_hio_read8($255);
 var $257=(($si+2)|0);
 HEAP8[($257)]=$256;
 var $258=$3;
 var $259=_hio_read8($258);
 var $260=(($si+3)|0);
 HEAP8[($260)]=$259;
 var $261=$3;
 var $262=_hio_read16b($261);
 var $263=(($si+4)|0);
 HEAP16[(($263)>>1)]=$262;
 var $264=$3;
 var $265=_hio_read16b($264);
 var $266=(($si+6)|0);
 HEAP16[(($266)>>1)]=$265;
 var $267=$mod;
 var $268=$i;
 var $269=_subinstrument_alloc($267,$268,1);
 var $270=($269|0)<0;
 if($270){label=46;break;}else{label=47;break;}
 case 46: 
 $1=-1;
 label=58;break;
 case 47: 
 var $273=(($si)|0);
 var $274=HEAP16[(($273)>>1)];
 var $275=($274&65535);
 var $276=($275<<1);
 var $277=$i;
 var $278=$mod;
 var $279=(($278+180)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($280+((($277)*(52))&-1))|0);
 var $282=(($281+32)|0);
 HEAP32[(($282)>>2)]=$276;
 var $283=(($si+4)|0);
 var $284=HEAP16[(($283)>>1)];
 var $285=($284&65535);
 var $286=($285<<1);
 var $287=$i;
 var $288=$mod;
 var $289=(($288+180)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=(($290+((($287)*(52))&-1))|0);
 var $292=(($291+36)|0);
 HEAP32[(($292)>>2)]=$286;
 var $293=$i;
 var $294=$mod;
 var $295=(($294+180)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296+((($293)*(52))&-1))|0);
 var $298=(($297+36)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($si+6)|0);
 var $301=HEAP16[(($300)>>1)];
 var $302=($301&65535);
 var $303=($302<<1);
 var $304=((($299)+($303))|0);
 var $305=$i;
 var $306=$mod;
 var $307=(($306+180)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(($308+((($305)*(52))&-1))|0);
 var $310=(($309+40)|0);
 HEAP32[(($310)>>2)]=$304;
 var $311=(($si+6)|0);
 var $312=HEAP16[(($311)>>1)];
 var $313=($312&65535);
 var $314=($313|0)>1;
 var $315=($314?2:0);
 var $316=$i;
 var $317=$mod;
 var $318=(($317+180)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($319+((($316)*(52))&-1))|0);
 var $321=(($320+44)|0);
 HEAP32[(($321)>>2)]=$315;
 var $322=(($si+2)|0);
 var $323=HEAP8[($322)];
 var $324=($323&255);
 var $325=$324<<4;
 var $326=(($325)&255);
 var $327=(($326<<24)>>24);
 var $328=$i;
 var $329=$mod;
 var $330=(($329+176)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($331+((($328)*(764))&-1))|0);
 var $333=(($332+756)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334)|0);
 var $336=(($335+16)|0);
 HEAP32[(($336)>>2)]=$327;
 var $337=(($si+3)|0);
 var $338=HEAP8[($337)];
 var $339=($338&255);
 var $340=$i;
 var $341=$mod;
 var $342=(($341+176)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($343+((($340)*(764))&-1))|0);
 var $345=(($344+756)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($346)|0);
 var $348=(($347)|0);
 HEAP32[(($348)>>2)]=$339;
 var $349=$i;
 var $350=$mod;
 var $351=(($350+176)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=(($352+((($349)*(764))&-1))|0);
 var $354=(($353+756)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355)|0);
 var $357=(($356+8)|0);
 HEAP32[(($357)>>2)]=128;
 var $358=$i;
 var $359=$i;
 var $360=$mod;
 var $361=(($360+176)|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=(($362+((($359)*(764))&-1))|0);
 var $364=(($363+756)|0);
 var $365=HEAP32[(($364)>>2)];
 var $366=(($365)|0);
 var $367=(($366+40)|0);
 HEAP32[(($367)>>2)]=$358;
 var $368=$i;
 var $369=$mod;
 var $370=(($369+176)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=(($371+((($368)*(764))&-1))|0);
 var $373=(($372+40)|0);
 HEAP32[(($373)>>2)]=4095;
 var $374=$i;
 var $375=$mod;
 var $376=(($375+180)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(($377+((($374)*(52))&-1))|0);
 var $379=(($378+32)|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=($380|0)>0;
 if($381){label=48;break;}else{label=49;break;}
 case 48: 
 var $383=$i;
 var $384=$mod;
 var $385=(($384+176)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386+((($383)*(764))&-1))|0);
 var $388=(($387+36)|0);
 HEAP32[(($388)>>2)]=1;
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $392=$i;
 var $393=$mod;
 var $394=(($393+180)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(($395+((($392)*(52))&-1))|0);
 var $397=(($396+32)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=($398|0)!=0;
 if($399){label=53;break;}else{label=52;break;}
 case 52: 
 label=56;break;
 case 53: 
 var $402=$2;
 var $403=$3;
 var $404=$i;
 var $405=$mod;
 var $406=(($405+180)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=(($407+((($404)*(52))&-1))|0);
 var $409=_load_sample($402,$403,0,$408,0);
 var $410=($409|0)<0;
 if($410){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=58;break;
 case 55: 
 label=56;break;
 case 56: 
 var $414=$i;
 var $415=((($414)+(1))|0);
 $i=$415;
 label=44;break;
 case 57: 
 var $417=$2;
 var $418=(($417+1280)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=$419|8192;
 HEAP32[(($418)>>2)]=$420;
 $1=0;
 label=58;break;
 case 58: 
 var $422=$1;
 STACKTOP=sp;return $422;
  default: assert(0, "bad label: " + label);
 }
}
function _stm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(20))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=(($buf)|0);
 var $10=$2;
 var $11=_hio_read($9,1,8,$10);
 var $12=($11>>>0)<8;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=11;break;
 case 3: 
 var $15=(($buf)|0);
 var $16=_memcmp($15,22744,8);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=6;break;}
 case 4: 
 var $19=(($buf)|0);
 var $20=_memcmp($19,25896,8);
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=11;break;
 case 6: 
 var $24=$2;
 var $25=_hio_read8($24);
 var $26=$2;
 var $27=_hio_read8($26);
 var $28=($27&255);
 var $29=($28|0)!=2;
 if($29){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=11;break;
 case 8: 
 var $32=$2;
 var $33=_hio_read8($32);
 var $34=($33&255);
 var $35=($34|0)<1;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=11;break;
 case 10: 
 var $38=$2;
 var $39=$4;
 var $40=(($39)|0);
 var $41=_hio_seek($38,$40,0);
 var $42=$2;
 var $43=$3;
 _read_title($42,$43,20);
 $1=0;
 label=11;break;
 case 11: 
 var $45=$1;
 STACKTOP=sp;return $45;
  default: assert(0, "bad label: " + label);
 }
}
function _stm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $event;
 var $sfh=sp;
 var $b;
 var $bmod2stm;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $bmod2stm=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($sfh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,20,1,$14);
 var $16=(($sfh+20)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,8,1,$18);
 var $20=$3;
 var $21=_hio_read8($20);
 var $22=(($sfh+28)|0);
 HEAP8[($22)]=$21;
 var $23=$3;
 var $24=_hio_read8($23);
 var $25=(($sfh+29)|0);
 HEAP8[($25)]=$24;
 var $26=$3;
 var $27=_hio_read8($26);
 var $28=(($sfh+30)|0);
 HEAP8[($28)]=$27;
 var $29=$3;
 var $30=_hio_read8($29);
 var $31=(($sfh+31)|0);
 HEAP8[($31)]=$30;
 var $32=$3;
 var $33=_hio_read8($32);
 var $34=(($sfh+32)|0);
 HEAP8[($34)]=$33;
 var $35=$3;
 var $36=_hio_read8($35);
 var $37=(($sfh+33)|0);
 HEAP8[($37)]=$36;
 var $38=$3;
 var $39=_hio_read8($38);
 var $40=(($sfh+34)|0);
 HEAP8[($40)]=$39;
 var $41=(($sfh+35)|0);
 var $42=$41;
 var $43=$3;
 var $44=_hio_read($42,13,1,$43);
 $i=0;
 label=4;break;
 case 4: 
 var $46=$i;
 var $47=($46|0)<31;
 if($47){label=5;break;}else{label=7;break;}
 case 5: 
 var $49=$i;
 var $50=(($sfh+48)|0);
 var $51=(($50+((($49)*(36))&-1))|0);
 var $52=(($51)|0);
 var $53=$52;
 var $54=$3;
 var $55=_hio_read($53,12,1,$54);
 var $56=$3;
 var $57=_hio_read8($56);
 var $58=$i;
 var $59=(($sfh+48)|0);
 var $60=(($59+((($58)*(36))&-1))|0);
 var $61=(($60+12)|0);
 HEAP8[($61)]=$57;
 var $62=$3;
 var $63=_hio_read8($62);
 var $64=$i;
 var $65=(($sfh+48)|0);
 var $66=(($65+((($64)*(36))&-1))|0);
 var $67=(($66+13)|0);
 HEAP8[($67)]=$63;
 var $68=$3;
 var $69=_hio_read16l($68);
 var $70=$i;
 var $71=(($sfh+48)|0);
 var $72=(($71+((($70)*(36))&-1))|0);
 var $73=(($72+14)|0);
 HEAP16[(($73)>>1)]=$69;
 var $74=$3;
 var $75=_hio_read16l($74);
 var $76=$i;
 var $77=(($sfh+48)|0);
 var $78=(($77+((($76)*(36))&-1))|0);
 var $79=(($78+16)|0);
 HEAP16[(($79)>>1)]=$75;
 var $80=$3;
 var $81=_hio_read16l($80);
 var $82=$i;
 var $83=(($sfh+48)|0);
 var $84=(($83+((($82)*(36))&-1))|0);
 var $85=(($84+18)|0);
 HEAP16[(($85)>>1)]=$81;
 var $86=$3;
 var $87=_hio_read16l($86);
 var $88=$i;
 var $89=(($sfh+48)|0);
 var $90=(($89+((($88)*(36))&-1))|0);
 var $91=(($90+20)|0);
 HEAP16[(($91)>>1)]=$87;
 var $92=$3;
 var $93=_hio_read8($92);
 var $94=$i;
 var $95=(($sfh+48)|0);
 var $96=(($95+((($94)*(36))&-1))|0);
 var $97=(($96+22)|0);
 HEAP8[($97)]=$93;
 var $98=$3;
 var $99=_hio_read8($98);
 var $100=$i;
 var $101=(($sfh+48)|0);
 var $102=(($101+((($100)*(36))&-1))|0);
 var $103=(($102+23)|0);
 HEAP8[($103)]=$99;
 var $104=$3;
 var $105=_hio_read16l($104);
 var $106=$i;
 var $107=(($sfh+48)|0);
 var $108=(($107+((($106)*(36))&-1))|0);
 var $109=(($108+24)|0);
 HEAP16[(($109)>>1)]=$105;
 var $110=$3;
 var $111=_hio_read32l($110);
 var $112=$i;
 var $113=(($sfh+48)|0);
 var $114=(($113+((($112)*(36))&-1))|0);
 var $115=(($114+28)|0);
 HEAP32[(($115)>>2)]=$111;
 var $116=$3;
 var $117=_hio_read16l($116);
 var $118=$i;
 var $119=(($sfh+48)|0);
 var $120=(($119+((($118)*(36))&-1))|0);
 var $121=(($120+32)|0);
 HEAP16[(($121)>>1)]=$117;
 label=6;break;
 case 6: 
 var $123=$i;
 var $124=((($123)+(1))|0);
 $i=$124;
 label=4;break;
 case 7: 
 var $126=(($sfh+20)|0);
 var $127=(($126)|0);
 var $128=_strncmp($127,25896,8);
 var $129=($128|0)!=0;
 if($129){label=9;break;}else{label=8;break;}
 case 8: 
 $bmod2stm=1;
 label=9;break;
 case 9: 
 var $132=(($sfh+33)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$mod;
 var $136=(($135+128)|0);
 HEAP32[(($136)>>2)]=$134;
 var $137=$mod;
 var $138=(($137+128)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$mod;
 var $141=(($140+136)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(Math_imul($139,$142)|0);
 var $144=$mod;
 var $145=(($144+132)|0);
 HEAP32[(($145)>>2)]=$143;
 var $146=(($sfh+32)|0);
 var $147=HEAP8[($146)];
 var $148=($147&255);
 var $149=$148&240;
 var $150=$149>>4;
 var $151=$mod;
 var $152=(($151+148)|0);
 HEAP32[(($152)>>2)]=$150;
 var $153=$mod;
 var $154=(($153+140)|0);
 HEAP32[(($154)>>2)]=31;
 var $155=$mod;
 var $156=(($155+140)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$mod;
 var $159=(($158+144)|0);
 HEAP32[(($159)>>2)]=$157;
 var $160=$2;
 var $161=(($160+1264)|0);
 HEAP32[(($161)>>2)]=8363;
 var $162=$mod;
 var $163=(($162)|0);
 var $164=(($163)|0);
 var $165=(($sfh)|0);
 var $166=(($165)|0);
 var $167=_copy_adjust($164,$166,20);
 var $168=$bmod2stm;
 var $169=($168|0)!=0;
 if($169){label=10;break;}else{label=11;break;}
 case 10: 
 var $171=$mod;
 var $172=(($171+64)|0);
 var $173=(($172)|0);
 var $174=_snprintf($173,64,24336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 11: 
 var $176=$mod;
 var $177=(($176+64)|0);
 var $178=(($177)|0);
 var $179=(($sfh+30)|0);
 var $180=HEAP8[($179)];
 var $181=($180&255);
 var $182=(($sfh+31)|0);
 var $183=HEAP8[($182)];
 var $184=($183&255);
 var $185=_snprintf($178,64,23424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$181,HEAP32[(((tempVarArgs)+(8))>>2)]=$184,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $193=$mod;
 var $194=_instrument_init($193);
 var $195=($194|0)<0;
 if($195){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=79;break;
 case 20: 
 $i=0;
 label=21;break;
 case 21: 
 var $199=$i;
 var $200=$mod;
 var $201=(($200+140)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($199|0)<($202|0);
 if($203){label=22;break;}else{label=32;break;}
 case 22: 
 var $205=$mod;
 var $206=$i;
 var $207=_subinstrument_alloc($205,$206,1);
 var $208=($207|0)<0;
 if($208){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=79;break;
 case 24: 
 var $211=$i;
 var $212=(($sfh+48)|0);
 var $213=(($212+((($211)*(36))&-1))|0);
 var $214=(($213+16)|0);
 var $215=HEAP16[(($214)>>1)];
 var $216=($215&65535);
 var $217=$i;
 var $218=$mod;
 var $219=(($218+180)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+((($217)*(52))&-1))|0);
 var $222=(($221+32)|0);
 HEAP32[(($222)>>2)]=$216;
 var $223=$i;
 var $224=(($sfh+48)|0);
 var $225=(($224+((($223)*(36))&-1))|0);
 var $226=(($225+18)|0);
 var $227=HEAP16[(($226)>>1)];
 var $228=($227&65535);
 var $229=$i;
 var $230=$mod;
 var $231=(($230+180)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+((($229)*(52))&-1))|0);
 var $234=(($233+36)|0);
 HEAP32[(($234)>>2)]=$228;
 var $235=$i;
 var $236=(($sfh+48)|0);
 var $237=(($236+((($235)*(36))&-1))|0);
 var $238=(($237+20)|0);
 var $239=HEAP16[(($238)>>1)];
 var $240=($239&65535);
 var $241=$i;
 var $242=$mod;
 var $243=(($242+180)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+((($241)*(52))&-1))|0);
 var $246=(($245+40)|0);
 HEAP32[(($246)>>2)]=$240;
 var $247=$i;
 var $248=$mod;
 var $249=(($248+180)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+((($247)*(52))&-1))|0);
 var $252=(($251+40)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=($253|0)==65535;
 if($254){label=25;break;}else{label=26;break;}
 case 25: 
 var $256=$i;
 var $257=$mod;
 var $258=(($257+180)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+((($256)*(52))&-1))|0);
 var $261=(($260+40)|0);
 HEAP32[(($261)>>2)]=0;
 label=26;break;
 case 26: 
 var $263=$i;
 var $264=$mod;
 var $265=(($264+180)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+((($263)*(52))&-1))|0);
 var $268=(($267+40)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($269|0)>0;
 var $271=($270?2:0);
 var $272=$i;
 var $273=$mod;
 var $274=(($273+180)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=(($275+((($272)*(52))&-1))|0);
 var $277=(($276+44)|0);
 HEAP32[(($277)>>2)]=$271;
 var $278=$i;
 var $279=(($sfh+48)|0);
 var $280=(($279+((($278)*(36))&-1))|0);
 var $281=(($280+22)|0);
 var $282=HEAP8[($281)];
 var $283=($282&255);
 var $284=$i;
 var $285=$mod;
 var $286=(($285+176)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+((($284)*(764))&-1))|0);
 var $289=(($288+756)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=(($290)|0);
 var $292=(($291)|0);
 HEAP32[(($292)>>2)]=$283;
 var $293=$i;
 var $294=$mod;
 var $295=(($294+176)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296+((($293)*(764))&-1))|0);
 var $298=(($297+756)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299)|0);
 var $301=(($300+8)|0);
 HEAP32[(($301)>>2)]=128;
 var $302=$i;
 var $303=$i;
 var $304=$mod;
 var $305=(($304+176)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=(($306+((($303)*(764))&-1))|0);
 var $308=(($307+756)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(($309)|0);
 var $311=(($310+40)|0);
 HEAP32[(($311)>>2)]=$302;
 var $312=$i;
 var $313=$mod;
 var $314=(($313+180)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=(($315+((($312)*(52))&-1))|0);
 var $317=(($316+32)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($318|0)>0;
 if($319){label=27;break;}else{label=28;break;}
 case 27: 
 var $321=$i;
 var $322=$mod;
 var $323=(($322+176)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($324+((($321)*(764))&-1))|0);
 var $326=(($325+36)|0);
 HEAP32[(($326)>>2)]=1;
 label=28;break;
 case 28: 
 var $328=$mod;
 var $329=$i;
 var $330=$i;
 var $331=(($sfh+48)|0);
 var $332=(($331+((($330)*(36))&-1))|0);
 var $333=(($332)|0);
 var $334=(($333)|0);
 var $335=_instrument_name($328,$329,$334,12);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $338=$i;
 var $339=(($sfh+48)|0);
 var $340=(($339+((($338)*(36))&-1))|0);
 var $341=(($340+24)|0);
 var $342=HEAP16[(($341)>>1)];
 var $343=($342&65535);
 var $344=((($343)*(8363))&-1);
 var $345=(((($344|0))/(8448))&-1);
 var $346=(($345)&65535);
 var $347=$i;
 var $348=(($sfh+48)|0);
 var $349=(($348+((($347)*(36))&-1))|0);
 var $350=(($349+24)|0);
 HEAP16[(($350)>>1)]=$346;
 var $351=$i;
 var $352=(($sfh+48)|0);
 var $353=(($352+((($351)*(36))&-1))|0);
 var $354=(($353+24)|0);
 var $355=HEAP16[(($354)>>1)];
 var $356=($355&65535);
 var $357=$i;
 var $358=$mod;
 var $359=(($358+176)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360+((($357)*(764))&-1))|0);
 var $362=(($361+756)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(($363)|0);
 var $365=(($364+12)|0);
 var $366=$i;
 var $367=$mod;
 var $368=(($367+176)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=(($369+((($366)*(764))&-1))|0);
 var $371=(($370+756)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372)|0);
 var $374=(($373+16)|0);
 _c2spd_to_note($356,$365,$374);
 label=31;break;
 case 31: 
 var $376=$i;
 var $377=((($376)+(1))|0);
 $i=$377;
 label=21;break;
 case 32: 
 var $379=$mod;
 var $380=(($379+952)|0);
 var $381=(($380)|0);
 var $382=$3;
 var $383=_hio_read($381,1,128,$382);
 $i=0;
 label=33;break;
 case 33: 
 var $385=$i;
 var $386=($385|0)<128;
 if($386){label=34;break;}else{label=38;break;}
 case 34: 
 var $388=$i;
 var $389=$mod;
 var $390=(($389+952)|0);
 var $391=(($390+$388)|0);
 var $392=HEAP8[($391)];
 var $393=($392&255);
 var $394=$mod;
 var $395=(($394+128)|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=($393|0)>=($396|0);
 if($397){label=35;break;}else{label=36;break;}
 case 35: 
 label=38;break;
 case 36: 
 label=37;break;
 case 37: 
 var $401=$i;
 var $402=((($401)+(1))|0);
 $i=$402;
 label=33;break;
 case 38: 
 var $404=$i;
 var $405=$mod;
 var $406=(($405+156)|0);
 HEAP32[(($406)>>2)]=$404;
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $409=$mod;
 var $410=_pattern_init($409);
 var $411=($410|0)<0;
 if($411){label=41;break;}else{label=42;break;}
 case 41: 
 $1=-1;
 label=79;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 $i=0;
 label=45;break;
 case 45: 
 var $417=$i;
 var $418=$mod;
 var $419=(($418+128)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=($417|0)<($420|0);
 if($421){label=46;break;}else{label=67;break;}
 case 46: 
 var $423=$mod;
 var $424=$i;
 var $425=_pattern_tracks_alloc($423,$424,64);
 var $426=($425|0)<0;
 if($426){label=47;break;}else{label=48;break;}
 case 47: 
 $1=-1;
 label=79;break;
 case 48: 
 $j=0;
 label=49;break;
 case 49: 
 var $430=$j;
 var $431=$mod;
 var $432=(($431+136)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=($433<<6);
 var $435=($430|0)<($434|0);
 if($435){label=50;break;}else{label=65;break;}
 case 50: 
 var $437=$j;
 var $438=$mod;
 var $439=(($438+136)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(((($437|0))/(($440|0)))&-1);
 var $442=$j;
 var $443=$mod;
 var $444=(($443+136)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(((($442|0))%(($445|0)))&-1);
 var $447=$i;
 var $448=$2;
 var $449=(($448)|0);
 var $450=(($449+168)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=(($451+($447<<2))|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=(($453+4)|0);
 var $455=(($454+($446<<2))|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=$2;
 var $458=(($457)|0);
 var $459=(($458+172)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=(($460+($456<<2))|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=(($462+4)|0);
 var $464=(($463+($441<<3))|0);
 $event=$464;
 var $465=$3;
 var $466=_hio_read8($465);
 $b=$466;
 var $467=$event;
 var $468=$467;
 _memset($468, 0, 8)|0;
 var $469=$b;
 var $470=($469&255);
 if(($470|0)==251|($470|0)==252|($470|0)==253){ label=51;break;}else if(($470|0)==255){ label=52;break;}else{label=53;break;}
 case 51: 
 label=63;break;
 case 52: 
 $b=0;
 label=53;break;
 case 53: 
 var $474=$b;
 var $475=($474&255);
 var $476=($475|0)!=0;
 if($476){label=54;break;}else{label=55;break;}
 case 54: 
 var $478=$b;
 var $479=($478&255);
 var $480=$479&15;
 var $481=((($480)+(13))|0);
 var $482=$b;
 var $483=($482&255);
 var $484=$483&240;
 var $485=$484>>4;
 var $486=((($485)+(2))|0);
 var $487=((($486)*(12))&-1);
 var $488=((($481)+($487))|0);
 var $491=$488;label=56;break;
 case 55: 
 var $491=0;label=56;break;
 case 56: 
 var $491;
 var $492=(($491)&255);
 var $493=$event;
 var $494=(($493)|0);
 HEAP8[($494)]=$492;
 var $495=$3;
 var $496=_hio_read8($495);
 $b=$496;
 var $497=$b;
 var $498=($497&255);
 var $499=$498&7;
 var $500=(($499)&255);
 var $501=$event;
 var $502=(($501+2)|0);
 HEAP8[($502)]=$500;
 var $503=$b;
 var $504=($503&255);
 var $505=$504&248;
 var $506=$505>>3;
 var $507=(($506)&255);
 var $508=$event;
 var $509=(($508+1)|0);
 HEAP8[($509)]=$507;
 var $510=$3;
 var $511=_hio_read8($510);
 $b=$511;
 var $512=$b;
 var $513=($512&255);
 var $514=$513&240;
 var $515=$514>>1;
 var $516=$event;
 var $517=(($516+2)|0);
 var $518=HEAP8[($517)];
 var $519=($518&255);
 var $520=((($519)+($515))|0);
 var $521=(($520)&255);
 HEAP8[($517)]=$521;
 var $522=$event;
 var $523=(($522+2)|0);
 var $524=HEAP8[($523)];
 var $525=($524&255);
 var $526=($525|0)>64;
 if($526){label=57;break;}else{label=58;break;}
 case 57: 
 var $528=$event;
 var $529=(($528+2)|0);
 HEAP8[($529)]=0;
 label=59;break;
 case 58: 
 var $531=$event;
 var $532=(($531+2)|0);
 var $533=HEAP8[($532)];
 var $534=((($533)+(1))&255);
 HEAP8[($532)]=$534;
 label=59;break;
 case 59: 
 var $536=$b;
 var $537=($536&255);
 var $538=$537&15;
 var $539=((7496+$538)|0);
 var $540=HEAP8[($539)];
 var $541=$event;
 var $542=(($541+3)|0);
 HEAP8[($542)]=$540;
 var $543=$3;
 var $544=_hio_read8($543);
 var $545=$event;
 var $546=(($545+4)|0);
 HEAP8[($546)]=$544;
 var $547=$event;
 var $548=(($547+3)|0);
 var $549=HEAP8[($548)];
 var $550=($549&255);
 if(($550|0)==15){ label=60;break;}else if(($550|0)==255){ label=61;break;}else{label=62;break;}
 case 60: 
 var $552=$event;
 var $553=(($552+4)|0);
 var $554=HEAP8[($553)];
 var $555=($554&255);
 var $556=$555&240;
 var $557=$556>>4;
 var $558=(($557)&255);
 var $559=$event;
 var $560=(($559+4)|0);
 HEAP8[($560)]=$558;
 label=62;break;
 case 61: 
 var $562=$event;
 var $563=(($562+3)|0);
 HEAP8[($563)]=0;
 var $564=$event;
 var $565=(($564+4)|0);
 HEAP8[($565)]=0;
 label=62;break;
 case 62: 
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 var $569=$j;
 var $570=((($569)+(1))|0);
 $j=$570;
 label=49;break;
 case 65: 
 label=66;break;
 case 66: 
 var $573=$i;
 var $574=((($573)+(1))|0);
 $i=$574;
 label=45;break;
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 $i=0;
 label=70;break;
 case 70: 
 var $579=$i;
 var $580=$mod;
 var $581=(($580+140)|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=($579|0)<($582|0);
 if($583){label=71;break;}else{label=78;break;}
 case 71: 
 var $585=$i;
 var $586=$mod;
 var $587=(($586+180)|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=(($588+((($585)*(52))&-1))|0);
 var $590=(($589+32)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=($591|0)>1;
 if($592){label=72;break;}else{label=75;break;}
 case 72: 
 var $594=$2;
 var $595=$3;
 var $596=$i;
 var $597=$mod;
 var $598=(($597+180)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=(($599+((($596)*(52))&-1))|0);
 var $601=_load_sample($594,$595,0,$600,0);
 var $602=($601|0)<0;
 if($602){label=73;break;}else{label=74;break;}
 case 73: 
 $1=-1;
 label=79;break;
 case 74: 
 label=76;break;
 case 75: 
 var $606=$i;
 var $607=$mod;
 var $608=(($607+176)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=(($609+((($606)*(764))&-1))|0);
 var $611=(($610+36)|0);
 HEAP32[(($611)>>2)]=0;
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 var $614=$i;
 var $615=((($614)+(1))|0);
 $i=$615;
 label=70;break;
 case 78: 
 var $617=$2;
 var $618=(($617+1280)|0);
 var $619=HEAP32[(($618)>>2)];
 var $620=$619|8389217;
 HEAP32[(($618)>>2)]=$620;
 var $621=$2;
 var $622=(($621+1284)|0);
 HEAP32[(($622)>>2)]=2;
 $1=0;
 label=79;break;
 case 79: 
 var $624=$1;
 STACKTOP=sp;return $624;
  default: assert(0, "bad label: " + label);
 }
}
function _stx_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=$4;
 var $7=((($6)+(20))|0);
 var $8=_hio_seek($5,$7,0);
 var $9=(($buf)|0);
 var $10=$2;
 var $11=_hio_read($9,1,8,$10);
 var $12=($11>>>0)<8;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=11;break;
 case 3: 
 var $15=(($buf)|0);
 var $16=_memcmp($15,22728,8);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=6;break;}
 case 4: 
 var $19=(($buf)|0);
 var $20=_memcmp($19,25880,8);
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=11;break;
 case 6: 
 var $24=$2;
 var $25=$4;
 var $26=((($25)+(60))|0);
 var $27=_hio_seek($24,$26,0);
 var $28=(($buf)|0);
 var $29=$2;
 var $30=_hio_read($28,1,4,$29);
 var $31=($30>>>0)<4;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=11;break;
 case 8: 
 var $34=(($buf)|0);
 var $35=_memcmp($34,21976,4);
 var $36=($35|0)!=0;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=11;break;
 case 10: 
 var $39=$2;
 var $40=$4;
 var $41=(($40)|0);
 var $42=_hio_seek($39,$41,0);
 var $43=$2;
 var $44=$3;
 _read_title($43,$44,20);
 $1=0;
 label=11;break;
 case 11: 
 var $46=$1;
 STACKTOP=sp;return $46;
  default: assert(0, "bad label: " + label);
 }
}
function _stx_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $c;
 var $r;
 var $i;
 var $broken;
 var $event;
 var $dummy=sp;
 var $sfh=(sp)+(8);
 var $sih=(sp)+(72);
 var $n;
 var $b;
 var $x16;
 var $bmod2stm;
 var $pp_ins;
 var $pp_pat;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $broken=0;
 $event=0;
 $bmod2stm=0;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($sfh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,20,1,$14);
 var $16=(($sfh+20)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,8,1,$18);
 var $20=$3;
 var $21=_hio_read16l($20);
 var $22=(($sfh+28)|0);
 HEAP16[(($22)>>1)]=$21;
 var $23=$3;
 var $24=_hio_read16l($23);
 var $25=(($sfh+30)|0);
 HEAP16[(($25)>>1)]=$24;
 var $26=$3;
 var $27=_hio_read16l($26);
 var $28=(($sfh+32)|0);
 HEAP16[(($28)>>1)]=$27;
 var $29=$3;
 var $30=_hio_read16l($29);
 var $31=(($sfh+34)|0);
 HEAP16[(($31)>>1)]=$30;
 var $32=$3;
 var $33=_hio_read16l($32);
 var $34=(($sfh+36)|0);
 HEAP16[(($34)>>1)]=$33;
 var $35=$3;
 var $36=_hio_read16l($35);
 var $37=(($sfh+38)|0);
 HEAP16[(($37)>>1)]=$36;
 var $38=$3;
 var $39=_hio_read16l($38);
 var $40=(($sfh+40)|0);
 HEAP16[(($40)>>1)]=$39;
 var $41=$3;
 var $42=_hio_read8($41);
 var $43=(($sfh+42)|0);
 HEAP8[($43)]=$42;
 var $44=$3;
 var $45=_hio_read8($44);
 var $46=(($sfh+43)|0);
 HEAP8[($46)]=$45;
 var $47=$3;
 var $48=_hio_read16l($47);
 var $49=(($sfh+44)|0);
 HEAP16[(($49)>>1)]=$48;
 var $50=$3;
 var $51=_hio_read16l($50);
 var $52=(($sfh+46)|0);
 HEAP16[(($52)>>1)]=$51;
 var $53=$3;
 var $54=_hio_read16l($53);
 var $55=(($sfh+48)|0);
 HEAP16[(($55)>>1)]=$54;
 var $56=$3;
 var $57=_hio_read16l($56);
 var $58=(($sfh+50)|0);
 HEAP16[(($58)>>1)]=$57;
 var $59=$3;
 var $60=_hio_read16l($59);
 var $61=(($sfh+52)|0);
 HEAP16[(($61)>>1)]=$60;
 var $62=$3;
 var $63=_hio_read16l($62);
 var $64=(($sfh+54)|0);
 HEAP16[(($64)>>1)]=$63;
 var $65=$3;
 var $66=_hio_read16l($65);
 var $67=(($sfh+56)|0);
 HEAP16[(($67)>>1)]=$66;
 var $68=$3;
 var $69=_hio_read16l($68);
 var $70=(($sfh+58)|0);
 HEAP16[(($70)>>1)]=$69;
 var $71=(($sfh+60)|0);
 var $72=$71;
 var $73=$3;
 var $74=_hio_read($72,4,1,$73);
 var $75=(($sfh+20)|0);
 var $76=(($75)|0);
 var $77=_strncmp($76,25880,8);
 var $78=($77|0)!=0;
 if($78){label=5;break;}else{label=4;break;}
 case 4: 
 $bmod2stm=1;
 label=5;break;
 case 5: 
 var $81=(($sfh+50)|0);
 var $82=HEAP16[(($81)>>1)];
 var $83=($82&65535);
 var $84=$mod;
 var $85=(($84+140)|0);
 HEAP32[(($85)>>2)]=$83;
 var $86=(($sfh+48)|0);
 var $87=HEAP16[(($86)>>1)];
 var $88=($87&65535);
 var $89=$mod;
 var $90=(($89+128)|0);
 HEAP32[(($90)>>2)]=$88;
 var $91=$mod;
 var $92=(($91+128)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$mod;
 var $95=(($94+136)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(Math_imul($93,$96)|0);
 var $98=$mod;
 var $99=(($98+132)|0);
 HEAP32[(($99)>>2)]=$97;
 var $100=(($sfh+52)|0);
 var $101=HEAP16[(($100)>>1)];
 var $102=($101&65535);
 var $103=$mod;
 var $104=(($103+156)|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=(($sfh+43)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$107&240;
 var $109=$108>>4;
 var $110=$mod;
 var $111=(($110+148)|0);
 HEAP32[(($111)>>2)]=$109;
 var $112=$mod;
 var $113=(($112+140)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$mod;
 var $116=(($115+144)|0);
 HEAP32[(($116)>>2)]=$114;
 var $117=$2;
 var $118=(($117+1264)|0);
 HEAP32[(($118)>>2)]=8363;
 var $119=$3;
 var $120=$4;
 var $121=(($sfh+32)|0);
 var $122=HEAP16[(($121)>>1)];
 var $123=($122&65535);
 var $124=$123<<4;
 var $125=((($120)+($124))|0);
 var $126=_hio_seek($119,$125,0);
 var $127=$3;
 var $128=_hio_read16l($127);
 $x16=$128;
 var $129=$3;
 var $130=$4;
 var $131=$x16;
 var $132=($131&65535);
 var $133=$132<<4;
 var $134=((($130)+($133))|0);
 var $135=_hio_seek($129,$134,0);
 var $136=$3;
 var $137=_hio_read16l($136);
 $x16=$137;
 var $138=$x16;
 var $139=($138&65535);
 var $140=(($sfh+28)|0);
 var $141=HEAP16[(($140)>>1)];
 var $142=($141&65535);
 var $143=($139|0)==($142|0);
 if($143){label=6;break;}else{label=7;break;}
 case 6: 
 $broken=1;
 label=7;break;
 case 7: 
 var $146=$mod;
 var $147=(($146)|0);
 var $148=(($147)|0);
 var $149=(($sfh)|0);
 var $150=(($149)|0);
 var $151=_strlcpy($148,$150,20);
 var $152=$bmod2stm;
 var $153=($152|0)!=0;
 if($153){label=8;break;}else{label=9;break;}
 case 8: 
 var $155=$2;
 _set_type($155,24320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 9: 
 var $157=$mod;
 var $158=(($157+64)|0);
 var $159=(($158)|0);
 var $160=$broken;
 var $161=($160|0)!=0;
 var $162=($161?0:1);
 var $163=_snprintf($159,64,23408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$162,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $171=$mod;
 var $172=(($171+128)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=_calloc(2,$173);
 var $175=$174;
 $pp_pat=$175;
 var $176=$pp_pat;
 var $177=($176|0)==0;
 if($177){label=17;break;}else{label=18;break;}
 case 17: 
 label=90;break;
 case 18: 
 var $180=$mod;
 var $181=(($180+140)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=_calloc(2,$182);
 var $184=$183;
 $pp_ins=$184;
 var $185=$pp_ins;
 var $186=($185|0)==0;
 if($186){label=19;break;}else{label=20;break;}
 case 19: 
 label=89;break;
 case 20: 
 var $189=$3;
 var $190=$4;
 var $191=(($sfh+32)|0);
 var $192=HEAP16[(($191)>>1)];
 var $193=($192&65535);
 var $194=$193<<4;
 var $195=((($190)+($194))|0);
 var $196=_hio_seek($189,$195,0);
 $i=0;
 label=21;break;
 case 21: 
 var $198=$i;
 var $199=$mod;
 var $200=(($199+128)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($198|0)<($201|0);
 if($202){label=22;break;}else{label=24;break;}
 case 22: 
 var $204=$3;
 var $205=_hio_read16l($204);
 var $206=$i;
 var $207=$pp_pat;
 var $208=(($207+($206<<1))|0);
 HEAP16[(($208)>>1)]=$205;
 label=23;break;
 case 23: 
 var $210=$i;
 var $211=((($210)+(1))|0);
 $i=$211;
 label=21;break;
 case 24: 
 var $213=$3;
 var $214=$4;
 var $215=(($sfh+34)|0);
 var $216=HEAP16[(($215)>>1)];
 var $217=($216&65535);
 var $218=$217<<4;
 var $219=((($214)+($218))|0);
 var $220=_hio_seek($213,$219,0);
 $i=0;
 label=25;break;
 case 25: 
 var $222=$i;
 var $223=$mod;
 var $224=(($223+140)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($222|0)<($225|0);
 if($226){label=26;break;}else{label=28;break;}
 case 26: 
 var $228=$3;
 var $229=_hio_read16l($228);
 var $230=$i;
 var $231=$pp_ins;
 var $232=(($231+($230<<1))|0);
 HEAP16[(($232)>>1)]=$229;
 label=27;break;
 case 27: 
 var $234=$i;
 var $235=((($234)+(1))|0);
 $i=$235;
 label=25;break;
 case 28: 
 var $237=$3;
 var $238=$4;
 var $239=(($sfh+36)|0);
 var $240=HEAP16[(($239)>>1)];
 var $241=($240&65535);
 var $242=$241<<4;
 var $243=((($238)+($242))|0);
 var $244=((($243)+(32))|0);
 var $245=_hio_seek($237,$244,0);
 $i=0;
 label=29;break;
 case 29: 
 var $247=$i;
 var $248=$mod;
 var $249=(($248+156)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($247|0)<($250|0);
 if($251){label=30;break;}else{label=32;break;}
 case 30: 
 var $253=$3;
 var $254=_hio_read8($253);
 var $255=$i;
 var $256=$mod;
 var $257=(($256+952)|0);
 var $258=(($257+$255)|0);
 HEAP8[($258)]=$254;
 var $259=$3;
 var $260=_hio_seek($259,4,1);
 label=31;break;
 case 31: 
 var $262=$i;
 var $263=((($262)+(1))|0);
 $i=$263;
 label=29;break;
 case 32: 
 var $265=$mod;
 var $266=_instrument_init($265);
 var $267=($266|0)<0;
 if($267){label=33;break;}else{label=34;break;}
 case 33: 
 label=88;break;
 case 34: 
 $i=0;
 label=35;break;
 case 35: 
 var $271=$i;
 var $272=$mod;
 var $273=(($272+140)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($271|0)<($274|0);
 if($275){label=36;break;}else{label=44;break;}
 case 36: 
 var $277=$mod;
 var $278=$i;
 var $279=_subinstrument_alloc($277,$278,1);
 var $280=($279|0)<0;
 if($280){label=37;break;}else{label=38;break;}
 case 37: 
 label=88;break;
 case 38: 
 var $283=$3;
 var $284=$4;
 var $285=$i;
 var $286=$pp_ins;
 var $287=(($286+($285<<1))|0);
 var $288=HEAP16[(($287)>>1)];
 var $289=($288&65535);
 var $290=$289<<4;
 var $291=((($284)+($290))|0);
 var $292=_hio_seek($283,$291,0);
 var $293=$3;
 var $294=_hio_read8($293);
 var $295=(($sih)|0);
 HEAP8[($295)]=$294;
 var $296=(($sih+1)|0);
 var $297=$296;
 var $298=$3;
 var $299=_hio_read($297,13,1,$298);
 var $300=$3;
 var $301=_hio_read16l($300);
 var $302=(($sih+14)|0);
 HEAP16[(($302)>>1)]=$301;
 var $303=$3;
 var $304=_hio_read32l($303);
 var $305=(($sih+16)|0);
 HEAP32[(($305)>>2)]=$304;
 var $306=$3;
 var $307=_hio_read32l($306);
 var $308=(($sih+20)|0);
 HEAP32[(($308)>>2)]=$307;
 var $309=$3;
 var $310=_hio_read32l($309);
 var $311=(($sih+24)|0);
 HEAP32[(($311)>>2)]=$310;
 var $312=$3;
 var $313=_hio_read8($312);
 var $314=(($sih+28)|0);
 HEAP8[($314)]=$313;
 var $315=$3;
 var $316=_hio_read8($315);
 var $317=(($sih+29)|0);
 HEAP8[($317)]=$316;
 var $318=$3;
 var $319=_hio_read8($318);
 var $320=(($sih+30)|0);
 HEAP8[($320)]=$319;
 var $321=$3;
 var $322=_hio_read8($321);
 var $323=(($sih+31)|0);
 HEAP8[($323)]=$322;
 var $324=$3;
 var $325=_hio_read16l($324);
 var $326=(($sih+32)|0);
 HEAP16[(($326)>>1)]=$325;
 var $327=$3;
 var $328=_hio_read16l($327);
 var $329=(($sih+34)|0);
 HEAP16[(($329)>>1)]=$328;
 var $330=(($sih+36)|0);
 var $331=$330;
 var $332=$3;
 var $333=_hio_read($331,4,1,$332);
 var $334=$3;
 var $335=_hio_read16l($334);
 var $336=(($sih+40)|0);
 HEAP16[(($336)>>1)]=$335;
 var $337=$3;
 var $338=_hio_read16l($337);
 var $339=(($sih+42)|0);
 HEAP16[(($339)>>1)]=$338;
 var $340=$3;
 var $341=_hio_read32l($340);
 var $342=(($sih+44)|0);
 HEAP32[(($342)>>2)]=$341;
 var $343=(($sih+48)|0);
 var $344=$343;
 var $345=$3;
 var $346=_hio_read($344,28,1,$345);
 var $347=(($sih+76)|0);
 var $348=$347;
 var $349=$3;
 var $350=_hio_read($348,4,1,$349);
 var $351=(($sih+16)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=$i;
 var $354=$mod;
 var $355=(($354+180)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=(($356+((($353)*(52))&-1))|0);
 var $358=(($357+32)|0);
 HEAP32[(($358)>>2)]=$352;
 var $359=(($sih+20)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=$i;
 var $362=$mod;
 var $363=(($362+180)|0);
 var $364=HEAP32[(($363)>>2)];
 var $365=(($364+((($361)*(52))&-1))|0);
 var $366=(($365+36)|0);
 HEAP32[(($366)>>2)]=$360;
 var $367=(($sih+24)|0);
 var $368=HEAP32[(($367)>>2)];
 var $369=$i;
 var $370=$mod;
 var $371=(($370+180)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372+((($369)*(52))&-1))|0);
 var $374=(($373+40)|0);
 HEAP32[(($374)>>2)]=$368;
 var $375=$i;
 var $376=$mod;
 var $377=(($376+180)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=(($378+((($375)*(52))&-1))|0);
 var $380=(($379+40)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381|0)==65535;
 if($382){label=39;break;}else{label=40;break;}
 case 39: 
 var $384=$i;
 var $385=$mod;
 var $386=(($385+180)|0);
 var $387=HEAP32[(($386)>>2)];
 var $388=(($387+((($384)*(52))&-1))|0);
 var $389=(($388+40)|0);
 HEAP32[(($389)>>2)]=0;
 label=40;break;
 case 40: 
 var $391=$i;
 var $392=$mod;
 var $393=(($392+180)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=(($394+((($391)*(52))&-1))|0);
 var $396=(($395+40)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=($397|0)>0;
 var $399=($398?2:0);
 var $400=$i;
 var $401=$mod;
 var $402=(($401+180)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($403+((($400)*(52))&-1))|0);
 var $405=(($404+44)|0);
 HEAP32[(($405)>>2)]=$399;
 var $406=(($sih+28)|0);
 var $407=HEAP8[($406)];
 var $408=($407&255);
 var $409=$i;
 var $410=$mod;
 var $411=(($410+176)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($412+((($409)*(764))&-1))|0);
 var $414=(($413+756)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=(($415)|0);
 var $417=(($416)|0);
 HEAP32[(($417)>>2)]=$408;
 var $418=$i;
 var $419=$mod;
 var $420=(($419+176)|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=(($421+((($418)*(764))&-1))|0);
 var $423=(($422+756)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=(($424)|0);
 var $426=(($425+8)|0);
 HEAP32[(($426)>>2)]=128;
 var $427=$i;
 var $428=$i;
 var $429=$mod;
 var $430=(($429+176)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=(($431+((($428)*(764))&-1))|0);
 var $433=(($432+756)|0);
 var $434=HEAP32[(($433)>>2)];
 var $435=(($434)|0);
 var $436=(($435+40)|0);
 HEAP32[(($436)>>2)]=$427;
 var $437=$i;
 var $438=$mod;
 var $439=(($438+176)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($440+((($437)*(764))&-1))|0);
 var $442=(($441+36)|0);
 HEAP32[(($442)>>2)]=1;
 var $443=$mod;
 var $444=$i;
 var $445=(($sih+48)|0);
 var $446=(($445)|0);
 var $447=_instrument_name($443,$444,$446,12);
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 var $450=(($sih+32)|0);
 var $451=HEAP16[(($450)>>1)];
 var $452=($451&65535);
 var $453=((($452)*(8363))&-1);
 var $454=(((($453|0))/(8448))&-1);
 var $455=(($454)&65535);
 var $456=(($sih+32)|0);
 HEAP16[(($456)>>1)]=$455;
 var $457=(($sih+32)|0);
 var $458=HEAP16[(($457)>>1)];
 var $459=($458&65535);
 var $460=$i;
 var $461=$mod;
 var $462=(($461+176)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=(($463+((($460)*(764))&-1))|0);
 var $465=(($464+756)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=(($466)|0);
 var $468=(($467+12)|0);
 var $469=$i;
 var $470=$mod;
 var $471=(($470+176)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($472+((($469)*(764))&-1))|0);
 var $474=(($473+756)|0);
 var $475=HEAP32[(($474)>>2)];
 var $476=(($475)|0);
 var $477=(($476+16)|0);
 _c2spd_to_note($459,$468,$477);
 label=43;break;
 case 43: 
 var $479=$i;
 var $480=((($479)+(1))|0);
 $i=$480;
 label=35;break;
 case 44: 
 var $482=$mod;
 var $483=_pattern_init($482);
 var $484=($483|0)<0;
 if($484){label=45;break;}else{label=46;break;}
 case 45: 
 $1=-1;
 label=91;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 $i=0;
 label=49;break;
 case 49: 
 var $490=$i;
 var $491=$mod;
 var $492=(($491+128)|0);
 var $493=HEAP32[(($492)>>2)];
 var $494=($490|0)<($493|0);
 if($494){label=50;break;}else{label=79;break;}
 case 50: 
 var $496=$mod;
 var $497=$i;
 var $498=_pattern_tracks_alloc($496,$497,64);
 var $499=($498|0)<0;
 if($499){label=51;break;}else{label=52;break;}
 case 51: 
 label=88;break;
 case 52: 
 var $502=$i;
 var $503=$pp_pat;
 var $504=(($503+($502<<1))|0);
 var $505=HEAP16[(($504)>>1)];
 var $506=($505&65535);
 var $507=($506|0)==0;
 if($507){label=53;break;}else{label=54;break;}
 case 53: 
 label=78;break;
 case 54: 
 var $510=$3;
 var $511=$4;
 var $512=$i;
 var $513=$pp_pat;
 var $514=(($513+($512<<1))|0);
 var $515=HEAP16[(($514)>>1)];
 var $516=($515&65535);
 var $517=$516<<4;
 var $518=((($511)+($517))|0);
 var $519=_hio_seek($510,$518,0);
 var $520=$broken;
 var $521=($520|0)!=0;
 if($521){label=55;break;}else{label=56;break;}
 case 55: 
 var $523=$3;
 var $524=_hio_seek($523,2,1);
 label=56;break;
 case 56: 
 $r=0;
 label=57;break;
 case 57: 
 var $527=$r;
 var $528=($527|0)<64;
 if($528){label=58;break;}else{label=77;break;}
 case 58: 
 var $530=$3;
 var $531=_hio_read8($530);
 $b=$531;
 var $532=$b;
 var $533=($532&255);
 var $534=($533|0)==0;
 if($534){label=59;break;}else{label=60;break;}
 case 59: 
 var $536=$r;
 var $537=((($536)+(1))|0);
 $r=$537;
 label=57;break;
 case 60: 
 var $539=$b;
 var $540=($539&255);
 var $541=$540&31;
 $c=$541;
 var $542=$c;
 var $543=$mod;
 var $544=(($543+136)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=($542|0)>=($545|0);
 if($546){label=61;break;}else{label=62;break;}
 case 61: 
 var $570=$dummy;label=63;break;
 case 62: 
 var $549=$r;
 var $550=$c;
 var $551=$i;
 var $552=$2;
 var $553=(($552)|0);
 var $554=(($553+168)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=(($555+($551<<2))|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=(($557+4)|0);
 var $559=(($558+($550<<2))|0);
 var $560=HEAP32[(($559)>>2)];
 var $561=$2;
 var $562=(($561)|0);
 var $563=(($562+172)|0);
 var $564=HEAP32[(($563)>>2)];
 var $565=(($564+($560<<2))|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=(($566+4)|0);
 var $568=(($567+($549<<3))|0);
 var $570=$568;label=63;break;
 case 63: 
 var $570;
 $event=$570;
 var $571=$b;
 var $572=($571&255);
 var $573=$572&32;
 var $574=($573|0)!=0;
 if($574){label=64;break;}else{label=69;break;}
 case 64: 
 var $576=$3;
 var $577=_hio_read8($576);
 $n=$577;
 var $578=$n;
 var $579=($578&255);
 if(($579|0)==255){ label=65;break;}else if(($579|0)==254){ label=66;break;}else{label=67;break;}
 case 65: 
 $n=0;
 label=68;break;
 case 66: 
 $n=-127;
 label=68;break;
 case 67: 
 var $583=$n;
 var $584=($583&255);
 var $585=$584&240;
 var $586=$585>>4;
 var $587=((($586)*(12))&-1);
 var $588=((($587)+(37))|0);
 var $589=$n;
 var $590=($589&255);
 var $591=$590&15;
 var $592=((($588)+($591))|0);
 var $593=(($592)&255);
 $n=$593;
 label=68;break;
 case 68: 
 var $595=$n;
 var $596=$event;
 var $597=(($596)|0);
 HEAP8[($597)]=$595;
 var $598=$3;
 var $599=_hio_read8($598);
 var $600=$event;
 var $601=(($600+1)|0);
 HEAP8[($601)]=$599;
 label=69;break;
 case 69: 
 var $603=$b;
 var $604=($603&255);
 var $605=$604&64;
 var $606=($605|0)!=0;
 if($606){label=70;break;}else{label=71;break;}
 case 70: 
 var $608=$3;
 var $609=_hio_read8($608);
 var $610=($609&255);
 var $611=((($610)+(1))|0);
 var $612=(($611)&255);
 var $613=$event;
 var $614=(($613+2)|0);
 HEAP8[($614)]=$612;
 label=71;break;
 case 71: 
 var $616=$b;
 var $617=($616&255);
 var $618=$617&128;
 var $619=($618|0)!=0;
 if($619){label=72;break;}else{label=76;break;}
 case 72: 
 var $621=$3;
 var $622=_hio_read8($621);
 var $623=($622&255);
 var $624=((7480+$623)|0);
 var $625=HEAP8[($624)];
 var $626=$event;
 var $627=(($626+3)|0);
 HEAP8[($627)]=$625;
 var $628=$3;
 var $629=_hio_read8($628);
 var $630=$event;
 var $631=(($630+4)|0);
 HEAP8[($631)]=$629;
 var $632=$event;
 var $633=(($632+3)|0);
 var $634=HEAP8[($633)];
 var $635=($634&255);
 if(($635|0)==15){ label=73;break;}else if(($635|0)==255){ label=74;break;}else{label=75;break;}
 case 73: 
 var $637=$event;
 var $638=(($637+4)|0);
 var $639=HEAP8[($638)];
 var $640=($639&255);
 var $641=$640&240;
 var $642=$641>>4;
 var $643=(($642)&255);
 var $644=$event;
 var $645=(($644+4)|0);
 HEAP8[($645)]=$643;
 label=75;break;
 case 74: 
 var $647=$event;
 var $648=(($647+3)|0);
 HEAP8[($648)]=0;
 var $649=$event;
 var $650=(($649+4)|0);
 HEAP8[($650)]=0;
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 label=57;break;
 case 77: 
 label=78;break;
 case 78: 
 var $655=$i;
 var $656=((($655)+(1))|0);
 $i=$656;
 label=49;break;
 case 79: 
 var $658=$pp_ins;
 var $659=$658;
 _free($659);
 var $660=$pp_pat;
 var $661=$660;
 _free($661);
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 $i=0;
 label=82;break;
 case 82: 
 var $665=$i;
 var $666=$mod;
 var $667=(($666+140)|0);
 var $668=HEAP32[(($667)>>2)];
 var $669=($665|0)<($668|0);
 if($669){label=83;break;}else{label=87;break;}
 case 83: 
 var $671=$2;
 var $672=$3;
 var $673=$i;
 var $674=$mod;
 var $675=(($674+180)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=(($676+((($673)*(52))&-1))|0);
 var $678=_load_sample($671,$672,0,$677,0);
 var $679=($678|0)<0;
 if($679){label=84;break;}else{label=85;break;}
 case 84: 
 label=88;break;
 case 85: 
 label=86;break;
 case 86: 
 var $683=$i;
 var $684=((($683)+(1))|0);
 $i=$684;
 label=82;break;
 case 87: 
 var $686=$2;
 var $687=(($686+1280)|0);
 var $688=HEAP32[(($687)>>2)];
 var $689=$688|8389217;
 HEAP32[(($687)>>2)]=$689;
 var $690=$2;
 var $691=(($690+1284)|0);
 HEAP32[(($691)>>2)]=2;
 $1=0;
 label=91;break;
 case 88: 
 var $693=$pp_ins;
 var $694=$693;
 _free($694);
 label=89;break;
 case 89: 
 var $696=$pp_pat;
 var $697=$696;
 _free($697);
 label=90;break;
 case 90: 
 $1=-1;
 label=91;break;
 case 91: 
 var $700=$1;
 STACKTOP=sp;return $700;
  default: assert(0, "bad label: " + label);
 }
}
function _sym_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $a;
 var $b;
 var $i;
 var $ver;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=15;break;
 case 3: 
 var $11=$2;
 var $12=_hio_read32b($11);
 $a=$12;
 var $13=$2;
 var $14=_hio_read32b($13);
 $b=$14;
 var $15=$a;
 var $16=($15|0)!=33624851;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=$b;
 var $19=($18|0)!=336724235;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=15;break;
 case 6: 
 var $22=$2;
 var $23=_hio_read8($22);
 var $24=($23&255);
 $ver=$24;
 var $25=$ver;
 var $26=($25|0)>1;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=15;break;
 case 8: 
 var $29=$2;
 var $30=_hio_read8($29);
 var $31=$2;
 var $32=_hio_read16l($31);
 var $33=$2;
 var $34=_hio_read16l($33);
 var $35=$2;
 var $36=_hio_read24l($35);
 $i=0;
 label=9;break;
 case 9: 
 var $38=$i;
 var $39=($38|0)<63;
 if($39){label=10;break;}else{label=14;break;}
 case 10: 
 var $41=$2;
 var $42=_hio_read8($41);
 var $43=($42&255);
 var $44=$43^-1;
 var $45=$44&128;
 var $46=($45|0)!=0;
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $48=$2;
 var $49=_hio_read24l($48);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $52=$i;
 var $53=((($52)+(1))|0);
 $i=$53;
 label=9;break;
 case 14: 
 var $55=$2;
 var $56=$3;
 var $57=$2;
 var $58=_hio_read8($57);
 var $59=($58&255);
 _read_title($55,$56,$59);
 $1=0;
 label=15;break;
 case 15: 
 var $61=$1;
 STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }
}
function _sym_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+392)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $ver;
 var $infolen;
 var $sn=sp;
 var $a;
 var $b;
 var $buf;
 var $size;
 var $ret;
 var $allowed_effects=(sp)+(256);
 var $x;
 var $idx;
 var $x1;
 var $parm;
 var $buf2=(sp)+(264);
 var $looplen;
 var $b3;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=$3;
 var $13=_hio_seek($12,8,1);
 var $14=$3;
 var $15=_hio_read8($14);
 var $16=($15&255);
 $ver=$16;
 var $17=$2;
 _set_type($17,21608,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$3;
 var $19=_hio_read8($18);
 var $20=($19&255);
 var $21=$mod;
 var $22=(($21+136)|0);
 HEAP32[(($22)>>2)]=$20;
 var $23=$3;
 var $24=_hio_read16l($23);
 var $25=($24&65535);
 var $26=$mod;
 var $27=(($26+128)|0);
 HEAP32[(($27)>>2)]=$25;
 var $28=$mod;
 var $29=(($28+156)|0);
 HEAP32[(($29)>>2)]=$25;
 var $30=$3;
 var $31=_hio_read16l($30);
 var $32=($31&65535);
 var $33=$mod;
 var $34=(($33+132)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$3;
 var $36=_hio_read24l($35);
 $infolen=$36;
 var $37=$mod;
 var $38=(($37+144)|0);
 HEAP32[(($38)>>2)]=63;
 var $39=$mod;
 var $40=(($39+140)|0);
 HEAP32[(($40)>>2)]=63;
 var $41=$mod;
 var $42=_instrument_init($41);
 var $43=($42|0)<0;
 if($43){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=104;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $47=$i;
 var $48=$mod;
 var $49=(($48+140)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($47|0)<($50|0);
 if($51){label=7;break;}else{label=13;break;}
 case 7: 
 var $53=$mod;
 var $54=$i;
 var $55=_subinstrument_alloc($53,$54,1);
 var $56=($55|0)<0;
 if($56){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=104;break;
 case 9: 
 var $59=$3;
 var $60=_hio_read8($59);
 var $61=($60&255);
 var $62=$i;
 var $63=(($sn+($62<<2))|0);
 HEAP32[(($63)>>2)]=$61;
 var $64=$i;
 var $65=(($sn+($64<<2))|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$66^-1;
 var $68=$67&128;
 var $69=($68|0)!=0;
 if($69){label=10;break;}else{label=11;break;}
 case 10: 
 var $71=$3;
 var $72=_hio_read24l($71);
 var $73=$72<<1;
 var $74=$i;
 var $75=$mod;
 var $76=(($75+180)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+((($74)*(52))&-1))|0);
 var $79=(($78+32)|0);
 HEAP32[(($79)>>2)]=$73;
 var $80=$i;
 var $81=$mod;
 var $82=(($81+176)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+((($80)*(764))&-1))|0);
 var $85=(($84+36)|0);
 HEAP32[(($85)>>2)]=1;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $88=$i;
 var $89=((($88)+(1))|0);
 $i=$89;
 label=6;break;
 case 13: 
 var $91=$3;
 var $92=_hio_read8($91);
 var $93=($92&255);
 $a=$93;
 var $94=$mod;
 var $95=(($94)|0);
 var $96=(($95)|0);
 var $97=$a;
 var $98=$3;
 var $99=_hio_read($96,1,$97,$98);
 var $100=$allowed_effects;
 var $101=$3;
 var $102=_hio_read($100,1,8,$101);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $109=$mod;
 var $110=(($109+132)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=((($111)+(1))|0);
 HEAP32[(($110)>>2)]=$112;
 var $113=$mod;
 var $114=_pattern_init($113);
 var $115=($114|0)<0;
 if($115){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=104;break;
 case 21: 
 var $118=$3;
 var $119=_hio_read8($118);
 var $120=($119&255);
 $a=$120;
 var $121=$a;
 var $122=($121|0)!=0;
 if($122){label=22;break;}else{label=24;break;}
 case 22: 
 var $124=$a;
 var $125=($124|0)!=1;
 if($125){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=104;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $130=$mod;
 var $131=(($130+156)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$mod;
 var $134=(($133+136)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(Math_imul($132,$135)|0);
 var $137=($136<<1);
 $size=$137;
 var $138=$size;
 var $139=_malloc($138);
 $buf=$139;
 var $140=($139|0)==0;
 if($140){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-1;
 label=104;break;
 case 28: 
 var $143=$a;
 var $144=($143|0)!=0;
 if($144){label=29;break;}else{label=32;break;}
 case 29: 
 var $146=$3;
 var $147=(($146+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=$buf;
 var $150=$size;
 var $151=$size;
 var $152=_read_lzw_dynamic($148,$149,13,0,$150,$151,31);
 $x=$152;
 var $153=$x;
 var $154=($153|0)==0;
 if($154){label=30;break;}else{label=31;break;}
 case 30: 
 var $156=$buf;
 _free($156);
 $1=-1;
 label=104;break;
 case 31: 
 label=33;break;
 case 32: 
 var $159=$buf;
 var $160=$size;
 var $161=$3;
 var $162=_hio_read($159,1,$160,$161);
 label=33;break;
 case 33: 
 $i=0;
 label=34;break;
 case 34: 
 var $165=$i;
 var $166=$mod;
 var $167=(($166+156)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($165|0)<($168|0);
 if($169){label=35;break;}else{label=45;break;}
 case 35: 
 var $171=$mod;
 var $172=$i;
 var $173=_pattern_alloc($171,$172);
 var $174=($173|0)<0;
 if($174){label=36;break;}else{label=37;break;}
 case 36: 
 var $176=$buf;
 _free($176);
 $1=-1;
 label=104;break;
 case 37: 
 var $178=$i;
 var $179=$mod;
 var $180=(($179+168)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+($178<<2))|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183)|0);
 HEAP32[(($184)>>2)]=64;
 $j=0;
 label=38;break;
 case 38: 
 var $186=$j;
 var $187=$mod;
 var $188=(($187+136)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($186|0)<($189|0);
 if($190){label=39;break;}else{label=43;break;}
 case 39: 
 var $192=$i;
 var $193=$mod;
 var $194=(($193+136)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(Math_imul($192,$195)|0);
 var $197=$j;
 var $198=((($196)+($197))|0);
 var $199=($198<<1);
 $idx=$199;
 var $200=$idx;
 var $201=$buf;
 var $202=(($201+$200)|0);
 var $203=_readptr16l($202);
 var $204=$j;
 var $205=$i;
 var $206=$mod;
 var $207=(($206+168)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+($205<<2))|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+4)|0);
 var $212=(($211+($204<<2))|0);
 HEAP32[(($212)>>2)]=$203;
 var $213=$j;
 var $214=$i;
 var $215=$mod;
 var $216=(($215+168)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+($214<<2))|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+4)|0);
 var $221=(($220+($213<<2))|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=($222|0)==4096;
 if($223){label=40;break;}else{label=41;break;}
 case 40: 
 var $225=$mod;
 var $226=(($225+132)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=((($227)-(1))|0);
 var $229=$j;
 var $230=$i;
 var $231=$mod;
 var $232=(($231+168)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+($230<<2))|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+4)|0);
 var $237=(($236+($229<<2))|0);
 HEAP32[(($237)>>2)]=$228;
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 var $240=$j;
 var $241=((($240)+(1))|0);
 $j=$241;
 label=38;break;
 case 43: 
 var $243=$i;
 var $244=(($243)&255);
 var $245=$i;
 var $246=$mod;
 var $247=(($246+952)|0);
 var $248=(($247+$245)|0);
 HEAP8[($248)]=$244;
 label=44;break;
 case 44: 
 var $250=$i;
 var $251=((($250)+(1))|0);
 $i=$251;
 label=34;break;
 case 45: 
 var $253=$buf;
 _free($253);
 var $254=$3;
 var $255=_hio_read8($254);
 var $256=($255&255);
 $a=$256;
 var $257=$a;
 var $258=($257|0)!=0;
 if($258){label=46;break;}else{label=48;break;}
 case 46: 
 var $260=$a;
 var $261=($260|0)!=1;
 if($261){label=47;break;}else{label=48;break;}
 case 47: 
 $1=-1;
 label=104;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 var $268=$mod;
 var $269=(($268+132)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=((($270)-(1))|0);
 var $272=($271<<6);
 var $273=($272<<2);
 $size=$273;
 var $274=$size;
 var $275=_malloc($274);
 $buf=$275;
 var $276=($275|0)==0;
 if($276){label=53;break;}else{label=54;break;}
 case 53: 
 $1=-1;
 label=104;break;
 case 54: 
 var $279=$a;
 var $280=($279|0)!=0;
 if($280){label=55;break;}else{label=58;break;}
 case 55: 
 var $282=$3;
 var $283=(($282+4)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=$buf;
 var $286=$size;
 var $287=$size;
 var $288=_read_lzw_dynamic($284,$285,13,0,$286,$287,31);
 $x1=$288;
 var $289=$x1;
 var $290=($289|0)==0;
 if($290){label=56;break;}else{label=57;break;}
 case 56: 
 var $292=$buf;
 _free($292);
 $1=-1;
 label=104;break;
 case 57: 
 label=59;break;
 case 58: 
 var $295=$buf;
 var $296=$size;
 var $297=$3;
 var $298=_hio_read($295,1,$296,$297);
 label=59;break;
 case 59: 
 $i=0;
 label=60;break;
 case 60: 
 var $301=$i;
 var $302=$mod;
 var $303=(($302+132)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=((($304)-(1))|0);
 var $306=($301|0)<($305|0);
 if($306){label=61;break;}else{label=74;break;}
 case 61: 
 var $308=$mod;
 var $309=$i;
 var $310=_track_alloc($308,$309,64);
 var $311=($310|0)<0;
 if($311){label=62;break;}else{label=63;break;}
 case 62: 
 var $313=$buf;
 _free($313);
 $1=-1;
 label=104;break;
 case 63: 
 $j=0;
 label=64;break;
 case 64: 
 var $316=$j;
 var $317=$i;
 var $318=$mod;
 var $319=(($318+172)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320+($317<<2))|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=($316|0)<($324|0);
 if($325){label=65;break;}else{label=72;break;}
 case 65: 
 var $327=$j;
 var $328=$i;
 var $329=$mod;
 var $330=(($329+172)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($331+($328<<2))|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($333+4)|0);
 var $335=(($334+($327<<3))|0);
 $event=$335;
 var $336=$i;
 var $337=($336<<6);
 var $338=$j;
 var $339=((($337)+($338))|0);
 var $340=($339<<2);
 var $341=$buf;
 var $342=(($341+$340)|0);
 var $343=_readptr32l($342);
 $b=$343;
 var $344=$b;
 var $345=$344&63;
 var $346=(($345)&255);
 var $347=$event;
 var $348=(($347)|0);
 HEAP8[($348)]=$346;
 var $349=$event;
 var $350=(($349)|0);
 var $351=HEAP8[($350)];
 var $352=(($351<<24)>>24)!=0;
 if($352){label=66;break;}else{label=67;break;}
 case 66: 
 var $354=$event;
 var $355=(($354)|0);
 var $356=HEAP8[($355)];
 var $357=($356&255);
 var $358=((($357)+(48))|0);
 var $359=(($358)&255);
 HEAP8[($355)]=$359;
 label=67;break;
 case 67: 
 var $361=$b;
 var $362=$361&8128;
 var $363=$362>>>6;
 var $364=(($363)&255);
 var $365=$event;
 var $366=(($365+1)|0);
 HEAP8[($366)]=$364;
 var $367=$b;
 var $368=$367&1032192;
 var $369=$368>>>14;
 var $370=(($369)&255);
 var $371=$event;
 var $372=(($371+3)|0);
 HEAP8[($372)]=$370;
 var $373=$b;
 var $374=$373&-1048576;
 var $375=$374>>>20;
 $parm=$375;
 var $376=$event;
 var $377=(($376+3)|0);
 var $378=HEAP8[($377)];
 var $379=($378&255);
 var $380=$379>>3;
 var $381=(($allowed_effects+$380)|0);
 var $382=HEAP8[($381)];
 var $383=($382&255);
 var $384=$event;
 var $385=(($384+3)|0);
 var $386=HEAP8[($385)];
 var $387=($386&255);
 var $388=$387&7;
 var $389=1<<$388;
 var $390=$383&$389;
 var $391=($390|0)!=0;
 if($391){label=68;break;}else{label=69;break;}
 case 68: 
 var $393=$event;
 var $394=$parm;
 _fix_effect631($393,$394);
 label=70;break;
 case 69: 
 var $396=$event;
 var $397=(($396+3)|0);
 HEAP8[($397)]=0;
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 var $400=$j;
 var $401=((($400)+(1))|0);
 $j=$401;
 label=64;break;
 case 72: 
 label=73;break;
 case 73: 
 var $404=$i;
 var $405=((($404)+(1))|0);
 $i=$405;
 label=60;break;
 case 74: 
 var $407=$buf;
 _free($407);
 var $408=$mod;
 var $409=$i;
 var $410=_track_alloc($408,$409,64);
 var $411=($410|0)<0;
 if($411){label=75;break;}else{label=76;break;}
 case 75: 
 $1=-1;
 label=104;break;
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 $i=0;
 label=79;break;
 case 79: 
 var $417=$i;
 var $418=$mod;
 var $419=(($418+140)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=($417|0)<($420|0);
 if($421){label=80;break;}else{label=99;break;}
 case 80: 
 var $423=$buf2;
 _memset($423, 0, 128)|0;
 var $424=(($buf2)|0);
 var $425=$i;
 var $426=(($sn+($425<<2))|0);
 var $427=HEAP32[(($426)>>2)];
 var $428=$427&127;
 var $429=$3;
 var $430=_hio_read($424,1,$428,$429);
 var $431=$mod;
 var $432=$i;
 var $433=(($buf2)|0);
 var $434=_instrument_name($431,$432,$433,32);
 var $435=$i;
 var $436=(($sn+($435<<2))|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=$437^-1;
 var $439=$438&128;
 var $440=($439|0)!=0;
 if($440){label=81;break;}else{label=84;break;}
 case 81: 
 var $442=$3;
 var $443=_hio_read24l($442);
 var $444=$443<<1;
 var $445=$i;
 var $446=$mod;
 var $447=(($446+180)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=(($448+((($445)*(52))&-1))|0);
 var $450=(($449+36)|0);
 HEAP32[(($450)>>2)]=$444;
 var $451=$3;
 var $452=_hio_read24l($451);
 var $453=$452<<1;
 $looplen=$453;
 var $454=$looplen;
 var $455=($454|0)>2;
 if($455){label=82;break;}else{label=83;break;}
 case 82: 
 var $457=$i;
 var $458=$mod;
 var $459=(($458+180)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=(($460+((($457)*(52))&-1))|0);
 var $462=(($461+44)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=$463|2;
 HEAP32[(($462)>>2)]=$464;
 label=83;break;
 case 83: 
 var $466=$i;
 var $467=$mod;
 var $468=(($467+180)|0);
 var $469=HEAP32[(($468)>>2)];
 var $470=(($469+((($466)*(52))&-1))|0);
 var $471=(($470+36)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=$looplen;
 var $474=((($472)+($473))|0);
 var $475=$i;
 var $476=$mod;
 var $477=(($476+180)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=(($478+((($475)*(52))&-1))|0);
 var $480=(($479+40)|0);
 HEAP32[(($480)>>2)]=$474;
 var $481=$3;
 var $482=_hio_read8($481);
 var $483=($482&255);
 var $484=$i;
 var $485=$mod;
 var $486=(($485+176)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=(($487+((($484)*(764))&-1))|0);
 var $489=(($488+756)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=(($490)|0);
 var $492=(($491)|0);
 HEAP32[(($492)>>2)]=$483;
 var $493=$i;
 var $494=$mod;
 var $495=(($494+176)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($496+((($493)*(764))&-1))|0);
 var $498=(($497+756)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=(($499)|0);
 var $501=(($500+8)|0);
 HEAP32[(($501)>>2)]=128;
 var $502=$3;
 var $503=_hio_read8($502);
 var $504=($503&255);
 var $505=$504<<4;
 var $506=(($505)&255);
 var $507=(($506<<24)>>24);
 var $508=$i;
 var $509=$mod;
 var $510=(($509+176)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=(($511+((($508)*(764))&-1))|0);
 var $513=(($512+756)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=(($514)|0);
 var $516=(($515+16)|0);
 HEAP32[(($516)>>2)]=$507;
 var $517=$i;
 var $518=$i;
 var $519=$mod;
 var $520=(($519+176)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(($521+((($518)*(764))&-1))|0);
 var $523=(($522+756)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(($524)|0);
 var $526=(($525+40)|0);
 HEAP32[(($526)>>2)]=$517;
 label=84;break;
 case 84: 
 label=85;break;
 case 85: 
 label=86;break;
 case 86: 
 var $530=$i;
 var $531=(($sn+($530<<2))|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=$532&128;
 var $534=($533|0)!=0;
 if($534){label=88;break;}else{label=87;break;}
 case 87: 
 var $536=$i;
 var $537=$mod;
 var $538=(($537+180)|0);
 var $539=HEAP32[(($538)>>2)];
 var $540=(($539+((($536)*(52))&-1))|0);
 var $541=(($540+32)|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=($542|0)==0;
 if($543){label=88;break;}else{label=89;break;}
 case 88: 
 label=98;break;
 case 89: 
 var $546=$3;
 var $547=_hio_read8($546);
 var $548=($547&255);
 $a=$548;
 var $549=$a;
 var $550=($549|0)!=0;
 if($550){label=90;break;}else{label=92;break;}
 case 90: 
 var $552=$a;
 var $553=($552|0)!=1;
 if($553){label=91;break;}else{label=92;break;}
 case 91: 
 var $555=HEAP32[((_stderr)>>2)];
 var $556=_fprintf($555,25840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=92;break;
 case 92: 
 var $558=$a;
 var $559=($558|0)==1;
 if($559){label=93;break;}else{label=94;break;}
 case 93: 
 var $561=$i;
 var $562=$mod;
 var $563=(($562+180)|0);
 var $564=HEAP32[(($563)>>2)];
 var $565=(($564+((($561)*(52))&-1))|0);
 var $566=(($565+32)|0);
 var $567=HEAP32[(($566)>>2)];
 var $568=_malloc($567);
 $b3=$568;
 var $569=$3;
 var $570=(($569+4)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=$b3;
 var $573=$i;
 var $574=$mod;
 var $575=(($574+180)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=(($576+((($573)*(52))&-1))|0);
 var $578=(($577+32)|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=$i;
 var $581=$mod;
 var $582=(($581+180)|0);
 var $583=HEAP32[(($582)>>2)];
 var $584=(($583+((($580)*(52))&-1))|0);
 var $585=(($584+32)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=_read_lzw_dynamic($571,$572,13,0,$579,$586,31);
 var $588=$2;
 var $589=$i;
 var $590=$mod;
 var $591=(($590+180)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(($592+((($589)*(52))&-1))|0);
 var $594=$b3;
 var $595=_load_sample($588,0,17,$593,$594);
 $ret=$595;
 var $596=$b3;
 _free($596);
 label=95;break;
 case 94: 
 var $598=$2;
 var $599=$3;
 var $600=$i;
 var $601=$mod;
 var $602=(($601+180)|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=(($603+((($600)*(52))&-1))|0);
 var $605=_load_sample($598,$599,128,$604,0);
 $ret=$605;
 label=95;break;
 case 95: 
 var $607=$ret;
 var $608=($607|0)<0;
 if($608){label=96;break;}else{label=97;break;}
 case 96: 
 $1=-1;
 label=104;break;
 case 97: 
 label=98;break;
 case 98: 
 var $612=$i;
 var $613=((($612)+(1))|0);
 $i=$613;
 label=79;break;
 case 99: 
 $i=0;
 label=100;break;
 case 100: 
 var $616=$i;
 var $617=$mod;
 var $618=(($617+136)|0);
 var $619=HEAP32[(($618)>>2)];
 var $620=($616|0)<($619|0);
 if($620){label=101;break;}else{label=103;break;}
 case 101: 
 var $622=$i;
 var $623=((($622)+(3))|0);
 var $624=(((($623|0))/(2))&-1);
 var $625=(((($624|0))%(2))&-1);
 var $626=((($625)*(255))&-1);
 var $627=$i;
 var $628=$mod;
 var $629=(($628+184)|0);
 var $630=(($629+((($627)*(12))&-1))|0);
 var $631=(($630)|0);
 HEAP32[(($631)>>2)]=$626;
 label=102;break;
 case 102: 
 var $633=$i;
 var $634=((($633)+(1))|0);
 $i=$634;
 label=100;break;
 case 103: 
 $1=0;
 label=104;break;
 case 104: 
 var $637=$1;
 STACKTOP=sp;return $637;
  default: assert(0, "bad label: " + label);
 }
}
function _readptr16l($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 $1=$p;
 var $2=$1;
 var $3=(($2+1)|0);
 $1=$3;
 var $4=HEAP8[($2)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 $1=$7;
 var $8=HEAP8[($6)];
 var $9=($8&255);
 $b=$9;
 var $10=$b;
 var $11=$10<<8;
 var $12=$a;
 var $13=$11|$12;
 STACKTOP=sp;return $13;
}
function _readptr32l($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 var $d;
 $1=$p;
 var $2=$1;
 var $3=(($2+1)|0);
 $1=$3;
 var $4=HEAP8[($2)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 $1=$7;
 var $8=HEAP8[($6)];
 var $9=($8&255);
 $b=$9;
 var $10=$1;
 var $11=(($10+1)|0);
 $1=$11;
 var $12=HEAP8[($10)];
 var $13=($12&255);
 $c=$13;
 var $14=$1;
 var $15=(($14+1)|0);
 $1=$15;
 var $16=HEAP8[($14)];
 var $17=($16&255);
 $d=$17;
 var $18=$d;
 var $19=$18<<24;
 var $20=$c;
 var $21=$20<<16;
 var $22=$19|$21;
 var $23=$b;
 var $24=$23<<8;
 var $25=$22|$24;
 var $26=$a;
 var $27=$25|$26;
 STACKTOP=sp;return $27;
}
function _fix_effect631($e,$parm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $pitch_effect;
 var $vol_effect;
 $1=$e;
 $2=$parm;
 var $3=$1;
 var $4=(($3+3)|0);
 var $5=HEAP8[($4)];
 var $6=($5&255);
 switch(($6|0)){case 10:{ label=10;break;}case 11:case 12:case 13:case 15:{ label=14;break;}case 19:{ label=15;break;}case 20:{ label=16;break;}case 21:{ label=17;break;}case 22:{ label=18;break;}case 23:{ label=19;break;}case 0:case 1:case 2:{ label=2;break;}case 25:{ label=20;break;}case 17:case 18:case 26:case 27:{ label=24;break;}case 28:{ label=35;break;}case 29:{ label=36;break;}case 30:{ label=37;break;}case 31:{ label=38;break;}case 32:{ label=39;break;}case 33:{ label=42;break;}case 34:{ label=45;break;}case 47:{ label=48;break;}case 3:case 4:case 7:{ label=5;break;}case 42:case 43:case 48:case 49:case 50:{ label=53;break;}case 5:case 6:{ label=6;break;}case 9:{ label=9;break;}default:{label=54;break;}}break;
 case 2: 
 var $8=$2;
 var $9=$8&255;
 var $10=(($9)&255);
 var $11=$1;
 var $12=(($11+4)|0);
 HEAP8[($12)]=$10;
 var $13=$2;
 var $14=$13>>8;
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$1;
 var $18=(($17+5)|0);
 HEAP8[($18)]=-96;
 var $19=$2;
 var $20=$19>>8;
 var $21=(($20)&255);
 var $22=$1;
 var $23=(($22+6)|0);
 HEAP8[($23)]=$21;
 label=4;break;
 case 4: 
 label=55;break;
 case 5: 
 var $26=$2;
 var $27=(($26)&255);
 var $28=$1;
 var $29=(($28+4)|0);
 HEAP8[($29)]=$27;
 label=55;break;
 case 6: 
 var $31=$2;
 var $32=(($31)&255);
 var $33=$1;
 var $34=(($33+4)|0);
 HEAP8[($34)]=$32;
 var $35=$2;
 var $36=($35|0)!=0;
 if($36){label=8;break;}else{label=7;break;}
 case 7: 
 var $38=$1;
 var $39=(($38+3)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=((($41)-(2))|0);
 var $43=(($42)&255);
 HEAP8[($39)]=$43;
 label=8;break;
 case 8: 
 label=55;break;
 case 9: 
 var $46=$2;
 var $47=$46>>1;
 var $48=(($47)&255);
 var $49=$1;
 var $50=(($49+4)|0);
 HEAP8[($50)]=$48;
 label=55;break;
 case 10: 
 var $52=$2;
 var $53=$52&255;
 var $54=($53|0)!=0;
 if($54){label=11;break;}else{label=12;break;}
 case 11: 
 var $56=$2;
 var $57=$56&255;
 var $58=(($57)&255);
 var $59=$1;
 var $60=(($59+4)|0);
 HEAP8[($60)]=$58;
 label=13;break;
 case 12: 
 var $62=$1;
 var $63=(($62+3)|0);
 HEAP8[($63)]=0;
 label=13;break;
 case 13: 
 var $65=$1;
 var $66=(($65+5)|0);
 HEAP8[($66)]=14;
 var $67=$2;
 var $68=$67&3840;
 var $69=$68>>8;
 var $70=16|$69;
 var $71=(($70)&255);
 var $72=$1;
 var $73=(($72+6)|0);
 HEAP8[($73)]=$71;
 label=55;break;
 case 14: 
 var $75=$2;
 var $76=(($75)&255);
 var $77=$1;
 var $78=(($77+4)|0);
 HEAP8[($78)]=$76;
 label=55;break;
 case 15: 
 var $80=$1;
 var $81=(($80+3)|0);
 HEAP8[($81)]=14;
 var $82=$2;
 var $83=$82&15;
 var $84=48|$83;
 var $85=(($84)&255);
 var $86=$1;
 var $87=(($86+4)|0);
 HEAP8[($87)]=$85;
 label=55;break;
 case 16: 
 var $89=$1;
 var $90=(($89+3)|0);
 HEAP8[($90)]=14;
 var $91=$2;
 var $92=$91&15;
 var $93=64|$92;
 var $94=(($93)&255);
 var $95=$1;
 var $96=(($95+4)|0);
 HEAP8[($96)]=$94;
 label=55;break;
 case 17: 
 var $98=$1;
 var $99=(($98+3)|0);
 HEAP8[($99)]=14;
 var $100=$2;
 var $101=$100&15;
 var $102=80|$101;
 var $103=(($102)&255);
 var $104=$1;
 var $105=(($104+4)|0);
 HEAP8[($105)]=$103;
 label=55;break;
 case 18: 
 var $107=$1;
 var $108=(($107+3)|0);
 HEAP8[($108)]=14;
 var $109=$2;
 var $110=$109&15;
 var $111=96|$110;
 var $112=(($111)&255);
 var $113=$1;
 var $114=(($113+4)|0);
 HEAP8[($114)]=$112;
 label=55;break;
 case 19: 
 var $116=$1;
 var $117=(($116+3)|0);
 HEAP8[($117)]=14;
 var $118=$2;
 var $119=$118&15;
 var $120=112|$119;
 var $121=(($120)&255);
 var $122=$1;
 var $123=(($122+4)|0);
 HEAP8[($123)]=$121;
 label=55;break;
 case 20: 
 var $125=$2;
 var $126=($125|0)<16;
 if($126){label=21;break;}else{label=22;break;}
 case 21: 
 var $128=$1;
 var $129=(($128+3)|0);
 HEAP8[($129)]=14;
 var $130=$2;
 var $131=$130&15;
 var $132=144|$131;
 var $133=(($132)&255);
 var $134=$1;
 var $135=(($134+4)|0);
 HEAP8[($135)]=$133;
 label=23;break;
 case 22: 
 var $137=$1;
 var $138=(($137+3)|0);
 HEAP8[($138)]=0;
 label=23;break;
 case 23: 
 label=55;break;
 case 24: 
 var $141=$1;
 var $142=(($141+3)|0);
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=($144|0)==17;
 if($145){var $153=1;label=26;break;}else{label=25;break;}
 case 25: 
 var $147=$1;
 var $148=(($147+3)|0);
 var $149=HEAP8[($148)];
 var $150=($149&255);
 var $151=($150|0)==26;
 var $153=$151;label=26;break;
 case 26: 
 var $153;
 var $154=($153?1:2);
 var $155=(($154)&255);
 $pitch_effect=$155;
 var $156=$1;
 var $157=(($156+3)|0);
 var $158=HEAP8[($157)];
 var $159=($158&255);
 var $160=($159|0)==17;
 if($160){var $168=1;label=28;break;}else{label=27;break;}
 case 27: 
 var $162=$1;
 var $163=(($162+3)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=($165|0)==18;
 var $168=$166;label=28;break;
 case 28: 
 var $168;
 var $169=($168?10:11);
 var $170=(($169)&255);
 $vol_effect=$170;
 var $171=$2;
 var $172=$171&255;
 var $173=($172|0)!=0;
 if($173){label=29;break;}else{label=31;break;}
 case 29: 
 var $175=$2;
 var $176=$175&255;
 var $177=($176|0)<16;
 if($177){label=30;break;}else{label=31;break;}
 case 30: 
 var $179=$1;
 var $180=(($179+3)|0);
 HEAP8[($180)]=14;
 var $181=$pitch_effect;
 var $182=($181&255);
 var $183=$182<<4;
 var $184=$2;
 var $185=$184&15;
 var $186=$183|$185;
 var $187=(($186)&255);
 var $188=$1;
 var $189=(($188+4)|0);
 HEAP8[($189)]=$187;
 label=32;break;
 case 31: 
 var $191=$1;
 var $192=(($191+3)|0);
 HEAP8[($192)]=0;
 label=32;break;
 case 32: 
 var $194=$2;
 var $195=$194>>8;
 var $196=($195|0)!=0;
 if($196){label=33;break;}else{label=34;break;}
 case 33: 
 var $198=$1;
 var $199=(($198+5)|0);
 HEAP8[($199)]=14;
 var $200=$vol_effect;
 var $201=($200&255);
 var $202=$201<<4;
 var $203=$2;
 var $204=$203>>8;
 var $205=$202|$204;
 var $206=(($205)&255);
 var $207=$1;
 var $208=(($207+6)|0);
 HEAP8[($208)]=$206;
 label=34;break;
 case 34: 
 label=55;break;
 case 35: 
 var $211=$1;
 var $212=(($211+3)|0);
 HEAP8[($212)]=14;
 var $213=$2;
 var $214=$213&15;
 var $215=192|$214;
 var $216=(($215)&255);
 var $217=$1;
 var $218=(($217+4)|0);
 HEAP8[($218)]=$216;
 label=55;break;
 case 36: 
 var $220=$1;
 var $221=(($220+3)|0);
 HEAP8[($221)]=14;
 var $222=$2;
 var $223=$222&15;
 var $224=208|$223;
 var $225=(($224)&255);
 var $226=$1;
 var $227=(($226+4)|0);
 HEAP8[($227)]=$225;
 label=55;break;
 case 37: 
 var $229=$1;
 var $230=(($229+3)|0);
 HEAP8[($230)]=14;
 var $231=$2;
 var $232=$231&15;
 var $233=224|$232;
 var $234=(($233)&255);
 var $235=$1;
 var $236=(($235+4)|0);
 HEAP8[($236)]=$234;
 label=55;break;
 case 38: 
 var $238=$1;
 var $239=(($238+3)|0);
 HEAP8[($239)]=0;
 label=55;break;
 case 39: 
 var $241=$1;
 var $242=(($241+3)|0);
 HEAP8[($242)]=0;
 var $243=$2;
 var $244=$243&255;
 var $245=(($244)&255);
 var $246=$1;
 var $247=(($246+4)|0);
 HEAP8[($247)]=$245;
 var $248=$2;
 var $249=$248>>8;
 var $250=($249|0)!=0;
 if($250){label=40;break;}else{label=41;break;}
 case 40: 
 var $252=$1;
 var $253=(($252+5)|0);
 HEAP8[($253)]=-95;
 var $254=$2;
 var $255=$254>>8;
 var $256=(($255)&255);
 var $257=$1;
 var $258=(($257+6)|0);
 HEAP8[($258)]=$256;
 label=41;break;
 case 41: 
 label=55;break;
 case 42: 
 var $261=$1;
 var $262=(($261+3)|0);
 HEAP8[($262)]=1;
 var $263=$2;
 var $264=$263&255;
 var $265=(($264)&255);
 var $266=$1;
 var $267=(($266+4)|0);
 HEAP8[($267)]=$265;
 var $268=$2;
 var $269=$268>>8;
 var $270=($269|0)!=0;
 if($270){label=43;break;}else{label=44;break;}
 case 43: 
 var $272=$1;
 var $273=(($272+5)|0);
 HEAP8[($273)]=-95;
 var $274=$2;
 var $275=$274>>8;
 var $276=(($275)&255);
 var $277=$1;
 var $278=(($277+6)|0);
 HEAP8[($278)]=$276;
 label=44;break;
 case 44: 
 label=55;break;
 case 45: 
 var $281=$1;
 var $282=(($281+3)|0);
 HEAP8[($282)]=2;
 var $283=$2;
 var $284=$283&255;
 var $285=(($284)&255);
 var $286=$1;
 var $287=(($286+4)|0);
 HEAP8[($287)]=$285;
 var $288=$2;
 var $289=$288>>8;
 var $290=($289|0)!=0;
 if($290){label=46;break;}else{label=47;break;}
 case 46: 
 var $292=$1;
 var $293=(($292+5)|0);
 HEAP8[($293)]=-95;
 var $294=$2;
 var $295=$294>>8;
 var $296=(($295)&255);
 var $297=$1;
 var $298=(($297+6)|0);
 HEAP8[($298)]=$296;
 label=47;break;
 case 47: 
 label=55;break;
 case 48: 
 var $301=$2;
 var $302=($301|0)>=256;
 if($302){label=49;break;}else{label=51;break;}
 case 49: 
 var $304=$2;
 var $305=($304|0)<=2048;
 if($305){label=50;break;}else{label=51;break;}
 case 50: 
 var $307=$1;
 var $308=(($307+3)|0);
 HEAP8[($308)]=15;
 var $309=$2;
 var $310=((($309)+(4))|0);
 var $311=$310>>3;
 var $312=(($311)&255);
 var $313=$1;
 var $314=(($313+4)|0);
 HEAP8[($314)]=$312;
 label=52;break;
 case 51: 
 label=52;break;
 case 52: 
 label=55;break;
 case 53: 
 label=54;break;
 case 54: 
 var $319=$1;
 var $320=(($319+3)|0);
 HEAP8[($320)]=0;
 label=55;break;
 case 55: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _tcb_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buffer=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buffer)|0);
 var $6=$2;
 var $7=_hio_read($5,1,8,$6);
 var $8=($7>>>0)<8;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=7;break;
 case 3: 
 var $11=(($buffer)|0);
 var $12=_memcmp($11,24304,8);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 var $15=(($buffer)|0);
 var $16=_memcmp($15,23392,8);
 var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=7;break;
 case 6: 
 var $20=$2;
 var $21=$3;
 _read_title($20,$21,0);
 $1=0;
 label=7;break;
 case 7: 
 var $23=$1;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _tcb_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $event;
 var $i;
 var $j;
 var $k;
 var $buffer=sp;
 var $base_offs;
 var $soffs=(sp)+(16);
 var $unk1=(sp)+(80);
 var $unk2=(sp)+(96);
 var $unk3=(sp)+(112);
 var $b;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($buffer)|0);
 var $13=$3;
 var $14=_hio_read($12,8,1,$13);
 var $15=$2;
 var $16=(($buffer)|0);
 _set_type($15,21576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=$3;
 var $18=_hio_read16b($17);
 var $19=$3;
 var $20=_hio_read16b($19);
 var $21=($20&65535);
 var $22=$mod;
 var $23=(($22+128)|0);
 HEAP32[(($23)>>2)]=$21;
 var $24=$mod;
 var $25=(($24+140)|0);
 HEAP32[(($25)>>2)]=16;
 var $26=$mod;
 var $27=(($26+140)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$mod;
 var $30=(($29+144)|0);
 HEAP32[(($30)>>2)]=$28;
 var $31=$mod;
 var $32=(($31+136)|0);
 HEAP32[(($32)>>2)]=4;
 var $33=$mod;
 var $34=(($33+128)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$mod;
 var $37=(($36+136)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(Math_imul($35,$38)|0);
 var $40=$mod;
 var $41=(($40+132)|0);
 HEAP32[(($41)>>2)]=$39;
 var $42=$2;
 var $43=(($42+1280)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$44|8192;
 HEAP32[(($43)>>2)]=$45;
 var $46=$3;
 var $47=_hio_read16b($46);
 $i=0;
 label=4;break;
 case 4: 
 var $49=$i;
 var $50=($49|0)<128;
 if($50){label=5;break;}else{label=7;break;}
 case 5: 
 var $52=$3;
 var $53=_hio_read8($52);
 var $54=$i;
 var $55=$mod;
 var $56=(($55+952)|0);
 var $57=(($56+$54)|0);
 HEAP8[($57)]=$53;
 label=6;break;
 case 6: 
 var $59=$i;
 var $60=((($59)+(1))|0);
 $i=$60;
 label=4;break;
 case 7: 
 var $62=$3;
 var $63=_hio_read8($62);
 var $64=($63&255);
 var $65=$mod;
 var $66=(($65+156)|0);
 HEAP32[(($66)>>2)]=$64;
 var $67=$3;
 var $68=_hio_read8($67);
 var $69=$3;
 var $70=_hio_read16b($69);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $77=$mod;
 var $78=_instrument_init($77);
 var $79=($78|0)<0;
 if($79){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=83;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $83=$i;
 var $84=$mod;
 var $85=(($84+140)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($83|0)<($86|0);
 if($87){label=17;break;}else{label=21;break;}
 case 17: 
 var $89=$mod;
 var $90=$i;
 var $91=_subinstrument_alloc($89,$90,1);
 var $92=($91|0)<0;
 if($92){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=83;break;
 case 19: 
 var $95=(($buffer)|0);
 var $96=$3;
 var $97=_hio_read($95,8,1,$96);
 var $98=$mod;
 var $99=$i;
 var $100=(($buffer)|0);
 var $101=_instrument_name($98,$99,$100,8);
 label=20;break;
 case 20: 
 var $103=$i;
 var $104=((($103)+(1))|0);
 $i=$104;
 label=16;break;
 case 21: 
 var $106=$3;
 var $107=_hio_read16b($106);
 $i=0;
 label=22;break;
 case 22: 
 var $109=$i;
 var $110=($109|0)<5;
 if($110){label=23;break;}else{label=25;break;}
 case 23: 
 var $112=$3;
 var $113=_hio_read16b($112);
 label=24;break;
 case 24: 
 var $115=$i;
 var $116=((($115)+(1))|0);
 $i=$116;
 label=22;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 var $119=$i;
 var $120=($119|0)<5;
 if($120){label=27;break;}else{label=29;break;}
 case 27: 
 var $122=$3;
 var $123=_hio_read16b($122);
 label=28;break;
 case 28: 
 var $125=$i;
 var $126=((($125)+(1))|0);
 $i=$126;
 label=26;break;
 case 29: 
 $i=0;
 label=30;break;
 case 30: 
 var $129=$i;
 var $130=($129|0)<5;
 if($130){label=31;break;}else{label=33;break;}
 case 31: 
 var $132=$3;
 var $133=_hio_read16b($132);
 label=32;break;
 case 32: 
 var $135=$i;
 var $136=((($135)+(1))|0);
 $i=$136;
 label=30;break;
 case 33: 
 var $138=$mod;
 var $139=_pattern_init($138);
 var $140=($139|0)<0;
 if($140){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=83;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 $i=0;
 label=38;break;
 case 38: 
 var $146=$i;
 var $147=$mod;
 var $148=(($147+128)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($146|0)<($149|0);
 if($150){label=39;break;}else{label=60;break;}
 case 39: 
 var $152=$mod;
 var $153=$i;
 var $154=_pattern_tracks_alloc($152,$153,64);
 var $155=($154|0)<0;
 if($155){label=40;break;}else{label=41;break;}
 case 40: 
 $1=-1;
 label=83;break;
 case 41: 
 $j=0;
 label=42;break;
 case 42: 
 var $159=$j;
 var $160=$i;
 var $161=$mod;
 var $162=(($161+168)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+($160<<2))|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($159|0)<($167|0);
 if($168){label=43;break;}else{label=58;break;}
 case 43: 
 $k=0;
 label=44;break;
 case 44: 
 var $171=$k;
 var $172=$mod;
 var $173=(($172+136)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=($171|0)<($174|0);
 if($175){label=45;break;}else{label=56;break;}
 case 45: 
 var $177=$j;
 var $178=$k;
 var $179=$i;
 var $180=$2;
 var $181=(($180)|0);
 var $182=(($181+168)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+($179<<2))|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+4)|0);
 var $187=(($186+($178<<2))|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=$2;
 var $190=(($189)|0);
 var $191=(($190+172)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+($188<<2))|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194+4)|0);
 var $196=(($195+($177<<3))|0);
 $event=$196;
 var $197=$3;
 var $198=_hio_read8($197);
 var $199=($198&255);
 $b=$199;
 var $200=$b;
 var $201=($200|0)!=0;
 if($201){label=46;break;}else{label=47;break;}
 case 46: 
 var $203=$b;
 var $204=$203>>4;
 var $205=((($204)*(12))&-1);
 var $206=(($205)&255);
 var $207=$event;
 var $208=(($207)|0);
 HEAP8[($208)]=$206;
 var $209=$b;
 var $210=$209&15;
 var $211=((($210)+(36))|0);
 var $212=$event;
 var $213=(($212)|0);
 var $214=HEAP8[($213)];
 var $215=($214&255);
 var $216=((($215)+($211))|0);
 var $217=(($216)&255);
 HEAP8[($213)]=$217;
 label=47;break;
 case 47: 
 var $219=$3;
 var $220=_hio_read8($219);
 var $221=($220&255);
 $b=$221;
 var $222=$b;
 var $223=$222>>4;
 var $224=(($223)&255);
 var $225=$event;
 var $226=(($225+1)|0);
 HEAP8[($226)]=$224;
 var $227=$event;
 var $228=(($227+1)|0);
 var $229=HEAP8[($228)];
 var $230=(($229<<24)>>24)!=0;
 if($230){label=48;break;}else{label=49;break;}
 case 48: 
 var $232=$event;
 var $233=(($232+1)|0);
 var $234=HEAP8[($233)];
 var $235=($234&255);
 var $236=((($235)+(1))|0);
 var $237=(($236)&255);
 HEAP8[($233)]=$237;
 label=49;break;
 case 49: 
 var $239=$b;
 var $240=$239&15;
 $b=$240;
 var $241=($240|0)!=0;
 if($241){label=50;break;}else{label=54;break;}
 case 50: 
 var $243=$b;
 if(($243|0)==13){ label=51;break;}else{label=52;break;}
 case 51: 
 var $245=$event;
 var $246=(($245+3)|0);
 HEAP8[($246)]=13;
 var $247=$event;
 var $248=(($247+4)|0);
 HEAP8[($248)]=0;
 label=53;break;
 case 52: 
 var $250=$b;
 var $251=_printf(25808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$250,tempVarArgs)); STACKTOP=tempVarArgs;
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 var $255=$k;
 var $256=((($255)+(1))|0);
 $k=$256;
 label=44;break;
 case 56: 
 label=57;break;
 case 57: 
 var $259=$j;
 var $260=((($259)+(1))|0);
 $j=$260;
 label=42;break;
 case 58: 
 label=59;break;
 case 59: 
 var $263=$i;
 var $264=((($263)+(1))|0);
 $i=$264;
 label=38;break;
 case 60: 
 var $266=$3;
 var $267=_hio_tell($266);
 $base_offs=$267;
 var $268=$3;
 var $269=_hio_read32b($268);
 $i=0;
 label=61;break;
 case 61: 
 var $271=$i;
 var $272=$mod;
 var $273=(($272+140)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($271|0)<($274|0);
 if($275){label=62;break;}else{label=64;break;}
 case 62: 
 var $277=$3;
 var $278=_hio_read8($277);
 var $279=($278&255);
 var $280=(((($279|0))/(2))&-1);
 var $281=$i;
 var $282=$mod;
 var $283=(($282+176)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($284+((($281)*(764))&-1))|0);
 var $286=(($285+756)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287)|0);
 var $289=(($288)|0);
 HEAP32[(($289)>>2)]=$280;
 var $290=$i;
 var $291=$mod;
 var $292=(($291+176)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293+((($290)*(764))&-1))|0);
 var $295=(($294+756)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($296)|0);
 var $298=(($297+8)|0);
 HEAP32[(($298)>>2)]=128;
 var $299=$3;
 var $300=_hio_read8($299);
 var $301=$i;
 var $302=(($unk1+$301)|0);
 HEAP8[($302)]=$300;
 var $303=$3;
 var $304=_hio_read8($303);
 var $305=$i;
 var $306=(($unk2+$305)|0);
 HEAP8[($306)]=$304;
 var $307=$3;
 var $308=_hio_read8($307);
 var $309=$i;
 var $310=(($unk3+$309)|0);
 HEAP8[($310)]=$308;
 label=63;break;
 case 63: 
 var $312=$i;
 var $313=((($312)+(1))|0);
 $i=$313;
 label=61;break;
 case 64: 
 $i=0;
 label=65;break;
 case 65: 
 var $316=$i;
 var $317=$mod;
 var $318=(($317+140)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=($316|0)<($319|0);
 if($320){label=66;break;}else{label=68;break;}
 case 66: 
 var $322=$3;
 var $323=_hio_read32b($322);
 var $324=$i;
 var $325=(($soffs+($324<<2))|0);
 HEAP32[(($325)>>2)]=$323;
 var $326=$3;
 var $327=_hio_read32b($326);
 var $328=$i;
 var $329=$mod;
 var $330=(($329+180)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($331+((($328)*(52))&-1))|0);
 var $333=(($332+32)|0);
 HEAP32[(($333)>>2)]=$327;
 label=67;break;
 case 67: 
 var $335=$i;
 var $336=((($335)+(1))|0);
 $i=$336;
 label=65;break;
 case 68: 
 var $338=$3;
 var $339=_hio_read32b($338);
 var $340=$3;
 var $341=_hio_read32b($340);
 var $342=$3;
 var $343=_hio_read32b($342);
 var $344=$3;
 var $345=_hio_read32b($344);
 $i=0;
 label=69;break;
 case 69: 
 var $347=$i;
 var $348=$mod;
 var $349=(($348+140)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=($347|0)<($350|0);
 if($351){label=70;break;}else{label=74;break;}
 case 70: 
 var $353=$i;
 var $354=$mod;
 var $355=(($354+180)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=(($356+((($353)*(52))&-1))|0);
 var $358=(($357+32)|0);
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)!=0;
 var $361=$360^1;
 var $362=$361^1;
 var $363=($362&1);
 var $364=$i;
 var $365=$mod;
 var $366=(($365+176)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($367+((($364)*(764))&-1))|0);
 var $369=(($368+36)|0);
 HEAP32[(($369)>>2)]=$363;
 var $370=$i;
 var $371=$mod;
 var $372=(($371+180)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373+((($370)*(52))&-1))|0);
 var $375=(($374+36)|0);
 HEAP32[(($375)>>2)]=0;
 var $376=$i;
 var $377=$mod;
 var $378=(($377+180)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=(($379+((($376)*(52))&-1))|0);
 var $381=(($380+40)|0);
 HEAP32[(($381)>>2)]=0;
 var $382=$i;
 var $383=$mod;
 var $384=(($383+180)|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=(($385+((($382)*(52))&-1))|0);
 var $387=(($386+40)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=($388|0)>0;
 var $390=($389?2:0);
 var $391=$i;
 var $392=$mod;
 var $393=(($392+180)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=(($394+((($391)*(52))&-1))|0);
 var $396=(($395+44)|0);
 HEAP32[(($396)>>2)]=$390;
 var $397=$i;
 var $398=$mod;
 var $399=(($398+176)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=(($400+((($397)*(764))&-1))|0);
 var $402=(($401+756)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($403)|0);
 var $405=(($404+16)|0);
 HEAP32[(($405)>>2)]=0;
 var $406=$i;
 var $407=$mod;
 var $408=(($407+176)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($409+((($406)*(764))&-1))|0);
 var $411=(($410+756)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($412)|0);
 var $414=(($413+8)|0);
 HEAP32[(($414)>>2)]=128;
 var $415=$i;
 var $416=$i;
 var $417=$mod;
 var $418=(($417+176)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=(($419+((($416)*(764))&-1))|0);
 var $421=(($420+756)|0);
 var $422=HEAP32[(($421)>>2)];
 var $423=(($422)|0);
 var $424=(($423+40)|0);
 HEAP32[(($424)>>2)]=$415;
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 var $428=$i;
 var $429=((($428)+(1))|0);
 $i=$429;
 label=69;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 $i=0;
 label=77;break;
 case 77: 
 var $434=$i;
 var $435=$mod;
 var $436=(($435+140)|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=($434|0)<($437|0);
 if($438){label=78;break;}else{label=82;break;}
 case 78: 
 var $440=$3;
 var $441=$4;
 var $442=$base_offs;
 var $443=((($441)+($442))|0);
 var $444=$i;
 var $445=(($soffs+($444<<2))|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=((($443)+($446))|0);
 var $448=_hio_seek($440,$447,0);
 var $449=$2;
 var $450=$3;
 var $451=$i;
 var $452=$mod;
 var $453=(($452+180)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=(($454+((($451)*(52))&-1))|0);
 var $456=_load_sample($449,$450,2,$455,0);
 var $457=($456|0)<0;
 if($457){label=79;break;}else{label=80;break;}
 case 79: 
 $1=-1;
 label=83;break;
 case 80: 
 label=81;break;
 case 81: 
 var $461=$i;
 var $462=((($461)+(1))|0);
 $i=$462;
 label=77;break;
 case 82: 
 $1=0;
 label=83;break;
 case 83: 
 var $465=$1;
 STACKTOP=sp;return $465;
  default: assert(0, "bad label: " + label);
 }
}
function _ult_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,15,$6);
 var $8=($7>>>0)<15;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=9;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,21384,14);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=9;break;
 case 5: 
 var $16=(($buf+14)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 var $19=($18|0)<48;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($buf+14)|0);
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24);
 var $24=($23|0)>52;
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=9;break;
 case 8: 
 var $27=$2;
 var $28=$3;
 _read_title($27,$28,32);
 $1=0;
 label=9;break;
 case 9: 
 var $30=$1;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _ult_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $k;
 var $ver;
 var $cnt;
 var $event;
 var $ufh=sp;
 var $ufh2=(sp)+(48);
 var $uih=(sp)+(312);
 var $ue=(sp)+(384);
 var $verstr=(sp)+(392);
 var $keep_porta1;
 var $keep_porta2;
 var $x8;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$verstr;
 assert(16 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[((264)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((268)>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((272)>>2)];HEAP32[((($7)+(12))>>2)]=HEAP32[((276)>>2)];
 $keep_porta1=0;
 $keep_porta2=0;
 label=2;break;
 case 2: 
 var $9=$3;
 var $10=$4;
 var $11=_hio_seek($9,$10,0);
 label=3;break;
 case 3: 
 var $13=(($ufh)|0);
 var $14=$13;
 var $15=$3;
 var $16=_hio_read($14,15,1,$15);
 var $17=(($ufh+15)|0);
 var $18=$17;
 var $19=$3;
 var $20=_hio_read($18,32,1,$19);
 var $21=$3;
 var $22=_hio_read8($21);
 var $23=(($ufh+47)|0);
 HEAP8[($23)]=$22;
 var $24=(($ufh)|0);
 var $25=(($24+14)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=((($27)-(48))|0);
 $ver=$28;
 var $29=$mod;
 var $30=(($29)|0);
 var $31=(($30)|0);
 var $32=(($ufh+15)|0);
 var $33=(($32)|0);
 var $34=_strlcpy($31,$33,32);
 var $35=(($ufh+15)|0);
 var $36=(($35)|0);
 HEAP8[($36)]=0;
 var $37=$2;
 var $38=$ver;
 var $39=((($38)-(1))|0);
 var $40=(($verstr+($39<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$ver;
 _set_type($37,21944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$41,HEAP32[(((tempVarArgs)+(8))>>2)]=$42,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $49=$3;
 var $50=(($ufh+47)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=($52<<5);
 var $54=_hio_seek($49,$53,1);
 var $55=$3;
 var $56=_hio_read8($55);
 var $57=($56&255);
 var $58=$mod;
 var $59=(($58+144)|0);
 HEAP32[(($59)>>2)]=$57;
 var $60=$mod;
 var $61=(($60+140)|0);
 HEAP32[(($61)>>2)]=$57;
 var $62=$mod;
 var $63=_instrument_init($62);
 var $64=($63|0)<0;
 if($64){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=107;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 var $70=$i;
 var $71=$mod;
 var $72=(($71+140)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($70|0)<($73|0);
 if($74){label=15;break;}else{label=36;break;}
 case 15: 
 var $76=$mod;
 var $77=$i;
 var $78=_subinstrument_alloc($76,$77,1);
 var $79=($78|0)<0;
 if($79){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=107;break;
 case 17: 
 var $82=(($uih)|0);
 var $83=$82;
 var $84=$3;
 var $85=_hio_read($83,32,1,$84);
 var $86=(($uih+32)|0);
 var $87=$86;
 var $88=$3;
 var $89=_hio_read($87,12,1,$88);
 var $90=$3;
 var $91=_hio_read32l($90);
 var $92=(($uih+44)|0);
 HEAP32[(($92)>>2)]=$91;
 var $93=$3;
 var $94=_hio_read32l($93);
 var $95=(($uih+48)|0);
 HEAP32[(($95)>>2)]=$94;
 var $96=$3;
 var $97=_hio_read32l($96);
 var $98=(($uih+52)|0);
 HEAP32[(($98)>>2)]=$97;
 var $99=$3;
 var $100=_hio_read32l($99);
 var $101=(($uih+56)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=$3;
 var $103=_hio_read8($102);
 var $104=(($uih+60)|0);
 HEAP8[($104)]=$103;
 var $105=$3;
 var $106=_hio_read8($105);
 var $107=(($uih+61)|0);
 HEAP8[($107)]=$106;
 var $108=$3;
 var $109=_hio_read16l($108);
 var $110=(($uih+62)|0);
 HEAP16[(($110)>>1)]=$109;
 var $111=$ver;
 var $112=($111|0)<4;
 if($112){label=18;break;}else{label=19;break;}
 case 18: 
 var $119=0;label=20;break;
 case 19: 
 var $115=$3;
 var $116=_hio_read16l($115);
 var $117=($116&65535);
 var $119=$117;label=20;break;
 case 20: 
 var $119;
 var $120=(($119)&65535);
 var $121=(($uih+64)|0);
 HEAP16[(($121)>>1)]=$120;
 var $122=$ver;
 var $123=($122|0)>3;
 if($123){label=21;break;}else{label=22;break;}
 case 21: 
 var $125=(($uih+62)|0);
 var $126=HEAP16[(($125)>>1)];
 var $127=($126&65535);
 var $128=(($uih+64)|0);
 var $129=HEAP16[(($128)>>1)];
 var $130=($129&65535);
 var $131=$130^$127;
 var $132=(($131)&65535);
 HEAP16[(($128)>>1)]=$132;
 var $133=(($uih+64)|0);
 var $134=HEAP16[(($133)>>1)];
 var $135=($134&65535);
 var $136=(($uih+62)|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=($137&65535);
 var $139=$138^$135;
 var $140=(($139)&65535);
 HEAP16[(($136)>>1)]=$140;
 var $141=(($uih+62)|0);
 var $142=HEAP16[(($141)>>1)];
 var $143=($142&65535);
 var $144=(($uih+64)|0);
 var $145=HEAP16[(($144)>>1)];
 var $146=($145&65535);
 var $147=$146^$143;
 var $148=(($147)&65535);
 HEAP16[(($144)>>1)]=$148;
 label=22;break;
 case 22: 
 var $150=(($uih+56)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($uih+52)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=((($151)-($153))|0);
 var $155=$i;
 var $156=$mod;
 var $157=(($156+180)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+((($155)*(52))&-1))|0);
 var $160=(($159+32)|0);
 HEAP32[(($160)>>2)]=$154;
 var $161=(($uih+44)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$i;
 var $164=$mod;
 var $165=(($164+180)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+((($163)*(52))&-1))|0);
 var $168=(($167+36)|0);
 HEAP32[(($168)>>2)]=$162;
 var $169=(($uih+48)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$i;
 var $172=$mod;
 var $173=(($172+180)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+((($171)*(52))&-1))|0);
 var $176=(($175+40)|0);
 HEAP32[(($176)>>2)]=$170;
 var $177=$i;
 var $178=$mod;
 var $179=(($178+180)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+((($177)*(52))&-1))|0);
 var $182=(($181+32)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)>0;
 if($184){label=23;break;}else{label=24;break;}
 case 23: 
 var $186=$i;
 var $187=$mod;
 var $188=(($187+176)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+((($186)*(764))&-1))|0);
 var $191=(($190+36)|0);
 HEAP32[(($191)>>2)]=1;
 label=24;break;
 case 24: 
 var $193=(($uih+61)|0);
 var $194=HEAP8[($193)];
 var $195=($194&255);
 switch(($195|0)){case 20:case 4:{ label=25;break;}case 8:{ label=26;break;}case 12:{ label=27;break;}case 24:{ label=28;break;}case 28:{ label=29;break;}default:{label=30;break;}}break;
 case 25: 
 var $197=$i;
 var $198=$mod;
 var $199=(($198+180)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+((($197)*(52))&-1))|0);
 var $202=(($201+44)|0);
 HEAP32[(($202)>>2)]=1;
 label=30;break;
 case 26: 
 var $204=$i;
 var $205=$mod;
 var $206=(($205+180)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+((($204)*(52))&-1))|0);
 var $209=(($208+44)|0);
 HEAP32[(($209)>>2)]=2;
 label=30;break;
 case 27: 
 var $211=$i;
 var $212=$mod;
 var $213=(($212+180)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+((($211)*(52))&-1))|0);
 var $216=(($215+44)|0);
 HEAP32[(($216)>>2)]=3;
 label=30;break;
 case 28: 
 var $218=$i;
 var $219=$mod;
 var $220=(($219+180)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+((($218)*(52))&-1))|0);
 var $223=(($222+44)|0);
 HEAP32[(($223)>>2)]=10;
 label=30;break;
 case 29: 
 var $225=$i;
 var $226=$mod;
 var $227=(($226+180)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+((($225)*(52))&-1))|0);
 var $230=(($229+44)|0);
 HEAP32[(($230)>>2)]=11;
 label=30;break;
 case 30: 
 var $232=(($uih+60)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=$i;
 var $236=$mod;
 var $237=(($236+176)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+((($235)*(764))&-1))|0);
 var $240=(($239+756)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(($241)|0);
 var $243=(($242)|0);
 HEAP32[(($243)>>2)]=$234;
 var $244=$i;
 var $245=$mod;
 var $246=(($245+176)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+((($244)*(764))&-1))|0);
 var $249=(($248+756)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250)|0);
 var $252=(($251+8)|0);
 HEAP32[(($252)>>2)]=128;
 var $253=$i;
 var $254=$i;
 var $255=$mod;
 var $256=(($255+176)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=(($257+((($254)*(764))&-1))|0);
 var $259=(($258+756)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($260)|0);
 var $262=(($261+40)|0);
 HEAP32[(($262)>>2)]=$253;
 var $263=$mod;
 var $264=$i;
 var $265=(($uih)|0);
 var $266=(($265)|0);
 var $267=_instrument_name($263,$264,$266,24);
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $270=$ver;
 var $271=($270|0)>3;
 if($271){label=33;break;}else{label=34;break;}
 case 33: 
 var $273=(($uih+64)|0);
 var $274=HEAP16[(($273)>>1)];
 var $275=($274&65535);
 var $276=$i;
 var $277=$mod;
 var $278=(($277+176)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+((($276)*(764))&-1))|0);
 var $281=(($280+756)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=(($282)|0);
 var $284=(($283+12)|0);
 var $285=$i;
 var $286=$mod;
 var $287=(($286+176)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=(($288+((($285)*(764))&-1))|0);
 var $290=(($289+756)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291)|0);
 var $293=(($292+16)|0);
 _c2spd_to_note($275,$284,$293);
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $296=$i;
 var $297=((($296)+(1))|0);
 $i=$297;
 label=14;break;
 case 36: 
 var $299=(($ufh2)|0);
 var $300=$299;
 var $301=$3;
 var $302=_hio_read($300,256,1,$301);
 var $303=$3;
 var $304=_hio_read8($303);
 var $305=(($ufh2+256)|0);
 HEAP8[($305)]=$304;
 var $306=$3;
 var $307=_hio_read8($306);
 var $308=(($ufh2+257)|0);
 HEAP8[($308)]=$307;
 $i=0;
 label=37;break;
 case 37: 
 var $310=$i;
 var $311=($310|0)<256;
 if($311){label=38;break;}else{label=42;break;}
 case 38: 
 var $313=$i;
 var $314=(($ufh2)|0);
 var $315=(($314+$313)|0);
 var $316=HEAP8[($315)];
 var $317=($316&255);
 var $318=($317|0)==255;
 if($318){label=39;break;}else{label=40;break;}
 case 39: 
 label=42;break;
 case 40: 
 var $321=$i;
 var $322=(($ufh2)|0);
 var $323=(($322+$321)|0);
 var $324=HEAP8[($323)];
 var $325=$i;
 var $326=$mod;
 var $327=(($326+952)|0);
 var $328=(($327+$325)|0);
 HEAP8[($328)]=$324;
 label=41;break;
 case 41: 
 var $330=$i;
 var $331=((($330)+(1))|0);
 $i=$331;
 label=37;break;
 case 42: 
 var $333=$i;
 var $334=$mod;
 var $335=(($334+156)|0);
 HEAP32[(($335)>>2)]=$333;
 var $336=(($ufh2+256)|0);
 var $337=HEAP8[($336)];
 var $338=($337&255);
 var $339=((($338)+(1))|0);
 var $340=$mod;
 var $341=(($340+136)|0);
 HEAP32[(($341)>>2)]=$339;
 var $342=(($ufh2+257)|0);
 var $343=HEAP8[($342)];
 var $344=($343&255);
 var $345=((($344)+(1))|0);
 var $346=$mod;
 var $347=(($346+128)|0);
 HEAP32[(($347)>>2)]=$345;
 var $348=$mod;
 var $349=(($348+148)|0);
 HEAP32[(($349)>>2)]=6;
 var $350=$mod;
 var $351=(($350+152)|0);
 HEAP32[(($351)>>2)]=125;
 var $352=$mod;
 var $353=(($352+136)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=$mod;
 var $356=(($355+128)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(Math_imul($354,$357)|0);
 var $359=$mod;
 var $360=(($359+132)|0);
 HEAP32[(($360)>>2)]=$358;
 $i=0;
 label=43;break;
 case 43: 
 var $362=$i;
 var $363=$mod;
 var $364=(($363+136)|0);
 var $365=HEAP32[(($364)>>2)];
 var $366=($362|0)<($365|0);
 if($366){label=44;break;}else{label=49;break;}
 case 44: 
 var $368=$ver;
 var $369=($368|0)>=3;
 if($369){label=45;break;}else{label=46;break;}
 case 45: 
 var $371=$3;
 var $372=_hio_read8($371);
 $x8=$372;
 var $373=$x8;
 var $374=($373&255);
 var $375=((($374)*(255))&-1);
 var $376=(((($375|0))/(15))&-1);
 var $377=$i;
 var $378=$mod;
 var $379=(($378+184)|0);
 var $380=(($379+((($377)*(12))&-1))|0);
 var $381=(($380)|0);
 HEAP32[(($381)>>2)]=$376;
 label=47;break;
 case 46: 
 var $383=$i;
 var $384=((($383)+(1))|0);
 var $385=(((($384|0))/(2))&-1);
 var $386=(((($385|0))%(2))&-1);
 var $387=((($386)*(255))&-1);
 var $388=$i;
 var $389=$mod;
 var $390=(($389+184)|0);
 var $391=(($390+((($388)*(12))&-1))|0);
 var $392=(($391)|0);
 HEAP32[(($392)>>2)]=$387;
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $395=$i;
 var $396=((($395)+(1))|0);
 $i=$396;
 label=43;break;
 case 49: 
 var $398=$mod;
 var $399=_pattern_init($398);
 var $400=($399|0)<0;
 if($400){label=50;break;}else{label=51;break;}
 case 50: 
 $1=-1;
 label=107;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 $i=0;
 label=54;break;
 case 54: 
 var $406=$i;
 var $407=$mod;
 var $408=(($407+128)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=($406|0)<($409|0);
 if($410){label=55;break;}else{label=59;break;}
 case 55: 
 var $412=$mod;
 var $413=$i;
 var $414=_pattern_tracks_alloc($412,$413,64);
 var $415=($414|0)<0;
 if($415){label=56;break;}else{label=57;break;}
 case 56: 
 $1=-1;
 label=107;break;
 case 57: 
 label=58;break;
 case 58: 
 var $419=$i;
 var $420=((($419)+(1))|0);
 $i=$420;
 label=54;break;
 case 59: 
 $i=0;
 label=60;break;
 case 60: 
 var $423=$i;
 var $424=$mod;
 var $425=(($424+136)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=($423|0)<($426|0);
 if($427){label=61;break;}else{label=96;break;}
 case 61: 
 $j=0;
 label=62;break;
 case 62: 
 var $430=$j;
 var $431=$mod;
 var $432=(($431+128)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=($433<<6);
 var $435=($430|0)<($434|0);
 if($435){label=63;break;}else{label=94;break;}
 case 63: 
 $cnt=1;
 var $437=$3;
 var $438=_hio_read8($437);
 $x8=$438;
 var $439=$x8;
 var $440=($439&255);
 var $441=($440|0)==252;
 if($441){label=64;break;}else{label=65;break;}
 case 64: 
 var $443=$3;
 var $444=_hio_read8($443);
 var $445=($444&255);
 $cnt=$445;
 var $446=$3;
 var $447=_hio_read8($446);
 $x8=$447;
 label=65;break;
 case 65: 
 var $449=$ue;
 var $450=$3;
 var $451=_hio_read($449,4,1,$450);
 var $452=$cnt;
 var $453=($452|0)==0;
 if($453){label=66;break;}else{label=67;break;}
 case 66: 
 var $455=$cnt;
 var $456=((($455)+(1))|0);
 $cnt=$456;
 label=67;break;
 case 67: 
 $k=0;
 label=68;break;
 case 68: 
 var $459=$k;
 var $460=$cnt;
 var $461=($459|0)<($460|0);
 if($461){label=69;break;}else{label=93;break;}
 case 69: 
 var $463=$j;
 var $464=$463&63;
 var $465=$i;
 var $466=$j;
 var $467=$466>>6;
 var $468=$2;
 var $469=(($468)|0);
 var $470=(($469+168)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=(($471+($467<<2))|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=(($473+4)|0);
 var $475=(($474+($465<<2))|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=$2;
 var $478=(($477)|0);
 var $479=(($478+172)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=(($480+($476<<2))|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=(($482+4)|0);
 var $484=(($483+($464<<3))|0);
 $event=$484;
 var $485=$event;
 var $486=$485;
 _memset($486, 0, 8)|0;
 var $487=$x8;
 var $488=(($487<<24)>>24)!=0;
 if($488){label=70;break;}else{label=71;break;}
 case 70: 
 var $490=$x8;
 var $491=($490&255);
 var $492=((($491)+(36))|0);
 var $493=(($492)&255);
 var $494=$event;
 var $495=(($494)|0);
 HEAP8[($495)]=$493;
 label=71;break;
 case 71: 
 var $497=(($ue)|0);
 var $498=HEAP8[($497)];
 var $499=$event;
 var $500=(($499+1)|0);
 HEAP8[($500)]=$498;
 var $501=(($ue+1)|0);
 var $502=HEAP8[($501)];
 var $503=($502&255);
 var $504=$503&240;
 var $505=$504>>4;
 var $506=(($505)&255);
 var $507=$event;
 var $508=(($507+3)|0);
 HEAP8[($508)]=$506;
 var $509=(($ue+1)|0);
 var $510=HEAP8[($509)];
 var $511=($510&255);
 var $512=$511&15;
 var $513=(($512)&255);
 var $514=$event;
 var $515=(($514+5)|0);
 HEAP8[($515)]=$513;
 var $516=(($ue+3)|0);
 var $517=HEAP8[($516)];
 var $518=$event;
 var $519=(($518+4)|0);
 HEAP8[($519)]=$517;
 var $520=(($ue+2)|0);
 var $521=HEAP8[($520)];
 var $522=$event;
 var $523=(($522+6)|0);
 HEAP8[($523)]=$521;
 var $524=$event;
 var $525=(($524+3)|0);
 var $526=HEAP8[($525)];
 var $527=($526&255);
 switch(($527|0)){case 0:{ label=72;break;}case 3:{ label=77;break;}case 5:case 6:{ label=78;break;}case 11:{ label=79;break;}case 9:{ label=80;break;}default:{label=81;break;}}break;
 case 72: 
 var $529=$event;
 var $530=(($529+4)|0);
 var $531=HEAP8[($530)];
 var $532=(($531<<24)>>24)!=0;
 if($532){label=73;break;}else{label=74;break;}
 case 73: 
 $keep_porta1=0;
 label=74;break;
 case 74: 
 var $535=$keep_porta1;
 var $536=($535|0)!=0;
 if($536){label=75;break;}else{label=76;break;}
 case 75: 
 var $538=$event;
 var $539=(($538+3)|0);
 HEAP8[($539)]=3;
 var $540=$keep_porta1;
 var $541=((($540)-(1))|0);
 $keep_porta1=$541;
 label=76;break;
 case 76: 
 label=81;break;
 case 77: 
 $keep_porta1=32;
 label=81;break;
 case 78: 
 var $545=$event;
 var $546=(($545+4)|0);
 HEAP8[($546)]=0;
 var $547=$event;
 var $548=(($547+3)|0);
 HEAP8[($548)]=0;
 label=81;break;
 case 79: 
 var $550=$event;
 var $551=(($550+3)|0);
 HEAP8[($551)]=8;
 var $552=$event;
 var $553=(($552+4)|0);
 var $554=HEAP8[($553)];
 var $555=($554&255);
 var $556=$555<<4;
 var $557=(($556)&255);
 HEAP8[($553)]=$557;
 label=81;break;
 case 80: 
 var $559=$event;
 var $560=(($559+4)|0);
 var $561=HEAP8[($560)];
 var $562=($561&255);
 var $563=$562<<2;
 var $564=(($563)&255);
 HEAP8[($560)]=$564;
 label=81;break;
 case 81: 
 var $566=$event;
 var $567=(($566+5)|0);
 var $568=HEAP8[($567)];
 var $569=($568&255);
 switch(($569|0)){case 0:{ label=82;break;}case 3:{ label=87;break;}case 5:case 6:{ label=88;break;}case 11:{ label=89;break;}case 9:{ label=90;break;}default:{label=91;break;}}break;
 case 82: 
 var $571=$event;
 var $572=(($571+6)|0);
 var $573=HEAP8[($572)];
 var $574=(($573<<24)>>24)!=0;
 if($574){label=83;break;}else{label=84;break;}
 case 83: 
 $keep_porta2=0;
 label=84;break;
 case 84: 
 var $577=$keep_porta2;
 var $578=($577|0)!=0;
 if($578){label=85;break;}else{label=86;break;}
 case 85: 
 var $580=$event;
 var $581=(($580+5)|0);
 HEAP8[($581)]=3;
 var $582=$keep_porta2;
 var $583=((($582)-(1))|0);
 $keep_porta2=$583;
 label=86;break;
 case 86: 
 label=91;break;
 case 87: 
 $keep_porta2=32;
 label=91;break;
 case 88: 
 var $587=$event;
 var $588=(($587+6)|0);
 HEAP8[($588)]=0;
 var $589=$event;
 var $590=(($589+5)|0);
 HEAP8[($590)]=0;
 label=91;break;
 case 89: 
 var $592=$event;
 var $593=(($592+5)|0);
 HEAP8[($593)]=8;
 var $594=$event;
 var $595=(($594+6)|0);
 var $596=HEAP8[($595)];
 var $597=($596&255);
 var $598=$597<<4;
 var $599=(($598)&255);
 HEAP8[($595)]=$599;
 label=91;break;
 case 90: 
 var $601=$event;
 var $602=(($601+6)|0);
 var $603=HEAP8[($602)];
 var $604=($603&255);
 var $605=$604<<2;
 var $606=(($605)&255);
 HEAP8[($602)]=$606;
 label=91;break;
 case 91: 
 label=92;break;
 case 92: 
 var $609=$k;
 var $610=((($609)+(1))|0);
 $k=$610;
 var $611=$j;
 var $612=((($611)+(1))|0);
 $j=$612;
 label=68;break;
 case 93: 
 label=62;break;
 case 94: 
 label=95;break;
 case 95: 
 var $616=$i;
 var $617=((($616)+(1))|0);
 $i=$617;
 label=60;break;
 case 96: 
 label=97;break;
 case 97: 
 label=98;break;
 case 98: 
 $i=0;
 label=99;break;
 case 99: 
 var $622=$i;
 var $623=$mod;
 var $624=(($623+140)|0);
 var $625=HEAP32[(($624)>>2)];
 var $626=($622|0)<($625|0);
 if($626){label=100;break;}else{label=106;break;}
 case 100: 
 var $628=$i;
 var $629=$mod;
 var $630=(($629+180)|0);
 var $631=HEAP32[(($630)>>2)];
 var $632=(($631+((($628)*(52))&-1))|0);
 var $633=(($632+32)|0);
 var $634=HEAP32[(($633)>>2)];
 var $635=($634|0)!=0;
 if($635){label=102;break;}else{label=101;break;}
 case 101: 
 label=105;break;
 case 102: 
 var $638=$2;
 var $639=$3;
 var $640=$i;
 var $641=$mod;
 var $642=(($641+180)|0);
 var $643=HEAP32[(($642)>>2)];
 var $644=(($643+((($640)*(52))&-1))|0);
 var $645=_load_sample($638,$639,0,$644,0);
 var $646=($645|0)<0;
 if($646){label=103;break;}else{label=104;break;}
 case 103: 
 $1=-1;
 label=107;break;
 case 104: 
 label=105;break;
 case 105: 
 var $650=$i;
 var $651=((($650)+(1))|0);
 $i=$651;
 label=99;break;
 case 106: 
 var $653=$2;
 var $654=(($653+1268)|0);
 HEAP32[(($654)>>2)]=256;
 $1=0;
 label=107;break;
 case 107: 
 var $656=$1;
 STACKTOP=sp;return $656;
  default: assert(0, "bad label: " + label);
 }
}
function _umx_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1504)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $offset;
 var $buf=sp;
 var $b;
 var $id;
 $2=$f;
 $3=$t;
 $4=$start;
 $offset=-1;
 var $5=(($buf)|0);
 $b=$5;
 var $6=(($buf)|0);
 var $7=$2;
 var $8=_hio_read($6,1,1500,$7);
 var $9=($8>>>0)<1500;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=22;break;
 case 3: 
 var $12=$b;
 var $13=_readmem32b($12);
 $id=$13;
 var $14=$id;
 var $15=($14|0)!=-1048368482;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=22;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $19=$i;
 var $20=($19|0)<1500;
 if($20){label=7;break;}else{label=19;break;}
 case 7: 
 var $22=$b;
 var $23=_readmem32b($22);
 $id=$23;
 var $24=$b;
 var $25=_memcmp($24,25760,16);
 var $26=($25|0)!=0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=$i;
 $offset=$28;
 label=19;break;
 case 9: 
 var $30=$id;
 var $31=($30|0)==1229803597;
 if($31){label=10;break;}else{label=11;break;}
 case 10: 
 var $33=$i;
 $offset=$33;
 label=19;break;
 case 11: 
 var $35=$i;
 var $36=($35|0)>44;
 if($36){label=12;break;}else{label=14;break;}
 case 12: 
 var $38=$id;
 var $39=($38|0)==1396920909;
 if($39){label=13;break;}else{label=14;break;}
 case 13: 
 var $41=$i;
 var $42=((($41)-(44))|0);
 $offset=$42;
 label=19;break;
 case 14: 
 var $44=$i;
 var $45=($44|0)>1080;
 if($45){label=15;break;}else{label=17;break;}
 case 15: 
 var $47=$id;
 var $48=($47|0)==1294879534;
 if($48){label=16;break;}else{label=17;break;}
 case 16: 
 var $50=$i;
 var $51=((($50)-(1080))|0);
 $offset=$51;
 label=19;break;
 case 17: 
 label=18;break;
 case 18: 
 var $54=$i;
 var $55=((($54)+(1))|0);
 $i=$55;
 var $56=$b;
 var $57=(($56+1)|0);
 $b=$57;
 label=6;break;
 case 19: 
 var $59=$offset;
 var $60=($59|0)<0;
 if($60){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=22;break;
 case 21: 
 $1=0;
 label=22;break;
 case 22: 
 var $64=$1;
 STACKTOP=sp;return $64;
  default: assert(0, "bad label: " + label);
 }
}
function _umx_load($m,$f,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1504)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $buf=sp;
 var $b;
 var $id;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=(($buf)|0);
 $b=$5;
 label=2;break;
 case 2: 
 var $7=$3;
 var $8=$4;
 var $9=_hio_seek($7,$8,0);
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=(($buf)|0);
 var $14=$3;
 var $15=_hio_read($13,1,1500,$14);
 $i=0;
 label=6;break;
 case 6: 
 var $17=$i;
 var $18=($17|0)<1500;
 if($18){label=7;break;}else{label=19;break;}
 case 7: 
 var $20=$b;
 var $21=_readmem32b($20);
 $id=$21;
 var $22=$b;
 var $23=_memcmp($22,25760,16);
 var $24=($23|0)!=0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 var $26=HEAP32[((72)>>2)];
 var $27=$2;
 var $28=$3;
 var $29=$i;
 var $30=FUNCTION_TABLE[$26]($27,$28,$29);
 $1=$30;
 label=20;break;
 case 9: 
 var $32=$id;
 var $33=($32|0)==1229803597;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 var $35=HEAP32[((6120)>>2)];
 var $36=$2;
 var $37=$3;
 var $38=$i;
 var $39=FUNCTION_TABLE[$35]($36,$37,$38);
 $1=$39;
 label=20;break;
 case 11: 
 var $41=$i;
 var $42=($41|0)>44;
 if($42){label=12;break;}else{label=14;break;}
 case 12: 
 var $44=$id;
 var $45=($44|0)==1396920909;
 if($45){label=13;break;}else{label=14;break;}
 case 13: 
 var $47=HEAP32[((2456)>>2)];
 var $48=$2;
 var $49=$3;
 var $50=$i;
 var $51=((($50)-(44))|0);
 var $52=FUNCTION_TABLE[$47]($48,$49,$51);
 $1=$52;
 label=20;break;
 case 14: 
 var $54=$i;
 var $55=($54|0)>1080;
 if($55){label=15;break;}else{label=17;break;}
 case 15: 
 var $57=$id;
 var $58=($57|0)==1294879534;
 if($58){label=16;break;}else{label=17;break;}
 case 16: 
 var $60=HEAP32[((5600)>>2)];
 var $61=$2;
 var $62=$3;
 var $63=$i;
 var $64=((($63)-(1080))|0);
 var $65=FUNCTION_TABLE[$60]($61,$62,$64);
 $1=$65;
 label=20;break;
 case 17: 
 label=18;break;
 case 18: 
 var $68=$i;
 var $69=((($68)+(1))|0);
 $i=$69;
 var $70=$b;
 var $71=(($70+1)|0);
 $b=$71;
 label=6;break;
 case 19: 
 $1=-1;
 label=20;break;
 case 20: 
 var $74=$1;
 STACKTOP=sp;return $74;
  default: assert(0, "bad label: " + label);
 }
}
function _xm_test($f,$t,$start){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 $2=$f;
 $3=$t;
 $4=$start;
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_hio_read($5,1,17,$6);
 var $8=($7>>>0)<17;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,20632,17);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $16=$2;
 var $17=$3;
 _read_title($16,$17,20);
 $1=0;
 label=6;break;
 case 6: 
 var $19=$1;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _xm_load($m,$f,$start){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+360)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $i;
 var $j;
 var $xfh=sp;
 var $tracker_name=(sp)+(336);
 var $sid;
 $2=$m;
 $3=$f;
 $4=$start;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 label=2;break;
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_hio_seek($8,$9,0);
 label=3;break;
 case 3: 
 var $12=(($xfh)|0);
 var $13=$12;
 var $14=$3;
 var $15=_hio_read($13,17,1,$14);
 var $16=(($xfh+17)|0);
 var $17=$16;
 var $18=$3;
 var $19=_hio_read($17,20,1,$18);
 var $20=$3;
 var $21=_hio_read8($20);
 var $22=(($xfh+38)|0);
 var $23=$22;
 var $24=$3;
 var $25=_hio_read($23,20,1,$24);
 var $26=$3;
 var $27=_hio_read16l($26);
 var $28=(($xfh+58)|0);
 HEAP16[(($28)>>1)]=$27;
 var $29=$3;
 var $30=_hio_read32l($29);
 var $31=(($xfh+60)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=$3;
 var $33=_hio_read16l($32);
 var $34=(($xfh+64)|0);
 HEAP16[(($34)>>1)]=$33;
 var $35=$3;
 var $36=_hio_read16l($35);
 var $37=(($xfh+66)|0);
 HEAP16[(($37)>>1)]=$36;
 var $38=$3;
 var $39=_hio_read16l($38);
 var $40=(($xfh+68)|0);
 HEAP16[(($40)>>1)]=$39;
 var $41=$3;
 var $42=_hio_read16l($41);
 var $43=(($xfh+70)|0);
 HEAP16[(($43)>>1)]=$42;
 var $44=$3;
 var $45=_hio_read16l($44);
 var $46=(($xfh+72)|0);
 HEAP16[(($46)>>1)]=$45;
 var $47=$3;
 var $48=_hio_read16l($47);
 var $49=(($xfh+74)|0);
 HEAP16[(($49)>>1)]=$48;
 var $50=$3;
 var $51=_hio_read16l($50);
 var $52=(($xfh+76)|0);
 HEAP16[(($52)>>1)]=$51;
 var $53=$3;
 var $54=_hio_read16l($53);
 var $55=(($xfh+78)|0);
 HEAP16[(($55)>>1)]=$54;
 var $56=(($xfh+80)|0);
 var $57=$56;
 var $58=(($xfh+60)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=((($59)-(20))|0);
 var $61=$3;
 var $62=_hio_read($57,$60,1,$61);
 var $63=$mod;
 var $64=(($63)|0);
 var $65=(($64)|0);
 var $66=(($xfh+17)|0);
 var $67=(($66)|0);
 var $68=_strlcpy($65,$67,20);
 var $69=(($xfh+64)|0);
 var $70=HEAP16[(($69)>>1)];
 var $71=($70&65535);
 var $72=$mod;
 var $73=(($72+156)|0);
 HEAP32[(($73)>>2)]=$71;
 var $74=(($xfh+66)|0);
 var $75=HEAP16[(($74)>>1)];
 var $76=($75&65535);
 var $77=$mod;
 var $78=(($77+160)|0);
 HEAP32[(($78)>>2)]=$76;
 var $79=(($xfh+68)|0);
 var $80=HEAP16[(($79)>>1)];
 var $81=($80&65535);
 var $82=$mod;
 var $83=(($82+136)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=(($xfh+70)|0);
 var $85=HEAP16[(($84)>>1)];
 var $86=($85&65535);
 var $87=$mod;
 var $88=(($87+128)|0);
 HEAP32[(($88)>>2)]=$86;
 var $89=$mod;
 var $90=(($89+136)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$mod;
 var $93=(($92+128)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(Math_imul($91,$94)|0);
 var $96=((($95)+(1))|0);
 var $97=$mod;
 var $98=(($97+132)|0);
 HEAP32[(($98)>>2)]=$96;
 var $99=(($xfh+72)|0);
 var $100=HEAP16[(($99)>>1)];
 var $101=($100&65535);
 var $102=$mod;
 var $103=(($102+140)|0);
 HEAP32[(($103)>>2)]=$101;
 var $104=(($xfh+76)|0);
 var $105=HEAP16[(($104)>>1)];
 var $106=($105&65535);
 var $107=$mod;
 var $108=(($107+148)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($xfh+78)|0);
 var $110=HEAP16[(($109)>>1)];
 var $111=($110&65535);
 var $112=$mod;
 var $113=(($112+152)|0);
 HEAP32[(($113)>>2)]=$111;
 var $114=(($xfh+74)|0);
 var $115=HEAP16[(($114)>>1)];
 var $116=($115&65535);
 var $117=$116&1;
 var $118=($117|0)!=0;
 var $119=($118?4096:0);
 var $120=$2;
 var $121=(($120+1280)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122|$119;
 HEAP32[(($121)>>2)]=$123;
 var $124=$mod;
 var $125=(($124+952)|0);
 var $126=$125;
 var $127=(($xfh+80)|0);
 var $128=$127;
 var $129=$mod;
 var $130=(($129+156)|0);
 var $131=HEAP32[(($130)>>2)];
 assert($131 % 1 === 0);(_memcpy($126, $128, $131)|0);
 var $132=(($tracker_name+20)|0);
 HEAP8[($132)]=0;
 var $133=(($tracker_name)|0);
 var $134=(($xfh+38)|0);
 var $135=(($134)|0);
 var $136=_snprintf($133,20,25744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$135,tempVarArgs)); STACKTOP=tempVarArgs;
 $i=20;
 label=4;break;
 case 4: 
 var $138=$i;
 var $139=($138|0)>=0;
 if($139){label=5;break;}else{label=11;break;}
 case 5: 
 var $141=$i;
 var $142=(($tracker_name+$141)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24);
 var $145=($144|0)==32;
 if($145){label=6;break;}else{label=7;break;}
 case 6: 
 var $147=$i;
 var $148=(($tracker_name+$147)|0);
 HEAP8[($148)]=0;
 label=7;break;
 case 7: 
 var $150=$i;
 var $151=(($tracker_name+$150)|0);
 var $152=HEAP8[($151)];
 var $153=(($152<<24)>>24)!=0;
 if($153){label=8;break;}else{label=9;break;}
 case 8: 
 label=11;break;
 case 9: 
 label=10;break;
 case 10: 
 var $157=$i;
 var $158=((($157)-(1))|0);
 $i=$158;
 label=4;break;
 case 11: 
 var $160=(($xfh+60)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($161|0)==275;
 if($162){label=12;break;}else{label=13;break;}
 case 12: 
 var $164=(($tracker_name)|0);
 var $165=_strcpy($164,24256);
 label=16;break;
 case 13: 
 var $167=(($tracker_name)|0);
 var $168=HEAP8[($167)];
 var $169=(($168<<24)>>24);
 var $170=($169|0)==0;
 if($170){label=14;break;}else{label=15;break;}
 case 14: 
 var $172=(($tracker_name)|0);
 var $173=_strcpy($172,23368);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $176=(($tracker_name)|0);
 var $177=_strncmp($176,22680,19);
 var $178=($177|0)!=0;
 if($178){label=20;break;}else{label=17;break;}
 case 17: 
 var $180=$mod;
 var $181=(($180+152)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)<=10;
 if($183){label=18;break;}else{label=19;break;}
 case 18: 
 var $185=$mod;
 var $186=(($185+152)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($187<<1);
 var $189=(((53)-($188))|0);
 var $190=((($189)*(125))&-1);
 var $191=(((($190|0))/(33))&-1);
 var $192=$mod;
 var $193=(($192+152)|0);
 HEAP32[(($193)>>2)]=$191;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $196=(($tracker_name)|0);
 var $197=_strncmp($196,21920,18);
 var $198=($197|0)!=0;
 if($198){label=22;break;}else{label=21;break;}
 case 21: 
 var $200=(($tracker_name)|0);
 var $201=_strcpy($200,21360);
 label=22;break;
 case 22: 
 var $203=$mod;
 var $204=(($203+64)|0);
 var $205=(($204)|0);
 var $206=(($tracker_name)|0);
 var $207=(($xfh+58)|0);
 var $208=HEAP16[(($207)>>1)];
 var $209=($208&65535);
 var $210=$209>>8;
 var $211=(($xfh+58)|0);
 var $212=HEAP16[(($211)>>1)];
 var $213=($212&65535);
 var $214=$213&255;
 var $215=_snprintf($205,64,21072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$206,HEAP32[(((tempVarArgs)+(8))>>2)]=$210,HEAP32[(((tempVarArgs)+(16))>>2)]=$214,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $222=$3;
 var $223=$4;
 var $224=(($xfh+60)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=((($223)+($225))|0);
 var $227=((($226)+(60))|0);
 var $228=_hio_seek($222,$227,0);
 var $229=(($xfh+58)|0);
 var $230=HEAP16[(($229)>>1)];
 var $231=($230&65535);
 var $232=($231|0)<=259;
 if($232){label=29;break;}else{label=34;break;}
 case 29: 
 var $234=$2;
 var $235=(($xfh+58)|0);
 var $236=HEAP16[(($235)>>1)];
 var $237=($236&65535);
 var $238=$3;
 var $239=_load_instruments($234,$237,$238);
 var $240=($239|0)<0;
 if($240){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=58;break;
 case 31: 
 var $243=$2;
 var $244=(($xfh+58)|0);
 var $245=HEAP16[(($244)>>1)];
 var $246=($245&65535);
 var $247=$3;
 var $248=_load_patterns($243,$246,$247);
 var $249=($248|0)<0;
 if($249){label=32;break;}else{label=33;break;}
 case 32: 
 $1=-1;
 label=58;break;
 case 33: 
 label=39;break;
 case 34: 
 var $253=$2;
 var $254=(($xfh+58)|0);
 var $255=HEAP16[(($254)>>1)];
 var $256=($255&65535);
 var $257=$3;
 var $258=_load_patterns($253,$256,$257);
 var $259=($258|0)<0;
 if($259){label=35;break;}else{label=36;break;}
 case 35: 
 $1=-1;
 label=58;break;
 case 36: 
 var $262=$2;
 var $263=(($xfh+58)|0);
 var $264=HEAP16[(($263)>>1)];
 var $265=($264&65535);
 var $266=$3;
 var $267=_load_instruments($262,$265,$266);
 var $268=($267|0)<0;
 if($268){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=58;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $274=(($xfh+58)|0);
 var $275=HEAP16[(($274)>>1)];
 var $276=($275&65535);
 var $277=($276|0)<=259;
 if($277){label=42;break;}else{label=53;break;}
 case 42: 
 $i=0;
 label=43;break;
 case 43: 
 var $280=$i;
 var $281=$mod;
 var $282=(($281+140)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($280|0)<($283|0);
 if($284){label=44;break;}else{label=52;break;}
 case 44: 
 $j=0;
 label=45;break;
 case 45: 
 var $287=$j;
 var $288=$i;
 var $289=$mod;
 var $290=(($289+176)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+((($288)*(764))&-1))|0);
 var $293=(($292+36)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=($287|0)<($294|0);
 if($295){label=46;break;}else{label=50;break;}
 case 46: 
 var $297=$j;
 var $298=$i;
 var $299=$mod;
 var $300=(($299+176)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($301+((($298)*(764))&-1))|0);
 var $303=(($302+756)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(($304+($297<<6))|0);
 var $306=(($305+40)|0);
 var $307=HEAP32[(($306)>>2)];
 $sid=$307;
 var $308=$2;
 var $309=$3;
 var $310=$sid;
 var $311=$mod;
 var $312=(($311+180)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=(($313+((($310)*(52))&-1))|0);
 var $315=_load_sample($308,$309,1,$314,0);
 var $316=($315|0)<0;
 if($316){label=47;break;}else{label=48;break;}
 case 47: 
 $1=-1;
 label=58;break;
 case 48: 
 label=49;break;
 case 49: 
 var $320=$j;
 var $321=((($320)+(1))|0);
 $j=$321;
 label=45;break;
 case 50: 
 label=51;break;
 case 51: 
 var $324=$i;
 var $325=((($324)+(1))|0);
 $i=$325;
 label=43;break;
 case 52: 
 label=53;break;
 case 53: 
 $i=0;
 label=54;break;
 case 54: 
 var $329=$i;
 var $330=$mod;
 var $331=(($330+136)|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=($329|0)<($332|0);
 if($333){label=55;break;}else{label=57;break;}
 case 55: 
 var $335=$i;
 var $336=$mod;
 var $337=(($336+184)|0);
 var $338=(($337+((($335)*(12))&-1))|0);
 var $339=(($338)|0);
 HEAP32[(($339)>>2)]=128;
 label=56;break;
 case 56: 
 var $341=$i;
 var $342=((($341)+(1))|0);
 $i=$342;
 label=54;break;
 case 57: 
 var $344=$2;
 var $345=(($344+1280)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=$346|32;
 HEAP32[(($345)>>2)]=$347;
 var $348=$2;
 var $349=(($348+1284)|0);
 HEAP32[(($349)>>2)]=1;
 $1=0;
 label=58;break;
 case 58: 
 var $351=$1;
 STACKTOP=sp;return $351;
  default: assert(0, "bad label: " + label);
 }
}
function _load_instruments($m,$version,$f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+888)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $xih=sp;
 var $xi=(sp)+(40);
 var $xsh=(sp)+(248);
 var $sample_num;
 var $i;
 var $j;
 var $xxi;
 var $sub;
 var $xxs;
 var $sub1;
 $2=$m;
 $3=$version;
 $4=$f;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 $sample_num=0;
 label=2;break;
 case 2: 
 label=3;break;
 case 3: 
 var $9=$mod;
 var $10=(($9+144)|0);
 HEAP32[(($10)>>2)]=1024;
 var $11=$mod;
 var $12=_instrument_init($11);
 var $13=($12|0)<0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=74;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $17=$i;
 var $18=$mod;
 var $19=(($18+140)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($17|0)<($20|0);
 if($21){label=7;break;}else{label=71;break;}
 case 7: 
 var $23=$i;
 var $24=$mod;
 var $25=(($24+176)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+((($23)*(764))&-1))|0);
 $xxi=$27;
 var $28=$4;
 var $29=_hio_read32l($28);
 var $30=(($xih)|0);
 HEAP32[(($30)>>2)]=$29;
 var $31=$4;
 var $32=_hio_eof($31);
 var $33=($32|0)!=0;
 if($33){label=8;break;}else{label=9;break;}
 case 8: 
 var $35=$i;
 var $36=$mod;
 var $37=(($36+140)|0);
 HEAP32[(($37)>>2)]=$35;
 label=71;break;
 case 9: 
 var $39=(($xih+4)|0);
 var $40=$39;
 var $41=$4;
 var $42=_hio_read($40,22,1,$41);
 var $43=$4;
 var $44=_hio_read8($43);
 var $45=(($xih+26)|0);
 HEAP8[($45)]=$44;
 var $46=$4;
 var $47=_hio_read16l($46);
 var $48=(($xih+28)|0);
 HEAP16[(($48)>>1)]=$47;
 var $49=$4;
 var $50=_hio_read32l($49);
 var $51=(($xih+32)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=(($xih+28)|0);
 var $53=HEAP16[(($52)>>1)];
 var $54=($53&65535);
 var $55=($54|0)>16;
 if($55){label=12;break;}else{label=10;break;}
 case 10: 
 var $57=(($xih+28)|0);
 var $58=HEAP16[(($57)>>1)];
 var $59=($58&65535);
 var $60=($59|0)>0;
 if($60){label=11;break;}else{label=13;break;}
 case 11: 
 var $62=(($xih+32)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63>>>0)>256;
 if($64){label=12;break;}else{label=13;break;}
 case 12: 
 var $66=$i;
 var $67=$mod;
 var $68=(($67+140)|0);
 HEAP32[(($68)>>2)]=$66;
 label=71;break;
 case 13: 
 var $70=$mod;
 var $71=$i;
 var $72=(($xih+4)|0);
 var $73=(($72)|0);
 var $74=_instrument_name($70,$71,$73,22);
 var $75=(($xih+28)|0);
 var $76=HEAP16[(($75)>>1)];
 var $77=($76&65535);
 var $78=$xxi;
 var $79=(($78+36)|0);
 HEAP32[(($79)>>2)]=$77;
 var $80=$xxi;
 var $81=(($80+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)>16;
 if($83){label=14;break;}else{label=15;break;}
 case 14: 
 var $85=$xxi;
 var $86=(($85+36)|0);
 HEAP32[(($86)>>2)]=16;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $90=$xxi;
 var $91=(($90+36)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)!=0;
 if($93){label=18;break;}else{label=68;break;}
 case 18: 
 var $95=$mod;
 var $96=$i;
 var $97=$xxi;
 var $98=(($97+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=_subinstrument_alloc($95,$96,$99);
 var $101=($100|0)<0;
 if($101){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=74;break;
 case 20: 
 var $104=(($xih)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($105>>>0)<33;
 if($106){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=74;break;
 case 22: 
 var $109=(($xih)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($110>>>0)<241;
 if($111){label=23;break;}else{label=24;break;}
 case 23: 
 var $113=$xi;
 _memset($113, 0, 208)|0;
 var $114=$4;
 var $115=(($xih)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=((($116)-(33))|0);
 var $118=_hio_seek($114,$117,1);
 label=47;break;
 case 24: 
 var $120=(($xi)|0);
 var $121=$120;
 var $122=$4;
 var $123=_hio_read($121,96,1,$122);
 $j=0;
 label=25;break;
 case 25: 
 var $125=$j;
 var $126=($125|0)<24;
 if($126){label=26;break;}else{label=28;break;}
 case 26: 
 var $128=$4;
 var $129=_hio_read16l($128);
 var $130=$j;
 var $131=(($xi+96)|0);
 var $132=(($131+($130<<1))|0);
 HEAP16[(($132)>>1)]=$129;
 label=27;break;
 case 27: 
 var $134=$j;
 var $135=((($134)+(1))|0);
 $j=$135;
 label=25;break;
 case 28: 
 $j=0;
 label=29;break;
 case 29: 
 var $138=$j;
 var $139=($138|0)<24;
 if($139){label=30;break;}else{label=32;break;}
 case 30: 
 var $141=$4;
 var $142=_hio_read16l($141);
 var $143=$j;
 var $144=(($xi+144)|0);
 var $145=(($144+($143<<1))|0);
 HEAP16[(($145)>>1)]=$142;
 label=31;break;
 case 31: 
 var $147=$j;
 var $148=((($147)+(1))|0);
 $j=$148;
 label=29;break;
 case 32: 
 var $150=$4;
 var $151=_hio_read8($150);
 var $152=(($xi+192)|0);
 HEAP8[($152)]=$151;
 var $153=$4;
 var $154=_hio_read8($153);
 var $155=(($xi+193)|0);
 HEAP8[($155)]=$154;
 var $156=$4;
 var $157=_hio_read8($156);
 var $158=(($xi+194)|0);
 HEAP8[($158)]=$157;
 var $159=$4;
 var $160=_hio_read8($159);
 var $161=(($xi+195)|0);
 HEAP8[($161)]=$160;
 var $162=$4;
 var $163=_hio_read8($162);
 var $164=(($xi+196)|0);
 HEAP8[($164)]=$163;
 var $165=$4;
 var $166=_hio_read8($165);
 var $167=(($xi+197)|0);
 HEAP8[($167)]=$166;
 var $168=$4;
 var $169=_hio_read8($168);
 var $170=(($xi+198)|0);
 HEAP8[($170)]=$169;
 var $171=$4;
 var $172=_hio_read8($171);
 var $173=(($xi+199)|0);
 HEAP8[($173)]=$172;
 var $174=$4;
 var $175=_hio_read8($174);
 var $176=(($xi+200)|0);
 HEAP8[($176)]=$175;
 var $177=$4;
 var $178=_hio_read8($177);
 var $179=(($xi+201)|0);
 HEAP8[($179)]=$178;
 var $180=$4;
 var $181=_hio_read8($180);
 var $182=(($xi+202)|0);
 HEAP8[($182)]=$181;
 var $183=$4;
 var $184=_hio_read8($183);
 var $185=(($xi+203)|0);
 HEAP8[($185)]=$184;
 var $186=$4;
 var $187=_hio_read8($186);
 var $188=(($xi+204)|0);
 HEAP8[($188)]=$187;
 var $189=$4;
 var $190=_hio_read8($189);
 var $191=(($xi+205)|0);
 HEAP8[($191)]=$190;
 var $192=$4;
 var $193=_hio_read16l($192);
 var $194=(($xi+206)|0);
 HEAP16[(($194)>>1)]=$193;
 var $195=$4;
 var $196=(($xih)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=((($197)-(241))|0);
 var $199=_hio_seek($195,$198,1);
 var $200=(($xi+206)|0);
 var $201=HEAP16[(($200)>>1)];
 var $202=($201&65535);
 var $203=$202<<1;
 var $204=$xxi;
 var $205=(($204+40)|0);
 HEAP32[(($205)>>2)]=$203;
 var $206=(($xi+192)|0);
 var $207=HEAP8[($206)];
 var $208=($207&255);
 var $209=$xxi;
 var $210=(($209+44)|0);
 var $211=(($210+4)|0);
 HEAP32[(($211)>>2)]=$208;
 var $212=(($xi+194)|0);
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=$xxi;
 var $216=(($215+44)|0);
 var $217=(($216+12)|0);
 HEAP32[(($217)>>2)]=$214;
 var $218=(($xi+195)|0);
 var $219=HEAP8[($218)];
 var $220=($219&255);
 var $221=$xxi;
 var $222=(($221+44)|0);
 var $223=(($222+20)|0);
 HEAP32[(($223)>>2)]=$220;
 var $224=(($xi+196)|0);
 var $225=HEAP8[($224)];
 var $226=($225&255);
 var $227=$xxi;
 var $228=(($227+44)|0);
 var $229=(($228+24)|0);
 HEAP32[(($229)>>2)]=$226;
 var $230=(($xi+200)|0);
 var $231=HEAP8[($230)];
 var $232=($231&255);
 var $233=$xxi;
 var $234=(($233+44)|0);
 var $235=(($234)|0);
 HEAP32[(($235)>>2)]=$232;
 var $236=(($xi+193)|0);
 var $237=HEAP8[($236)];
 var $238=($237&255);
 var $239=$xxi;
 var $240=(($239+200)|0);
 var $241=(($240+4)|0);
 HEAP32[(($241)>>2)]=$238;
 var $242=(($xi+197)|0);
 var $243=HEAP8[($242)];
 var $244=($243&255);
 var $245=$xxi;
 var $246=(($245+200)|0);
 var $247=(($246+12)|0);
 HEAP32[(($247)>>2)]=$244;
 var $248=(($xi+198)|0);
 var $249=HEAP8[($248)];
 var $250=($249&255);
 var $251=$xxi;
 var $252=(($251+200)|0);
 var $253=(($252+20)|0);
 HEAP32[(($253)>>2)]=$250;
 var $254=(($xi+199)|0);
 var $255=HEAP8[($254)];
 var $256=($255&255);
 var $257=$xxi;
 var $258=(($257+200)|0);
 var $259=(($258+24)|0);
 HEAP32[(($259)>>2)]=$256;
 var $260=(($xi+201)|0);
 var $261=HEAP8[($260)];
 var $262=($261&255);
 var $263=$xxi;
 var $264=(($263+200)|0);
 var $265=(($264)|0);
 HEAP32[(($265)>>2)]=$262;
 var $266=$xxi;
 var $267=(($266+44)|0);
 var $268=(($267+4)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($269|0)<=0;
 if($270){label=34;break;}else{label=33;break;}
 case 33: 
 var $272=$xxi;
 var $273=(($272+44)|0);
 var $274=(($273+4)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=($275|0)>32;
 if($276){label=34;break;}else{label=35;break;}
 case 34: 
 var $278=$xxi;
 var $279=(($278+44)|0);
 var $280=(($279)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=$281&-2;
 HEAP32[(($280)>>2)]=$282;
 label=36;break;
 case 35: 
 var $284=$xxi;
 var $285=(($284+44)|0);
 var $286=(($285+28)|0);
 var $287=$286;
 var $288=(($xi+96)|0);
 var $289=$288;
 var $290=$xxi;
 var $291=(($290+44)|0);
 var $292=(($291+4)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=($293<<2);
 assert($294 % 1 === 0);(_memcpy($287, $289, $294)|0);
 label=36;break;
 case 36: 
 var $296=$xxi;
 var $297=(($296+200)|0);
 var $298=(($297+4)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=($299|0)<=0;
 if($300){label=38;break;}else{label=37;break;}
 case 37: 
 var $302=$xxi;
 var $303=(($302+200)|0);
 var $304=(($303+4)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=($305|0)>32;
 if($306){label=38;break;}else{label=39;break;}
 case 38: 
 var $308=$xxi;
 var $309=(($308+200)|0);
 var $310=(($309)|0);
 var $311=HEAP32[(($310)>>2)];
 var $312=$311&-2;
 HEAP32[(($310)>>2)]=$312;
 label=40;break;
 case 39: 
 var $314=$xxi;
 var $315=(($314+200)|0);
 var $316=(($315+28)|0);
 var $317=$316;
 var $318=(($xi+144)|0);
 var $319=$318;
 var $320=$xxi;
 var $321=(($320+200)|0);
 var $322=(($321+4)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=($323<<2);
 assert($324 % 1 === 0);(_memcpy($317, $319, $324)|0);
 label=40;break;
 case 40: 
 $j=12;
 label=41;break;
 case 41: 
 var $327=$j;
 var $328=($327|0)<108;
 if($328){label=42;break;}else{label=46;break;}
 case 42: 
 var $330=$j;
 var $331=((($330)-(12))|0);
 var $332=(($xi)|0);
 var $333=(($332+$331)|0);
 var $334=HEAP8[($333)];
 var $335=$j;
 var $336=$xxi;
 var $337=(($336+512)|0);
 var $338=(($337+($335<<1))|0);
 var $339=(($338)|0);
 HEAP8[($339)]=$334;
 var $340=$j;
 var $341=$xxi;
 var $342=(($341+512)|0);
 var $343=(($342+($340<<1))|0);
 var $344=(($343)|0);
 var $345=HEAP8[($344)];
 var $346=($345&255);
 var $347=$xxi;
 var $348=(($347+36)|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=($346|0)>=($349|0);
 if($350){label=43;break;}else{label=44;break;}
 case 43: 
 var $352=$j;
 var $353=$xxi;
 var $354=(($353+512)|0);
 var $355=(($354+($352<<1))|0);
 var $356=(($355)|0);
 HEAP8[($356)]=-1;
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $359=$j;
 var $360=((($359)+(1))|0);
 $j=$360;
 label=41;break;
 case 46: 
 label=47;break;
 case 47: 
 $j=0;
 label=48;break;
 case 48: 
 var $364=$j;
 var $365=$xxi;
 var $366=(($365+36)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($364|0)<($367|0);
 if($368){label=49;break;}else{label=57;break;}
 case 49: 
 var $370=$j;
 var $371=$xxi;
 var $372=(($371+756)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373+($370<<6))|0);
 $sub=$374;
 var $375=$sample_num;
 var $376=$mod;
 var $377=(($376+144)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=($375|0)>=($378|0);
 if($379){label=50;break;}else{label=53;break;}
 case 50: 
 var $381=$mod;
 var $382=(($381+180)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=$mod;
 var $385=(($384+144)|0);
 var $386=$mod;
 var $387=(($386+144)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=((($388)*(3))&-1);
 var $390=(((($389|0))/(2))&-1);
 var $391=_realloc_samples($383,$385,$390);
 var $392=$mod;
 var $393=(($392+180)|0);
 HEAP32[(($393)>>2)]=$391;
 var $394=$mod;
 var $395=(($394+180)|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=($396|0)==0;
 if($397){label=51;break;}else{label=52;break;}
 case 51: 
 $1=-1;
 label=74;break;
 case 52: 
 label=53;break;
 case 53: 
 var $401=$sample_num;
 var $402=$mod;
 var $403=(($402+180)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=(($404+((($401)*(52))&-1))|0);
 $xxs=$405;
 var $406=$4;
 var $407=_hio_read32l($406);
 var $408=$j;
 var $409=(($xsh+((($408)*(40))&-1))|0);
 var $410=(($409)|0);
 HEAP32[(($410)>>2)]=$407;
 var $411=$4;
 var $412=_hio_read32l($411);
 var $413=$j;
 var $414=(($xsh+((($413)*(40))&-1))|0);
 var $415=(($414+4)|0);
 HEAP32[(($415)>>2)]=$412;
 var $416=$4;
 var $417=_hio_read32l($416);
 var $418=$j;
 var $419=(($xsh+((($418)*(40))&-1))|0);
 var $420=(($419+8)|0);
 HEAP32[(($420)>>2)]=$417;
 var $421=$4;
 var $422=_hio_read8($421);
 var $423=$j;
 var $424=(($xsh+((($423)*(40))&-1))|0);
 var $425=(($424+12)|0);
 HEAP8[($425)]=$422;
 var $426=$4;
 var $427=_hio_read8s($426);
 var $428=$j;
 var $429=(($xsh+((($428)*(40))&-1))|0);
 var $430=(($429+13)|0);
 HEAP8[($430)]=$427;
 var $431=$4;
 var $432=_hio_read8($431);
 var $433=$j;
 var $434=(($xsh+((($433)*(40))&-1))|0);
 var $435=(($434+14)|0);
 HEAP8[($435)]=$432;
 var $436=$4;
 var $437=_hio_read8($436);
 var $438=$j;
 var $439=(($xsh+((($438)*(40))&-1))|0);
 var $440=(($439+15)|0);
 HEAP8[($440)]=$437;
 var $441=$4;
 var $442=_hio_read8s($441);
 var $443=$j;
 var $444=(($xsh+((($443)*(40))&-1))|0);
 var $445=(($444+16)|0);
 HEAP8[($445)]=$442;
 var $446=$4;
 var $447=_hio_read8($446);
 var $448=$j;
 var $449=(($xsh+((($448)*(40))&-1))|0);
 var $450=(($449+17)|0);
 HEAP8[($450)]=$447;
 var $451=$j;
 var $452=(($xsh+((($451)*(40))&-1))|0);
 var $453=(($452+18)|0);
 var $454=$453;
 var $455=$4;
 var $456=_hio_read($454,22,1,$455);
 var $457=$j;
 var $458=(($xsh+((($457)*(40))&-1))|0);
 var $459=(($458+12)|0);
 var $460=HEAP8[($459)];
 var $461=($460&255);
 var $462=$sub;
 var $463=(($462)|0);
 HEAP32[(($463)>>2)]=$461;
 var $464=$j;
 var $465=(($xsh+((($464)*(40))&-1))|0);
 var $466=(($465+15)|0);
 var $467=HEAP8[($466)];
 var $468=($467&255);
 var $469=$sub;
 var $470=(($469+8)|0);
 HEAP32[(($470)>>2)]=$468;
 var $471=$j;
 var $472=(($xsh+((($471)*(40))&-1))|0);
 var $473=(($472+16)|0);
 var $474=HEAP8[($473)];
 var $475=(($474<<24)>>24);
 var $476=$sub;
 var $477=(($476+12)|0);
 HEAP32[(($477)>>2)]=$475;
 var $478=$j;
 var $479=(($xsh+((($478)*(40))&-1))|0);
 var $480=(($479+13)|0);
 var $481=HEAP8[($480)];
 var $482=(($481<<24)>>24);
 var $483=$sub;
 var $484=(($483+16)|0);
 HEAP32[(($484)>>2)]=$482;
 var $485=(($xi+202)|0);
 var $486=HEAP8[($485)];
 var $487=($486&255);
 var $488=$sub;
 var $489=(($488+20)|0);
 HEAP32[(($489)>>2)]=$487;
 var $490=(($xi+204)|0);
 var $491=HEAP8[($490)];
 var $492=($491&255);
 var $493=$sub;
 var $494=(($493+24)|0);
 HEAP32[(($494)>>2)]=$492;
 var $495=(($xi+205)|0);
 var $496=HEAP8[($495)];
 var $497=($496&255);
 var $498=$sub;
 var $499=(($498+28)|0);
 HEAP32[(($499)>>2)]=$497;
 var $500=(($xi+203)|0);
 var $501=HEAP8[($500)];
 var $502=($501&255);
 var $503=$sub;
 var $504=(($503+32)|0);
 HEAP32[(($504)>>2)]=$502;
 var $505=$sample_num;
 var $506=$sub;
 var $507=(($506+40)|0);
 HEAP32[(($507)>>2)]=$505;
 var $508=$xxs;
 var $509=(($508)|0);
 var $510=(($509)|0);
 var $511=$j;
 var $512=(($xsh+((($511)*(40))&-1))|0);
 var $513=(($512+18)|0);
 var $514=(($513)|0);
 var $515=_copy_adjust($510,$514,22);
 var $516=$j;
 var $517=(($xsh+((($516)*(40))&-1))|0);
 var $518=(($517)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=$xxs;
 var $521=(($520+32)|0);
 HEAP32[(($521)>>2)]=$519;
 var $522=$j;
 var $523=(($xsh+((($522)*(40))&-1))|0);
 var $524=(($523+4)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=$xxs;
 var $527=(($526+36)|0);
 HEAP32[(($527)>>2)]=$525;
 var $528=$j;
 var $529=(($xsh+((($528)*(40))&-1))|0);
 var $530=(($529+4)|0);
 var $531=HEAP32[(($530)>>2)];
 var $532=$j;
 var $533=(($xsh+((($532)*(40))&-1))|0);
 var $534=(($533+8)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=((($531)+($535))|0);
 var $537=$xxs;
 var $538=(($537+40)|0);
 HEAP32[(($538)>>2)]=$536;
 var $539=$xxs;
 var $540=(($539+44)|0);
 HEAP32[(($540)>>2)]=0;
 var $541=$j;
 var $542=(($xsh+((($541)*(40))&-1))|0);
 var $543=(($542+14)|0);
 var $544=HEAP8[($543)];
 var $545=($544&255);
 var $546=$545&16;
 var $547=($546|0)!=0;
 if($547){label=54;break;}else{label=55;break;}
 case 54: 
 var $549=$xxs;
 var $550=(($549+44)|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=$551|1;
 HEAP32[(($550)>>2)]=$552;
 var $553=$xxs;
 var $554=(($553+32)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=$555>>1;
 HEAP32[(($554)>>2)]=$556;
 var $557=$xxs;
 var $558=(($557+36)|0);
 var $559=HEAP32[(($558)>>2)];
 var $560=$559>>1;
 HEAP32[(($558)>>2)]=$560;
 var $561=$xxs;
 var $562=(($561+40)|0);
 var $563=HEAP32[(($562)>>2)];
 var $564=$563>>1;
 HEAP32[(($562)>>2)]=$564;
 label=55;break;
 case 55: 
 var $566=$j;
 var $567=(($xsh+((($566)*(40))&-1))|0);
 var $568=(($567+14)|0);
 var $569=HEAP8[($568)];
 var $570=($569&255);
 var $571=$570&1;
 var $572=($571|0)!=0;
 var $573=($572?2:0);
 var $574=$xxs;
 var $575=(($574+44)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=$576|$573;
 HEAP32[(($575)>>2)]=$577;
 var $578=$j;
 var $579=(($xsh+((($578)*(40))&-1))|0);
 var $580=(($579+14)|0);
 var $581=HEAP8[($580)];
 var $582=($581&255);
 var $583=$582&2;
 var $584=($583|0)!=0;
 var $585=($584?6:0);
 var $586=$xxs;
 var $587=(($586+44)|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=$588|$585;
 HEAP32[(($587)>>2)]=$589;
 label=56;break;
 case 56: 
 var $591=$j;
 var $592=((($591)+(1))|0);
 $j=$592;
 var $593=$sample_num;
 var $594=((($593)+(1))|0);
 $sample_num=$594;
 label=48;break;
 case 57: 
 $j=0;
 label=58;break;
 case 58: 
 var $597=$j;
 var $598=$xxi;
 var $599=(($598+36)|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=($597|0)<($600|0);
 if($601){label=59;break;}else{label=67;break;}
 case 59: 
 var $603=$j;
 var $604=$xxi;
 var $605=(($604+756)|0);
 var $606=HEAP32[(($605)>>2)];
 var $607=(($606+($603<<6))|0);
 $sub1=$607;
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 var $610=$3;
 var $611=($610|0)>259;
 if($611){label=62;break;}else{label=65;break;}
 case 62: 
 var $613=$2;
 var $614=$4;
 var $615=$sub1;
 var $616=(($615+40)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=$mod;
 var $619=(($618+180)|0);
 var $620=HEAP32[(($619)>>2)];
 var $621=(($620+((($617)*(52))&-1))|0);
 var $622=_load_sample($613,$614,1,$621,0);
 var $623=($622|0)<0;
 if($623){label=63;break;}else{label=64;break;}
 case 63: 
 $1=-1;
 label=74;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 var $628=$j;
 var $629=((($628)+(1))|0);
 $j=$629;
 label=58;break;
 case 67: 
 label=69;break;
 case 68: 
 var $632=$4;
 var $633=(($xih)|0);
 var $634=HEAP32[(($633)>>2)];
 var $635=((($634)-(33))|0);
 var $636=_hio_seek($632,$635,1);
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 var $639=$i;
 var $640=((($639)+(1))|0);
 $i=$640;
 label=6;break;
 case 71: 
 var $642=$mod;
 var $643=(($642+180)|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=$mod;
 var $646=(($645+144)|0);
 var $647=$sample_num;
 var $648=_realloc_samples($644,$646,$647);
 var $649=$mod;
 var $650=(($649+180)|0);
 HEAP32[(($650)>>2)]=$648;
 var $651=$mod;
 var $652=(($651+180)|0);
 var $653=HEAP32[(($652)>>2)];
 var $654=($653|0)==0;
 if($654){label=72;break;}else{label=73;break;}
 case 72: 
 $1=-1;
 label=74;break;
 case 73: 
 $1=0;
 label=74;break;
 case 74: 
 var $658=$1;
 STACKTOP=sp;return $658;
  default: assert(0, "bad label: " + label);
 }
}
function _load_patterns($m,$version,$f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mod;
 var $xph=sp;
 var $event;
 var $patbuf;
 var $pat;
 var $b;
 var $i;
 var $j;
 var $r;
 var $t;
 $2=$m;
 $3=$version;
 $4=$f;
 var $5=$2;
 var $6=(($5)|0);
 $mod=$6;
 var $7=$mod;
 var $8=(($7+128)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)+(1))|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=$mod;
 var $12=_pattern_init($11);
 var $13=($12|0)<0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=69;break;
 case 3: 
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $19=$i;
 var $20=$mod;
 var $21=(($20+128)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(1))|0);
 var $24=($19|0)<($23|0);
 if($24){label=7;break;}else{label=60;break;}
 case 7: 
 var $26=$4;
 var $27=_hio_read32l($26);
 var $28=(($xph)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=$4;
 var $30=_hio_read8($29);
 var $31=(($xph+4)|0);
 HEAP8[($31)]=$30;
 var $32=$3;
 var $33=($32|0)>258;
 if($33){label=8;break;}else{label=9;break;}
 case 8: 
 var $35=$4;
 var $36=_hio_read16l($35);
 var $37=($36&65535);
 var $44=$37;label=10;break;
 case 9: 
 var $39=$4;
 var $40=_hio_read8($39);
 var $41=($40&255);
 var $42=((($41)+(1))|0);
 var $44=$42;label=10;break;
 case 10: 
 var $44;
 var $45=(($44)&65535);
 var $46=(($xph+6)|0);
 HEAP16[(($46)>>1)]=$45;
 var $47=$4;
 var $48=_hio_read16l($47);
 var $49=(($xph+8)|0);
 HEAP16[(($49)>>1)]=$48;
 var $50=(($xph+6)|0);
 var $51=HEAP16[(($50)>>1)];
 var $52=($51&65535);
 $r=$52;
 var $53=$r;
 var $54=($53|0)==0;
 if($54){label=11;break;}else{label=12;break;}
 case 11: 
 $r=256;
 label=12;break;
 case 12: 
 var $57=$mod;
 var $58=$i;
 var $59=$r;
 var $60=_pattern_tracks_alloc($57,$58,$59);
 var $61=($60|0)<0;
 if($61){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=69;break;
 case 14: 
 var $64=(($xph+8)|0);
 var $65=HEAP16[(($64)>>1)];
 var $66=(($65<<16)>>16)!=0;
 if($66){label=15;break;}else{label=58;break;}
 case 15: 
 var $68=(($xph+8)|0);
 var $69=HEAP16[(($68)>>1)];
 var $70=($69&65535);
 var $71=_calloc(1,$70);
 $patbuf=$71;
 $pat=$71;
 var $72=$patbuf;
 var $73=($72|0)==0;
 if($73){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=69;break;
 case 17: 
 var $76=$patbuf;
 var $77=(($xph+8)|0);
 var $78=HEAP16[(($77)>>1)];
 var $79=($78&65535);
 var $80=$4;
 var $81=_hio_read($76,1,$79,$80);
 $j=0;
 label=18;break;
 case 18: 
 var $83=$j;
 var $84=$mod;
 var $85=(($84+136)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=$r;
 var $88=(Math_imul($86,$87)|0);
 var $89=($83|0)<($88|0);
 if($89){label=19;break;}else{label=57;break;}
 case 19: 
 var $91=$pat;
 var $92=$patbuf;
 var $93=$91;
 var $94=$92;
 var $95=((($93)-($94))|0);
 var $96=(($xph+8)|0);
 var $97=HEAP16[(($96)>>1)];
 var $98=($97&65535);
 var $99=($95|0)>=($98|0);
 if($99){label=20;break;}else{label=21;break;}
 case 20: 
 label=57;break;
 case 21: 
 var $102=$j;
 var $103=$mod;
 var $104=(($103+136)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(((($102|0))/(($105|0)))&-1);
 var $107=$j;
 var $108=$mod;
 var $109=(($108+136)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(((($107|0))%(($110|0)))&-1);
 var $112=$i;
 var $113=$2;
 var $114=(($113)|0);
 var $115=(($114+168)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+($112<<2))|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+4)|0);
 var $120=(($119+($111<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$2;
 var $123=(($122)|0);
 var $124=(($123+172)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+($121<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+4)|0);
 var $129=(($128+($106<<3))|0);
 $event=$129;
 var $130=$pat;
 var $131=(($130+1)|0);
 $pat=$131;
 var $132=HEAP8[($130)];
 $b=$132;
 var $133=($132&255);
 var $134=$133&128;
 var $135=($134|0)!=0;
 if($135){label=22;break;}else{label=33;break;}
 case 22: 
 var $137=$b;
 var $138=($137&255);
 var $139=$138&1;
 var $140=($139|0)!=0;
 if($140){label=23;break;}else{label=24;break;}
 case 23: 
 var $142=$pat;
 var $143=(($142+1)|0);
 $pat=$143;
 var $144=HEAP8[($142)];
 var $145=$event;
 var $146=(($145)|0);
 HEAP8[($146)]=$144;
 label=24;break;
 case 24: 
 var $148=$b;
 var $149=($148&255);
 var $150=$149&2;
 var $151=($150|0)!=0;
 if($151){label=25;break;}else{label=26;break;}
 case 25: 
 var $153=$pat;
 var $154=(($153+1)|0);
 $pat=$154;
 var $155=HEAP8[($153)];
 var $156=$event;
 var $157=(($156+1)|0);
 HEAP8[($157)]=$155;
 label=26;break;
 case 26: 
 var $159=$b;
 var $160=($159&255);
 var $161=$160&4;
 var $162=($161|0)!=0;
 if($162){label=27;break;}else{label=28;break;}
 case 27: 
 var $164=$pat;
 var $165=(($164+1)|0);
 $pat=$165;
 var $166=HEAP8[($164)];
 var $167=$event;
 var $168=(($167+2)|0);
 HEAP8[($168)]=$166;
 label=28;break;
 case 28: 
 var $170=$b;
 var $171=($170&255);
 var $172=$171&8;
 var $173=($172|0)!=0;
 if($173){label=29;break;}else{label=30;break;}
 case 29: 
 var $175=$pat;
 var $176=(($175+1)|0);
 $pat=$176;
 var $177=HEAP8[($175)];
 var $178=$event;
 var $179=(($178+3)|0);
 HEAP8[($179)]=$177;
 label=30;break;
 case 30: 
 var $181=$b;
 var $182=($181&255);
 var $183=$182&16;
 var $184=($183|0)!=0;
 if($184){label=31;break;}else{label=32;break;}
 case 31: 
 var $186=$pat;
 var $187=(($186+1)|0);
 $pat=$187;
 var $188=HEAP8[($186)];
 var $189=$event;
 var $190=(($189+4)|0);
 HEAP8[($190)]=$188;
 label=32;break;
 case 32: 
 label=34;break;
 case 33: 
 var $193=$b;
 var $194=$event;
 var $195=(($194)|0);
 HEAP8[($195)]=$193;
 var $196=$pat;
 var $197=(($196+1)|0);
 $pat=$197;
 var $198=HEAP8[($196)];
 var $199=$event;
 var $200=(($199+1)|0);
 HEAP8[($200)]=$198;
 var $201=$pat;
 var $202=(($201+1)|0);
 $pat=$202;
 var $203=HEAP8[($201)];
 var $204=$event;
 var $205=(($204+2)|0);
 HEAP8[($205)]=$203;
 var $206=$pat;
 var $207=(($206+1)|0);
 $pat=$207;
 var $208=HEAP8[($206)];
 var $209=$event;
 var $210=(($209+3)|0);
 HEAP8[($210)]=$208;
 var $211=$pat;
 var $212=(($211+1)|0);
 $pat=$212;
 var $213=HEAP8[($211)];
 var $214=$event;
 var $215=(($214+4)|0);
 HEAP8[($215)]=$213;
 label=34;break;
 case 34: 
 var $217=$event;
 var $218=(($217)|0);
 var $219=HEAP8[($218)];
 var $220=($219&255);
 var $221=($220|0)==97;
 if($221){label=35;break;}else{label=36;break;}
 case 35: 
 var $223=$event;
 var $224=(($223)|0);
 HEAP8[($224)]=-127;
 label=39;break;
 case 36: 
 var $226=$event;
 var $227=(($226)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=($229|0)>0;
 if($230){label=37;break;}else{label=38;break;}
 case 37: 
 var $232=$event;
 var $233=(($232)|0);
 var $234=HEAP8[($233)];
 var $235=($234&255);
 var $236=((($235)+(12))|0);
 var $237=(($236)&255);
 HEAP8[($233)]=$237;
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $240=$event;
 var $241=(($240+2)|0);
 var $242=HEAP8[($241)];
 var $243=(($242<<24)>>24)!=0;
 if($243){label=41;break;}else{label=40;break;}
 case 40: 
 label=56;break;
 case 41: 
 var $246=$event;
 var $247=(($246+2)|0);
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=($249|0)>=16;
 if($250){label=42;break;}else{label=44;break;}
 case 42: 
 var $252=$event;
 var $253=(($252+2)|0);
 var $254=HEAP8[($253)];
 var $255=($254&255);
 var $256=($255|0)<=80;
 if($256){label=43;break;}else{label=44;break;}
 case 43: 
 var $258=$event;
 var $259=(($258+2)|0);
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=((($261)-(15))|0);
 var $263=(($262)&255);
 HEAP8[($259)]=$263;
 label=56;break;
 case 44: 
 var $265=$event;
 var $266=(($265+2)|0);
 var $267=HEAP8[($266)];
 var $268=($267&255);
 var $269=$268>>4;
 switch(($269|0)){case 6:{ label=45;break;}case 7:{ label=46;break;}case 8:{ label=47;break;}case 9:{ label=48;break;}case 10:{ label=49;break;}case 11:{ label=50;break;}case 12:{ label=51;break;}case 13:{ label=52;break;}case 14:{ label=53;break;}case 15:{ label=54;break;}default:{label=55;break;}}break;
 case 45: 
 var $271=$event;
 var $272=(($271+5)|0);
 HEAP8[($272)]=-92;
 var $273=$event;
 var $274=(($273+2)|0);
 var $275=HEAP8[($274)];
 var $276=($275&255);
 var $277=((($276)-(96))|0);
 var $278=(($277)&255);
 var $279=$event;
 var $280=(($279+6)|0);
 HEAP8[($280)]=$278;
 label=55;break;
 case 46: 
 var $282=$event;
 var $283=(($282+5)|0);
 HEAP8[($283)]=-92;
 var $284=$event;
 var $285=(($284+2)|0);
 var $286=HEAP8[($285)];
 var $287=($286&255);
 var $288=((($287)-(112))|0);
 var $289=$288<<4;
 var $290=(($289)&255);
 var $291=$event;
 var $292=(($291+6)|0);
 HEAP8[($292)]=$290;
 label=55;break;
 case 47: 
 var $294=$event;
 var $295=(($294+5)|0);
 HEAP8[($295)]=14;
 var $296=$event;
 var $297=(($296+2)|0);
 var $298=HEAP8[($297)];
 var $299=($298&255);
 var $300=((($299)-(128))|0);
 var $301=176|$300;
 var $302=(($301)&255);
 var $303=$event;
 var $304=(($303+6)|0);
 HEAP8[($304)]=$302;
 label=55;break;
 case 48: 
 var $306=$event;
 var $307=(($306+5)|0);
 HEAP8[($307)]=14;
 var $308=$event;
 var $309=(($308+2)|0);
 var $310=HEAP8[($309)];
 var $311=($310&255);
 var $312=((($311)-(144))|0);
 var $313=160|$312;
 var $314=(($313)&255);
 var $315=$event;
 var $316=(($315+6)|0);
 HEAP8[($316)]=$314;
 label=55;break;
 case 49: 
 var $318=$event;
 var $319=(($318+5)|0);
 HEAP8[($319)]=4;
 var $320=$event;
 var $321=(($320+2)|0);
 var $322=HEAP8[($321)];
 var $323=($322&255);
 var $324=((($323)-(160))|0);
 var $325=$324<<4;
 var $326=(($325)&255);
 var $327=$event;
 var $328=(($327+6)|0);
 HEAP8[($328)]=$326;
 label=55;break;
 case 50: 
 var $330=$event;
 var $331=(($330+5)|0);
 HEAP8[($331)]=4;
 var $332=$event;
 var $333=(($332+2)|0);
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=((($335)-(176))|0);
 var $337=(($336)&255);
 var $338=$event;
 var $339=(($338+6)|0);
 HEAP8[($339)]=$337;
 label=55;break;
 case 51: 
 var $341=$event;
 var $342=(($341+5)|0);
 HEAP8[($342)]=8;
 var $343=$event;
 var $344=(($343+2)|0);
 var $345=HEAP8[($344)];
 var $346=($345&255);
 var $347=((($346)-(192))|0);
 var $348=$347<<4;
 var $349=((($348)+(8))|0);
 var $350=(($349)&255);
 var $351=$event;
 var $352=(($351+6)|0);
 HEAP8[($352)]=$350;
 label=55;break;
 case 52: 
 var $354=$event;
 var $355=(($354+5)|0);
 HEAP8[($355)]=25;
 var $356=$event;
 var $357=(($356+2)|0);
 var $358=HEAP8[($357)];
 var $359=($358&255);
 var $360=((($359)-(208))|0);
 var $361=$360<<4;
 var $362=(($361)&255);
 var $363=$event;
 var $364=(($363+6)|0);
 HEAP8[($364)]=$362;
 label=55;break;
 case 53: 
 var $366=$event;
 var $367=(($366+5)|0);
 HEAP8[($367)]=25;
 var $368=$event;
 var $369=(($368+2)|0);
 var $370=HEAP8[($369)];
 var $371=($370&255);
 var $372=((($371)-(224))|0);
 var $373=(($372)&255);
 var $374=$event;
 var $375=(($374+6)|0);
 HEAP8[($375)]=$373;
 label=55;break;
 case 54: 
 var $377=$event;
 var $378=(($377+5)|0);
 HEAP8[($378)]=3;
 var $379=$event;
 var $380=(($379+2)|0);
 var $381=HEAP8[($380)];
 var $382=($381&255);
 var $383=((($382)-(240))|0);
 var $384=$383<<4;
 var $385=(($384)&255);
 var $386=$event;
 var $387=(($386+6)|0);
 HEAP8[($387)]=$385;
 label=55;break;
 case 55: 
 var $389=$event;
 var $390=(($389+2)|0);
 HEAP8[($390)]=0;
 label=56;break;
 case 56: 
 var $392=$j;
 var $393=((($392)+(1))|0);
 $j=$393;
 label=18;break;
 case 57: 
 var $395=$patbuf;
 _free($395);
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 var $398=$i;
 var $399=((($398)+(1))|0);
 $i=$399;
 label=6;break;
 case 60: 
 var $401=$i;
 var $402=$mod;
 var $403=(($402+136)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=(Math_imul($401,$404)|0);
 $t=$405;
 var $406=$mod;
 var $407=$i;
 var $408=_pattern_alloc($406,$407);
 var $409=($408|0)<0;
 if($409){label=61;break;}else{label=62;break;}
 case 61: 
 $1=-1;
 label=69;break;
 case 62: 
 var $412=$i;
 var $413=$mod;
 var $414=(($413+168)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=(($415+($412<<2))|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=(($417)|0);
 HEAP32[(($418)>>2)]=64;
 var $419=$mod;
 var $420=$t;
 var $421=_track_alloc($419,$420,64);
 var $422=($421|0)<0;
 if($422){label=63;break;}else{label=64;break;}
 case 63: 
 $1=-1;
 label=69;break;
 case 64: 
 $j=0;
 label=65;break;
 case 65: 
 var $426=$j;
 var $427=$mod;
 var $428=(($427+136)|0);
 var $429=HEAP32[(($428)>>2)];
 var $430=($426|0)<($429|0);
 if($430){label=66;break;}else{label=68;break;}
 case 66: 
 var $432=$t;
 var $433=$j;
 var $434=$i;
 var $435=$mod;
 var $436=(($435+168)|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=(($437+($434<<2))|0);
 var $439=HEAP32[(($438)>>2)];
 var $440=(($439+4)|0);
 var $441=(($440+($433<<2))|0);
 HEAP32[(($441)>>2)]=$432;
 label=67;break;
 case 67: 
 var $443=$j;
 var $444=((($443)+(1))|0);
 $j=$444;
 label=65;break;
 case 68: 
 $1=0;
 label=69;break;
 case 69: 
 var $447=$1;
 STACKTOP=sp;return $447;
  default: assert(0, "bad label: " + label);
 }
}
function _MD5Init($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$ctx;
 var $2=$1;
 var $3=(($2+16)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$1;
 var $5=(($4)|0);
 var $6=(($5)|0);
 HEAP32[(($6)>>2)]=1732584193;
 var $7=$1;
 var $8=(($7)|0);
 var $9=(($8+4)|0);
 HEAP32[(($9)>>2)]=-271733879;
 var $10=$1;
 var $11=(($10)|0);
 var $12=(($11+8)|0);
 HEAP32[(($12)>>2)]=-1732584194;
 var $13=$1;
 var $14=(($13)|0);
 var $15=(($14+12)|0);
 HEAP32[(($15)>>2)]=271733878;
 STACKTOP=sp;return;
}
function _MD5Update($ctx,$input,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $have;
 var $need;
 $1=$ctx;
 $2=$input;
 $3=$len;
 var $4=$1;
 var $5=(($4+16)|0);
 var $ld$0$0=(($5)|0);
 var $6$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($5+4)|0);
 var $6$1=HEAP32[(($ld$1$1)>>2)];
 var $7$0=($6$0>>>3)|($6$1<<29);
 var $7$1=($6$1>>>3)|(0<<29);
 var $$etemp$2$0=63;
 var $$etemp$2$1=0;
 var $8$0=$7$0&$$etemp$2$0;
 var $8$1=$7$1&$$etemp$2$1;
 var $9$0=$8$0;
 var $9=$9$0;
 $have=$9;
 var $10=$have;
 var $11=(((64)-($10))|0);
 $need=$11;
 var $12=$3;
 var $13$0=$12;
 var $13$1=0;
 var $14$0=($13$0<<3)|(0>>>29);
 var $14$1=($13$1<<3)|($13$0>>>29);
 var $15=$1;
 var $16=(($15+16)|0);
 var $ld$3$0=(($16)|0);
 var $17$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$4$1)>>2)];
 var $18$0=_i64Add($17$0,$17$1,$14$0,$14$1);var $18$1=tempRet0;
 var $st$5$0=(($16)|0);
 HEAP32[(($st$5$0)>>2)]=$18$0;
 var $st$6$1=(($16+4)|0);
 HEAP32[(($st$6$1)>>2)]=$18$1;
 var $19=$3;
 var $20=$need;
 var $21=($19>>>0)>=($20>>>0);
 if($21){label=2;break;}else{label=8;break;}
 case 2: 
 var $23=$have;
 var $24=($23|0)!=0;
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 var $26=$1;
 var $27=(($26+24)|0);
 var $28=(($27)|0);
 var $29=$have;
 var $30=(($28+$29)|0);
 var $31=$2;
 var $32=$need;
 assert($32 % 1 === 0);(_memcpy($30, $31, $32)|0);
 var $33=$1;
 var $34=(($33)|0);
 var $35=(($34)|0);
 var $36=$1;
 var $37=(($36+24)|0);
 var $38=(($37)|0);
 _MD5Transform($35,$38);
 var $39=$need;
 var $40=$2;
 var $41=(($40+$39)|0);
 $2=$41;
 var $42=$need;
 var $43=$3;
 var $44=((($43)-($42))|0);
 $3=$44;
 $have=0;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $47=$3;
 var $48=($47>>>0)>=64;
 if($48){label=6;break;}else{label=7;break;}
 case 6: 
 var $50=$1;
 var $51=(($50)|0);
 var $52=(($51)|0);
 var $53=$2;
 _MD5Transform($52,$53);
 var $54=$2;
 var $55=(($54+64)|0);
 $2=$55;
 var $56=$3;
 var $57=((($56)-(64))|0);
 $3=$57;
 label=5;break;
 case 7: 
 label=8;break;
 case 8: 
 var $60=$3;
 var $61=($60|0)!=0;
 if($61){label=9;break;}else{label=10;break;}
 case 9: 
 var $63=$1;
 var $64=(($63+24)|0);
 var $65=(($64)|0);
 var $66=$have;
 var $67=(($65+$66)|0);
 var $68=$2;
 var $69=$3;
 assert($69 % 1 === 0);(_memcpy($67, $68, $69)|0);
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _MD5Transform($state,$block){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $a;
 var $b;
 var $c;
 var $d;
 var $in=sp;
 $1=$state;
 $2=$block;
 var $3=$in;
 var $4=$2;
 assert(64 % 1 === 0);(_memcpy($3, $4, 64)|0);
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 $a=$7;
 var $8=$1;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 $b=$10;
 var $11=$1;
 var $12=(($11+8)|0);
 var $13=HEAP32[(($12)>>2)];
 $c=$13;
 var $14=$1;
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 $d=$16;
 var $17=$d;
 var $18=$b;
 var $19=$c;
 var $20=$d;
 var $21=$19^$20;
 var $22=$18&$21;
 var $23=$17^$22;
 var $24=(($in)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($23)+($25))|0);
 var $27=((($26)-(680876936))|0);
 var $28=$a;
 var $29=((($28)+($27))|0);
 $a=$29;
 var $30=$a;
 var $31=$30<<7;
 var $32=$a;
 var $33=$32>>>25;
 var $34=$31|$33;
 $a=$34;
 var $35=$b;
 var $36=$a;
 var $37=((($36)+($35))|0);
 $a=$37;
 var $38=$c;
 var $39=$a;
 var $40=$b;
 var $41=$c;
 var $42=$40^$41;
 var $43=$39&$42;
 var $44=$38^$43;
 var $45=(($in+4)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=((($44)+($46))|0);
 var $48=((($47)-(389564586))|0);
 var $49=$d;
 var $50=((($49)+($48))|0);
 $d=$50;
 var $51=$d;
 var $52=$51<<12;
 var $53=$d;
 var $54=$53>>>20;
 var $55=$52|$54;
 $d=$55;
 var $56=$a;
 var $57=$d;
 var $58=((($57)+($56))|0);
 $d=$58;
 var $59=$b;
 var $60=$d;
 var $61=$a;
 var $62=$b;
 var $63=$61^$62;
 var $64=$60&$63;
 var $65=$59^$64;
 var $66=(($in+8)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=((($65)+($67))|0);
 var $69=((($68)+(606105819))|0);
 var $70=$c;
 var $71=((($70)+($69))|0);
 $c=$71;
 var $72=$c;
 var $73=$72<<17;
 var $74=$c;
 var $75=$74>>>15;
 var $76=$73|$75;
 $c=$76;
 var $77=$d;
 var $78=$c;
 var $79=((($78)+($77))|0);
 $c=$79;
 var $80=$a;
 var $81=$c;
 var $82=$d;
 var $83=$a;
 var $84=$82^$83;
 var $85=$81&$84;
 var $86=$80^$85;
 var $87=(($in+12)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=((($86)+($88))|0);
 var $90=((($89)-(1044525330))|0);
 var $91=$b;
 var $92=((($91)+($90))|0);
 $b=$92;
 var $93=$b;
 var $94=$93<<22;
 var $95=$b;
 var $96=$95>>>10;
 var $97=$94|$96;
 $b=$97;
 var $98=$c;
 var $99=$b;
 var $100=((($99)+($98))|0);
 $b=$100;
 var $101=$d;
 var $102=$b;
 var $103=$c;
 var $104=$d;
 var $105=$103^$104;
 var $106=$102&$105;
 var $107=$101^$106;
 var $108=(($in+16)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=((($107)+($109))|0);
 var $111=((($110)-(176418897))|0);
 var $112=$a;
 var $113=((($112)+($111))|0);
 $a=$113;
 var $114=$a;
 var $115=$114<<7;
 var $116=$a;
 var $117=$116>>>25;
 var $118=$115|$117;
 $a=$118;
 var $119=$b;
 var $120=$a;
 var $121=((($120)+($119))|0);
 $a=$121;
 var $122=$c;
 var $123=$a;
 var $124=$b;
 var $125=$c;
 var $126=$124^$125;
 var $127=$123&$126;
 var $128=$122^$127;
 var $129=(($in+20)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=((($128)+($130))|0);
 var $132=((($131)+(1200080426))|0);
 var $133=$d;
 var $134=((($133)+($132))|0);
 $d=$134;
 var $135=$d;
 var $136=$135<<12;
 var $137=$d;
 var $138=$137>>>20;
 var $139=$136|$138;
 $d=$139;
 var $140=$a;
 var $141=$d;
 var $142=((($141)+($140))|0);
 $d=$142;
 var $143=$b;
 var $144=$d;
 var $145=$a;
 var $146=$b;
 var $147=$145^$146;
 var $148=$144&$147;
 var $149=$143^$148;
 var $150=(($in+24)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=((($149)+($151))|0);
 var $153=((($152)-(1473231341))|0);
 var $154=$c;
 var $155=((($154)+($153))|0);
 $c=$155;
 var $156=$c;
 var $157=$156<<17;
 var $158=$c;
 var $159=$158>>>15;
 var $160=$157|$159;
 $c=$160;
 var $161=$d;
 var $162=$c;
 var $163=((($162)+($161))|0);
 $c=$163;
 var $164=$a;
 var $165=$c;
 var $166=$d;
 var $167=$a;
 var $168=$166^$167;
 var $169=$165&$168;
 var $170=$164^$169;
 var $171=(($in+28)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=((($170)+($172))|0);
 var $174=((($173)-(45705983))|0);
 var $175=$b;
 var $176=((($175)+($174))|0);
 $b=$176;
 var $177=$b;
 var $178=$177<<22;
 var $179=$b;
 var $180=$179>>>10;
 var $181=$178|$180;
 $b=$181;
 var $182=$c;
 var $183=$b;
 var $184=((($183)+($182))|0);
 $b=$184;
 var $185=$d;
 var $186=$b;
 var $187=$c;
 var $188=$d;
 var $189=$187^$188;
 var $190=$186&$189;
 var $191=$185^$190;
 var $192=(($in+32)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=((($191)+($193))|0);
 var $195=((($194)+(1770035416))|0);
 var $196=$a;
 var $197=((($196)+($195))|0);
 $a=$197;
 var $198=$a;
 var $199=$198<<7;
 var $200=$a;
 var $201=$200>>>25;
 var $202=$199|$201;
 $a=$202;
 var $203=$b;
 var $204=$a;
 var $205=((($204)+($203))|0);
 $a=$205;
 var $206=$c;
 var $207=$a;
 var $208=$b;
 var $209=$c;
 var $210=$208^$209;
 var $211=$207&$210;
 var $212=$206^$211;
 var $213=(($in+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=((($212)+($214))|0);
 var $216=((($215)-(1958414417))|0);
 var $217=$d;
 var $218=((($217)+($216))|0);
 $d=$218;
 var $219=$d;
 var $220=$219<<12;
 var $221=$d;
 var $222=$221>>>20;
 var $223=$220|$222;
 $d=$223;
 var $224=$a;
 var $225=$d;
 var $226=((($225)+($224))|0);
 $d=$226;
 var $227=$b;
 var $228=$d;
 var $229=$a;
 var $230=$b;
 var $231=$229^$230;
 var $232=$228&$231;
 var $233=$227^$232;
 var $234=(($in+40)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=((($233)+($235))|0);
 var $237=((($236)-(42063))|0);
 var $238=$c;
 var $239=((($238)+($237))|0);
 $c=$239;
 var $240=$c;
 var $241=$240<<17;
 var $242=$c;
 var $243=$242>>>15;
 var $244=$241|$243;
 $c=$244;
 var $245=$d;
 var $246=$c;
 var $247=((($246)+($245))|0);
 $c=$247;
 var $248=$a;
 var $249=$c;
 var $250=$d;
 var $251=$a;
 var $252=$250^$251;
 var $253=$249&$252;
 var $254=$248^$253;
 var $255=(($in+44)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=((($254)+($256))|0);
 var $258=((($257)-(1990404162))|0);
 var $259=$b;
 var $260=((($259)+($258))|0);
 $b=$260;
 var $261=$b;
 var $262=$261<<22;
 var $263=$b;
 var $264=$263>>>10;
 var $265=$262|$264;
 $b=$265;
 var $266=$c;
 var $267=$b;
 var $268=((($267)+($266))|0);
 $b=$268;
 var $269=$d;
 var $270=$b;
 var $271=$c;
 var $272=$d;
 var $273=$271^$272;
 var $274=$270&$273;
 var $275=$269^$274;
 var $276=(($in+48)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=((($275)+($277))|0);
 var $279=((($278)+(1804603682))|0);
 var $280=$a;
 var $281=((($280)+($279))|0);
 $a=$281;
 var $282=$a;
 var $283=$282<<7;
 var $284=$a;
 var $285=$284>>>25;
 var $286=$283|$285;
 $a=$286;
 var $287=$b;
 var $288=$a;
 var $289=((($288)+($287))|0);
 $a=$289;
 var $290=$c;
 var $291=$a;
 var $292=$b;
 var $293=$c;
 var $294=$292^$293;
 var $295=$291&$294;
 var $296=$290^$295;
 var $297=(($in+52)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=((($296)+($298))|0);
 var $300=((($299)-(40341101))|0);
 var $301=$d;
 var $302=((($301)+($300))|0);
 $d=$302;
 var $303=$d;
 var $304=$303<<12;
 var $305=$d;
 var $306=$305>>>20;
 var $307=$304|$306;
 $d=$307;
 var $308=$a;
 var $309=$d;
 var $310=((($309)+($308))|0);
 $d=$310;
 var $311=$b;
 var $312=$d;
 var $313=$a;
 var $314=$b;
 var $315=$313^$314;
 var $316=$312&$315;
 var $317=$311^$316;
 var $318=(($in+56)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=((($317)+($319))|0);
 var $321=((($320)-(1502002290))|0);
 var $322=$c;
 var $323=((($322)+($321))|0);
 $c=$323;
 var $324=$c;
 var $325=$324<<17;
 var $326=$c;
 var $327=$326>>>15;
 var $328=$325|$327;
 $c=$328;
 var $329=$d;
 var $330=$c;
 var $331=((($330)+($329))|0);
 $c=$331;
 var $332=$a;
 var $333=$c;
 var $334=$d;
 var $335=$a;
 var $336=$334^$335;
 var $337=$333&$336;
 var $338=$332^$337;
 var $339=(($in+60)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=((($338)+($340))|0);
 var $342=((($341)+(1236535329))|0);
 var $343=$b;
 var $344=((($343)+($342))|0);
 $b=$344;
 var $345=$b;
 var $346=$345<<22;
 var $347=$b;
 var $348=$347>>>10;
 var $349=$346|$348;
 $b=$349;
 var $350=$c;
 var $351=$b;
 var $352=((($351)+($350))|0);
 $b=$352;
 var $353=$c;
 var $354=$d;
 var $355=$b;
 var $356=$c;
 var $357=$355^$356;
 var $358=$354&$357;
 var $359=$353^$358;
 var $360=(($in+4)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=((($359)+($361))|0);
 var $363=((($362)-(165796510))|0);
 var $364=$a;
 var $365=((($364)+($363))|0);
 $a=$365;
 var $366=$a;
 var $367=$366<<5;
 var $368=$a;
 var $369=$368>>>27;
 var $370=$367|$369;
 $a=$370;
 var $371=$b;
 var $372=$a;
 var $373=((($372)+($371))|0);
 $a=$373;
 var $374=$b;
 var $375=$c;
 var $376=$a;
 var $377=$b;
 var $378=$376^$377;
 var $379=$375&$378;
 var $380=$374^$379;
 var $381=(($in+24)|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=((($380)+($382))|0);
 var $384=((($383)-(1069501632))|0);
 var $385=$d;
 var $386=((($385)+($384))|0);
 $d=$386;
 var $387=$d;
 var $388=$387<<9;
 var $389=$d;
 var $390=$389>>>23;
 var $391=$388|$390;
 $d=$391;
 var $392=$a;
 var $393=$d;
 var $394=((($393)+($392))|0);
 $d=$394;
 var $395=$a;
 var $396=$b;
 var $397=$d;
 var $398=$a;
 var $399=$397^$398;
 var $400=$396&$399;
 var $401=$395^$400;
 var $402=(($in+44)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=((($401)+($403))|0);
 var $405=((($404)+(643717713))|0);
 var $406=$c;
 var $407=((($406)+($405))|0);
 $c=$407;
 var $408=$c;
 var $409=$408<<14;
 var $410=$c;
 var $411=$410>>>18;
 var $412=$409|$411;
 $c=$412;
 var $413=$d;
 var $414=$c;
 var $415=((($414)+($413))|0);
 $c=$415;
 var $416=$d;
 var $417=$a;
 var $418=$c;
 var $419=$d;
 var $420=$418^$419;
 var $421=$417&$420;
 var $422=$416^$421;
 var $423=(($in)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=((($422)+($424))|0);
 var $426=((($425)-(373897302))|0);
 var $427=$b;
 var $428=((($427)+($426))|0);
 $b=$428;
 var $429=$b;
 var $430=$429<<20;
 var $431=$b;
 var $432=$431>>>12;
 var $433=$430|$432;
 $b=$433;
 var $434=$c;
 var $435=$b;
 var $436=((($435)+($434))|0);
 $b=$436;
 var $437=$c;
 var $438=$d;
 var $439=$b;
 var $440=$c;
 var $441=$439^$440;
 var $442=$438&$441;
 var $443=$437^$442;
 var $444=(($in+20)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=((($443)+($445))|0);
 var $447=((($446)-(701558691))|0);
 var $448=$a;
 var $449=((($448)+($447))|0);
 $a=$449;
 var $450=$a;
 var $451=$450<<5;
 var $452=$a;
 var $453=$452>>>27;
 var $454=$451|$453;
 $a=$454;
 var $455=$b;
 var $456=$a;
 var $457=((($456)+($455))|0);
 $a=$457;
 var $458=$b;
 var $459=$c;
 var $460=$a;
 var $461=$b;
 var $462=$460^$461;
 var $463=$459&$462;
 var $464=$458^$463;
 var $465=(($in+40)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=((($464)+($466))|0);
 var $468=((($467)+(38016083))|0);
 var $469=$d;
 var $470=((($469)+($468))|0);
 $d=$470;
 var $471=$d;
 var $472=$471<<9;
 var $473=$d;
 var $474=$473>>>23;
 var $475=$472|$474;
 $d=$475;
 var $476=$a;
 var $477=$d;
 var $478=((($477)+($476))|0);
 $d=$478;
 var $479=$a;
 var $480=$b;
 var $481=$d;
 var $482=$a;
 var $483=$481^$482;
 var $484=$480&$483;
 var $485=$479^$484;
 var $486=(($in+60)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=((($485)+($487))|0);
 var $489=((($488)-(660478335))|0);
 var $490=$c;
 var $491=((($490)+($489))|0);
 $c=$491;
 var $492=$c;
 var $493=$492<<14;
 var $494=$c;
 var $495=$494>>>18;
 var $496=$493|$495;
 $c=$496;
 var $497=$d;
 var $498=$c;
 var $499=((($498)+($497))|0);
 $c=$499;
 var $500=$d;
 var $501=$a;
 var $502=$c;
 var $503=$d;
 var $504=$502^$503;
 var $505=$501&$504;
 var $506=$500^$505;
 var $507=(($in+16)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=((($506)+($508))|0);
 var $510=((($509)-(405537848))|0);
 var $511=$b;
 var $512=((($511)+($510))|0);
 $b=$512;
 var $513=$b;
 var $514=$513<<20;
 var $515=$b;
 var $516=$515>>>12;
 var $517=$514|$516;
 $b=$517;
 var $518=$c;
 var $519=$b;
 var $520=((($519)+($518))|0);
 $b=$520;
 var $521=$c;
 var $522=$d;
 var $523=$b;
 var $524=$c;
 var $525=$523^$524;
 var $526=$522&$525;
 var $527=$521^$526;
 var $528=(($in+36)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=((($527)+($529))|0);
 var $531=((($530)+(568446438))|0);
 var $532=$a;
 var $533=((($532)+($531))|0);
 $a=$533;
 var $534=$a;
 var $535=$534<<5;
 var $536=$a;
 var $537=$536>>>27;
 var $538=$535|$537;
 $a=$538;
 var $539=$b;
 var $540=$a;
 var $541=((($540)+($539))|0);
 $a=$541;
 var $542=$b;
 var $543=$c;
 var $544=$a;
 var $545=$b;
 var $546=$544^$545;
 var $547=$543&$546;
 var $548=$542^$547;
 var $549=(($in+56)|0);
 var $550=HEAP32[(($549)>>2)];
 var $551=((($548)+($550))|0);
 var $552=((($551)-(1019803690))|0);
 var $553=$d;
 var $554=((($553)+($552))|0);
 $d=$554;
 var $555=$d;
 var $556=$555<<9;
 var $557=$d;
 var $558=$557>>>23;
 var $559=$556|$558;
 $d=$559;
 var $560=$a;
 var $561=$d;
 var $562=((($561)+($560))|0);
 $d=$562;
 var $563=$a;
 var $564=$b;
 var $565=$d;
 var $566=$a;
 var $567=$565^$566;
 var $568=$564&$567;
 var $569=$563^$568;
 var $570=(($in+12)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=((($569)+($571))|0);
 var $573=((($572)-(187363961))|0);
 var $574=$c;
 var $575=((($574)+($573))|0);
 $c=$575;
 var $576=$c;
 var $577=$576<<14;
 var $578=$c;
 var $579=$578>>>18;
 var $580=$577|$579;
 $c=$580;
 var $581=$d;
 var $582=$c;
 var $583=((($582)+($581))|0);
 $c=$583;
 var $584=$d;
 var $585=$a;
 var $586=$c;
 var $587=$d;
 var $588=$586^$587;
 var $589=$585&$588;
 var $590=$584^$589;
 var $591=(($in+32)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=((($590)+($592))|0);
 var $594=((($593)+(1163531501))|0);
 var $595=$b;
 var $596=((($595)+($594))|0);
 $b=$596;
 var $597=$b;
 var $598=$597<<20;
 var $599=$b;
 var $600=$599>>>12;
 var $601=$598|$600;
 $b=$601;
 var $602=$c;
 var $603=$b;
 var $604=((($603)+($602))|0);
 $b=$604;
 var $605=$c;
 var $606=$d;
 var $607=$b;
 var $608=$c;
 var $609=$607^$608;
 var $610=$606&$609;
 var $611=$605^$610;
 var $612=(($in+52)|0);
 var $613=HEAP32[(($612)>>2)];
 var $614=((($611)+($613))|0);
 var $615=((($614)-(1444681467))|0);
 var $616=$a;
 var $617=((($616)+($615))|0);
 $a=$617;
 var $618=$a;
 var $619=$618<<5;
 var $620=$a;
 var $621=$620>>>27;
 var $622=$619|$621;
 $a=$622;
 var $623=$b;
 var $624=$a;
 var $625=((($624)+($623))|0);
 $a=$625;
 var $626=$b;
 var $627=$c;
 var $628=$a;
 var $629=$b;
 var $630=$628^$629;
 var $631=$627&$630;
 var $632=$626^$631;
 var $633=(($in+8)|0);
 var $634=HEAP32[(($633)>>2)];
 var $635=((($632)+($634))|0);
 var $636=((($635)-(51403784))|0);
 var $637=$d;
 var $638=((($637)+($636))|0);
 $d=$638;
 var $639=$d;
 var $640=$639<<9;
 var $641=$d;
 var $642=$641>>>23;
 var $643=$640|$642;
 $d=$643;
 var $644=$a;
 var $645=$d;
 var $646=((($645)+($644))|0);
 $d=$646;
 var $647=$a;
 var $648=$b;
 var $649=$d;
 var $650=$a;
 var $651=$649^$650;
 var $652=$648&$651;
 var $653=$647^$652;
 var $654=(($in+28)|0);
 var $655=HEAP32[(($654)>>2)];
 var $656=((($653)+($655))|0);
 var $657=((($656)+(1735328473))|0);
 var $658=$c;
 var $659=((($658)+($657))|0);
 $c=$659;
 var $660=$c;
 var $661=$660<<14;
 var $662=$c;
 var $663=$662>>>18;
 var $664=$661|$663;
 $c=$664;
 var $665=$d;
 var $666=$c;
 var $667=((($666)+($665))|0);
 $c=$667;
 var $668=$d;
 var $669=$a;
 var $670=$c;
 var $671=$d;
 var $672=$670^$671;
 var $673=$669&$672;
 var $674=$668^$673;
 var $675=(($in+48)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=((($674)+($676))|0);
 var $678=((($677)-(1926607734))|0);
 var $679=$b;
 var $680=((($679)+($678))|0);
 $b=$680;
 var $681=$b;
 var $682=$681<<20;
 var $683=$b;
 var $684=$683>>>12;
 var $685=$682|$684;
 $b=$685;
 var $686=$c;
 var $687=$b;
 var $688=((($687)+($686))|0);
 $b=$688;
 var $689=$b;
 var $690=$c;
 var $691=$689^$690;
 var $692=$d;
 var $693=$691^$692;
 var $694=(($in+20)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=((($693)+($695))|0);
 var $697=((($696)-(378558))|0);
 var $698=$a;
 var $699=((($698)+($697))|0);
 $a=$699;
 var $700=$a;
 var $701=$700<<4;
 var $702=$a;
 var $703=$702>>>28;
 var $704=$701|$703;
 $a=$704;
 var $705=$b;
 var $706=$a;
 var $707=((($706)+($705))|0);
 $a=$707;
 var $708=$a;
 var $709=$b;
 var $710=$708^$709;
 var $711=$c;
 var $712=$710^$711;
 var $713=(($in+32)|0);
 var $714=HEAP32[(($713)>>2)];
 var $715=((($712)+($714))|0);
 var $716=((($715)-(2022574463))|0);
 var $717=$d;
 var $718=((($717)+($716))|0);
 $d=$718;
 var $719=$d;
 var $720=$719<<11;
 var $721=$d;
 var $722=$721>>>21;
 var $723=$720|$722;
 $d=$723;
 var $724=$a;
 var $725=$d;
 var $726=((($725)+($724))|0);
 $d=$726;
 var $727=$d;
 var $728=$a;
 var $729=$727^$728;
 var $730=$b;
 var $731=$729^$730;
 var $732=(($in+44)|0);
 var $733=HEAP32[(($732)>>2)];
 var $734=((($731)+($733))|0);
 var $735=((($734)+(1839030562))|0);
 var $736=$c;
 var $737=((($736)+($735))|0);
 $c=$737;
 var $738=$c;
 var $739=$738<<16;
 var $740=$c;
 var $741=$740>>>16;
 var $742=$739|$741;
 $c=$742;
 var $743=$d;
 var $744=$c;
 var $745=((($744)+($743))|0);
 $c=$745;
 var $746=$c;
 var $747=$d;
 var $748=$746^$747;
 var $749=$a;
 var $750=$748^$749;
 var $751=(($in+56)|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=((($750)+($752))|0);
 var $754=((($753)-(35309556))|0);
 var $755=$b;
 var $756=((($755)+($754))|0);
 $b=$756;
 var $757=$b;
 var $758=$757<<23;
 var $759=$b;
 var $760=$759>>>9;
 var $761=$758|$760;
 $b=$761;
 var $762=$c;
 var $763=$b;
 var $764=((($763)+($762))|0);
 $b=$764;
 var $765=$b;
 var $766=$c;
 var $767=$765^$766;
 var $768=$d;
 var $769=$767^$768;
 var $770=(($in+4)|0);
 var $771=HEAP32[(($770)>>2)];
 var $772=((($769)+($771))|0);
 var $773=((($772)-(1530992060))|0);
 var $774=$a;
 var $775=((($774)+($773))|0);
 $a=$775;
 var $776=$a;
 var $777=$776<<4;
 var $778=$a;
 var $779=$778>>>28;
 var $780=$777|$779;
 $a=$780;
 var $781=$b;
 var $782=$a;
 var $783=((($782)+($781))|0);
 $a=$783;
 var $784=$a;
 var $785=$b;
 var $786=$784^$785;
 var $787=$c;
 var $788=$786^$787;
 var $789=(($in+16)|0);
 var $790=HEAP32[(($789)>>2)];
 var $791=((($788)+($790))|0);
 var $792=((($791)+(1272893353))|0);
 var $793=$d;
 var $794=((($793)+($792))|0);
 $d=$794;
 var $795=$d;
 var $796=$795<<11;
 var $797=$d;
 var $798=$797>>>21;
 var $799=$796|$798;
 $d=$799;
 var $800=$a;
 var $801=$d;
 var $802=((($801)+($800))|0);
 $d=$802;
 var $803=$d;
 var $804=$a;
 var $805=$803^$804;
 var $806=$b;
 var $807=$805^$806;
 var $808=(($in+28)|0);
 var $809=HEAP32[(($808)>>2)];
 var $810=((($807)+($809))|0);
 var $811=((($810)-(155497632))|0);
 var $812=$c;
 var $813=((($812)+($811))|0);
 $c=$813;
 var $814=$c;
 var $815=$814<<16;
 var $816=$c;
 var $817=$816>>>16;
 var $818=$815|$817;
 $c=$818;
 var $819=$d;
 var $820=$c;
 var $821=((($820)+($819))|0);
 $c=$821;
 var $822=$c;
 var $823=$d;
 var $824=$822^$823;
 var $825=$a;
 var $826=$824^$825;
 var $827=(($in+40)|0);
 var $828=HEAP32[(($827)>>2)];
 var $829=((($826)+($828))|0);
 var $830=((($829)-(1094730640))|0);
 var $831=$b;
 var $832=((($831)+($830))|0);
 $b=$832;
 var $833=$b;
 var $834=$833<<23;
 var $835=$b;
 var $836=$835>>>9;
 var $837=$834|$836;
 $b=$837;
 var $838=$c;
 var $839=$b;
 var $840=((($839)+($838))|0);
 $b=$840;
 var $841=$b;
 var $842=$c;
 var $843=$841^$842;
 var $844=$d;
 var $845=$843^$844;
 var $846=(($in+52)|0);
 var $847=HEAP32[(($846)>>2)];
 var $848=((($845)+($847))|0);
 var $849=((($848)+(681279174))|0);
 var $850=$a;
 var $851=((($850)+($849))|0);
 $a=$851;
 var $852=$a;
 var $853=$852<<4;
 var $854=$a;
 var $855=$854>>>28;
 var $856=$853|$855;
 $a=$856;
 var $857=$b;
 var $858=$a;
 var $859=((($858)+($857))|0);
 $a=$859;
 var $860=$a;
 var $861=$b;
 var $862=$860^$861;
 var $863=$c;
 var $864=$862^$863;
 var $865=(($in)|0);
 var $866=HEAP32[(($865)>>2)];
 var $867=((($864)+($866))|0);
 var $868=((($867)-(358537222))|0);
 var $869=$d;
 var $870=((($869)+($868))|0);
 $d=$870;
 var $871=$d;
 var $872=$871<<11;
 var $873=$d;
 var $874=$873>>>21;
 var $875=$872|$874;
 $d=$875;
 var $876=$a;
 var $877=$d;
 var $878=((($877)+($876))|0);
 $d=$878;
 var $879=$d;
 var $880=$a;
 var $881=$879^$880;
 var $882=$b;
 var $883=$881^$882;
 var $884=(($in+12)|0);
 var $885=HEAP32[(($884)>>2)];
 var $886=((($883)+($885))|0);
 var $887=((($886)-(722521979))|0);
 var $888=$c;
 var $889=((($888)+($887))|0);
 $c=$889;
 var $890=$c;
 var $891=$890<<16;
 var $892=$c;
 var $893=$892>>>16;
 var $894=$891|$893;
 $c=$894;
 var $895=$d;
 var $896=$c;
 var $897=((($896)+($895))|0);
 $c=$897;
 var $898=$c;
 var $899=$d;
 var $900=$898^$899;
 var $901=$a;
 var $902=$900^$901;
 var $903=(($in+24)|0);
 var $904=HEAP32[(($903)>>2)];
 var $905=((($902)+($904))|0);
 var $906=((($905)+(76029189))|0);
 var $907=$b;
 var $908=((($907)+($906))|0);
 $b=$908;
 var $909=$b;
 var $910=$909<<23;
 var $911=$b;
 var $912=$911>>>9;
 var $913=$910|$912;
 $b=$913;
 var $914=$c;
 var $915=$b;
 var $916=((($915)+($914))|0);
 $b=$916;
 var $917=$b;
 var $918=$c;
 var $919=$917^$918;
 var $920=$d;
 var $921=$919^$920;
 var $922=(($in+36)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=((($921)+($923))|0);
 var $925=((($924)-(640364487))|0);
 var $926=$a;
 var $927=((($926)+($925))|0);
 $a=$927;
 var $928=$a;
 var $929=$928<<4;
 var $930=$a;
 var $931=$930>>>28;
 var $932=$929|$931;
 $a=$932;
 var $933=$b;
 var $934=$a;
 var $935=((($934)+($933))|0);
 $a=$935;
 var $936=$a;
 var $937=$b;
 var $938=$936^$937;
 var $939=$c;
 var $940=$938^$939;
 var $941=(($in+48)|0);
 var $942=HEAP32[(($941)>>2)];
 var $943=((($940)+($942))|0);
 var $944=((($943)-(421815835))|0);
 var $945=$d;
 var $946=((($945)+($944))|0);
 $d=$946;
 var $947=$d;
 var $948=$947<<11;
 var $949=$d;
 var $950=$949>>>21;
 var $951=$948|$950;
 $d=$951;
 var $952=$a;
 var $953=$d;
 var $954=((($953)+($952))|0);
 $d=$954;
 var $955=$d;
 var $956=$a;
 var $957=$955^$956;
 var $958=$b;
 var $959=$957^$958;
 var $960=(($in+60)|0);
 var $961=HEAP32[(($960)>>2)];
 var $962=((($959)+($961))|0);
 var $963=((($962)+(530742520))|0);
 var $964=$c;
 var $965=((($964)+($963))|0);
 $c=$965;
 var $966=$c;
 var $967=$966<<16;
 var $968=$c;
 var $969=$968>>>16;
 var $970=$967|$969;
 $c=$970;
 var $971=$d;
 var $972=$c;
 var $973=((($972)+($971))|0);
 $c=$973;
 var $974=$c;
 var $975=$d;
 var $976=$974^$975;
 var $977=$a;
 var $978=$976^$977;
 var $979=(($in+8)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=((($978)+($980))|0);
 var $982=((($981)-(995338651))|0);
 var $983=$b;
 var $984=((($983)+($982))|0);
 $b=$984;
 var $985=$b;
 var $986=$985<<23;
 var $987=$b;
 var $988=$987>>>9;
 var $989=$986|$988;
 $b=$989;
 var $990=$c;
 var $991=$b;
 var $992=((($991)+($990))|0);
 $b=$992;
 var $993=$c;
 var $994=$b;
 var $995=$d;
 var $996=$995^-1;
 var $997=$994|$996;
 var $998=$993^$997;
 var $999=(($in)|0);
 var $1000=HEAP32[(($999)>>2)];
 var $1001=((($998)+($1000))|0);
 var $1002=((($1001)-(198630844))|0);
 var $1003=$a;
 var $1004=((($1003)+($1002))|0);
 $a=$1004;
 var $1005=$a;
 var $1006=$1005<<6;
 var $1007=$a;
 var $1008=$1007>>>26;
 var $1009=$1006|$1008;
 $a=$1009;
 var $1010=$b;
 var $1011=$a;
 var $1012=((($1011)+($1010))|0);
 $a=$1012;
 var $1013=$b;
 var $1014=$a;
 var $1015=$c;
 var $1016=$1015^-1;
 var $1017=$1014|$1016;
 var $1018=$1013^$1017;
 var $1019=(($in+28)|0);
 var $1020=HEAP32[(($1019)>>2)];
 var $1021=((($1018)+($1020))|0);
 var $1022=((($1021)+(1126891415))|0);
 var $1023=$d;
 var $1024=((($1023)+($1022))|0);
 $d=$1024;
 var $1025=$d;
 var $1026=$1025<<10;
 var $1027=$d;
 var $1028=$1027>>>22;
 var $1029=$1026|$1028;
 $d=$1029;
 var $1030=$a;
 var $1031=$d;
 var $1032=((($1031)+($1030))|0);
 $d=$1032;
 var $1033=$a;
 var $1034=$d;
 var $1035=$b;
 var $1036=$1035^-1;
 var $1037=$1034|$1036;
 var $1038=$1033^$1037;
 var $1039=(($in+56)|0);
 var $1040=HEAP32[(($1039)>>2)];
 var $1041=((($1038)+($1040))|0);
 var $1042=((($1041)-(1416354905))|0);
 var $1043=$c;
 var $1044=((($1043)+($1042))|0);
 $c=$1044;
 var $1045=$c;
 var $1046=$1045<<15;
 var $1047=$c;
 var $1048=$1047>>>17;
 var $1049=$1046|$1048;
 $c=$1049;
 var $1050=$d;
 var $1051=$c;
 var $1052=((($1051)+($1050))|0);
 $c=$1052;
 var $1053=$d;
 var $1054=$c;
 var $1055=$a;
 var $1056=$1055^-1;
 var $1057=$1054|$1056;
 var $1058=$1053^$1057;
 var $1059=(($in+20)|0);
 var $1060=HEAP32[(($1059)>>2)];
 var $1061=((($1058)+($1060))|0);
 var $1062=((($1061)-(57434055))|0);
 var $1063=$b;
 var $1064=((($1063)+($1062))|0);
 $b=$1064;
 var $1065=$b;
 var $1066=$1065<<21;
 var $1067=$b;
 var $1068=$1067>>>11;
 var $1069=$1066|$1068;
 $b=$1069;
 var $1070=$c;
 var $1071=$b;
 var $1072=((($1071)+($1070))|0);
 $b=$1072;
 var $1073=$c;
 var $1074=$b;
 var $1075=$d;
 var $1076=$1075^-1;
 var $1077=$1074|$1076;
 var $1078=$1073^$1077;
 var $1079=(($in+48)|0);
 var $1080=HEAP32[(($1079)>>2)];
 var $1081=((($1078)+($1080))|0);
 var $1082=((($1081)+(1700485571))|0);
 var $1083=$a;
 var $1084=((($1083)+($1082))|0);
 $a=$1084;
 var $1085=$a;
 var $1086=$1085<<6;
 var $1087=$a;
 var $1088=$1087>>>26;
 var $1089=$1086|$1088;
 $a=$1089;
 var $1090=$b;
 var $1091=$a;
 var $1092=((($1091)+($1090))|0);
 $a=$1092;
 var $1093=$b;
 var $1094=$a;
 var $1095=$c;
 var $1096=$1095^-1;
 var $1097=$1094|$1096;
 var $1098=$1093^$1097;
 var $1099=(($in+12)|0);
 var $1100=HEAP32[(($1099)>>2)];
 var $1101=((($1098)+($1100))|0);
 var $1102=((($1101)-(1894986606))|0);
 var $1103=$d;
 var $1104=((($1103)+($1102))|0);
 $d=$1104;
 var $1105=$d;
 var $1106=$1105<<10;
 var $1107=$d;
 var $1108=$1107>>>22;
 var $1109=$1106|$1108;
 $d=$1109;
 var $1110=$a;
 var $1111=$d;
 var $1112=((($1111)+($1110))|0);
 $d=$1112;
 var $1113=$a;
 var $1114=$d;
 var $1115=$b;
 var $1116=$1115^-1;
 var $1117=$1114|$1116;
 var $1118=$1113^$1117;
 var $1119=(($in+40)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=((($1118)+($1120))|0);
 var $1122=((($1121)-(1051523))|0);
 var $1123=$c;
 var $1124=((($1123)+($1122))|0);
 $c=$1124;
 var $1125=$c;
 var $1126=$1125<<15;
 var $1127=$c;
 var $1128=$1127>>>17;
 var $1129=$1126|$1128;
 $c=$1129;
 var $1130=$d;
 var $1131=$c;
 var $1132=((($1131)+($1130))|0);
 $c=$1132;
 var $1133=$d;
 var $1134=$c;
 var $1135=$a;
 var $1136=$1135^-1;
 var $1137=$1134|$1136;
 var $1138=$1133^$1137;
 var $1139=(($in+4)|0);
 var $1140=HEAP32[(($1139)>>2)];
 var $1141=((($1138)+($1140))|0);
 var $1142=((($1141)-(2054922799))|0);
 var $1143=$b;
 var $1144=((($1143)+($1142))|0);
 $b=$1144;
 var $1145=$b;
 var $1146=$1145<<21;
 var $1147=$b;
 var $1148=$1147>>>11;
 var $1149=$1146|$1148;
 $b=$1149;
 var $1150=$c;
 var $1151=$b;
 var $1152=((($1151)+($1150))|0);
 $b=$1152;
 var $1153=$c;
 var $1154=$b;
 var $1155=$d;
 var $1156=$1155^-1;
 var $1157=$1154|$1156;
 var $1158=$1153^$1157;
 var $1159=(($in+32)|0);
 var $1160=HEAP32[(($1159)>>2)];
 var $1161=((($1158)+($1160))|0);
 var $1162=((($1161)+(1873313359))|0);
 var $1163=$a;
 var $1164=((($1163)+($1162))|0);
 $a=$1164;
 var $1165=$a;
 var $1166=$1165<<6;
 var $1167=$a;
 var $1168=$1167>>>26;
 var $1169=$1166|$1168;
 $a=$1169;
 var $1170=$b;
 var $1171=$a;
 var $1172=((($1171)+($1170))|0);
 $a=$1172;
 var $1173=$b;
 var $1174=$a;
 var $1175=$c;
 var $1176=$1175^-1;
 var $1177=$1174|$1176;
 var $1178=$1173^$1177;
 var $1179=(($in+60)|0);
 var $1180=HEAP32[(($1179)>>2)];
 var $1181=((($1178)+($1180))|0);
 var $1182=((($1181)-(30611744))|0);
 var $1183=$d;
 var $1184=((($1183)+($1182))|0);
 $d=$1184;
 var $1185=$d;
 var $1186=$1185<<10;
 var $1187=$d;
 var $1188=$1187>>>22;
 var $1189=$1186|$1188;
 $d=$1189;
 var $1190=$a;
 var $1191=$d;
 var $1192=((($1191)+($1190))|0);
 $d=$1192;
 var $1193=$a;
 var $1194=$d;
 var $1195=$b;
 var $1196=$1195^-1;
 var $1197=$1194|$1196;
 var $1198=$1193^$1197;
 var $1199=(($in+24)|0);
 var $1200=HEAP32[(($1199)>>2)];
 var $1201=((($1198)+($1200))|0);
 var $1202=((($1201)-(1560198380))|0);
 var $1203=$c;
 var $1204=((($1203)+($1202))|0);
 $c=$1204;
 var $1205=$c;
 var $1206=$1205<<15;
 var $1207=$c;
 var $1208=$1207>>>17;
 var $1209=$1206|$1208;
 $c=$1209;
 var $1210=$d;
 var $1211=$c;
 var $1212=((($1211)+($1210))|0);
 $c=$1212;
 var $1213=$d;
 var $1214=$c;
 var $1215=$a;
 var $1216=$1215^-1;
 var $1217=$1214|$1216;
 var $1218=$1213^$1217;
 var $1219=(($in+52)|0);
 var $1220=HEAP32[(($1219)>>2)];
 var $1221=((($1218)+($1220))|0);
 var $1222=((($1221)+(1309151649))|0);
 var $1223=$b;
 var $1224=((($1223)+($1222))|0);
 $b=$1224;
 var $1225=$b;
 var $1226=$1225<<21;
 var $1227=$b;
 var $1228=$1227>>>11;
 var $1229=$1226|$1228;
 $b=$1229;
 var $1230=$c;
 var $1231=$b;
 var $1232=((($1231)+($1230))|0);
 $b=$1232;
 var $1233=$c;
 var $1234=$b;
 var $1235=$d;
 var $1236=$1235^-1;
 var $1237=$1234|$1236;
 var $1238=$1233^$1237;
 var $1239=(($in+16)|0);
 var $1240=HEAP32[(($1239)>>2)];
 var $1241=((($1238)+($1240))|0);
 var $1242=((($1241)-(145523070))|0);
 var $1243=$a;
 var $1244=((($1243)+($1242))|0);
 $a=$1244;
 var $1245=$a;
 var $1246=$1245<<6;
 var $1247=$a;
 var $1248=$1247>>>26;
 var $1249=$1246|$1248;
 $a=$1249;
 var $1250=$b;
 var $1251=$a;
 var $1252=((($1251)+($1250))|0);
 $a=$1252;
 var $1253=$b;
 var $1254=$a;
 var $1255=$c;
 var $1256=$1255^-1;
 var $1257=$1254|$1256;
 var $1258=$1253^$1257;
 var $1259=(($in+44)|0);
 var $1260=HEAP32[(($1259)>>2)];
 var $1261=((($1258)+($1260))|0);
 var $1262=((($1261)-(1120210379))|0);
 var $1263=$d;
 var $1264=((($1263)+($1262))|0);
 $d=$1264;
 var $1265=$d;
 var $1266=$1265<<10;
 var $1267=$d;
 var $1268=$1267>>>22;
 var $1269=$1266|$1268;
 $d=$1269;
 var $1270=$a;
 var $1271=$d;
 var $1272=((($1271)+($1270))|0);
 $d=$1272;
 var $1273=$a;
 var $1274=$d;
 var $1275=$b;
 var $1276=$1275^-1;
 var $1277=$1274|$1276;
 var $1278=$1273^$1277;
 var $1279=(($in+8)|0);
 var $1280=HEAP32[(($1279)>>2)];
 var $1281=((($1278)+($1280))|0);
 var $1282=((($1281)+(718787259))|0);
 var $1283=$c;
 var $1284=((($1283)+($1282))|0);
 $c=$1284;
 var $1285=$c;
 var $1286=$1285<<15;
 var $1287=$c;
 var $1288=$1287>>>17;
 var $1289=$1286|$1288;
 $c=$1289;
 var $1290=$d;
 var $1291=$c;
 var $1292=((($1291)+($1290))|0);
 $c=$1292;
 var $1293=$d;
 var $1294=$c;
 var $1295=$a;
 var $1296=$1295^-1;
 var $1297=$1294|$1296;
 var $1298=$1293^$1297;
 var $1299=(($in+36)|0);
 var $1300=HEAP32[(($1299)>>2)];
 var $1301=((($1298)+($1300))|0);
 var $1302=((($1301)-(343485551))|0);
 var $1303=$b;
 var $1304=((($1303)+($1302))|0);
 $b=$1304;
 var $1305=$b;
 var $1306=$1305<<21;
 var $1307=$b;
 var $1308=$1307>>>11;
 var $1309=$1306|$1308;
 $b=$1309;
 var $1310=$c;
 var $1311=$b;
 var $1312=((($1311)+($1310))|0);
 $b=$1312;
 var $1313=$a;
 var $1314=$1;
 var $1315=(($1314)|0);
 var $1316=HEAP32[(($1315)>>2)];
 var $1317=((($1316)+($1313))|0);
 HEAP32[(($1315)>>2)]=$1317;
 var $1318=$b;
 var $1319=$1;
 var $1320=(($1319+4)|0);
 var $1321=HEAP32[(($1320)>>2)];
 var $1322=((($1321)+($1318))|0);
 HEAP32[(($1320)>>2)]=$1322;
 var $1323=$c;
 var $1324=$1;
 var $1325=(($1324+8)|0);
 var $1326=HEAP32[(($1325)>>2)];
 var $1327=((($1326)+($1323))|0);
 HEAP32[(($1325)>>2)]=$1327;
 var $1328=$d;
 var $1329=$1;
 var $1330=(($1329+12)|0);
 var $1331=HEAP32[(($1330)>>2)];
 var $1332=((($1331)+($1328))|0);
 HEAP32[(($1330)>>2)]=$1332;
 STACKTOP=sp;return;
}
function _MD5Final($digest,$ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 $1=$digest;
 $2=$ctx;
 var $3=$2;
 _MD5Pad($3);
 var $4=$1;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=9;break;}
 case 2: 
 $i=0;
 label=3;break;
 case 3: 
 var $8=$i;
 var $9=($8|0)<4;
 if($9){label=4;break;}else{label=8;break;}
 case 4: 
 label=5;break;
 case 5: 
 var $12=$i;
 var $13=$2;
 var $14=(($13)|0);
 var $15=(($14+($12<<2))|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16>>>24;
 var $18=(($17)&255);
 var $19=$1;
 var $20=$i;
 var $21=($20<<2);
 var $22=(($19+$21)|0);
 var $23=(($22+3)|0);
 HEAP8[($23)]=$18;
 var $24=$i;
 var $25=$2;
 var $26=(($25)|0);
 var $27=(($26+($24<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28>>>16;
 var $30=(($29)&255);
 var $31=$1;
 var $32=$i;
 var $33=($32<<2);
 var $34=(($31+$33)|0);
 var $35=(($34+2)|0);
 HEAP8[($35)]=$30;
 var $36=$i;
 var $37=$2;
 var $38=(($37)|0);
 var $39=(($38+($36<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40>>>8;
 var $42=(($41)&255);
 var $43=$1;
 var $44=$i;
 var $45=($44<<2);
 var $46=(($43+$45)|0);
 var $47=(($46+1)|0);
 HEAP8[($47)]=$42;
 var $48=$i;
 var $49=$2;
 var $50=(($49)|0);
 var $51=(($50+($48<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52)&255);
 var $54=$1;
 var $55=$i;
 var $56=($55<<2);
 var $57=(($54+$56)|0);
 var $58=(($57)|0);
 HEAP8[($58)]=$53;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=3;break;
 case 8: 
 var $64=$2;
 var $65=$64;
 _memset($65, 0, 88)|0;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _MD5Pad($ctx){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $count=sp;
 var $padlen;
 $1=$ctx;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=(($3+16)|0);
 var $ld$0$0=(($4)|0);
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $6$0=($5$1>>>24)|(0<<8);
 var $6$1=(0>>>24)|(0<<8);
 var $7$0=$6$0;
 var $7=$7$0&255;
 var $8=(($count+7)|0);
 HEAP8[($8)]=$7;
 var $9=$1;
 var $10=(($9+16)|0);
 var $ld$2$0=(($10)|0);
 var $11$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($10+4)|0);
 var $11$1=HEAP32[(($ld$3$1)>>2)];
 var $12$0=($11$1>>>16)|(0<<16);
 var $12$1=(0>>>16)|(0<<16);
 var $13$0=$12$0;
 var $13=$13$0&255;
 var $14=(($count+6)|0);
 HEAP8[($14)]=$13;
 var $15=$1;
 var $16=(($15+16)|0);
 var $ld$4$0=(($16)|0);
 var $17$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$5$1)>>2)];
 var $18$0=($17$1>>>8)|(0<<24);
 var $18$1=(0>>>8)|(0<<24);
 var $19$0=$18$0;
 var $19=$19$0&255;
 var $20=(($count+5)|0);
 HEAP8[($20)]=$19;
 var $21=$1;
 var $22=(($21+16)|0);
 var $ld$6$0=(($22)|0);
 var $23$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($22+4)|0);
 var $23$1=HEAP32[(($ld$7$1)>>2)];
 var $24$0=$23$1;
 var $24$1=0;
 var $25$0=$24$0;
 var $25=$25$0&255;
 var $26=(($count+4)|0);
 HEAP8[($26)]=$25;
 var $27=$1;
 var $28=(($27+16)|0);
 var $ld$8$0=(($28)|0);
 var $29$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$9$1)>>2)];
 var $30$0=($29$0>>>24)|($29$1<<8);
 var $30$1=($29$1>>>24)|(0<<8);
 var $31$0=$30$0;
 var $31=$31$0&255;
 var $32=(($count+3)|0);
 HEAP8[($32)]=$31;
 var $33=$1;
 var $34=(($33+16)|0);
 var $ld$10$0=(($34)|0);
 var $35$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$11$1)>>2)];
 var $36$0=($35$0>>>16)|($35$1<<16);
 var $36$1=($35$1>>>16)|(0<<16);
 var $37$0=$36$0;
 var $37=$37$0&255;
 var $38=(($count+2)|0);
 HEAP8[($38)]=$37;
 var $39=$1;
 var $40=(($39+16)|0);
 var $ld$12$0=(($40)|0);
 var $41$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($40+4)|0);
 var $41$1=HEAP32[(($ld$13$1)>>2)];
 var $42$0=($41$0>>>8)|($41$1<<24);
 var $42$1=($41$1>>>8)|(0<<24);
 var $43$0=$42$0;
 var $43=$43$0&255;
 var $44=(($count+1)|0);
 HEAP8[($44)]=$43;
 var $45=$1;
 var $46=(($45+16)|0);
 var $ld$14$0=(($46)|0);
 var $47$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($46+4)|0);
 var $47$1=HEAP32[(($ld$15$1)>>2)];
 var $48$0=$47$0;
 var $48=$48$0&255;
 var $49=(($count)|0);
 HEAP8[($49)]=$48;
 label=3;break;
 case 3: 
 var $51=$1;
 var $52=(($51+16)|0);
 var $ld$16$0=(($52)|0);
 var $53$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($52+4)|0);
 var $53$1=HEAP32[(($ld$17$1)>>2)];
 var $54$0=($53$0>>>3)|($53$1<<29);
 var $54$1=($53$1>>>3)|(0<<29);
 var $$etemp$18$0=63;
 var $$etemp$18$1=0;
 var $55$0=$54$0&$$etemp$18$0;
 var $55$1=$54$1&$$etemp$18$1;
 var $$etemp$19$0=64;
 var $$etemp$19$1=0;
 var $56$0=_i64Subtract($$etemp$19$0,$$etemp$19$1,$55$0,$55$1);var $56$1=tempRet0;
 var $57$0=$56$0;
 var $57=$57$0;
 $padlen=$57;
 var $58=$padlen;
 var $59=($58>>>0)<9;
 if($59){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=$padlen;
 var $62=((($61)+(64))|0);
 $padlen=$62;
 label=5;break;
 case 5: 
 var $64=$1;
 var $65=$padlen;
 var $66=((($65)-(8))|0);
 _MD5Update($64,28056,$66);
 var $67=$1;
 var $68=(($count)|0);
 _MD5Update($67,$68,8);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _med_change_period($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $ce;
 var $vib;
 $1=$ctx;
 $2=$xc;
 var $3=$2;
 var $4=(($3+356)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 $ce=$6;
 var $7=$ce;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9>>5;
 var $11=((2304+($10<<2))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$ce;
 var $14=(($13+60)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(Math_imul($12,$15)|0);
 var $17=$16>>10;
 $vib=$17;
 var $18=$ce;
 var $19=(($18+64)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$ce;
 var $22=(($21+68)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($23)+($20))|0);
 HEAP32[(($22)>>2)]=$24;
 var $25=$ce;
 var $26=(($25+68)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(((($27|0))%(1024))&-1);
 HEAP32[(($26)>>2)]=$28;
 var $29=$vib;
 STACKTOP=sp;return $29;
}
function _med_linear_bend($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $m;
 var $me;
 var $ce;
 var $arp;
 $2=$ctx;
 $3=$xc;
 var $4=$2;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6+6548)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 $me=$9;
 var $10=$3;
 var $11=(($10+356)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 $ce=$13;
 var $14=$ce;
 var $15=(($14+48)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 var $20=$ce;
 var $21=(($20+48)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$3;
 var $24=(($23+36)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$me;
 var $27=(($26+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+$22)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=($33|0)==253;
 if($34){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=8;break;
 case 5: 
 var $37=$ce;
 var $38=(($37+52)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=((($39)+(1))|0);
 HEAP32[(($38)>>2)]=$40;
 var $41=$3;
 var $42=(($41+36)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$me;
 var $45=(($44+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+($43<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+$39)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 $arp=$51;
 var $52=$arp;
 var $53=($52|0)==253;
 if($53){label=6;break;}else{label=7;break;}
 case 6: 
 var $55=$ce;
 var $56=(($55+48)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$ce;
 var $59=(($58+52)|0);
 HEAP32[(($59)>>2)]=$57;
 var $60=$ce;
 var $61=(($60+52)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=((($62)+(1))|0);
 HEAP32[(($61)>>2)]=$63;
 var $64=$3;
 var $65=(($64+36)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$me;
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+($66<<2))|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+$62)|0);
 var $73=HEAP8[($72)];
 var $74=($73&255);
 $arp=$74;
 label=7;break;
 case 7: 
 var $76=$arp;
 var $77=((($76)*(12800))&-1);
 $1=$77;
 label=8;break;
 case 8: 
 var $79=$1;
 STACKTOP=sp;return $79;
  default: assert(0, "bad label: " + label);
 }
}
function _med_play_extras($ctx,$xc,$chn,$new_note){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $m;
 var $me;
 var $ce;
 var $b;
 var $jws;
 var $jvs;
 var $loop;
 var $temp;
 var $xxi;
 $1=$ctx;
 $2=$xc;
 $3=$chn;
 $4=$new_note;
 var $5=$1;
 var $6=(($5+1552)|0);
 $m=$6;
 $jws=0;
 $jvs=0;
 var $7=$m;
 var $8=(($7+6548)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$m;
 var $14=(($13+6548)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==133303461;
 if($19){label=4;break;}else{label=3;break;}
 case 3: 
 label=71;break;
 case 4: 
 var $22=$m;
 var $23=(($22+6548)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$24;
 $me=$25;
 var $26=$2;
 var $27=(($26+356)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 $ce=$29;
 var $30=$2;
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$me;
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+($32<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=6;break;}else{label=5;break;}
 case 5: 
 var $40=$2;
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$me;
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+($42<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=6;break;}else{label=7;break;}
 case 6: 
 label=71;break;
 case 7: 
 var $51=$4;
 var $52=($51|0)!=0;
 if($52){label=8;break;}else{label=9;break;}
 case 8: 
 var $54=$ce;
 var $55=(($54+52)|0);
 HEAP32[(($55)>>2)]=0;
 var $56=$ce;
 var $57=(($56+48)|0);
 HEAP32[(($57)>>2)]=0;
 var $58=$2;
 var $59=(($58+24)|0);
 var $60=HEAPF64[(($59)>>3)];
 var $61=(($60)&-1);
 var $62=$ce;
 var $63=(($62+44)|0);
 HEAP32[(($63)>>2)]=$61;
 var $64=$ce;
 var $65=(($64+20)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=$ce;
 var $67=(($66+16)|0);
 HEAP32[(($67)>>2)]=0;
 var $68=$ce;
 var $69=(($68+4)|0);
 HEAP32[(($69)>>2)]=0;
 var $70=$ce;
 var $71=(($70+40)|0);
 HEAP32[(($71)>>2)]=0;
 var $72=$ce;
 var $73=(($72+36)|0);
 HEAP32[(($73)>>2)]=0;
 var $74=$ce;
 var $75=(($74+24)|0);
 HEAP32[(($75)>>2)]=0;
 var $76=$ce;
 var $77=(($76+8)|0);
 HEAP32[(($77)>>2)]=0;
 var $78=$2;
 var $79=(($78+36)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$m;
 var $82=(($81)|0);
 var $83=(($82+176)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+((($80)*(764))&-1))|0);
 var $86=(($85+760)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$87;
 var $89=(($88+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$ce;
 var $92=(($91+12)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=$2;
 var $94=(($93+36)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$m;
 var $97=(($96)|0);
 var $98=(($97+176)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+((($95)*(764))&-1))|0);
 var $101=(($100+760)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$102;
 var $104=(($103+8)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$ce;
 var $107=(($106+32)|0);
 HEAP32[(($107)>>2)]=$105;
 label=9;break;
 case 9: 
 var $109=$ce;
 var $110=(($109+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)>0;
 if($112){label=10;break;}else{label=67;break;}
 case 10: 
 var $114=$ce;
 var $115=(($114+16)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=((($116)-(1))|0);
 HEAP32[(($115)>>2)]=$117;
 var $118=($116|0)==0;
 if($118){label=11;break;}else{label=67;break;}
 case 11: 
 var $120=$ce;
 var $121=(($120+12)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=((($122)-(1))|0);
 var $124=$ce;
 var $125=(($124+16)|0);
 HEAP32[(($125)>>2)]=$123;
 var $126=$ce;
 var $127=(($126+20)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($128|0)>0;
 if($129){label=12;break;}else{label=13;break;}
 case 12: 
 var $131=$ce;
 var $132=(($131+20)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=((($133)-(1))|0);
 HEAP32[(($132)>>2)]=$134;
 label=37;break;
 case 13: 
 $jws=0;
 $loop=0;
 label=14;break;
 case 14: 
 var $137=$ce;
 var $138=(($137+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=((($139)+(1))|0);
 HEAP32[(($138)>>2)]=$140;
 var $141=$2;
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$me;
 var $145=(($144+4)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+($143<<2))|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+$139)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 $b=$151;
 switch(($151|0)){case 255:case 251:{ label=15;break;}case 254:{ label=16;break;}case 250:{ label=19;break;}case 245:case 244:{ label=20;break;}case 243:{ label=21;break;}case 242:{ label=22;break;}case 241:{ label=23;break;}case 240:{ label=24;break;}default:{label=25;break;}}break;
 case 15: 
 var $153=$ce;
 var $154=(($153+4)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=((($155)-(1))|0);
 HEAP32[(($154)>>2)]=$156;
 label=29;break;
 case 16: 
 var $158=$loop;
 var $159=($158|0)!=0;
 if($159){label=17;break;}else{label=18;break;}
 case 17: 
 label=29;break;
 case 18: 
 var $162=$ce;
 var $163=(($162+4)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=((($164)+(1))|0);
 HEAP32[(($163)>>2)]=$165;
 var $166=$2;
 var $167=(($166+36)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$me;
 var $170=(($169+4)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+($168<<2))|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+$164)|0);
 var $175=HEAP8[($174)];
 var $176=($175&255);
 $temp=$176;
 var $177=$temp;
 var $178=$ce;
 var $179=(($178+4)|0);
 HEAP32[(($179)>>2)]=$177;
 $loop=1;
 label=14;break;
 case 19: 
 var $181=$ce;
 var $182=(($181+4)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=((($183)+(1))|0);
 HEAP32[(($182)>>2)]=$184;
 var $185=$2;
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$me;
 var $189=(($188+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+($187<<2))|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+$183)|0);
 var $194=HEAP8[($193)];
 var $195=($194&255);
 $jws=$195;
 label=29;break;
 case 20: 
 var $197=$ce;
 var $198=(($197+4)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=((($199)+(1))|0);
 HEAP32[(($198)>>2)]=$200;
 label=29;break;
 case 21: 
 var $202=$ce;
 var $203=(($202+4)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=((($204)+(1))|0);
 HEAP32[(($203)>>2)]=$205;
 var $206=$2;
 var $207=(($206+36)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=$me;
 var $210=(($209+4)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+($208<<2))|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+$204)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=$ce;
 var $218=(($217+8)|0);
 HEAP32[(($218)>>2)]=$216;
 label=29;break;
 case 22: 
 var $220=$ce;
 var $221=(($220+4)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=((($222)+(1))|0);
 HEAP32[(($221)>>2)]=$223;
 var $224=$2;
 var $225=(($224+36)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=$me;
 var $228=(($227+4)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+($226<<2))|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+$222)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=(((-$234))|0);
 var $236=$ce;
 var $237=(($236+8)|0);
 HEAP32[(($237)>>2)]=$235;
 label=29;break;
 case 23: 
 var $239=$ce;
 var $240=(($239+4)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=((($241)+(1))|0);
 HEAP32[(($240)>>2)]=$242;
 var $243=$2;
 var $244=(($243+36)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=$me;
 var $247=(($246+4)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+($245<<2))|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+$241)|0);
 var $252=HEAP8[($251)];
 var $253=($252&255);
 var $254=$ce;
 var $255=(($254+20)|0);
 HEAP32[(($255)>>2)]=$253;
 label=29;break;
 case 24: 
 var $257=$ce;
 var $258=(($257+4)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=((($259)+(1))|0);
 HEAP32[(($258)>>2)]=$260;
 var $261=$2;
 var $262=(($261+36)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=$me;
 var $265=(($264+4)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+($263<<2))|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+$259)|0);
 var $270=HEAP8[($269)];
 var $271=($270&255);
 var $272=$ce;
 var $273=(($272+12)|0);
 HEAP32[(($273)>>2)]=$271;
 label=29;break;
 case 25: 
 var $275=$b;
 var $276=($275|0)>=0;
 if($276){label=26;break;}else{label=28;break;}
 case 26: 
 var $278=$b;
 var $279=($278|0)<=64;
 if($279){label=27;break;}else{label=28;break;}
 case 27: 
 var $281=$b;
 var $282=$ce;
 var $283=(($282+76)|0);
 HEAP32[(($283)>>2)]=$281;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $286=$ce;
 var $287=(($286+8)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$ce;
 var $290=(($289+76)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=((($291)+($288))|0);
 HEAP32[(($290)>>2)]=$292;
 label=30;break;
 case 30: 
 var $294=$ce;
 var $295=(($294+76)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=($296|0)<0;
 if($297){label=31;break;}else{label=32;break;}
 case 31: 
 var $299=$ce;
 var $300=(($299+76)|0);
 HEAP32[(($300)>>2)]=0;
 label=35;break;
 case 32: 
 var $302=$ce;
 var $303=(($302+76)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=($304|0)>64;
 if($305){label=33;break;}else{label=34;break;}
 case 33: 
 var $307=$ce;
 var $308=(($307+76)|0);
 HEAP32[(($308)>>2)]=64;
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $313=$ce;
 var $314=(($313+40)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($315|0)>0;
 if($316){label=38;break;}else{label=39;break;}
 case 38: 
 var $318=$ce;
 var $319=(($318+40)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=((($320)-(1))|0);
 HEAP32[(($319)>>2)]=$321;
 label=66;break;
 case 39: 
 $jvs=0;
 $loop=0;
 label=40;break;
 case 40: 
 var $324=$ce;
 var $325=(($324+24)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=((($326)+(1))|0);
 HEAP32[(($325)>>2)]=$327;
 var $328=$2;
 var $329=(($328+36)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$me;
 var $332=(($331+8)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($333+($330<<2))|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+$326)|0);
 var $337=HEAP8[($336)];
 var $338=($337&255);
 $b=$338;
 switch(($338|0)){case 255:case 251:{ label=41;break;}case 254:{ label=42;break;}case 253:{ label=47;break;}case 252:{ label=48;break;}case 250:{ label=52;break;}case 247:{ label=53;break;}case 246:{ label=54;break;}case 245:{ label=55;break;}case 244:{ label=56;break;}case 243:{ label=57;break;}case 242:{ label=58;break;}case 241:{ label=59;break;}case 240:{ label=60;break;}default:{label=61;break;}}break;
 case 41: 
 var $340=$ce;
 var $341=(($340+24)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=((($342)-(1))|0);
 HEAP32[(($341)>>2)]=$343;
 label=65;break;
 case 42: 
 var $345=$loop;
 var $346=($345|0)!=0;
 if($346){label=43;break;}else{label=44;break;}
 case 43: 
 label=65;break;
 case 44: 
 var $349=$ce;
 var $350=(($349+24)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=((($351)+(1))|0);
 HEAP32[(($350)>>2)]=$352;
 var $353=$2;
 var $354=(($353+36)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=$me;
 var $357=(($356+8)|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=(($358+($355<<2))|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360+$351)|0);
 var $362=HEAP8[($361)];
 var $363=($362&255);
 $temp=$363;
 var $364=$temp;
 var $365=($364|0)==255;
 if($365){label=45;break;}else{label=46;break;}
 case 45: 
 var $367=$ce;
 var $368=(($367+24)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=((($369)-(1))|0);
 HEAP32[(($368)>>2)]=$370;
 label=65;break;
 case 46: 
 var $372=$temp;
 var $373=$ce;
 var $374=(($373+24)|0);
 HEAP32[(($374)>>2)]=$372;
 $loop=1;
 label=40;break;
 case 47: 
 label=65;break;
 case 48: 
 var $377=$ce;
 var $378=(($377+24)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=((($379)+(1))|0);
 HEAP32[(($378)>>2)]=$380;
 var $381=$ce;
 var $382=(($381+52)|0);
 HEAP32[(($382)>>2)]=$379;
 var $383=$ce;
 var $384=(($383+48)|0);
 HEAP32[(($384)>>2)]=$379;
 label=49;break;
 case 49: 
 var $386=$ce;
 var $387=(($386+24)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=((($388)+(1))|0);
 HEAP32[(($387)>>2)]=$389;
 var $390=$2;
 var $391=(($390+36)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$me;
 var $394=(($393+8)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(($395+($392<<2))|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=(($397+$388)|0);
 var $399=HEAP8[($398)];
 var $400=($399&255);
 var $401=($400|0)!=253;
 if($401){label=50;break;}else{label=51;break;}
 case 50: 
 label=49;break;
 case 51: 
 label=65;break;
 case 52: 
 var $405=$ce;
 var $406=(($405+24)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=((($407)+(1))|0);
 HEAP32[(($406)>>2)]=$408;
 var $409=$2;
 var $410=(($409+36)|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=$me;
 var $413=(($412+8)|0);
 var $414=HEAP32[(($413)>>2)];
 var $415=(($414+($411<<2))|0);
 var $416=HEAP32[(($415)>>2)];
 var $417=(($416+$407)|0);
 var $418=HEAP8[($417)];
 var $419=($418&255);
 $jws=$419;
 label=65;break;
 case 53: 
 var $421=$ce;
 var $422=(($421+24)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=((($423)+(1))|0);
 HEAP32[(($422)>>2)]=$424;
 var $425=$2;
 var $426=(($425+36)|0);
 var $427=HEAP32[(($426)>>2)];
 var $428=$me;
 var $429=(($428+8)|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=(($430+($427<<2))|0);
 var $432=HEAP32[(($431)>>2)];
 var $433=(($432+$423)|0);
 var $434=HEAP8[($433)];
 var $435=($434&255);
 var $436=$ce;
 var $437=(($436+56)|0);
 HEAP32[(($437)>>2)]=$435;
 label=65;break;
 case 54: 
 var $439=$ce;
 var $440=(($439+44)|0);
 var $441=HEAP32[(($440)>>2)];
 var $442=($441|0);
 var $443=$2;
 var $444=(($443+24)|0);
 HEAPF64[(($444)>>3)]=$442;
 label=65;break;
 case 55: 
 var $446=$ce;
 var $447=(($446+24)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=((($448)+(1))|0);
 HEAP32[(($447)>>2)]=$449;
 var $450=$2;
 var $451=(($450+36)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=$me;
 var $454=(($453+8)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=(($455+($452<<2))|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=(($457+$448)|0);
 var $459=HEAP8[($458)];
 var $460=($459&255);
 var $461=$ce;
 var $462=(($461+64)|0);
 HEAP32[(($462)>>2)]=$460;
 label=65;break;
 case 56: 
 var $464=$ce;
 var $465=(($464+24)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=((($466)+(1))|0);
 HEAP32[(($465)>>2)]=$467;
 var $468=$2;
 var $469=(($468+36)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=$me;
 var $472=(($471+8)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=(($473+($470<<2))|0);
 var $475=HEAP32[(($474)>>2)];
 var $476=(($475+$466)|0);
 var $477=HEAP8[($476)];
 var $478=($477&255);
 var $479=$ce;
 var $480=(($479+60)|0);
 HEAP32[(($480)>>2)]=$478;
 label=65;break;
 case 57: 
 var $482=$ce;
 var $483=(($482+24)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=((($484)+(1))|0);
 HEAP32[(($483)>>2)]=$485;
 var $486=$2;
 var $487=(($486+36)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=$me;
 var $490=(($489+8)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=(($491+($488<<2))|0);
 var $493=HEAP32[(($492)>>2)];
 var $494=(($493+$484)|0);
 var $495=HEAP8[($494)];
 var $496=($495&255);
 var $497=(((-$496))|0);
 var $498=$ce;
 var $499=(($498+28)|0);
 HEAP32[(($499)>>2)]=$497;
 label=65;break;
 case 58: 
 var $501=$ce;
 var $502=(($501+24)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=((($503)+(1))|0);
 HEAP32[(($502)>>2)]=$504;
 var $505=$2;
 var $506=(($505+36)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=$me;
 var $509=(($508+8)|0);
 var $510=HEAP32[(($509)>>2)];
 var $511=(($510+($507<<2))|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($512+$503)|0);
 var $514=HEAP8[($513)];
 var $515=($514&255);
 var $516=$ce;
 var $517=(($516+28)|0);
 HEAP32[(($517)>>2)]=$515;
 label=65;break;
 case 59: 
 var $519=$ce;
 var $520=(($519+24)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=((($521)+(1))|0);
 HEAP32[(($520)>>2)]=$522;
 var $523=$2;
 var $524=(($523+36)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=$me;
 var $527=(($526+8)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=(($528+($525<<2))|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=(($530+$521)|0);
 var $532=HEAP8[($531)];
 var $533=($532&255);
 var $534=$ce;
 var $535=(($534+40)|0);
 HEAP32[(($535)>>2)]=$533;
 label=65;break;
 case 60: 
 var $537=$ce;
 var $538=(($537+24)|0);
 var $539=HEAP32[(($538)>>2)];
 var $540=((($539)+(1))|0);
 HEAP32[(($538)>>2)]=$540;
 var $541=$2;
 var $542=(($541+36)|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=$me;
 var $545=(($544+8)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=(($546+($543<<2))|0);
 var $548=HEAP32[(($547)>>2)];
 var $549=(($548+$539)|0);
 var $550=HEAP8[($549)];
 var $551=($550&255);
 var $552=$ce;
 var $553=(($552+32)|0);
 HEAP32[(($553)>>2)]=$551;
 label=65;break;
 case 61: 
 var $555=$2;
 var $556=(($555+36)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=$m;
 var $559=(($558)|0);
 var $560=(($559+176)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(($561+((($557)*(764))&-1))|0);
 $xxi=$562;
 var $563=$b;
 var $564=$xxi;
 var $565=(($564+36)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=($563|0)<($566|0);
 if($567){label=62;break;}else{label=64;break;}
 case 62: 
 var $569=$b;
 var $570=$xxi;
 var $571=(($570+756)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=(($572+($569<<6))|0);
 var $574=(($573+40)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=$2;
 var $577=(($576+44)|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=($575|0)!=($578|0);
 if($579){label=63;break;}else{label=64;break;}
 case 63: 
 var $581=$b;
 var $582=$xxi;
 var $583=(($582+756)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(($584+($581<<6))|0);
 var $586=(($585+40)|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=$2;
 var $589=(($588+44)|0);
 HEAP32[(($589)>>2)]=$587;
 var $590=$1;
 var $591=$3;
 var $592=$2;
 var $593=(($592+44)|0);
 var $594=HEAP32[(($593)>>2)];
 _virt_setsmp($590,$591,$594);
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $599=$jws;
 var $600=($599|0)!=0;
 if($600){label=68;break;}else{label=69;break;}
 case 68: 
 var $602=$jws;
 var $603=$ce;
 var $604=(($603+24)|0);
 HEAP32[(($604)>>2)]=$602;
 $jws=0;
 label=69;break;
 case 69: 
 var $606=$jvs;
 var $607=($606|0)!=0;
 if($607){label=70;break;}else{label=71;break;}
 case 70: 
 var $609=$jvs;
 var $610=$ce;
 var $611=(($610+4)|0);
 HEAP32[(($611)>>2)]=$609;
 $jvs=0;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _med_new_instrument_extras($xxi){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$xxi;
 var $3=_calloc(1,12);
 var $4=$2;
 var $5=(($4+760)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=(($6+760)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $12=$2;
 var $13=(($12+760)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=133303461;
 $1=0;
 label=4;break;
 case 4: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _med_new_channel_extras($xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$xc;
 var $3=_calloc(1,80);
 var $4=$2;
 var $5=(($4+356)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=(($6+356)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $12=$2;
 var $13=(($12+356)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=133303461;
 $1=0;
 label=4;break;
 case 4: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _med_reset_channel_extras($xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$xc;
 var $2=$1;
 var $3=(($2+356)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 _memset($5, 0, 76)|0;
 STACKTOP=sp;return;
}
function _med_release_channel_extras($xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$xc;
 var $2=$1;
 var $3=(($2+356)|0);
 var $4=HEAP32[(($3)>>2)];
 _free($4);
 STACKTOP=sp;return;
}
function _med_new_module_extras($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $me;
 var $mod;
 $2=$m;
 var $3=$2;
 var $4=(($3)|0);
 $mod=$4;
 var $5=_calloc(1,12);
 var $6=$2;
 var $7=(($6+6548)|0);
 HEAP32[(($7)>>2)]=$5;
 var $8=$2;
 var $9=(($8+6548)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 var $14=$2;
 var $15=(($14+6548)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=133303461;
 var $19=$2;
 var $20=(($19+6548)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$21;
 $me=$22;
 var $23=$mod;
 var $24=(($23+140)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=_calloc(4,$25);
 var $27=$26;
 var $28=$me;
 var $29=(($28+4)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$me;
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=8;break;
 case 5: 
 var $36=$mod;
 var $37=(($36+140)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=_calloc(4,$38);
 var $40=$39;
 var $41=$me;
 var $42=(($41+8)|0);
 HEAP32[(($42)>>2)]=$40;
 var $43=$me;
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==0;
 if($46){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=8;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $50=$1;
 STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }
}
function _med_release_module_extras($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $me;
 var $mod;
 var $i;
 $1=$m;
 var $2=$1;
 var $3=(($2)|0);
 $mod=$3;
 var $4=$1;
 var $5=(($4+6548)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 $me=$7;
 var $8=$me;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=7;break;}
 case 2: 
 $i=0;
 label=3;break;
 case 3: 
 var $14=$i;
 var $15=$mod;
 var $16=(($15+140)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($14|0)<($17|0);
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$i;
 var $21=$me;
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+($20<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 _free($25);
 label=5;break;
 case 5: 
 var $27=$i;
 var $28=((($27)+(1))|0);
 $i=$28;
 label=3;break;
 case 6: 
 var $30=$me;
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 _free($33);
 label=7;break;
 case 7: 
 var $35=$me;
 var $36=(($35+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)!=0;
 if($38){label=8;break;}else{label=13;break;}
 case 8: 
 $i=0;
 label=9;break;
 case 9: 
 var $41=$i;
 var $42=$mod;
 var $43=(($42+140)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($41|0)<($44|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=$i;
 var $48=$me;
 var $49=(($48+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+($47<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 _free($52);
 label=11;break;
 case 11: 
 var $54=$i;
 var $55=((($54)+(1))|0);
 $i=$55;
 label=9;break;
 case 12: 
 var $57=$me;
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$59;
 _free($60);
 label=13;break;
 case 13: 
 var $62=$1;
 var $63=(($62+6548)|0);
 var $64=HEAP32[(($63)>>2)];
 _free($64);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _str_adj($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 $1=$s;
 $i=0;
 label=2;break;
 case 2: 
 var $3=$i;
 var $4=$1;
 var $5=_strlen($4);
 var $6=($3>>>0)<($5>>>0);
 if($6){label=3;break;}else{label=8;break;}
 case 3: 
 var $8=$i;
 var $9=$1;
 var $10=(($9+$8)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24);
 var $13=_isprint($12);
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$i;
 var $17=$1;
 var $18=(($17+$16)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=($20|0)>127;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$i;
 var $24=$1;
 var $25=(($24+$23)|0);
 HEAP8[($25)]=32;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $28=$i;
 var $29=((($28)+(1))|0);
 $i=$29;
 label=2;break;
 case 8: 
 label=9;break;
 case 9: 
 var $32=$1;
 var $33=HEAP8[($32)];
 var $34=(($33<<24)>>24);
 var $35=($34|0)!=0;
 if($35){label=10;break;}else{var $46=0;label=11;break;}
 case 10: 
 var $37=$1;
 var $38=_strlen($37);
 var $39=((($38)-(1))|0);
 var $40=$1;
 var $41=(($40+$39)|0);
 var $42=HEAP8[($41)];
 var $43=(($42<<24)>>24);
 var $44=($43|0)==32;
 var $46=$44;label=11;break;
 case 11: 
 var $46;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $48=$1;
 var $49=_strlen($48);
 var $50=((($49)-(1))|0);
 var $51=$1;
 var $52=(($51+$50)|0);
 HEAP8[($52)]=0;
 label=9;break;
 case 13: 
 var $54=$1;
 STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }
}
function _get_temp_dir($buf,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp;
 $1=$buf;
 $2=$size;
 var $3=_getenv(21344);
 $tmp=$3;
 var $4=$1;
 var $5=$tmp;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$tmp;
 var $11=$8;label=4;break;
 case 3: 
 var $11=7384;label=4;break;
 case 4: 
 var $11;
 var $12=$2;
 var $13=_strlcpy($4,$11,$12);
 var $14=$1;
 var $15=$2;
 var $16=_strlcat($14,25728,$15);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _note_to_period($n,$f,$type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $d;
 $1=$n;
 $2=$f;
 $3=$type;
 var $4=$1;
 var $5=($4|0);
 var $6=$2;
 var $7=($6|0);
 var $8=($7)/(128);
 var $9=($5)+($8);
 $d=$9;
 var $10=$3;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$d;
 var $14=(240)-($13);
 var $15=($14)*(16);
 var $22=$15;label=4;break;
 case 3: 
 var $17=$d;
 var $18=($17)/(12);
 var $19=Math_pow(2,$18);
 var $20=(13694)/($19);
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }
}
function _note_to_period_mix($n,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $d;
 $1=$n;
 $2=$b;
 var $3=$1;
 var $4=($3|0);
 var $5=$2;
 var $6=($5|0);
 var $7=($6)/(12800);
 var $8=($4)+($7);
 $d=$8;
 var $9=$d;
 var $10=($9)/(12);
 var $11=Math_pow(2,$10);
 var $12=(56090624)/($11);
 var $13=(($12)&-1);
 STACKTOP=sp;return $13;
}
function _period_to_note($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $n;
 var $f;
 var $t;
 $2=$p;
 $t=4968;
 var $3=$2;
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=18;break;
 case 3: 
 $n=24;
 label=4;break;
 case 4: 
 var $8=$2;
 var $9=($8|0)<=3627;
 if($9){label=5;break;}else{label=7;break;}
 case 5: 
 label=6;break;
 case 6: 
 var $12=$n;
 var $13=((($12)+(12))|0);
 $n=$13;
 var $14=$2;
 var $15=$14<<1;
 $2=$15;
 label=4;break;
 case 7: 
 label=8;break;
 case 8: 
 var $18=$2;
 var $19=$t;
 var $20=HEAP32[(($19)>>2)];
 var $21=($18|0)>($20|0);
 if($21){label=9;break;}else{label=11;break;}
 case 9: 
 label=10;break;
 case 10: 
 var $24=$t;
 var $25=((($24)-(32))|0);
 $t=$25;
 var $26=$n;
 var $27=((($26)-(1))|0);
 $n=$27;
 label=8;break;
 case 11: 
 $f=7;
 label=12;break;
 case 12: 
 var $30=$f;
 var $31=($30|0)!=0;
 if($31){label=13;break;}else{var $38=0;label=14;break;}
 case 13: 
 var $33=$t;
 var $34=HEAP32[(($33)>>2)];
 var $35=$2;
 var $36=($34|0)>($35|0);
 var $38=$36;label=14;break;
 case 14: 
 var $38;
 if($38){label=15;break;}else{label=17;break;}
 case 15: 
 label=16;break;
 case 16: 
 var $41=$t;
 var $42=(($41+4)|0);
 $t=$42;
 var $43=$f;
 var $44=((($43)-(1))|0);
 $f=$44;
 label=12;break;
 case 17: 
 var $46=$n;
 var $47=$f;
 var $48=$47>>2;
 var $49=((($46)-($48))|0);
 $1=$49;
 label=18;break;
 case 18: 
 var $51=$1;
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }
}
function _period_to_bend($p,$n,$limit,$gliss,$type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $b;
 var $d;
 $2=$p;
 $3=$n;
 $4=$limit;
 $5=$gliss;
 $6=$type;
 var $7=$3;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=20;break;
 case 3: 
 var $11=$6;
 var $12=($11|0)!=0;
 if($12){label=4;break;}else{label=8;break;}
 case 4: 
 var $14=$3;
 var $15=(((240)-($14))|0);
 var $16=$15<<4;
 var $17=($16|0);
 var $18=$2;
 var $19=($17)-($18);
 var $20=($19)*(8);
 var $21=($20)*(100);
 var $22=(($21)&-1);
 $b=$22;
 var $23=$5;
 var $24=($23|0)!=0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=$b;
 var $27=(((($26|0))/(12800))&-1);
 var $28=((($27)*(12800))&-1);
 var $32=$28;label=7;break;
 case 6: 
 var $30=$b;
 var $32=$30;label=7;break;
 case 7: 
 var $32;
 $1=$32;
 label=20;break;
 case 8: 
 var $34=$4;
 var $35=($34|0)!=0;
 if($35){label=9;break;}else{label=14;break;}
 case 9: 
 var $37=$2;
 var $38=$37>907;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 $2=907;
 label=11;break;
 case 11: 
 var $41=$2;
 var $42=$41<108;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 $2=108;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $46=$2;
 var $47=$46<8;
 if($47){label=15;break;}else{label=16;break;}
 case 15: 
 $2=8;
 label=16;break;
 case 16: 
 var $50=$3;
 var $51=_note_to_period($50,0,0);
 $d=$51;
 var $52=$d;
 var $53=$2;
 var $54=($52)/($53);
 var $55=Math_log($54);
 var $56=($55)*(1536);
 var $57=($56)/((0.6931471805599453));
 var $58=($57)*(100);
 var $59=_round($58);
 var $60=(($59)&-1);
 $b=$60;
 var $61=$5;
 var $62=($61|0)!=0;
 if($62){label=17;break;}else{label=18;break;}
 case 17: 
 var $64=$b;
 var $65=(((($64|0))/(12800))&-1);
 var $66=((($65)*(12800))&-1);
 var $70=$66;label=19;break;
 case 18: 
 var $68=$b;
 var $70=$68;label=19;break;
 case 19: 
 var $70;
 $1=$70;
 label=20;break;
 case 20: 
 var $72=$1;
 STACKTOP=sp;return $72;
  default: assert(0, "bad label: " + label);
 }
}
function _c2spd_to_note($c2spd,$n,$f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $c;
 $1=$c2spd;
 $2=$n;
 $3=$f;
 var $4=$1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 HEAP32[(($7)>>2)]=0;
 var $8=$2;
 HEAP32[(($8)>>2)]=0;
 label=4;break;
 case 3: 
 var $10=$1;
 var $11=($10|0);
 var $12=($11)/(8363);
 var $13=Math_log($12);
 var $14=($13)*(1536);
 var $15=($14)/((0.6931471805599453));
 var $16=(($15)&-1);
 $c=$16;
 var $17=$c;
 var $18=(((($17|0))/(128))&-1);
 var $19=$2;
 HEAP32[(($19)>>2)]=$18;
 var $20=$c;
 var $21=(((($20|0))%(128))&-1);
 var $22=$3;
 HEAP32[(($22)>>2)]=$21;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_start_player($opaque,$rate,$format){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ctx;
 var $p;
 var $s;
 var $smix;
 var $m;
 var $mod;
 var $f;
 var $i;
 var $ret;
 var $xc;
 $2=$opaque;
 $3=$rate;
 $4=$format;
 var $5=$2;
 var $6=$5;
 $ctx=$6;
 var $7=$ctx;
 var $8=(($7)|0);
 $p=$8;
 var $9=$ctx;
 var $10=(($9+1496)|0);
 $s=$10;
 var $11=$ctx;
 var $12=(($11+8120)|0);
 $smix=$12;
 var $13=$ctx;
 var $14=(($13+1552)|0);
 $m=$14;
 var $15=$m;
 var $16=(($15)|0);
 $mod=$16;
 var $17=$p;
 var $18=(($17+324)|0);
 $f=$18;
 $ret=0;
 var $19=$3;
 var $20=($19|0)<4000;
 if($20){label=3;break;}else{label=2;break;}
 case 2: 
 var $22=$3;
 var $23=($22|0)>49170;
 if($23){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-7;
 label=43;break;
 case 4: 
 var $26=$ctx;
 var $27=(($26+8140)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)<1;
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-8;
 label=43;break;
 case 6: 
 var $32=$ctx;
 var $33=(($32+8140)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)>1;
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 var $37=$2;
 _xmp_end_player($37);
 label=8;break;
 case 8: 
 var $39=$ctx;
 var $40=$3;
 var $41=$4;
 var $42=$m;
 var $43=(($42+1264)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=_mixer_on($39,$40,$41,$44);
 var $46=($45|0)<0;
 if($46){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-2;
 label=43;break;
 case 10: 
 var $49=$p;
 var $50=(($49+316)|0);
 HEAP32[(($50)>>2)]=100;
 var $51=$p;
 var $52=(($51+312)|0);
 HEAP32[(($52)>>2)]=100;
 var $53=$m;
 var $54=(($53+1268)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$p;
 var $57=(($56+320)|0);
 HEAP32[(($57)>>2)]=$55;
 var $58=$p;
 var $59=(($58)|0);
 HEAP32[(($59)>>2)]=0;
 var $60=$p;
 var $61=(($60+4)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=$p;
 var $63=(($62+12)|0);
 HEAP32[(($63)>>2)]=-1;
 var $64=$p;
 var $65=(($64+8)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=$p;
 var $67=(($66+32)|0);
 HEAPF64[(($67)>>3)]=0;
 var $68=$p;
 var $69=(($68+48)|0);
 HEAP32[(($69)>>2)]=0;
 $i=0;
 label=11;break;
 case 11: 
 var $71=$i;
 var $72=($71|0)<64;
 if($72){label=12;break;}else{label=14;break;}
 case 12: 
 var $74=$i;
 var $75=$p;
 var $76=(($75+884)|0);
 var $77=(($76+$74)|0);
 HEAP8[($77)]=0;
 var $78=$i;
 var $79=$p;
 var $80=(($79+628)|0);
 var $81=(($80+($78<<2))|0);
 HEAP32[(($81)>>2)]=100;
 label=13;break;
 case 13: 
 var $83=$i;
 var $84=((($83)+(1))|0);
 $i=$84;
 label=11;break;
 case 14: 
 label=15;break;
 case 15: 
 var $87=$p;
 var $88=(($87)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$mod;
 var $91=(($90+156)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($89|0)<($92|0);
 if($93){label=16;break;}else{var $108=0;label=17;break;}
 case 16: 
 var $95=$p;
 var $96=(($95)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=$mod;
 var $99=(($98+952)|0);
 var $100=(($99+$97)|0);
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$mod;
 var $104=(($103+128)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($102|0)>=($105|0);
 var $108=$106;label=17;break;
 case 17: 
 var $108;
 if($108){label=18;break;}else{label=19;break;}
 case 18: 
 var $110=$p;
 var $111=(($110)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=((($112)+(1))|0);
 HEAP32[(($111)>>2)]=$113;
 label=15;break;
 case 19: 
 var $115=$p;
 var $116=(($115)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$mod;
 var $119=(($118+156)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($117|0)>=($120|0);
 if($121){label=20;break;}else{label=21;break;}
 case 20: 
 var $123=$mod;
 var $124=(($123+156)|0);
 HEAP32[(($124)>>2)]=0;
 label=21;break;
 case 21: 
 var $126=$mod;
 var $127=(($126+156)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($128|0)==0;
 if($129){label=23;break;}else{label=22;break;}
 case 22: 
 var $131=$mod;
 var $132=(($131+136)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($133|0)==0;
 if($134){label=23;break;}else{label=24;break;}
 case 23: 
 var $136=$p;
 var $137=(($136+368)|0);
 var $138=(($137)|0);
 var $139=(($138+4)|0);
 HEAP32[(($139)>>2)]=0;
 var $140=$p;
 var $141=(($140)|0);
 HEAP32[(($141)>>2)]=0;
 var $142=$p;
 var $143=(($142+368)|0);
 var $144=(($143)|0);
 var $145=(($144+8)|0);
 HEAP32[(($145)>>2)]=0;
 var $146=$p;
 var $147=(($146+8)|0);
 HEAP32[(($147)>>2)]=0;
 var $148=$f;
 var $149=(($148+32)|0);
 HEAP32[(($149)>>2)]=0;
 var $150=$f;
 var $151=(($150+28)|0);
 HEAP32[(($151)>>2)]=0;
 label=25;break;
 case 24: 
 var $153=$p;
 var $154=(($153)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$mod;
 var $157=(($156+952)|0);
 var $158=(($157+$155)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=$mod;
 var $162=(($161+168)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+($160<<2))|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$f;
 var $169=(($168+28)|0);
 HEAP32[(($169)>>2)]=$167;
 var $170=$p;
 var $171=(($170+368)|0);
 var $172=(($171)|0);
 var $173=(($172+12)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$f;
 var $176=(($175+32)|0);
 HEAP32[(($176)>>2)]=$174;
 label=25;break;
 case 25: 
 var $178=$p;
 var $179=(($178)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=$m;
 var $182=(($181+1292)|0);
 var $183=(($182+((($180)*(20))&-1))|0);
 var $184=(($183+8)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=$p;
 var $187=(($186+320)|0);
 HEAP32[(($187)>>2)]=$185;
 var $188=$p;
 var $189=(($188)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$m;
 var $192=(($191+1292)|0);
 var $193=(($192+((($190)*(20))&-1))|0);
 var $194=(($193+4)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=$p;
 var $197=(($196+20)|0);
 HEAP32[(($197)>>2)]=$195;
 var $198=$p;
 var $199=(($198)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$m;
 var $202=(($201+1292)|0);
 var $203=(($202+((($200)*(20))&-1))|0);
 var $204=(($203)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=$p;
 var $207=(($206+16)|0);
 HEAP32[(($207)>>2)]=$205;
 var $208=$m;
 var $209=(($208+1256)|0);
 var $210=HEAPF64[(($209)>>3)];
 var $211=$m;
 var $212=(($211+1248)|0);
 var $213=HEAPF64[(($212)>>3)];
 var $214=($210)*($213);
 var $215=$p;
 var $216=(($215+20)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=($217|0);
 var $219=($214)/($218);
 var $220=$p;
 var $221=(($220+40)|0);
 HEAPF64[(($221)>>3)]=$219;
 var $222=$ctx;
 var $223=$mod;
 var $224=(($223+136)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=$smix;
 var $227=(($226)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=((($225)+($228))|0);
 var $230=_virt_on($222,$229);
 var $231=($230|0)!=0;
 if($231){label=26;break;}else{label=27;break;}
 case 26: 
 $ret=-2;
 label=42;break;
 case 27: 
 var $234=$f;
 var $235=(($234+16)|0);
 HEAP32[(($235)>>2)]=0;
 var $236=$f;
 var $237=(($236+4)|0);
 HEAP32[(($237)>>2)]=-1;
 var $238=$f;
 var $239=(($238)|0);
 HEAP32[(($239)>>2)]=0;
 var $240=$f;
 var $241=(($240+40)|0);
 HEAP32[(($241)>>2)]=0;
 var $242=$p;
 var $243=(($242+948)|0);
 var $244=(($243+4)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=_calloc($245,8);
 var $247=$246;
 var $248=$f;
 var $249=(($248+24)|0);
 HEAP32[(($249)>>2)]=$247;
 var $250=$f;
 var $251=(($250+24)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($252|0)==0;
 if($253){label=28;break;}else{label=29;break;}
 case 28: 
 $ret=-6;
 label=42;break;
 case 29: 
 var $256=$p;
 var $257=(($256+948)|0);
 var $258=(($257+4)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=_calloc($259,392);
 var $261=$260;
 var $262=$p;
 var $263=(($262+624)|0);
 HEAP32[(($263)>>2)]=$261;
 var $264=$p;
 var $265=(($264+624)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($266|0)==0;
 if($267){label=30;break;}else{label=31;break;}
 case 30: 
 $ret=-6;
 label=41;break;
 case 31: 
 $i=0;
 label=32;break;
 case 32: 
 var $271=$i;
 var $272=$p;
 var $273=(($272+948)|0);
 var $274=(($273+4)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=($271|0)<($275|0);
 if($276){label=33;break;}else{label=37;break;}
 case 33: 
 var $278=$i;
 var $279=$p;
 var $280=(($279+624)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($281+((($278)*(392))&-1))|0);
 $xc=$282;
 var $283=$ctx;
 var $284=$xc;
 var $285=_new_channel_extras($283,$284);
 var $286=($285|0)<0;
 if($286){label=34;break;}else{label=35;break;}
 case 34: 
 label=40;break;
 case 35: 
 label=36;break;
 case 36: 
 var $290=$i;
 var $291=((($290)+(1))|0);
 $i=$291;
 label=32;break;
 case 37: 
 var $293=$m;
 var $294=(($293+6552)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=(($295)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=$ctx;
 var $299=$s;
 var $300=(($299)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=FUNCTION_TABLE[$297]($298,$301);
 var $303=($302|0)<0;
 if($303){label=38;break;}else{label=39;break;}
 case 38: 
 $ret=-2;
 label=40;break;
 case 39: 
 var $306=$m;
 var $307=(($306+6552)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(($308+8)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=$ctx;
 var $312=FUNCTION_TABLE[$310]($311);
 var $313=$ctx;
 _reset_channels($313);
 var $314=$ctx;
 var $315=(($314+8140)|0);
 HEAP32[(($315)>>2)]=2;
 $1=0;
 label=43;break;
 case 40: 
 var $317=$p;
 var $318=(($317+624)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=$319;
 _free($320);
 label=41;break;
 case 41: 
 var $322=$f;
 var $323=(($322+24)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=$324;
 _free($325);
 label=42;break;
 case 42: 
 var $327=$ret;
 $1=$327;
 label=43;break;
 case 43: 
 var $329=$1;
 STACKTOP=sp;return $329;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_end_player($opaque){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ctx;
 var $p;
 var $m;
 var $f;
 var $xc;
 var $i;
 $1=$opaque;
 var $2=$1;
 var $3=$2;
 $ctx=$3;
 var $4=$ctx;
 var $5=(($4)|0);
 $p=$5;
 var $6=$ctx;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$p;
 var $9=(($8+324)|0);
 $f=$9;
 var $10=$ctx;
 var $11=(($10+8140)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)<2;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 var $16=$ctx;
 var $17=(($16+8140)|0);
 HEAP32[(($17)>>2)]=1;
 $i=0;
 label=4;break;
 case 4: 
 var $19=$i;
 var $20=$p;
 var $21=(($20+948)|0);
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($19|0)<($23|0);
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=$i;
 var $27=$p;
 var $28=(($27+624)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+((($26)*(392))&-1))|0);
 $xc=$30;
 var $31=$ctx;
 var $32=$xc;
 _release_channel_extras($31,$32);
 label=6;break;
 case 6: 
 var $34=$i;
 var $35=((($34)+(1))|0);
 $i=$35;
 label=4;break;
 case 7: 
 var $37=$ctx;
 _virt_off($37);
 var $38=$m;
 var $39=(($38+6552)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$ctx;
 var $44=FUNCTION_TABLE[$42]($43);
 var $45=$p;
 var $46=(($45+624)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 _free($48);
 var $49=$f;
 var $50=(($49+24)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51;
 _free($52);
 var $53=$p;
 var $54=(($53+624)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=$f;
 var $56=(($55+24)|0);
 HEAP32[(($56)>>2)]=0;
 var $57=$ctx;
 _mixer_off($57);
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _reset_channels($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $m;
 var $mod;
 var $xc;
 var $i;
 var $extra;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$1;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$m;
 var $9=(($8+6552)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$1;
 var $14=FUNCTION_TABLE[$12]($13);
 $i=0;
 label=2;break;
 case 2: 
 var $16=$i;
 var $17=$p;
 var $18=(($17+948)|0);
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($16|0)<($20|0);
 if($21){label=3;break;}else{label=5;break;}
 case 3: 
 var $23=$i;
 var $24=$p;
 var $25=(($24+624)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+((($23)*(392))&-1))|0);
 $xc=$27;
 var $28=$xc;
 var $29=(($28+356)|0);
 var $30=HEAP32[(($29)>>2)];
 $extra=$30;
 var $31=$xc;
 var $32=$31;
 _memset($32, 0, 392)|0;
 var $33=$extra;
 var $34=$xc;
 var $35=(($34+356)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=$1;
 var $37=$xc;
 _reset_channel_extras($36,$37);
 var $38=$xc;
 var $39=(($38+16)|0);
 HEAP32[(($39)>>2)]=-1;
 var $40=$xc;
 var $41=(($40+36)|0);
 HEAP32[(($41)>>2)]=-1;
 label=4;break;
 case 4: 
 var $43=$i;
 var $44=((($43)+(1))|0);
 $i=$44;
 label=2;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $47=$i;
 var $48=$p;
 var $49=(($48+948)|0);
 var $50=(($49)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($47|0)<($51|0);
 if($52){label=7;break;}else{label=9;break;}
 case 7: 
 var $54=$i;
 var $55=$p;
 var $56=(($55+624)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+((($54)*(392))&-1))|0);
 $xc=$58;
 var $59=$i;
 var $60=$mod;
 var $61=(($60+184)|0);
 var $62=(($61+((($59)*(12))&-1))|0);
 var $63=(($62)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$xc;
 var $66=(($65+48)|0);
 HEAP32[(($66)>>2)]=$64;
 var $67=$i;
 var $68=$mod;
 var $69=(($68+184)|0);
 var $70=(($69+((($67)*(12))&-1))|0);
 var $71=(($70+4)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$xc;
 var $74=(($73+52)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$xc;
 var $76=(($75+348)|0);
 var $77=(($76)|0);
 HEAP32[(($77)>>2)]=255;
 label=8;break;
 case 8: 
 var $79=$i;
 var $80=((($79)+(1))|0);
 $i=$80;
 label=6;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_play_frame($opaque){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ctx;
 var $p;
 var $m;
 var $mod;
 var $f;
 var $i;
 var $start;
 $2=$opaque;
 var $3=$2;
 var $4=$3;
 $ctx=$4;
 var $5=$ctx;
 var $6=(($5)|0);
 $p=$6;
 var $7=$ctx;
 var $8=(($7+1552)|0);
 $m=$8;
 var $9=$m;
 var $10=(($9)|0);
 $mod=$10;
 var $11=$p;
 var $12=(($11+324)|0);
 $f=$12;
 var $13=$ctx;
 var $14=(($13+8140)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)<2;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-8;
 label=38;break;
 case 3: 
 var $19=$mod;
 var $20=(($19+156)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)<=0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=$p;
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$mod;
 var $28=(($27+952)|0);
 var $29=(($28+$26)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=($31|0)==255;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=38;break;
 case 6: 
 var $35=$p;
 var $36=(($35)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$p;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($37|0)!=($40|0);
 if($41){label=7;break;}else{label=20;break;}
 case 7: 
 var $43=$p;
 var $44=(($43+52)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$m;
 var $47=(($46+6416)|0);
 var $48=(($47+($45<<3))|0);
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 $start=$50;
 var $51=$p;
 var $52=(($51+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==-2;
 if($54){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=38;break;
 case 9: 
 var $57=$p;
 var $58=(($57+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==-1;
 if($60){label=10;break;}else{label=11;break;}
 case 10: 
 var $62=$start;
 var $63=$p;
 var $64=(($63+4)|0);
 HEAP32[(($64)>>2)]=$62;
 label=11;break;
 case 11: 
 var $66=$p;
 var $67=(($66+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$start;
 var $70=($68|0)==($69|0);
 if($70){label=12;break;}else{label=13;break;}
 case 12: 
 var $72=$p;
 var $73=(($72+52)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$p;
 var $76=(($75+368)|0);
 var $77=(($76+($74<<4))|0);
 var $78=(($77+12)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$f;
 var $81=(($80+32)|0);
 HEAP32[(($81)>>2)]=$79;
 label=13;break;
 case 13: 
 var $83=$p;
 var $84=(($83+4)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$p;
 var $87=(($86+52)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$p;
 var $90=(($89+368)|0);
 var $91=(($90+($88<<4))|0);
 var $92=(($91+4)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=($85|0)>($93|0);
 if($94){label=14;break;}else{label=15;break;}
 case 14: 
 var $96=$f;
 var $97=(($96+32)|0);
 HEAP32[(($97)>>2)]=0;
 label=15;break;
 case 15: 
 var $99=$f;
 var $100=(($99+16)|0);
 HEAP32[(($100)>>2)]=0;
 var $101=$f;
 var $102=(($101+4)|0);
 HEAP32[(($102)>>2)]=-1;
 var $103=$p;
 var $104=(($103+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=((($105)-(1))|0);
 var $107=$p;
 var $108=(($107)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=$p;
 var $110=(($109)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$start;
 var $113=($111|0)<($112|0);
 if($113){label=16;break;}else{label=17;break;}
 case 16: 
 var $115=$start;
 var $116=((($115)-(1))|0);
 var $117=$p;
 var $118=(($117)|0);
 HEAP32[(($118)>>2)]=$116;
 label=17;break;
 case 17: 
 var $120=$ctx;
 _next_order($120);
 var $121=$p;
 var $122=(($121)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$m;
 var $125=(($124+1292)|0);
 var $126=(($125+((($123)*(20))&-1))|0);
 var $127=(($126)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($128|0)!=0;
 if($129){label=18;break;}else{label=19;break;}
 case 18: 
 var $131=$p;
 var $132=(($131)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$m;
 var $135=(($134+1292)|0);
 var $136=(($135+((($133)*(20))&-1))|0);
 var $137=(($136)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$p;
 var $140=(($139+16)|0);
 HEAP32[(($140)>>2)]=$138;
 label=19;break;
 case 19: 
 var $142=$p;
 var $143=(($142)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$m;
 var $146=(($145+1292)|0);
 var $147=(($146+((($144)*(20))&-1))|0);
 var $148=(($147+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$p;
 var $151=(($150+20)|0);
 HEAP32[(($151)>>2)]=$149;
 var $152=$p;
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$m;
 var $156=(($155+1292)|0);
 var $157=(($156+((($154)*(20))&-1))|0);
 var $158=(($157+8)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$p;
 var $161=(($160+320)|0);
 HEAP32[(($161)>>2)]=$159;
 var $162=$p;
 var $163=(($162)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=$m;
 var $166=(($165+1292)|0);
 var $167=(($166+((($164)*(20))&-1))|0);
 var $168=(($167+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($169|0);
 var $171=$p;
 var $172=(($171+32)|0);
 HEAPF64[(($172)>>3)]=$170;
 var $173=$ctx;
 _virt_reset($173);
 var $174=$ctx;
 _reset_channels($174);
 label=23;break;
 case 20: 
 var $176=$p;
 var $177=(($176+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=((($178)+(1))|0);
 HEAP32[(($177)>>2)]=$179;
 var $180=$p;
 var $181=(($180+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=$p;
 var $184=(($183+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=$f;
 var $187=(($186+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=((($188)+(1))|0);
 var $190=(Math_imul($185,$189)|0);
 var $191=($182|0)>=($190|0);
 if($191){label=21;break;}else{label=22;break;}
 case 21: 
 var $193=$ctx;
 _next_row($193);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $196=$p;
 var $197=(($196+12)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($198|0)==0;
 if($199){label=24;break;}else{label=33;break;}
 case 24: 
 var $201=$p;
 var $202=(($201)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=$p;
 var $205=(($204+52)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=$p;
 var $208=(($207+368)|0);
 var $209=(($208+($206<<4))|0);
 var $210=(($209+4)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=($203|0)==($211|0);
 if($212){label=25;break;}else{label=29;break;}
 case 25: 
 var $214=$p;
 var $215=(($214+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$p;
 var $218=(($217+52)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$p;
 var $221=(($220+368)|0);
 var $222=(($221+($219<<4))|0);
 var $223=(($222+8)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=($216|0)==($224|0);
 if($225){label=26;break;}else{label=29;break;}
 case 26: 
 var $227=$f;
 var $228=(($227+32)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($229|0)==0;
 if($230){label=27;break;}else{label=28;break;}
 case 27: 
 var $232=$p;
 var $233=(($232+48)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=((($234)+(1))|0);
 HEAP32[(($233)>>2)]=$235;
 var $236=$p;
 var $237=(($236+52)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=$p;
 var $240=(($239+368)|0);
 var $241=(($240+($238<<4))|0);
 var $242=(($241+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$f;
 var $245=(($244+32)|0);
 HEAP32[(($245)>>2)]=$243;
 label=28;break;
 case 28: 
 var $247=$f;
 var $248=(($247+32)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=((($249)-(1))|0);
 HEAP32[(($248)>>2)]=$250;
 label=29;break;
 case 29: 
 var $252=$f;
 var $253=(($252+12)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=($254|0)!=0;
 if($255){label=30;break;}else{label=31;break;}
 case 30: 
 var $257=$f;
 var $258=(($257+12)|0);
 HEAP32[(($258)>>2)]=0;
 label=32;break;
 case 31: 
 var $260=$ctx;
 var $261=$p;
 var $262=(($261)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=$mod;
 var $265=(($264+952)|0);
 var $266=(($265+$263)|0);
 var $267=HEAP8[($266)];
 var $268=($267&255);
 var $269=$p;
 var $270=(($269+8)|0);
 var $271=HEAP32[(($270)>>2)];
 _read_row($260,$268,$271);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $274=$ctx;
 _inject_event($274);
 $i=0;
 label=34;break;
 case 34: 
 var $276=$i;
 var $277=$p;
 var $278=(($277+948)|0);
 var $279=(($278+4)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=($276|0)<($280|0);
 if($281){label=35;break;}else{label=37;break;}
 case 35: 
 var $283=$ctx;
 var $284=$i;
 var $285=$p;
 var $286=(($285+12)|0);
 var $287=HEAP32[(($286)>>2)];
 _play_channel($283,$284,$287);
 label=36;break;
 case 36: 
 var $289=$i;
 var $290=((($289)+(1))|0);
 $i=$290;
 label=34;break;
 case 37: 
 var $292=$m;
 var $293=(($292+1256)|0);
 var $294=HEAPF64[(($293)>>3)];
 var $295=$m;
 var $296=(($295+1248)|0);
 var $297=HEAPF64[(($296)>>3)];
 var $298=($294)*($297);
 var $299=$p;
 var $300=(($299+20)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0);
 var $303=($298)/($302);
 var $304=$p;
 var $305=(($304+40)|0);
 HEAPF64[(($305)>>3)]=$303;
 var $306=$p;
 var $307=(($306+40)|0);
 var $308=HEAPF64[(($307)>>3)];
 var $309=$p;
 var $310=(($309+32)|0);
 var $311=HEAPF64[(($310)>>3)];
 var $312=($311)+($308);
 HEAPF64[(($310)>>3)]=$312;
 var $313=$ctx;
 _mixer_softmixer($313);
 $1=0;
 label=38;break;
 case 38: 
 var $315=$1;
 STACKTOP=sp;return $315;
  default: assert(0, "bad label: " + label);
 }
}
function _next_order($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $f;
 var $m;
 var $mod;
 var $chn;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$p;
 var $5=(($4+324)|0);
 $f=$5;
 var $6=$1;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$m;
 var $9=(($8)|0);
 $mod=$9;
 label=2;break;
 case 2: 
 var $11=$p;
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=((($13)+(1))|0);
 HEAP32[(($12)>>2)]=$14;
 var $15=$p;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$mod;
 var $19=(($18+156)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($17|0)>=($20|0);
 if($21){label=4;break;}else{label=3;break;}
 case 3: 
 var $23=$p;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$mod;
 var $27=(($26+952)|0);
 var $28=(($27+$25)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=($30|0)==255;
 if($31){label=4;break;}else{label=13;break;}
 case 4: 
 var $33=$mod;
 var $34=(($33+160)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$mod;
 var $37=(($36+156)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($35|0)>($38|0);
 if($39){label=7;break;}else{label=5;break;}
 case 5: 
 var $41=$mod;
 var $42=(($41+160)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$mod;
 var $45=(($44+952)|0);
 var $46=(($45+$43)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=$mod;
 var $50=(($49+128)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($48|0)>=($51|0);
 if($52){label=7;break;}else{label=6;break;}
 case 6: 
 var $54=$p;
 var $55=(($54)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$p;
 var $58=(($57+52)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$m;
 var $61=(($60+6416)|0);
 var $62=(($61+($59<<3))|0);
 var $63=(($62)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($56|0)<($64|0);
 if($65){label=7;break;}else{label=8;break;}
 case 7: 
 var $67=$p;
 var $68=(($67+52)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$m;
 var $71=(($70+6416)|0);
 var $72=(($71+($69<<3))|0);
 var $73=(($72)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$p;
 var $76=(($75)|0);
 HEAP32[(($76)>>2)]=$74;
 label=12;break;
 case 8: 
 var $78=$1;
 var $79=$mod;
 var $80=(($79+160)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=_get_sequence($78,$81);
 var $83=$p;
 var $84=(($83+52)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($82|0)==($85|0);
 if($86){label=9;break;}else{label=10;break;}
 case 9: 
 var $88=$mod;
 var $89=(($88+160)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$p;
 var $92=(($91)|0);
 HEAP32[(($92)>>2)]=$90;
 label=11;break;
 case 10: 
 var $94=$p;
 var $95=(($94+52)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$m;
 var $98=(($97+6416)|0);
 var $99=(($98+($96<<3))|0);
 var $100=(($99)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=$p;
 var $103=(($102)|0);
 HEAP32[(($103)>>2)]=$101;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $106=$p;
 var $107=(($106)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$m;
 var $110=(($109+1292)|0);
 var $111=(($110+((($108)*(20))&-1))|0);
 var $112=(($111+8)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$p;
 var $115=(($114+320)|0);
 HEAP32[(($115)>>2)]=$113;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $118=$p;
 var $119=(($118)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$mod;
 var $122=(($121+952)|0);
 var $123=(($122+$120)|0);
 var $124=HEAP8[($123)];
 var $125=($124&255);
 var $126=$mod;
 var $127=(($126+128)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($125|0)>=($128|0);
 if($129){label=2;break;}else{label=15;break;}
 case 15: 
 var $131=$p;
 var $132=(($131)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$m;
 var $135=(($134+1292)|0);
 var $136=(($135+((($133)*(20))&-1))|0);
 var $137=(($136+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0);
 var $140=$p;
 var $141=(($140+32)|0);
 HEAPF64[(($141)>>3)]=$139;
 var $142=$p;
 var $143=(($142)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$mod;
 var $146=(($145+952)|0);
 var $147=(($146+$144)|0);
 var $148=HEAP8[($147)];
 var $149=($148&255);
 var $150=$mod;
 var $151=(($150+168)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+($149<<2))|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$f;
 var $158=(($157+28)|0);
 HEAP32[(($158)>>2)]=$156;
 var $159=$f;
 var $160=(($159+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=$f;
 var $163=(($162+28)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($161|0)>=($164|0);
 if($165){label=16;break;}else{label=17;break;}
 case 16: 
 var $167=$f;
 var $168=(($167+16)|0);
 HEAP32[(($168)>>2)]=0;
 label=17;break;
 case 17: 
 var $170=$f;
 var $171=(($170+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=$p;
 var $174=(($173+8)|0);
 HEAP32[(($174)>>2)]=$172;
 var $175=$f;
 var $176=(($175+16)|0);
 HEAP32[(($176)>>2)]=0;
 var $177=$p;
 var $178=(($177)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=$p;
 var $181=(($180+4)|0);
 HEAP32[(($181)>>2)]=$179;
 var $182=$p;
 var $183=(($182+12)|0);
 HEAP32[(($183)>>2)]=0;
 var $184=$m;
 var $185=(($184+1280)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=$186&256;
 var $188=($187|0)!=0;
 if($188){label=18;break;}else{label=23;break;}
 case 18: 
 $chn=0;
 label=19;break;
 case 19: 
 var $191=$chn;
 var $192=$mod;
 var $193=(($192+136)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($191|0)<($194|0);
 if($195){label=20;break;}else{label=22;break;}
 case 20: 
 var $197=$chn;
 var $198=$p;
 var $199=(($198+624)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+((($197)*(392))&-1))|0);
 var $202=(($201+4)|0);
 HEAP32[(($202)>>2)]=0;
 label=21;break;
 case 21: 
 var $204=$chn;
 var $205=((($204)+(1))|0);
 $chn=$205;
 label=19;break;
 case 22: 
 label=23;break;
 case 23: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _next_row($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $f;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$p;
 var $5=(($4+324)|0);
 $f=$5;
 var $6=$f;
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=4;break;}
 case 2: 
 var $11=$f;
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$f;
 var $17=(($16+12)|0);
 HEAP32[(($17)>>2)]=1;
 label=4;break;
 case 4: 
 var $19=$p;
 var $20=(($19+12)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=$f;
 var $22=(($21+8)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=$f;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)!=0;
 if($26){label=5;break;}else{label=8;break;}
 case 5: 
 var $28=$f;
 var $29=(($28)|0);
 HEAP32[(($29)>>2)]=0;
 var $30=$f;
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)!=-1;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$f;
 var $36=(($35+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($37)-(1))|0);
 var $39=$p;
 var $40=(($39)|0);
 HEAP32[(($40)>>2)]=$38;
 var $41=$f;
 var $42=(($41+4)|0);
 HEAP32[(($42)>>2)]=-1;
 label=7;break;
 case 7: 
 var $44=$1;
 _next_order($44);
 label=16;break;
 case 8: 
 var $46=$f;
 var $47=(($46+20)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)!=0;
 if($49){label=9;break;}else{label=10;break;}
 case 9: 
 var $51=$f;
 var $52=(($51+20)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)-(1))|0);
 var $55=$f;
 var $56=(($55+24)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+($54<<3))|0);
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=((($60)-(1))|0);
 var $62=$p;
 var $63=(($62+8)|0);
 HEAP32[(($63)>>2)]=$61;
 var $64=$f;
 var $65=(($64+20)|0);
 HEAP32[(($65)>>2)]=0;
 label=10;break;
 case 10: 
 var $67=$f;
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 if($70){label=11;break;}else{label=12;break;}
 case 11: 
 var $72=$p;
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=((($74)+(1))|0);
 HEAP32[(($73)>>2)]=$75;
 var $76=$f;
 var $77=(($76+40)|0);
 HEAP32[(($77)>>2)]=0;
 label=13;break;
 case 12: 
 var $79=$f;
 var $80=(($79+36)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=((($81)-(1))|0);
 HEAP32[(($80)>>2)]=$82;
 label=13;break;
 case 13: 
 var $84=$p;
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=$f;
 var $88=(($87+28)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($86|0)>=($89|0);
 if($90){label=14;break;}else{label=15;break;}
 case 14: 
 var $92=$1;
 _next_order($92);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _read_row($ctx,$pat,$row){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $chn;
 var $m;
 var $mod;
 var $p;
 var $f;
 var $event;
 $1=$ctx;
 $2=$pat;
 $3=$row;
 var $4=$1;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$1;
 var $9=(($8)|0);
 $p=$9;
 var $10=$p;
 var $11=(($10+324)|0);
 $f=$11;
 $chn=0;
 label=2;break;
 case 2: 
 var $13=$chn;
 var $14=$mod;
 var $15=(($14+136)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($13|0)<($16|0);
 if($17){label=3;break;}else{label=13;break;}
 case 3: 
 var $19=$3;
 var $20=$chn;
 var $21=$2;
 var $22=$m;
 var $23=(($22)|0);
 var $24=(($23+168)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+($21<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+4)|0);
 var $29=(($28+($20<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$mod;
 var $32=(($31+172)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+($30<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($19|0)<($37|0);
 if($38){label=4;break;}else{label=5;break;}
 case 4: 
 var $40=$3;
 var $41=$chn;
 var $42=$2;
 var $43=$m;
 var $44=(($43)|0);
 var $45=(($44+168)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+($42<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+4)|0);
 var $50=(($49+($41<<2))|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$m;
 var $53=(($52)|0);
 var $54=(($53+172)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+($51<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+4)|0);
 var $59=(($58+($40<<3))|0);
 $event=$59;
 label=6;break;
 case 5: 
 $event=28976;
 label=6;break;
 case 6: 
 var $62=$1;
 var $63=$event;
 var $64=$chn;
 var $65=_check_delay($62,$63,$64);
 var $66=($65|0)==0;
 if($66){label=7;break;}else{label=11;break;}
 case 7: 
 var $68=$f;
 var $69=(($68+40)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)!=0;
 if($71){label=8;break;}else{label=9;break;}
 case 8: 
 var $73=$f;
 var $74=(($73+36)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)>0;
 if($76){label=9;break;}else{label=10;break;}
 case 9: 
 var $78=$1;
 var $79=$event;
 var $80=$chn;
 var $81=_read_event($78,$79,$80);
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $85=$chn;
 var $86=((($85)+(1))|0);
 $chn=$86;
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _inject_event($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $m;
 var $mod;
 var $smix;
 var $chn;
 var $e;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$1;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6)|0);
 $mod=$7;
 var $8=$1;
 var $9=(($8+8120)|0);
 $smix=$9;
 $chn=0;
 label=2;break;
 case 2: 
 var $11=$chn;
 var $12=$mod;
 var $13=(($12+136)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$smix;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=((($14)+($17))|0);
 var $19=($11|0)<($18|0);
 if($19){label=3;break;}else{label=7;break;}
 case 3: 
 var $21=$chn;
 var $22=$p;
 var $23=(($22+972)|0);
 var $24=(($23+($21<<3))|0);
 $e=$24;
 var $25=$e;
 var $26=(($25+7)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 var $29=($28|0)>0;
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=$1;
 var $32=$e;
 var $33=$chn;
 var $34=_read_event($31,$32,$33);
 var $35=$e;
 var $36=(($35+7)|0);
 HEAP8[($36)]=0;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $39=$chn;
 var $40=((($39)+(1))|0);
 $chn=$40;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _play_channel($ctx,$chn,$t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $smix;
 var $m;
 var $mod;
 var $xc;
 var $act;
 $1=$ctx;
 $2=$chn;
 $3=$t;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$1;
 var $7=(($6+8120)|0);
 $smix=$7;
 var $8=$1;
 var $9=(($8+1552)|0);
 $m=$9;
 var $10=$m;
 var $11=(($10)|0);
 $mod=$11;
 var $12=$2;
 var $13=$p;
 var $14=(($13+624)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+((($12)*(392))&-1))|0);
 $xc=$16;
 var $17=$xc;
 var $18=(($17+380)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=$xc;
 var $20=(($19+56)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)>0;
 if($22){label=2;break;}else{label=5;break;}
 case 2: 
 var $24=$xc;
 var $25=(($24+56)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=((($26)-(1))|0);
 HEAP32[(($25)>>2)]=$27;
 var $28=($27|0)==0;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 var $30=$1;
 var $31=$xc;
 var $32=(($31+360)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$2;
 var $35=_read_event($30,$33,$34);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $38=$1;
 var $39=$2;
 var $40=_virt_cstat($38,$39);
 $act=$40;
 var $41=$act;
 var $42=($41|0)==-1;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 var $44=$1;
 var $45=$2;
 var $46=$3;
 _update_volume($44,$45,$46);
 label=36;break;
 case 7: 
 var $48=$3;
 var $49=($48|0)==0;
 if($49){label=8;break;}else{label=16;break;}
 case 8: 
 var $51=$act;
 var $52=($51|0)!=256;
 if($52){label=9;break;}else{label=16;break;}
 case 9: 
 var $54=$xc;
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$mod;
 var $58=(($57+140)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($56>>>0)<($59>>>0);
 if($60){label=10;break;}else{label=11;break;}
 case 10: 
 var $62=$xc;
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$mod;
 var $66=(($65+176)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+((($64)*(764))&-1))|0);
 var $69=(($68+36)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)>0;
 if($71){label=13;break;}else{label=11;break;}
 case 11: 
 var $73=$smix;
 var $74=(($73+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)>0;
 if($76){label=12;break;}else{label=14;break;}
 case 12: 
 var $78=$xc;
 var $79=(($78+36)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$mod;
 var $82=(($81+140)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$smix;
 var $85=(($84+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=((($83)+($86))|0);
 var $88=($80>>>0)<($87>>>0);
 if($88){label=13;break;}else{label=14;break;}
 case 13: 
 var $90=$act;
 var $91=($90|0)==0;
 if($91){label=14;break;}else{label=15;break;}
 case 14: 
 var $93=$1;
 var $94=$2;
 _virt_resetchannel($93,$94);
 label=36;break;
 case 15: 
 label=16;break;
 case 16: 
 var $97=$xc;
 var $98=(($97+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$mod;
 var $101=(($100+140)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($99>>>0)<($102>>>0);
 if($103){label=17;break;}else{label=18;break;}
 case 17: 
 var $105=$xc;
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$mod;
 var $109=(($108+176)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+((($107)*(764))&-1))|0);
 var $112=(($111+36)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($113|0)>0;
 if($114){label=21;break;}else{label=18;break;}
 case 18: 
 var $116=$smix;
 var $117=(($116+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=($118|0)>0;
 if($119){label=19;break;}else{label=20;break;}
 case 19: 
 var $121=$xc;
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$mod;
 var $125=(($124+140)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=$smix;
 var $128=(($127+4)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=((($126)+($129))|0);
 var $131=($123>>>0)<($130>>>0);
 if($131){label=21;break;}else{label=20;break;}
 case 20: 
 label=36;break;
 case 21: 
 var $134=$1;
 var $135=$xc;
 var $136=$2;
 var $137=$3;
 var $138=($137|0)==0;
 if($138){label=22;break;}else{var $148=0;label=23;break;}
 case 22: 
 var $140=$xc;
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$142&67584;
 var $144=($143|0)!=0;
 var $145=$144^1;
 var $146=$145^1;
 var $148=$146;label=23;break;
 case 23: 
 var $148;
 var $149=($148&1);
 _play_extras($134,$135,$136,$149);
 var $150=$xc;
 var $151=(($150)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$152&262144;
 var $154=($153|0)!=0;
 if($154){label=24;break;}else{label=29;break;}
 case 24: 
 var $156=$xc;
 var $157=(($156+188)|0);
 var $158=(($157+4)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=((($159)-(1))|0);
 HEAP32[(($158)>>2)]=$160;
 var $161=($160|0)<=0;
 if($161){label=25;break;}else{label=28;break;}
 case 25: 
 var $163=$xc;
 var $164=(($163+188)|0);
 var $165=(($164+8)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($166|0)<16;
 if($167){label=26;break;}else{label=27;break;}
 case 26: 
 var $169=$1;
 var $170=$2;
 _virt_voicepos($169,$170,0);
 label=27;break;
 case 27: 
 var $172=$xc;
 var $173=(($172+188)|0);
 var $174=(($173+8)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=((2464+((($175)*(12))&-1))|0);
 var $177=(($176)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$xc;
 var $180=(($179+72)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=((($181)+($178))|0);
 HEAP32[(($180)>>2)]=$182;
 var $183=$xc;
 var $184=(($183+188)|0);
 var $185=(($184+8)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=((2464+((($186)*(12))&-1))|0);
 var $188=(($187+4)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$xc;
 var $191=(($190+72)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(Math_imul($192,$189)|0);
 HEAP32[(($191)>>2)]=$193;
 var $194=$xc;
 var $195=(($194+188)|0);
 var $196=(($195+8)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=((2464+((($197)*(12))&-1))|0);
 var $199=(($198+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$xc;
 var $202=(($201+72)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(((($203|0))/(($200|0)))&-1);
 HEAP32[(($202)>>2)]=$204;
 var $205=$xc;
 var $206=(($205+188)|0);
 var $207=(($206)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=$208&15;
 var $210=$xc;
 var $211=(($210+188)|0);
 var $212=(($211+4)|0);
 HEAP32[(($212)>>2)]=$209;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $215=$1;
 var $216=$2;
 var $217=$3;
 var $218=$act;
 _process_volume($215,$216,$217,$218);
 var $219=$1;
 var $220=$2;
 var $221=$3;
 var $222=$act;
 _process_frequency($219,$220,$221,$222);
 var $223=$1;
 var $224=$2;
 var $225=$3;
 var $226=$act;
 _process_pan($223,$224,$225,$226);
 var $227=$1;
 var $228=$2;
 var $229=$3;
 _update_volume($227,$228,$229);
 var $230=$1;
 var $231=$2;
 var $232=$3;
 _update_frequency($230,$231,$232);
 var $233=$1;
 var $234=$2;
 var $235=$3;
 _update_pan($233,$234,$235);
 var $236=$xc;
 var $237=(($236+60)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)!=0;
 if($239){label=30;break;}else{label=33;break;}
 case 30: 
 var $241=$xc;
 var $242=(($241+60)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((($243)-(1))|0);
 HEAP32[(($242)>>2)]=$244;
 var $245=($244|0)!=0;
 if($245){label=32;break;}else{label=31;break;}
 case 31: 
 var $247=$xc;
 var $248=(($247+8)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=$249|2;
 HEAP32[(($248)>>2)]=$250;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $253=$m;
 var $254=(($253+1280)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=$255&4;
 var $257=($256|0)!=0;
 if($257){label=34;break;}else{label=35;break;}
 case 34: 
 var $259=$m;
 var $260=$xc;
 _update_invloop($259,$260);
 label=35;break;
 case 35: 
 var $262=$1;
 var $263=$2;
 var $264=_virt_getvoicepos($262,$263);
 var $265=$xc;
 var $266=(($265+376)|0);
 HEAP32[(($266)>>2)]=$264;
 label=36;break;
 case 36: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_play_buffer($opaque,$out_buffer,$size,$loop){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1608)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $ctx;
 var $p;
 var $ret;
 var $filled;
 var $copy_size;
 var $fi=sp;
 $2=$opaque;
 $3=$out_buffer;
 $4=$size;
 $5=$loop;
 var $6=$2;
 var $7=$6;
 $ctx=$7;
 var $8=$ctx;
 var $9=(($8)|0);
 $p=$9;
 $ret=0;
 $filled=0;
 var $10=$3;
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$p;
 var $14=(($13+1484)|0);
 var $15=(($14)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=$p;
 var $17=(($16+1484)|0);
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=0;
 $1=0;
 label=20;break;
 case 3: 
 var $20=$ctx;
 var $21=(($20+8140)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)<2;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-8;
 label=20;break;
 case 5: 
 label=6;break;
 case 6: 
 var $27=$filled;
 var $28=$4;
 var $29=($27|0)<($28|0);
 if($29){label=7;break;}else{label=19;break;}
 case 7: 
 var $31=$p;
 var $32=(($31+1484)|0);
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$p;
 var $36=(($35+1484)|0);
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($34|0)==($38|0);
 if($39){label=8;break;}else{label=15;break;}
 case 8: 
 var $41=$2;
 var $42=_xmp_play_frame($41);
 $ret=$42;
 var $43=$2;
 _xmp_get_frame_info($43,$fi);
 var $44=$ret;
 var $45=($44|0)<0;
 if($45){label=11;break;}else{label=9;break;}
 case 9: 
 var $47=$5;
 var $48=($47|0)>0;
 if($48){label=10;break;}else{label=14;break;}
 case 10: 
 var $50=(($fi+56)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$5;
 var $53=($51|0)>=($52|0);
 if($53){label=11;break;}else{label=14;break;}
 case 11: 
 var $55=$filled;
 var $56=($55|0)==0;
 if($56){label=12;break;}else{label=13;break;}
 case 12: 
 var $58=$p;
 var $59=(($58+1484)|0);
 var $60=(($59)|0);
 HEAP32[(($60)>>2)]=0;
 var $61=$p;
 var $62=(($61+1484)|0);
 var $63=(($62+4)|0);
 HEAP32[(($63)>>2)]=0;
 $1=-1;
 label=20;break;
 case 13: 
 var $65=$3;
 var $66=$filled;
 var $67=(($65+$66)|0);
 var $68=$4;
 var $69=$filled;
 var $70=((($68)-($69))|0);
 _memset($67, 0, $70)|0;
 $1=0;
 label=20;break;
 case 14: 
 var $72=$p;
 var $73=(($72+1484)|0);
 var $74=(($73)|0);
 HEAP32[(($74)>>2)]=0;
 var $75=(($fi+40)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$p;
 var $78=(($77+1484)|0);
 var $79=(($78+8)|0);
 HEAP32[(($79)>>2)]=$76;
 var $80=(($fi+44)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$p;
 var $83=(($82+1484)|0);
 var $84=(($83+4)|0);
 HEAP32[(($84)>>2)]=$81;
 label=15;break;
 case 15: 
 var $86=$4;
 var $87=$filled;
 var $88=((($86)-($87))|0);
 var $89=$p;
 var $90=(($89+1484)|0);
 var $91=(($90+4)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$p;
 var $94=(($93+1484)|0);
 var $95=(($94)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=((($92)-($96))|0);
 var $98=($88|0)<($97|0);
 if($98){label=16;break;}else{label=17;break;}
 case 16: 
 var $100=$4;
 var $101=$filled;
 var $102=((($100)-($101))|0);
 var $114=$102;label=18;break;
 case 17: 
 var $104=$p;
 var $105=(($104+1484)|0);
 var $106=(($105+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$p;
 var $109=(($108+1484)|0);
 var $110=(($109)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=((($107)-($111))|0);
 var $114=$112;label=18;break;
 case 18: 
 var $114;
 $copy_size=$114;
 var $115=$3;
 var $116=$filled;
 var $117=(($115+$116)|0);
 var $118=$p;
 var $119=(($118+1484)|0);
 var $120=(($119+8)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$p;
 var $123=(($122+1484)|0);
 var $124=(($123)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($121+$125)|0);
 var $127=$copy_size;
 assert($127 % 1 === 0);(_memcpy($117, $126, $127)|0);
 var $128=$copy_size;
 var $129=$p;
 var $130=(($129+1484)|0);
 var $131=(($130)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=((($132)+($128))|0);
 HEAP32[(($131)>>2)]=$133;
 var $134=$copy_size;
 var $135=$filled;
 var $136=((($135)+($134))|0);
 $filled=$136;
 label=6;break;
 case 19: 
 var $138=$ret;
 $1=$138;
 label=20;break;
 case 20: 
 var $140=$1;
 STACKTOP=sp;return $140;
  default: assert(0, "bad label: " + label);
 }
}
function _xmp_get_frame_info($opaque,$info){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ctx;
 var $p;
 var $s;
 var $m;
 var $mod;
 var $chn;
 var $i;
 var $c;
 var $ci;
 var $track;
 var $event;
 var $trk;
 $1=$opaque;
 $2=$info;
 var $3=$1;
 var $4=$3;
 $ctx=$4;
 var $5=$ctx;
 var $6=(($5)|0);
 $p=$6;
 var $7=$ctx;
 var $8=(($7+1496)|0);
 $s=$8;
 var $9=$ctx;
 var $10=(($9+1552)|0);
 $m=$10;
 var $11=$m;
 var $12=(($11)|0);
 $mod=$12;
 var $13=$ctx;
 var $14=(($13+8140)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)<1;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 label=25;break;
 case 3: 
 var $19=$mod;
 var $20=(($19+136)|0);
 var $21=HEAP32[(($20)>>2)];
 $chn=$21;
 var $22=$p;
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)>=0;
 if($25){label=4;break;}else{label=6;break;}
 case 4: 
 var $27=$p;
 var $28=(($27+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$mod;
 var $31=(($30+156)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($29|0)<($32|0);
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $35=$p;
 var $36=(($35+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$2;
 var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$37;
 label=7;break;
 case 6: 
 var $41=$2;
 var $42=(($41)|0);
 HEAP32[(($42)>>2)]=0;
 label=7;break;
 case 7: 
 var $44=$2;
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$mod;
 var $48=(($47+952)|0);
 var $49=(($48+$46)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=$2;
 var $53=(($52+4)|0);
 HEAP32[(($53)>>2)]=$51;
 var $54=$2;
 var $55=(($54+4)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$mod;
 var $58=(($57+128)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($56|0)<($59|0);
 if($60){label=8;break;}else{label=9;break;}
 case 8: 
 var $62=$2;
 var $63=(($62+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$mod;
 var $66=(($65+168)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+($64<<2))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$2;
 var $73=(($72+12)|0);
 HEAP32[(($73)>>2)]=$71;
 label=10;break;
 case 9: 
 var $75=$2;
 var $76=(($75+12)|0);
 HEAP32[(($76)>>2)]=0;
 label=10;break;
 case 10: 
 var $78=$p;
 var $79=(($78+8)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$2;
 var $82=(($81+8)|0);
 HEAP32[(($82)>>2)]=$80;
 var $83=$p;
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$2;
 var $87=(($86+16)|0);
 HEAP32[(($87)>>2)]=$85;
 var $88=$p;
 var $89=(($88+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$2;
 var $92=(($91+20)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=$p;
 var $94=(($93+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$2;
 var $97=(($96+24)|0);
 HEAP32[(($97)>>2)]=$95;
 var $98=$p;
 var $99=(($98+52)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$p;
 var $102=(($101+368)|0);
 var $103=(($102+($100<<4))|0);
 var $104=(($103)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$2;
 var $107=(($106+32)|0);
 HEAP32[(($107)>>2)]=$105;
 var $108=$p;
 var $109=(($108+40)|0);
 var $110=HEAPF64[(($109)>>3)];
 var $111=($110)*(1000);
 var $112=(($111)&-1);
 var $113=$2;
 var $114=(($113+36)|0);
 HEAP32[(($114)>>2)]=$112;
 var $115=$p;
 var $116=(($115+32)|0);
 var $117=HEAPF64[(($116)>>3)];
 var $118=(($117)&-1);
 var $119=$2;
 var $120=(($119+28)|0);
 HEAP32[(($120)>>2)]=$118;
 var $121=$s;
 var $122=(($121+24)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$2;
 var $125=(($124+40)|0);
 HEAP32[(($125)>>2)]=$123;
 var $126=$2;
 var $127=(($126+48)|0);
 HEAP32[(($127)>>2)]=24585;
 var $128=$s;
 var $129=(($128+36)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$2;
 var $132=(($131+44)|0);
 HEAP32[(($132)>>2)]=$130;
 var $133=$s;
 var $134=(($133+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$135^-1;
 var $137=$136&4;
 var $138=($137|0)!=0;
 if($138){label=11;break;}else{label=12;break;}
 case 11: 
 var $140=$2;
 var $141=(($140+44)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($142<<1);
 HEAP32[(($141)>>2)]=$143;
 label=12;break;
 case 12: 
 var $145=$s;
 var $146=(($145+4)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=$147^-1;
 var $149=$148&1;
 var $150=($149|0)!=0;
 if($150){label=13;break;}else{label=14;break;}
 case 13: 
 var $152=$2;
 var $153=(($152+44)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($154<<1);
 HEAP32[(($153)>>2)]=$155;
 label=14;break;
 case 14: 
 var $157=$p;
 var $158=(($157+320)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$2;
 var $161=(($160+52)|0);
 HEAP32[(($161)>>2)]=$159;
 var $162=$p;
 var $163=(($162+48)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=$2;
 var $166=(($165+56)|0);
 HEAP32[(($166)>>2)]=$164;
 var $167=$p;
 var $168=(($167+948)|0);
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$2;
 var $172=(($171+60)|0);
 HEAP32[(($172)>>2)]=$170;
 var $173=$p;
 var $174=(($173+948)|0);
 var $175=(($174+8)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=$2;
 var $178=(($177+64)|0);
 HEAP32[(($178)>>2)]=$176;
 var $179=$p;
 var $180=(($179+52)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=$2;
 var $183=(($182+68)|0);
 HEAP32[(($183)>>2)]=$181;
 var $184=$p;
 var $185=(($184+624)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($186|0)!=0;
 if($187){label=15;break;}else{label=25;break;}
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $190=$i;
 var $191=$chn;
 var $192=($190|0)<($191|0);
 if($192){label=17;break;}else{label=24;break;}
 case 17: 
 var $194=$i;
 var $195=$p;
 var $196=(($195+624)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+((($194)*(392))&-1))|0);
 $c=$198;
 var $199=$i;
 var $200=$2;
 var $201=(($200+72)|0);
 var $202=(($201+((($199)*(24))&-1))|0);
 $ci=$202;
 var $203=$c;
 var $204=(($203+16)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205)&255);
 var $207=$ci;
 var $208=(($207+10)|0);
 HEAP8[($208)]=$206;
 var $209=$c;
 var $210=(($209+372)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211)&65535);
 var $213=$ci;
 var $214=(($213+8)|0);
 HEAP16[(($214)>>1)]=$212;
 var $215=$c;
 var $216=(($215+368)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$ci;
 var $219=(($218)|0);
 HEAP32[(($219)>>2)]=$217;
 var $220=$c;
 var $221=(($220+376)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=$ci;
 var $224=(($223+4)|0);
 HEAP32[(($224)>>2)]=$222;
 var $225=$c;
 var $226=(($225+36)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227)&255);
 var $229=$ci;
 var $230=(($229+11)|0);
 HEAP8[($230)]=$228;
 var $231=$c;
 var $232=(($231+44)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233)&255);
 var $235=$ci;
 var $236=(($235+12)|0);
 HEAP8[($236)]=$234;
 var $237=$c;
 var $238=(($237+380)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=$239>>4;
 var $241=(($240)&255);
 var $242=$ci;
 var $243=(($242+13)|0);
 HEAP8[($243)]=$241;
 var $244=$c;
 var $245=(($244+384)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246)&255);
 var $248=$ci;
 var $249=(($248+14)|0);
 HEAP8[($249)]=$247;
 var $250=$ci;
 var $251=(($250+15)|0);
 HEAP8[($251)]=0;
 var $252=$ci;
 var $253=(($252+16)|0);
 var $254=$253;
 _memset($254, 0, 8)|0;
 var $255=$2;
 var $256=(($255+4)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=$mod;
 var $259=(($258+128)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($257|0)<($260|0);
 if($261){label=18;break;}else{label=22;break;}
 case 18: 
 var $263=$2;
 var $264=(($263+8)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=$2;
 var $267=(($266+12)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=($265|0)<($268|0);
 if($269){label=19;break;}else{label=22;break;}
 case 19: 
 var $271=$i;
 var $272=$2;
 var $273=(($272+4)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=$mod;
 var $276=(($275+168)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+($274<<2))|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+4)|0);
 var $281=(($280+($271<<2))|0);
 var $282=HEAP32[(($281)>>2)];
 $trk=$282;
 var $283=$trk;
 var $284=$mod;
 var $285=(($284+172)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=(($286+($283<<2))|0);
 var $288=HEAP32[(($287)>>2)];
 $track=$288;
 var $289=$2;
 var $290=(($289+8)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=$track;
 var $293=(($292)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=($291|0)<($294|0);
 if($295){label=20;break;}else{label=21;break;}
 case 20: 
 var $297=$2;
 var $298=(($297+8)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=$track;
 var $301=(($300+4)|0);
 var $302=(($301+($299<<3))|0);
 $event=$302;
 var $303=$ci;
 var $304=(($303+16)|0);
 var $305=$304;
 var $306=$event;
 var $307=$306;
 assert(8 % 1 === 0);(_memcpy($305, $307, 8)|0);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $311=$i;
 var $312=((($311)+(1))|0);
 $i=$312;
 label=16;break;
 case 24: 
 label=25;break;
 case 25: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _update_volume($ctx,$chn,$t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $m;
 var $xc;
 $1=$ctx;
 $2=$chn;
 $3=$t;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$1;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$2;
 var $9=$p;
 var $10=(($9+624)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+((($8)*(392))&-1))|0);
 $xc=$12;
 var $13=$3;
 var $14=$p;
 var $15=(($14+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(((($13|0))%(($16|0)))&-1);
 var $18=($17|0)!=0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=$m;
 var $21=(($20+1280)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&64;
 var $24=($23|0)!=0;
 if($24){label=3;break;}else{label=21;break;}
 case 3: 
 var $26=$xc;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&1048576;
 var $30=($29|0)!=0;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 var $32=$xc;
 var $33=(($32+228)|0);
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$p;
 var $37=(($36+320)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=((($38)+($35))|0);
 HEAP32[(($37)>>2)]=$39;
 label=5;break;
 case 5: 
 var $41=$xc;
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$43&1;
 var $45=($44|0)!=0;
 if($45){label=7;break;}else{label=6;break;}
 case 6: 
 var $47=$xc;
 var $48=(($47+4)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$49&1;
 var $51=($50|0)!=0;
 if($51){label=7;break;}else{label=8;break;}
 case 7: 
 var $53=$xc;
 var $54=(($53+212)|0);
 var $55=(($54)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$xc;
 var $58=(($57+72)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=((($59)+($56))|0);
 HEAP32[(($58)>>2)]=$60;
 label=8;break;
 case 8: 
 var $62=$xc;
 var $63=(($62+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$64&1;
 var $66=($65|0)!=0;
 if($66){label=9;break;}else{label=16;break;}
 case 9: 
 var $68=$xc;
 var $69=(($68+212)|0);
 var $70=(($69)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)>0;
 if($72){label=10;break;}else{label=12;break;}
 case 10: 
 var $74=$xc;
 var $75=(($74+72)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$m;
 var $78=(($77+1268)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($76|0)>($79|0);
 if($80){label=11;break;}else{label=12;break;}
 case 11: 
 var $82=$m;
 var $83=(($82+1268)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$xc;
 var $86=(($85+72)|0);
 HEAP32[(($86)>>2)]=$84;
 var $87=$xc;
 var $88=(($87+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$89&-2;
 HEAP32[(($88)>>2)]=$90;
 label=12;break;
 case 12: 
 var $92=$xc;
 var $93=(($92+212)|0);
 var $94=(($93)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)<0;
 if($96){label=13;break;}else{label=15;break;}
 case 13: 
 var $98=$xc;
 var $99=(($98+72)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)<0;
 if($101){label=14;break;}else{label=15;break;}
 case 14: 
 var $103=$xc;
 var $104=(($103+72)|0);
 HEAP32[(($104)>>2)]=0;
 var $105=$xc;
 var $106=(($105+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$107&-2;
 HEAP32[(($106)>>2)]=$108;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $111=$xc;
 var $112=(($111)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$113&8192;
 var $115=($114|0)!=0;
 if($115){label=17;break;}else{label=18;break;}
 case 17: 
 var $117=$xc;
 var $118=(($117+212)|0);
 var $119=(($118+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$xc;
 var $122=(($121+72)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=((($123)+($120))|0);
 HEAP32[(($122)>>2)]=$124;
 label=18;break;
 case 18: 
 var $126=$xc;
 var $127=(($126)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=$128&512;
 var $130=($129|0)!=0;
 if($130){label=19;break;}else{label=20;break;}
 case 19: 
 var $132=$xc;
 var $133=(($132+240)|0);
 var $134=(($133)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$xc;
 var $137=(($136+52)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=((($138)+($135))|0);
 HEAP32[(($137)>>2)]=$139;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $142=$3;
 var $143=$p;
 var $144=(($143+16)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(((($142|0))%(($145|0)))&-1);
 var $147=($146|0)==0;
 if($147){label=22;break;}else{label=29;break;}
 case 22: 
 var $149=$xc;
 var $150=(($149)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$151&64;
 var $153=($152|0)!=0;
 if($153){label=23;break;}else{label=24;break;}
 case 23: 
 var $155=$xc;
 var $156=(($155+212)|0);
 var $157=(($156+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$xc;
 var $160=(($159+72)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=((($161)+($158))|0);
 HEAP32[(($160)>>2)]=$162;
 label=24;break;
 case 24: 
 var $164=$xc;
 var $165=(($164)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=$166&1024;
 var $168=($167|0)!=0;
 if($168){label=25;break;}else{label=26;break;}
 case 25: 
 var $170=$xc;
 var $171=(($170+240)|0);
 var $172=(($171+4)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$xc;
 var $175=(($174+52)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=((($176)+($173))|0);
 HEAP32[(($175)>>2)]=$177;
 label=26;break;
 case 26: 
 var $179=$xc;
 var $180=(($179)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=$181&1048576;
 var $183=($182|0)!=0;
 if($183){label=27;break;}else{label=28;break;}
 case 27: 
 var $185=$xc;
 var $186=(($185+228)|0);
 var $187=(($186+4)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=$p;
 var $190=(($189+320)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=((($191)+($188))|0);
 HEAP32[(($190)>>2)]=$192;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $196=$xc;
 var $197=(($196+72)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($198|0)<0;
 if($199){label=31;break;}else{label=32;break;}
 case 31: 
 var $201=$xc;
 var $202=(($201+72)|0);
 HEAP32[(($202)>>2)]=0;
 label=35;break;
 case 32: 
 var $204=$xc;
 var $205=(($204+72)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=$m;
 var $208=(($207+1268)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($206|0)>($209|0);
 if($210){label=33;break;}else{label=34;break;}
 case 33: 
 var $212=$m;
 var $213=(($212+1268)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=$xc;
 var $216=(($215+72)|0);
 HEAP32[(($216)>>2)]=$214;
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $221=$p;
 var $222=(($221+320)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($223|0)<0;
 if($224){label=38;break;}else{label=39;break;}
 case 38: 
 var $226=$p;
 var $227=(($226+320)|0);
 HEAP32[(($227)>>2)]=0;
 label=42;break;
 case 39: 
 var $229=$p;
 var $230=(($229+320)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=$m;
 var $233=(($232+1272)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=($231|0)>($234|0);
 if($235){label=40;break;}else{label=41;break;}
 case 40: 
 var $237=$m;
 var $238=(($237+1272)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=$p;
 var $241=(($240+320)|0);
 HEAP32[(($241)>>2)]=$239;
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $246=$xc;
 var $247=(($246+52)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248|0)<0;
 if($249){label=45;break;}else{label=46;break;}
 case 45: 
 var $251=$xc;
 var $252=(($251+52)|0);
 HEAP32[(($252)>>2)]=0;
 label=49;break;
 case 46: 
 var $254=$xc;
 var $255=(($254+52)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=$m;
 var $258=(($257+1268)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($256|0)>($259|0);
 if($260){label=47;break;}else{label=48;break;}
 case 47: 
 var $262=$m;
 var $263=(($262+1268)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=$xc;
 var $266=(($265+52)|0);
 HEAP32[(($266)>>2)]=$264;
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _process_volume($ctx,$chn,$t,$act){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $m;
 var $xc;
 var $instrument;
 var $finalvol;
 var $vol_envelope;
 var $gvol;
 var $end=sp;
 $1=$ctx;
 $2=$chn;
 $3=$t;
 $4=$act;
 var $5=$1;
 var $6=(($5)|0);
 $p=$6;
 var $7=$1;
 var $8=(($7+1552)|0);
 $m=$8;
 var $9=$2;
 var $10=$p;
 var $11=(($10+624)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+((($9)*(392))&-1))|0);
 $xc=$13;
 var $14=$1;
 var $15=$xc;
 var $16=(($15+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=_get_instrument($14,$17);
 $instrument=$18;
 var $19=$m;
 var $20=(($19+1280)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&262144;
 var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=2;break;}
 case 2: 
 var $25=$xc;
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$27&2;
 var $29=($28|0)!=0;
 if($29){label=3;break;}else{label=5;break;}
 case 3: 
 var $31=$instrument;
 var $32=(($31+44)|0);
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$34&1;
 var $36=($35|0)!=0;
 if($36){label=5;break;}else{label=4;break;}
 case 4: 
 var $38=$xc;
 var $39=(($38+64)|0);
 HEAP32[(($39)>>2)]=0;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $42=$xc;
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$44&3;
 var $46=($45|0)!=0;
 if($46){label=9;break;}else{label=7;break;}
 case 7: 
 var $48=$4;
 var $49=($48|0)==3;
 if($49){label=9;break;}else{label=8;break;}
 case 8: 
 var $51=$4;
 var $52=($51|0)==2;
 if($52){label=9;break;}else{label=18;break;}
 case 9: 
 var $54=$xc;
 var $55=(($54+64)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$instrument;
 var $58=(($57+40)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($56|0)>($59|0);
 if($60){label=10;break;}else{label=11;break;}
 case 10: 
 var $62=$instrument;
 var $63=(($62+40)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$xc;
 var $66=(($65+64)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=((($67)-($64))|0);
 HEAP32[(($66)>>2)]=$68;
 label=12;break;
 case 11: 
 var $70=$xc;
 var $71=(($70+64)|0);
 HEAP32[(($71)>>2)]=0;
 var $72=$xc;
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$74|4;
 HEAP32[(($73)>>2)]=$75;
 label=12;break;
 case 12: 
 var $77=$xc;
 var $78=(($77+64)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){label=13;break;}else{label=17;break;}
 case 13: 
 var $82=$m;
 var $83=(($82+1280)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$84&32768;
 var $86=($85|0)!=0;
 if($86){label=14;break;}else{label=15;break;}
 case 14: 
 var $88=$1;
 var $89=$2;
 _virt_resetchannel($88,$89);
 label=64;break;
 case 15: 
 var $91=$xc;
 var $92=(($91+72)|0);
 HEAP32[(($92)>>2)]=0;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $96=$instrument;
 var $97=(($96+44)|0);
 var $98=$xc;
 var $99=(($98+88)|0);
 var $100=HEAP16[(($99)>>1)];
 var $101=($100&65535);
 var $102=_check_envelope_fade($97,$101);
 if(($102|0)==-1){ label=19;break;}else if(($102|0)==0){ label=20;break;}else{label=21;break;}
 case 19: 
 var $104=$xc;
 var $105=(($104+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=$106|4;
 HEAP32[(($105)>>2)]=$107;
 label=24;break;
 case 20: 
 label=24;break;
 case 21: 
 var $110=$m;
 var $111=(($110+1280)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112&2;
 var $114=($113|0)!=0;
 if($114){label=22;break;}else{label=23;break;}
 case 22: 
 var $116=$xc;
 var $117=(($116+8)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$118|1;
 HEAP32[(($117)>>2)]=$119;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $122=$instrument;
 var $123=(($122+44)|0);
 var $124=$xc;
 var $125=(($124+88)|0);
 var $126=HEAP16[(($125)>>1)];
 var $127=($126&65535);
 var $128=_get_envelope($123,$127,64,$end);
 var $129=(($128)&65535);
 $vol_envelope=$129;
 var $130=$instrument;
 var $131=(($130+44)|0);
 var $132=$xc;
 var $133=(($132+88)|0);
 var $134=HEAP16[(($133)>>1)];
 var $135=($134&65535);
 var $136=$xc;
 var $137=(($136+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&2;
 var $140=($139|0)!=0;
 if($140){var $145=1;label=26;break;}else{label=25;break;}
 case 25: 
 var $142=$4;
 var $143=($142|0)==2;
 var $145=$143;label=26;break;
 case 26: 
 var $145;
 var $146=($145&1);
 var $147=_update_envelope($131,$135,$146);
 var $148=(($147)&65535);
 var $149=$xc;
 var $150=(($149+88)|0);
 HEAP16[(($150)>>1)]=$148;
 var $151=HEAP32[(($end)>>2)];
 var $152=($151|0)!=0;
 if($152){label=27;break;}else{label=29;break;}
 case 27: 
 var $154=$vol_envelope;
 var $155=($154&65535);
 var $156=($155|0)==0;
 if($156){label=28;break;}else{label=29;break;}
 case 28: 
 var $158=$xc;
 var $159=(($158+8)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=$160|4;
 HEAP32[(($159)>>2)]=$161;
 label=29;break;
 case 29: 
 var $163=$xc;
 var $164=(($163+8)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$165&4;
 var $167=($166|0)!=0;
 if($167){label=30;break;}else{label=32;break;}
 case 30: 
 var $169=$2;
 var $170=$p;
 var $171=(($170+948)|0);
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($169|0)>=($173|0);
 if($174){label=31;break;}else{label=32;break;}
 case 31: 
 var $176=$1;
 var $177=$2;
 _virt_resetchannel($176,$177);
 label=64;break;
 case 32: 
 var $179=$1;
 var $180=$xc;
 var $181=_extras_get_volume($179,$180);
 $finalvol=$181;
 var $182=$xc;
 var $183=(($182)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=$184&32;
 var $186=($185|0)!=0;
 if($186){label=33;break;}else{label=34;break;}
 case 33: 
 var $188=$xc;
 var $189=(($188+112)|0);
 var $190=_get_lfo($189,64);
 var $191=$finalvol;
 var $192=((($191)+($190))|0);
 $finalvol=$192;
 var $193=$xc;
 var $194=(($193+112)|0);
 _update_lfo($194);
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $197=$finalvol;
 var $198=($197|0)<0;
 if($198){label=36;break;}else{label=37;break;}
 case 36: 
 $finalvol=0;
 label=40;break;
 case 37: 
 var $201=$finalvol;
 var $202=$m;
 var $203=(($202+1268)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($201|0)>($204|0);
 if($205){label=38;break;}else{label=39;break;}
 case 38: 
 var $207=$m;
 var $208=(($207+1268)|0);
 var $209=HEAP32[(($208)>>2)];
 $finalvol=$209;
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $213=$finalvol;
 var $214=$xc;
 var $215=(($214+64)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(Math_imul($213,$216)|0);
 var $218=$217>>6;
 $finalvol=$218;
 var $219=$m;
 var $220=(($219+1280)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=$221&16;
 var $223=($222|0)!=0;
 if($223){label=42;break;}else{label=43;break;}
 case 42: 
 $gvol=64;
 label=44;break;
 case 43: 
 var $226=$p;
 var $227=(($226+320)|0);
 var $228=HEAP32[(($227)>>2)];
 $gvol=$228;
 label=44;break;
 case 44: 
 var $230=$vol_envelope;
 var $231=($230&65535);
 var $232=$gvol;
 var $233=(Math_imul($231,$232)|0);
 var $234=$xc;
 var $235=(($234+52)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(Math_imul($233,$236)|0);
 var $238=$m;
 var $239=(($238+1272)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(((($237|0))/(($240|0)))&-1);
 var $242=$finalvol;
 var $243=($242<<6);
 var $244=$m;
 var $245=(($244+1268)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(((($243|0))/(($246|0)))&-1);
 var $248=(Math_imul($241,$247)|0);
 var $249=$248>>>18;
 $finalvol=$249;
 var $250=$finalvol;
 var $251=$1;
 var $252=$2;
 var $253=_get_channel_vol($251,$252);
 var $254=(Math_imul($250,$253)|0);
 var $255=(((($254|0))/(100))&-1);
 $finalvol=$255;
 var $256=$m;
 var $257=(($256+1276)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)!=0;
 if($259){label=45;break;}else{label=49;break;}
 case 45: 
 var $261=$m;
 var $262=(($261+1268)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=($263|0)==255;
 if($264){label=46;break;}else{label=47;break;}
 case 46: 
 var $266=$finalvol;
 var $267=$266>>2;
 var $268=$m;
 var $269=(($268+1276)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+($267<<2))|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=$272<<2;
 var $284=$273;label=48;break;
 case 47: 
 var $275=$finalvol;
 var $276=$275>>4;
 var $277=$m;
 var $278=(($277+1276)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+($276<<2))|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=$281<<4;
 var $284=$282;label=48;break;
 case 48: 
 var $284;
 $finalvol=$284;
 label=49;break;
 case 49: 
 var $286=$m;
 var $287=(($286+1280)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$288&16384;
 var $290=($289|0)!=0;
 if($290){label=50;break;}else{label=51;break;}
 case 50: 
 var $292=$finalvol;
 var $293=$instrument;
 var $294=(($293+32)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=(Math_imul($292,$295)|0);
 var $297=$xc;
 var $298=(($297+76)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(Math_imul($296,$299)|0);
 var $301=$300>>12;
 $finalvol=$301;
 label=51;break;
 case 51: 
 var $303=$xc;
 var $304=(($303+200)|0);
 var $305=(($304)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=($306|0)!=0;
 if($307){label=52;break;}else{label=60;break;}
 case 52: 
 var $309=$xc;
 var $310=(($309+200)|0);
 var $311=(($310+4)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=($312|0)==0;
 if($313){label=53;break;}else{label=54;break;}
 case 53: 
 var $315=$xc;
 var $316=(($315+200)|0);
 var $317=(($316)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=$318&240;
 var $320=$319>>4;
 var $321=$320|128;
 var $322=$xc;
 var $323=(($322+200)|0);
 var $324=(($323+4)|0);
 HEAP32[(($324)>>2)]=$321;
 label=57;break;
 case 54: 
 var $326=$xc;
 var $327=(($326+200)|0);
 var $328=(($327+4)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=($329|0)==128;
 if($330){label=55;break;}else{label=56;break;}
 case 55: 
 var $332=$xc;
 var $333=(($332+200)|0);
 var $334=(($333)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=$335&15;
 var $337=$xc;
 var $338=(($337+200)|0);
 var $339=(($338+4)|0);
 HEAP32[(($339)>>2)]=$336;
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $342=$xc;
 var $343=(($342+200)|0);
 var $344=(($343+4)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=((($345)-(1))|0);
 HEAP32[(($344)>>2)]=$346;
 var $347=$xc;
 var $348=(($347+200)|0);
 var $349=(($348+4)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=$350^-1;
 var $352=$351&128;
 var $353=($352|0)!=0;
 if($353){label=58;break;}else{label=59;break;}
 case 58: 
 $finalvol=0;
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 var $357=$2;
 var $358=$m;
 var $359=(($358)|0);
 var $360=(($359+136)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=($357|0)<($361|0);
 if($362){label=61;break;}else{label=62;break;}
 case 61: 
 var $364=$finalvol;
 var $365=$p;
 var $366=(($365+316)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(Math_imul($364,$367)|0);
 var $369=(((($368|0))/(100))&-1);
 $finalvol=$369;
 label=63;break;
 case 62: 
 var $371=$finalvol;
 var $372=$p;
 var $373=(($372+312)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(Math_imul($371,$374)|0);
 var $376=(((($375|0))/(100))&-1);
 $finalvol=$376;
 label=63;break;
 case 63: 
 var $378=$finalvol;
 var $379=$xc;
 var $380=(($379+380)|0);
 HEAP32[(($380)>>2)]=$378;
 var $381=$1;
 var $382=$2;
 var $383=$finalvol;
 _virt_setvol($381,$382,$383);
 label=64;break;
 case 64: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _process_frequency($ctx,$chn,$t,$act){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $s;
 var $p;
 var $m;
 var $xc;
 var $instrument;
 var $period;
 var $linear_bend;
 var $frq_envelope;
 var $arp;
 var $vibrato;
 var $cutoff;
 var $resonance;
 var $end=sp;
 var $shift;
 var $vib;
 var $a0=(sp)+(8);
 var $b0=(sp)+(16);
 var $b1=(sp)+(24);
 $1=$ctx;
 $2=$chn;
 $3=$t;
 $4=$act;
 var $5=$1;
 var $6=(($5+1496)|0);
 $s=$6;
 var $7=$1;
 var $8=(($7)|0);
 $p=$8;
 var $9=$1;
 var $10=(($9+1552)|0);
 $m=$10;
 var $11=$2;
 var $12=$p;
 var $13=(($12+624)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+((($11)*(392))&-1))|0);
 $xc=$15;
 var $16=$1;
 var $17=$xc;
 var $18=(($17+36)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=_get_instrument($16,$19);
 $instrument=$20;
 var $21=$instrument;
 var $22=(($21+356)|0);
 var $23=$xc;
 var $24=(($23+92)|0);
 var $25=HEAP16[(($24)>>1)];
 var $26=($25&65535);
 var $27=_get_envelope($22,$26,0,$end);
 $frq_envelope=$27;
 var $28=$instrument;
 var $29=(($28+356)|0);
 var $30=$xc;
 var $31=(($30+92)|0);
 var $32=HEAP16[(($31)>>1)];
 var $33=($32&65535);
 var $34=$xc;
 var $35=(($34+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$36&2;
 var $38=($37|0)!=0;
 if($38){var $43=1;label=3;break;}else{label=2;break;}
 case 2: 
 var $40=$4;
 var $41=($40|0)==2;
 var $43=$41;label=3;break;
 case 3: 
 var $43;
 var $44=($43&1);
 var $45=_update_envelope($29,$33,$44);
 var $46=(($45)&65535);
 var $47=$xc;
 var $48=(($47+92)|0);
 HEAP16[(($48)>>1)]=$46;
 var $49=$xc;
 var $50=(($49)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51&16384;
 var $53=($52|0)!=0;
 if($53){label=4;break;}else{label=7;break;}
 case 4: 
 var $55=$xc;
 var $56=(($55+320)|0);
 var $57=(($56+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==0;
 if($59){label=5;break;}else{label=6;break;}
 case 5: 
 var $61=$xc;
 var $62=(($61+320)|0);
 var $63=(($62)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$xc;
 var $66=(($65+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=((($67)+($64))|0);
 HEAP32[(($66)>>2)]=$68;
 var $69=$xc;
 var $70=(($69+12)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$xc;
 var $73=(($72+32)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$m;
 var $76=(($75+1280)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=$77&4096;
 var $79=_note_to_period($71,$74,$78);
 var $80=$xc;
 var $81=(($80+24)|0);
 HEAPF64[(($81)>>3)]=$79;
 var $82=$xc;
 var $83=(($82+320)|0);
 var $84=(($83+8)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$xc;
 var $87=(($86+320)|0);
 var $88=(($87+12)|0);
 HEAP32[(($88)>>2)]=$85;
 label=6;break;
 case 6: 
 var $90=$xc;
 var $91=(($90+320)|0);
 var $92=(($91+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=((($93)-(1))|0);
 HEAP32[(($92)>>2)]=$94;
 label=7;break;
 case 7: 
 var $96=$xc;
 var $97=(($96+168)|0);
 var $98=(($97)|0);
 var $99=$xc;
 var $100=(($99+168)|0);
 var $101=(($100+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=((($102)+(1))|0);
 var $104=($103<<10);
 var $105=_get_lfo($98,$104);
 $vibrato=$105;
 var $106=$xc;
 var $107=(($106+168)|0);
 var $108=(($107)|0);
 _update_lfo($108);
 var $109=$xc;
 var $110=(($109+168)|0);
 var $111=(($110+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)>1;
 if($113){label=8;break;}else{label=9;break;}
 case 8: 
 var $115=$xc;
 var $116=(($115+168)|0);
 var $117=(($116+16)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=((($118)-(2))|0);
 HEAP32[(($117)>>2)]=$119;
 label=10;break;
 case 9: 
 var $121=$xc;
 var $122=(($121+168)|0);
 var $123=(($122+16)|0);
 HEAP32[(($123)>>2)]=0;
 label=10;break;
 case 10: 
 var $125=$xc;
 var $126=(($125)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$127&16;
 var $129=($128|0)!=0;
 if($129){label=12;break;}else{label=11;break;}
 case 11: 
 var $131=$xc;
 var $132=(($131+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133&16;
 var $135=($134|0)!=0;
 if($135){label=12;break;}else{label=19;break;}
 case 12: 
 var $137=$m;
 var $138=(($137+1280)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$139&524288;
 var $141=($140|0)!=0;
 var $142=($141?10:9);
 $shift=$142;
 var $143=$xc;
 var $144=(($143+96)|0);
 var $145=$shift;
 var $146=1<<$145;
 var $147=_get_lfo($144,$146);
 $vib=$147;
 var $148=$m;
 var $149=(($148+1280)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=$150&2097152;
 var $152=($151|0)!=0;
 if($152){label=13;break;}else{label=14;break;}
 case 13: 
 var $154=$vib;
 var $155=$vibrato;
 var $156=((($155)-($154))|0);
 $vibrato=$156;
 label=15;break;
 case 14: 
 var $158=$vib;
 var $159=$vibrato;
 var $160=((($159)+($158))|0);
 $vibrato=$160;
 label=15;break;
 case 15: 
 var $162=$3;
 var $163=$p;
 var $164=(($163+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(((($162|0))%(($165|0)))&-1);
 var $167=($166|0)!=0;
 if($167){label=17;break;}else{label=16;break;}
 case 16: 
 var $169=$m;
 var $170=(($169+1280)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=$171&1048576;
 var $173=($172|0)!=0;
 if($173){label=17;break;}else{label=18;break;}
 case 17: 
 var $175=$xc;
 var $176=(($175+96)|0);
 _update_lfo($176);
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $179=$xc;
 var $180=(($179+24)|0);
 var $181=HEAPF64[(($180)>>3)];
 var $182=$1;
 var $183=$xc;
 var $184=_extras_get_period($182,$183);
 var $185=($184|0);
 var $186=($181)+($185);
 $period=$186;
 var $187=$period;
 var $188=$vibrato;
 var $189=($188|0);
 var $190=($187)+($189);
 var $191=$xc;
 var $192=(($191+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=$m;
 var $195=(($194+1280)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=$196&8192;
 var $198=$xc;
 var $199=(($198+68)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$m;
 var $202=(($201+1280)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=$203&4096;
 var $205=_period_to_bend($190,$193,$197,$200,$204);
 $linear_bend=$205;
 var $206=$instrument;
 var $207=(($206+356)|0);
 var $208=(($207)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$209^-1;
 var $211=$210&8;
 var $212=($211|0)!=0;
 if($212){label=20;break;}else{label=21;break;}
 case 20: 
 var $214=$frq_envelope;
 var $215=$214<<7;
 var $216=$linear_bend;
 var $217=((($216)+($215))|0);
 $linear_bend=$217;
 label=21;break;
 case 21: 
 var $219=$xc;
 var $220=(($219+144)|0);
 var $221=(($220+20)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=$xc;
 var $224=(($223+144)|0);
 var $225=(($224)|0);
 var $226=(($225+$222)|0);
 var $227=HEAP8[($226)];
 var $228=(($227<<24)>>24);
 $arp=$228;
 var $229=$arp;
 var $230=($229|0)!=0;
 if($230){label=22;break;}else{label=23;break;}
 case 22: 
 var $232=$arp;
 var $233=((($232)*(12800))&-1);
 var $234=$linear_bend;
 var $235=((($234)+($233))|0);
 $linear_bend=$235;
 label=23;break;
 case 23: 
 var $237=$1;
 var $238=$xc;
 var $239=_extras_get_linear_bend($237,$238);
 var $240=$linear_bend;
 var $241=((($240)+($239))|0);
 $linear_bend=$241;
 var $242=$linear_bend;
 var $243=$242>>7;
 var $244=$xc;
 var $245=(($244+372)|0);
 HEAP32[(($245)>>2)]=$243;
 var $246=$xc;
 var $247=(($246+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=$linear_bend;
 var $250=_note_to_period_mix($248,$249);
 var $251=$xc;
 var $252=(($251+368)|0);
 HEAP32[(($252)>>2)]=$250;
 var $253=$1;
 var $254=$2;
 var $255=$linear_bend;
 _virt_setbend($253,$254,$255);
 var $256=$m;
 var $257=(($256+1280)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=$258&65536;
 var $260=($259|0)!=0;
 if($260){label=25;break;}else{label=24;break;}
 case 24: 
 label=34;break;
 case 25: 
 var $263=$instrument;
 var $264=(($263+356)|0);
 var $265=(($264)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=$266&8;
 var $268=($267|0)!=0;
 if($268){label=26;break;}else{label=27;break;}
 case 26: 
 var $270=$xc;
 var $271=(($270+348)|0);
 var $272=(($271)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=$frq_envelope;
 var $275=(Math_imul($273,$274)|0);
 var $276=$275>>8;
 $cutoff=$276;
 label=28;break;
 case 27: 
 var $278=$xc;
 var $279=(($278+348)|0);
 var $280=(($279)|0);
 var $281=HEAP32[(($280)>>2)];
 $cutoff=$281;
 label=28;break;
 case 28: 
 var $283=$xc;
 var $284=(($283+348)|0);
 var $285=(($284+4)|0);
 var $286=HEAP32[(($285)>>2)];
 $resonance=$286;
 var $287=$cutoff;
 var $288=($287|0)>255;
 if($288){label=29;break;}else{label=30;break;}
 case 29: 
 $cutoff=255;
 label=33;break;
 case 30: 
 var $291=$cutoff;
 var $292=($291|0)<255;
 if($292){label=31;break;}else{label=32;break;}
 case 31: 
 var $294=$s;
 var $295=(($294)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=$cutoff;
 var $298=$resonance;
 _filter_setup($296,$297,$298,$a0,$b0,$b1);
 var $299=$1;
 var $300=$2;
 var $301=HEAP32[(($a0)>>2)];
 _virt_seteffect($299,$300,176,$301);
 var $302=$1;
 var $303=$2;
 var $304=HEAP32[(($b0)>>2)];
 _virt_seteffect($302,$303,177,$304);
 var $305=$1;
 var $306=$2;
 var $307=HEAP32[(($b1)>>2)];
 _virt_seteffect($305,$306,178,$307);
 var $308=$1;
 var $309=$2;
 var $310=$resonance;
 _virt_seteffect($308,$309,3,$310);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $313=$1;
 var $314=$2;
 var $315=$cutoff;
 _virt_seteffect($313,$314,2,$315);
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _process_pan($ctx,$chn,$t,$act){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $s;
 var $xc;
 var $instrument;
 var $finalpan;
 var $panbrello;
 var $pan_envelope;
 var $end=sp;
 $1=$ctx;
 $2=$chn;
 $3=$t;
 $4=$act;
 var $5=$1;
 var $6=(($5)|0);
 $p=$6;
 var $7=$1;
 var $8=(($7+1496)|0);
 $s=$8;
 var $9=$2;
 var $10=$p;
 var $11=(($10+624)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+((($9)*(392))&-1))|0);
 $xc=$13;
 $panbrello=0;
 var $14=$1;
 var $15=$xc;
 var $16=(($15+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=_get_instrument($14,$17);
 $instrument=$18;
 var $19=$instrument;
 var $20=(($19+200)|0);
 var $21=$xc;
 var $22=(($21+90)|0);
 var $23=HEAP16[(($22)>>1)];
 var $24=($23&65535);
 var $25=_get_envelope($20,$24,32,$end);
 $pan_envelope=$25;
 var $26=$instrument;
 var $27=(($26+200)|0);
 var $28=$xc;
 var $29=(($28+90)|0);
 var $30=HEAP16[(($29)>>1)];
 var $31=($30&65535);
 var $32=$xc;
 var $33=(($32+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$34&2;
 var $36=($35|0)!=0;
 if($36){var $41=1;label=3;break;}else{label=2;break;}
 case 2: 
 var $38=$4;
 var $39=($38|0)==2;
 var $41=$39;label=3;break;
 case 3: 
 var $41;
 var $42=($41&1);
 var $43=_update_envelope($27,$31,$42);
 var $44=(($43)&65535);
 var $45=$xc;
 var $46=(($45+90)|0);
 HEAP16[(($46)>>1)]=$44;
 var $47=$xc;
 var $48=(($47)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$49&524288;
 var $51=($50|0)!=0;
 if($51){label=4;break;}else{label=5;break;}
 case 4: 
 var $53=$xc;
 var $54=(($53+128)|0);
 var $55=_get_lfo($54,512);
 $panbrello=$55;
 var $56=$xc;
 var $57=(($56+128)|0);
 _update_lfo($57);
 label=5;break;
 case 5: 
 var $59=$xc;
 var $60=(($59+304)|0);
 var $61=(($60)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$panbrello;
 var $64=((($62)+($63))|0);
 var $65=$pan_envelope;
 var $66=((($65)-(32))|0);
 var $67=$xc;
 var $68=(($67+304)|0);
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=((($70)-(128))|0);
 var $72=Math_abs($71);
 var $73=(((128)-($72))|0);
 var $74=(Math_imul($66,$73)|0);
 var $75=(((($74|0))/(32))&-1);
 var $76=((($64)+($75))|0);
 $finalpan=$76;
 var $77=$xc;
 var $78=(($77+48)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$finalpan;
 var $81=((($80)-(128))|0);
 var $82=$xc;
 var $83=(($82+48)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)-(128))|0);
 var $86=Math_abs($85);
 var $87=(((128)-($86))|0);
 var $88=(Math_imul($81,$87)|0);
 var $89=(((($88|0))/(128))&-1);
 var $90=((($79)+($89))|0);
 $finalpan=$90;
 var $91=$s;
 var $92=(($91+4)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$93&4;
 var $95=($94|0)!=0;
 if($95){label=6;break;}else{label=7;break;}
 case 6: 
 $finalpan=0;
 label=8;break;
 case 7: 
 var $98=$finalpan;
 var $99=((($98)-(128))|0);
 var $100=$s;
 var $101=(($100+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(Math_imul($99,$102)|0);
 var $104=(((($103|0))/(100))&-1);
 $finalpan=$104;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $107=$finalpan;
 var $108=($107|0)<-128;
 if($108){label=10;break;}else{label=11;break;}
 case 10: 
 $finalpan=-128;
 label=14;break;
 case 11: 
 var $111=$finalpan;
 var $112=($111|0)>127;
 if($112){label=12;break;}else{label=13;break;}
 case 12: 
 $finalpan=127;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $117=$finalpan;
 var $118=((($117)+(128))|0);
 var $119=$xc;
 var $120=(($119+384)|0);
 HEAP32[(($120)>>2)]=$118;
 var $121=$1;
 var $122=$2;
 var $123=$finalpan;
 _virt_setpan($121,$122,$123);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _update_frequency($ctx,$chn,$t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $m;
 var $xc;
 var $end;
 $1=$ctx;
 $2=$chn;
 $3=$t;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$1;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$2;
 var $9=$p;
 var $10=(($9+624)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+((($8)*(392))&-1))|0);
 $xc=$12;
 var $13=$3;
 var $14=$p;
 var $15=(($14+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(((($13|0))%(($16|0)))&-1);
 var $18=($17|0)!=0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=$m;
 var $21=(($20+1280)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&128;
 var $24=($23|0)!=0;
 if($24){label=3;break;}else{label=19;break;}
 case 3: 
 var $26=$xc;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&8;
 var $30=($29|0)!=0;
 if($30){label=5;break;}else{label=4;break;}
 case 4: 
 var $32=$xc;
 var $33=(($32+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$34&8;
 var $36=($35|0)!=0;
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $38=$xc;
 var $39=(($38+256)|0);
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0);
 var $43=$xc;
 var $44=(($43+24)|0);
 var $45=HEAPF64[(($44)>>3)];
 var $46=($45)+($42);
 HEAPF64[(($44)>>3)]=$46;
 label=6;break;
 case 6: 
 var $48=$xc;
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$50&4;
 var $52=($51|0)!=0;
 if($52){label=8;break;}else{label=7;break;}
 case 7: 
 var $54=$xc;
 var $55=(($54+4)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56&4;
 var $58=($57|0)!=0;
 if($58){label=8;break;}else{label=18;break;}
 case 8: 
 $end=0;
 var $60=$xc;
 var $61=(($60+280)|0);
 var $62=(($61+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63|0)>0;
 if($64){label=9;break;}else{label=12;break;}
 case 9: 
 var $66=$xc;
 var $67=(($66+280)|0);
 var $68=(($67+12)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0);
 var $71=$xc;
 var $72=(($71+24)|0);
 var $73=HEAPF64[(($72)>>3)];
 var $74=($73)+($70);
 HEAPF64[(($72)>>3)]=$74;
 var $75=$xc;
 var $76=(($75+24)|0);
 var $77=HEAPF64[(($76)>>3)];
 var $78=$xc;
 var $79=(($78+280)|0);
 var $80=(($79)|0);
 var $81=HEAPF64[(($80)>>3)];
 var $82=$77>=$81;
 if($82){label=10;break;}else{label=11;break;}
 case 10: 
 $end=1;
 label=11;break;
 case 11: 
 label=15;break;
 case 12: 
 var $86=$xc;
 var $87=(($86+280)|0);
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0);
 var $91=$xc;
 var $92=(($91+24)|0);
 var $93=HEAPF64[(($92)>>3)];
 var $94=($93)-($90);
 HEAPF64[(($92)>>3)]=$94;
 var $95=$xc;
 var $96=(($95+24)|0);
 var $97=HEAPF64[(($96)>>3)];
 var $98=$xc;
 var $99=(($98+280)|0);
 var $100=(($99)|0);
 var $101=HEAPF64[(($100)>>3)];
 var $102=$97<=$101;
 if($102){label=13;break;}else{label=14;break;}
 case 13: 
 $end=1;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $106=$end;
 var $107=($106|0)!=0;
 if($107){label=16;break;}else{label=17;break;}
 case 16: 
 var $109=$xc;
 var $110=(($109+280)|0);
 var $111=(($110)|0);
 var $112=HEAPF64[(($111)>>3)];
 var $113=$xc;
 var $114=(($113+24)|0);
 HEAPF64[(($114)>>3)]=$112;
 var $115=$xc;
 var $116=(($115+280)|0);
 var $117=(($116+8)|0);
 HEAP32[(($117)>>2)]=0;
 var $118=$xc;
 var $119=(($118)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$120&-5;
 HEAP32[(($119)>>2)]=$121;
 var $122=$xc;
 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124&-5;
 HEAP32[(($123)>>2)]=$125;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $129=$3;
 var $130=$p;
 var $131=(($130+16)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(((($129|0))%(($132|0)))&-1);
 var $134=($133|0)==0;
 if($134){label=20;break;}else{label=25;break;}
 case 20: 
 var $136=$xc;
 var $137=(($136)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&128;
 var $140=($139|0)!=0;
 if($140){label=21;break;}else{label=22;break;}
 case 21: 
 var $142=$xc;
 var $143=(($142+256)|0);
 var $144=(($143+8)|0);
 var $145=HEAPF64[(($144)>>3)];
 var $146=$xc;
 var $147=(($146+24)|0);
 var $148=HEAPF64[(($147)>>3)];
 var $149=($148)+($145);
 HEAPF64[(($147)>>3)]=$149;
 label=22;break;
 case 22: 
 var $151=$xc;
 var $152=(($151)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153&32768;
 var $155=($154|0)!=0;
 if($155){label=23;break;}else{label=24;break;}
 case 23: 
 var $157=$xc;
 var $158=(($157+320)|0);
 var $159=(($158+4)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=$xc;
 var $162=(($161+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=((($163)+($160))|0);
 HEAP32[(($162)>>2)]=$164;
 var $165=$xc;
 var $166=(($165+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$xc;
 var $169=(($168+32)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=$m;
 var $172=(($171+1280)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$173&4096;
 var $175=_note_to_period($167,$170,$174);
 var $176=$xc;
 var $177=(($176+24)|0);
 HEAPF64[(($177)>>3)]=$175;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $180=$xc;
 var $181=(($180+24)|0);
 var $182=HEAPF64[(($181)>>3)];
 var $183=$182<1;
 if($183){label=26;break;}else{label=27;break;}
 case 26: 
 var $185=$xc;
 var $186=(($185+72)|0);
 HEAP32[(($186)>>2)]=0;
 label=27;break;
 case 27: 
 var $188=$m;
 var $189=(($188+1280)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$190&4096;
 var $192=($191|0)!=0;
 if($192){label=28;break;}else{label=36;break;}
 case 28: 
 label=29;break;
 case 29: 
 var $195=$xc;
 var $196=(($195+24)|0);
 var $197=HEAPF64[(($196)>>3)];
 var $198=$197<0;
 if($198){label=30;break;}else{label=31;break;}
 case 30: 
 var $200=$xc;
 var $201=(($200+24)|0);
 HEAPF64[(($201)>>3)]=0;
 label=34;break;
 case 31: 
 var $203=$xc;
 var $204=(($203+24)|0);
 var $205=HEAPF64[(($204)>>3)];
 var $206=$205>7680;
 if($206){label=32;break;}else{label=33;break;}
 case 32: 
 var $208=$xc;
 var $209=(($208+24)|0);
 HEAPF64[(($209)>>3)]=7680;
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=44;break;
 case 36: 
 label=37;break;
 case 37: 
 var $215=$xc;
 var $216=(($215+24)|0);
 var $217=HEAPF64[(($216)>>3)];
 var $218=$217<8;
 if($218){label=38;break;}else{label=39;break;}
 case 38: 
 var $220=$xc;
 var $221=(($220+24)|0);
 HEAPF64[(($221)>>3)]=8;
 label=42;break;
 case 39: 
 var $223=$xc;
 var $224=(($223+24)|0);
 var $225=HEAPF64[(($224)>>3)];
 var $226=$225>6847;
 if($226){label=40;break;}else{label=41;break;}
 case 40: 
 var $228=$xc;
 var $229=(($228+24)|0);
 HEAPF64[(($229)>>3)]=6847;
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $234=$xc;
 var $235=(($234+144)|0);
 var $236=(($235+20)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=((($237)+(1))|0);
 HEAP32[(($236)>>2)]=$238;
 var $239=$xc;
 var $240=(($239+144)|0);
 var $241=(($240+16)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=$xc;
 var $244=(($243+144)|0);
 var $245=(($244+20)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(((($246|0))%(($242|0)))&-1);
 HEAP32[(($245)>>2)]=$247;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _update_pan($ctx,$chn,$t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $xc;
 $1=$ctx;
 $2=$chn;
 $3=$t;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$2;
 var $7=$p;
 var $8=(($7+624)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+((($6)*(392))&-1))|0);
 $xc=$10;
 var $11=$xc;
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&2;
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=11;break;}
 case 2: 
 var $17=$3;
 var $18=$p;
 var $19=(($18+16)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(((($17|0))%(($20|0)))&-1);
 var $22=($21|0)==0;
 if($22){label=3;break;}else{label=4;break;}
 case 3: 
 var $24=$xc;
 var $25=(($24+304)|0);
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$xc;
 var $29=(($28+304)|0);
 var $30=(($29)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)+($27))|0);
 HEAP32[(($30)>>2)]=$32;
 label=5;break;
 case 4: 
 var $34=$xc;
 var $35=(($34+304)|0);
 var $36=(($35+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$xc;
 var $39=(($38+304)|0);
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=((($41)+($37))|0);
 HEAP32[(($40)>>2)]=$42;
 label=5;break;
 case 5: 
 var $44=$xc;
 var $45=(($44+304)|0);
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)<0;
 if($48){label=6;break;}else{label=7;break;}
 case 6: 
 var $50=$xc;
 var $51=(($50+304)|0);
 var $52=(($51)|0);
 HEAP32[(($52)>>2)]=0;
 label=10;break;
 case 7: 
 var $54=$xc;
 var $55=(($54+304)|0);
 var $56=(($55)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)>255;
 if($58){label=8;break;}else{label=9;break;}
 case 8: 
 var $60=$xc;
 var $61=(($60+304)|0);
 var $62=(($61)|0);
 HEAP32[(($62)>>2)]=255;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _update_invloop($m,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $xxs;
 var $len;
 $1=$m;
 $2=$xc;
 var $3=$2;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6)|0);
 var $8=(($7+180)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+((($5)*(52))&-1))|0);
 $xxs=$10;
 var $11=$2;
 var $12=(($11+336)|0);
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=((6144+($14<<2))|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$2;
 var $18=(($17+336)|0);
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+($16))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=$xxs;
 var $23=(($22+44)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$24&2;
 var $26=($25|0)!=0;
 if($26){label=2;break;}else{label=11;break;}
 case 2: 
 var $28=$2;
 var $29=(($28+336)|0);
 var $30=(($29+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)>=128;
 if($32){label=3;break;}else{label=11;break;}
 case 3: 
 var $34=$2;
 var $35=(($34+336)|0);
 var $36=(($35+4)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=$xxs;
 var $38=(($37+40)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$xxs;
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($39)-($42))|0);
 $len=$43;
 var $44=$1;
 var $45=(($44+1280)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$46&8;
 var $48=($47|0)!=0;
 if($48){label=4;break;}else{label=5;break;}
 case 4: 
 label=10;break;
 case 5: 
 var $51=$2;
 var $52=(($51+336)|0);
 var $53=(($52+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=((($54)+(1))|0);
 HEAP32[(($53)>>2)]=$55;
 var $56=$len;
 var $57=($55|0)>($56|0);
 if($57){label=6;break;}else{label=7;break;}
 case 6: 
 var $59=$2;
 var $60=(($59+336)|0);
 var $61=(($60+8)|0);
 HEAP32[(($61)>>2)]=0;
 label=7;break;
 case 7: 
 var $63=$xxs;
 var $64=(($63+44)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65^-1;
 var $67=$66&1;
 var $68=($67|0)!=0;
 if($68){label=8;break;}else{label=9;break;}
 case 8: 
 var $70=$xxs;
 var $71=(($70+36)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$2;
 var $74=(($73+336)|0);
 var $75=(($74+8)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=((($72)+($76))|0);
 var $78=$xxs;
 var $79=(($78+48)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+$77)|0);
 var $82=HEAP8[($81)];
 var $83=($82&255);
 var $84=$83^255;
 var $85=(($84)&255);
 HEAP8[($81)]=$85;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_channel_vol($ctx,$chn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $root;
 $2=$ctx;
 $3=$chn;
 var $4=$2;
 var $5=(($4)|0);
 $p=$5;
 var $6=$3;
 var $7=$p;
 var $8=(($7+948)|0);
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($6|0)<($10|0);
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$3;
 var $14=$p;
 var $15=(($14+628)|0);
 var $16=(($15+($13<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 $1=$17;
 label=8;break;
 case 3: 
 var $19=$3;
 var $20=$p;
 var $21=(($20+948)|0);
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($19|0)>=($23|0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=8;break;
 case 5: 
 var $27=$2;
 var $28=$3;
 var $29=_virt_getroot($27,$28);
 $root=$29;
 var $30=$root;
 var $31=($30|0)<0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=8;break;
 case 7: 
 var $34=$root;
 var $35=$p;
 var $36=(($35+628)|0);
 var $37=(($36+($34<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 $1=$38;
 label=8;break;
 case 8: 
 var $40=$1;
 STACKTOP=sp;return $40;
  default: assert(0, "bad label: " + label);
 }
}
function _check_delay($ctx,$e,$chn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $xc;
 $2=$ctx;
 $3=$e;
 $4=$chn;
 var $5=$2;
 var $6=(($5)|0);
 $p=$6;
 var $7=$4;
 var $8=$p;
 var $9=(($8+624)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+((($7)*(392))&-1))|0);
 $xc=$11;
 var $12=$3;
 var $13=(($12+3)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=($15|0)==15;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$3;
 var $19=(($18+4)|0);
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=($21|0)<32;
 if($22){label=4;break;}else{label=3;break;}
 case 3: 
 var $24=$3;
 var $25=(($24+3)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=($27|0)==163;
 if($28){label=4;break;}else{label=7;break;}
 case 4: 
 var $30=$3;
 var $31=(($30+4)|0);
 var $32=HEAP8[($31)];
 var $33=(($32<<24)>>24)!=0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $35=$3;
 var $36=(($35+4)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=$p;
 var $40=(($39+16)|0);
 HEAP32[(($40)>>2)]=$38;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $43=$3;
 var $44=(($43+5)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=($46|0)==15;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=$3;
 var $50=(($49+6)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=($52|0)<32;
 if($53){label=10;break;}else{label=9;break;}
 case 9: 
 var $55=$3;
 var $56=(($55+5)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=($58|0)==163;
 if($59){label=10;break;}else{label=13;break;}
 case 10: 
 var $61=$3;
 var $62=(($61+6)|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24)!=0;
 if($64){label=11;break;}else{label=12;break;}
 case 11: 
 var $66=$3;
 var $67=(($66+6)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=$p;
 var $71=(($70+16)|0);
 HEAP32[(($71)>>2)]=$69;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $74=$3;
 var $75=(($74+3)|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=($77|0)==14;
 if($78){label=14;break;}else{label=18;break;}
 case 14: 
 var $80=$3;
 var $81=(($80+4)|0);
 var $82=HEAP8[($81)];
 var $83=($82&255);
 var $84=$83&240;
 var $85=$84>>4;
 var $86=($85|0)==13;
 if($86){label=15;break;}else{label=18;break;}
 case 15: 
 var $88=$3;
 var $89=(($88+4)|0);
 var $90=HEAP8[($89)];
 var $91=($90&255);
 var $92=$91&15;
 var $93=((($92)+(1))|0);
 var $94=$xc;
 var $95=(($94+56)|0);
 HEAP32[(($95)>>2)]=$93;
 var $96=$3;
 var $97=$xc;
 var $98=(($97+360)|0);
 HEAP32[(($98)>>2)]=$96;
 var $99=$3;
 var $100=(($99+1)|0);
 var $101=HEAP8[($100)];
 var $102=(($101<<24)>>24)!=0;
 if($102){label=16;break;}else{label=17;break;}
 case 16: 
 var $104=$3;
 var $105=(($104+1)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$xc;
 var $109=(($108+364)|0);
 HEAP32[(($109)>>2)]=$107;
 label=17;break;
 case 17: 
 $1=1;
 label=24;break;
 case 18: 
 var $112=$3;
 var $113=(($112+5)|0);
 var $114=HEAP8[($113)];
 var $115=($114&255);
 var $116=($115|0)==14;
 if($116){label=19;break;}else{label=23;break;}
 case 19: 
 var $118=$3;
 var $119=(($118+6)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=$121&240;
 var $123=$122>>4;
 var $124=($123|0)==13;
 if($124){label=20;break;}else{label=23;break;}
 case 20: 
 var $126=$3;
 var $127=(($126+6)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=$129&15;
 var $131=((($130)+(1))|0);
 var $132=$xc;
 var $133=(($132+56)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=$3;
 var $135=$xc;
 var $136=(($135+360)|0);
 HEAP32[(($136)>>2)]=$134;
 var $137=$3;
 var $138=(($137+1)|0);
 var $139=HEAP8[($138)];
 var $140=(($139<<24)>>24)!=0;
 if($140){label=21;break;}else{label=22;break;}
 case 21: 
 var $142=$3;
 var $143=(($142+1)|0);
 var $144=HEAP8[($143)];
 var $145=($144&255);
 var $146=$xc;
 var $147=(($146+364)|0);
 HEAP32[(($147)>>2)]=$145;
 label=22;break;
 case 22: 
 $1=1;
 label=24;break;
 case 23: 
 $1=0;
 label=24;break;
 case 24: 
 var $151=$1;
 STACKTOP=sp;return $151;
  default: assert(0, "bad label: " + label);
 }
}
function _get_sequence($ctx,$ord){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $p;
 $1=$ctx;
 $2=$ord;
 var $3=$1;
 var $4=(($3)|0);
 $p=$4;
 var $5=$2;
 var $6=$p;
 var $7=(($6+56)|0);
 var $8=(($7+$5)|0);
 var $9=HEAP8[($8)];
 var $10=($9&255);
 STACKTOP=sp;return $10;
}
function _scan_sequences($ctx){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $m;
 var $mod;
 var $i;
 var $ep;
 var $seq;
 var $temp_ep=sp;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$1;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6)|0);
 $mod=$7;
 $ep=0;
 var $8=$p;
 var $9=(($8+56)|0);
 var $10=$9;
 _memset($10, -1, 256)|0;
 var $11=(($temp_ep)|0);
 HEAP8[($11)]=0;
 var $12=$1;
 var $13=$ep;
 var $14=_scan_module($12,$13,0);
 var $15=$p;
 var $16=(($15+368)|0);
 var $17=(($16)|0);
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=$14;
 $seq=1;
 label=2;break;
 case 2: 
 $i=0;
 label=3;break;
 case 3: 
 var $21=$i;
 var $22=$mod;
 var $23=(($22+156)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($21|0)<($24|0);
 if($25){label=4;break;}else{label=8;break;}
 case 4: 
 var $27=$i;
 var $28=$p;
 var $29=(($28+56)|0);
 var $30=(($29+$27)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=($32|0)==255;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 var $37=$i;
 var $38=((($37)+(1))|0);
 $i=$38;
 label=3;break;
 case 8: 
 var $40=$i;
 var $41=$mod;
 var $42=(($41+156)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($40|0)!=($43|0);
 if($44){label=9;break;}else{label=13;break;}
 case 9: 
 var $46=$seq;
 var $47=($46|0)<16;
 if($47){label=10;break;}else{label=13;break;}
 case 10: 
 var $49=$i;
 $ep=$49;
 var $50=$ep;
 var $51=(($50)&255);
 var $52=$seq;
 var $53=(($temp_ep+$52)|0);
 HEAP8[($53)]=$51;
 var $54=$1;
 var $55=$ep;
 var $56=$seq;
 var $57=_scan_module($54,$55,$56);
 var $58=$seq;
 var $59=$p;
 var $60=(($59+368)|0);
 var $61=(($60+($58<<4))|0);
 var $62=(($61)|0);
 HEAP32[(($62)>>2)]=$57;
 var $63=$seq;
 var $64=$p;
 var $65=(($64+368)|0);
 var $66=(($65+($63<<4))|0);
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)>0;
 if($69){label=11;break;}else{label=12;break;}
 case 11: 
 var $71=$seq;
 var $72=((($71)+(1))|0);
 $seq=$72;
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 label=15;break;
 case 14: 
 label=2;break;
 case 15: 
 var $77=$seq;
 var $78=$m;
 var $79=(($78+6412)|0);
 HEAP32[(($79)>>2)]=$77;
 $i=0;
 label=16;break;
 case 16: 
 var $81=$i;
 var $82=$m;
 var $83=(($82+6412)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($81|0)<($84|0);
 if($85){label=17;break;}else{label=19;break;}
 case 17: 
 var $87=$i;
 var $88=(($temp_ep+$87)|0);
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=$i;
 var $92=$m;
 var $93=(($92+6416)|0);
 var $94=(($93+($91<<3))|0);
 var $95=(($94)|0);
 HEAP32[(($95)>>2)]=$90;
 var $96=$i;
 var $97=$p;
 var $98=(($97+368)|0);
 var $99=(($98+($96<<4))|0);
 var $100=(($99)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=$i;
 var $103=$m;
 var $104=(($103+6416)|0);
 var $105=(($104+($102<<3))|0);
 var $106=(($105+4)|0);
 HEAP32[(($106)>>2)]=$101;
 label=18;break;
 case 18: 
 var $108=$i;
 var $109=((($108)+(1))|0);
 $i=$109;
 label=16;break;
 case 19: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _scan_module($ctx,$ep,$chain){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $m;
 var $mod;
 var $parm;
 var $gvol_memory;
 var $f1;
 var $f2;
 var $p1;
 var $p2;
 var $ord;
 var $ord2;
 var $row;
 var $last_row;
 var $break_row;
 var $cnt_row;
 var $gvl;
 var $bpm;
 var $speed;
 var $base_time;
 var $chn;
 var $alltmp;
 var $clock;
 var $clock_rst;
 var $loop_chn;
 var $loop_flg;
 var $pdelay;
 var $skip_fetch;
 var $loop_stk=sp;
 var $loop_row=(sp)+(256);
 var $event;
 var $i;
 var $pat;
 var $info;
 var $pat1;
 var $h;
 var $l;
 $2=$ctx;
 $3=$ep;
 $4=$chain;
 var $5=$2;
 var $6=(($5)|0);
 $p=$6;
 var $7=$2;
 var $8=(($7+1552)|0);
 $m=$8;
 var $9=$m;
 var $10=(($9)|0);
 $mod=$10;
 $pdelay=0;
 var $11=$mod;
 var $12=(($11+156)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=198;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $18=$i;
 var $19=$mod;
 var $20=(($19+156)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($18|0)<($21|0);
 if($22){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=$i;
 var $25=$mod;
 var $26=(($25+952)|0);
 var $27=(($26+$24)|0);
 var $28=HEAP8[($27)];
 var $29=($28&255);
 $pat1=$29;
 var $30=$i;
 var $31=$m;
 var $32=(($31+6560)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+($30<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$pat1;
 var $37=$mod;
 var $38=(($37+128)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($36|0)>=($39|0);
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 var $65=1;label=11;break;
 case 7: 
 var $43=$pat1;
 var $44=$mod;
 var $45=(($44+168)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+($43<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)!=0;
 if($51){label=8;break;}else{label=9;break;}
 case 8: 
 var $53=$pat1;
 var $54=$mod;
 var $55=(($54+168)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+($53<<2))|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58)|0);
 var $60=HEAP32[(($59)>>2)];
 var $63=$60;label=10;break;
 case 9: 
 var $63=1;label=10;break;
 case 10: 
 var $63;
 var $65=$63;label=11;break;
 case 11: 
 var $65;
 _memset($35, 0, $65)|0;
 label=12;break;
 case 12: 
 var $67=$i;
 var $68=((($67)+(1))|0);
 $i=$68;
 label=4;break;
 case 13: 
 var $70=$loop_stk;
 var $71=$mod;
 var $72=(($71+136)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73<<2);
 _memset($70, 0, $74)|0;
 var $75=$loop_row;
 var $76=$mod;
 var $77=(($76+136)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($78<<2);
 _memset($75, 0, $79)|0;
 $loop_flg=0;
 $loop_chn=0;
 var $80=$mod;
 var $81=(($80+164)|0);
 var $82=HEAP32[(($81)>>2)];
 $gvl=$82;
 var $83=$mod;
 var $84=(($83+152)|0);
 var $85=HEAP32[(($84)>>2)];
 $bpm=$85;
 var $86=$mod;
 var $87=(($86+148)|0);
 var $88=HEAP32[(($87)>>2)];
 $speed=$88;
 var $89=$m;
 var $90=(($89+1248)|0);
 var $91=HEAPF64[(($90)>>3)];
 var $92=(($91)&-1);
 $base_time=$92;
 $ord2=-1;
 var $93=$3;
 var $94=((($93)-(1))|0);
 $ord=$94;
 $alltmp=0;
 $cnt_row=0;
 $break_row=0;
 $gvol_memory=0;
 $clock=0;
 $clock_rst=0;
 $skip_fetch=0;
 label=14;break;
 case 14: 
 var $96=$ord;
 var $97=((($96)+(1))|0);
 $ord=$97;
 var $98=$mod;
 var $99=(($98+156)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($97>>>0)>=($100>>>0);
 if($101){label=15;break;}else{label=25;break;}
 case 15: 
 var $103=$mod;
 var $104=(($103+160)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$mod;
 var $107=(($106+156)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($105|0)>($108|0);
 if($109){label=17;break;}else{label=16;break;}
 case 16: 
 var $111=$mod;
 var $112=(($111+160)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$mod;
 var $115=(($114+952)|0);
 var $116=(($115+$113)|0);
 var $117=HEAP8[($116)];
 var $118=($117&255);
 var $119=$mod;
 var $120=(($119+128)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($118|0)>=($121|0);
 if($122){label=17;break;}else{label=18;break;}
 case 17: 
 var $124=$4;
 var $125=$m;
 var $126=(($125+6416)|0);
 var $127=(($126+($124<<3))|0);
 var $128=(($127)|0);
 var $129=HEAP32[(($128)>>2)];
 $ord=$129;
 label=22;break;
 case 18: 
 var $131=$2;
 var $132=$mod;
 var $133=(($132+160)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=_get_sequence($131,$134);
 var $136=$4;
 var $137=($135|0)==($136|0);
 if($137){label=19;break;}else{label=20;break;}
 case 19: 
 var $139=$mod;
 var $140=(($139+160)|0);
 var $141=HEAP32[(($140)>>2)];
 $ord=$141;
 label=21;break;
 case 20: 
 var $143=$3;
 $ord=$143;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $146=$ord;
 var $147=$mod;
 var $148=(($147+952)|0);
 var $149=(($148+$146)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 $pat=$151;
 var $152=$pat;
 var $153=($152|0)==255;
 if($153){label=23;break;}else{label=24;break;}
 case 23: 
 label=196;break;
 case 24: 
 label=25;break;
 case 25: 
 var $157=$ord;
 var $158=$mod;
 var $159=(($158+952)|0);
 var $160=(($159+$157)|0);
 var $161=HEAP8[($160)];
 var $162=($161&255);
 $pat=$162;
 var $163=$ord;
 var $164=$m;
 var $165=(($164+1292)|0);
 var $166=(($165+((($163)*(20))&-1))|0);
 $info=$166;
 var $167=$3;
 var $168=($167|0)!=0;
 if($168){label=26;break;}else{label=28;break;}
 case 26: 
 var $170=$ord;
 var $171=$p;
 var $172=(($171+56)|0);
 var $173=(($172+$170)|0);
 var $174=HEAP8[($173)];
 var $175=($174&255);
 var $176=($175|0)!=255;
 if($176){label=27;break;}else{label=28;break;}
 case 27: 
 label=196;break;
 case 28: 
 var $179=$4;
 var $180=(($179)&255);
 var $181=$ord;
 var $182=$p;
 var $183=(($182+56)|0);
 var $184=(($183+$181)|0);
 HEAP8[($184)]=$180;
 var $185=$pat;
 var $186=$mod;
 var $187=(($186+128)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($185|0)>=($188|0);
 if($189){label=29;break;}else{label=32;break;}
 case 29: 
 var $191=$pat;
 var $192=($191|0)==255;
 if($192){label=30;break;}else{label=31;break;}
 case 30: 
 var $194=$mod;
 var $195=(($194+156)|0);
 var $196=HEAP32[(($195)>>2)];
 $ord=$196;
 label=14;break;
 case 31: 
 label=14;break;
 case 32: 
 var $199=$break_row;
 var $200=$pat;
 var $201=$mod;
 var $202=(($201+168)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+($200<<2))|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=($199|0)<($207|0);
 if($208){label=33;break;}else{label=35;break;}
 case 33: 
 var $210=$break_row;
 var $211=$ord;
 var $212=$m;
 var $213=(($212+6560)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+($211<<2))|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+$210)|0);
 var $218=HEAP8[($217)];
 var $219=(($218<<24)>>24);
 var $220=($219|0)!=0;
 if($220){label=34;break;}else{label=35;break;}
 case 34: 
 label=196;break;
 case 35: 
 var $223=$gvl;
 var $224=$info;
 var $225=(($224+8)|0);
 HEAP32[(($225)>>2)]=$223;
 var $226=$bpm;
 var $227=$info;
 var $228=(($227+4)|0);
 HEAP32[(($228)>>2)]=$226;
 var $229=$speed;
 var $230=$info;
 var $231=(($230)|0);
 HEAP32[(($231)>>2)]=$229;
 var $232=$clock;
 var $233=$m;
 var $234=(($233+1256)|0);
 var $235=HEAPF64[(($234)>>3)];
 var $236=$alltmp;
 var $237=($236|0);
 var $238=($235)*($237);
 var $239=$bpm;
 var $240=($239|0);
 var $241=($238)/($240);
 var $242=($232)+($241);
 var $243=(($242)&-1);
 var $244=$info;
 var $245=(($244+12)|0);
 HEAP32[(($245)>>2)]=$243;
 var $246=$info;
 var $247=(($246+16)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248|0)==0;
 if($249){label=36;break;}else{label=40;break;}
 case 36: 
 var $251=$ord;
 var $252=($251|0)!=0;
 if($252){label=37;break;}else{label=40;break;}
 case 37: 
 var $254=$ord;
 var $255=$3;
 var $256=($254|0)==($255|0);
 if($256){label=38;break;}else{label=39;break;}
 case 38: 
 var $258=$clock;
 var $259=$m;
 var $260=(($259+1256)|0);
 var $261=HEAPF64[(($260)>>3)];
 var $262=$alltmp;
 var $263=($262|0);
 var $264=($261)*($263);
 var $265=$bpm;
 var $266=($265|0);
 var $267=($264)/($266);
 var $268=($258)+($267);
 $clock_rst=$268;
 label=39;break;
 case 39: 
 var $270=$break_row;
 var $271=$info;
 var $272=(($271+16)|0);
 HEAP32[(($272)>>2)]=$270;
 label=40;break;
 case 40: 
 var $274=$pat;
 var $275=$mod;
 var $276=(($275+168)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+($274<<2))|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279)|0);
 var $281=HEAP32[(($280)>>2)];
 $last_row=$281;
 var $282=$break_row;
 $row=$282;
 $break_row=0;
 label=41;break;
 case 41: 
 var $284=$row;
 var $285=$last_row;
 var $286=($284|0)<($285|0);
 if($286){label=42;break;}else{label=190;break;}
 case 42: 
 var $288=$bpm;
 var $289=($288|0)<20;
 if($289){label=43;break;}else{label=44;break;}
 case 43: 
 $bpm=20;
 label=44;break;
 case 44: 
 var $292=$cnt_row;
 var $293=($292|0)>512;
 if($293){label=45;break;}else{label=46;break;}
 case 45: 
 label=197;break;
 case 46: 
 var $296=$loop_flg;
 var $297=($296|0)!=0;
 if($297){label=49;break;}else{label=47;break;}
 case 47: 
 var $299=$row;
 var $300=$ord;
 var $301=$m;
 var $302=(($301+6560)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=(($303+($300<<2))|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+$299)|0);
 var $307=HEAP8[($306)];
 var $308=(($307<<24)>>24);
 var $309=($308|0)!=0;
 if($309){label=48;break;}else{label=49;break;}
 case 48: 
 var $311=$cnt_row;
 var $312=((($311)-(1))|0);
 $cnt_row=$312;
 label=197;break;
 case 49: 
 var $314=$row;
 var $315=$ord;
 var $316=$m;
 var $317=(($316+6560)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=(($318+($315<<2))|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320+$314)|0);
 var $322=HEAP8[($321)];
 var $323=((($322)+(1))&255);
 HEAP8[($321)]=$323;
 $pdelay=0;
 $chn=0;
 label=50;break;
 case 50: 
 var $325=$chn;
 var $326=$mod;
 var $327=(($326+136)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=($325|0)<($328|0);
 if($329){label=51;break;}else{label=186;break;}
 case 51: 
 var $331=$row;
 var $332=$chn;
 var $333=$pat;
 var $334=$mod;
 var $335=(($334+168)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+($333<<2))|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=(($338+4)|0);
 var $340=(($339+($332<<2))|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=$mod;
 var $343=(($342+172)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=(($344+($341<<2))|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($346)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=($331|0)>=($348|0);
 if($349){label=52;break;}else{label=53;break;}
 case 52: 
 label=185;break;
 case 53: 
 var $352=$row;
 var $353=$chn;
 var $354=$ord;
 var $355=$mod;
 var $356=(($355+952)|0);
 var $357=(($356+$354)|0);
 var $358=HEAP8[($357)];
 var $359=($358&255);
 var $360=$m;
 var $361=(($360)|0);
 var $362=(($361+168)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(($363+($359<<2))|0);
 var $365=HEAP32[(($364)>>2)];
 var $366=(($365+4)|0);
 var $367=(($366+($353<<2))|0);
 var $368=HEAP32[(($367)>>2)];
 var $369=$m;
 var $370=(($369)|0);
 var $371=(($370+172)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372+($368<<2))|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(($374+4)|0);
 var $376=(($375+($352<<3))|0);
 $event=$376;
 var $377=$skip_fetch;
 var $378=($377|0)!=0;
 if($378){label=54;break;}else{label=55;break;}
 case 54: 
 $p2=0;
 $f2=0;
 $p1=0;
 $f1=0;
 label=56;break;
 case 55: 
 var $381=$event;
 var $382=(($381+3)|0);
 var $383=HEAP8[($382)];
 var $384=($383&255);
 $f1=$384;
 var $385=$event;
 var $386=(($385+4)|0);
 var $387=HEAP8[($386)];
 var $388=($387&255);
 $p1=$388;
 var $389=$event;
 var $390=(($389+5)|0);
 var $391=HEAP8[($390)];
 var $392=($391&255);
 $f2=$392;
 var $393=$event;
 var $394=(($393+6)|0);
 var $395=HEAP8[($394)];
 var $396=($395&255);
 $p2=$396;
 label=56;break;
 case 56: 
 var $398=$f1;
 var $399=($398|0)==16;
 if($399){label=58;break;}else{label=57;break;}
 case 57: 
 var $401=$f2;
 var $402=($401|0)==16;
 if($402){label=58;break;}else{label=68;break;}
 case 58: 
 var $404=$f1;
 var $405=($404|0)==16;
 if($405){label=59;break;}else{label=60;break;}
 case 59: 
 var $407=$p1;
 var $411=$407;label=61;break;
 case 60: 
 var $409=$p2;
 var $411=$409;label=61;break;
 case 61: 
 var $411;
 $gvl=$411;
 var $412=$gvl;
 var $413=$m;
 var $414=(($413+1272)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=($412|0)>($415|0);
 if($416){label=62;break;}else{label=63;break;}
 case 62: 
 var $418=$m;
 var $419=(($418+1272)|0);
 var $420=HEAP32[(($419)>>2)];
 var $430=$420;label=67;break;
 case 63: 
 var $422=$gvl;
 var $423=($422|0)<0;
 if($423){label=64;break;}else{label=65;break;}
 case 64: 
 var $428=0;label=66;break;
 case 65: 
 var $426=$gvl;
 var $428=$426;label=66;break;
 case 66: 
 var $428;
 var $430=$428;label=67;break;
 case 67: 
 var $430;
 $gvl=$430;
 label=68;break;
 case 68: 
 var $432=$f1;
 var $433=($432|0)==17;
 if($433){label=70;break;}else{label=69;break;}
 case 69: 
 var $435=$f2;
 var $436=($435|0)==17;
 if($436){label=70;break;}else{label=97;break;}
 case 70: 
 var $438=$f1;
 var $439=($438|0)==17;
 if($439){label=71;break;}else{label=72;break;}
 case 71: 
 var $441=$p1;
 var $445=$441;label=73;break;
 case 72: 
 var $443=$p2;
 var $445=$443;label=73;break;
 case 73: 
 var $445;
 $parm=$445;
 label=74;break;
 case 74: 
 var $447=$parm;
 var $448=($447|0)!=0;
 if($448){label=75;break;}else{label=93;break;}
 case 75: 
 var $450=$parm;
 $gvol_memory=$450;
 var $451=$parm;
 var $452=$451&240;
 var $453=$452>>4;
 $h=$453;
 var $454=$parm;
 var $455=$454&15;
 $l=$455;
 var $456=$m;
 var $457=(($456+1280)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=$458&32;
 var $460=($459|0)!=0;
 if($460){label=76;break;}else{label=88;break;}
 case 76: 
 var $462=$l;
 var $463=($462|0)==15;
 if($463){label=77;break;}else{label=79;break;}
 case 77: 
 var $465=$h;
 var $466=($465|0)!=0;
 if($466){label=78;break;}else{label=79;break;}
 case 78: 
 var $468=$h;
 var $469=$gvl;
 var $470=((($469)+($468))|0);
 $gvl=$470;
 label=87;break;
 case 79: 
 var $472=$h;
 var $473=($472|0)==15;
 if($473){label=80;break;}else{label=82;break;}
 case 80: 
 var $475=$l;
 var $476=($475|0)!=0;
 if($476){label=81;break;}else{label=82;break;}
 case 81: 
 var $478=$l;
 var $479=$gvl;
 var $480=((($479)-($478))|0);
 $gvl=$480;
 label=86;break;
 case 82: 
 var $482=$m;
 var $483=(($482+1280)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=$484&64;
 var $486=($485|0)!=0;
 if($486){label=83;break;}else{label=84;break;}
 case 83: 
 var $488=$h;
 var $489=$l;
 var $490=((($488)-($489))|0);
 var $491=$speed;
 var $492=(Math_imul($490,$491)|0);
 var $493=$gvl;
 var $494=((($493)+($492))|0);
 $gvl=$494;
 label=85;break;
 case 84: 
 var $496=$h;
 var $497=$l;
 var $498=((($496)-($497))|0);
 var $499=$speed;
 var $500=((($499)-(1))|0);
 var $501=(Math_imul($498,$500)|0);
 var $502=$gvl;
 var $503=((($502)+($501))|0);
 $gvl=$503;
 label=85;break;
 case 85: 
 label=86;break;
 case 86: 
 label=87;break;
 case 87: 
 label=92;break;
 case 88: 
 var $508=$m;
 var $509=(($508+1280)|0);
 var $510=HEAP32[(($509)>>2)];
 var $511=$510&64;
 var $512=($511|0)!=0;
 if($512){label=89;break;}else{label=90;break;}
 case 89: 
 var $514=$h;
 var $515=$l;
 var $516=((($514)-($515))|0);
 var $517=$speed;
 var $518=(Math_imul($516,$517)|0);
 var $519=$gvl;
 var $520=((($519)+($518))|0);
 $gvl=$520;
 label=91;break;
 case 90: 
 var $522=$h;
 var $523=$l;
 var $524=((($522)-($523))|0);
 var $525=$speed;
 var $526=((($525)-(1))|0);
 var $527=(Math_imul($524,$526)|0);
 var $528=$gvl;
 var $529=((($528)+($527))|0);
 $gvl=$529;
 label=91;break;
 case 91: 
 label=92;break;
 case 92: 
 label=96;break;
 case 93: 
 var $533=$gvol_memory;
 $parm=$533;
 var $534=($533|0)!=0;
 if($534){label=94;break;}else{label=95;break;}
 case 94: 
 label=74;break;
 case 95: 
 label=96;break;
 case 96: 
 label=97;break;
 case 97: 
 var $539=$f1;
 var $540=($539|0)==15;
 if($540){label=98;break;}else{label=99;break;}
 case 98: 
 var $542=$p1;
 var $543=($542|0)!=0;
 if($543){label=101;break;}else{label=99;break;}
 case 99: 
 var $545=$f2;
 var $546=($545|0)==15;
 if($546){label=100;break;}else{label=111;break;}
 case 100: 
 var $548=$p2;
 var $549=($548|0)!=0;
 if($549){label=101;break;}else{label=111;break;}
 case 101: 
 var $551=$f1;
 var $552=($551|0)==15;
 if($552){label=102;break;}else{label=103;break;}
 case 102: 
 var $554=$p1;
 var $558=$554;label=104;break;
 case 103: 
 var $556=$p2;
 var $558=$556;label=104;break;
 case 104: 
 var $558;
 $parm=$558;
 var $559=$cnt_row;
 var $560=$speed;
 var $561=(Math_imul($559,$560)|0);
 var $562=$base_time;
 var $563=(Math_imul($561,$562)|0);
 var $564=$alltmp;
 var $565=((($564)+($563))|0);
 $alltmp=$565;
 $cnt_row=0;
 var $566=$parm;
 var $567=($566|0)!=0;
 if($567){label=105;break;}else{label=110;break;}
 case 105: 
 var $569=$p;
 var $570=(($569+28)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=$571&1;
 var $573=($572|0)!=0;
 if($573){label=107;break;}else{label=106;break;}
 case 106: 
 var $575=$parm;
 var $576=($575|0)<32;
 if($576){label=107;break;}else{label=108;break;}
 case 107: 
 var $578=$parm;
 $speed=$578;
 label=109;break;
 case 108: 
 var $580=$m;
 var $581=(($580+1256)|0);
 var $582=HEAPF64[(($581)>>3)];
 var $583=$alltmp;
 var $584=($583|0);
 var $585=($582)*($584);
 var $586=$bpm;
 var $587=($586|0);
 var $588=($585)/($587);
 var $589=$clock;
 var $590=($589)+($588);
 $clock=$590;
 $alltmp=0;
 var $591=$parm;
 $bpm=$591;
 label=109;break;
 case 109: 
 label=110;break;
 case 110: 
 label=111;break;
 case 111: 
 var $595=$f1;
 var $596=($595|0)==126;
 if($596){label=112;break;}else{label=113;break;}
 case 112: 
 $f1=163;
 label=113;break;
 case 113: 
 var $599=$f2;
 var $600=($599|0)==126;
 if($600){label=114;break;}else{label=115;break;}
 case 114: 
 $f2=163;
 label=115;break;
 case 115: 
 var $603=$f1;
 var $604=($603|0)==163;
 if($604){label=116;break;}else{label=117;break;}
 case 116: 
 var $606=$p1;
 var $607=($606|0)!=0;
 if($607){label=119;break;}else{label=117;break;}
 case 117: 
 var $609=$f2;
 var $610=($609|0)==163;
 if($610){label=118;break;}else{label=123;break;}
 case 118: 
 var $612=$p2;
 var $613=($612|0)!=0;
 if($613){label=119;break;}else{label=123;break;}
 case 119: 
 var $615=$f1;
 var $616=($615|0)==163;
 if($616){label=120;break;}else{label=121;break;}
 case 120: 
 var $618=$p1;
 var $622=$618;label=122;break;
 case 121: 
 var $620=$p2;
 var $622=$620;label=122;break;
 case 122: 
 var $622;
 $parm=$622;
 var $623=$cnt_row;
 var $624=$speed;
 var $625=(Math_imul($623,$624)|0);
 var $626=$base_time;
 var $627=(Math_imul($625,$626)|0);
 var $628=$alltmp;
 var $629=((($628)+($627))|0);
 $alltmp=$629;
 $cnt_row=0;
 var $630=$parm;
 $speed=$630;
 label=123;break;
 case 123: 
 var $632=$f1;
 var $633=($632|0)==171;
 if($633){label=124;break;}else{label=125;break;}
 case 124: 
 var $635=$p1;
 var $636=($635|0)!=0;
 if($636){label=127;break;}else{label=125;break;}
 case 125: 
 var $638=$f2;
 var $639=($638|0)==171;
 if($639){label=126;break;}else{label=131;break;}
 case 126: 
 var $641=$p2;
 var $642=($641|0)!=0;
 if($642){label=127;break;}else{label=131;break;}
 case 127: 
 var $644=$f1;
 var $645=($644|0)==171;
 if($645){label=128;break;}else{label=129;break;}
 case 128: 
 var $647=$p1;
 var $651=$647;label=130;break;
 case 129: 
 var $649=$p2;
 var $651=$649;label=130;break;
 case 130: 
 var $651;
 $parm=$651;
 var $652=$cnt_row;
 var $653=$speed;
 var $654=(Math_imul($652,$653)|0);
 var $655=$base_time;
 var $656=(Math_imul($654,$655)|0);
 var $657=$alltmp;
 var $658=((($657)+($656))|0);
 $alltmp=$658;
 $cnt_row=0;
 var $659=$m;
 var $660=(($659+1256)|0);
 var $661=HEAPF64[(($660)>>3)];
 var $662=$alltmp;
 var $663=($662|0);
 var $664=($661)*($663);
 var $665=$bpm;
 var $666=($665|0);
 var $667=($664)/($666);
 var $668=$clock;
 var $669=($668)+($667);
 $clock=$669;
 $alltmp=0;
 var $670=$parm;
 $bpm=$670;
 label=131;break;
 case 131: 
 var $672=$f1;
 var $673=($672|0)==135;
 if($673){label=132;break;}else{label=133;break;}
 case 132: 
 var $675=$p1;
 var $676=($675|0)!=0;
 if($676){label=135;break;}else{label=133;break;}
 case 133: 
 var $678=$f2;
 var $679=($678|0)==135;
 if($679){label=134;break;}else{label=149;break;}
 case 134: 
 var $681=$p2;
 var $682=($681|0)!=0;
 if($682){label=135;break;}else{label=149;break;}
 case 135: 
 var $684=$f1;
 var $685=($684|0)==135;
 if($685){label=136;break;}else{label=137;break;}
 case 136: 
 var $687=$p1;
 var $691=$687;label=138;break;
 case 137: 
 var $689=$p2;
 var $691=$689;label=138;break;
 case 138: 
 var $691;
 $parm=$691;
 var $692=$cnt_row;
 var $693=$speed;
 var $694=(Math_imul($692,$693)|0);
 var $695=$base_time;
 var $696=(Math_imul($694,$695)|0);
 var $697=$alltmp;
 var $698=((($697)+($696))|0);
 $alltmp=$698;
 $cnt_row=0;
 var $699=$m;
 var $700=(($699+1256)|0);
 var $701=HEAPF64[(($700)>>3)];
 var $702=$alltmp;
 var $703=($702|0);
 var $704=($701)*($703);
 var $705=$bpm;
 var $706=($705|0);
 var $707=($704)/($706);
 var $708=$clock;
 var $709=($708)+($707);
 $clock=$709;
 $alltmp=0;
 var $710=$parm;
 var $711=$710&240;
 var $712=$711>>4;
 var $713=($712|0)==0;
 if($713){label=139;break;}else{label=142;break;}
 case 139: 
 var $715=$parm;
 var $716=$715&15;
 var $717=$bpm;
 var $718=((($717)-($716))|0);
 $bpm=$718;
 var $719=$bpm;
 var $720=($719|0)<32;
 if($720){label=140;break;}else{label=141;break;}
 case 140: 
 $bpm=32;
 label=141;break;
 case 141: 
 label=148;break;
 case 142: 
 var $724=$parm;
 var $725=$724&240;
 var $726=$725>>4;
 var $727=($726|0)==1;
 if($727){label=143;break;}else{label=146;break;}
 case 143: 
 var $729=$parm;
 var $730=$729&15;
 var $731=$bpm;
 var $732=((($731)+($730))|0);
 $bpm=$732;
 var $733=$bpm;
 var $734=($733|0)>255;
 if($734){label=144;break;}else{label=145;break;}
 case 144: 
 $bpm=255;
 label=145;break;
 case 145: 
 label=147;break;
 case 146: 
 var $738=$parm;
 $bpm=$738;
 label=147;break;
 case 147: 
 label=148;break;
 case 148: 
 label=149;break;
 case 149: 
 var $742=$f1;
 var $743=($742|0)==11;
 if($743){label=151;break;}else{label=150;break;}
 case 150: 
 var $745=$f2;
 var $746=($745|0)==11;
 if($746){label=151;break;}else{label=155;break;}
 case 151: 
 var $748=$f1;
 var $749=($748|0)==11;
 if($749){label=152;break;}else{label=153;break;}
 case 152: 
 var $751=$p1;
 var $755=$751;label=154;break;
 case 153: 
 var $753=$p2;
 var $755=$753;label=154;break;
 case 154: 
 var $755;
 $ord2=$755;
 $last_row=0;
 label=155;break;
 case 155: 
 var $757=$f1;
 var $758=($757|0)==13;
 if($758){label=157;break;}else{label=156;break;}
 case 156: 
 var $760=$f2;
 var $761=($760|0)==13;
 if($761){label=157;break;}else{label=161;break;}
 case 157: 
 var $763=$f1;
 var $764=($763|0)==13;
 if($764){label=158;break;}else{label=159;break;}
 case 158: 
 var $766=$p1;
 var $770=$766;label=160;break;
 case 159: 
 var $768=$p2;
 var $770=$768;label=160;break;
 case 160: 
 var $770;
 $parm=$770;
 var $771=$parm;
 var $772=$771&240;
 var $773=$772>>4;
 var $774=((($773)*(10))&-1);
 var $775=$parm;
 var $776=$775&15;
 var $777=((($774)+($776))|0);
 $break_row=$777;
 $last_row=0;
 label=161;break;
 case 161: 
 var $779=$f1;
 var $780=($779|0)==14;
 if($780){label=163;break;}else{label=162;break;}
 case 162: 
 var $782=$f2;
 var $783=($782|0)==14;
 if($783){label=163;break;}else{label=184;break;}
 case 163: 
 var $785=$f1;
 var $786=($785|0)==14;
 if($786){label=164;break;}else{label=165;break;}
 case 164: 
 var $788=$p1;
 var $792=$788;label=166;break;
 case 165: 
 var $790=$p2;
 var $792=$790;label=166;break;
 case 166: 
 var $792;
 $parm=$792;
 var $793=$parm;
 var $794=$793>>4;
 var $795=($794|0)==14;
 if($795){label=167;break;}else{label=168;break;}
 case 167: 
 var $797=$parm;
 var $798=$797&15;
 $pdelay=$798;
 var $799=$pdelay;
 var $800=$speed;
 var $801=(Math_imul($799,$800)|0);
 var $802=$base_time;
 var $803=(Math_imul($801,$802)|0);
 var $804=$alltmp;
 var $805=((($804)+($803))|0);
 $alltmp=$805;
 label=168;break;
 case 168: 
 var $807=$parm;
 var $808=$807>>4;
 var $809=($808|0)==6;
 if($809){label=169;break;}else{label=183;break;}
 case 169: 
 var $811=$parm;
 var $812=$811&15;
 $parm=$812;
 var $813=($812|0)!=0;
 if($813){label=170;break;}else{label=181;break;}
 case 170: 
 var $815=$chn;
 var $816=(($loop_stk+($815<<2))|0);
 var $817=HEAP32[(($816)>>2)];
 var $818=($817|0)!=0;
 if($818){label=171;break;}else{label=177;break;}
 case 171: 
 var $820=$chn;
 var $821=(($loop_stk+($820<<2))|0);
 var $822=HEAP32[(($821)>>2)];
 var $823=((($822)-(1))|0);
 HEAP32[(($821)>>2)]=$823;
 var $824=($823|0)!=0;
 if($824){label=172;break;}else{label=173;break;}
 case 172: 
 var $826=$chn;
 var $827=((($826)+(1))|0);
 $loop_chn=$827;
 label=176;break;
 case 173: 
 var $829=$loop_flg;
 var $830=((($829)-(1))|0);
 $loop_flg=$830;
 var $831=$m;
 var $832=(($831+1280)|0);
 var $833=HEAP32[(($832)>>2)];
 var $834=$833&1;
 var $835=($834|0)!=0;
 if($835){label=174;break;}else{label=175;break;}
 case 174: 
 var $837=$row;
 var $838=((($837)+(1))|0);
 var $839=$chn;
 var $840=(($loop_row+($839<<2))|0);
 HEAP32[(($840)>>2)]=$838;
 label=175;break;
 case 175: 
 label=176;break;
 case 176: 
 label=180;break;
 case 177: 
 var $844=$chn;
 var $845=(($loop_row+($844<<2))|0);
 var $846=HEAP32[(($845)>>2)];
 var $847=$row;
 var $848=($846|0)<=($847|0);
 if($848){label=178;break;}else{label=179;break;}
 case 178: 
 var $850=$parm;
 var $851=$chn;
 var $852=(($loop_stk+($851<<2))|0);
 HEAP32[(($852)>>2)]=$850;
 var $853=$chn;
 var $854=((($853)+(1))|0);
 $loop_chn=$854;
 var $855=$loop_flg;
 var $856=((($855)+(1))|0);
 $loop_flg=$856;
 label=179;break;
 case 179: 
 label=180;break;
 case 180: 
 label=182;break;
 case 181: 
 var $860=$row;
 var $861=$chn;
 var $862=(($loop_row+($861<<2))|0);
 HEAP32[(($862)>>2)]=$860;
 label=182;break;
 case 182: 
 label=183;break;
 case 183: 
 label=184;break;
 case 184: 
 label=185;break;
 case 185: 
 var $867=$chn;
 var $868=((($867)+(1))|0);
 $chn=$868;
 label=50;break;
 case 186: 
 $skip_fetch=0;
 var $870=$loop_chn;
 var $871=($870|0)!=0;
 if($871){label=187;break;}else{label=188;break;}
 case 187: 
 var $873=$loop_chn;
 var $874=((($873)-(1))|0);
 $loop_chn=$874;
 var $875=(($loop_row+($874<<2))|0);
 var $876=HEAP32[(($875)>>2)];
 var $877=((($876)-(1))|0);
 $row=$877;
 $loop_chn=0;
 label=188;break;
 case 188: 
 label=189;break;
 case 189: 
 var $880=$row;
 var $881=((($880)+(1))|0);
 $row=$881;
 var $882=$cnt_row;
 var $883=((($882)+(1))|0);
 $cnt_row=$883;
 label=41;break;
 case 190: 
 var $885=$break_row;
 var $886=($885|0)!=0;
 if($886){label=191;break;}else{label=193;break;}
 case 191: 
 var $888=$pdelay;
 var $889=($888|0)!=0;
 if($889){label=192;break;}else{label=193;break;}
 case 192: 
 $skip_fetch=1;
 label=193;break;
 case 193: 
 var $892=$ord2;
 var $893=($892|0)>=0;
 if($893){label=194;break;}else{label=195;break;}
 case 194: 
 var $895=$ord2;
 var $896=((($895)-(1))|0);
 $ord=$896;
 $ord2=-1;
 label=195;break;
 case 195: 
 var $898=$cnt_row;
 var $899=$speed;
 var $900=(Math_imul($898,$899)|0);
 var $901=$base_time;
 var $902=(Math_imul($900,$901)|0);
 var $903=$alltmp;
 var $904=((($903)+($902))|0);
 $alltmp=$904;
 $cnt_row=0;
 label=14;break;
 case 196: 
 var $906=$break_row;
 $row=$906;
 label=197;break;
 case 197: 
 var $908=$row;
 var $909=$ord;
 var $910=$m;
 var $911=(($910+6560)|0);
 var $912=HEAP32[(($911)>>2)];
 var $913=(($912+($909<<2))|0);
 var $914=HEAP32[(($913)>>2)];
 var $915=(($914+$908)|0);
 var $916=HEAP8[($915)];
 var $917=(($916<<24)>>24);
 var $918=$4;
 var $919=$p;
 var $920=(($919+368)|0);
 var $921=(($920+($918<<4))|0);
 var $922=(($921+12)|0);
 HEAP32[(($922)>>2)]=$917;
 var $923=$row;
 var $924=$4;
 var $925=$p;
 var $926=(($925+368)|0);
 var $927=(($926+($924<<4))|0);
 var $928=(($927+8)|0);
 HEAP32[(($928)>>2)]=$923;
 var $929=$ord;
 var $930=$4;
 var $931=$p;
 var $932=(($931+368)|0);
 var $933=(($932+($930<<4))|0);
 var $934=(($933+4)|0);
 HEAP32[(($934)>>2)]=$929;
 var $935=$clock_rst;
 var $936=$clock;
 var $937=($936)-($935);
 $clock=$937;
 var $938=$cnt_row;
 var $939=$speed;
 var $940=(Math_imul($938,$939)|0);
 var $941=$base_time;
 var $942=(Math_imul($940,$941)|0);
 var $943=$alltmp;
 var $944=((($943)+($942))|0);
 $alltmp=$944;
 var $945=$clock;
 var $946=$m;
 var $947=(($946+1256)|0);
 var $948=HEAPF64[(($947)>>3)];
 var $949=$alltmp;
 var $950=($949|0);
 var $951=($948)*($950);
 var $952=$bpm;
 var $953=($952|0);
 var $954=($951)/($953);
 var $955=($945)+($954);
 var $956=(($955)&-1);
 $1=$956;
 label=198;break;
 case 198: 
 var $958=$1;
 STACKTOP=sp;return $958;
  default: assert(0, "bad label: " + label);
 }
}
function _get_instrument($ctx,$ins){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $smix;
 var $m;
 var $mod;
 var $xxi;
 $1=$ctx;
 $2=$ins;
 var $3=$1;
 var $4=(($3+8120)|0);
 $smix=$4;
 var $5=$1;
 var $6=(($5+1552)|0);
 $m=$6;
 var $7=$m;
 var $8=(($7)|0);
 $mod=$8;
 var $9=$2;
 var $10=$mod;
 var $11=(($10+140)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9|0)<($12|0);
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$2;
 var $16=$mod;
 var $17=(($16+176)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+((($15)*(764))&-1))|0);
 $xxi=$19;
 label=7;break;
 case 3: 
 var $21=$2;
 var $22=$mod;
 var $23=(($22+140)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$smix;
 var $26=(($25+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($24)+($27))|0);
 var $29=($21|0)<($28|0);
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=$2;
 var $32=$mod;
 var $33=(($32+140)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=((($31)-($34))|0);
 var $36=$smix;
 var $37=(($36+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+((($35)*(764))&-1))|0);
 $xxi=$39;
 label=6;break;
 case 5: 
 $xxi=0;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $43=$xxi;
 STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _get_sample($ctx,$smp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $smix;
 var $m;
 var $mod;
 var $xxs;
 $1=$ctx;
 $2=$smp;
 var $3=$1;
 var $4=(($3+8120)|0);
 $smix=$4;
 var $5=$1;
 var $6=(($5+1552)|0);
 $m=$6;
 var $7=$m;
 var $8=(($7)|0);
 $mod=$8;
 var $9=$2;
 var $10=$mod;
 var $11=(($10+144)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9|0)<($12|0);
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$2;
 var $16=$mod;
 var $17=(($16+180)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+((($15)*(52))&-1))|0);
 $xxs=$19;
 label=7;break;
 case 3: 
 var $21=$2;
 var $22=$mod;
 var $23=(($22+144)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$smix;
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($24)+($27))|0);
 var $29=($21|0)<($28|0);
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=$2;
 var $32=$mod;
 var $33=(($32+144)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=((($31)-($34))|0);
 var $36=$smix;
 var $37=(($36+16)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+((($35)*(52))&-1))|0);
 $xxs=$39;
 label=6;break;
 case 5: 
 $xxs=0;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $43=$xxs;
 STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _synth_init($ctx,$freq){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$ctx;
 $2=$freq;
 STACKTOP=sp;return 0;
}
function _synth_deinit($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$ctx;
 STACKTOP=sp;return 0;
}
function _synth_reset($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$ctx;
 STACKTOP=sp;return 0;
}
function _virt_getroot($ctx,$chn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $vi;
 var $voc;
 $2=$ctx;
 $3=$chn;
 var $4=$2;
 var $5=(($4)|0);
 $p=$5;
 var $6=$3;
 var $7=$p;
 var $8=(($7+948)|0);
 var $9=(($8+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+($6<<3))|0);
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 $voc=$13;
 var $14=$voc;
 var $15=($14|0)<0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $18=$voc;
 var $19=$p;
 var $20=(($19+948)|0);
 var $21=(($20+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+((($18)*(116))&-1))|0);
 $vi=$23;
 var $24=$vi;
 var $25=(($24+4)|0);
 var $26=HEAP32[(($25)>>2)];
 $1=$26;
 label=4;break;
 case 4: 
 var $28=$1;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_resetvoice($ctx,$voc,$mute){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $vi;
 $1=$ctx;
 $2=$voc;
 $3=$mute;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$2;
 var $7=$p;
 var $8=(($7+948)|0);
 var $9=(($8+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+((($6)*(116))&-1))|0);
 $vi=$11;
 var $12=$2;
 var $13=$p;
 var $14=(($13+948)|0);
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($12>>>0)>=($16>>>0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 label=6;break;
 case 3: 
 var $20=$3;
 var $21=($20|0)!=0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$1;
 var $24=$2;
 _mixer_setvol($23,$24,0);
 label=5;break;
 case 5: 
 var $26=$p;
 var $27=(($26+948)|0);
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(1))|0);
 HEAP32[(($28)>>2)]=$30;
 var $31=$vi;
 var $32=(($31+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$p;
 var $35=(($34+948)|0);
 var $36=(($35+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+($33<<3))|0);
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)-(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=$vi;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$p;
 var $46=(($45+948)|0);
 var $47=(($46+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+($44<<3))|0);
 var $50=(($49+4)|0);
 HEAP32[(($50)>>2)]=-1;
 var $51=$vi;
 var $52=$51;
 _memset($52, 0, 116)|0;
 var $53=$vi;
 var $54=(($53+4)|0);
 HEAP32[(($54)>>2)]=-1;
 var $55=$vi;
 var $56=(($55)|0);
 HEAP32[(($56)>>2)]=-1;
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_on($ctx,$num){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $m;
 var $i;
 $2=$ctx;
 $3=$num;
 var $4=$2;
 var $5=(($4)|0);
 $p=$5;
 var $6=$2;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$3;
 var $9=$p;
 var $10=(($9+948)|0);
 var $11=(($10)|0);
 HEAP32[(($11)>>2)]=$8;
 var $12=$2;
 var $13=_mixer_numvoices($12,-1);
 $3=$13;
 var $14=$p;
 var $15=(($14+948)|0);
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$p;
 var $19=(($18+948)|0);
 var $20=(($19+4)|0);
 HEAP32[(($20)>>2)]=$17;
 var $21=$m;
 var $22=(($21+1280)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23&32768;
 var $25=($24|0)!=0;
 if($25){label=2;break;}else{label=3;break;}
 case 2: 
 var $27=$3;
 var $28=$p;
 var $29=(($28+948)|0);
 var $30=(($29+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)+($27))|0);
 HEAP32[(($30)>>2)]=$32;
 label=6;break;
 case 3: 
 var $34=$3;
 var $35=$p;
 var $36=(($35+948)|0);
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($34|0)>($38|0);
 if($39){label=4;break;}else{label=5;break;}
 case 4: 
 var $41=$p;
 var $42=(($41+948)|0);
 var $43=(($42+4)|0);
 var $44=HEAP32[(($43)>>2)];
 $3=$44;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $47=$2;
 var $48=$3;
 var $49=_mixer_numvoices($47,$48);
 var $50=$p;
 var $51=(($50+948)|0);
 var $52=(($51+12)|0);
 HEAP32[(($52)>>2)]=$49;
 $3=$49;
 var $53=$p;
 var $54=(($53+948)|0);
 var $55=(($54+12)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=_calloc($56,116);
 var $58=$57;
 var $59=$p;
 var $60=(($59+948)|0);
 var $61=(($60+20)|0);
 HEAP32[(($61)>>2)]=$58;
 var $62=$p;
 var $63=(($62+948)|0);
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==0;
 if($66){label=7;break;}else{label=8;break;}
 case 7: 
 label=20;break;
 case 8: 
 $i=0;
 label=9;break;
 case 9: 
 var $70=$i;
 var $71=$p;
 var $72=(($71+948)|0);
 var $73=(($72+12)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($70|0)<($74|0);
 if($75){label=10;break;}else{label=12;break;}
 case 10: 
 var $77=$i;
 var $78=$p;
 var $79=(($78+948)|0);
 var $80=(($79+20)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+((($77)*(116))&-1))|0);
 var $83=(($82)|0);
 HEAP32[(($83)>>2)]=-1;
 var $84=$i;
 var $85=$p;
 var $86=(($85+948)|0);
 var $87=(($86+20)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+((($84)*(116))&-1))|0);
 var $90=(($89+4)|0);
 HEAP32[(($90)>>2)]=-1;
 label=11;break;
 case 11: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=9;break;
 case 12: 
 var $95=$p;
 var $96=(($95+948)|0);
 var $97=(($96+4)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98<<3);
 var $100=_malloc($99);
 var $101=$100;
 var $102=$p;
 var $103=(($102+948)|0);
 var $104=(($103+16)|0);
 HEAP32[(($104)>>2)]=$101;
 var $105=$p;
 var $106=(($105+948)|0);
 var $107=(($106+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108|0)==0;
 if($109){label=13;break;}else{label=14;break;}
 case 13: 
 label=19;break;
 case 14: 
 $i=0;
 label=15;break;
 case 15: 
 var $113=$i;
 var $114=$p;
 var $115=(($114+948)|0);
 var $116=(($115+4)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($113|0)<($117|0);
 if($118){label=16;break;}else{label=18;break;}
 case 16: 
 var $120=$i;
 var $121=$p;
 var $122=(($121+948)|0);
 var $123=(($122+16)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+($120<<3))|0);
 var $126=(($125+4)|0);
 HEAP32[(($126)>>2)]=-1;
 var $127=$i;
 var $128=$p;
 var $129=(($128+948)|0);
 var $130=(($129+16)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+($127<<3))|0);
 var $133=(($132)|0);
 HEAP32[(($133)>>2)]=0;
 label=17;break;
 case 17: 
 var $135=$i;
 var $136=((($135)+(1))|0);
 $i=$136;
 label=15;break;
 case 18: 
 var $138=$p;
 var $139=(($138+948)|0);
 var $140=(($139+8)|0);
 HEAP32[(($140)>>2)]=0;
 $1=0;
 label=21;break;
 case 19: 
 var $142=$p;
 var $143=(($142+948)|0);
 var $144=(($143+20)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=$145;
 _free($146);
 label=20;break;
 case 20: 
 $1=-1;
 label=21;break;
 case 21: 
 var $149=$1;
 STACKTOP=sp;return $149;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_off($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$p;
 var $5=(($4+948)|0);
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)<1;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $11=$p;
 var $12=(($11+948)|0);
 var $13=(($12+12)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=$p;
 var $15=(($14+948)|0);
 var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$p;
 var $18=(($17+948)|0);
 var $19=(($18+4)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=$p;
 var $21=(($20+948)|0);
 var $22=(($21)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=$p;
 var $24=(($23+948)|0);
 var $25=(($24+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$26;
 _free($27);
 var $28=$p;
 var $29=(($28+948)|0);
 var $30=(($29+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31;
 _free($32);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_reset($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $i;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$p;
 var $5=(($4+948)|0);
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)<1;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 label=12;break;
 case 3: 
 var $11=$1;
 var $12=$p;
 var $13=(($12+948)|0);
 var $14=(($13+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=_mixer_numvoices($11,$15);
 var $17=$p;
 var $18=(($17+948)|0);
 var $19=(($18+20)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=$p;
 var $23=(($22+948)|0);
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($25)*(116))&-1);
 _memset($21, 0, $26)|0;
 $i=0;
 label=4;break;
 case 4: 
 var $28=$i;
 var $29=$p;
 var $30=(($29+948)|0);
 var $31=(($30+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($28|0)<($32|0);
 if($33){label=5;break;}else{label=7;break;}
 case 5: 
 var $35=$i;
 var $36=$p;
 var $37=(($36+948)|0);
 var $38=(($37+20)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+((($35)*(116))&-1))|0);
 var $41=(($40)|0);
 HEAP32[(($41)>>2)]=-1;
 var $42=$i;
 var $43=$p;
 var $44=(($43+948)|0);
 var $45=(($44+20)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+((($42)*(116))&-1))|0);
 var $48=(($47+4)|0);
 HEAP32[(($48)>>2)]=-1;
 label=6;break;
 case 6: 
 var $50=$i;
 var $51=((($50)+(1))|0);
 $i=$51;
 label=4;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $54=$i;
 var $55=$p;
 var $56=(($55+948)|0);
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($54|0)<($58|0);
 if($59){label=9;break;}else{label=11;break;}
 case 9: 
 var $61=$i;
 var $62=$p;
 var $63=(($62+948)|0);
 var $64=(($63+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+($61<<3))|0);
 var $67=(($66+4)|0);
 HEAP32[(($67)>>2)]=-1;
 var $68=$i;
 var $69=$p;
 var $70=(($69+948)|0);
 var $71=(($70+16)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+($68<<3))|0);
 var $74=(($73)|0);
 HEAP32[(($74)>>2)]=0;
 label=10;break;
 case 10: 
 var $76=$i;
 var $77=((($76)+(1))|0);
 $i=$77;
 label=8;break;
 case 11: 
 var $79=$p;
 var $80=(($79+948)|0);
 var $81=(($80+8)|0);
 HEAP32[(($81)>>2)]=0;
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_resetchannel($ctx,$chn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $p;
 var $voc;
 $1=$ctx;
 $2=$chn;
 var $3=$1;
 var $4=(($3)|0);
 $p=$4;
 var $5=$p;
 var $6=$2;
 var $7=_map_virt_channel($5,$6);
 $voc=$7;
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $11=$1;
 var $12=$voc;
 _mixer_setvol($11,$12,0);
 var $13=$p;
 var $14=(($13+948)|0);
 var $15=(($14+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=((($16)-(1))|0);
 HEAP32[(($15)>>2)]=$17;
 var $18=$voc;
 var $19=$p;
 var $20=(($19+948)|0);
 var $21=(($20+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+((($18)*(116))&-1))|0);
 var $24=(($23+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$p;
 var $27=(($26+948)|0);
 var $28=(($27+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+($25<<3))|0);
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)-(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=$2;
 var $35=$p;
 var $36=(($35+948)|0);
 var $37=(($36+16)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+($34<<3))|0);
 var $40=(($39+4)|0);
 HEAP32[(($40)>>2)]=-1;
 var $41=$voc;
 var $42=$p;
 var $43=(($42+948)|0);
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+((($41)*(116))&-1))|0);
 var $47=$46;
 _memset($47, 0, 116)|0;
 var $48=$voc;
 var $49=$p;
 var $50=(($49+948)|0);
 var $51=(($50+20)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+((($48)*(116))&-1))|0);
 var $54=(($53+4)|0);
 HEAP32[(($54)>>2)]=-1;
 var $55=$voc;
 var $56=$p;
 var $57=(($56+948)|0);
 var $58=(($57+20)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+((($55)*(116))&-1))|0);
 var $61=(($60)|0);
 HEAP32[(($61)>>2)]=-1;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _map_virt_channel($p,$chn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $voc;
 $2=$p;
 $3=$chn;
 var $4=$3;
 var $5=$2;
 var $6=(($5+948)|0);
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($4>>>0)>=($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $12=$3;
 var $13=$2;
 var $14=(($13+948)|0);
 var $15=(($14+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+($12<<3))|0);
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 $voc=$19;
 var $20=$voc;
 var $21=$2;
 var $22=(($21+948)|0);
 var $23=(($22+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20>>>0)>=($24>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $28=$voc;
 $1=$28;
 label=6;break;
 case 6: 
 var $30=$1;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_setvol($ctx,$chn,$vol){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $voc;
 var $root;
 $1=$ctx;
 $2=$chn;
 $3=$vol;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$p;
 var $7=$2;
 var $8=_map_virt_channel($6,$7);
 $voc=$8;
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 label=9;break;
 case 3: 
 var $12=$voc;
 var $13=$p;
 var $14=(($13+948)|0);
 var $15=(($14+20)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+((($12)*(116))&-1))|0);
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 $root=$19;
 var $20=$root;
 var $21=($20|0)<64;
 if($21){label=4;break;}else{label=6;break;}
 case 4: 
 var $23=$root;
 var $24=$p;
 var $25=(($24+884)|0);
 var $26=(($25+$23)|0);
 var $27=HEAP8[($26)];
 var $28=(($27<<24)>>24);
 var $29=($28|0)!=0;
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 $3=0;
 label=6;break;
 case 6: 
 var $32=$1;
 var $33=$voc;
 var $34=$3;
 _mixer_setvol($32,$33,$34);
 var $35=$3;
 var $36=($35|0)!=0;
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$2;
 var $39=$p;
 var $40=(($39+948)|0);
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($38|0)<($42|0);
 if($43){label=9;break;}else{label=8;break;}
 case 8: 
 var $45=$1;
 var $46=$voc;
 _virt_resetvoice($45,$46,1);
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_setpan($ctx,$chn,$pan){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $voc;
 $1=$ctx;
 $2=$chn;
 $3=$pan;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$p;
 var $7=$2;
 var $8=_map_virt_channel($6,$7);
 $voc=$8;
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $12=$1;
 var $13=$voc;
 var $14=$3;
 _mixer_setpan($12,$13,$14);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_seteffect($ctx,$chn,$type,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $voc;
 $1=$ctx;
 $2=$chn;
 $3=$type;
 $4=$val;
 var $5=$1;
 var $6=(($5)|0);
 $p=$6;
 var $7=$p;
 var $8=$2;
 var $9=_map_virt_channel($7,$8);
 $voc=$9;
 var $10=($9|0)<0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $13=$1;
 var $14=$voc;
 var $15=$3;
 var $16=$4;
 _mixer_seteffect($13,$14,$15,$16);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_getvoicepos($ctx,$chn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $voc;
 $2=$ctx;
 $3=$chn;
 var $4=$2;
 var $5=(($4)|0);
 $p=$5;
 var $6=$p;
 var $7=$3;
 var $8=_map_virt_channel($6,$7);
 $voc=$8;
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $12=$2;
 var $13=$voc;
 var $14=_mixer_getvoicepos($12,$13);
 $1=$14;
 label=4;break;
 case 4: 
 var $16=$1;
 STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_setsmp($ctx,$chn,$smp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $vi;
 var $voc;
 var $pos;
 var $frac;
 $1=$ctx;
 $2=$chn;
 $3=$smp;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$p;
 var $7=$2;
 var $8=_map_virt_channel($6,$7);
 $voc=$8;
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 label=6;break;
 case 3: 
 var $12=$voc;
 var $13=$p;
 var $14=(($13+948)|0);
 var $15=(($14+20)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+((($12)*(116))&-1))|0);
 $vi=$17;
 var $18=$vi;
 var $19=(($18+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$3;
 var $22=($20|0)==($21|0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $25=$vi;
 var $26=(($25+28)|0);
 var $27=HEAP32[(($26)>>2)];
 $pos=$27;
 var $28=$vi;
 var $29=(($28+36)|0);
 var $30=HEAP32[(($29)>>2)];
 $frac=$30;
 var $31=$1;
 var $32=$voc;
 var $33=$3;
 _mixer_setpatch($31,$32,$33);
 var $34=$1;
 var $35=$voc;
 var $36=$pos;
 var $37=$frac;
 _mixer_voicepos($34,$35,$36,$37);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_setbend($ctx,$chn,$bend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $voc;
 $1=$ctx;
 $2=$chn;
 $3=$bend;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$p;
 var $7=$2;
 var $8=_map_virt_channel($6,$7);
 $voc=$8;
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $12=$1;
 var $13=$voc;
 var $14=$3;
 _mixer_setbend($12,$13,$14);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_voicepos($ctx,$chn,$pos){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $voc;
 $1=$ctx;
 $2=$chn;
 $3=$pos;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$p;
 var $7=$2;
 var $8=_map_virt_channel($6,$7);
 $voc=$8;
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $12=$1;
 var $13=$voc;
 var $14=$3;
 _mixer_voicepos($12,$13,$14,0);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _virt_cstat($ctx,$chn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $voc;
 $2=$ctx;
 $3=$chn;
 var $4=$2;
 var $5=(($4)|0);
 $p=$5;
 var $6=$p;
 var $7=$3;
 var $8=_map_virt_channel($6,$7);
 $voc=$8;
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $12=$3;
 var $13=$p;
 var $14=(($13+948)|0);
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($12|0)<($16|0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 $1=256;
 label=6;break;
 case 5: 
 var $20=$voc;
 var $21=$p;
 var $22=(($21+948)|0);
 var $23=(($22+20)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+((($20)*(116))&-1))|0);
 var $26=(($25+56)|0);
 var $27=HEAP32[(($26)>>2)];
 $1=$27;
 label=6;break;
 case 6: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _synth_init731($ctx,$freq){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$ctx;
 $3=$freq;
 var $4=_adlib_new();
 var $5=$4;
 var $6=$2;
 var $7=(($6+1552)|0);
 var $8=(($7+6556)|0);
 HEAP32[(($8)>>2)]=$5;
 var $9=$2;
 var $10=(($9+1552)|0);
 var $11=(($10+6556)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $16=$2;
 _synth_chreset($16);
 var $17=$3;
 var $18=_OPLCreate(8,3579545,$17);
 var $19=$2;
 var $20=(($19+1552)|0);
 var $21=(($20+6556)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=(($23)|0);
 HEAP32[(($24)>>2)]=$18;
 var $25=($18|0)!=0;
 var $26=($25&1);
 $1=$26;
 label=4;break;
 case 4: 
 var $28=$1;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _synth_deinit732($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 $1=$ctx;
 var $2=$1;
 var $3=(($2+1552)|0);
 var $4=(($3+6556)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 $a=$6;
 var $7=$1;
 var $8=_synth_reset733($7);
 var $9=$a;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 _OPLDestroy($11);
 var $12=$a;
 _adlib_destroy($12);
 STACKTOP=sp;return 0;
}
function _synth_reset733($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 $1=$ctx;
 var $2=$1;
 var $3=(($2+1552)|0);
 var $4=(($3+6556)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 $a=$6;
 var $7=$a;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 _OPLResetChip($9);
 var $10=$1;
 _synth_chreset($10);
 STACKTOP=sp;return 0;
}
function _synth_setpatch($ctx,$c,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a;
 var $i;
 var $x;
 $1=$ctx;
 $2=$c;
 $3=$data;
 var $4=$1;
 var $5=(($4+1552)|0);
 var $6=(($5+6556)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 $a=$8;
 var $9=$1;
 var $10=$2;
 var $11=_synth_getchannel($9,$10);
 $2=$11;
 var $12=($11|0)<0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $16=$i;
 var $17=($16|0)<10;
 if($17){label=5;break;}else{label=7;break;}
 case 5: 
 var $19=$a;
 var $20=$i;
 var $21=((3016+($20<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$2;
 var $24=$i;
 var $25=(((($24|0))%(2))&-1);
 var $26=((2944+((($25)*(36))&-1))|0);
 var $27=(($26+($23<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($22)+($28))|0);
 var $30=$i;
 var $31=$3;
 var $32=(($31+$30)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=_opl_write($19,$29,$34);
 label=6;break;
 case 6: 
 var $37=$i;
 var $38=((($37)+(1))|0);
 $i=$38;
 label=4;break;
 case 7: 
 var $40=$a;
 var $41=HEAP32[((3056)>>2)];
 var $42=$2;
 var $43=((($41)+($42))|0);
 var $44=$3;
 var $45=(($44+10)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=_opl_write($40,$43,$47);
 var $49=$a;
 var $50=$2;
 var $51=((($50)+(176))|0);
 var $52=_opl_read($49,$51);
 var $53=($52&255);
 $x=$53;
 var $54=$a;
 var $55=$2;
 var $56=((($55)+(176))|0);
 var $57=$x;
 var $58=$57&-33;
 var $59=_opl_write($54,$56,$58);
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _synth_setnote($ctx,$c,$note,$bend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $a;
 var $n;
 var $f;
 var $o;
 $1=$ctx;
 $2=$c;
 $3=$note;
 $4=$bend;
 var $5=$1;
 var $6=(($5+1552)|0);
 var $7=(($6+6556)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 $a=$9;
 var $10=$1;
 var $11=$2;
 var $12=_synth_getchannel($10,$11);
 $2=$12;
 var $13=($12|0)<0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 label=6;break;
 case 3: 
 var $16=$3;
 var $17=(((($16|0))%(12))&-1);
 $n=$17;
 var $18=$n;
 var $19=((8+($18<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$n;
 var $22=((($21)+(1))|0);
 var $23=((8+($22<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$n;
 var $26=((8+($25<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($24)-($27))|0);
 var $29=$4;
 var $30=(Math_imul($28,$29)|0);
 var $31=(((($30|0))/(100))&-1);
 var $32=((($20)+($31))|0);
 $f=$32;
 var $33=$3;
 var $34=(((($33|0))/(12))&-1);
 var $35=((($34)-(2))|0);
 $o=$35;
 var $36=$o;
 var $37=($36|0)<0;
 if($37){label=4;break;}else{label=5;break;}
 case 4: 
 $o=0;
 label=5;break;
 case 5: 
 var $40=$a;
 var $41=$2;
 var $42=((($41)+(160))|0);
 var $43=$f;
 var $44=$43&255;
 var $45=_opl_write($40,$42,$44);
 var $46=$a;
 var $47=$2;
 var $48=((($47)+(176))|0);
 var $49=$o;
 var $50=$49<<2;
 var $51=$50&28;
 var $52=32|$51;
 var $53=$f;
 var $54=$53>>8;
 var $55=$54&3;
 var $56=$52|$55;
 var $57=_opl_write($46,$48,$56);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _synth_setvol($ctx,$c,$vol){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a;
 var $b;
 var $ofs;
 $1=$ctx;
 $2=$c;
 $3=$vol;
 var $4=$1;
 var $5=(($4+1552)|0);
 var $6=(($5+6556)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 $a=$8;
 var $9=$1;
 var $10=$2;
 var $11=_synth_getchannel($9,$10);
 $2=$11;
 var $12=($11|0)<0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 var $15=$3;
 var $16=($15|0)>63;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $3=63;
 label=5;break;
 case 5: 
 var $19=$a;
 var $20=$2;
 var $21=((($20)+(200))|0);
 var $22=_opl_read($19,$21);
 var $23=(($22<<24)>>24)!=0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$2;
 var $26=((2944+($25<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 $ofs=$27;
 var $28=$a;
 var $29=$ofs;
 var $30=((($29)+(64))|0);
 var $31=_opl_read($28,$30);
 var $32=($31&255);
 $b=$32;
 var $33=$a;
 var $34=$ofs;
 var $35=((($34)+(64))|0);
 var $36=$b;
 var $37=$36&192;
 var $38=$3;
 var $39=(((63)-($38))|0);
 var $40=$37|$39;
 var $41=_opl_write($33,$35,$40);
 label=7;break;
 case 7: 
 var $43=$2;
 var $44=((2980+($43<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 $ofs=$45;
 var $46=$a;
 var $47=$ofs;
 var $48=((($47)+(64))|0);
 var $49=_opl_read($46,$48);
 var $50=($49&255);
 $b=$50;
 var $51=$a;
 var $52=$ofs;
 var $53=((($52)+(64))|0);
 var $54=$b;
 var $55=$54&192;
 var $56=$3;
 var $57=(((63)-($56))|0);
 var $58=$55|$57;
 var $59=_opl_write($51,$53,$58);
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _synth_mixer($ctx,$tmp_bk,$count,$vl,$vr,$stereo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $a;
 $1=$ctx;
 $2=$tmp_bk;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$stereo;
 var $7=$1;
 var $8=(($7+1552)|0);
 var $9=(($8+6556)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 $a=$11;
 var $12=$2;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $16=$a;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$2;
 var $20=$3;
 var $21=$4;
 var $22=$5;
 var $23=$6;
 _YM3812UpdateOne($18,$19,$20,$21,$22,$23);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _synth_getchannel($ctx,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a;
 var $i;
 var $freech;
 $2=$ctx;
 $3=$c;
 var $4=$2;
 var $5=(($4+1552)|0);
 var $6=(($5+6556)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 $a=$8;
 $freech=-1;
 var $9=$3;
 var $10=((($9)+(1))|0);
 $3=$10;
 $i=0;
 label=2;break;
 case 2: 
 var $12=$i;
 var $13=($12|0)<9;
 if($13){label=3;break;}else{label=9;break;}
 case 3: 
 var $15=$i;
 var $16=$a;
 var $17=(($16+4)|0);
 var $18=(($17+($15<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$3;
 var $21=($19|0)==($20|0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$i;
 $1=$23;
 label=12;break;
 case 5: 
 var $25=$i;
 var $26=$a;
 var $27=(($26+4)|0);
 var $28=(($27+($25<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)<0;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 var $32=$i;
 $freech=$32;
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $35=$i;
 var $36=((($35)+(1))|0);
 $i=$36;
 label=2;break;
 case 9: 
 var $38=$freech;
 var $39=($38|0)!=-1;
 if($39){label=10;break;}else{label=11;break;}
 case 10: 
 var $41=$3;
 var $42=$freech;
 var $43=$a;
 var $44=(($43+4)|0);
 var $45=(($44+($42<<2))|0);
 HEAP32[(($45)>>2)]=$41;
 label=11;break;
 case 11: 
 var $47=$freech;
 $1=$47;
 label=12;break;
 case 12: 
 var $49=$1;
 STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }
}
function _opl_read($a,$addr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$a;
 $2=$addr;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=_OPLWrite($5,0,$6);
 var $8=$1;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_OPLRead($10,1);
 STACKTOP=sp;return $11;
}
function _opl_write($a,$addr,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$a;
 $2=$addr;
 $3=$val;
 var $4=$1;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=_OPLWrite($6,0,$7);
 var $9=$1;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$3;
 var $13=_OPLWrite($11,1,$12);
 STACKTOP=sp;return $13;
}
function _synth_chreset($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $a;
 var $i;
 $1=$ctx;
 var $2=$1;
 var $3=(($2+1552)|0);
 var $4=(($3+6556)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 $a=$6;
 $i=0;
 label=2;break;
 case 2: 
 var $8=$i;
 var $9=($8|0)<9;
 if($9){label=3;break;}else{label=5;break;}
 case 3: 
 var $11=$i;
 var $12=$a;
 var $13=(($12+4)|0);
 var $14=(($13+($11<<2))|0);
 HEAP32[(($14)>>2)]=-1;
 label=4;break;
 case 4: 
 var $16=$i;
 var $17=((($16)+(1))|0);
 $i=$17;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _adlib_destroy($a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$a;
 var $2=$1;
 var $3=$2;
 _free($3);
 STACKTOP=sp;return;
}
function _adlib_new(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $a;
 var $i;
 var $2=_malloc(40);
 var $3=$2;
 $a=$3;
 var $4=$a;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $9=$i;
 var $10=($9|0)<9;
 if($10){label=5;break;}else{label=7;break;}
 case 5: 
 var $12=$i;
 var $13=$a;
 var $14=(($13+4)|0);
 var $15=(($14+($12<<2))|0);
 HEAP32[(($15)>>2)]=-1;
 label=6;break;
 case 6: 
 var $17=$i;
 var $18=((($17)+(1))|0);
 $i=$18;
 label=4;break;
 case 7: 
 var $20=$a;
 $1=$20;
 label=8;break;
 case 8: 
 var $22=$1;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }
}
function _read8($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$f;
 var $2=$1;
 var $3=_fgetc($2);
 var $4=(($3)&255);
 STACKTOP=sp;return $4;
}
function _read8s($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$f;
 var $2=$1;
 var $3=_fgetc($2);
 var $4=(($3)&255);
 STACKTOP=sp;return $4;
}
function _read16l($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 $1=$f;
 var $2=$1;
 var $3=_read8($2);
 var $4=($3&255);
 $a=$4;
 var $5=$1;
 var $6=_read8($5);
 var $7=($6&255);
 $b=$7;
 var $8=$b;
 var $9=$8<<8;
 var $10=$a;
 var $11=$9|$10;
 var $12=(($11)&65535);
 STACKTOP=sp;return $12;
}
function _read16b($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 $1=$f;
 var $2=$1;
 var $3=_read8($2);
 var $4=($3&255);
 $a=$4;
 var $5=$1;
 var $6=_read8($5);
 var $7=($6&255);
 $b=$7;
 var $8=$a;
 var $9=$8<<8;
 var $10=$b;
 var $11=$9|$10;
 var $12=(($11)&65535);
 STACKTOP=sp;return $12;
}
function _read24l($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 $1=$f;
 var $2=$1;
 var $3=_read8($2);
 var $4=($3&255);
 $a=$4;
 var $5=$1;
 var $6=_read8($5);
 var $7=($6&255);
 $b=$7;
 var $8=$1;
 var $9=_read8($8);
 var $10=($9&255);
 $c=$10;
 var $11=$c;
 var $12=$11<<16;
 var $13=$b;
 var $14=$13<<8;
 var $15=$12|$14;
 var $16=$a;
 var $17=$15|$16;
 STACKTOP=sp;return $17;
}
function _read24b($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 $1=$f;
 var $2=$1;
 var $3=_read8($2);
 var $4=($3&255);
 $a=$4;
 var $5=$1;
 var $6=_read8($5);
 var $7=($6&255);
 $b=$7;
 var $8=$1;
 var $9=_read8($8);
 var $10=($9&255);
 $c=$10;
 var $11=$a;
 var $12=$11<<16;
 var $13=$b;
 var $14=$13<<8;
 var $15=$12|$14;
 var $16=$c;
 var $17=$15|$16;
 STACKTOP=sp;return $17;
}
function _read32l($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 var $d;
 $1=$f;
 var $2=$1;
 var $3=_read8($2);
 var $4=($3&255);
 $a=$4;
 var $5=$1;
 var $6=_read8($5);
 var $7=($6&255);
 $b=$7;
 var $8=$1;
 var $9=_read8($8);
 var $10=($9&255);
 $c=$10;
 var $11=$1;
 var $12=_read8($11);
 var $13=($12&255);
 $d=$13;
 var $14=$d;
 var $15=$14<<24;
 var $16=$c;
 var $17=$16<<16;
 var $18=$15|$17;
 var $19=$b;
 var $20=$19<<8;
 var $21=$18|$20;
 var $22=$a;
 var $23=$21|$22;
 STACKTOP=sp;return $23;
}
function _read32b($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 var $d;
 $1=$f;
 var $2=$1;
 var $3=_read8($2);
 var $4=($3&255);
 $a=$4;
 var $5=$1;
 var $6=_read8($5);
 var $7=($6&255);
 $b=$7;
 var $8=$1;
 var $9=_read8($8);
 var $10=($9&255);
 $c=$10;
 var $11=$1;
 var $12=_read8($11);
 var $13=($12&255);
 $d=$13;
 var $14=$a;
 var $15=$14<<24;
 var $16=$b;
 var $17=$16<<16;
 var $18=$15|$17;
 var $19=$c;
 var $20=$19<<8;
 var $21=$18|$20;
 var $22=$d;
 var $23=$21|$22;
 STACKTOP=sp;return $23;
}
function _write8($f,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$b;
 var $3=$2;
 var $4=($3&255);
 var $5=$1;
 var $6=_fputc($4,$5);
 STACKTOP=sp;return;
}
function _write16l($f,$w){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$w;
 var $3=$1;
 var $4=$2;
 var $5=($4&65535);
 var $6=$5&255;
 var $7=(($6)&255);
 _write8($3,$7);
 var $8=$1;
 var $9=$2;
 var $10=($9&65535);
 var $11=$10&65280;
 var $12=$11>>8;
 var $13=(($12)&255);
 _write8($8,$13);
 STACKTOP=sp;return;
}
function _write16b($f,$w){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$w;
 var $3=$1;
 var $4=$2;
 var $5=($4&65535);
 var $6=$5&65280;
 var $7=$6>>8;
 var $8=(($7)&255);
 _write8($3,$8);
 var $9=$1;
 var $10=$2;
 var $11=($10&65535);
 var $12=$11&255;
 var $13=(($12)&255);
 _write8($9,$13);
 STACKTOP=sp;return;
}
function _write32l($f,$w){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$w;
 var $3=$1;
 var $4=$2;
 var $5=$4&255;
 var $6=(($5)&255);
 _write8($3,$6);
 var $7=$1;
 var $8=$2;
 var $9=$8&65280;
 var $10=$9>>>8;
 var $11=(($10)&255);
 _write8($7,$11);
 var $12=$1;
 var $13=$2;
 var $14=$13&16711680;
 var $15=$14>>>16;
 var $16=(($15)&255);
 _write8($12,$16);
 var $17=$1;
 var $18=$2;
 var $19=$18&-16777216;
 var $20=$19>>>24;
 var $21=(($20)&255);
 _write8($17,$21);
 STACKTOP=sp;return;
}
function _write32b($f,$w){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$w;
 var $3=$1;
 var $4=$2;
 var $5=$4&-16777216;
 var $6=$5>>>24;
 var $7=(($6)&255);
 _write8($3,$7);
 var $8=$1;
 var $9=$2;
 var $10=$9&16711680;
 var $11=$10>>>16;
 var $12=(($11)&255);
 _write8($8,$12);
 var $13=$1;
 var $14=$2;
 var $15=$14&65280;
 var $16=$15>>>8;
 var $17=(($16)&255);
 _write8($13,$17);
 var $18=$1;
 var $19=$2;
 var $20=$19&255;
 var $21=(($20)&255);
 _write8($18,$21);
 STACKTOP=sp;return;
}
function _readmem16l($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 $1=$m;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 $b=$9;
 var $10=$b;
 var $11=$10<<8;
 var $12=$a;
 var $13=$11|$12;
 var $14=(($13)&65535);
 STACKTOP=sp;return $14;
}
function _readmem16b($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 $1=$m;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 $b=$9;
 var $10=$a;
 var $11=$10<<8;
 var $12=$b;
 var $13=$11|$12;
 var $14=(($13)&65535);
 STACKTOP=sp;return $14;
}
function _readmem24l($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 $1=$m;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 $b=$9;
 var $10=$1;
 var $11=(($10+2)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 $c=$13;
 var $14=$c;
 var $15=$14<<16;
 var $16=$b;
 var $17=$16<<8;
 var $18=$15|$17;
 var $19=$a;
 var $20=$18|$19;
 STACKTOP=sp;return $20;
}
function _readmem24b($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 $1=$m;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 $b=$9;
 var $10=$1;
 var $11=(($10+2)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 $c=$13;
 var $14=$a;
 var $15=$14<<16;
 var $16=$b;
 var $17=$16<<8;
 var $18=$15|$17;
 var $19=$c;
 var $20=$18|$19;
 STACKTOP=sp;return $20;
}
function _readmem32l($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 var $d;
 $1=$m;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 $b=$9;
 var $10=$1;
 var $11=(($10+2)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 $c=$13;
 var $14=$1;
 var $15=(($14+3)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 $d=$17;
 var $18=$d;
 var $19=$18<<24;
 var $20=$c;
 var $21=$20<<16;
 var $22=$19|$21;
 var $23=$b;
 var $24=$23<<8;
 var $25=$22|$24;
 var $26=$a;
 var $27=$25|$26;
 STACKTOP=sp;return $27;
}
function _readmem32b($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $a;
 var $b;
 var $c;
 var $d;
 $1=$m;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 $a=$5;
 var $6=$1;
 var $7=(($6+1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 $b=$9;
 var $10=$1;
 var $11=(($10+2)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 $c=$13;
 var $14=$1;
 var $15=(($14+3)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 $d=$17;
 var $18=$a;
 var $19=$18<<24;
 var $20=$b;
 var $21=$20<<16;
 var $22=$19|$21;
 var $23=$c;
 var $24=$23<<8;
 var $25=$22|$24;
 var $26=$d;
 var $27=$25|$26;
 STACKTOP=sp;return $27;
}
function _move_data($out,$in,$len){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 var $l;
 $1=$out;
 $2=$in;
 $3=$len;
 label=2;break;
 case 2: 
 var $5=(($buf)|0);
 var $6=$3;
 var $7=($6|0)>1024;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=1024;label=5;break;
 case 4: 
 var $10=$3;
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 var $13=$2;
 var $14=_fread($5,1,$12,$13);
 $l=$14;
 var $15=(($buf)|0);
 var $16=$l;
 var $17=$1;
 var $18=_fwrite($15,1,$16,$17);
 var $19=$l;
 var $20=$3;
 var $21=((($20)-($19))|0);
 $3=$21;
 label=6;break;
 case 6: 
 var $23=$l;
 var $24=($23|0)>0;
 if($24){label=7;break;}else{var $29=0;label=8;break;}
 case 7: 
 var $26=$3;
 var $27=($26|0)>0;
 var $29=$27;label=8;break;
 case 8: 
 var $29;
 if($29){label=2;break;}else{label=9;break;}
 case 9: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_arcfs($f,$fo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ret;
 $2=$f;
 $3=$fo;
 var $4=$3;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $8=$2;
 var $9=$3;
 var $10=_arcfs_extract($8,$9);
 $ret=$10;
 var $11=$ret;
 var $12=($11|0)<0;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $16=$1;
 STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _arcfs_extract($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $hdr=sp;
 var $data;
 var $orig_data;
 var $exitval;
 $2=$in;
 $3=$out;
 $exitval=0;
 var $4=$2;
 var $5=_read_file_header($4,$hdr);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 $1=-1;
 label=20;break;
 case 3: 
 var $9=(($hdr)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=($11|0)==0;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=20;break;
 case 5: 
 var $15=$2;
 var $16=_read_file_data($15,$hdr);
 $data=$16;
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=20;break;
 case 7: 
 $orig_data=0;
 var $20=(($hdr)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 if(($22|0)==9){ label=10;break;}else if(($22|0)==127){ label=11;break;}else if(($22|0)==2){ label=8;break;}else if(($22|0)==8){ label=9;break;}else{label=12;break;}
 case 8: 
 var $24=$data;
 $orig_data=$24;
 label=13;break;
 case 9: 
 var $26=$data;
 var $27=(($hdr+1)|0);
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=(($hdr+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($hdr+32)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=_convert_lzw_dynamic($26,$29,1,$31,$33,0);
 $orig_data=$34;
 label=13;break;
 case 10: 
 var $36=$data;
 var $37=(($hdr+1)|0);
 var $38=HEAP8[($37)];
 var $39=($38&255);
 var $40=(($hdr+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($hdr+32)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=_convert_lzw_dynamic($36,$39,0,$41,$43,0);
 $orig_data=$44;
 label=13;break;
 case 11: 
 var $46=$data;
 var $47=(($hdr+1)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=(($hdr+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($hdr+32)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=_convert_lzw_dynamic($46,$49,0,$51,$53,0);
 $orig_data=$54;
 label=13;break;
 case 12: 
 var $56=$data;
 _free($56);
 $1=-1;
 label=20;break;
 case 13: 
 var $58=$orig_data;
 var $59=($58|0)==0;
 if($59){label=14;break;}else{label=15;break;}
 case 14: 
 var $61=$data;
 _free($61);
 $1=-1;
 label=20;break;
 case 15: 
 var $63=$orig_data;
 var $64=(($hdr+32)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$3;
 var $67=_fwrite($63,1,$65,$66);
 var $68=(($hdr+32)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)!=($69|0);
 if($70){label=16;break;}else{label=17;break;}
 case 16: 
 $exitval=-1;
 label=17;break;
 case 17: 
 var $73=$orig_data;
 var $74=$data;
 var $75=($73|0)!=($74|0);
 if($75){label=18;break;}else{label=19;break;}
 case 18: 
 var $77=$orig_data;
 _free($77);
 label=19;break;
 case 19: 
 var $79=$data;
 _free($79);
 var $80=$exitval;
 $1=$80;
 label=20;break;
 case 20: 
 var $82=$1;
 STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }
}
function _read_file_header($in,$hdrp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $hlen;
 var $start;
 var $ver;
 var $i;
 var $x;
 $1=$in;
 $2=$hdrp;
 var $3=$1;
 var $4=_fseek($3,8,1);
 var $5=$1;
 var $6=_read32l($5);
 var $7=(((($6>>>0))/(36))&-1);
 $hlen=$7;
 var $8=$1;
 var $9=_read32l($8);
 $start=$9;
 var $10=$1;
 var $11=_read32l($10);
 $ver=$11;
 var $12=$1;
 var $13=_read32l($12);
 var $14=$1;
 var $15=_read32l($14);
 $ver=$15;
 var $16=$1;
 var $17=_fseek($16,68,1);
 $i=0;
 label=2;break;
 case 2: 
 var $19=$i;
 var $20=$hlen;
 var $21=($19|0)<($20|0);
 if($21){label=3;break;}else{label=11;break;}
 case 3: 
 var $23=$1;
 var $24=_read8($23);
 var $25=($24&255);
 $x=$25;
 var $26=$x;
 var $27=($26|0)==0;
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 label=11;break;
 case 5: 
 var $30=$x;
 var $31=$30&127;
 var $32=(($31)&255);
 var $33=$2;
 var $34=(($33)|0);
 HEAP8[($34)]=$32;
 var $35=$2;
 var $36=(($35+2)|0);
 var $37=(($36)|0);
 var $38=$1;
 var $39=_fread($37,1,11,$38);
 var $40=$2;
 var $41=(($40+2)|0);
 var $42=(($41+12)|0);
 HEAP8[($42)]=0;
 var $43=$1;
 var $44=_read32l($43);
 var $45=$2;
 var $46=(($45+32)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$1;
 var $48=_read32l($47);
 var $49=$1;
 var $50=_read32l($49);
 var $51=$1;
 var $52=_read32l($51);
 $x=$52;
 var $53=$1;
 var $54=_read32l($53);
 var $55=$2;
 var $56=(($55+16)|0);
 HEAP32[(($56)>>2)]=$54;
 var $57=$1;
 var $58=_read32l($57);
 var $59=$2;
 var $60=(($59+36)|0);
 HEAP32[(($60)>>2)]=$58;
 var $61=$x;
 var $62=($61|0)==1;
 if($62){label=6;break;}else{label=7;break;}
 case 6: 
 label=10;break;
 case 7: 
 var $65=$2;
 var $66=(($65+36)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67&-2147483648;
 var $69=($68|0)!=0;
 if($69){label=8;break;}else{label=9;break;}
 case 8: 
 label=10;break;
 case 9: 
 var $72=$x;
 var $73=$72>>16;
 var $74=$2;
 var $75=(($74+28)|0);
 HEAP32[(($75)>>2)]=$73;
 var $76=$x;
 var $77=$76&65280;
 var $78=$77>>8;
 var $79=(($78)&255);
 var $80=$2;
 var $81=(($80+1)|0);
 HEAP8[($81)]=$79;
 var $82=$2;
 var $83=(($82+36)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$84&2147483647;
 HEAP32[(($83)>>2)]=$85;
 var $86=$start;
 var $87=$2;
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=((($89)+($86))|0);
 HEAP32[(($88)>>2)]=$90;
 label=11;break;
 case 10: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=2;break;
 case 11: 
 STACKTOP=sp;return 1;
  default: assert(0, "bad label: " + label);
 }
}
function _read_file_data($in,$hdrp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $data;
 var $siz;
 $2=$in;
 $3=$hdrp;
 var $4=$3;
 var $5=(($4+16)|0);
 var $6=HEAP32[(($5)>>2)];
 $siz=$6;
 var $7=$siz;
 var $8=_malloc($7);
 $data=$8;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $12=$2;
 var $13=$3;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=_fseek($12,$15,0);
 var $17=$data;
 var $18=$siz;
 var $19=$2;
 var $20=_fread($17,1,$18,$19);
 var $21=$siz;
 var $22=($20|0)!=($21|0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=$data;
 _free($24);
 $data=0;
 label=5;break;
 case 5: 
 var $26=$data;
 $1=$26;
 label=6;break;
 case 6: 
 var $28=$1;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_bzip2($src,$dst){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $outbuf;
 var $bd=sp;
 var $i;
 $2=$src;
 $3=$dst;
 _crc32_init_B();
 var $4=_malloc(4096);
 $outbuf=$4;
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 $1=-6;
 label=17;break;
 case 3: 
 var $8=$2;
 var $9=_start_bunzip($bd,$8,0,0);
 $i=$9;
 var $10=($9|0)!=0;
 if($10){label=11;break;}else{label=4;break;}
 case 4: 
 label=5;break;
 case 5: 
 var $13=HEAP32[(($bd)>>2)];
 var $14=$outbuf;
 var $15=_read_bunzip($13,$14,4096);
 $i=$15;
 var $16=($15|0)<=0;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 label=10;break;
 case 7: 
 var $19=$i;
 var $20=$outbuf;
 var $21=$i;
 var $22=$3;
 var $23=_fwrite($20,1,$21,$22);
 var $24=($19|0)!=($23|0);
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 $i=-4;
 label=10;break;
 case 9: 
 label=5;break;
 case 10: 
 label=11;break;
 case 11: 
 var $29=$i;
 var $30=($29|0)==-1;
 if($30){label=12;break;}else{label=14;break;}
 case 12: 
 var $32=HEAP32[(($bd)>>2)];
 var $33=(($32+48)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=HEAP32[(($bd)>>2)];
 var $36=(($35+52)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($34|0)==($37|0);
 if($38){label=13;break;}else{label=14;break;}
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 var $41=HEAP32[(($bd)>>2)];
 var $42=(($41+60)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)!=0;
 if($44){label=15;break;}else{label=16;break;}
 case 15: 
 var $46=HEAP32[(($bd)>>2)];
 var $47=(($46+60)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$48;
 _free($49);
 label=16;break;
 case 16: 
 var $51=HEAP32[(($bd)>>2)];
 var $52=$51;
 _free($52);
 var $53=$outbuf;
 _free($53);
 var $54=$i;
 var $55=($54|0)==0;
 var $56=($55?0:-1);
 $1=$56;
 label=17;break;
 case 17: 
 var $58=$1;
 STACKTOP=sp;return $58;
  default: assert(0, "bad label: " + label);
 }
}
function _start_bunzip($bdp,$in,$inbuf,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"8": function(value) { label = 16; $42 = value },dummy: 0};
 while(1)try { switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $bd;
 var $i;
 var $BZh0;
 $2=$bdp;
 $3=$in;
 $4=$inbuf;
 $5=$len;
 $BZh0=1113221168;
 $i=40216;
 var $6=$3;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$i;
 var $10=((($9)+(4096))|0);
 $i=$10;
 label=3;break;
 case 3: 
 var $12=$i;
 var $13=_malloc($12);
 var $14=$13;
 var $15=$2;
 HEAP32[(($15)>>2)]=$14;
 $bd=$14;
 var $16=($14|0)!=0;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 $1=-6;
 label=15;break;
 case 5: 
 var $19=$bd;
 var $20=$19;
 _memset($20, 0, 40216)|0;
 var $21=$3;
 var $22=$bd;
 var $23=(($22+20)|0);
 HEAP32[(($23)>>2)]=$21;
 var $24=0==($21|0);
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$4;
 var $27=$bd;
 var $28=(($27+36)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$5;
 var $30=$bd;
 var $31=(($30+28)|0);
 HEAP32[(($31)>>2)]=$29;
 label=8;break;
 case 7: 
 var $33=$bd;
 var $34=(($33+40216)|0);
 var $35=$34;
 var $36=$bd;
 var $37=(($36+36)|0);
 HEAP32[(($37)>>2)]=$35;
 label=8;break;
 case 8: 
 var $39=$bd;
 var $40=(($39+40060)|0);
 var $41=(($40)|0);
 var $42=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($41)>>2)]=tempInt, 0);
 label=16;break;
 case 16: 
 $i=$42;
 var $43=$i;
 var $44=($43|0)!=0;
 if($44){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=$i;
 $1=$46;
 label=15;break;
 case 10: 
 var $48=$bd;
 var $49=_get_bits760($48,32);
 $i=$49;
 var $50=$i;
 var $51=((($50)-(1113221168))|0);
 var $52=((($51)-(1))|0);
 var $53=($52>>>0)>=9;
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-2;
 label=15;break;
 case 12: 
 var $56=$i;
 var $57=((($56)-(1113221168))|0);
 var $58=((($57)*(100000))&-1);
 var $59=$bd;
 var $60=(($59+64)|0);
 HEAP32[(($60)>>2)]=$58;
 var $61=$bd;
 var $62=(($61+64)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63<<2);
 var $65=_malloc($64);
 var $66=$65;
 var $67=$bd;
 var $68=(($67+60)|0);
 HEAP32[(($68)>>2)]=$66;
 var $69=($66|0)!=0;
 if($69){label=14;break;}else{label=13;break;}
 case 13: 
 $1=-6;
 label=15;break;
 case 14: 
 $1=0;
 label=15;break;
 case 15: 
 var $73=$1;
 STACKTOP=sp;return $73;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _read_bunzip($bd,$outbuf,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $dbuf;
 var $pos;
 var $current;
 var $previous;
 var $gotcount;
 $2=$bd;
 $3=$outbuf;
 $4=$len;
 var $5=$2;
 var $6=(($5+12)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$2;
 var $11=(($10+12)|0);
 var $12=HEAP32[(($11)>>2)];
 $1=$12;
 label=29;break;
 case 3: 
 $gotcount=0;
 var $14=$2;
 var $15=(($14+60)|0);
 var $16=HEAP32[(($15)>>2)];
 $dbuf=$16;
 var $17=$2;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 $pos=$19;
 var $20=$2;
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 $current=$22;
 var $23=$2;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)!=0;
 if($26){label=4;break;}else{label=23;break;}
 case 4: 
 var $28=$2;
 var $29=(($28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($30)-(1))|0);
 HEAP32[(($29)>>2)]=$31;
 label=5;break;
 case 5: 
 var $33=$gotcount;
 var $34=$4;
 var $35=($33|0)>=($34|0);
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=$pos;
 var $38=$2;
 var $39=(($38+4)|0);
 HEAP32[(($39)>>2)]=$37;
 var $40=$current;
 var $41=$2;
 var $42=(($41+16)|0);
 HEAP32[(($42)>>2)]=$40;
 var $43=$2;
 var $44=(($43)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=((($45)+(1))|0);
 HEAP32[(($44)>>2)]=$46;
 var $47=$4;
 $1=$47;
 label=29;break;
 case 7: 
 var $49=$current;
 var $50=(($49)&255);
 var $51=$gotcount;
 var $52=((($51)+(1))|0);
 $gotcount=$52;
 var $53=$3;
 var $54=(($53+$51)|0);
 HEAP8[($54)]=$50;
 var $55=$2;
 var $56=(($55+56)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57<<8;
 var $59=$2;
 var $60=(($59+56)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61>>>24;
 var $63=$current;
 var $64=$62^$63;
 var $65=((30016+($64<<2))|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$58^$66;
 var $68=$2;
 var $69=(($68+56)|0);
 HEAP32[(($69)>>2)]=$67;
 var $70=$2;
 var $71=(($70)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)!=0;
 if($73){label=8;break;}else{label=9;break;}
 case 8: 
 var $75=$2;
 var $76=(($75)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=((($77)-(1))|0);
 HEAP32[(($76)>>2)]=$78;
 label=5;break;
 case 9: 
 label=10;break;
 case 10: 
 var $81=$2;
 var $82=(($81+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=((($83)-(1))|0);
 HEAP32[(($82)>>2)]=$84;
 var $85=($83|0)!=0;
 if($85){label=12;break;}else{label=11;break;}
 case 11: 
 label=20;break;
 case 12: 
 var $88=$current;
 $previous=$88;
 var $89=$pos;
 var $90=$dbuf;
 var $91=(($90+($89<<2))|0);
 var $92=HEAP32[(($91)>>2)];
 $pos=$92;
 var $93=$pos;
 var $94=$93&255;
 $current=$94;
 var $95=$pos;
 var $96=$95>>8;
 $pos=$96;
 var $97=$2;
 var $98=(($97+8)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=((($99)-(1))|0);
 HEAP32[(($98)>>2)]=$100;
 var $101=($100|0)!=0;
 if($101){label=13;break;}else{label=16;break;}
 case 13: 
 var $103=$current;
 var $104=$previous;
 var $105=($103|0)!=($104|0);
 if($105){label=14;break;}else{label=15;break;}
 case 14: 
 var $107=$2;
 var $108=(($107+8)|0);
 HEAP32[(($108)>>2)]=4;
 label=15;break;
 case 15: 
 label=19;break;
 case 16: 
 var $111=$current;
 var $112=$2;
 var $113=(($112)|0);
 HEAP32[(($113)>>2)]=$111;
 var $114=$previous;
 $current=$114;
 var $115=$2;
 var $116=(($115+8)|0);
 HEAP32[(($116)>>2)]=5;
 var $117=$2;
 var $118=(($117)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)!=0;
 if($120){label=18;break;}else{label=17;break;}
 case 17: 
 label=10;break;
 case 18: 
 var $123=$2;
 var $124=(($123)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=((($125)-(1))|0);
 HEAP32[(($124)>>2)]=$126;
 label=19;break;
 case 19: 
 label=5;break;
 case 20: 
 var $129=$2;
 var $130=(($129+56)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=$131^-1;
 var $133=$2;
 var $134=(($133+56)|0);
 HEAP32[(($134)>>2)]=$132;
 var $135=$2;
 var $136=(($135+52)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$137<<1;
 var $139=$2;
 var $140=(($139+52)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=$141>>>31;
 var $143=$138|$142;
 var $144=$2;
 var $145=(($144+56)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$143^$146;
 var $148=$2;
 var $149=(($148+52)|0);
 HEAP32[(($149)>>2)]=$147;
 var $150=$2;
 var $151=(($150+56)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$2;
 var $154=(($153+48)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=($152|0)!=($155|0);
 if($156){label=21;break;}else{label=22;break;}
 case 21: 
 var $158=$2;
 var $159=(($158+48)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=((($160)+(1))|0);
 var $162=$2;
 var $163=(($162+52)|0);
 HEAP32[(($163)>>2)]=$161;
 $1=-1;
 label=29;break;
 case 22: 
 label=23;break;
 case 23: 
 var $166=$2;
 var $167=_get_next_block($166);
 $previous=$167;
 var $168=$previous;
 var $169=($168|0)!=0;
 if($169){label=24;break;}else{label=28;break;}
 case 24: 
 var $171=$previous;
 var $172=$2;
 var $173=(($172+12)|0);
 HEAP32[(($173)>>2)]=$171;
 var $174=$previous;
 var $175=($174|0)!=-1;
 if($175){label=25;break;}else{label=26;break;}
 case 25: 
 var $177=$previous;
 var $181=$177;label=27;break;
 case 26: 
 var $179=$gotcount;
 var $181=$179;label=27;break;
 case 27: 
 var $181;
 $1=$181;
 label=29;break;
 case 28: 
 var $183=$2;
 var $184=(($183+56)|0);
 HEAP32[(($184)>>2)]=-1;
 var $185=$2;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 $pos=$187;
 var $188=$2;
 var $189=(($188+16)|0);
 var $190=HEAP32[(($189)>>2)];
 $current=$190;
 label=10;break;
 case 29: 
 var $192=$1;
 STACKTOP=sp;return $192;
  default: assert(0, "bad label: " + label);
 }
}
function _get_next_block($bd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1824)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"1": function(value) { label = 143; $15 = value },dummy: 0};
 while(1)try { switch(label){
 case 1: 
 var $1;
 var $2;
 var $hufGroup;
 var $dbufCount;
 var $nextSym;
 var $dbufSize;
 var $groupCount;
 var $base;
 var $limit;
 var $selector;
 var $i;
 var $j;
 var $k;
 var $t;
 var $runPos;
 var $symCount;
 var $symTotal;
 var $nSelectors;
 var $byteCount=sp;
 var $uc;
 var $symToByte=(sp)+(1024);
 var $mtfSymbol=(sp)+(1280);
 var $selectors;
 var $dbuf;
 var $origPtr;
 var $length=(sp)+(1536);
 var $temp=(sp)+(1800);
 var $minLen;
 var $maxLen;
 var $pp;
 $2=$bd;
 $base=0;
 $limit=0;
 $hufGroup=0;
 var $3=$2;
 var $4=(($3+60)|0);
 var $5=HEAP32[(($4)>>2)];
 $dbuf=$5;
 var $6=$2;
 var $7=(($6+64)|0);
 var $8=HEAP32[(($7)>>2)];
 $dbufSize=$8;
 var $9=$2;
 var $10=(($9+68)|0);
 var $11=(($10)|0);
 $selectors=$11;
 var $12=$2;
 var $13=(($12+40060)|0);
 var $14=(($13)|0);
 var $15=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($14)>>2)]=tempInt, 0);
 label=143;break;
 case 143: 
 $i=$15;
 var $16=$i;
 var $17=($16|0)!=0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$i;
 $1=$19;
 label=142;break;
 case 3: 
 var $21=$2;
 var $22=_get_bits760($21,24);
 $i=$22;
 var $23=$2;
 var $24=_get_bits760($23,24);
 $j=$24;
 var $25=$2;
 var $26=_get_bits760($25,32);
 var $27=$2;
 var $28=(($27+48)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$i;
 var $30=($29|0)==1536581;
 if($30){label=4;break;}else{label=6;break;}
 case 4: 
 var $32=$j;
 var $33=($32|0)==3690640;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=142;break;
 case 6: 
 var $36=$i;
 var $37=($36|0)!=3227993;
 if($37){label=8;break;}else{label=7;break;}
 case 7: 
 var $39=$j;
 var $40=($39|0)!=2511705;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-2;
 label=142;break;
 case 9: 
 var $43=$2;
 var $44=_get_bits760($43,1);
 var $45=($44|0)!=0;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-7;
 label=142;break;
 case 11: 
 var $48=$2;
 var $49=_get_bits760($48,24);
 $origPtr=$49;
 var $50=$dbufSize;
 var $51=($49>>>0)>($50>>>0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-5;
 label=142;break;
 case 13: 
 var $54=$2;
 var $55=_get_bits760($54,16);
 $t=$55;
 $symTotal=0;
 $i=0;
 label=14;break;
 case 14: 
 var $57=$i;
 var $58=($57|0)<16;
 if($58){label=15;break;}else{label=25;break;}
 case 15: 
 var $60=$t;
 var $61=$i;
 var $62=(((15)-($61))|0);
 var $63=1<<$62;
 var $64=$60&$63;
 var $65=($64|0)!=0;
 if($65){label=16;break;}else{label=23;break;}
 case 16: 
 var $67=$2;
 var $68=_get_bits760($67,16);
 $k=$68;
 $j=0;
 label=17;break;
 case 17: 
 var $70=$j;
 var $71=($70|0)<16;
 if($71){label=18;break;}else{label=22;break;}
 case 18: 
 var $73=$k;
 var $74=$j;
 var $75=(((15)-($74))|0);
 var $76=1<<$75;
 var $77=$73&$76;
 var $78=($77|0)!=0;
 if($78){label=19;break;}else{label=20;break;}
 case 19: 
 var $80=$i;
 var $81=($80<<4);
 var $82=$j;
 var $83=((($81)+($82))|0);
 var $84=(($83)&255);
 var $85=$symTotal;
 var $86=((($85)+(1))|0);
 $symTotal=$86;
 var $87=(($symToByte+$85)|0);
 HEAP8[($87)]=$84;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $90=$j;
 var $91=((($90)+(1))|0);
 $j=$91;
 label=17;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $95=$i;
 var $96=((($95)+(1))|0);
 $i=$96;
 label=14;break;
 case 25: 
 var $98=$2;
 var $99=_get_bits760($98,3);
 $groupCount=$99;
 var $100=$groupCount;
 var $101=($100|0)<2;
 if($101){label=27;break;}else{label=26;break;}
 case 26: 
 var $103=$groupCount;
 var $104=($103|0)>6;
 if($104){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-5;
 label=142;break;
 case 28: 
 var $107=$2;
 var $108=_get_bits760($107,15);
 $nSelectors=$108;
 var $109=($108|0)!=0;
 if($109){label=30;break;}else{label=29;break;}
 case 29: 
 $1=-5;
 label=142;break;
 case 30: 
 $i=0;
 label=31;break;
 case 31: 
 var $113=$i;
 var $114=$groupCount;
 var $115=($113|0)<($114|0);
 if($115){label=32;break;}else{label=34;break;}
 case 32: 
 var $117=$i;
 var $118=(($117)&255);
 var $119=$i;
 var $120=(($mtfSymbol+$119)|0);
 HEAP8[($120)]=$118;
 label=33;break;
 case 33: 
 var $122=$i;
 var $123=((($122)+(1))|0);
 $i=$123;
 label=31;break;
 case 34: 
 $i=0;
 label=35;break;
 case 35: 
 var $126=$i;
 var $127=$nSelectors;
 var $128=($126|0)<($127|0);
 if($128){label=36;break;}else{label=48;break;}
 case 36: 
 $j=0;
 label=37;break;
 case 37: 
 var $131=$2;
 var $132=_get_bits760($131,1);
 var $133=($132|0)!=0;
 if($133){label=38;break;}else{label=42;break;}
 case 38: 
 var $135=$j;
 var $136=$groupCount;
 var $137=($135|0)>=($136|0);
 if($137){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-5;
 label=142;break;
 case 40: 
 label=41;break;
 case 41: 
 var $141=$j;
 var $142=((($141)+(1))|0);
 $j=$142;
 label=37;break;
 case 42: 
 var $144=$j;
 var $145=(($mtfSymbol+$144)|0);
 var $146=HEAP8[($145)];
 $uc=$146;
 label=43;break;
 case 43: 
 var $148=$j;
 var $149=($148|0)!=0;
 if($149){label=44;break;}else{label=46;break;}
 case 44: 
 var $151=$j;
 var $152=((($151)-(1))|0);
 var $153=(($mtfSymbol+$152)|0);
 var $154=HEAP8[($153)];
 var $155=$j;
 var $156=(($mtfSymbol+$155)|0);
 HEAP8[($156)]=$154;
 label=45;break;
 case 45: 
 var $158=$j;
 var $159=((($158)-(1))|0);
 $j=$159;
 label=43;break;
 case 46: 
 var $161=$uc;
 var $162=$i;
 var $163=$selectors;
 var $164=(($163+$162)|0);
 HEAP8[($164)]=$161;
 var $165=(($mtfSymbol)|0);
 HEAP8[($165)]=$161;
 label=47;break;
 case 47: 
 var $167=$i;
 var $168=((($167)+(1))|0);
 $i=$168;
 label=35;break;
 case 48: 
 var $170=$symTotal;
 var $171=((($170)+(2))|0);
 $symCount=$171;
 $j=0;
 label=49;break;
 case 49: 
 var $173=$j;
 var $174=$groupCount;
 var $175=($173|0)<($174|0);
 if($175){label=50;break;}else{label=89;break;}
 case 50: 
 var $177=$2;
 var $178=_get_bits760($177,5);
 var $179=((($178)-(1))|0);
 $t=$179;
 $i=0;
 label=51;break;
 case 51: 
 var $181=$i;
 var $182=$symCount;
 var $183=($181|0)<($182|0);
 if($183){label=52;break;}else{label=60;break;}
 case 52: 
 label=53;break;
 case 53: 
 var $186=$t;
 var $187=($186>>>0)>19;
 if($187){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-5;
 label=142;break;
 case 55: 
 var $190=$2;
 var $191=_get_bits760($190,2);
 $k=$191;
 var $192=$k;
 var $193=($192|0)<2;
 if($193){label=56;break;}else{label=57;break;}
 case 56: 
 var $195=$2;
 var $196=(($195+40)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=((($197)+(1))|0);
 HEAP32[(($196)>>2)]=$198;
 label=58;break;
 case 57: 
 var $200=$k;
 var $201=((($200)+(1))|0);
 var $202=$201&2;
 var $203=((($202)-(1))|0);
 var $204=$t;
 var $205=((($204)+($203))|0);
 $t=$205;
 label=53;break;
 case 58: 
 var $207=$t;
 var $208=((($207)+(1))|0);
 var $209=(($208)&255);
 var $210=$i;
 var $211=(($length+$210)|0);
 HEAP8[($211)]=$209;
 label=59;break;
 case 59: 
 var $213=$i;
 var $214=((($213)+(1))|0);
 $i=$214;
 label=51;break;
 case 60: 
 var $216=(($length)|0);
 var $217=HEAP8[($216)];
 var $218=($217&255);
 $maxLen=$218;
 $minLen=$218;
 $i=1;
 label=61;break;
 case 61: 
 var $220=$i;
 var $221=$symCount;
 var $222=($220|0)<($221|0);
 if($222){label=62;break;}else{label=69;break;}
 case 62: 
 var $224=$i;
 var $225=(($length+$224)|0);
 var $226=HEAP8[($225)];
 var $227=($226&255);
 var $228=$maxLen;
 var $229=($227|0)>($228|0);
 if($229){label=63;break;}else{label=64;break;}
 case 63: 
 var $231=$i;
 var $232=(($length+$231)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 $maxLen=$234;
 label=67;break;
 case 64: 
 var $236=$i;
 var $237=(($length+$236)|0);
 var $238=HEAP8[($237)];
 var $239=($238&255);
 var $240=$minLen;
 var $241=($239|0)<($240|0);
 if($241){label=65;break;}else{label=66;break;}
 case 65: 
 var $243=$i;
 var $244=(($length+$243)|0);
 var $245=HEAP8[($244)];
 var $246=($245&255);
 $minLen=$246;
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 var $250=$i;
 var $251=((($250)+(1))|0);
 $i=$251;
 label=61;break;
 case 69: 
 var $253=$2;
 var $254=(($253+32836)|0);
 var $255=(($254)|0);
 var $256=$j;
 var $257=(($255+((($256)*(1204))&-1))|0);
 $hufGroup=$257;
 var $258=$minLen;
 var $259=$hufGroup;
 var $260=(($259+1196)|0);
 HEAP32[(($260)>>2)]=$258;
 var $261=$maxLen;
 var $262=$hufGroup;
 var $263=(($262+1200)|0);
 HEAP32[(($263)>>2)]=$261;
 var $264=$hufGroup;
 var $265=(($264+84)|0);
 var $266=(($265)|0);
 var $267=((($266)-(4))|0);
 $base=$267;
 var $268=$hufGroup;
 var $269=(($268)|0);
 var $270=(($269)|0);
 var $271=((($270)-(4))|0);
 $limit=$271;
 $pp=0;
 var $272=$minLen;
 $i=$272;
 label=70;break;
 case 70: 
 var $274=$i;
 var $275=$maxLen;
 var $276=($274|0)<=($275|0);
 if($276){label=71;break;}else{label=79;break;}
 case 71: 
 var $278=$i;
 var $279=$limit;
 var $280=(($279+($278<<2))|0);
 HEAP32[(($280)>>2)]=0;
 var $281=$i;
 var $282=(($temp+$281)|0);
 HEAP8[($282)]=0;
 $t=0;
 label=72;break;
 case 72: 
 var $284=$t;
 var $285=$symCount;
 var $286=($284|0)<($285|0);
 if($286){label=73;break;}else{label=77;break;}
 case 73: 
 var $288=$t;
 var $289=(($length+$288)|0);
 var $290=HEAP8[($289)];
 var $291=($290&255);
 var $292=$i;
 var $293=($291|0)==($292|0);
 if($293){label=74;break;}else{label=75;break;}
 case 74: 
 var $295=$t;
 var $296=$pp;
 var $297=((($296)+(1))|0);
 $pp=$297;
 var $298=$hufGroup;
 var $299=(($298+164)|0);
 var $300=(($299+($296<<2))|0);
 HEAP32[(($300)>>2)]=$295;
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 var $303=$t;
 var $304=((($303)+(1))|0);
 $t=$304;
 label=72;break;
 case 77: 
 label=78;break;
 case 78: 
 var $307=$i;
 var $308=((($307)+(1))|0);
 $i=$308;
 label=70;break;
 case 79: 
 $i=0;
 label=80;break;
 case 80: 
 var $311=$i;
 var $312=$symCount;
 var $313=($311|0)<($312|0);
 if($313){label=81;break;}else{label=83;break;}
 case 81: 
 var $315=$i;
 var $316=(($length+$315)|0);
 var $317=HEAP8[($316)];
 var $318=($317&255);
 var $319=(($temp+$318)|0);
 var $320=HEAP8[($319)];
 var $321=((($320)+(1))&255);
 HEAP8[($319)]=$321;
 label=82;break;
 case 82: 
 var $323=$i;
 var $324=((($323)+(1))|0);
 $i=$324;
 label=80;break;
 case 83: 
 $t=0;
 $pp=0;
 var $326=$minLen;
 $i=$326;
 label=84;break;
 case 84: 
 var $328=$i;
 var $329=$maxLen;
 var $330=($328|0)<($329|0);
 if($330){label=85;break;}else{label=87;break;}
 case 85: 
 var $332=$i;
 var $333=(($temp+$332)|0);
 var $334=HEAP8[($333)];
 var $335=($334&255);
 var $336=$pp;
 var $337=((($336)+($335))|0);
 $pp=$337;
 var $338=$pp;
 var $339=$maxLen;
 var $340=$i;
 var $341=((($339)-($340))|0);
 var $342=$338<<$341;
 var $343=((($342)-(1))|0);
 var $344=$i;
 var $345=$limit;
 var $346=(($345+($344<<2))|0);
 HEAP32[(($346)>>2)]=$343;
 var $347=$pp;
 var $348=$347<<1;
 $pp=$348;
 var $349=$pp;
 var $350=$i;
 var $351=(($temp+$350)|0);
 var $352=HEAP8[($351)];
 var $353=($352&255);
 var $354=$t;
 var $355=((($354)+($353))|0);
 $t=$355;
 var $356=((($349)-($355))|0);
 var $357=$i;
 var $358=((($357)+(1))|0);
 var $359=$base;
 var $360=(($359+($358<<2))|0);
 HEAP32[(($360)>>2)]=$356;
 label=86;break;
 case 86: 
 var $362=$i;
 var $363=((($362)+(1))|0);
 $i=$363;
 label=84;break;
 case 87: 
 var $365=$maxLen;
 var $366=((($365)+(1))|0);
 var $367=$limit;
 var $368=(($367+($366<<2))|0);
 HEAP32[(($368)>>2)]=2147483647;
 var $369=$pp;
 var $370=$maxLen;
 var $371=(($temp+$370)|0);
 var $372=HEAP8[($371)];
 var $373=($372&255);
 var $374=((($369)+($373))|0);
 var $375=((($374)-(1))|0);
 var $376=$maxLen;
 var $377=$limit;
 var $378=(($377+($376<<2))|0);
 HEAP32[(($378)>>2)]=$375;
 var $379=$minLen;
 var $380=$base;
 var $381=(($380+($379<<2))|0);
 HEAP32[(($381)>>2)]=0;
 label=88;break;
 case 88: 
 var $383=$j;
 var $384=((($383)+(1))|0);
 $j=$384;
 label=49;break;
 case 89: 
 $i=0;
 label=90;break;
 case 90: 
 var $387=$i;
 var $388=($387|0)<256;
 if($388){label=91;break;}else{label=93;break;}
 case 91: 
 var $390=$i;
 var $391=(($byteCount+($390<<2))|0);
 HEAP32[(($391)>>2)]=0;
 var $392=$i;
 var $393=(($392)&255);
 var $394=$i;
 var $395=(($mtfSymbol+$394)|0);
 HEAP8[($395)]=$393;
 label=92;break;
 case 92: 
 var $397=$i;
 var $398=((($397)+(1))|0);
 $i=$398;
 label=90;break;
 case 93: 
 $selector=0;
 $symCount=0;
 $dbufCount=0;
 $runPos=0;
 label=94;break;
 case 94: 
 var $401=$symCount;
 var $402=((($401)-(1))|0);
 $symCount=$402;
 var $403=($401|0)!=0;
 if($403){label=98;break;}else{label=95;break;}
 case 95: 
 $symCount=49;
 var $405=$selector;
 var $406=$nSelectors;
 var $407=($405|0)>=($406|0);
 if($407){label=96;break;}else{label=97;break;}
 case 96: 
 $1=-5;
 label=142;break;
 case 97: 
 var $410=$2;
 var $411=(($410+32836)|0);
 var $412=(($411)|0);
 var $413=$selector;
 var $414=((($413)+(1))|0);
 $selector=$414;
 var $415=$selectors;
 var $416=(($415+$413)|0);
 var $417=HEAP8[($416)];
 var $418=($417&255);
 var $419=(($412+((($418)*(1204))&-1))|0);
 $hufGroup=$419;
 var $420=$hufGroup;
 var $421=(($420+84)|0);
 var $422=(($421)|0);
 var $423=((($422)-(4))|0);
 $base=$423;
 var $424=$hufGroup;
 var $425=(($424)|0);
 var $426=(($425)|0);
 var $427=((($426)-(4))|0);
 $limit=$427;
 label=98;break;
 case 98: 
 label=99;break;
 case 99: 
 var $430=$2;
 var $431=(($430+40)|0);
 var $432=HEAP32[(($431)>>2)];
 var $433=$hufGroup;
 var $434=(($433+1200)|0);
 var $435=HEAP32[(($434)>>2)];
 var $436=($432>>>0)<($435>>>0);
 if($436){label=100;break;}else{label=103;break;}
 case 100: 
 var $438=$2;
 var $439=(($438+32)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=$2;
 var $442=(($441+28)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=($440|0)==($443|0);
 if($444){label=101;break;}else{label=102;break;}
 case 101: 
 var $446=$2;
 var $447=$hufGroup;
 var $448=(($447+1200)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=(($449)&255);
 var $451=_get_bits760($446,$450);
 $j=$451;
 label=104;break;
 case 102: 
 var $453=$2;
 var $454=(($453+44)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=$455<<8;
 var $457=$2;
 var $458=(($457+32)|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=((($459)+(1))|0);
 HEAP32[(($458)>>2)]=$460;
 var $461=$2;
 var $462=(($461+36)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=(($463+$459)|0);
 var $465=HEAP8[($464)];
 var $466=($465&255);
 var $467=$456|$466;
 var $468=$2;
 var $469=(($468+44)|0);
 HEAP32[(($469)>>2)]=$467;
 var $470=$2;
 var $471=(($470+40)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=((($472)+(8))|0);
 HEAP32[(($471)>>2)]=$473;
 label=99;break;
 case 103: 
 var $475=$hufGroup;
 var $476=(($475+1200)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=$2;
 var $479=(($478+40)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=((($480)-($477))|0);
 HEAP32[(($479)>>2)]=$481;
 var $482=$2;
 var $483=(($482+44)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=$2;
 var $486=(($485+40)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=$484>>>($487>>>0);
 var $489=$hufGroup;
 var $490=(($489+1200)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=1<<$491;
 var $493=((($492)-(1))|0);
 var $494=$488&$493;
 $j=$494;
 label=104;break;
 case 104: 
 var $496=$hufGroup;
 var $497=(($496+1196)|0);
 var $498=HEAP32[(($497)>>2)];
 $i=$498;
 label=105;break;
 case 105: 
 var $500=$j;
 var $501=$i;
 var $502=$limit;
 var $503=(($502+($501<<2))|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=($500|0)>($504|0);
 if($505){label=106;break;}else{label=107;break;}
 case 106: 
 var $507=$i;
 var $508=((($507)+(1))|0);
 $i=$508;
 label=105;break;
 case 107: 
 var $510=$hufGroup;
 var $511=(($510+1200)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=$i;
 var $514=((($512)-($513))|0);
 var $515=$2;
 var $516=(($515+40)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=((($517)+($514))|0);
 HEAP32[(($516)>>2)]=$518;
 var $519=$i;
 var $520=$hufGroup;
 var $521=(($520+1200)|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=($519|0)>($522|0);
 if($523){label=109;break;}else{label=108;break;}
 case 108: 
 var $525=$j;
 var $526=$hufGroup;
 var $527=(($526+1200)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=$i;
 var $530=((($528)-($529))|0);
 var $531=$525>>($530|0);
 var $532=$i;
 var $533=$base;
 var $534=(($533+($532<<2))|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=((($531)-($535))|0);
 $j=$536;
 var $537=($536>>>0)>=258;
 if($537){label=109;break;}else{label=110;break;}
 case 109: 
 $1=-5;
 label=142;break;
 case 110: 
 var $540=$j;
 var $541=$hufGroup;
 var $542=(($541+164)|0);
 var $543=(($542+($540<<2))|0);
 var $544=HEAP32[(($543)>>2)];
 $nextSym=$544;
 var $545=$nextSym;
 var $546=($545>>>0)<=1;
 if($546){label=111;break;}else{label=114;break;}
 case 111: 
 var $548=$runPos;
 var $549=($548|0)!=0;
 if($549){label=113;break;}else{label=112;break;}
 case 112: 
 $runPos=1;
 $t=0;
 label=113;break;
 case 113: 
 var $552=$runPos;
 var $553=$nextSym;
 var $554=$552<<$553;
 var $555=$t;
 var $556=((($555)+($554))|0);
 $t=$556;
 var $557=$runPos;
 var $558=$557<<1;
 $runPos=$558;
 label=94;break;
 case 114: 
 var $560=$runPos;
 var $561=($560|0)!=0;
 if($561){label=115;break;}else{label=121;break;}
 case 115: 
 $runPos=0;
 var $563=$dbufCount;
 var $564=$t;
 var $565=((($563)+($564))|0);
 var $566=$dbufSize;
 var $567=($565|0)>=($566|0);
 if($567){label=116;break;}else{label=117;break;}
 case 116: 
 $1=-5;
 label=142;break;
 case 117: 
 var $570=(($mtfSymbol)|0);
 var $571=HEAP8[($570)];
 var $572=($571&255);
 var $573=(($symToByte+$572)|0);
 var $574=HEAP8[($573)];
 $uc=$574;
 var $575=$t;
 var $576=$uc;
 var $577=($576&255);
 var $578=(($byteCount+($577<<2))|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=((($579)+($575))|0);
 HEAP32[(($578)>>2)]=$580;
 label=118;break;
 case 118: 
 var $582=$t;
 var $583=((($582)-(1))|0);
 $t=$583;
 var $584=($582|0)!=0;
 if($584){label=119;break;}else{label=120;break;}
 case 119: 
 var $586=$uc;
 var $587=($586&255);
 var $588=$dbufCount;
 var $589=((($588)+(1))|0);
 $dbufCount=$589;
 var $590=$dbuf;
 var $591=(($590+($588<<2))|0);
 HEAP32[(($591)>>2)]=$587;
 label=118;break;
 case 120: 
 label=121;break;
 case 121: 
 var $594=$nextSym;
 var $595=$symTotal;
 var $596=($594|0)>($595|0);
 if($596){label=122;break;}else{label=123;break;}
 case 122: 
 label=129;break;
 case 123: 
 var $599=$dbufCount;
 var $600=$dbufSize;
 var $601=($599|0)>=($600|0);
 if($601){label=124;break;}else{label=125;break;}
 case 124: 
 $1=-5;
 label=142;break;
 case 125: 
 var $604=$nextSym;
 var $605=((($604)-(1))|0);
 $i=$605;
 var $606=$i;
 var $607=(($mtfSymbol+$606)|0);
 var $608=HEAP8[($607)];
 $uc=$608;
 label=126;break;
 case 126: 
 var $610=$i;
 var $611=((($610)-(1))|0);
 var $612=(($mtfSymbol+$611)|0);
 var $613=HEAP8[($612)];
 var $614=$i;
 var $615=(($mtfSymbol+$614)|0);
 HEAP8[($615)]=$613;
 label=127;break;
 case 127: 
 var $617=$i;
 var $618=((($617)-(1))|0);
 $i=$618;
 var $619=($618|0)!=0;
 if($619){label=126;break;}else{label=128;break;}
 case 128: 
 var $621=$uc;
 var $622=(($mtfSymbol)|0);
 HEAP8[($622)]=$621;
 var $623=$uc;
 var $624=($623&255);
 var $625=(($symToByte+$624)|0);
 var $626=HEAP8[($625)];
 $uc=$626;
 var $627=$uc;
 var $628=($627&255);
 var $629=(($byteCount+($628<<2))|0);
 var $630=HEAP32[(($629)>>2)];
 var $631=((($630)+(1))|0);
 HEAP32[(($629)>>2)]=$631;
 var $632=$uc;
 var $633=($632&255);
 var $634=$dbufCount;
 var $635=((($634)+(1))|0);
 $dbufCount=$635;
 var $636=$dbuf;
 var $637=(($636+($634<<2))|0);
 HEAP32[(($637)>>2)]=$633;
 label=94;break;
 case 129: 
 $j=0;
 $i=0;
 label=130;break;
 case 130: 
 var $640=$i;
 var $641=($640|0)<256;
 if($641){label=131;break;}else{label=133;break;}
 case 131: 
 var $643=$j;
 var $644=$i;
 var $645=(($byteCount+($644<<2))|0);
 var $646=HEAP32[(($645)>>2)];
 var $647=((($643)+($646))|0);
 $k=$647;
 var $648=$j;
 var $649=$i;
 var $650=(($byteCount+($649<<2))|0);
 HEAP32[(($650)>>2)]=$648;
 var $651=$k;
 $j=$651;
 label=132;break;
 case 132: 
 var $653=$i;
 var $654=((($653)+(1))|0);
 $i=$654;
 label=130;break;
 case 133: 
 $i=0;
 label=134;break;
 case 134: 
 var $657=$i;
 var $658=$dbufCount;
 var $659=($657|0)<($658|0);
 if($659){label=135;break;}else{label=137;break;}
 case 135: 
 var $661=$i;
 var $662=$dbuf;
 var $663=(($662+($661<<2))|0);
 var $664=HEAP32[(($663)>>2)];
 var $665=$664&255;
 var $666=(($665)&255);
 $uc=$666;
 var $667=$i;
 var $668=$667<<8;
 var $669=$uc;
 var $670=($669&255);
 var $671=(($byteCount+($670<<2))|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$dbuf;
 var $674=(($673+($672<<2))|0);
 var $675=HEAP32[(($674)>>2)];
 var $676=$675|$668;
 HEAP32[(($674)>>2)]=$676;
 var $677=$uc;
 var $678=($677&255);
 var $679=(($byteCount+($678<<2))|0);
 var $680=HEAP32[(($679)>>2)];
 var $681=((($680)+(1))|0);
 HEAP32[(($679)>>2)]=$681;
 label=136;break;
 case 136: 
 var $683=$i;
 var $684=((($683)+(1))|0);
 $i=$684;
 label=134;break;
 case 137: 
 var $686=$dbufCount;
 var $687=($686|0)!=0;
 if($687){label=138;break;}else{label=141;break;}
 case 138: 
 var $689=$origPtr;
 var $690=$dbufCount;
 var $691=($689>>>0)>=($690>>>0);
 if($691){label=139;break;}else{label=140;break;}
 case 139: 
 $1=-5;
 label=142;break;
 case 140: 
 var $694=$origPtr;
 var $695=$dbuf;
 var $696=(($695+($694<<2))|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$2;
 var $699=(($698+4)|0);
 HEAP32[(($699)>>2)]=$697;
 var $700=$2;
 var $701=(($700+4)|0);
 var $702=HEAP32[(($701)>>2)];
 var $703=$702&255;
 var $704=(($703)&255);
 var $705=($704&255);
 var $706=$2;
 var $707=(($706+16)|0);
 HEAP32[(($707)>>2)]=$705;
 var $708=$2;
 var $709=(($708+4)|0);
 var $710=HEAP32[(($709)>>2)];
 var $711=$710>>8;
 HEAP32[(($709)>>2)]=$711;
 var $712=$2;
 var $713=(($712+8)|0);
 HEAP32[(($713)>>2)]=5;
 label=141;break;
 case 141: 
 var $715=$dbufCount;
 var $716=$2;
 var $717=(($716+12)|0);
 HEAP32[(($717)>>2)]=$715;
 $1=0;
 label=142;break;
 case 142: 
 var $719=$1;
 STACKTOP=sp;return $719;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _get_bits760($bd,$bits_wanted){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $bits;
 $1=$bd;
 $2=$bits_wanted;
 $bits=0;
 label=2;break;
 case 2: 
 var $4=$1;
 var $5=(($4+40)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=(($7<<24)>>24);
 var $9=($6>>>0)<($8>>>0);
 if($9){label=3;break;}else{label=10;break;}
 case 3: 
 var $11=$1;
 var $12=(($11+32)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$1;
 var $15=(($14+28)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($13|0)==($16|0);
 if($17){label=4;break;}else{label=7;break;}
 case 4: 
 var $19=$1;
 var $20=(($19+36)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$1;
 var $23=(($22+20)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=_fread($21,1,4096,$24);
 var $26=$1;
 var $27=(($26+28)|0);
 HEAP32[(($27)>>2)]=$25;
 var $28=($25|0)<=0;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 var $30=$1;
 var $31=(($30+40060)|0);
 var $32=(($31)|0);
 _longjmp($32,-3);
 throw "Reached an unreachable!";
 case 6: 
 var $34=$1;
 var $35=(($34+32)|0);
 HEAP32[(($35)>>2)]=0;
 label=7;break;
 case 7: 
 var $37=$1;
 var $38=(($37+40)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39>>>0)>=24;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 var $42=$1;
 var $43=(($42+44)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$1;
 var $46=(($45+40)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=1<<$47;
 var $49=((($48)-(1))|0);
 var $50=$44&$49;
 $bits=$50;
 var $51=$1;
 var $52=(($51+40)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$2;
 var $55=(($54<<24)>>24);
 var $56=((($55)-($53))|0);
 var $57=(($56)&255);
 $2=$57;
 var $58=$2;
 var $59=(($58<<24)>>24);
 var $60=$bits;
 var $61=$60<<$59;
 $bits=$61;
 var $62=$1;
 var $63=(($62+40)|0);
 HEAP32[(($63)>>2)]=0;
 label=9;break;
 case 9: 
 var $65=$1;
 var $66=(($65+44)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67<<8;
 var $69=$1;
 var $70=(($69+32)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=((($71)+(1))|0);
 HEAP32[(($70)>>2)]=$72;
 var $73=$1;
 var $74=(($73+36)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+$71)|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=$68|$78;
 var $80=$1;
 var $81=(($80+44)|0);
 HEAP32[(($81)>>2)]=$79;
 var $82=$1;
 var $83=(($82+40)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(8))|0);
 HEAP32[(($83)>>2)]=$85;
 label=2;break;
 case 10: 
 var $87=$2;
 var $88=(($87<<24)>>24);
 var $89=$1;
 var $90=(($89+40)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=((($91)-($88))|0);
 HEAP32[(($90)>>2)]=$92;
 var $93=$1;
 var $94=(($93+44)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$1;
 var $97=(($96+40)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$95>>>($98>>>0);
 var $100=$2;
 var $101=(($100<<24)>>24);
 var $102=1<<$101;
 var $103=((($102)-(1))|0);
 var $104=$99&$103;
 var $105=$bits;
 var $106=$105|$104;
 $bits=$106;
 var $107=$bits;
 STACKTOP=sp;return $107;
  default: assert(0, "bad label: " + label);
 }
}
function _crc32_init_A(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((32072)>>2)];
 var $2=($1|0)!=0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 _crc_table_init_A(-306674912,31040);
 HEAP32[((32072)>>2)]=1;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _crc_table_init_A($poly,$table){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 var $k;
 $1=$poly;
 $2=$table;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=($4|0)<256;
 if($5){label=3;break;}else{label=12;break;}
 case 3: 
 var $7=$i;
 $k=$7;
 $j=0;
 label=4;break;
 case 4: 
 var $9=$j;
 var $10=($9|0)<8;
 if($10){label=5;break;}else{label=10;break;}
 case 5: 
 var $12=$k;
 var $13=$12&1;
 var $14=($13|0)!=0;
 if($14){label=6;break;}else{label=7;break;}
 case 6: 
 var $16=$k;
 var $17=$16>>>1;
 var $18=$1;
 var $19=$17^$18;
 var $24=$19;label=8;break;
 case 7: 
 var $21=$k;
 var $22=$21>>>1;
 var $24=$22;label=8;break;
 case 8: 
 var $24;
 $k=$24;
 label=9;break;
 case 9: 
 var $26=$j;
 var $27=((($26)+(1))|0);
 $j=$27;
 label=4;break;
 case 10: 
 var $29=$k;
 var $30=$i;
 var $31=$2;
 var $32=(($31+($30<<2))|0);
 HEAP32[(($32)>>2)]=$29;
 label=11;break;
 case 11: 
 var $34=$i;
 var $35=((($34)+(1))|0);
 $i=$35;
 label=2;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _crc32_init_B(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((32064)>>2)];
 var $2=($1|0)!=0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 _crc_table_init_B(79764919,30016);
 HEAP32[((32064)>>2)]=1;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _crc_table_init_B($poly,$table){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 var $k;
 $1=$poly;
 $2=$table;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=($4|0)<256;
 if($5){label=3;break;}else{label=12;break;}
 case 3: 
 var $7=$i;
 var $8=$7<<24;
 $k=$8;
 $j=0;
 label=4;break;
 case 4: 
 var $10=$j;
 var $11=($10|0)<8;
 if($11){label=5;break;}else{label=10;break;}
 case 5: 
 var $13=$k;
 var $14=$13&-2147483648;
 var $15=($14|0)!=0;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 var $17=$k;
 var $18=$17<<1;
 var $19=$1;
 var $20=$18^$19;
 var $25=$20;label=8;break;
 case 7: 
 var $22=$k;
 var $23=$22<<1;
 var $25=$23;label=8;break;
 case 8: 
 var $25;
 $k=$25;
 label=9;break;
 case 9: 
 var $27=$j;
 var $28=((($27)+(1))|0);
 $j=$28;
 label=4;break;
 case 10: 
 var $30=$k;
 var $31=$i;
 var $32=$2;
 var $33=(($32+($31<<2))|0);
 HEAP32[(($33)>>2)]=$30;
 label=11;break;
 case 11: 
 var $35=$i;
 var $36=((($35)+(1))|0);
 $i=$36;
 label=2;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _crc32_A1($buf,$size,$crc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$buf;
 $2=$size;
 $3=$crc;
 var $4=$3;
 var $5=$4^-1;
 $3=$5;
 label=2;break;
 case 2: 
 var $7=$2;
 var $8=((($7)-(1))|0);
 $2=$8;
 var $9=($7|0)!=0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$1;
 var $12=(($11+1)|0);
 $1=$12;
 var $13=HEAP8[($11)];
 var $14=($13&255);
 var $15=$3;
 var $16=$15&255;
 var $17=$14^$16;
 var $18=((31040+($17<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$3;
 var $21=$20>>>8;
 var $22=$19^$21;
 $3=$22;
 label=2;break;
 case 4: 
 var $24=$3;
 var $25=$24^-1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _crc32_A2($buf,$size,$crc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$buf;
 $2=$size;
 $3=$crc;
 label=2;break;
 case 2: 
 var $5=$2;
 var $6=((($5)-(1))|0);
 $2=$6;
 var $7=($5|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$1;
 var $10=(($9+1)|0);
 $1=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $13=$3;
 var $14=$13&255;
 var $15=$12^$14;
 var $16=((31040+($15<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$3;
 var $19=$18>>>8;
 var $20=$17^$19;
 $3=$20;
 label=2;break;
 case 4: 
 var $22=$3;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_gzip($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $member=sp;
 var $val;
 var $c;
 var $crc=(sp)+(16);
 var $xlen;
 $2=$in;
 $3=$out;
 _crc32_init_A();
 var $4=$2;
 var $5=_read8($4);
 var $6=(($member)|0);
 HEAP8[($6)]=$5;
 var $7=$2;
 var $8=_read8($7);
 var $9=(($member+1)|0);
 HEAP8[($9)]=$8;
 var $10=$2;
 var $11=_read8($10);
 var $12=(($member+2)|0);
 HEAP8[($12)]=$11;
 var $13=$2;
 var $14=_read8($13);
 var $15=(($member+3)|0);
 HEAP8[($15)]=$14;
 var $16=$2;
 var $17=_read32l($16);
 var $18=(($member+4)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$2;
 var $20=_read8($19);
 var $21=(($member+8)|0);
 HEAP8[($21)]=$20;
 var $22=$2;
 var $23=_read8($22);
 var $24=(($member+9)|0);
 HEAP8[($24)]=$23;
 var $25=(($member+2)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=($27|0)!=8;
 if($28){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=24;break;
 case 3: 
 var $31=(($member+3)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=$33&4;
 var $35=($34|0)!=0;
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $37=$2;
 var $38=_read16l($37);
 var $39=($38&65535);
 $xlen=$39;
 var $40=$2;
 var $41=$xlen;
 var $42=_fseek($40,$41,1);
 label=5;break;
 case 5: 
 var $44=(($member+3)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=$46&8;
 var $48=($47|0)!=0;
 if($48){label=6;break;}else{label=10;break;}
 case 6: 
 label=7;break;
 case 7: 
 var $51=$2;
 var $52=_read8($51);
 var $53=($52&255);
 $c=$53;
 label=8;break;
 case 8: 
 var $55=$c;
 var $56=($55|0)!=0;
 if($56){label=7;break;}else{label=9;break;}
 case 9: 
 label=10;break;
 case 10: 
 var $59=(($member+3)|0);
 var $60=HEAP8[($59)];
 var $61=($60&255);
 var $62=$61&16;
 var $63=($62|0)!=0;
 if($63){label=11;break;}else{label=15;break;}
 case 11: 
 label=12;break;
 case 12: 
 var $66=$2;
 var $67=_read8($66);
 var $68=($67&255);
 $c=$68;
 label=13;break;
 case 13: 
 var $70=$c;
 var $71=($70|0)!=0;
 if($71){label=12;break;}else{label=14;break;}
 case 14: 
 label=15;break;
 case 15: 
 var $74=(($member+3)|0);
 var $75=HEAP8[($74)];
 var $76=($75&255);
 var $77=$76&2;
 var $78=($77|0)!=0;
 if($78){label=16;break;}else{label=17;break;}
 case 16: 
 var $80=$2;
 var $81=_read16l($80);
 label=17;break;
 case 17: 
 var $83=$2;
 var $84=$3;
 var $85=_inflate($83,$84,$crc,1);
 $val=$85;
 var $86=$val;
 var $87=($86|0)!=0;
 if($87){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=24;break;
 case 19: 
 var $90=$2;
 var $91=_read32l($90);
 $val=$91;
 var $92=$val;
 var $93=HEAP32[(($crc)>>2)];
 var $94=($92|0)!=($93|0);
 if($94){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=24;break;
 case 21: 
 var $97=$2;
 var $98=_read32l($97);
 $val=$98;
 var $99=$val;
 var $100=$3;
 var $101=_ftell($100);
 var $102=($99|0)!=($101|0);
 if($102){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=24;break;
 case 23: 
 $1=0;
 label=24;break;
 case 24: 
 var $106=$1;
 STACKTOP=sp;return $106;
  default: assert(0, "bad label: " + label);
 }
}
function _decompress($in,$huffman,$bitstream,$huffman_tree_len,$huffman_tree_dist,$out,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $code;
 var $len;
 var $dist;
 var $t;
 var $r;
 var $window;
 var $curr_huffman_leaf;
 var $window_ptr;
 var $curr_leaf;
 $1=$in;
 $2=$huffman;
 $3=$bitstream;
 $4=$huffman_tree_len;
 $5=$huffman_tree_dist;
 $6=$out;
 $7=$data;
 $code=0;
 var $8=$3;
 var $9=_reverse_bitstream($8);
 var $10=$2;
 var $11=(($10+32768)|0);
 var $12=HEAP32[(($11)>>2)];
 $window_ptr=$12;
 var $13=$2;
 var $14=(($13)|0);
 var $15=(($14)|0);
 $window=$15;
 label=2;break;
 case 2: 
 var $17=$4;
 $curr_huffman_leaf=$17;
 $curr_leaf=0;
 label=3;break;
 case 3: 
 var $19=$3;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)<=0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=$1;
 var $25=_fgetc($24);
 var $26=$3;
 var $27=(($26)|0);
 HEAP32[(($27)>>2)]=$25;
 var $28=$3;
 var $29=(($28+4)|0);
 HEAP32[(($29)>>2)]=8;
 label=5;break;
 case 5: 
 var $31=$3;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=6;break;}else{label=9;break;}
 case 6: 
 var $37=$curr_leaf;
 var $38=$4;
 var $39=(($38+((($37)*(6))&-1))|0);
 var $40=(($39+2)|0);
 var $41=HEAP16[(($40)>>1)];
 var $42=(($41<<16)>>16);
 var $43=($42|0)==0;
 if($43){label=7;break;}else{label=8;break;}
 case 7: 
 var $45=$curr_leaf;
 var $46=$4;
 var $47=(($46+((($45)*(6))&-1))|0);
 var $48=(($47)|0);
 var $49=HEAP16[(($48)>>1)];
 var $50=($49&65535);
 $code=$50;
 label=13;break;
 case 8: 
 var $52=$curr_leaf;
 var $53=$4;
 var $54=(($53+((($52)*(6))&-1))|0);
 var $55=(($54+2)|0);
 var $56=HEAP16[(($55)>>1)];
 var $57=(($56<<16)>>16);
 $curr_leaf=$57;
 label=12;break;
 case 9: 
 var $59=$curr_leaf;
 var $60=$4;
 var $61=(($60+((($59)*(6))&-1))|0);
 var $62=(($61+4)|0);
 var $63=HEAP16[(($62)>>1)];
 var $64=(($63<<16)>>16);
 var $65=($64|0)==0;
 if($65){label=10;break;}else{label=11;break;}
 case 10: 
 var $67=$curr_leaf;
 var $68=$4;
 var $69=(($68+((($67)*(6))&-1))|0);
 var $70=(($69)|0);
 var $71=HEAP16[(($70)>>1)];
 var $72=($71&65535);
 $code=$72;
 label=13;break;
 case 11: 
 var $74=$curr_leaf;
 var $75=$4;
 var $76=(($75+((($74)*(6))&-1))|0);
 var $77=(($76+4)|0);
 var $78=HEAP16[(($77)>>1)];
 var $79=(($78<<16)>>16);
 $curr_leaf=$79;
 label=12;break;
 case 12: 
 var $81=$3;
 var $82=(($81+4)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=((($83)-(1))|0);
 HEAP32[(($82)>>2)]=$84;
 var $85=$3;
 var $86=(($85)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$87>>>1;
 HEAP32[(($86)>>2)]=$88;
 label=3;break;
 case 13: 
 var $90=$code;
 var $91=($90|0)<256;
 if($91){label=14;break;}else{label=17;break;}
 case 14: 
 var $93=$code;
 var $94=(($93)&255);
 var $95=$window_ptr;
 var $96=((($95)+(1))|0);
 $window_ptr=$96;
 var $97=$window;
 var $98=(($97+$95)|0);
 HEAP8[($98)]=$94;
 var $99=$window_ptr;
 var $100=($99|0)>=32768;
 if($100){label=15;break;}else{label=16;break;}
 case 15: 
 var $102=$window;
 var $103=$6;
 var $104=_fwrite($102,1,32768,$103);
 var $105=$2;
 var $106=(($105)|0);
 var $107=(($106)|0);
 var $108=$2;
 var $109=(($108+32772)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=_crc32_A2($107,32768,$110);
 var $112=$2;
 var $113=(($112+32772)|0);
 HEAP32[(($113)>>2)]=$111;
 $window_ptr=0;
 label=16;break;
 case 16: 
 label=63;break;
 case 17: 
 var $116=$code;
 var $117=($116|0)==256;
 if($117){label=18;break;}else{label=19;break;}
 case 18: 
 label=64;break;
 case 19: 
 var $120=$code;
 var $121=((($120)-(257))|0);
 $code=$121;
 var $122=$code;
 var $123=((5992+($122<<2))|0);
 var $124=HEAP32[(($123)>>2)];
 $len=$124;
 var $125=$code;
 var $126=((5872+($125<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)!=0;
 if($128){label=20;break;}else{label=24;break;}
 case 20: 
 label=21;break;
 case 21: 
 var $131=$3;
 var $132=(($131+4)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$code;
 var $135=((5872+($134<<2))|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($133|0)<($136|0);
 if($137){label=22;break;}else{label=23;break;}
 case 22: 
 var $139=$1;
 var $140=_fgetc($139);
 var $141=$3;
 var $142=(($141+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$140<<$143;
 var $145=$3;
 var $146=(($145)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=((($147)+($144))|0);
 HEAP32[(($146)>>2)]=$148;
 var $149=$3;
 var $150=(($149+4)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=((($151)+(8))|0);
 HEAP32[(($150)>>2)]=$152;
 label=21;break;
 case 23: 
 var $154=$len;
 var $155=$3;
 var $156=(($155)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$code;
 var $159=((5872+($158<<2))|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=1<<$160;
 var $162=((($161)-(1))|0);
 var $163=$157&$162;
 var $164=((($154)+($163))|0);
 $len=$164;
 var $165=$code;
 var $166=((5872+($165<<2))|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$3;
 var $169=(($168+4)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=((($170)-($167))|0);
 HEAP32[(($169)>>2)]=$171;
 var $172=$code;
 var $173=((5872+($172<<2))|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$3;
 var $176=(($175)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=$177>>>($174>>>0);
 HEAP32[(($176)>>2)]=$178;
 label=24;break;
 case 24: 
 var $180=$5;
 var $181=($180|0)==0;
 if($181){label=26;break;}else{label=25;break;}
 case 25: 
 var $183=$2;
 var $184=(($183+34060)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($185|0)==0;
 if($186){label=26;break;}else{label=29;break;}
 case 26: 
 var $188=$3;
 var $189=(($188+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($190|0)<5;
 if($191){label=27;break;}else{label=28;break;}
 case 27: 
 var $193=$1;
 var $194=_fgetc($193);
 var $195=$3;
 var $196=(($195+4)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=$194<<$197;
 var $199=$3;
 var $200=(($199)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=((($201)+($198))|0);
 HEAP32[(($200)>>2)]=$202;
 var $203=$3;
 var $204=(($203+4)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=((($205)+(8))|0);
 HEAP32[(($204)>>2)]=$206;
 label=28;break;
 case 28: 
 var $208=$3;
 var $209=(($208)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=$210&31;
 $code=$211;
 var $212=$code;
 var $213=$212&255;
 var $214=((2688+$213)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=$216>>3;
 $code=$217;
 var $218=$3;
 var $219=(($218+4)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=((($220)-(5))|0);
 HEAP32[(($219)>>2)]=$221;
 var $222=$3;
 var $223=(($222)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$224>>>5;
 HEAP32[(($223)>>2)]=$225;
 label=41;break;
 case 29: 
 var $227=$4;
 $curr_huffman_leaf=$227;
 $curr_leaf=0;
 label=30;break;
 case 30: 
 var $229=$3;
 var $230=(($229+4)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($231|0)<=0;
 if($232){label=31;break;}else{label=32;break;}
 case 31: 
 var $234=$1;
 var $235=_fgetc($234);
 var $236=$3;
 var $237=(($236)|0);
 HEAP32[(($237)>>2)]=$235;
 var $238=$3;
 var $239=(($238+4)|0);
 HEAP32[(($239)>>2)]=8;
 label=32;break;
 case 32: 
 var $241=$3;
 var $242=(($241)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$243&1;
 var $245=($244|0)==0;
 if($245){label=33;break;}else{label=36;break;}
 case 33: 
 var $247=$curr_leaf;
 var $248=$5;
 var $249=(($248+((($247)*(6))&-1))|0);
 var $250=(($249+2)|0);
 var $251=HEAP16[(($250)>>1)];
 var $252=(($251<<16)>>16);
 var $253=($252|0)==0;
 if($253){label=34;break;}else{label=35;break;}
 case 34: 
 var $255=$curr_leaf;
 var $256=$5;
 var $257=(($256+((($255)*(6))&-1))|0);
 var $258=(($257)|0);
 var $259=HEAP16[(($258)>>1)];
 var $260=($259&65535);
 $code=$260;
 label=40;break;
 case 35: 
 var $262=$curr_leaf;
 var $263=$5;
 var $264=(($263+((($262)*(6))&-1))|0);
 var $265=(($264+2)|0);
 var $266=HEAP16[(($265)>>1)];
 var $267=(($266<<16)>>16);
 $curr_leaf=$267;
 label=39;break;
 case 36: 
 var $269=$curr_leaf;
 var $270=$5;
 var $271=(($270+((($269)*(6))&-1))|0);
 var $272=(($271+4)|0);
 var $273=HEAP16[(($272)>>1)];
 var $274=(($273<<16)>>16);
 var $275=($274|0)==0;
 if($275){label=37;break;}else{label=38;break;}
 case 37: 
 var $277=$curr_leaf;
 var $278=$5;
 var $279=(($278+((($277)*(6))&-1))|0);
 var $280=(($279)|0);
 var $281=HEAP16[(($280)>>1)];
 var $282=($281&65535);
 $code=$282;
 label=40;break;
 case 38: 
 var $284=$curr_leaf;
 var $285=$5;
 var $286=(($285+((($284)*(6))&-1))|0);
 var $287=(($286+4)|0);
 var $288=HEAP16[(($287)>>1)];
 var $289=(($288<<16)>>16);
 $curr_leaf=$289;
 label=39;break;
 case 39: 
 var $291=$3;
 var $292=(($291+4)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=((($293)-(1))|0);
 HEAP32[(($292)>>2)]=$294;
 var $295=$3;
 var $296=(($295)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=$297>>>1;
 HEAP32[(($296)>>2)]=$298;
 label=30;break;
 case 40: 
 label=41;break;
 case 41: 
 var $301=$code;
 var $302=((10272+($301<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 $dist=$303;
 var $304=$code;
 var $305=((10152+($304<<2))|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=($306|0)!=0;
 if($307){label=42;break;}else{label=46;break;}
 case 42: 
 label=43;break;
 case 43: 
 var $310=$3;
 var $311=(($310+4)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=$code;
 var $314=((10152+($313<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($312|0)<($315|0);
 if($316){label=44;break;}else{label=45;break;}
 case 44: 
 var $318=$1;
 var $319=_fgetc($318);
 var $320=$3;
 var $321=(($320+4)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=$319<<$322;
 var $324=$3;
 var $325=(($324)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=((($326)+($323))|0);
 HEAP32[(($325)>>2)]=$327;
 var $328=$3;
 var $329=(($328+4)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=((($330)+(8))|0);
 HEAP32[(($329)>>2)]=$331;
 label=43;break;
 case 45: 
 var $333=$dist;
 var $334=$3;
 var $335=(($334)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=$code;
 var $338=((10152+($337<<2))|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=1<<$339;
 var $341=((($340)-(1))|0);
 var $342=$336&$341;
 var $343=((($333)+($342))|0);
 $dist=$343;
 var $344=$code;
 var $345=((10152+($344<<2))|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=$3;
 var $348=(($347+4)|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=((($349)-($346))|0);
 HEAP32[(($348)>>2)]=$350;
 var $351=$code;
 var $352=((10152+($351<<2))|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=$3;
 var $355=(($354)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=$356>>>($353>>>0);
 HEAP32[(($355)>>2)]=$357;
 label=46;break;
 case 46: 
 var $359=$window_ptr;
 var $360=$dist;
 var $361=((($359)-($360))|0);
 $r=$361;
 var $362=$r;
 var $363=($362|0)>=0;
 if($363){label=47;break;}else{label=50;break;}
 case 47: 
 var $365=$window_ptr;
 var $366=$len;
 var $367=((($365)+($366))|0);
 var $368=($367|0)<32768;
 if($368){label=48;break;}else{label=50;break;}
 case 48: 
 var $370=$r;
 var $371=$len;
 var $372=((($370)+($371))|0);
 var $373=$window_ptr;
 var $374=($372|0)<($373|0);
 if($374){label=49;break;}else{label=50;break;}
 case 49: 
 var $376=$window;
 var $377=$window_ptr;
 var $378=(($376+$377)|0);
 var $379=$window;
 var $380=$r;
 var $381=(($379+$380)|0);
 var $382=$len;
 assert($382 % 1 === 0);(_memcpy($378, $381, $382)|0);
 var $383=$window_ptr;
 var $384=$len;
 var $385=((($383)+($384))|0);
 $window_ptr=$385;
 label=61;break;
 case 50: 
 var $387=$r;
 var $388=($387|0)<0;
 if($388){label=51;break;}else{label=52;break;}
 case 51: 
 var $390=$r;
 var $391=((($390)+(32768))|0);
 $r=$391;
 label=52;break;
 case 52: 
 $t=0;
 label=53;break;
 case 53: 
 var $394=$t;
 var $395=$len;
 var $396=($394|0)<($395|0);
 if($396){label=54;break;}else{label=60;break;}
 case 54: 
 var $398=$r;
 var $399=((($398)+(1))|0);
 $r=$399;
 var $400=$window;
 var $401=(($400+$398)|0);
 var $402=HEAP8[($401)];
 var $403=$window_ptr;
 var $404=((($403)+(1))|0);
 $window_ptr=$404;
 var $405=$window;
 var $406=(($405+$403)|0);
 HEAP8[($406)]=$402;
 var $407=$r;
 var $408=($407|0)>=32768;
 if($408){label=55;break;}else{label=56;break;}
 case 55: 
 $r=0;
 label=56;break;
 case 56: 
 var $411=$window_ptr;
 var $412=($411|0)>=32768;
 if($412){label=57;break;}else{label=58;break;}
 case 57: 
 var $414=$window;
 var $415=$6;
 var $416=_fwrite($414,1,32768,$415);
 var $417=$2;
 var $418=(($417)|0);
 var $419=(($418)|0);
 var $420=$2;
 var $421=(($420+32772)|0);
 var $422=HEAP32[(($421)>>2)];
 var $423=_crc32_A2($419,32768,$422);
 var $424=$2;
 var $425=(($424+32772)|0);
 HEAP32[(($425)>>2)]=$423;
 $window_ptr=0;
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 var $428=$t;
 var $429=((($428)+(1))|0);
 $t=$429;
 label=53;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 label=63;break;
 case 63: 
 label=2;break;
 case 64: 
 var $435=$window_ptr;
 var $436=$2;
 var $437=(($436+32768)|0);
 HEAP32[(($437)>>2)]=$435;
 var $438=$3;
 var $439=_reverse_bitstream($438);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _reverse_bitstream($bitstream){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $i;
 $1=$bitstream;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4>>>24;
 var $6=$5&255;
 var $7=((2688+$6)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 var $10=$1;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12>>>16;
 var $14=$13&255;
 var $15=((2688+$14)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17<<8;
 var $19=$9|$18;
 var $20=$1;
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22>>>8;
 var $24=$23&255;
 var $25=((2688+$24)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=$27<<16;
 var $29=$19|$28;
 var $30=$1;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32&255;
 var $34=((2688+$33)|0);
 var $35=HEAP8[($34)];
 var $36=($35&255);
 var $37=$36<<24;
 var $38=$29|$37;
 $i=$38;
 var $39=$i;
 var $40=$1;
 var $41=(($40+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(((32)-($42))|0);
 var $44=$39>>>($43>>>0);
 $i=$44;
 var $45=$i;
 var $46=$1;
 var $47=(($46)|0);
 HEAP32[(($47)>>2)]=$45;
 STACKTOP=sp;return 0;
}
function _inflate($in,$out,$checksum,$is_zip){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+34080)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $CMF;
 var $FLG;
 var $DICT;
 var $bitstream=sp;
 var $huffman=(sp)+(8);
 var $comp_method;
 var $block_len;
 var $bfinal;
 var $t;
 var $huffman_tree_len;
 var $huffman_tree_dist;
 var $data=(sp)+(34072);
 var $res;
 $2=$in;
 $3=$out;
 $4=$checksum;
 $5=$is_zip;
 var $6=$huffman;
 _memset($6, 0, 34064)|0;
 var $7=(($huffman+32772)|0);
 HEAP32[(($7)>>2)]=-1;
 var $8=(($data)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=_malloc(6144);
 var $10=$9;
 $huffman_tree_len=$10;
 var $11=$huffman_tree_len;
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 label=52;break;
 case 3: 
 var $15=_malloc(6144);
 var $16=$15;
 $huffman_tree_dist=$16;
 var $17=$huffman_tree_dist;
 var $18=($17|0)==0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 label=51;break;
 case 5: 
 var $21=(($huffman+32768)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=$5;
 var $23=($22|0)!=0;
 if($23){label=13;break;}else{label=6;break;}
 case 6: 
 var $25=$2;
 var $26=_fgetc($25);
 var $27=(($26)&255);
 $CMF=$27;
 var $28=$2;
 var $29=_fgetc($28);
 var $30=(($29)&255);
 $FLG=$30;
 var $31=$CMF;
 var $32=($31&255);
 var $33=$32&15;
 var $34=($33|0)!=8;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 label=50;break;
 case 8: 
 var $37=$FLG;
 var $38=($37&255);
 var $39=$38&32;
 var $40=($39|0)!=0;
 if($40){label=9;break;}else{label=10;break;}
 case 9: 
 var $42=$2;
 var $43=_read32b($42);
 $DICT=$43;
 label=10;break;
 case 10: 
 var $45=$CMF;
 var $46=($45&255);
 var $47=($46<<8);
 var $48=$FLG;
 var $49=($48&255);
 var $50=((($47)+($49))|0);
 var $51=(((($50|0))%(31))&-1);
 var $52=($51|0)!=0;
 if($52){label=11;break;}else{label=12;break;}
 case 11: 
 label=50;break;
 case 12: 
 label=13;break;
 case 13: 
 var $56=(($bitstream)|0);
 HEAP32[(($56)>>2)]=0;
 var $57=(($bitstream+4)|0);
 HEAP32[(($57)>>2)]=0;
 label=14;break;
 case 14: 
 var $59=(($bitstream+4)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)<3;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=$2;
 var $64=_fgetc($63);
 var $65=((2688+$64)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=(($bitstream)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69<<8;
 var $71=((($67)+($70))|0);
 var $72=(($bitstream)|0);
 HEAP32[(($72)>>2)]=$71;
 var $73=(($bitstream+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=((($74)+(8))|0);
 HEAP32[(($73)>>2)]=$75;
 label=16;break;
 case 16: 
 var $77=(($bitstream)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($bitstream+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=((($80)-(1))|0);
 var $82=$78>>>($81>>>0);
 $bfinal=$82;
 var $83=(($bitstream)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($bitstream+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=((($86)-(3))|0);
 var $88=$84>>>($87>>>0);
 var $89=$88&3;
 $comp_method=$89;
 var $90=(($bitstream+4)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=((($91)-(3))|0);
 HEAP32[(($90)>>2)]=$92;
 var $93=(($bitstream)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($bitstream+4)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=1<<$96;
 var $98=((($97)-(1))|0);
 var $99=$94&$98;
 var $100=(($bitstream)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=$comp_method;
 var $102=($101|0)==0;
 if($102){label=17;break;}else{label=26;break;}
 case 17: 
 var $104=(($bitstream)|0);
 HEAP32[(($104)>>2)]=0;
 var $105=(($bitstream+4)|0);
 HEAP32[(($105)>>2)]=0;
 var $106=$2;
 var $107=_read16l($106);
 var $108=($107&65535);
 $block_len=$108;
 var $109=$2;
 var $110=_read16l($109);
 var $111=($110&65535);
 var $112=$111^65535;
 $t=$112;
 var $113=$block_len;
 var $114=$t;
 var $115=($113|0)!=($114|0);
 if($115){label=18;break;}else{label=19;break;}
 case 18: 
 label=44;break;
 case 19: 
 $t=0;
 label=20;break;
 case 20: 
 var $119=$t;
 var $120=$block_len;
 var $121=($119|0)<($120|0);
 if($121){label=21;break;}else{label=25;break;}
 case 21: 
 var $123=$2;
 var $124=_fgetc($123);
 var $125=(($124)&255);
 var $126=(($huffman+32768)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($126)>>2)]=$128;
 var $129=(($huffman)|0);
 var $130=(($129+$127)|0);
 HEAP8[($130)]=$125;
 var $131=(($huffman+32768)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($132|0)>=32768;
 if($133){label=22;break;}else{label=23;break;}
 case 22: 
 var $135=(($huffman)|0);
 var $136=(($135)|0);
 var $137=$3;
 var $138=_fwrite($136,1,32768,$137);
 var $139=(($huffman)|0);
 var $140=(($139)|0);
 var $141=(($huffman+32772)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=_crc32_A2($140,32768,$142);
 var $144=(($huffman+32772)|0);
 HEAP32[(($144)>>2)]=$143;
 var $145=(($huffman+32768)|0);
 HEAP32[(($145)>>2)]=0;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $148=$t;
 var $149=((($148)+(1))|0);
 $t=$149;
 label=20;break;
 case 25: 
 label=41;break;
 case 26: 
 var $152=$comp_method;
 var $153=($152|0)==2;
 if($153){label=27;break;}else{label=32;break;}
 case 27: 
 var $155=(($data)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){label=28;break;}else{label=31;break;}
 case 28: 
 var $159=(($data)|0);
 var $160=_load_fixed_huffman($huffman,$159);
 var $161=($160|0)<0;
 if($161){label=29;break;}else{label=30;break;}
 case 29: 
 label=49;break;
 case 30: 
 label=31;break;
 case 31: 
 var $165=$2;
 var $166=(($data)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=$3;
 var $169=_decompress($165,$huffman,$bitstream,$167,0,$168,$data);
 label=40;break;
 case 32: 
 var $171=$comp_method;
 var $172=($171|0)==1;
 if($172){label=33;break;}else{label=36;break;}
 case 33: 
 var $174=$2;
 var $175=$huffman_tree_len;
 var $176=$huffman_tree_dist;
 var $177=_load_dynamic_huffman($174,$huffman,$bitstream,$175,$176);
 $res=$177;
 var $178=$res;
 var $179=($178|0)<0;
 if($179){label=34;break;}else{label=35;break;}
 case 34: 
 label=49;break;
 case 35: 
 var $182=$2;
 var $183=$huffman_tree_len;
 var $184=$huffman_tree_dist;
 var $185=$3;
 var $186=_decompress($182,$huffman,$bitstream,$183,$184,$185,$data);
 label=39;break;
 case 36: 
 var $188=$comp_method;
 var $189=($188|0)==3;
 if($189){label=37;break;}else{label=38;break;}
 case 37: 
 label=44;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $195=$bfinal;
 var $196=($195|0)==1;
 if($196){label=42;break;}else{label=43;break;}
 case 42: 
 label=44;break;
 case 43: 
 label=14;break;
 case 44: 
 var $200=(($huffman+32768)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($201|0)!=0;
 if($202){label=45;break;}else{label=46;break;}
 case 45: 
 var $204=(($huffman)|0);
 var $205=(($204)|0);
 var $206=(($huffman+32768)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$3;
 var $209=_fwrite($205,1,$207,$208);
 var $210=(($huffman)|0);
 var $211=(($210)|0);
 var $212=(($huffman+32768)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($huffman+32772)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=_crc32_A2($211,$213,$215);
 var $217=(($huffman+32772)|0);
 HEAP32[(($217)>>2)]=$216;
 label=46;break;
 case 46: 
 var $219=$huffman_tree_dist;
 var $220=$219;
 _free($220);
 var $221=$huffman_tree_len;
 var $222=$221;
 _free($222);
 var $223=(($huffman+32772)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$224^-1;
 var $226=$4;
 HEAP32[(($226)>>2)]=$225;
 var $227=_kunzip_inflate_free($data);
 var $228=(($bitstream+4)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($229|0)==8;
 if($230){label=47;break;}else{label=48;break;}
 case 47: 
 var $232=_reverse_bitstream($bitstream);
 var $233=(($bitstream)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$2;
 var $236=_ungetc($234,$235);
 label=48;break;
 case 48: 
 $1=0;
 label=53;break;
 case 49: 
 var $239=_kunzip_inflate_free($data);
 label=50;break;
 case 50: 
 var $241=$huffman_tree_dist;
 var $242=$241;
 _free($242);
 label=51;break;
 case 51: 
 var $244=$huffman_tree_len;
 var $245=$244;
 _free($245);
 label=52;break;
 case 52: 
 $1=-1;
 label=53;break;
 case 53: 
 var $248=$1;
 STACKTOP=sp;return $248;
  default: assert(0, "bad label: " + label);
 }
}
function _load_fixed_huffman($huffman,$huffman_tree_ptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $huffman_tree;
 var $next_leaf;
 $2=$huffman;
 $3=$huffman_tree_ptr;
 var $4=$2;
 var $5=(($4+34060)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=_malloc(3600);
 var $7=$6;
 $huffman_tree=$7;
 var $8=$huffman_tree;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $12=$huffman_tree;
 var $13=$3;
 HEAP32[(($13)>>2)]=$12;
 var $14=$huffman_tree;
 var $15=(($14+2)|0);
 HEAP16[(($15)>>1)]=0;
 var $16=$huffman_tree;
 var $17=(($16+4)|0);
 HEAP16[(($17)>>1)]=0;
 $next_leaf=0;
 var $18=$huffman_tree;
 var $19=$next_leaf;
 var $20=_add_static_codes_to_tree($18,8,144,48,0,$19);
 $next_leaf=$20;
 var $21=$huffman_tree;
 var $22=$next_leaf;
 var $23=_add_static_codes_to_tree($21,9,112,400,144,$22);
 $next_leaf=$23;
 var $24=$huffman_tree;
 var $25=$next_leaf;
 var $26=_add_static_codes_to_tree($24,7,24,0,256,$25);
 $next_leaf=$26;
 var $27=$huffman_tree;
 var $28=$next_leaf;
 var $29=_add_static_codes_to_tree($27,8,8,192,280,$28);
 $next_leaf=$29;
 $1=0;
 label=4;break;
 case 4: 
 var $31=$1;
 STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }
}
function _load_dynamic_huffman($in,$huffman,$bitstream,$huffman_tree_len,$huffman_tree_dist){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $hlit;
 var $hdist;
 var $hclen;
 var $hclen_code_lengths=sp;
 var $hclen_code=(sp)+(80);
 var $bl_count=(sp)+(160);
 var $next_code=(sp)+(240);
 var $code;
 var $bits;
 var $t;
 var $res;
 $2=$in;
 $3=$huffman;
 $4=$bitstream;
 $5=$huffman_tree_len;
 $6=$huffman_tree_dist;
 label=2;break;
 case 2: 
 var $8=$4;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)<14;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=$2;
 var $14=_fgetc($13);
 var $15=((2688+$14)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$4;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20<<8;
 var $22=((($17)+($21))|0);
 var $23=$4;
 var $24=(($23)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=$4;
 var $26=(($25+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($27)+(8))|0);
 HEAP32[(($26)>>2)]=$28;
 label=2;break;
 case 4: 
 var $30=$4;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$4;
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)-(5))|0);
 var $37=$32>>>($36>>>0);
 $hlit=$37;
 var $38=$4;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)-(5))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=$4;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$4;
 var $46=(($45+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=1<<$47;
 var $49=((($48)-(1))|0);
 var $50=$44&$49;
 var $51=$4;
 var $52=(($51)|0);
 HEAP32[(($52)>>2)]=$50;
 var $53=$4;
 var $54=(($53)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$4;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=((($58)-(5))|0);
 var $60=$55>>>($59>>>0);
 $hdist=$60;
 var $61=$4;
 var $62=(($61+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=((($63)-(5))|0);
 HEAP32[(($62)>>2)]=$64;
 var $65=$4;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$4;
 var $69=(($68+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=1<<$70;
 var $72=((($71)-(1))|0);
 var $73=$67&$72;
 var $74=$4;
 var $75=(($74)|0);
 HEAP32[(($75)>>2)]=$73;
 var $76=$4;
 var $77=(($76)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$4;
 var $80=(($79+4)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=((($81)-(4))|0);
 var $83=$78>>>($82>>>0);
 $hclen=$83;
 var $84=$4;
 var $85=(($84+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=((($86)-(4))|0);
 HEAP32[(($85)>>2)]=$87;
 var $88=$4;
 var $89=(($88)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$4;
 var $92=(($91+4)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=1<<$93;
 var $95=((($94)-(1))|0);
 var $96=$90&$95;
 var $97=$4;
 var $98=(($97)|0);
 HEAP32[(($98)>>2)]=$96;
 var $99=$hlit;
 var $100=((2688+$99)|0);
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$102>>3;
 var $104=((($103)+(257))|0);
 $hlit=$104;
 var $105=$hdist;
 var $106=((2688+$105)|0);
 var $107=HEAP8[($106)];
 var $108=($107&255);
 var $109=$108>>3;
 var $110=((($109)+(1))|0);
 $hdist=$110;
 var $111=$hclen;
 var $112=((2688+$111)|0);
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=$114>>4;
 var $116=((($115)+(4))|0);
 $hclen=$116;
 var $117=$hclen_code_lengths;
 _memset($117, 0, 76)|0;
 var $118=$hclen_code;
 _memset($118, 0, 76)|0;
 var $119=$bl_count;
 _memset($119, 0, 76)|0;
 $t=0;
 label=5;break;
 case 5: 
 var $121=$t;
 var $122=$hclen;
 var $123=($121|0)<($122|0);
 if($123){label=6;break;}else{label=10;break;}
 case 6: 
 var $125=$4;
 var $126=(($125+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)<3;
 if($128){label=7;break;}else{label=8;break;}
 case 7: 
 var $130=$2;
 var $131=_fgetc($130);
 var $132=((2688+$131)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$4;
 var $136=(($135)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$137<<8;
 var $139=((($134)+($138))|0);
 var $140=$4;
 var $141=(($140)|0);
 HEAP32[(($141)>>2)]=$139;
 var $142=$4;
 var $143=(($142+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=((($144)+(8))|0);
 HEAP32[(($143)>>2)]=$145;
 label=8;break;
 case 8: 
 var $147=$4;
 var $148=(($147)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$4;
 var $151=(($150+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=((($152)-(3))|0);
 var $154=$149>>>($153>>>0);
 var $155=$t;
 var $156=((9512+($155<<2))|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($hclen_code_lengths+($157<<2))|0);
 HEAP32[(($158)>>2)]=$154;
 var $159=$t;
 var $160=((9512+($159<<2))|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($hclen_code_lengths+($161<<2))|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=((2688+$163)|0);
 var $165=HEAP8[($164)];
 var $166=($165&255);
 var $167=$166>>5;
 var $168=$t;
 var $169=((9512+($168<<2))|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($hclen_code_lengths+($170<<2))|0);
 HEAP32[(($171)>>2)]=$167;
 var $172=$4;
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=((($174)-(3))|0);
 HEAP32[(($173)>>2)]=$175;
 var $176=$4;
 var $177=(($176)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$4;
 var $180=(($179+4)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=1<<$181;
 var $183=((($182)-(1))|0);
 var $184=$178&$183;
 var $185=$4;
 var $186=(($185)|0);
 HEAP32[(($186)>>2)]=$184;
 label=9;break;
 case 9: 
 var $188=$t;
 var $189=((($188)+(1))|0);
 $t=$189;
 label=5;break;
 case 10: 
 $t=0;
 label=11;break;
 case 11: 
 var $192=$t;
 var $193=($192|0)<19;
 if($193){label=12;break;}else{label=14;break;}
 case 12: 
 var $195=$t;
 var $196=(($hclen_code_lengths+($195<<2))|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($bl_count+($197<<2))|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=((($199)+(1))|0);
 HEAP32[(($198)>>2)]=$200;
 label=13;break;
 case 13: 
 var $202=$t;
 var $203=((($202)+(1))|0);
 $t=$203;
 label=11;break;
 case 14: 
 $code=0;
 var $205=(($bl_count)|0);
 HEAP32[(($205)>>2)]=0;
 $bits=1;
 label=15;break;
 case 15: 
 var $207=$bits;
 var $208=($207|0)<=7;
 if($208){label=16;break;}else{label=18;break;}
 case 16: 
 var $210=$code;
 var $211=$bits;
 var $212=((($211)-(1))|0);
 var $213=(($bl_count+($212<<2))|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=((($210)+($214))|0);
 var $216=$215<<1;
 $code=$216;
 var $217=$code;
 var $218=$bits;
 var $219=(($next_code+($218<<2))|0);
 HEAP32[(($219)>>2)]=$217;
 label=17;break;
 case 17: 
 var $221=$bits;
 var $222=((($221)+(1))|0);
 $bits=$222;
 label=15;break;
 case 18: 
 $t=0;
 label=19;break;
 case 19: 
 var $225=$t;
 var $226=($225|0)<19;
 if($226){label=20;break;}else{label=24;break;}
 case 20: 
 var $228=$t;
 var $229=(($hclen_code_lengths+($228<<2))|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($230|0)!=0;
 if($231){label=21;break;}else{label=22;break;}
 case 21: 
 var $233=$t;
 var $234=(($hclen_code_lengths+($233<<2))|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=(($next_code+($235<<2))|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$t;
 var $239=(($hclen_code+($238<<2))|0);
 HEAP32[(($239)>>2)]=$237;
 var $240=$t;
 var $241=(($hclen_code_lengths+($240<<2))|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($next_code+($242<<2))|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=((($244)+(1))|0);
 HEAP32[(($243)>>2)]=$245;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $248=$t;
 var $249=((($248)+(1))|0);
 $t=$249;
 label=19;break;
 case 24: 
 var $251=$3;
 var $252=(($251+32776)|0);
 var $253=$252;
 _memset($253, 0, 1152)|0;
 var $254=$2;
 var $255=$4;
 var $256=$3;
 var $257=(($256+32776)|0);
 var $258=(($257)|0);
 var $259=$hlit;
 var $260=(($hclen_code_lengths)|0);
 var $261=(($hclen_code)|0);
 var $262=$5;
 var $263=_load_codes($254,$255,$258,$259,$260,$261,$262);
 $res=$263;
 var $264=$res;
 var $265=($264|0)<0;
 if($265){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=32;break;
 case 26: 
 var $268=$hdist;
 var $269=($268|0)==0;
 if($269){label=27;break;}else{label=28;break;}
 case 27: 
 var $271=$3;
 var $272=(($271+34060)|0);
 HEAP32[(($272)>>2)]=0;
 label=31;break;
 case 28: 
 var $274=$hdist;
 var $275=$3;
 var $276=(($275+34060)|0);
 HEAP32[(($276)>>2)]=$274;
 var $277=$3;
 var $278=(($277+33928)|0);
 var $279=$278;
 _memset($279, 0, 132)|0;
 var $280=$2;
 var $281=$4;
 var $282=$3;
 var $283=(($282+33928)|0);
 var $284=(($283)|0);
 var $285=$hdist;
 var $286=(($hclen_code_lengths)|0);
 var $287=(($hclen_code)|0);
 var $288=$6;
 var $289=_load_codes($280,$281,$284,$285,$286,$287,$288);
 $res=$289;
 var $290=$res;
 var $291=($290|0)<0;
 if($291){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=32;break;
 case 30: 
 label=31;break;
 case 31: 
 $1=0;
 label=32;break;
 case 32: 
 var $296=$1;
 STACKTOP=sp;return $296;
  default: assert(0, "bad label: " + label);
 }
}
function _kunzip_inflate_free($data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$data;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 _free($10);
 label=3;break;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _load_codes($in,$bitstream,$lengths,$count,$hclen_code_length,$hclen_code,$huffman_tree){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $r;
 var $t;
 var $c;
 var $x;
 var $code;
 var $curr_code;
 var $bl_count=sp;
 var $next_code=(sp)+(2048);
 var $bits;
 var $max_bits;
 var $next_leaf;
 var $curr_leaf;
 $2=$in;
 $3=$bitstream;
 $4=$lengths;
 $5=$count;
 $6=$hclen_code_length;
 $7=$hclen_code;
 $8=$huffman_tree;
 $r=0;
 label=2;break;
 case 2: 
 var $10=$r;
 var $11=$5;
 var $12=($10|0)<($11|0);
 if($12){label=3;break;}else{label=40;break;}
 case 3: 
 $t=0;
 label=4;break;
 case 4: 
 var $15=$t;
 var $16=($15|0)<19;
 if($16){label=5;break;}else{label=14;break;}
 case 5: 
 var $18=$t;
 var $19=$6;
 var $20=(($19+($18<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 label=13;break;
 case 7: 
 label=8;break;
 case 8: 
 var $26=$3;
 var $27=(($26+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$t;
 var $30=$6;
 var $31=(($30+($29<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($28|0)<($32|0);
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=$2;
 var $36=_fgetc($35);
 var $37=((2688+$36)|0);
 var $38=HEAP8[($37)];
 var $39=($38&255);
 var $40=$3;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42<<8;
 var $44=((($39)+($43))|0);
 var $45=$3;
 var $46=(($45)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$3;
 var $48=(($47+4)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=((($49)+(8))|0);
 HEAP32[(($48)>>2)]=$50;
 label=8;break;
 case 10: 
 var $52=$3;
 var $53=(($52)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$3;
 var $56=(($55+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$t;
 var $59=$6;
 var $60=(($59+($58<<2))|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=((($57)-($61))|0);
 var $63=$54>>>($62>>>0);
 $curr_code=$63;
 var $64=$curr_code;
 var $65=$t;
 var $66=$7;
 var $67=(($66+($65<<2))|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($64|0)==($68|0);
 if($69){label=11;break;}else{label=12;break;}
 case 11: 
 var $71=$t;
 var $72=$6;
 var $73=(($72+($71<<2))|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$3;
 var $76=(($75+4)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=((($77)-($74))|0);
 HEAP32[(($76)>>2)]=$78;
 var $79=$3;
 var $80=(($79)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$3;
 var $83=(($82+4)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=1<<$84;
 var $86=((($85)-(1))|0);
 var $87=$81&$86;
 var $88=$3;
 var $89=(($88)|0);
 HEAP32[(($89)>>2)]=$87;
 label=14;break;
 case 12: 
 label=13;break;
 case 13: 
 var $92=$t;
 var $93=((($92)+(1))|0);
 $t=$93;
 label=4;break;
 case 14: 
 var $95=$t;
 var $96=($95|0)<=15;
 if($96){label=15;break;}else{label=16;break;}
 case 15: 
 var $98=$t;
 var $99=$r;
 var $100=((($99)+(1))|0);
 $r=$100;
 var $101=$4;
 var $102=(($101+($99<<2))|0);
 HEAP32[(($102)>>2)]=$98;
 label=39;break;
 case 16: 
 var $104=$t;
 var $105=($104|0)==16;
 if($105){label=17;break;}else{label=27;break;}
 case 17: 
 var $107=$r;
 var $108=($107|0)!=0;
 if($108){label=18;break;}else{label=19;break;}
 case 18: 
 var $110=$r;
 var $111=((($110)-(1))|0);
 var $112=$4;
 var $113=(($112+($111<<2))|0);
 var $114=HEAP32[(($113)>>2)];
 $code=$114;
 label=20;break;
 case 19: 
 $code=0;
 label=20;break;
 case 20: 
 var $117=$3;
 var $118=(($117+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)<2;
 if($120){label=21;break;}else{label=22;break;}
 case 21: 
 var $122=$2;
 var $123=_fgetc($122);
 var $124=((2688+$123)|0);
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$3;
 var $128=(($127)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=$129<<8;
 var $131=((($126)+($130))|0);
 var $132=$3;
 var $133=(($132)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=$3;
 var $135=(($134+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=((($136)+(8))|0);
 HEAP32[(($135)>>2)]=$137;
 label=22;break;
 case 22: 
 var $139=$3;
 var $140=(($139)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=$3;
 var $143=(($142+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=((($144)-(2))|0);
 var $146=$141>>>($145>>>0);
 var $147=((2688+$146)|0);
 var $148=HEAP8[($147)];
 var $149=($148&255);
 var $150=$149>>6;
 $x=$150;
 var $151=$3;
 var $152=(($151+4)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=((($153)-(2))|0);
 HEAP32[(($152)>>2)]=$154;
 var $155=$3;
 var $156=(($155)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$3;
 var $159=(($158+4)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=1<<$160;
 var $162=((($161)-(1))|0);
 var $163=$157&$162;
 var $164=$3;
 var $165=(($164)|0);
 HEAP32[(($165)>>2)]=$163;
 $c=0;
 label=23;break;
 case 23: 
 var $167=$c;
 var $168=$x;
 var $169=((($168)+(3))|0);
 var $170=($167|0)<($169|0);
 if($170){label=24;break;}else{label=26;break;}
 case 24: 
 var $172=$code;
 var $173=$r;
 var $174=((($173)+(1))|0);
 $r=$174;
 var $175=$4;
 var $176=(($175+($173<<2))|0);
 HEAP32[(($176)>>2)]=$172;
 label=25;break;
 case 25: 
 var $178=$c;
 var $179=((($178)+(1))|0);
 $c=$179;
 label=23;break;
 case 26: 
 label=38;break;
 case 27: 
 var $182=$t;
 var $183=($182|0)==17;
 if($183){label=28;break;}else{label=31;break;}
 case 28: 
 var $185=$3;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($187|0)<3;
 if($188){label=29;break;}else{label=30;break;}
 case 29: 
 var $190=$2;
 var $191=_fgetc($190);
 var $192=((2688+$191)|0);
 var $193=HEAP8[($192)];
 var $194=($193&255);
 var $195=$3;
 var $196=(($195)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=$197<<8;
 var $199=((($194)+($198))|0);
 var $200=$3;
 var $201=(($200)|0);
 HEAP32[(($201)>>2)]=$199;
 var $202=$3;
 var $203=(($202+4)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=((($204)+(8))|0);
 HEAP32[(($203)>>2)]=$205;
 label=30;break;
 case 30: 
 var $207=$3;
 var $208=(($207)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$3;
 var $211=(($210+4)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=((($212)-(3))|0);
 var $214=$209>>>($213>>>0);
 var $215=((2688+$214)|0);
 var $216=HEAP8[($215)];
 var $217=($216&255);
 var $218=$217>>5;
 $x=$218;
 var $219=$3;
 var $220=(($219+4)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=((($221)-(3))|0);
 HEAP32[(($220)>>2)]=$222;
 var $223=$3;
 var $224=(($223)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=$3;
 var $227=(($226+4)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=1<<$228;
 var $230=((($229)-(1))|0);
 var $231=$225&$230;
 var $232=$3;
 var $233=(($232)|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=$x;
 var $235=((($234)+(3))|0);
 $c=$235;
 var $236=$r;
 var $237=$4;
 var $238=(($237+($236<<2))|0);
 var $239=$238;
 var $240=$c;
 var $241=($240<<2);
 _memset($239, 0, $241)|0;
 var $242=$r;
 var $243=$c;
 var $244=((($242)+($243))|0);
 $r=$244;
 label=37;break;
 case 31: 
 var $246=$t;
 var $247=($246|0)==18;
 if($247){label=32;break;}else{label=35;break;}
 case 32: 
 var $249=$3;
 var $250=(($249+4)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($251|0)<7;
 if($252){label=33;break;}else{label=34;break;}
 case 33: 
 var $254=$2;
 var $255=_fgetc($254);
 var $256=((2688+$255)|0);
 var $257=HEAP8[($256)];
 var $258=($257&255);
 var $259=$3;
 var $260=(($259)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=$261<<8;
 var $263=((($258)+($262))|0);
 var $264=$3;
 var $265=(($264)|0);
 HEAP32[(($265)>>2)]=$263;
 var $266=$3;
 var $267=(($266+4)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=((($268)+(8))|0);
 HEAP32[(($267)>>2)]=$269;
 label=34;break;
 case 34: 
 var $271=$3;
 var $272=(($271)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=$3;
 var $275=(($274+4)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=((($276)-(7))|0);
 var $278=$273>>>($277>>>0);
 var $279=((2688+$278)|0);
 var $280=HEAP8[($279)];
 var $281=($280&255);
 var $282=$281>>1;
 $x=$282;
 var $283=$3;
 var $284=(($283+4)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=((($285)-(7))|0);
 HEAP32[(($284)>>2)]=$286;
 var $287=$3;
 var $288=(($287)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=$3;
 var $291=(($290+4)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=1<<$292;
 var $294=((($293)-(1))|0);
 var $295=$289&$294;
 var $296=$3;
 var $297=(($296)|0);
 HEAP32[(($297)>>2)]=$295;
 var $298=$x;
 var $299=((($298)+(11))|0);
 $c=$299;
 var $300=$r;
 var $301=$4;
 var $302=(($301+($300<<2))|0);
 var $303=$302;
 var $304=$c;
 var $305=($304<<2);
 _memset($303, 0, $305)|0;
 var $306=$r;
 var $307=$c;
 var $308=((($306)+($307))|0);
 $r=$308;
 label=36;break;
 case 35: 
 var $310=HEAP32[((_stderr)>>2)];
 var $311=$t;
 var $312=_fprintf($310,21008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$311,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=-1;
 label=70;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=2;break;
 case 40: 
 var $318=$bl_count;
 var $319=$5;
 var $320=($319<<2);
 _memset($318, 0, $320)|0;
 $max_bits=0;
 $t=0;
 label=41;break;
 case 41: 
 var $322=$t;
 var $323=$5;
 var $324=($322|0)<($323|0);
 if($324){label=42;break;}else{label=48;break;}
 case 42: 
 var $326=$t;
 var $327=$4;
 var $328=(($327+($326<<2))|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=$5;
 var $331=($329|0)>=($330|0);
 if($331){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=70;break;
 case 44: 
 var $334=$t;
 var $335=$4;
 var $336=(($335+($334<<2))|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=(($bl_count+($337<<2))|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=((($339)+(1))|0);
 HEAP32[(($338)>>2)]=$340;
 var $341=$max_bits;
 var $342=$t;
 var $343=$4;
 var $344=(($343+($342<<2))|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=($341|0)<($345|0);
 if($346){label=45;break;}else{label=46;break;}
 case 45: 
 var $348=$t;
 var $349=$4;
 var $350=(($349+($348<<2))|0);
 var $351=HEAP32[(($350)>>2)];
 $max_bits=$351;
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $354=$t;
 var $355=((($354)+(1))|0);
 $t=$355;
 label=41;break;
 case 48: 
 $code=0;
 var $357=(($bl_count)|0);
 HEAP32[(($357)>>2)]=0;
 $bits=1;
 label=49;break;
 case 49: 
 var $359=$bits;
 var $360=$max_bits;
 var $361=($359|0)<=($360|0);
 if($361){label=50;break;}else{label=52;break;}
 case 50: 
 var $363=$code;
 var $364=$bits;
 var $365=((($364)-(1))|0);
 var $366=(($bl_count+($365<<2))|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=((($363)+($367))|0);
 var $369=$368<<1;
 $code=$369;
 var $370=$code;
 var $371=$bits;
 var $372=(($next_code+($371<<2))|0);
 HEAP32[(($372)>>2)]=$370;
 label=51;break;
 case 51: 
 var $374=$bits;
 var $375=((($374)+(1))|0);
 $bits=$375;
 label=49;break;
 case 52: 
 var $377=$8;
 var $378=(($377+2)|0);
 HEAP16[(($378)>>1)]=0;
 var $379=$8;
 var $380=(($379+4)|0);
 HEAP16[(($380)>>1)]=0;
 $next_leaf=0;
 $t=0;
 label=53;break;
 case 53: 
 var $382=$t;
 var $383=$5;
 var $384=($382|0)<($383|0);
 if($384){label=54;break;}else{label=69;break;}
 case 54: 
 var $386=$t;
 var $387=$4;
 var $388=(($387+($386<<2))|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=($389|0)!=0;
 if($390){label=55;break;}else{label=67;break;}
 case 55: 
 var $392=$t;
 var $393=$4;
 var $394=(($393+($392<<2))|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(($next_code+($395<<2))|0);
 var $397=HEAP32[(($396)>>2)];
 $code=$397;
 $curr_leaf=0;
 var $398=$t;
 var $399=$4;
 var $400=(($399+($398<<2))|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=((($401)-(1))|0);
 var $403=1<<$402;
 $x=$403;
 $r=0;
 label=56;break;
 case 56: 
 var $405=$r;
 var $406=$t;
 var $407=$4;
 var $408=(($407+($406<<2))|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=($405|0)<($409|0);
 if($410){label=57;break;}else{label=66;break;}
 case 57: 
 var $412=$code;
 var $413=$x;
 var $414=$412&$413;
 var $415=($414|0)==0;
 if($415){label=58;break;}else{label=61;break;}
 case 58: 
 var $417=$curr_leaf;
 var $418=$8;
 var $419=(($418+((($417)*(6))&-1))|0);
 var $420=(($419+2)|0);
 var $421=HEAP16[(($420)>>1)];
 var $422=(($421<<16)>>16);
 var $423=($422|0)==0;
 if($423){label=59;break;}else{label=60;break;}
 case 59: 
 var $425=$next_leaf;
 var $426=((($425)+(1))|0);
 $next_leaf=$426;
 var $427=$next_leaf;
 var $428=(($427)&65535);
 var $429=$curr_leaf;
 var $430=$8;
 var $431=(($430+((($429)*(6))&-1))|0);
 var $432=(($431+2)|0);
 HEAP16[(($432)>>1)]=$428;
 var $433=$next_leaf;
 var $434=$8;
 var $435=(($434+((($433)*(6))&-1))|0);
 var $436=(($435+2)|0);
 HEAP16[(($436)>>1)]=0;
 var $437=$next_leaf;
 var $438=$8;
 var $439=(($438+((($437)*(6))&-1))|0);
 var $440=(($439+4)|0);
 HEAP16[(($440)>>1)]=0;
 label=60;break;
 case 60: 
 var $442=$curr_leaf;
 var $443=$8;
 var $444=(($443+((($442)*(6))&-1))|0);
 var $445=(($444+2)|0);
 var $446=HEAP16[(($445)>>1)];
 var $447=(($446<<16)>>16);
 $curr_leaf=$447;
 label=64;break;
 case 61: 
 var $449=$curr_leaf;
 var $450=$8;
 var $451=(($450+((($449)*(6))&-1))|0);
 var $452=(($451+4)|0);
 var $453=HEAP16[(($452)>>1)];
 var $454=(($453<<16)>>16);
 var $455=($454|0)==0;
 if($455){label=62;break;}else{label=63;break;}
 case 62: 
 var $457=$next_leaf;
 var $458=((($457)+(1))|0);
 $next_leaf=$458;
 var $459=$next_leaf;
 var $460=(($459)&65535);
 var $461=$curr_leaf;
 var $462=$8;
 var $463=(($462+((($461)*(6))&-1))|0);
 var $464=(($463+4)|0);
 HEAP16[(($464)>>1)]=$460;
 var $465=$next_leaf;
 var $466=$8;
 var $467=(($466+((($465)*(6))&-1))|0);
 var $468=(($467+2)|0);
 HEAP16[(($468)>>1)]=0;
 var $469=$next_leaf;
 var $470=$8;
 var $471=(($470+((($469)*(6))&-1))|0);
 var $472=(($471+4)|0);
 HEAP16[(($472)>>1)]=0;
 label=63;break;
 case 63: 
 var $474=$curr_leaf;
 var $475=$8;
 var $476=(($475+((($474)*(6))&-1))|0);
 var $477=(($476+4)|0);
 var $478=HEAP16[(($477)>>1)];
 var $479=(($478<<16)>>16);
 $curr_leaf=$479;
 label=64;break;
 case 64: 
 var $481=$x;
 var $482=$481>>1;
 $x=$482;
 label=65;break;
 case 65: 
 var $484=$r;
 var $485=((($484)+(1))|0);
 $r=$485;
 label=56;break;
 case 66: 
 var $487=$t;
 var $488=(($487)&65535);
 var $489=$curr_leaf;
 var $490=$8;
 var $491=(($490+((($489)*(6))&-1))|0);
 var $492=(($491)|0);
 HEAP16[(($492)>>1)]=$488;
 var $493=$t;
 var $494=$4;
 var $495=(($494+($493<<2))|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($next_code+($496<<2))|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=((($498)+(1))|0);
 HEAP32[(($497)>>2)]=$499;
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 var $502=$t;
 var $503=((($502)+(1))|0);
 $t=$503;
 label=53;break;
 case 69: 
 $1=0;
 label=70;break;
 case 70: 
 var $506=$1;
 STACKTOP=sp;return $506;
  default: assert(0, "bad label: " + label);
 }
}
function _add_static_codes_to_tree($huffman_tree,$code_len,$count,$start_code,$start_uncomp_code,$next_leaf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $curr_huffman_leaf;
 var $t;
 var $x;
 var $r;
 $1=$huffman_tree;
 $2=$code_len;
 $3=$count;
 $4=$start_code;
 $5=$start_uncomp_code;
 $6=$next_leaf;
 $t=0;
 label=2;break;
 case 2: 
 var $8=$t;
 var $9=$3;
 var $10=($8|0)<($9|0);
 if($10){label=3;break;}else{label=16;break;}
 case 3: 
 var $12=$1;
 $curr_huffman_leaf=$12;
 var $13=$2;
 var $14=((($13)-(1))|0);
 var $15=1<<$14;
 $x=$15;
 $r=0;
 label=4;break;
 case 4: 
 var $17=$r;
 var $18=$2;
 var $19=($17|0)<($18|0);
 if($19){label=5;break;}else{label=14;break;}
 case 5: 
 var $21=$4;
 var $22=$x;
 var $23=$21&$22;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=9;break;}
 case 6: 
 var $26=$curr_huffman_leaf;
 var $27=(($26+2)|0);
 var $28=HEAP16[(($27)>>1)];
 var $29=(($28<<16)>>16);
 var $30=($29|0)==0;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=$6;
 var $33=((($32)+(1))|0);
 $6=$33;
 var $34=$6;
 var $35=(($34)&65535);
 var $36=$curr_huffman_leaf;
 var $37=(($36+2)|0);
 HEAP16[(($37)>>1)]=$35;
 var $38=$6;
 var $39=$1;
 var $40=(($39+((($38)*(6))&-1))|0);
 var $41=(($40+2)|0);
 HEAP16[(($41)>>1)]=0;
 var $42=$6;
 var $43=$1;
 var $44=(($43+((($42)*(6))&-1))|0);
 var $45=(($44+4)|0);
 HEAP16[(($45)>>1)]=0;
 label=8;break;
 case 8: 
 var $47=$curr_huffman_leaf;
 var $48=(($47+2)|0);
 var $49=HEAP16[(($48)>>1)];
 var $50=(($49<<16)>>16);
 var $51=$1;
 var $52=(($51+((($50)*(6))&-1))|0);
 $curr_huffman_leaf=$52;
 label=12;break;
 case 9: 
 var $54=$curr_huffman_leaf;
 var $55=(($54+4)|0);
 var $56=HEAP16[(($55)>>1)];
 var $57=(($56<<16)>>16);
 var $58=($57|0)==0;
 if($58){label=10;break;}else{label=11;break;}
 case 10: 
 var $60=$6;
 var $61=((($60)+(1))|0);
 $6=$61;
 var $62=$6;
 var $63=(($62)&65535);
 var $64=$curr_huffman_leaf;
 var $65=(($64+4)|0);
 HEAP16[(($65)>>1)]=$63;
 var $66=$6;
 var $67=$1;
 var $68=(($67+((($66)*(6))&-1))|0);
 var $69=(($68+2)|0);
 HEAP16[(($69)>>1)]=0;
 var $70=$6;
 var $71=$1;
 var $72=(($71+((($70)*(6))&-1))|0);
 var $73=(($72+4)|0);
 HEAP16[(($73)>>1)]=0;
 label=11;break;
 case 11: 
 var $75=$curr_huffman_leaf;
 var $76=(($75+4)|0);
 var $77=HEAP16[(($76)>>1)];
 var $78=(($77<<16)>>16);
 var $79=$1;
 var $80=(($79+((($78)*(6))&-1))|0);
 $curr_huffman_leaf=$80;
 label=12;break;
 case 12: 
 var $82=$x;
 var $83=$82>>1;
 $x=$83;
 label=13;break;
 case 13: 
 var $85=$r;
 var $86=((($85)+(1))|0);
 $r=$86;
 label=4;break;
 case 14: 
 var $88=$5;
 var $89=((($88)+(1))|0);
 $5=$89;
 var $90=(($88)&65535);
 var $91=$curr_huffman_leaf;
 var $92=(($91)|0);
 HEAP16[(($92)>>1)]=$90;
 var $93=$4;
 var $94=((($93)+(1))|0);
 $4=$94;
 label=15;break;
 case 15: 
 var $96=$t;
 var $97=((($96)+(1))|0);
 $t=$97;
 label=2;break;
 case 16: 
 var $99=$6;
 STACKTOP=sp;return $99;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_mmcmp($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $h=sp;
 var $table;
 var $i;
 var $j;
 var $block=(sp)+(24);
 var $sub_block;
 $2=$in;
 $3=$out;
 var $4=$2;
 var $5=_read32l($4);
 var $6=($5|0)!=1129474426;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=33;break;
 case 3: 
 var $9=$2;
 var $10=_read32l($9);
 var $11=($10|0)!=1634291279;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=33;break;
 case 5: 
 var $14=$2;
 var $15=_read16l($14);
 var $16=($15&65535);
 var $17=($16|0)<14;
 if($17){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=33;break;
 case 7: 
 var $20=$2;
 var $21=_read16l($20);
 var $22=($21&65535);
 var $23=(($h)|0);
 HEAP32[(($23)>>2)]=$22;
 var $24=$2;
 var $25=_read16l($24);
 var $26=($25&65535);
 var $27=(($h+4)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=$2;
 var $29=_read32l($28);
 var $30=(($h+8)|0);
 HEAP32[(($30)>>2)]=$29;
 var $31=$2;
 var $32=_read32l($31);
 var $33=(($h+12)|0);
 HEAP32[(($33)>>2)]=$32;
 var $34=$2;
 var $35=_read8($34);
 var $36=($35&255);
 var $37=(($h+16)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=$2;
 var $39=_read8($38);
 var $40=($39&255);
 var $41=(($h+20)|0);
 HEAP32[(($41)>>2)]=$40;
 var $42=(($h+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=33;break;
 case 9: 
 var $47=$2;
 var $48=(($h+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=_fseek($47,$49,0);
 var $51=(($h+4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52<<2);
 var $54=_malloc($53);
 var $55=$54;
 $table=$55;
 var $56=$table;
 var $57=($56|0)==0;
 if($57){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=33;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $61=$i;
 var $62=(($h+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($61>>>0)<($63>>>0);
 if($64){label=13;break;}else{label=15;break;}
 case 13: 
 var $66=$2;
 var $67=_read32l($66);
 var $68=$i;
 var $69=$table;
 var $70=(($69+($68<<2))|0);
 HEAP32[(($70)>>2)]=$67;
 label=14;break;
 case 14: 
 var $72=$i;
 var $73=((($72)+(1))|0);
 $i=$73;
 label=12;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $76=$i;
 var $77=(($h+4)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($76>>>0)<($78>>>0);
 if($79){label=17;break;}else{label=31;break;}
 case 17: 
 var $81=$2;
 var $82=$i;
 var $83=$table;
 var $84=(($83+($82<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=_fseek($81,$85,0);
 var $87=$2;
 var $88=_read32l($87);
 var $89=(($block)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=$2;
 var $91=_read32l($90);
 var $92=(($block+4)|0);
 HEAP32[(($92)>>2)]=$91;
 var $93=$2;
 var $94=_read32l($93);
 var $95=(($block+8)|0);
 HEAP32[(($95)>>2)]=$94;
 var $96=$2;
 var $97=_read16l($96);
 var $98=($97&65535);
 var $99=(($block+12)|0);
 HEAP32[(($99)>>2)]=$98;
 var $100=$2;
 var $101=_read16l($100);
 var $102=($101&65535);
 var $103=(($block+16)|0);
 HEAP32[(($103)>>2)]=$102;
 var $104=$2;
 var $105=_read16l($104);
 var $106=($105&65535);
 var $107=(($block+20)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=$2;
 var $109=_read16l($108);
 var $110=($109&65535);
 var $111=(($block+24)|0);
 HEAP32[(($111)>>2)]=$110;
 var $112=(($block+12)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($113<<3);
 var $115=_malloc($114);
 var $116=$115;
 $sub_block=$116;
 var $117=$sub_block;
 var $118=($117|0)==0;
 if($118){label=18;break;}else{label=19;break;}
 case 18: 
 label=32;break;
 case 19: 
 $j=0;
 label=20;break;
 case 20: 
 var $122=$j;
 var $123=(($block+12)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=($122>>>0)<($124>>>0);
 if($125){label=21;break;}else{label=23;break;}
 case 21: 
 var $127=$2;
 var $128=_read32l($127);
 var $129=$j;
 var $130=$sub_block;
 var $131=(($130+($129<<3))|0);
 var $132=(($131)|0);
 HEAP32[(($132)>>2)]=$128;
 var $133=$2;
 var $134=_read32l($133);
 var $135=$j;
 var $136=$sub_block;
 var $137=(($136+($135<<3))|0);
 var $138=(($137+4)|0);
 HEAP32[(($138)>>2)]=$134;
 label=22;break;
 case 22: 
 var $140=$j;
 var $141=((($140)+(1))|0);
 $j=$141;
 label=20;break;
 case 23: 
 var $143=$2;
 var $144=_ftell($143);
 var $145=(($block+20)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=((($146)+($144))|0);
 HEAP32[(($145)>>2)]=$147;
 var $148=(($block+16)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$149^-1;
 var $151=$150&1;
 var $152=($151|0)!=0;
 if($152){label=24;break;}else{label=25;break;}
 case 24: 
 var $154=$sub_block;
 var $155=$2;
 var $156=$3;
 _block_copy($block,$154,$155,$156);
 label=29;break;
 case 25: 
 var $158=(($block+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$159&4;
 var $161=($160|0)!=0;
 if($161){label=26;break;}else{label=27;break;}
 case 26: 
 var $163=$sub_block;
 var $164=$2;
 var $165=$3;
 _block_unpack_16bit($block,$163,$164,$165);
 label=28;break;
 case 27: 
 var $167=$sub_block;
 var $168=$2;
 var $169=$3;
 _block_unpack_8bit($block,$167,$168,$169);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $172=$sub_block;
 var $173=$172;
 _free($173);
 label=30;break;
 case 30: 
 var $175=$i;
 var $176=((($175)+(1))|0);
 $i=$176;
 label=16;break;
 case 31: 
 var $178=$table;
 var $179=$178;
 _free($179);
 $1=0;
 label=33;break;
 case 32: 
 var $181=$table;
 var $182=$181;
 _free($182);
 $1=-1;
 label=33;break;
 case 33: 
 var $184=$1;
 STACKTOP=sp;return $184;
  default: assert(0, "bad label: " + label);
 }
}
function _block_copy($block,$sub,$in,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 $1=$block;
 $2=$sub;
 $3=$in;
 $4=$out;
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=$1;
 var $8=(($7+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($6|0)<($9|0);
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 var $12=$4;
 var $13=$3;
 var $14=$2;
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=_move_data($12,$13,$16);
 label=4;break;
 case 4: 
 var $19=$i;
 var $20=((($19)+(1))|0);
 $i=$20;
 var $21=$2;
 var $22=(($21+8)|0);
 $2=$22;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _block_unpack_16bit($block,$sub,$in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bb=sp;
 var $pos;
 var $numbits;
 var $j;
 var $oldval;
 var $size;
 var $newval;
 var $d;
 var $fetch;
 var $newbits;
 $1=$block;
 $2=$sub;
 $3=$in;
 $4=$out;
 $pos=0;
 var $5=$1;
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 $numbits=$7;
 $oldval=0;
 var $8=(($bb)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($bb+4)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$4;
 var $11=$2;
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=_fseek($10,$13,0);
 var $15=$3;
 var $16=$1;
 var $17=(($16+20)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=_fseek($15,$18,0);
 $j=0;
 label=2;break;
 case 2: 
 var $21=$j;
 var $22=$1;
 var $23=(($22+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($21>>>0)<($24>>>0);
 if($25){label=3;break;}else{label=29;break;}
 case 3: 
 var $27=$j;
 var $28=$2;
 var $29=(($28+($27<<3))|0);
 var $30=(($29+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>1;
 $size=$32;
 $newval=65536;
 var $33=$3;
 var $34=$numbits;
 var $35=((($34)+(1))|0);
 var $36=_get_bits772($33,$35,$bb);
 $d=$36;
 var $37=$d;
 var $38=$numbits;
 var $39=((18704+($38<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($37>>>0)>=($40>>>0);
 if($41){label=4;break;}else{label=13;break;}
 case 4: 
 var $43=$numbits;
 var $44=((9320+($43<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 $fetch=$45;
 var $46=$3;
 var $47=$fetch;
 var $48=_get_bits772($46,$47,$bb);
 var $49=$d;
 var $50=$numbits;
 var $51=((18704+($50<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=((($49)-($52))|0);
 var $54=$fetch;
 var $55=$53<<$54;
 var $56=((($48)+($55))|0);
 $newbits=$56;
 var $57=$newbits;
 var $58=$numbits;
 var $59=($57|0)!=($58|0);
 if($59){label=5;break;}else{label=6;break;}
 case 5: 
 var $61=$newbits;
 var $62=$61&15;
 $numbits=$62;
 label=12;break;
 case 6: 
 var $64=$3;
 var $65=_get_bits772($64,4,$bb);
 $d=$65;
 var $66=($65|0)==15;
 if($66){label=7;break;}else{label=10;break;}
 case 7: 
 var $68=$3;
 var $69=_get_bits772($68,1,$bb);
 var $70=($69|0)!=0;
 if($70){label=8;break;}else{label=9;break;}
 case 8: 
 label=29;break;
 case 9: 
 $newval=65535;
 label=11;break;
 case 10: 
 var $74=$d;
 var $75=((($74)+(65520))|0);
 $newval=$75;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 var $79=$d;
 $newval=$79;
 label=14;break;
 case 14: 
 var $81=$newval;
 var $82=($81>>>0)<65536;
 if($82){label=15;break;}else{label=24;break;}
 case 15: 
 var $84=$newval;
 var $85=$84&1;
 var $86=($85|0)!=0;
 if($86){label=16;break;}else{label=17;break;}
 case 16: 
 var $88=$newval;
 var $89=((($88)+(1))|0);
 var $90=$89>>>1;
 var $91=(((-$90))|0);
 $newval=$91;
 label=18;break;
 case 17: 
 var $93=$newval;
 var $94=$93>>>1;
 $newval=$94;
 label=18;break;
 case 18: 
 var $96=$1;
 var $97=(($96+16)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$98&2;
 var $100=($99|0)!=0;
 if($100){label=19;break;}else{label=20;break;}
 case 19: 
 var $102=$oldval;
 var $103=$newval;
 var $104=((($103)+($102))|0);
 $newval=$104;
 var $105=$newval;
 $oldval=$105;
 label=23;break;
 case 20: 
 var $107=$1;
 var $108=(($107+16)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$109&512;
 var $111=($110|0)!=0;
 if($111){label=22;break;}else{label=21;break;}
 case 21: 
 var $113=$newval;
 var $114=$113^32768;
 $newval=$114;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $117=$pos;
 var $118=((($117)+(1))|0);
 $pos=$118;
 var $119=$4;
 var $120=$newval;
 var $121=(($120)&65535);
 _write16l($119,$121);
 label=24;break;
 case 24: 
 var $123=$pos;
 var $124=$size;
 var $125=($123>>>0)>=($124>>>0);
 if($125){label=25;break;}else{label=28;break;}
 case 25: 
 var $127=$j;
 var $128=((($127)+(1))|0);
 $j=$128;
 var $129=$1;
 var $130=(($129+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($128>>>0)>=($131>>>0);
 if($132){label=26;break;}else{label=27;break;}
 case 26: 
 label=29;break;
 case 27: 
 $pos=0;
 var $135=$4;
 var $136=$j;
 var $137=$2;
 var $138=(($137+($136<<3))|0);
 var $139=(($138)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=_fseek($135,$140,0);
 label=28;break;
 case 28: 
 label=2;break;
 case 29: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _block_unpack_8bit($block,$sub,$in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bb=sp;
 var $pos;
 var $numbits;
 var $j;
 var $oldval;
 var $ptable=(sp)+(8);
 var $size;
 var $newval;
 var $d;
 var $fetch;
 var $newbits;
 var $n;
 $1=$block;
 $2=$sub;
 $3=$in;
 $4=$out;
 $pos=0;
 var $5=$1;
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 $numbits=$7;
 $oldval=0;
 var $8=(($ptable)|0);
 var $9=$3;
 var $10=_fread($8,1,256,$9);
 var $11=(($bb)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($bb+4)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$4;
 var $14=$2;
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=_fseek($13,$16,0);
 var $18=$3;
 var $19=$1;
 var $20=(($19+20)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=_fseek($18,$21,0);
 $j=0;
 label=2;break;
 case 2: 
 var $24=$j;
 var $25=$1;
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($24>>>0)<($27>>>0);
 if($28){label=3;break;}else{label=23;break;}
 case 3: 
 var $30=$j;
 var $31=$2;
 var $32=(($31+($30<<3))|0);
 var $33=(($32+4)|0);
 var $34=HEAP32[(($33)>>2)];
 $size=$34;
 $newval=256;
 var $35=$3;
 var $36=$numbits;
 var $37=((($36)+(1))|0);
 var $38=_get_bits772($35,$37,$bb);
 $d=$38;
 var $39=$d;
 var $40=$numbits;
 var $41=((18672+($40<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($39>>>0)>=($42>>>0);
 if($43){label=4;break;}else{label=13;break;}
 case 4: 
 var $45=$numbits;
 var $46=((9288+($45<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 $fetch=$47;
 var $48=$3;
 var $49=$fetch;
 var $50=_get_bits772($48,$49,$bb);
 var $51=$d;
 var $52=$numbits;
 var $53=((18672+($52<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=((($51)-($54))|0);
 var $56=$fetch;
 var $57=$55<<$56;
 var $58=((($50)+($57))|0);
 $newbits=$58;
 var $59=$newbits;
 var $60=$numbits;
 var $61=($59|0)!=($60|0);
 if($61){label=5;break;}else{label=6;break;}
 case 5: 
 var $63=$newbits;
 var $64=$63&7;
 $numbits=$64;
 label=12;break;
 case 6: 
 var $66=$3;
 var $67=_get_bits772($66,3,$bb);
 $d=$67;
 var $68=($67|0)==7;
 if($68){label=7;break;}else{label=10;break;}
 case 7: 
 var $70=$3;
 var $71=_get_bits772($70,1,$bb);
 var $72=($71|0)!=0;
 if($72){label=8;break;}else{label=9;break;}
 case 8: 
 label=23;break;
 case 9: 
 $newval=255;
 label=11;break;
 case 10: 
 var $76=$d;
 var $77=((($76)+(248))|0);
 $newval=$77;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 var $81=$d;
 $newval=$81;
 label=14;break;
 case 14: 
 var $83=$newval;
 var $84=($83>>>0)<256;
 if($84){label=15;break;}else{label=18;break;}
 case 15: 
 var $86=$newval;
 var $87=(($ptable+$86)|0);
 var $88=HEAP8[($87)];
 var $89=($88&255);
 $n=$89;
 var $90=$1;
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$92&2;
 var $94=($93|0)!=0;
 if($94){label=16;break;}else{label=17;break;}
 case 16: 
 var $96=$oldval;
 var $97=$n;
 var $98=((($97)+($96))|0);
 $n=$98;
 var $99=$n;
 $oldval=$99;
 label=17;break;
 case 17: 
 var $101=$pos;
 var $102=((($101)+(1))|0);
 $pos=$102;
 var $103=$4;
 var $104=$n;
 var $105=(($104)&255);
 _write8($103,$105);
 label=18;break;
 case 18: 
 var $107=$pos;
 var $108=$size;
 var $109=($107>>>0)>=($108>>>0);
 if($109){label=19;break;}else{label=22;break;}
 case 19: 
 var $111=$j;
 var $112=((($111)+(1))|0);
 $j=$112;
 var $113=$1;
 var $114=(($113+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($112>>>0)>=($115>>>0);
 if($116){label=20;break;}else{label=21;break;}
 case 20: 
 label=23;break;
 case 21: 
 $pos=0;
 var $119=$4;
 var $120=$j;
 var $121=$2;
 var $122=(($121+($120<<3))|0);
 var $123=(($122)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=_fseek($119,$124,0);
 label=22;break;
 case 22: 
 label=2;break;
 case 23: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_bits772($f,$n,$bb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bits;
 $2=$f;
 $3=$n;
 $4=$bb;
 var $5=$3;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=7;break;
 case 3: 
 label=4;break;
 case 4: 
 var $10=$4;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)<24;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=$2;
 var $16=_read8($15);
 var $17=($16&255);
 var $18=$4;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$17<<$20;
 var $22=$4;
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$24|$21;
 HEAP32[(($23)>>2)]=$25;
 var $26=$4;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(8))|0);
 HEAP32[(($27)>>2)]=$29;
 label=4;break;
 case 6: 
 var $31=$4;
 var $32=(($31+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$3;
 var $35=1<<$34;
 var $36=((($35)-(1))|0);
 var $37=$33&$36;
 $bits=$37;
 var $38=$3;
 var $39=$4;
 var $40=(($39+4)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41>>>($38>>>0);
 HEAP32[(($40)>>2)]=$42;
 var $43=$3;
 var $44=$4;
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=((($46)-($43))|0);
 HEAP32[(($45)>>2)]=$47;
 var $48=$bits;
 $1=$48;
 label=7;break;
 case 7: 
 var $50=$1;
 STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_muse($f,$fo){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $checksum=sp;
 $1=$f;
 $2=$fo;
 var $3=$1;
 var $4=_fseek($3,24,0);
 var $5=$1;
 var $6=$2;
 var $7=_inflate($5,$6,$checksum,0);
 STACKTOP=sp;return 0;
}
function _test_oxm($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 var $hlen;
 var $npat;
 var $len;
 var $plen;
 var $nins;
 var $nsmp;
 var $ilen;
 var $slen=sp;
 var $buf=(sp)+(1024);
 $2=$f;
 var $3=$2;
 var $4=_fseek($3,0,0);
 var $5=(($buf)|0);
 var $6=$2;
 var $7=_fread($5,1,16,$6);
 var $8=($7>>>0)<16;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=33;break;
 case 3: 
 var $11=(($buf)|0);
 var $12=_memcmp($11,20976,16);
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=33;break;
 case 5: 
 var $16=$2;
 var $17=_fseek($16,60,0);
 var $18=$2;
 var $19=_read32l($18);
 $hlen=$19;
 var $20=$2;
 var $21=_fseek($20,6,1);
 var $22=$2;
 var $23=_read16l($22);
 var $24=($23&65535);
 $npat=$24;
 var $25=$2;
 var $26=_read16l($25);
 var $27=($26&65535);
 $nins=$27;
 var $28=$npat;
 var $29=($28|0)>256;
 if($29){label=7;break;}else{label=6;break;}
 case 6: 
 var $31=$nins;
 var $32=($31|0)>128;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=33;break;
 case 8: 
 var $35=$2;
 var $36=$hlen;
 var $37=((($36)+(60))|0);
 var $38=_fseek($35,$37,0);
 $i=0;
 label=9;break;
 case 9: 
 var $40=$i;
 var $41=$npat;
 var $42=($40|0)<($41|0);
 if($42){label=10;break;}else{label=12;break;}
 case 10: 
 var $44=$2;
 var $45=_read32l($44);
 $len=$45;
 var $46=$2;
 var $47=_fseek($46,3,1);
 var $48=$2;
 var $49=_read16l($48);
 var $50=($49&65535);
 $plen=$50;
 var $51=$2;
 var $52=$len;
 var $53=((($52)-(9))|0);
 var $54=$plen;
 var $55=((($53)+($54))|0);
 var $56=_fseek($51,$55,1);
 label=11;break;
 case 11: 
 var $58=$i;
 var $59=((($58)+(1))|0);
 $i=$59;
 label=9;break;
 case 12: 
 $i=0;
 label=13;break;
 case 13: 
 var $62=$i;
 var $63=$nins;
 var $64=($62|0)<($63|0);
 if($64){label=14;break;}else{label=32;break;}
 case 14: 
 var $66=$2;
 var $67=_read32l($66);
 $ilen=$67;
 var $68=$ilen;
 var $69=($68>>>0)>263;
 if($69){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=33;break;
 case 16: 
 var $72=$2;
 var $73=_fseek($72,-4,1);
 var $74=(($buf)|0);
 var $75=$ilen;
 var $76=$2;
 var $77=_fread($74,$75,1,$76);
 var $78=(($buf)|0);
 var $79=(($78+27)|0);
 var $80=_readmem16l($79);
 var $81=($80&65535);
 $nsmp=$81;
 var $82=$nsmp;
 var $83=($82|0)>255;
 if($83){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=33;break;
 case 18: 
 var $86=$nsmp;
 var $87=($86|0)==0;
 if($87){label=19;break;}else{label=20;break;}
 case 19: 
 label=31;break;
 case 20: 
 $j=0;
 label=21;break;
 case 21: 
 var $91=$j;
 var $92=$nsmp;
 var $93=($91|0)<($92|0);
 if($93){label=22;break;}else{label=24;break;}
 case 22: 
 var $95=$2;
 var $96=_read32l($95);
 var $97=$j;
 var $98=(($slen+($97<<2))|0);
 HEAP32[(($98)>>2)]=$96;
 var $99=$2;
 var $100=_fseek($99,36,1);
 label=23;break;
 case 23: 
 var $102=$j;
 var $103=((($102)+(1))|0);
 $j=$103;
 label=21;break;
 case 24: 
 $j=0;
 label=25;break;
 case 25: 
 var $106=$j;
 var $107=$nsmp;
 var $108=($106|0)<($107|0);
 if($108){label=26;break;}else{label=30;break;}
 case 26: 
 var $110=$2;
 var $111=_read32b($110);
 var $112=$2;
 var $113=_read32b($112);
 var $114=($113|0)==1332176723;
 if($114){label=27;break;}else{label=28;break;}
 case 27: 
 $1=0;
 label=33;break;
 case 28: 
 var $117=$2;
 var $118=$j;
 var $119=(($slen+($118<<2))|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=((($120)-(8))|0);
 var $122=_fseek($117,$121,1);
 label=29;break;
 case 29: 
 var $124=$j;
 var $125=((($124)+(1))|0);
 $j=$125;
 label=25;break;
 case 30: 
 label=31;break;
 case 31: 
 var $128=$i;
 var $129=((($128)+(1))|0);
 $i=$129;
 label=13;break;
 case 32: 
 $1=-1;
 label=33;break;
 case 33: 
 var $132=$1;
 STACKTOP=sp;return $132;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_oxm($f,$fo){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+12296)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $j;
 var $pos;
 var $hlen;
 var $npat;
 var $len;
 var $plen;
 var $nins;
 var $nsmp;
 var $ilen;
 var $buf=sp;
 var $xi=(sp)+(1024);
 var $pcm=(sp)+(11264);
 var $newlen=(sp)+(12288);
 var $res;
 $2=$f;
 $3=$fo;
 HEAP32[(($newlen)>>2)]=0;
 var $4=$2;
 var $5=_fseek($4,60,0);
 var $6=$2;
 var $7=_read32l($6);
 $hlen=$7;
 var $8=$2;
 var $9=_fseek($8,6,1);
 var $10=$2;
 var $11=_read16l($10);
 var $12=($11&65535);
 $npat=$12;
 var $13=$2;
 var $14=_read16l($13);
 var $15=($14&65535);
 $nins=$15;
 var $16=$2;
 var $17=$hlen;
 var $18=((($17)+(60))|0);
 var $19=_fseek($16,$18,0);
 $i=0;
 label=2;break;
 case 2: 
 var $21=$i;
 var $22=$npat;
 var $23=($21|0)<($22|0);
 if($23){label=3;break;}else{label=5;break;}
 case 3: 
 var $25=$2;
 var $26=_read32l($25);
 $len=$26;
 var $27=$2;
 var $28=_fseek($27,3,1);
 var $29=$2;
 var $30=_read16l($29);
 var $31=($30&65535);
 $plen=$31;
 var $32=$2;
 var $33=$len;
 var $34=((($33)-(9))|0);
 var $35=$plen;
 var $36=((($34)+($35))|0);
 var $37=_fseek($32,$36,1);
 label=4;break;
 case 4: 
 var $39=$i;
 var $40=((($39)+(1))|0);
 $i=$40;
 label=2;break;
 case 5: 
 var $42=$2;
 var $43=_ftell($42);
 $pos=$43;
 var $44=$2;
 var $45=_fseek($44,0,0);
 var $46=$3;
 var $47=$2;
 var $48=$pos;
 var $49=_move_data($46,$47,$48);
 $i=0;
 label=6;break;
 case 6: 
 var $51=$i;
 var $52=$nins;
 var $53=($51|0)<($52|0);
 if($53){label=7;break;}else{label=37;break;}
 case 7: 
 var $55=$2;
 var $56=_read32l($55);
 $ilen=$56;
 var $57=$ilen;
 var $58=($57>>>0)>1024;
 if($58){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=38;break;
 case 9: 
 var $61=$2;
 var $62=_fseek($61,-4,1);
 var $63=(($buf)|0);
 var $64=$ilen;
 var $65=$2;
 var $66=_fread($63,$64,1,$65);
 var $67=(($buf+26)|0);
 HEAP8[($67)]=0;
 var $68=(($buf)|0);
 var $69=$ilen;
 var $70=$3;
 var $71=_fwrite($68,$69,1,$70);
 var $72=(($buf)|0);
 var $73=(($72+27)|0);
 var $74=_readmem16l($73);
 var $75=($74&65535);
 $nsmp=$75;
 var $76=$nsmp;
 var $77=($76|0)==0;
 if($77){label=10;break;}else{label=11;break;}
 case 10: 
 label=36;break;
 case 11: 
 $j=0;
 label=12;break;
 case 12: 
 var $81=$j;
 var $82=$nsmp;
 var $83=($81|0)<($82|0);
 if($83){label=13;break;}else{label=15;break;}
 case 13: 
 var $85=$2;
 var $86=_read32l($85);
 var $87=$j;
 var $88=(($xi+((($87)*(40))&-1))|0);
 var $89=(($88)|0);
 HEAP32[(($89)>>2)]=$86;
 var $90=$j;
 var $91=(($xi+((($90)*(40))&-1))|0);
 var $92=(($91+4)|0);
 var $93=(($92)|0);
 var $94=$2;
 var $95=_fread($93,1,36,$94);
 label=14;break;
 case 14: 
 var $97=$j;
 var $98=((($97)+(1))|0);
 $j=$98;
 label=12;break;
 case 15: 
 $j=0;
 label=16;break;
 case 16: 
 var $101=$j;
 var $102=$nsmp;
 var $103=($101|0)<($102|0);
 if($103){label=17;break;}else{label=25;break;}
 case 17: 
 var $105=$j;
 var $106=(($xi+((($105)*(40))&-1))|0);
 var $107=(($106)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108>>>0)>0;
 if($109){label=18;break;}else{label=23;break;}
 case 18: 
 $res=8;
 var $111=$j;
 var $112=(($xi+((($111)*(40))&-1))|0);
 var $113=(($112+4)|0);
 var $114=(($113+10)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=$116&16;
 var $118=($117|0)!=0;
 if($118){label=19;break;}else{label=20;break;}
 case 19: 
 $res=16;
 label=20;break;
 case 20: 
 var $121=$2;
 var $122=$j;
 var $123=(($xi+((($122)*(40))&-1))|0);
 var $124=(($123)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$res;
 var $127=_oggdec($121,$125,$126,$newlen);
 var $128=$j;
 var $129=(($pcm+($128<<2))|0);
 HEAP32[(($129)>>2)]=$127;
 var $130=HEAP32[(($newlen)>>2)];
 var $131=$j;
 var $132=(($xi+((($131)*(40))&-1))|0);
 var $133=(($132)|0);
 HEAP32[(($133)>>2)]=$130;
 var $134=$j;
 var $135=(($pcm+($134<<2))|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($136|0)==0;
 if($137){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=38;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $142=$j;
 var $143=((($142)+(1))|0);
 $j=$143;
 label=16;break;
 case 25: 
 $j=0;
 label=26;break;
 case 26: 
 var $146=$j;
 var $147=$nsmp;
 var $148=($146|0)<($147|0);
 if($148){label=27;break;}else{label=29;break;}
 case 27: 
 var $150=$3;
 var $151=$j;
 var $152=(($xi+((($151)*(40))&-1))|0);
 var $153=(($152)|0);
 var $154=HEAP32[(($153)>>2)];
 _write32l($150,$154);
 var $155=$j;
 var $156=(($xi+((($155)*(40))&-1))|0);
 var $157=(($156+4)|0);
 var $158=(($157)|0);
 var $159=$3;
 var $160=_fwrite($158,1,36,$159);
 label=28;break;
 case 28: 
 var $162=$j;
 var $163=((($162)+(1))|0);
 $j=$163;
 label=26;break;
 case 29: 
 $j=0;
 label=30;break;
 case 30: 
 var $166=$j;
 var $167=$nsmp;
 var $168=($166|0)<($167|0);
 if($168){label=31;break;}else{label=35;break;}
 case 31: 
 var $170=$j;
 var $171=(($xi+((($170)*(40))&-1))|0);
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($173>>>0)>0;
 if($174){label=32;break;}else{label=33;break;}
 case 32: 
 var $176=$j;
 var $177=(($pcm+($176<<2))|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$j;
 var $180=(($xi+((($179)*(40))&-1))|0);
 var $181=(($180)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=$3;
 var $184=_fwrite($178,1,$182,$183);
 var $185=$j;
 var $186=(($pcm+($185<<2))|0);
 var $187=HEAP32[(($186)>>2)];
 _free($187);
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $190=$j;
 var $191=((($190)+(1))|0);
 $j=$191;
 label=30;break;
 case 35: 
 label=36;break;
 case 36: 
 var $194=$i;
 var $195=((($194)+(1))|0);
 $i=$195;
 label=6;break;
 case 37: 
 $1=0;
 label=38;break;
 case 38: 
 var $198=$1;
 STACKTOP=sp;return $198;
  default: assert(0, "bad label: " + label);
 }
}
function _oggdec($f,$len,$res,$newlen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $n;
 var $ch=sp;
 var $size;
 var $data;
 var $pcm;
 var $pcm16=(sp)+(8);
 var $id;
 $2=$f;
 $3=$len;
 $4=$res;
 $5=$newlen;
 var $6=$2;
 var $7=_read32l($6);
 $size=$7;
 var $8=$2;
 var $9=_read32b($8);
 $id=$9;
 var $10=$2;
 var $11=_fseek($10,-8,1);
 var $12=$3;
 var $13=_calloc(1,$12);
 $data=$13;
 var $14=($13|0)==0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=27;break;
 case 3: 
 var $17=$2;
 var $18=_read32b($17);
 var $19=$data;
 var $20=$3;
 var $21=((($20)-(4))|0);
 var $22=$2;
 var $23=_fread($19,1,$21,$22);
 var $24=$id;
 var $25=($24|0)!=1332176723;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=$3;
 var $28=$5;
 HEAP32[(($28)>>2)]=$27;
 var $29=$data;
 $1=$29;
 label=27;break;
 case 5: 
 var $31=$data;
 var $32=$3;
 var $33=_stb_vorbis_decode_memory($31,$32,$ch,$pcm16);
 $n=$33;
 var $34=$data;
 _free($34);
 var $35=$n;
 var $36=($35|0)<0;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=27;break;
 case 7: 
 var $39=HEAP32[(($pcm16)>>2)];
 var $40=$39;
 $pcm=$40;
 var $41=$4;
 var $42=($41|0)==8;
 if($42){label=8;break;}else{label=15;break;}
 case 8: 
 $i=0;
 label=9;break;
 case 9: 
 var $45=$i;
 var $46=$n;
 var $47=($45|0)<($46|0);
 if($47){label=10;break;}else{label=12;break;}
 case 10: 
 var $49=$i;
 var $50=HEAP32[(($pcm16)>>2)];
 var $51=(($50+($49<<1))|0);
 var $52=HEAP16[(($51)>>1)];
 var $53=(($52<<16)>>16);
 var $54=$53>>8;
 var $55=(($54)&255);
 var $56=$i;
 var $57=$pcm;
 var $58=(($57+$56)|0);
 HEAP8[($58)]=$55;
 label=11;break;
 case 11: 
 var $60=$i;
 var $61=((($60)+(1))|0);
 $i=$61;
 label=9;break;
 case 12: 
 var $63=HEAP32[(($pcm16)>>2)];
 var $64=$63;
 var $65=$n;
 var $66=_realloc($64,$65);
 $pcm=$66;
 var $67=$pcm;
 var $68=($67|0)==0;
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 var $70=HEAP32[(($pcm16)>>2)];
 var $71=$70;
 _free($71);
 $1=0;
 label=27;break;
 case 14: 
 var $73=$pcm;
 var $74=$73;
 HEAP32[(($pcm16)>>2)]=$74;
 label=15;break;
 case 15: 
 var $76=$4;
 var $77=($76|0)==8;
 if($77){label=16;break;}else{label=21;break;}
 case 16: 
 var $79=$n;
 var $80=((($79)-(1))|0);
 $i=$80;
 label=17;break;
 case 17: 
 var $82=$i;
 var $83=($82|0)>0;
 if($83){label=18;break;}else{label=20;break;}
 case 18: 
 var $85=$i;
 var $86=((($85)-(1))|0);
 var $87=$pcm;
 var $88=(($87+$86)|0);
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=$i;
 var $92=$pcm;
 var $93=(($92+$91)|0);
 var $94=HEAP8[($93)];
 var $95=($94&255);
 var $96=((($95)-($90))|0);
 var $97=(($96)&255);
 HEAP8[($93)]=$97;
 label=19;break;
 case 19: 
 var $99=$i;
 var $100=((($99)-(1))|0);
 $i=$100;
 label=17;break;
 case 20: 
 var $102=$n;
 var $103=$5;
 HEAP32[(($103)>>2)]=$102;
 label=26;break;
 case 21: 
 var $105=$n;
 var $106=((($105)-(1))|0);
 $i=$106;
 label=22;break;
 case 22: 
 var $108=$i;
 var $109=($108|0)>0;
 if($109){label=23;break;}else{label=25;break;}
 case 23: 
 var $111=$i;
 var $112=((($111)-(1))|0);
 var $113=HEAP32[(($pcm16)>>2)];
 var $114=(($113+($112<<1))|0);
 var $115=HEAP16[(($114)>>1)];
 var $116=(($115<<16)>>16);
 var $117=$i;
 var $118=HEAP32[(($pcm16)>>2)];
 var $119=(($118+($117<<1))|0);
 var $120=HEAP16[(($119)>>1)];
 var $121=(($120<<16)>>16);
 var $122=((($121)-($116))|0);
 var $123=(($122)&65535);
 HEAP16[(($119)>>1)]=$123;
 label=24;break;
 case 24: 
 var $125=$i;
 var $126=((($125)-(1))|0);
 $i=$126;
 label=22;break;
 case 25: 
 var $128=$n;
 var $129=($128<<1);
 var $130=$5;
 HEAP32[(($130)>>2)]=$129;
 label=26;break;
 case 26: 
 var $132=$pcm;
 $1=$132;
 label=27;break;
 case 27: 
 var $134=$1;
 STACKTOP=sp;return $134;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_pp($f,$fo){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $packed;
 var $plen;
 var $unplen;
 var $st=sp;
 $2=$f;
 $3=$fo;
 var $4=$3;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=20;break;
 case 3: 
 var $8=$2;
 var $9=_fileno($8);
 var $10=_fstat($9,$st);
 var $11=(($st+36)|0);
 var $12=HEAP32[(($11)>>2)];
 $plen=$12;
 var $13=$plen;
 var $14=$plen;
 var $15=(((($14|0))/(2))&-1);
 var $16=($15<<1);
 var $17=($13|0)!=($16|0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 label=20;break;
 case 5: 
 var $20=$plen;
 var $21=_malloc($20);
 $packed=$21;
 var $22=$packed;
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 label=20;break;
 case 7: 
 var $26=$packed;
 var $27=$plen;
 var $28=$2;
 var $29=_fread($26,$27,1,$28);
 var $30=$packed;
 var $31=(($30+4)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=($33|0)<9;
 if($34){label=11;break;}else{label=8;break;}
 case 8: 
 var $36=$packed;
 var $37=(($36+5)|0);
 var $38=HEAP8[($37)];
 var $39=($38&255);
 var $40=($39|0)<9;
 if($40){label=11;break;}else{label=9;break;}
 case 9: 
 var $42=$packed;
 var $43=(($42+6)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=($45|0)<9;
 if($46){label=11;break;}else{label=10;break;}
 case 10: 
 var $48=$packed;
 var $49=(($48+7)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=($51|0)<9;
 if($52){label=11;break;}else{label=12;break;}
 case 11: 
 label=19;break;
 case 12: 
 var $55=$packed;
 var $56=(($55+4)|0);
 var $57=(($56)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=$59<<16;
 var $61=$packed;
 var $62=(($61+4)|0);
 var $63=(($62+1)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=$65<<8;
 var $67=$60|$66;
 var $68=$packed;
 var $69=(($68+4)|0);
 var $70=(($69+2)|0);
 var $71=HEAP8[($70)];
 var $72=($71&255);
 var $73=$67|$72;
 var $74=($73<<8);
 var $75=$packed;
 var $76=(($75+7)|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=((($74)+($78))|0);
 var $80=$79&-252645136;
 var $81=($80|0)!=0;
 if($81){label=13;break;}else{label=14;break;}
 case 13: 
 label=19;break;
 case 14: 
 var $84=$packed;
 var $85=$plen;
 var $86=(($84+$85)|0);
 var $87=((($86)-(4))|0);
 var $88=(($87)|0);
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=$90<<16;
 var $92=$packed;
 var $93=$plen;
 var $94=(($92+$93)|0);
 var $95=((($94)-(4))|0);
 var $96=(($95+1)|0);
 var $97=HEAP8[($96)];
 var $98=($97&255);
 var $99=$98<<8;
 var $100=$91|$99;
 var $101=$packed;
 var $102=$plen;
 var $103=(($101+$102)|0);
 var $104=((($103)-(4))|0);
 var $105=(($104+2)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$100|$107;
 $unplen=$108;
 var $109=$unplen;
 var $110=($109|0)!=0;
 if($110){label=16;break;}else{label=15;break;}
 case 15: 
 label=19;break;
 case 16: 
 var $113=$packed;
 var $114=$plen;
 var $115=$3;
 var $116=_ppdepack($113,$114,$115);
 var $117=($116|0)==-1;
 if($117){label=17;break;}else{label=18;break;}
 case 17: 
 label=19;break;
 case 18: 
 var $120=$packed;
 _free($120);
 $1=0;
 label=21;break;
 case 19: 
 var $122=$packed;
 _free($122);
 label=20;break;
 case 20: 
 $1=-1;
 label=21;break;
 case 21: 
 var $125=$1;
 STACKTOP=sp;return $125;
  default: assert(0, "bad label: " + label);
 }
}
function _ppdepack($data,$len,$fo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $success;
 var $output;
 var $outlen;
 $2=$data;
 $3=$len;
 $4=$fo;
 $success=0;
 var $5=$3;
 var $6=($5>>>0)<16;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=17;break;
 case 3: 
 var $9=$2;
 var $10=(($9)|0);
 var $11=HEAP8[($10)];
 var $12=($11&255);
 var $13=($12|0)==80;
 if($13){label=4;break;}else{label=10;break;}
 case 4: 
 var $15=$2;
 var $16=(($15+1)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=($18|0)==80;
 if($19){label=5;break;}else{label=10;break;}
 case 5: 
 var $21=$2;
 var $22=(($21+2)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=($24|0)==50;
 if($25){label=6;break;}else{label=10;break;}
 case 6: 
 var $27=$2;
 var $28=(($27+3)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=($30|0)==48;
 if($31){label=7;break;}else{label=10;break;}
 case 7: 
 var $33=$3;
 var $34=$33&3;
 var $35=($34|0)!=0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=17;break;
 case 9: 
 label=11;break;
 case 10: 
 $1=-1;
 label=17;break;
 case 11: 
 var $40=$3;
 var $41=((($40)-(4))|0);
 var $42=$2;
 var $43=(($42+$41)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=$45<<16;
 var $47=$3;
 var $48=((($47)-(3))|0);
 var $49=$2;
 var $50=(($49+$48)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=$52<<8;
 var $54=$46|$53;
 var $55=$3;
 var $56=((($55)-(2))|0);
 var $57=$2;
 var $58=(($57+$56)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=$54|$60;
 $outlen=$61;
 var $62=$outlen;
 var $63=_malloc($62);
 $output=$63;
 var $64=$output;
 var $65=($64|0)==0;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=17;break;
 case 13: 
 var $68=$2;
 var $69=(($68+8)|0);
 var $70=$output;
 var $71=$2;
 var $72=(($71+4)|0);
 var $73=$3;
 var $74=((($73)-(12))|0);
 var $75=$outlen;
 var $76=$3;
 var $77=((($76)-(1))|0);
 var $78=$2;
 var $79=(($78+$77)|0);
 var $80=HEAP8[($79)];
 var $81=_ppDecrunch($69,$70,$72,$74,$75,$80);
 var $82=($81|0)!=0;
 if($82){label=14;break;}else{label=15;break;}
 case 14: 
 var $84=$4;
 var $85=$output;
 var $86=$outlen;
 var $87=_savefile($84,$85,$86);
 label=16;break;
 case 15: 
 $success=-1;
 label=16;break;
 case 16: 
 var $90=$output;
 _free($90);
 var $91=$success;
 $1=$91;
 label=17;break;
 case 17: 
 var $93=$1;
 STACKTOP=sp;return $93;
  default: assert(0, "bad label: " + label);
 }
}
function _ppDecrunch($src,$dest,$offset_lens,$src_len,$dest_len,$skip_bits){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $buf_src;
 var $out;
 var $dest_end;
 var $bits_left;
 var $bit_cnt;
 var $bit_buffer;
 var $x;
 var $todo;
 var $offbits;
 var $offset;
 var $written;
 $2=$src;
 $3=$dest;
 $4=$offset_lens;
 $5=$src_len;
 $6=$dest_len;
 $7=$skip_bits;
 $bits_left=0;
 $bit_buffer=0;
 $written=0;
 var $8=$2;
 var $9=($8|0)==0;
 if($9){label=4;break;}else{label=2;break;}
 case 2: 
 var $11=$3;
 var $12=($11|0)==0;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=$4;
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=130;break;
 case 5: 
 var $18=$2;
 var $19=$5;
 var $20=(($18+$19)|0);
 $buf_src=$20;
 var $21=$3;
 var $22=$6;
 var $23=(($21+$22)|0);
 $dest_end=$23;
 $out=$23;
 label=6;break;
 case 6: 
 var $25=$7;
 $bit_cnt=$25;
 label=7;break;
 case 7: 
 var $27=$bits_left;
 var $28=($27&255);
 var $29=$bit_cnt;
 var $30=($29&255);
 var $31=($28|0)<($30|0);
 if($31){label=8;break;}else{label=11;break;}
 case 8: 
 var $33=$buf_src;
 var $34=$2;
 var $35=($33>>>0)<($34>>>0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 label=130;break;
 case 10: 
 var $38=$buf_src;
 var $39=((($38)-(1))|0);
 $buf_src=$39;
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$bits_left;
 var $43=($42&255);
 var $44=$41<<$43;
 var $45=$bit_buffer;
 var $46=$45|$44;
 $bit_buffer=$46;
 var $47=$bits_left;
 var $48=($47&255);
 var $49=((($48)+(8))|0);
 var $50=(($49)&255);
 $bits_left=$50;
 label=7;break;
 case 11: 
 $x=0;
 var $52=$bit_cnt;
 var $53=($52&255);
 var $54=$bits_left;
 var $55=($54&255);
 var $56=((($55)-($53))|0);
 var $57=(($56)&255);
 $bits_left=$57;
 label=12;break;
 case 12: 
 var $59=$bit_cnt;
 var $60=((($59)-(1))&255);
 $bit_cnt=$60;
 var $61=(($59<<24)>>24)!=0;
 if($61){label=13;break;}else{label=14;break;}
 case 13: 
 var $63=$x;
 var $64=$63<<1;
 var $65=$bit_buffer;
 var $66=$65&1;
 var $67=$64|$66;
 $x=$67;
 var $68=$bit_buffer;
 var $69=$68>>>1;
 $bit_buffer=$69;
 label=12;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $73=$written;
 var $74=$6;
 var $75=($73>>>0)<($74>>>0);
 if($75){label=17;break;}else{label=129;break;}
 case 17: 
 label=18;break;
 case 18: 
 $bit_cnt=1;
 label=19;break;
 case 19: 
 var $79=$bits_left;
 var $80=($79&255);
 var $81=$bit_cnt;
 var $82=($81&255);
 var $83=($80|0)<($82|0);
 if($83){label=20;break;}else{label=23;break;}
 case 20: 
 var $85=$buf_src;
 var $86=$2;
 var $87=($85>>>0)<($86>>>0);
 if($87){label=21;break;}else{label=22;break;}
 case 21: 
 $1=0;
 label=130;break;
 case 22: 
 var $90=$buf_src;
 var $91=((($90)-(1))|0);
 $buf_src=$91;
 var $92=HEAP8[($91)];
 var $93=($92&255);
 var $94=$bits_left;
 var $95=($94&255);
 var $96=$93<<$95;
 var $97=$bit_buffer;
 var $98=$97|$96;
 $bit_buffer=$98;
 var $99=$bits_left;
 var $100=($99&255);
 var $101=((($100)+(8))|0);
 var $102=(($101)&255);
 $bits_left=$102;
 label=19;break;
 case 23: 
 $x=0;
 var $104=$bit_cnt;
 var $105=($104&255);
 var $106=$bits_left;
 var $107=($106&255);
 var $108=((($107)-($105))|0);
 var $109=(($108)&255);
 $bits_left=$109;
 label=24;break;
 case 24: 
 var $111=$bit_cnt;
 var $112=((($111)-(1))&255);
 $bit_cnt=$112;
 var $113=(($111<<24)>>24)!=0;
 if($113){label=25;break;}else{label=26;break;}
 case 25: 
 var $115=$x;
 var $116=$115<<1;
 var $117=$bit_buffer;
 var $118=$117&1;
 var $119=$116|$118;
 $x=$119;
 var $120=$bit_buffer;
 var $121=$120>>>1;
 $bit_buffer=$121;
 label=24;break;
 case 26: 
 label=27;break;
 case 27: 
 var $124=$x;
 var $125=($124|0)==0;
 if($125){label=28;break;}else{label=61;break;}
 case 28: 
 $todo=1;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 $bit_cnt=2;
 label=31;break;
 case 31: 
 var $130=$bits_left;
 var $131=($130&255);
 var $132=$bit_cnt;
 var $133=($132&255);
 var $134=($131|0)<($133|0);
 if($134){label=32;break;}else{label=35;break;}
 case 32: 
 var $136=$buf_src;
 var $137=$2;
 var $138=($136>>>0)<($137>>>0);
 if($138){label=33;break;}else{label=34;break;}
 case 33: 
 $1=0;
 label=130;break;
 case 34: 
 var $141=$buf_src;
 var $142=((($141)-(1))|0);
 $buf_src=$142;
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=$bits_left;
 var $146=($145&255);
 var $147=$144<<$146;
 var $148=$bit_buffer;
 var $149=$148|$147;
 $bit_buffer=$149;
 var $150=$bits_left;
 var $151=($150&255);
 var $152=((($151)+(8))|0);
 var $153=(($152)&255);
 $bits_left=$153;
 label=31;break;
 case 35: 
 $x=0;
 var $155=$bit_cnt;
 var $156=($155&255);
 var $157=$bits_left;
 var $158=($157&255);
 var $159=((($158)-($156))|0);
 var $160=(($159)&255);
 $bits_left=$160;
 label=36;break;
 case 36: 
 var $162=$bit_cnt;
 var $163=((($162)-(1))&255);
 $bit_cnt=$163;
 var $164=(($162<<24)>>24)!=0;
 if($164){label=37;break;}else{label=38;break;}
 case 37: 
 var $166=$x;
 var $167=$166<<1;
 var $168=$bit_buffer;
 var $169=$168&1;
 var $170=$167|$169;
 $x=$170;
 var $171=$bit_buffer;
 var $172=$171>>>1;
 $bit_buffer=$172;
 label=36;break;
 case 38: 
 label=39;break;
 case 39: 
 var $175=$x;
 var $176=$todo;
 var $177=((($176)+($175))|0);
 $todo=$177;
 label=40;break;
 case 40: 
 var $179=$x;
 var $180=($179|0)==3;
 if($180){label=29;break;}else{label=41;break;}
 case 41: 
 label=42;break;
 case 42: 
 var $183=$todo;
 var $184=((($183)-(1))|0);
 $todo=$184;
 var $185=($183|0)!=0;
 if($185){label=43;break;}else{label=58;break;}
 case 43: 
 label=44;break;
 case 44: 
 $bit_cnt=8;
 label=45;break;
 case 45: 
 var $189=$bits_left;
 var $190=($189&255);
 var $191=$bit_cnt;
 var $192=($191&255);
 var $193=($190|0)<($192|0);
 if($193){label=46;break;}else{label=49;break;}
 case 46: 
 var $195=$buf_src;
 var $196=$2;
 var $197=($195>>>0)<($196>>>0);
 if($197){label=47;break;}else{label=48;break;}
 case 47: 
 $1=0;
 label=130;break;
 case 48: 
 var $200=$buf_src;
 var $201=((($200)-(1))|0);
 $buf_src=$201;
 var $202=HEAP8[($201)];
 var $203=($202&255);
 var $204=$bits_left;
 var $205=($204&255);
 var $206=$203<<$205;
 var $207=$bit_buffer;
 var $208=$207|$206;
 $bit_buffer=$208;
 var $209=$bits_left;
 var $210=($209&255);
 var $211=((($210)+(8))|0);
 var $212=(($211)&255);
 $bits_left=$212;
 label=45;break;
 case 49: 
 $x=0;
 var $214=$bit_cnt;
 var $215=($214&255);
 var $216=$bits_left;
 var $217=($216&255);
 var $218=((($217)-($215))|0);
 var $219=(($218)&255);
 $bits_left=$219;
 label=50;break;
 case 50: 
 var $221=$bit_cnt;
 var $222=((($221)-(1))&255);
 $bit_cnt=$222;
 var $223=(($221<<24)>>24)!=0;
 if($223){label=51;break;}else{label=52;break;}
 case 51: 
 var $225=$x;
 var $226=$225<<1;
 var $227=$bit_buffer;
 var $228=$227&1;
 var $229=$226|$228;
 $x=$229;
 var $230=$bit_buffer;
 var $231=$230>>>1;
 $bit_buffer=$231;
 label=50;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $235=$out;
 var $236=$3;
 var $237=($235>>>0)<=($236>>>0);
 if($237){label=55;break;}else{label=56;break;}
 case 55: 
 $1=0;
 label=130;break;
 case 56: 
 var $240=$x;
 var $241=(($240)&255);
 var $242=$out;
 var $243=((($242)-(1))|0);
 $out=$243;
 HEAP8[($243)]=$241;
 var $244=$written;
 var $245=((($244)+(1))|0);
 $written=$245;
 label=57;break;
 case 57: 
 label=42;break;
 case 58: 
 var $248=$written;
 var $249=$6;
 var $250=($248|0)==($249|0);
 if($250){label=59;break;}else{label=60;break;}
 case 59: 
 label=129;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 $bit_cnt=2;
 label=63;break;
 case 63: 
 var $256=$bits_left;
 var $257=($256&255);
 var $258=$bit_cnt;
 var $259=($258&255);
 var $260=($257|0)<($259|0);
 if($260){label=64;break;}else{label=67;break;}
 case 64: 
 var $262=$buf_src;
 var $263=$2;
 var $264=($262>>>0)<($263>>>0);
 if($264){label=65;break;}else{label=66;break;}
 case 65: 
 $1=0;
 label=130;break;
 case 66: 
 var $267=$buf_src;
 var $268=((($267)-(1))|0);
 $buf_src=$268;
 var $269=HEAP8[($268)];
 var $270=($269&255);
 var $271=$bits_left;
 var $272=($271&255);
 var $273=$270<<$272;
 var $274=$bit_buffer;
 var $275=$274|$273;
 $bit_buffer=$275;
 var $276=$bits_left;
 var $277=($276&255);
 var $278=((($277)+(8))|0);
 var $279=(($278)&255);
 $bits_left=$279;
 label=63;break;
 case 67: 
 $x=0;
 var $281=$bit_cnt;
 var $282=($281&255);
 var $283=$bits_left;
 var $284=($283&255);
 var $285=((($284)-($282))|0);
 var $286=(($285)&255);
 $bits_left=$286;
 label=68;break;
 case 68: 
 var $288=$bit_cnt;
 var $289=((($288)-(1))&255);
 $bit_cnt=$289;
 var $290=(($288<<24)>>24)!=0;
 if($290){label=69;break;}else{label=70;break;}
 case 69: 
 var $292=$x;
 var $293=$292<<1;
 var $294=$bit_buffer;
 var $295=$294&1;
 var $296=$293|$295;
 $x=$296;
 var $297=$bit_buffer;
 var $298=$297>>>1;
 $bit_buffer=$298;
 label=68;break;
 case 70: 
 label=71;break;
 case 71: 
 var $301=$x;
 var $302=$4;
 var $303=(($302+$301)|0);
 var $304=HEAP8[($303)];
 var $305=($304&255);
 $offbits=$305;
 var $306=$x;
 var $307=((($306)+(2))|0);
 $todo=$307;
 var $308=$x;
 var $309=($308|0)==3;
 if($309){label=72;break;}else{label=108;break;}
 case 72: 
 label=73;break;
 case 73: 
 $bit_cnt=1;
 label=74;break;
 case 74: 
 var $313=$bits_left;
 var $314=($313&255);
 var $315=$bit_cnt;
 var $316=($315&255);
 var $317=($314|0)<($316|0);
 if($317){label=75;break;}else{label=78;break;}
 case 75: 
 var $319=$buf_src;
 var $320=$2;
 var $321=($319>>>0)<($320>>>0);
 if($321){label=76;break;}else{label=77;break;}
 case 76: 
 $1=0;
 label=130;break;
 case 77: 
 var $324=$buf_src;
 var $325=((($324)-(1))|0);
 $buf_src=$325;
 var $326=HEAP8[($325)];
 var $327=($326&255);
 var $328=$bits_left;
 var $329=($328&255);
 var $330=$327<<$329;
 var $331=$bit_buffer;
 var $332=$331|$330;
 $bit_buffer=$332;
 var $333=$bits_left;
 var $334=($333&255);
 var $335=((($334)+(8))|0);
 var $336=(($335)&255);
 $bits_left=$336;
 label=74;break;
 case 78: 
 $x=0;
 var $338=$bit_cnt;
 var $339=($338&255);
 var $340=$bits_left;
 var $341=($340&255);
 var $342=((($341)-($339))|0);
 var $343=(($342)&255);
 $bits_left=$343;
 label=79;break;
 case 79: 
 var $345=$bit_cnt;
 var $346=((($345)-(1))&255);
 $bit_cnt=$346;
 var $347=(($345<<24)>>24)!=0;
 if($347){label=80;break;}else{label=81;break;}
 case 80: 
 var $349=$x;
 var $350=$349<<1;
 var $351=$bit_buffer;
 var $352=$351&1;
 var $353=$350|$352;
 $x=$353;
 var $354=$bit_buffer;
 var $355=$354>>>1;
 $bit_buffer=$355;
 label=79;break;
 case 81: 
 label=82;break;
 case 82: 
 var $358=$x;
 var $359=($358|0)==0;
 if($359){label=83;break;}else{label=84;break;}
 case 83: 
 $offbits=7;
 label=84;break;
 case 84: 
 label=85;break;
 case 85: 
 var $363=$offbits;
 var $364=(($363)&255);
 $bit_cnt=$364;
 label=86;break;
 case 86: 
 var $366=$bits_left;
 var $367=($366&255);
 var $368=$bit_cnt;
 var $369=($368&255);
 var $370=($367|0)<($369|0);
 if($370){label=87;break;}else{label=90;break;}
 case 87: 
 var $372=$buf_src;
 var $373=$2;
 var $374=($372>>>0)<($373>>>0);
 if($374){label=88;break;}else{label=89;break;}
 case 88: 
 $1=0;
 label=130;break;
 case 89: 
 var $377=$buf_src;
 var $378=((($377)-(1))|0);
 $buf_src=$378;
 var $379=HEAP8[($378)];
 var $380=($379&255);
 var $381=$bits_left;
 var $382=($381&255);
 var $383=$380<<$382;
 var $384=$bit_buffer;
 var $385=$384|$383;
 $bit_buffer=$385;
 var $386=$bits_left;
 var $387=($386&255);
 var $388=((($387)+(8))|0);
 var $389=(($388)&255);
 $bits_left=$389;
 label=86;break;
 case 90: 
 $offset=0;
 var $391=$bit_cnt;
 var $392=($391&255);
 var $393=$bits_left;
 var $394=($393&255);
 var $395=((($394)-($392))|0);
 var $396=(($395)&255);
 $bits_left=$396;
 label=91;break;
 case 91: 
 var $398=$bit_cnt;
 var $399=((($398)-(1))&255);
 $bit_cnt=$399;
 var $400=(($398<<24)>>24)!=0;
 if($400){label=92;break;}else{label=93;break;}
 case 92: 
 var $402=$offset;
 var $403=$402<<1;
 var $404=$bit_buffer;
 var $405=$404&1;
 var $406=$403|$405;
 $offset=$406;
 var $407=$bit_buffer;
 var $408=$407>>>1;
 $bit_buffer=$408;
 label=91;break;
 case 93: 
 label=94;break;
 case 94: 
 label=95;break;
 case 95: 
 label=96;break;
 case 96: 
 $bit_cnt=3;
 label=97;break;
 case 97: 
 var $414=$bits_left;
 var $415=($414&255);
 var $416=$bit_cnt;
 var $417=($416&255);
 var $418=($415|0)<($417|0);
 if($418){label=98;break;}else{label=101;break;}
 case 98: 
 var $420=$buf_src;
 var $421=$2;
 var $422=($420>>>0)<($421>>>0);
 if($422){label=99;break;}else{label=100;break;}
 case 99: 
 $1=0;
 label=130;break;
 case 100: 
 var $425=$buf_src;
 var $426=((($425)-(1))|0);
 $buf_src=$426;
 var $427=HEAP8[($426)];
 var $428=($427&255);
 var $429=$bits_left;
 var $430=($429&255);
 var $431=$428<<$430;
 var $432=$bit_buffer;
 var $433=$432|$431;
 $bit_buffer=$433;
 var $434=$bits_left;
 var $435=($434&255);
 var $436=((($435)+(8))|0);
 var $437=(($436)&255);
 $bits_left=$437;
 label=97;break;
 case 101: 
 $x=0;
 var $439=$bit_cnt;
 var $440=($439&255);
 var $441=$bits_left;
 var $442=($441&255);
 var $443=((($442)-($440))|0);
 var $444=(($443)&255);
 $bits_left=$444;
 label=102;break;
 case 102: 
 var $446=$bit_cnt;
 var $447=((($446)-(1))&255);
 $bit_cnt=$447;
 var $448=(($446<<24)>>24)!=0;
 if($448){label=103;break;}else{label=104;break;}
 case 103: 
 var $450=$x;
 var $451=$450<<1;
 var $452=$bit_buffer;
 var $453=$452&1;
 var $454=$451|$453;
 $x=$454;
 var $455=$bit_buffer;
 var $456=$455>>>1;
 $bit_buffer=$456;
 label=102;break;
 case 104: 
 label=105;break;
 case 105: 
 var $459=$x;
 var $460=$todo;
 var $461=((($460)+($459))|0);
 $todo=$461;
 label=106;break;
 case 106: 
 var $463=$x;
 var $464=($463|0)==7;
 if($464){label=95;break;}else{label=107;break;}
 case 107: 
 label=119;break;
 case 108: 
 label=109;break;
 case 109: 
 var $468=$offbits;
 var $469=(($468)&255);
 $bit_cnt=$469;
 label=110;break;
 case 110: 
 var $471=$bits_left;
 var $472=($471&255);
 var $473=$bit_cnt;
 var $474=($473&255);
 var $475=($472|0)<($474|0);
 if($475){label=111;break;}else{label=114;break;}
 case 111: 
 var $477=$buf_src;
 var $478=$2;
 var $479=($477>>>0)<($478>>>0);
 if($479){label=112;break;}else{label=113;break;}
 case 112: 
 $1=0;
 label=130;break;
 case 113: 
 var $482=$buf_src;
 var $483=((($482)-(1))|0);
 $buf_src=$483;
 var $484=HEAP8[($483)];
 var $485=($484&255);
 var $486=$bits_left;
 var $487=($486&255);
 var $488=$485<<$487;
 var $489=$bit_buffer;
 var $490=$489|$488;
 $bit_buffer=$490;
 var $491=$bits_left;
 var $492=($491&255);
 var $493=((($492)+(8))|0);
 var $494=(($493)&255);
 $bits_left=$494;
 label=110;break;
 case 114: 
 $offset=0;
 var $496=$bit_cnt;
 var $497=($496&255);
 var $498=$bits_left;
 var $499=($498&255);
 var $500=((($499)-($497))|0);
 var $501=(($500)&255);
 $bits_left=$501;
 label=115;break;
 case 115: 
 var $503=$bit_cnt;
 var $504=((($503)-(1))&255);
 $bit_cnt=$504;
 var $505=(($503<<24)>>24)!=0;
 if($505){label=116;break;}else{label=117;break;}
 case 116: 
 var $507=$offset;
 var $508=$507<<1;
 var $509=$bit_buffer;
 var $510=$509&1;
 var $511=$508|$510;
 $offset=$511;
 var $512=$bit_buffer;
 var $513=$512>>>1;
 $bit_buffer=$513;
 label=115;break;
 case 117: 
 label=118;break;
 case 118: 
 label=119;break;
 case 119: 
 var $517=$out;
 var $518=$offset;
 var $519=(($517+$518)|0);
 var $520=$dest_end;
 var $521=($519>>>0)>=($520>>>0);
 if($521){label=120;break;}else{label=121;break;}
 case 120: 
 $1=0;
 label=130;break;
 case 121: 
 label=122;break;
 case 122: 
 var $525=$todo;
 var $526=((($525)-(1))|0);
 $todo=$526;
 var $527=($525|0)!=0;
 if($527){label=123;break;}else{label=128;break;}
 case 123: 
 var $529=$offset;
 var $530=$out;
 var $531=(($530+$529)|0);
 var $532=HEAP8[($531)];
 var $533=($532&255);
 $x=$533;
 label=124;break;
 case 124: 
 var $535=$out;
 var $536=$3;
 var $537=($535>>>0)<=($536>>>0);
 if($537){label=125;break;}else{label=126;break;}
 case 125: 
 $1=0;
 label=130;break;
 case 126: 
 var $540=$x;
 var $541=(($540)&255);
 var $542=$out;
 var $543=((($542)-(1))|0);
 $out=$543;
 HEAP8[($543)]=$541;
 var $544=$written;
 var $545=((($544)+(1))|0);
 $written=$545;
 label=127;break;
 case 127: 
 label=122;break;
 case 128: 
 label=16;break;
 case 129: 
 $1=1;
 label=130;break;
 case 130: 
 var $550=$1;
 STACKTOP=sp;return $550;
  default: assert(0, "bad label: " + label);
 }
}
function _savefile($fo,$mem,$length){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ok;
 $1=$fo;
 $2=$mem;
 $3=$length;
 var $4=$1;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{var $14=0;label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=$1;
 var $10=_fwrite($7,1,$8,$9);
 var $11=$3;
 var $12=($10|0)==($11|0);
 var $14=$12;label=3;break;
 case 3: 
 var $14;
 var $15=($14&1);
 $ok=$15;
 var $16=$ok;
 STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_lzw_dynamic($data_in,$max_bits,$use_rle,$in_len,$orig_len,$q){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $data;
 var $d;
 $2=$data_in;
 $3=$max_bits;
 $4=$use_rle;
 $5=$in_len;
 $6=$orig_len;
 $7=$q;
 var $8=_malloc(1065020);
 var $9=$8;
 $data=$9;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 var $13=$2;
 var $14=$3;
 var $15=$4;
 var $16=$5;
 var $17=$6;
 var $18=$7;
 var $19=$data;
 var $20=__convert_lzw_dynamic($13,$14,$15,$16,$17,$18,$19);
 $d=$20;
 var $21=$data;
 var $22=$21;
 _free($22);
 var $23=$d;
 $1=$23;
 label=4;break;
 case 4: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function __convert_lzw_dynamic($data_in,$max_bits,$use_rle,$in_len,$orig_len,$q,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $data_out;
 var $csize;
 var $orgcsize;
 var $newcode=sp;
 var $oldcode;
 var $k;
 var $first;
 var $noadd;
 $2=$data_in;
 $3=$max_bits;
 $4=$use_rle;
 $5=$in_len;
 $6=$orig_len;
 $7=$q;
 $8=$data;
 $k=0;
 $first=1;
 var $9=$7;
 var $10=$8;
 var $11=(($10+786480)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$4;
 var $13=$8;
 var $14=(($13+786448)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$3;
 var $16=1<<$15;
 var $17=$8;
 var $18=(($17+786484)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$6;
 var $20=_malloc($19);
 $data_out=$20;
 var $21=($20|0)==0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=50;break;
 case 3: 
 var $24=$2;
 var $25=$8;
 var $26=(($25+786464)|0);
 var $27=(($26)|0);
 HEAP32[(($27)>>2)]=$24;
 var $28=$2;
 var $29=$5;
 var $30=(($28+$29)|0);
 var $31=$8;
 var $32=(($31+786464)|0);
 var $33=(($32+4)|0);
 HEAP32[(($33)>>2)]=$30;
 var $34=$data_out;
 var $35=$8;
 var $36=(($35+786464)|0);
 var $37=(($36+8)|0);
 HEAP32[(($37)>>2)]=$34;
 var $38=$data_out;
 var $39=$6;
 var $40=(($38+$39)|0);
 var $41=$8;
 var $42=(($41+786464)|0);
 var $43=(($42+12)|0);
 HEAP32[(($43)>>2)]=$40;
 var $44=$8;
 var $45=(($44+786440)|0);
 HEAP32[(($45)>>2)]=0;
 var $46=$8;
 var $47=(($46+786436)|0);
 HEAP32[(($47)>>2)]=0;
 var $48=$8;
 var $49=(($48+786444)|0);
 HEAP32[(($49)>>2)]=0;
 var $50=$8;
 var $51=(($50+786456)|0);
 var $52=$8;
 var $53=(($52+786464)|0);
 _outputrle(-1,0,$51,$53);
 var $54=$8;
 var $55=(($54+786452)|0);
 HEAP32[(($55)>>2)]=0;
 $csize=9;
 var $56=$3;
 var $57=($56|0)==0;
 if($57){label=4;break;}else{label=5;break;}
 case 4: 
 var $59=$8;
 var $60=(($59+786452)|0);
 HEAP32[(($60)>>2)]=1;
 $csize=12;
 var $61=$8;
 var $62=(($61+786484)|0);
 HEAP32[(($62)>>2)]=4096;
 label=5;break;
 case 5: 
 var $64=$csize;
 $orgcsize=$64;
 var $65=$orgcsize;
 var $66=$8;
 _inittable($65,$66);
 HEAP32[(($newcode)>>2)]=0;
 $oldcode=0;
 var $67=$8;
 var $68=(($67+786480)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&32;
 var $71=($70|0)!=0;
 if($71){label=6;break;}else{label=7;break;}
 case 6: 
 var $73=$8;
 var $74=(($73+786464)|0);
 var $75=(($74)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+1)|0);
 HEAP32[(($75)>>2)]=$77;
 label=7;break;
 case 7: 
 var $79=$3;
 var $80=($79|0)==16;
 if($80){label=8;break;}else{label=9;break;}
 case 8: 
 var $82=$8;
 var $83=(($82+786464)|0);
 var $84=(($83)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($84)>>2)]=$86;
 var $87=HEAP8[($85)];
 var $88=($87&255);
 var $89=1<<$88;
 var $90=$8;
 var $91=(($90+786484)|0);
 HEAP32[(($91)>>2)]=$89;
 label=9;break;
 case 9: 
 var $93=$8;
 var $94=(($93+786484)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$3;
 var $97=1<<$96;
 var $98=($95|0)>($97|0);
 if($98){label=10;break;}else{label=11;break;}
 case 10: 
 $1=0;
 label=50;break;
 case 11: 
 var $101=$8;
 var $102=(($101+1065016)|0);
 HEAP32[(($102)>>2)]=0;
 label=12;break;
 case 12: 
 var $104=$csize;
 var $105=$8;
 var $106=_readcode($newcode,$104,$105);
 var $107=($106|0)!=0;
 if($107){label=14;break;}else{label=13;break;}
 case 13: 
 label=45;break;
 case 14: 
 var $110=$8;
 var $111=(($110+786480)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112&1;
 var $114=($113|0)!=0;
 if($114){label=15;break;}else{label=18;break;}
 case 15: 
 var $116=HEAP32[(($newcode)>>2)];
 var $117=($116|0)==257;
 if($117){label=16;break;}else{label=17;break;}
 case 16: 
 label=45;break;
 case 17: 
 label=18;break;
 case 18: 
 $noadd=0;
 var $121=$first;
 var $122=($121|0)!=0;
 if($122){label=19;break;}else{label=22;break;}
 case 19: 
 var $124=HEAP32[(($newcode)>>2)];
 $k=$124;
 $first=0;
 var $125=$8;
 var $126=(($125+786452)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)!=0;
 if($128){label=20;break;}else{label=21;break;}
 case 20: 
 $noadd=1;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $132=HEAP32[(($newcode)>>2)];
 var $133=($132|0)==256;
 if($133){label=23;break;}else{label=29;break;}
 case 23: 
 var $135=$8;
 var $136=(($135+786452)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($137|0)!=0;
 if($138){label=29;break;}else{label=24;break;}
 case 24: 
 var $140=$8;
 var $141=(($140+524288)|0);
 HEAP32[(($141)>>2)]=255;
 var $142=$8;
 var $143=(($142+786480)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$144&8;
 var $146=($145|0)!=0;
 if($146){label=25;break;}else{label=26;break;}
 case 25: 
 var $148=$8;
 var $149=(($148+524288)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=((($150)+(1))|0);
 HEAP32[(($149)>>2)]=$151;
 label=26;break;
 case 26: 
 var $153=$csize;
 var $154=$8;
 _code_resync($153,$154);
 var $155=$orgcsize;
 $csize=$155;
 var $156=$csize;
 var $157=$8;
 var $158=_readcode($newcode,$156,$157);
 var $159=($158|0)!=0;
 if($159){label=28;break;}else{label=27;break;}
 case 27: 
 label=45;break;
 case 28: 
 label=29;break;
 case 29: 
 var $163=$8;
 var $164=(($163+786452)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($165|0)!=0;
 if($166){label=31;break;}else{label=30;break;}
 case 30: 
 var $168=HEAP32[(($newcode)>>2)];
 var $169=$8;
 var $170=(($169+524288)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($168|0)<=($171|0);
 if($172){label=33;break;}else{label=31;break;}
 case 31: 
 var $174=$8;
 var $175=(($174+786452)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($176|0)!=0;
 if($177){label=32;break;}else{label=34;break;}
 case 32: 
 var $179=HEAP32[(($newcode)>>2)];
 var $180=$8;
 var $181=(($180+262144)|0);
 var $182=(($181+($179<<2))|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)!=-1;
 if($184){label=33;break;}else{label=34;break;}
 case 33: 
 var $186=HEAP32[(($newcode)>>2)];
 var $187=$8;
 _outputstring($186,$187);
 var $188=HEAP32[(($newcode)>>2)];
 var $189=$8;
 var $190=_findfirstchr($188,$189);
 $k=$190;
 label=35;break;
 case 34: 
 var $192=$oldcode;
 var $193=$8;
 _outputstring($192,$193);
 var $194=$k;
 var $195=$8;
 _outputchr($194,$195);
 label=35;break;
 case 35: 
 var $197=$8;
 var $198=(($197+524288)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$8;
 var $201=(($200+786484)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=((($202)-(1))|0);
 var $204=($199|0)!=($203|0);
 if($204){label=36;break;}else{label=44;break;}
 case 36: 
 var $206=$noadd;
 var $207=($206|0)!=0;
 if($207){label=43;break;}else{label=37;break;}
 case 37: 
 var $209=$oldcode;
 var $210=$k;
 var $211=$8;
 var $212=_addstring($209,$210,$211);
 var $213=($212|0)!=0;
 if($213){label=39;break;}else{label=38;break;}
 case 38: 
 label=39;break;
 case 39: 
 var $216=$8;
 var $217=(($216+524288)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$8;
 var $220=(($219+786484)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=((($221)-(1))|0);
 var $223=($218|0)!=($222|0);
 if($223){label=40;break;}else{label=42;break;}
 case 40: 
 var $225=$8;
 var $226=(($225+524288)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=$csize;
 var $229=1<<$228;
 var $230=((($229)-(1))|0);
 var $231=($227|0)==($230|0);
 if($231){label=41;break;}else{label=42;break;}
 case 41: 
 var $233=$csize;
 var $234=((($233)+(1))|0);
 $csize=$234;
 var $235=$csize;
 var $236=((($235)-(1))|0);
 var $237=$8;
 _code_resync($236,$237);
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $241=HEAP32[(($newcode)>>2)];
 $oldcode=$241;
 label=12;break;
 case 45: 
 var $243=$8;
 var $244=(($243+786480)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=$245^-1;
 var $247=$246&2;
 var $248=($247|0)!=0;
 if($248){label=46;break;}else{label=49;break;}
 case 46: 
 var $250=$8;
 var $251=(($250+786464)|0);
 var $252=(($251)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=$8;
 var $255=(($254+786464)|0);
 var $256=(($255+4)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($253|0)!=($257|0);
 if($258){label=47;break;}else{label=48;break;}
 case 47: 
 var $260=$data_out;
 _free($260);
 $1=0;
 label=50;break;
 case 48: 
 label=49;break;
 case 49: 
 var $263=$data_out;
 $1=$263;
 label=50;break;
 case 50: 
 var $265=$1;
 STACKTOP=sp;return $265;
  default: assert(0, "bad label: " + label);
 }
}
function _read_lzw_dynamic($f,$buf,$max_bits,$use_rle,$in_len,$orig_len,$q){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $buf2;
 var $b;
 var $pos;
 var $size;
 var $data;
 $2=$f;
 $3=$buf;
 $4=$max_bits;
 $5=$use_rle;
 $6=$in_len;
 $7=$orig_len;
 $8=$q;
 var $9=_malloc(1065020);
 var $10=$9;
 $data=$10;
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 var $14=$6;
 var $15=_malloc($14);
 $buf2=$15;
 var $16=($15|0)==0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=9;break;
 case 5: 
 var $19=$2;
 var $20=_ftell($19);
 $pos=$20;
 var $21=$buf2;
 var $22=$6;
 var $23=$2;
 var $24=_fread($21,1,$22,$23);
 var $25=$buf2;
 var $26=$4;
 var $27=$5;
 var $28=$6;
 var $29=$7;
 var $30=$8;
 var $31=$data;
 var $32=__convert_lzw_dynamic($25,$26,$27,$28,$29,$30,$31);
 $b=$32;
 var $33=$3;
 var $34=$b;
 var $35=$7;
 assert($35 % 1 === 0);(_memcpy($33, $34, $35)|0);
 var $36=$8;
 var $37=$36&16;
 var $38=($37|0)!=0;
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=$data;
 var $41=(($40+1065016)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(3))|0);
 var $44=$43&-4;
 var $50=$44;label=8;break;
 case 7: 
 var $46=$data;
 var $47=(($46+1065016)|0);
 var $48=HEAP32[(($47)>>2)];
 var $50=$48;label=8;break;
 case 8: 
 var $50;
 $size=$50;
 var $51=$2;
 var $52=$pos;
 var $53=$size;
 var $54=((($52)+($53))|0);
 var $55=_fseek($51,$54,0);
 var $56=$b;
 _free($56);
 var $57=$buf2;
 _free($57);
 var $58=$data;
 var $59=$58;
 _free($59);
 var $60=$3;
 $1=$60;
 label=9;break;
 case 9: 
 var $62=$1;
 STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _inittable($orgcsize,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $f;
 var $numcols;
 $1=$orgcsize;
 $2=$data;
 var $3=$1;
 var $4=((($3)-(1))|0);
 var $5=1<<$4;
 $numcols=$5;
 $f=0;
 label=2;break;
 case 2: 
 var $7=$f;
 var $8=($7|0)<65536;
 if($8){label=3;break;}else{label=5;break;}
 case 3: 
 var $10=$f;
 var $11=$2;
 var $12=(($11+262144)|0);
 var $13=(($12+($10<<2))|0);
 HEAP32[(($13)>>2)]=-1;
 var $14=$f;
 var $15=$2;
 var $16=(($15)|0);
 var $17=(($16+($14<<2))|0);
 HEAP32[(($17)>>2)]=-1;
 var $18=$f;
 var $19=$2;
 var $20=(($19+524292)|0);
 var $21=(($20+($18<<2))|0);
 HEAP32[(($21)>>2)]=-1;
 label=4;break;
 case 4: 
 var $23=$f;
 var $24=((($23)+(1))|0);
 $f=$24;
 label=2;break;
 case 5: 
 $f=0;
 label=6;break;
 case 6: 
 var $27=$f;
 var $28=($27|0)<4096;
 if($28){label=7;break;}else{label=9;break;}
 case 7: 
 var $30=$f;
 var $31=$2;
 var $32=(($31+1048632)|0);
 var $33=(($32+($30<<2))|0);
 HEAP32[(($33)>>2)]=-1;
 label=8;break;
 case 8: 
 var $35=$f;
 var $36=((($35)+(1))|0);
 $f=$36;
 label=6;break;
 case 9: 
 var $38=$2;
 var $39=(($38+786452)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)!=0;
 if($41){label=10;break;}else{label=15;break;}
 case 10: 
 var $43=$2;
 var $44=(($43+524288)|0);
 HEAP32[(($44)>>2)]=-1;
 $f=0;
 label=11;break;
 case 11: 
 var $46=$f;
 var $47=($46|0)<256;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $49=$f;
 var $50=$2;
 var $51=_addstring(65535,$49,$50);
 label=13;break;
 case 13: 
 var $53=$f;
 var $54=((($53)+(1))|0);
 $f=$54;
 label=11;break;
 case 14: 
 label=22;break;
 case 15: 
 $f=0;
 label=16;break;
 case 16: 
 var $58=$f;
 var $59=$numcols;
 var $60=($58|0)<($59|0);
 if($60){label=17;break;}else{label=19;break;}
 case 17: 
 var $62=$f;
 var $63=$f;
 var $64=$2;
 var $65=(($64+262144)|0);
 var $66=(($65+($63<<2))|0);
 HEAP32[(($66)>>2)]=$62;
 label=18;break;
 case 18: 
 var $68=$f;
 var $69=((($68)+(1))|0);
 $f=$69;
 label=16;break;
 case 19: 
 var $71=$numcols;
 var $72=((($71)-(1))|0);
 var $73=$2;
 var $74=(($73+524288)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$2;
 var $76=(($75+786480)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=$77&8;
 var $79=($78|0)!=0;
 if($79){label=20;break;}else{label=21;break;}
 case 20: 
 var $81=$2;
 var $82=(($81+524288)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=((($83)+(1))|0);
 HEAP32[(($82)>>2)]=$84;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _readcode($newcode,$numbits,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bitsfilled;
 var $got;
 $2=$newcode;
 $3=$numbits;
 $4=$data;
 $got=0;
 $bitsfilled=0;
 var $5=$2;
 HEAP32[(($5)>>2)]=0;
 label=2;break;
 case 2: 
 var $7=$bitsfilled;
 var $8=$3;
 var $9=($7|0)<($8|0);
 if($9){label=3;break;}else{label=14;break;}
 case 3: 
 var $11=$4;
 var $12=(($11+786440)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=7;break;}
 case 4: 
 var $16=$4;
 var $17=(($16+786464)|0);
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$4;
 var $21=(($20+786464)|0);
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($19>>>0)>=($23>>>0);
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=18;break;
 case 6: 
 var $27=$4;
 var $28=(($27+786464)|0);
 var $29=(($28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+1)|0);
 HEAP32[(($29)>>2)]=$31;
 var $32=HEAP8[($30)];
 var $33=($32&255);
 var $34=$4;
 var $35=(($34+786436)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=$4;
 var $37=(($36+786440)|0);
 HEAP32[(($37)>>2)]=8;
 var $38=$4;
 var $39=(($38+1065016)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 label=7;break;
 case 7: 
 var $43=$4;
 var $44=(($43+786440)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$3;
 var $47=$bitsfilled;
 var $48=((($46)-($47))|0);
 var $49=($45|0)<($48|0);
 if($49){label=8;break;}else{label=9;break;}
 case 8: 
 var $51=$4;
 var $52=(($51+786440)|0);
 var $53=HEAP32[(($52)>>2)];
 $got=$53;
 label=10;break;
 case 9: 
 var $55=$3;
 var $56=$bitsfilled;
 var $57=((($55)-($56))|0);
 $got=$57;
 label=10;break;
 case 10: 
 var $59=$4;
 var $60=(($59+786452)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($61|0)!=0;
 if($62){label=11;break;}else{label=12;break;}
 case 11: 
 var $64=$4;
 var $65=(($64+786436)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$66&255;
 HEAP32[(($65)>>2)]=$67;
 var $68=$got;
 var $69=$4;
 var $70=(($69+786436)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$71<<$68;
 HEAP32[(($70)>>2)]=$72;
 var $73=$got;
 var $74=$bitsfilled;
 var $75=((($74)+($73))|0);
 $bitsfilled=$75;
 var $76=$4;
 var $77=(($76+786436)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$78>>8;
 var $80=$3;
 var $81=$bitsfilled;
 var $82=((($80)-($81))|0);
 var $83=$79<<$82;
 var $84=$2;
 var $85=HEAP32[(($84)>>2)];
 var $86=$85|$83;
 HEAP32[(($84)>>2)]=$86;
 var $87=$got;
 var $88=$4;
 var $89=(($88+786440)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=((($90)-($87))|0);
 HEAP32[(($89)>>2)]=$91;
 label=13;break;
 case 12: 
 var $93=$4;
 var $94=(($93+786436)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$got;
 var $97=1<<$96;
 var $98=((($97)-(1))|0);
 var $99=$95&$98;
 var $100=$bitsfilled;
 var $101=$99<<$100;
 var $102=$2;
 var $103=HEAP32[(($102)>>2)];
 var $104=$103|$101;
 HEAP32[(($102)>>2)]=$104;
 var $105=$got;
 var $106=$4;
 var $107=(($106+786436)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$108>>($105|0);
 HEAP32[(($107)>>2)]=$109;
 var $110=$got;
 var $111=$4;
 var $112=(($111+786440)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=((($113)-($110))|0);
 HEAP32[(($112)>>2)]=$114;
 var $115=$got;
 var $116=$bitsfilled;
 var $117=((($116)+($115))|0);
 $bitsfilled=$117;
 label=13;break;
 case 13: 
 label=2;break;
 case 14: 
 var $120=$2;
 var $121=HEAP32[(($120)>>2)];
 var $122=($121|0)<0;
 if($122){label=16;break;}else{label=15;break;}
 case 15: 
 var $124=$2;
 var $125=HEAP32[(($124)>>2)];
 var $126=$4;
 var $127=(($126+786484)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=((($128)-(1))|0);
 var $130=($125|0)>($129|0);
 if($130){label=16;break;}else{label=17;break;}
 case 16: 
 $1=0;
 label=18;break;
 case 17: 
 var $133=$4;
 var $134=(($133+786444)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=((($135)+(1))|0);
 HEAP32[(($134)>>2)]=$136;
 var $137=$4;
 var $138=(($137+786444)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$139&7;
 HEAP32[(($138)>>2)]=$140;
 $1=1;
 label=18;break;
 case 18: 
 var $142=$1;
 STACKTOP=sp;return $142;
  default: assert(0, "bad label: " + label);
 }
}
function _code_resync($old,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 $1=$old;
 $2=$data;
 var $3=$2;
 var $4=(($3+786480)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&4;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 label=4;break;
 case 4: 
 var $11=$2;
 var $12=(($11+786444)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=8;break;}
 case 5: 
 var $16=$1;
 var $17=$2;
 var $18=_readcode($tmp,$16,$17);
 var $19=($18|0)!=0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 label=8;break;
 case 7: 
 label=4;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _outputstring($code,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ptr;
 $1=$code;
 $2=$data;
 var $3=$2;
 var $4=(($3+786488)|0);
 var $5=(($4)|0);
 $ptr=$5;
 label=2;break;
 case 2: 
 var $7=$1;
 var $8=$2;
 var $9=(($8)|0);
 var $10=(($9+($7<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)!=-1;
 if($12){label=3;break;}else{var $24=0;label=4;break;}
 case 3: 
 var $14=$ptr;
 var $15=$2;
 var $16=(($15+786488)|0);
 var $17=(($16)|0);
 var $18=$2;
 var $19=(($18+786484)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($17+($20<<2))|0);
 var $22=($14>>>0)<($21>>>0);
 var $24=$22;label=4;break;
 case 4: 
 var $24;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=$1;
 var $27=$2;
 var $28=(($27+262144)|0);
 var $29=(($28+($26<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$ptr;
 var $32=(($31+4)|0);
 $ptr=$32;
 HEAP32[(($31)>>2)]=$30;
 var $33=$1;
 var $34=$2;
 var $35=(($34)|0);
 var $36=(($35+($33<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 $1=$37;
 label=2;break;
 case 6: 
 var $39=$1;
 var $40=$2;
 var $41=(($40+262144)|0);
 var $42=(($41+($39<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$2;
 _outputchr($43,$44);
 label=7;break;
 case 7: 
 var $46=$ptr;
 var $47=$2;
 var $48=(($47+786488)|0);
 var $49=(($48)|0);
 var $50=($46>>>0)>($49>>>0);
 if($50){label=8;break;}else{label=9;break;}
 case 8: 
 var $52=$ptr;
 var $53=((($52)-(4))|0);
 $ptr=$53;
 var $54=HEAP32[(($53)>>2)];
 var $55=$2;
 _outputchr($54,$55);
 label=7;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _findfirstchr($code,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$code;
 $2=$data;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=(($5+($3<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=-1;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=$2;
 var $12=(($11+524292)|0);
 var $13=(($12+($10<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 $1=$14;
 label=3;break;
 case 3: 
 var $16=$1;
 var $17=$2;
 var $18=(($17+262144)|0);
 var $19=(($18+($16<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _outputchr($chr,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$chr;
 $2=$data;
 var $3=$2;
 var $4=(($3+786448)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=$2;
 var $10=(($9+786456)|0);
 var $11=$2;
 var $12=(($11+786464)|0);
 _outputrle($8,332,$10,$12);
 label=4;break;
 case 3: 
 var $14=$1;
 var $15=$2;
 var $16=(($15+786464)|0);
 _rawoutput($14,$16);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _addstring($oldcode,$chr,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $idx;
 $2=$oldcode;
 $3=$chr;
 $4=$data;
 var $5=$4;
 var $6=(($5+524288)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=((($7)+(1))|0);
 HEAP32[(($6)>>2)]=$8;
 var $9=$4;
 var $10=(($9+524288)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$4;
 var $13=(($12+786484)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$11&$14;
 var $16=($15|0)!=0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$4;
 var $19=(($18+786484)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)-(1))|0);
 var $22=$4;
 var $23=(($22+524288)|0);
 HEAP32[(($23)>>2)]=$21;
 $1=1;
 label=13;break;
 case 3: 
 var $25=$4;
 var $26=(($25+524288)|0);
 var $27=HEAP32[(($26)>>2)];
 $idx=$27;
 var $28=$4;
 var $29=(($28+786452)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)!=0;
 if($31){label=4;break;}else{label=7;break;}
 case 4: 
 var $33=$2;
 var $34=$3;
 var $35=$4;
 var $36=_oldver_getidx($33,$34,$35);
 $idx=$36;
 var $37=($36|0)==-1;
 if($37){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=13;break;
 case 6: 
 label=7;break;
 case 7: 
 var $41=$3;
 var $42=$idx;
 var $43=$4;
 var $44=(($43+262144)|0);
 var $45=(($44+($42<<2))|0);
 HEAP32[(($45)>>2)]=$41;
 var $46=$2;
 var $47=$4;
 var $48=(($47+786484)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($46|0)>=($49|0);
 if($50){label=8;break;}else{label=9;break;}
 case 8: 
 $1=1;
 label=13;break;
 case 9: 
 var $53=$2;
 var $54=$idx;
 var $55=$4;
 var $56=(($55)|0);
 var $57=(($56+($54<<2))|0);
 HEAP32[(($57)>>2)]=$53;
 var $58=$2;
 var $59=$4;
 var $60=(($59)|0);
 var $61=(($60+($58<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==-1;
 if($63){label=10;break;}else{label=11;break;}
 case 10: 
 var $65=$2;
 var $66=$idx;
 var $67=$4;
 var $68=(($67+524292)|0);
 var $69=(($68+($66<<2))|0);
 HEAP32[(($69)>>2)]=$65;
 label=12;break;
 case 11: 
 var $71=$2;
 var $72=$4;
 var $73=(($72+524292)|0);
 var $74=(($73+($71<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$idx;
 var $77=$4;
 var $78=(($77+524292)|0);
 var $79=(($78+($76<<2))|0);
 HEAP32[(($79)>>2)]=$75;
 label=12;break;
 case 12: 
 $1=1;
 label=13;break;
 case 13: 
 var $82=$1;
 STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }
}
function _oldver_getidx($oldcode,$chr,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $lasthash;
 var $hashval;
 var $a;
 var $f;
 $2=$oldcode;
 $3=$chr;
 $4=$data;
 var $5=$2;
 var $6=$3;
 var $7=((($5)+($6))|0);
 var $8=$7|2048;
 var $9=$8&65535;
 $a=$9;
 var $10=$a;
 var $11=$a;
 var $12=(Math_imul($10,$11)|0);
 var $13=$12>>6;
 var $14=$13&4095;
 $hashval=$14;
 label=2;break;
 case 2: 
 var $16=$hashval;
 var $17=$4;
 var $18=(($17+262144)|0);
 var $19=(($18+($16<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)!=-1;
 if($21){label=3;break;}else{var $30=0;label=4;break;}
 case 3: 
 var $23=$hashval;
 var $24=$4;
 var $25=(($24+1048632)|0);
 var $26=(($25+($23<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)!=-1;
 var $30=$28;label=4;break;
 case 4: 
 var $30;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=$hashval;
 var $33=$4;
 var $34=(($33+1048632)|0);
 var $35=(($34+($32<<2))|0);
 var $36=HEAP32[(($35)>>2)];
 $hashval=$36;
 label=2;break;
 case 6: 
 var $38=$hashval;
 var $39=$4;
 var $40=(($39+262144)|0);
 var $41=(($40+($38<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=8;break;}
 case 7: 
 var $45=$hashval;
 $1=$45;
 label=19;break;
 case 8: 
 var $47=$hashval;
 $lasthash=$47;
 var $48=$hashval;
 var $49=((($48)+(101))|0);
 $hashval=$49;
 var $50=$hashval;
 var $51=$50&4095;
 $hashval=$51;
 var $52=$hashval;
 var $53=$4;
 var $54=(($53+262144)|0);
 var $55=(($54+($52<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)!=-1;
 if($57){label=9;break;}else{label=18;break;}
 case 9: 
 $f=0;
 label=10;break;
 case 10: 
 var $60=$f;
 var $61=$4;
 var $62=(($61+786484)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($60|0)<($63|0);
 if($64){label=11;break;}else{label=15;break;}
 case 11: 
 var $66=$hashval;
 var $67=$4;
 var $68=(($67+262144)|0);
 var $69=(($68+($66<<2))|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==-1;
 if($71){label=12;break;}else{label=13;break;}
 case 12: 
 label=15;break;
 case 13: 
 label=14;break;
 case 14: 
 var $75=$f;
 var $76=((($75)+(1))|0);
 $f=$76;
 var $77=$hashval;
 var $78=((($77)+(1))|0);
 $hashval=$78;
 var $79=$hashval;
 var $80=$79&4095;
 $hashval=$80;
 label=10;break;
 case 15: 
 var $82=$hashval;
 var $83=$4;
 var $84=(($83+786484)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($82|0)==($85|0);
 if($86){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=19;break;
 case 17: 
 label=18;break;
 case 18: 
 var $90=$hashval;
 var $91=$lasthash;
 var $92=$4;
 var $93=(($92+1048632)|0);
 var $94=(($93+($91<<2))|0);
 HEAP32[(($94)>>2)]=$90;
 var $95=$hashval;
 $1=$95;
 label=19;break;
 case 19: 
 var $97=$1;
 STACKTOP=sp;return $97;
  default: assert(0, "bad label: " + label);
 }
}
function _rawoutput($byte,$io){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$byte;
 $2=$io;
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($5>>>0)<($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$1;
 var $12=(($11)&255);
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+1)|0);
 HEAP32[(($14)>>2)]=$16;
 HEAP8[($15)]=$12;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _outputrle($chr,$outputfunc,$rd,$io){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $f;
 $1=$chr;
 $2=$outputfunc;
 $3=$rd;
 $4=$io;
 var $5=$1;
 var $6=($5|0)==-1;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$3;
 var $9=(($8+4)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$3;
 var $11=(($10)|0);
 HEAP32[(($11)>>2)]=0;
 label=16;break;
 case 3: 
 var $13=$3;
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=12;break;}
 case 4: 
 var $18=$1;
 var $19=($18|0)==0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$2;
 var $22=$4;
 FUNCTION_TABLE[$21](144,$22);
 label=11;break;
 case 6: 
 $f=1;
 label=7;break;
 case 7: 
 var $25=$f;
 var $26=$1;
 var $27=($25|0)<($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=$2;
 var $30=$3;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$4;
 FUNCTION_TABLE[$29]($32,$33);
 label=9;break;
 case 9: 
 var $35=$f;
 var $36=((($35)+(1))|0);
 $f=$36;
 label=7;break;
 case 10: 
 label=11;break;
 case 11: 
 var $39=$3;
 var $40=(($39+4)|0);
 HEAP32[(($40)>>2)]=0;
 label=16;break;
 case 12: 
 var $42=$1;
 var $43=($42|0)==144;
 if($43){label=13;break;}else{label=14;break;}
 case 13: 
 var $45=$3;
 var $46=(($45+4)|0);
 HEAP32[(($46)>>2)]=1;
 label=15;break;
 case 14: 
 var $48=$2;
 var $49=$1;
 var $50=$4;
 FUNCTION_TABLE[$48]($49,$50);
 var $51=$1;
 var $52=$3;
 var $53=(($52)|0);
 HEAP32[(($53)>>2)]=$51;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_s404($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $oLen=sp;
 var $sLen=(sp)+(8);
 var $pLen=(sp)+(16);
 var $dst;
 var $st=(sp)+(24);
 var $buf;
 var $src;
 $2=$in;
 $3=$out;
 $dst=0;
 var $4=$2;
 var $5=_fileno($4);
 var $6=_fstat($5,$st);
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=14;break;
 case 3: 
 var $10=(($st+36)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_malloc($11);
 $buf=$12;
 $src=$12;
 var $13=$src;
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=14;break;
 case 5: 
 var $17=$buf;
 var $18=(($st+36)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$2;
 var $21=_fread($17,1,$19,$20);
 var $22=$src;
 var $23=$22;
 var $24=_checkS404File($23,$oLen,$pLen,$sLen);
 var $25=($24|0)!=0;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 label=13;break;
 case 7: 
 var $28=HEAP32[(($oLen)>>2)];
 var $29=_malloc($28);
 $dst=$29;
 var $30=($29|0)==0;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 label=13;break;
 case 9: 
 var $33=$src;
 var $34=(($33+16)|0);
 var $35=$dst;
 var $36=HEAP32[(($oLen)>>2)];
 var $37=HEAP32[(($pLen)>>2)];
 _decompressS404($34,$35,$36,$37);
 var $38=$dst;
 var $39=HEAP32[(($oLen)>>2)];
 var $40=$3;
 var $41=_fwrite($38,$39,1,$40);
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 label=12;break;
 case 11: 
 var $45=$dst;
 _free($45);
 var $46=$src;
 _free($46);
 $1=0;
 label=14;break;
 case 12: 
 var $48=$dst;
 _free($48);
 label=13;break;
 case 13: 
 var $50=$src;
 _free($50);
 $1=-1;
 label=14;break;
 case 14: 
 var $52=$1;
 STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }
}
function _checkS404File($buf,$oLen,$pLen,$sLen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $2=$buf;
 $3=$oLen;
 $4=$pLen;
 $5=$sLen;
 var $6=$2;
 var $7=$6;
 var $8=_memcmp($7,21864,4);
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=10;break;
 case 3: 
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=_readmem32b($14);
 var $16=$5;
 HEAP32[(($16)>>2)]=$15;
 var $17=$5;
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)<0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=10;break;
 case 5: 
 var $22=$2;
 var $23=(($22+8)|0);
 var $24=$23;
 var $25=_readmem32b($24);
 var $26=$3;
 HEAP32[(($26)>>2)]=$25;
 var $27=$3;
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)<0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=10;break;
 case 7: 
 var $32=$2;
 var $33=(($32+12)|0);
 var $34=$33;
 var $35=_readmem32b($34);
 var $36=$4;
 HEAP32[(($36)>>2)]=$35;
 var $37=$4;
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)<0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=10;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $43=$1;
 STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _decompressS404($src,$orgdst,$dst_length,$src_length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $w;
 var $eff;
 var $n;
 var $dst;
 var $oLen;
 var $bs=sp;
 $1=$src;
 $2=$orgdst;
 $3=$dst_length;
 $4=$src_length;
 var $5=$3;
 $oLen=$5;
 var $6=$2;
 var $7=$oLen;
 var $8=(($6+$7)|0);
 $dst=$8;
 var $9=$1;
 var $10=$4;
 var $11=_initGetb($bs,$9,$10);
 $eff=$11;
 label=2;break;
 case 2: 
 var $13=$oLen;
 var $14=($13|0)>0;
 if($14){label=3;break;}else{label=61;break;}
 case 3: 
 var $16=_getb($bs,9);
 $w=$16;
 var $17=$w;
 var $18=($17&65535);
 var $19=($18|0)<256;
 if($19){label=4;break;}else{label=7;break;}
 case 4: 
 var $21=$dst;
 var $22=$2;
 var $23=($21>>>0)>($22>>>0);
 if($23){var $27=1;label=6;break;}else{label=5;break;}
 case 5: 
 ___assert_fail(20936,25616,140,27856);
 throw "Reached an unreachable!";
 label=6;break;
 case 6: 
 var $27;
 var $28=($27&1);
 var $29=$w;
 var $30=(($29)&255);
 var $31=$dst;
 var $32=((($31)-(1))|0);
 $dst=$32;
 HEAP8[($32)]=$30;
 var $33=$oLen;
 var $34=((($33)-(1))|0);
 $oLen=$34;
 label=60;break;
 case 7: 
 var $36=$w;
 var $37=($36&65535);
 var $38=($37|0)==318;
 if($38){label=9;break;}else{label=8;break;}
 case 8: 
 var $40=$w;
 var $41=($40&65535);
 var $42=($41|0)==319;
 if($42){label=9;break;}else{label=15;break;}
 case 9: 
 var $44=$w;
 var $45=($44&65535);
 var $46=$45<<4;
 var $47=(($46)&65535);
 $w=$47;
 var $48=_getb($bs,4);
 var $49=($48&65535);
 var $50=$w;
 var $51=($50&65535);
 var $52=$51|$49;
 var $53=(($52)&65535);
 $w=$53;
 var $54=$w;
 var $55=($54&65535);
 var $56=$55&31;
 var $57=((($56)+(14))|0);
 $n=$57;
 var $58=$n;
 var $59=$oLen;
 var $60=((($59)-($58))|0);
 $oLen=$60;
 label=10;break;
 case 10: 
 var $62=$n;
 var $63=((($62)-(1))|0);
 $n=$63;
 var $64=($62|0)>0;
 if($64){label=11;break;}else{label=14;break;}
 case 11: 
 var $66=_getb($bs,8);
 $w=$66;
 var $67=$dst;
 var $68=$2;
 var $69=($67>>>0)>($68>>>0);
 if($69){var $73=1;label=13;break;}else{label=12;break;}
 case 12: 
 ___assert_fail(20936,25616,154,27856);
 throw "Reached an unreachable!";
 label=13;break;
 case 13: 
 var $73;
 var $74=($73&1);
 var $75=$w;
 var $76=(($75)&255);
 var $77=$dst;
 var $78=((($77)-(1))|0);
 $dst=$78;
 HEAP8[($78)]=$76;
 label=10;break;
 case 14: 
 label=59;break;
 case 15: 
 var $81=$w;
 var $82=($81&65535);
 var $83=($82|0)>=384;
 if($83){label=16;break;}else{label=23;break;}
 case 16: 
 var $85=$w;
 var $86=($85&65535);
 var $87=$86&64;
 var $88=($87|0)!=0;
 var $89=($88?3:2);
 $n=$89;
 var $90=$w;
 var $91=($90&65535);
 var $92=$91&32;
 var $93=($92|0)!=0;
 if($93){label=17;break;}else{label=18;break;}
 case 17: 
 var $95=$w;
 var $96=($95&65535);
 var $97=$96&31;
 var $98=$eff;
 var $99=((($98)-(5))|0);
 var $100=$97<<$99;
 var $101=(($100)&65535);
 $w=$101;
 var $102=$eff;
 var $103=((($102)-(5))|0);
 var $104=_getb($bs,$103);
 var $105=($104&65535);
 var $106=$w;
 var $107=($106&65535);
 var $108=$107|$105;
 var $109=(($108)&65535);
 $w=$109;
 var $110=$w;
 var $111=($110&65535);
 var $112=((($111)+(544))|0);
 var $113=(($112)&65535);
 $w=$113;
 label=22;break;
 case 18: 
 var $115=$w;
 var $116=($115&65535);
 var $117=$116&48;
 var $118=($117|0)!=0;
 if($118){label=19;break;}else{label=20;break;}
 case 19: 
 var $120=$w;
 var $121=($120&65535);
 var $122=$121&15;
 var $123=$122<<1;
 var $124=(($123)&65535);
 $w=$124;
 var $125=_getb($bs,1);
 var $126=($125&65535);
 var $127=$w;
 var $128=($127&65535);
 var $129=$128|$126;
 var $130=(($129)&65535);
 $w=$130;
 label=21;break;
 case 20: 
 var $132=$w;
 var $133=($132&65535);
 var $134=$133&15;
 var $135=$134<<5;
 var $136=(($135)&65535);
 $w=$136;
 var $137=_getb($bs,5);
 var $138=($137&65535);
 var $139=$w;
 var $140=($139&65535);
 var $141=$140|$138;
 var $142=(($141)&65535);
 $w=$142;
 var $143=$w;
 var $144=($143&65535);
 var $145=((($144)+(32))|0);
 var $146=(($145)&65535);
 $w=$146;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=51;break;
 case 23: 
 var $150=$w;
 var $151=($150&65535);
 var $152=($151|0)>=320;
 if($152){label=24;break;}else{label=31;break;}
 case 24: 
 var $154=$w;
 var $155=($154&65535);
 var $156=$155&48;
 var $157=$156>>4;
 var $158=((($157)+(4))|0);
 $n=$158;
 var $159=$w;
 var $160=($159&65535);
 var $161=$160&8;
 var $162=($161|0)!=0;
 if($162){label=25;break;}else{label=26;break;}
 case 25: 
 var $164=$w;
 var $165=($164&65535);
 var $166=$165&7;
 var $167=$eff;
 var $168=((($167)-(3))|0);
 var $169=$166<<$168;
 var $170=(($169)&65535);
 $w=$170;
 var $171=$eff;
 var $172=((($171)-(3))|0);
 var $173=_getb($bs,$172);
 var $174=($173&65535);
 var $175=$w;
 var $176=($175&65535);
 var $177=$176|$174;
 var $178=(($177)&65535);
 $w=$178;
 var $179=$w;
 var $180=($179&65535);
 var $181=((($180)+(544))|0);
 var $182=(($181)&65535);
 $w=$182;
 label=30;break;
 case 26: 
 var $184=$w;
 var $185=($184&65535);
 var $186=$185&12;
 var $187=($186|0)!=0;
 if($187){label=27;break;}else{label=28;break;}
 case 27: 
 var $189=$w;
 var $190=($189&65535);
 var $191=$190&3;
 var $192=$191<<3;
 var $193=(($192)&65535);
 $w=$193;
 var $194=_getb($bs,3);
 var $195=($194&65535);
 var $196=$w;
 var $197=($196&65535);
 var $198=$197|$195;
 var $199=(($198)&65535);
 $w=$199;
 label=29;break;
 case 28: 
 var $201=$w;
 var $202=($201&65535);
 var $203=$202&3;
 var $204=$203<<7;
 var $205=(($204)&65535);
 $w=$205;
 var $206=_getb($bs,7);
 var $207=($206&65535);
 var $208=$w;
 var $209=($208&65535);
 var $210=$209|$207;
 var $211=(($210)&65535);
 $w=$211;
 var $212=$w;
 var $213=($212&65535);
 var $214=((($213)+(32))|0);
 var $215=(($214)&65535);
 $w=$215;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=50;break;
 case 31: 
 var $219=$w;
 var $220=($219&65535);
 var $221=($220|0)>=288;
 if($221){label=32;break;}else{label=39;break;}
 case 32: 
 var $223=$w;
 var $224=($223&65535);
 var $225=$224&30;
 var $226=$225>>1;
 var $227=((($226)+(8))|0);
 $n=$227;
 var $228=$w;
 var $229=($228&65535);
 var $230=$229&1;
 var $231=($230|0)!=0;
 if($231){label=33;break;}else{label=34;break;}
 case 33: 
 var $233=$eff;
 var $234=_getb($bs,$233);
 $w=$234;
 var $235=$w;
 var $236=($235&65535);
 var $237=((($236)+(544))|0);
 var $238=(($237)&65535);
 $w=$238;
 label=38;break;
 case 34: 
 var $240=_getb($bs,6);
 $w=$240;
 var $241=$w;
 var $242=($241&65535);
 var $243=$242&32;
 var $244=($243|0)!=0;
 if($244){label=35;break;}else{label=36;break;}
 case 35: 
 var $246=$w;
 var $247=($246&65535);
 var $248=$247&31;
 var $249=(($248)&65535);
 $w=$249;
 label=37;break;
 case 36: 
 var $251=$w;
 var $252=($251&65535);
 var $253=$252<<4;
 var $254=(($253)&65535);
 $w=$254;
 var $255=_getb($bs,4);
 var $256=($255&65535);
 var $257=$w;
 var $258=($257&65535);
 var $259=$258|$256;
 var $260=(($259)&65535);
 $w=$260;
 var $261=$w;
 var $262=($261&65535);
 var $263=((($262)+(32))|0);
 var $264=(($263)&65535);
 $w=$264;
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=49;break;
 case 39: 
 var $268=$w;
 var $269=($268&65535);
 var $270=$269&31;
 var $271=$270<<3;
 var $272=(($271)&65535);
 $w=$272;
 var $273=_getb($bs,3);
 var $274=($273&65535);
 var $275=$w;
 var $276=($275&65535);
 var $277=$276|$274;
 var $278=(($277)&65535);
 $w=$278;
 $n=23;
 label=40;break;
 case 40: 
 var $280=$w;
 var $281=($280&65535);
 var $282=($281|0)==255;
 if($282){label=41;break;}else{label=42;break;}
 case 41: 
 var $284=$w;
 var $285=($284&65535);
 var $286=$n;
 var $287=((($286)+($285))|0);
 $n=$287;
 var $288=_getb($bs,8);
 $w=$288;
 label=40;break;
 case 42: 
 var $290=$w;
 var $291=($290&65535);
 var $292=$n;
 var $293=((($292)+($291))|0);
 $n=$293;
 var $294=_getb($bs,7);
 $w=$294;
 var $295=$w;
 var $296=($295&65535);
 var $297=$296&64;
 var $298=($297|0)!=0;
 if($298){label=43;break;}else{label=44;break;}
 case 43: 
 var $300=$w;
 var $301=($300&65535);
 var $302=$301&63;
 var $303=$eff;
 var $304=((($303)-(6))|0);
 var $305=$302<<$304;
 var $306=(($305)&65535);
 $w=$306;
 var $307=$eff;
 var $308=((($307)-(6))|0);
 var $309=_getb($bs,$308);
 var $310=($309&65535);
 var $311=$w;
 var $312=($311&65535);
 var $313=$312|$310;
 var $314=(($313)&65535);
 $w=$314;
 var $315=$w;
 var $316=($315&65535);
 var $317=((($316)+(544))|0);
 var $318=(($317)&65535);
 $w=$318;
 label=48;break;
 case 44: 
 var $320=$w;
 var $321=($320&65535);
 var $322=$321&32;
 var $323=($322|0)!=0;
 if($323){label=45;break;}else{label=46;break;}
 case 45: 
 var $325=$w;
 var $326=($325&65535);
 var $327=$326&31;
 var $328=(($327)&65535);
 $w=$328;
 label=47;break;
 case 46: 
 var $330=$w;
 var $331=($330&65535);
 var $332=$331<<4;
 var $333=(($332)&65535);
 $w=$333;
 var $334=_getb($bs,4);
 var $335=($334&65535);
 var $336=$w;
 var $337=($336&65535);
 var $338=$337|$335;
 var $339=(($338)&65535);
 $w=$339;
 var $340=$w;
 var $341=($340&65535);
 var $342=((($341)+(32))|0);
 var $343=(($342)&65535);
 $w=$343;
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $349=$n;
 var $350=$oLen;
 var $351=((($350)-($349))|0);
 $oLen=$351;
 label=52;break;
 case 52: 
 var $353=$n;
 var $354=((($353)-(1))|0);
 $n=$354;
 var $355=($353|0)>0;
 if($355){label=53;break;}else{label=58;break;}
 case 53: 
 var $357=$dst;
 var $358=((($357)-(1))|0);
 $dst=$358;
 var $359=$dst;
 var $360=$2;
 var $361=($359>>>0)>=($360>>>0);
 if($361){var $365=1;label=55;break;}else{label=54;break;}
 case 54: 
 ___assert_fail(24152,25616,266,27856);
 throw "Reached an unreachable!";
 label=55;break;
 case 55: 
 var $365;
 var $366=($365&1);
 var $367=$dst;
 var $368=$w;
 var $369=($368&65535);
 var $370=(($367+$369)|0);
 var $371=(($370+1)|0);
 var $372=$2;
 var $373=$3;
 var $374=(($372+$373)|0);
 var $375=($371>>>0)<($374>>>0);
 if($375){var $379=1;label=57;break;}else{label=56;break;}
 case 56: 
 ___assert_fail(23272,25616,267,27856);
 throw "Reached an unreachable!";
 label=57;break;
 case 57: 
 var $379;
 var $380=($379&1);
 var $381=$w;
 var $382=($381&65535);
 var $383=((($382)+(1))|0);
 var $384=$dst;
 var $385=(($384+$383)|0);
 var $386=HEAP8[($385)];
 var $387=$dst;
 HEAP8[($387)]=$386;
 label=52;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 label=2;break;
 case 61: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _initGetb($bs,$src,$src_length){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $eff;
 $1=$bs;
 $2=$src;
 $3=$src_length;
 var $4=$2;
 var $5=$3;
 var $6=(($4+$5)|0);
 var $7=$6;
 var $8=$1;
 var $9=(($8+8)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=$1;
 var $12=(($11+12)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$1;
 var $14=(($13+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15;
 var $17=_readmem16b($16);
 var $18=($17&65535);
 var $19=$1;
 var $20=(($19+4)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$1;
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23&15;
 HEAP32[(($22)>>2)]=$24;
 var $25=$1;
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($27)-(2))|0);
 HEAP32[(($26)>>2)]=$28;
 var $29=$1;
 var $30=(($29+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31;
 var $33=_readmem16b($32);
 var $34=($33&65535);
 var $35=$1;
 var $36=(($35)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$1;
 var $38=(($37+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=((($39)-(2))|0);
 HEAP32[(($38)>>2)]=$40;
 var $41=$1;
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$43;
 var $45=_readmem16b($44);
 var $46=($45&65535);
 $eff=$46;
 var $47=$1;
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=((($49)-(2))|0);
 HEAP32[(($48)>>2)]=$50;
 var $51=$eff;
 STACKTOP=sp;return $51;
}
function _getb($bs,$nbits){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$bs;
 $2=$nbits;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&65535;
 HEAP32[(($4)>>2)]=$6;
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=($9|0)<($10|0);
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 var $13=$1;
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$1;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18<<$15;
 HEAP32[(($17)>>2)]=$19;
 var $20=$1;
 var $21=(($20+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=$1;
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($23>>>0)>=($26>>>0);
 if($27){var $31=1;label=4;break;}else{label=3;break;}
 case 3: 
 ___assert_fail(22640,25616,78,27816);
 throw "Reached an unreachable!";
 label=4;break;
 case 4: 
 var $31;
 var $32=($31&1);
 var $33=$1;
 var $34=(($33+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$35;
 var $37=_readmem16b($36);
 var $38=($37&65535);
 var $39=$1;
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41|$38;
 HEAP32[(($40)>>2)]=$42;
 var $43=$1;
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=((($45)-(2))|0);
 HEAP32[(($44)>>2)]=$46;
 var $47=$1;
 var $48=(($47+4)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$2;
 var $51=((($50)-($49))|0);
 $2=$51;
 var $52=$1;
 var $53=(($52+4)|0);
 HEAP32[(($53)>>2)]=16;
 label=5;break;
 case 5: 
 var $55=$2;
 var $56=$1;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=((($58)-($55))|0);
 HEAP32[(($57)>>2)]=$59;
 var $60=$2;
 var $61=$1;
 var $62=(($61)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$63<<$60;
 HEAP32[(($62)>>2)]=$64;
 var $65=$1;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67>>>16;
 var $69=(($68)&65535);
 STACKTOP=sp;return $69;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_arc($f,$fo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$fo;
 var $3=$1;
 var $4=$2;
 var $5=_arc_extract($3,$4);
 STACKTOP=sp;return $5;
}
function _arc_extract($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $hdr=sp;
 var $data;
 var $orig_data;
 var $exitval;
 $2=$in;
 $3=$out;
 $exitval=0;
 var $4=$2;
 var $5=_skip_sfx_header($4);
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=_read_file_header798($8,$hdr);
 var $10=($9|0)!=0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 $1=-1;
 label=21;break;
 case 4: 
 var $13=(($hdr)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=($15|0)==0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=21;break;
 case 6: 
 var $19=$2;
 var $20=_read_file_data799($19,$hdr);
 $data=$20;
 var $21=($20|0)==0;
 if($21){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=21;break;
 case 8: 
 $orig_data=0;
 var $24=(($hdr)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 if(($26|0)==8){ label=10;break;}else if(($26|0)==9){ label=11;break;}else if(($26|0)==127){ label=12;break;}else if(($26|0)==2){ label=9;break;}else{label=13;break;}
 case 9: 
 var $28=$data;
 $orig_data=$28;
 label=14;break;
 case 10: 
 var $30=$data;
 var $31=(($hdr+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($hdr+32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=_convert_lzw_dynamic($30,12,1,$32,$34,32);
 $orig_data=$35;
 label=14;break;
 case 11: 
 var $37=$data;
 var $38=(($hdr+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($hdr+32)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=_convert_lzw_dynamic($37,13,0,$39,$41,0);
 $orig_data=$42;
 label=14;break;
 case 12: 
 var $44=$data;
 var $45=(($hdr+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($hdr+32)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=_convert_lzw_dynamic($44,16,0,$46,$48,0);
 $orig_data=$49;
 label=14;break;
 case 13: 
 var $51=$data;
 _free($51);
 $1=-1;
 label=21;break;
 case 14: 
 var $53=$orig_data;
 var $54=($53|0)==0;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 var $56=$data;
 _free($56);
 $1=-1;
 label=21;break;
 case 16: 
 var $58=$orig_data;
 var $59=(($hdr+32)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=$3;
 var $62=_fwrite($58,1,$60,$61);
 var $63=(($hdr+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)!=($64|0);
 if($65){label=17;break;}else{label=18;break;}
 case 17: 
 $exitval=-1;
 label=18;break;
 case 18: 
 var $68=$orig_data;
 var $69=$data;
 var $70=($68|0)!=($69|0);
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=$orig_data;
 _free($72);
 label=20;break;
 case 20: 
 var $74=$data;
 _free($74);
 var $75=$exitval;
 $1=$75;
 label=21;break;
 case 21: 
 var $77=$1;
 STACKTOP=sp;return $77;
  default: assert(0, "bad label: " + label);
 }
}
function _skip_sfx_header($in){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c;
 var $f;
 var $got;
 $2=$in;
 $got=0;
 $f=0;
 label=2;break;
 case 2: 
 var $4=$f;
 var $5=($4|0)<4;
 if($5){label=3;break;}else{label=9;break;}
 case 3: 
 var $7=$2;
 var $8=_fgetc($7);
 $c=$8;
 var $9=($8|0)==-1;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=10;break;
 case 5: 
 var $12=$c;
 var $13=($12|0)==26;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 $got=1;
 var $15=$c;
 var $16=$2;
 var $17=_ungetc($15,$16);
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $20=$f;
 var $21=((($20)+(1))|0);
 $f=$21;
 label=2;break;
 case 9: 
 var $23=$got;
 $1=$23;
 label=10;break;
 case 10: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _read_file_header798($in,$hdrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 var $bufsiz;
 var $method_high;
 var $c;
 $2=$in;
 $3=$hdrp;
 $bufsiz=14;
 var $4=$3;
 var $5=(($4)|0);
 HEAP8[($5)]=-1;
 var $6=$2;
 var $7=_fgetc($6);
 var $8=($7|0)!=26;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=25;break;
 case 3: 
 var $11=$2;
 var $12=_fgetc($11);
 $c=$12;
 var $13=($12|0)==-1;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=25;break;
 case 5: 
 var $16=$c;
 var $17=$16>>7;
 $method_high=$17;
 var $18=$c;
 var $19=$18&127;
 var $20=(($19)&255);
 var $21=$3;
 var $22=(($21)|0);
 HEAP8[($22)]=$20;
 var $23=$3;
 var $24=(($23)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=($26|0)==0;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 $1=1;
 label=25;break;
 case 7: 
 var $30=$3;
 var $31=(($30)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=($33|0)==1;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=$bufsiz;
 var $37=((($36)-(4))|0);
 $bufsiz=$37;
 label=9;break;
 case 9: 
 var $39=$3;
 var $40=(($39+1)|0);
 var $41=(($40)|0);
 var $42=$2;
 var $43=_fread($41,1,13,$42);
 var $44=($43|0)!=13;
 if($44){label=11;break;}else{label=10;break;}
 case 10: 
 var $46=(($buf)|0);
 var $47=$bufsiz;
 var $48=$2;
 var $49=_fread($46,1,$47,$48);
 var $50=$bufsiz;
 var $51=($49|0)!=($50|0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 $1=0;
 label=25;break;
 case 12: 
 var $54=(($buf)|0);
 var $55=HEAP8[($54)];
 var $56=($55&255);
 var $57=(($buf+1)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=$59<<8;
 var $61=$56|$60;
 var $62=(($buf+2)|0);
 var $63=HEAP8[($62)];
 var $64=($63&255);
 var $65=$64<<16;
 var $66=$61|$65;
 var $67=(($buf+3)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=$69<<24;
 var $71=$66|$70;
 var $72=$3;
 var $73=(($72+16)|0);
 HEAP32[(($73)>>2)]=$71;
 var $74=(($buf+4)|0);
 var $75=HEAP8[($74)];
 var $76=($75&255);
 var $77=(($buf+5)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=$79<<8;
 var $81=$76|$80;
 var $82=$3;
 var $83=(($82+20)|0);
 HEAP32[(($83)>>2)]=$81;
 var $84=(($buf+6)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=(($buf+7)|0);
 var $88=HEAP8[($87)];
 var $89=($88&255);
 var $90=$89<<8;
 var $91=$86|$90;
 var $92=$3;
 var $93=(($92+24)|0);
 HEAP32[(($93)>>2)]=$91;
 var $94=(($buf+8)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=(($buf+9)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$99<<8;
 var $101=$96|$100;
 var $102=$3;
 var $103=(($102+28)|0);
 HEAP32[(($103)>>2)]=$101;
 var $104=$3;
 var $105=(($104+36)|0);
 HEAP32[(($105)>>2)]=1;
 var $106=$3;
 var $107=(($106)|0);
 var $108=HEAP8[($107)];
 var $109=($108&255);
 var $110=($109|0)==1;
 if($110){label=13;break;}else{label=14;break;}
 case 13: 
 var $112=$3;
 var $113=(($112+16)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$3;
 var $116=(($115+32)|0);
 HEAP32[(($116)>>2)]=$114;
 label=15;break;
 case 14: 
 var $118=(($buf+10)|0);
 var $119=HEAP8[($118)];
 var $120=($119&255);
 var $121=(($buf+11)|0);
 var $122=HEAP8[($121)];
 var $123=($122&255);
 var $124=$123<<8;
 var $125=$120|$124;
 var $126=(($buf+12)|0);
 var $127=HEAP8[($126)];
 var $128=($127&255);
 var $129=$128<<16;
 var $130=$125|$129;
 var $131=(($buf+13)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=$133<<24;
 var $135=$130|$134;
 var $136=$3;
 var $137=(($136+32)|0);
 HEAP32[(($137)>>2)]=$135;
 label=15;break;
 case 15: 
 var $139=$3;
 var $140=(($139+1)|0);
 var $141=(($140+12)|0);
 HEAP8[($141)]=0;
 var $142=$method_high;
 var $143=($142|0)!=0;
 if($143){label=16;break;}else{label=24;break;}
 case 16: 
 var $145=(($buf)|0);
 var $146=$2;
 var $147=_fread($145,1,12,$146);
 var $148=($147|0)!=12;
 if($148){label=17;break;}else{label=18;break;}
 case 17: 
 $1=0;
 label=25;break;
 case 18: 
 var $151=$3;
 var $152=(($151)|0);
 var $153=HEAP8[($152)];
 var $154=($153&255);
 var $155=($154|0)==2;
 if($155){label=19;break;}else{label=23;break;}
 case 19: 
 var $157=(($buf+3)|0);
 var $158=HEAP8[($157)];
 var $159=($158&255);
 var $160=($159|0)==255;
 if($160){label=20;break;}else{label=23;break;}
 case 20: 
 var $162=(($buf+2)|0);
 var $163=HEAP8[($162)];
 var $164=($163&255);
 var $165=($164|0)==253;
 if($165){label=21;break;}else{label=23;break;}
 case 21: 
 var $167=(($buf+1)|0);
 var $168=HEAP8[($167)];
 var $169=($168&255);
 var $170=($169|0)==220;
 if($170){label=22;break;}else{label=23;break;}
 case 22: 
 var $172=$3;
 var $173=(($172+36)|0);
 HEAP32[(($173)>>2)]=0;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 $1=1;
 label=25;break;
 case 25: 
 var $177=$1;
 STACKTOP=sp;return $177;
  default: assert(0, "bad label: " + label);
 }
}
function _read_file_data799($in,$hdrp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $data;
 var $siz;
 $2=$in;
 $3=$hdrp;
 var $4=$3;
 var $5=(($4+16)|0);
 var $6=HEAP32[(($5)>>2)];
 $siz=$6;
 var $7=$siz;
 var $8=_malloc($7);
 $data=$8;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $12=$data;
 var $13=$siz;
 var $14=$2;
 var $15=_fread($12,1,$13,$14);
 var $16=$siz;
 var $17=($15|0)!=($16|0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$data;
 _free($19);
 $data=0;
 label=5;break;
 case 5: 
 var $21=$data;
 $1=$21;
 label=6;break;
 case 6: 
 var $23=$1;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_compress($in,$out){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+418176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $stackp;
 var $code;
 var $finchar;
 var $oldcode;
 var $incode;
 var $inbits;
 var $posbits;
 var $outpos;
 var $insize;
 var $bitmask;
 var $free_ent;
 var $maxcode;
 var $maxmaxcode;
 var $n_bits;
 var $rsize;
 var $maxbits;
 var $block_mode;
 var $i;
 var $bytes_in;
 var $bytes_out;
 var $inbuf=sp;
 var $outbuf=(sp)+(1088);
 var $htab=(sp)+(4160);
 var $codetab=(sp)+(280168);
 var $i1;
 var $e;
 var $o;
 var $p;
 $2=$in;
 $3=$out;
 $bytes_in=0;
 $bytes_out=0;
 $insize=0;
 var $4=(($inbuf)|0);
 var $5=$2;
 var $6=_fread($4,1,1024,$5);
 $rsize=$6;
 var $7=$rsize;
 var $8=$insize;
 var $9=((($8)+($7))|0);
 $insize=$9;
 var $10=$insize;
 var $11=($10|0)<3;
 if($11){label=4;break;}else{label=2;break;}
 case 2: 
 var $13=(($inbuf)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=($15|0)!=31;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($inbuf+1)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=($20|0)!=157;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=74;break;
 case 5: 
 var $24=(($inbuf+2)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=$26&31;
 $maxbits=$27;
 var $28=(($inbuf+2)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&128;
 $block_mode=$31;
 var $32=$maxbits;
 var $33=1<<$32;
 $maxmaxcode=$33;
 var $34=$maxbits;
 var $35=($34|0)>16;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=74;break;
 case 7: 
 var $38=$insize;
 $bytes_in=$38;
 $n_bits=9;
 $maxcode=511;
 var $39=$n_bits;
 var $40=1<<$39;
 var $41=((($40)-(1))|0);
 $bitmask=$41;
 $oldcode=-1;
 $finchar=0;
 $outpos=0;
 $posbits=24;
 var $42=$block_mode;
 var $43=($42|0)!=0;
 var $44=($43?257:256);
 $free_ent=$44;
 var $45=$codetab;
 _memset($45, 0, 256)|0;
 $code=255;
 label=8;break;
 case 8: 
 var $47=$code;
 var $48=($47|0)>=0;
 if($48){label=9;break;}else{label=11;break;}
 case 9: 
 var $50=$code;
 var $51=(($50)&255);
 var $52=$code;
 var $53=(($htab)|0);
 var $54=$53;
 var $55=(($54+$52)|0);
 HEAP8[($55)]=$51;
 label=10;break;
 case 10: 
 var $57=$code;
 var $58=((($57)-(1))|0);
 $code=$58;
 label=8;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $62=$posbits;
 var $63=$62>>3;
 $o=$63;
 var $64=$o;
 var $65=$insize;
 var $66=($64|0)<=($65|0);
 if($66){label=14;break;}else{label=15;break;}
 case 14: 
 var $68=$insize;
 var $69=$o;
 var $70=((($68)-($69))|0);
 var $73=$70;label=16;break;
 case 15: 
 var $73=0;label=16;break;
 case 16: 
 var $73;
 $e=$73;
 $i1=0;
 label=17;break;
 case 17: 
 var $75=$i1;
 var $76=$e;
 var $77=($75|0)<($76|0);
 if($77){label=18;break;}else{label=20;break;}
 case 18: 
 var $79=$i1;
 var $80=$o;
 var $81=((($79)+($80))|0);
 var $82=(($inbuf+$81)|0);
 var $83=HEAP8[($82)];
 var $84=$i1;
 var $85=(($inbuf+$84)|0);
 HEAP8[($85)]=$83;
 label=19;break;
 case 19: 
 var $87=$i1;
 var $88=((($87)+(1))|0);
 $i1=$88;
 label=17;break;
 case 20: 
 var $90=$e;
 $insize=$90;
 $posbits=0;
 var $91=$insize;
 var $92=($91>>>0)<64;
 if($92){label=21;break;}else{label=24;break;}
 case 21: 
 var $94=(($inbuf)|0);
 var $95=$insize;
 var $96=(($94+$95)|0);
 var $97=$2;
 var $98=_fread($96,1,1024,$97);
 $rsize=$98;
 var $99=($98|0)<0;
 if($99){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=74;break;
 case 23: 
 var $102=$rsize;
 var $103=$insize;
 var $104=((($103)+($102))|0);
 $insize=$104;
 label=24;break;
 case 24: 
 var $106=$rsize;
 var $107=($106|0)>0;
 if($107){label=25;break;}else{label=26;break;}
 case 25: 
 var $109=$insize;
 var $110=$insize;
 var $111=$n_bits;
 var $112=(((($110|0))%(($111|0)))&-1);
 var $113=((($109)-($112))|0);
 var $114=$113<<3;
 var $122=$114;label=27;break;
 case 26: 
 var $116=$insize;
 var $117=$116<<3;
 var $118=$n_bits;
 var $119=((($118)-(1))|0);
 var $120=((($117)-($119))|0);
 var $122=$120;label=27;break;
 case 27: 
 var $122;
 $inbits=$122;
 label=28;break;
 case 28: 
 var $124=$inbits;
 var $125=$posbits;
 var $126=($124|0)>($125|0);
 if($126){label=29;break;}else{label=68;break;}
 case 29: 
 var $128=$free_ent;
 var $129=$maxcode;
 var $130=($128|0)>($129|0);
 if($130){label=30;break;}else{label=34;break;}
 case 30: 
 var $132=$posbits;
 var $133=((($132)-(1))|0);
 var $134=$n_bits;
 var $135=$134<<3;
 var $136=$posbits;
 var $137=((($136)-(1))|0);
 var $138=$n_bits;
 var $139=$138<<3;
 var $140=((($137)+($139))|0);
 var $141=$n_bits;
 var $142=$141<<3;
 var $143=(((($140|0))%(($142|0)))&-1);
 var $144=((($135)-($143))|0);
 var $145=((($133)+($144))|0);
 $posbits=$145;
 var $146=$n_bits;
 var $147=((($146)+(1))|0);
 $n_bits=$147;
 var $148=$n_bits;
 var $149=$maxbits;
 var $150=($148|0)==($149|0);
 if($150){label=31;break;}else{label=32;break;}
 case 31: 
 var $152=$maxmaxcode;
 $maxcode=$152;
 label=33;break;
 case 32: 
 var $154=$n_bits;
 var $155=1<<$154;
 var $156=((($155)-(1))|0);
 $maxcode=$156;
 label=33;break;
 case 33: 
 var $158=$n_bits;
 var $159=1<<$158;
 var $160=((($159)-(1))|0);
 $bitmask=$160;
 label=13;break;
 case 34: 
 var $162=$posbits;
 var $163=$162>>3;
 var $164=(($inbuf+$163)|0);
 $p=$164;
 var $165=$p;
 var $166=(($165)|0);
 var $167=HEAP8[($166)];
 var $168=($167&255);
 var $169=$p;
 var $170=(($169+1)|0);
 var $171=HEAP8[($170)];
 var $172=($171&255);
 var $173=$172<<8;
 var $174=$168|$173;
 var $175=$p;
 var $176=(($175+2)|0);
 var $177=HEAP8[($176)];
 var $178=($177&255);
 var $179=$178<<16;
 var $180=$174|$179;
 var $181=$posbits;
 var $182=$181&7;
 var $183=$180>>($182|0);
 var $184=$bitmask;
 var $185=$183&$184;
 $code=$185;
 var $186=$n_bits;
 var $187=$posbits;
 var $188=((($187)+($186))|0);
 $posbits=$188;
 label=35;break;
 case 35: 
 if(0){label=36;break;}else{label=37;break;}
 case 36: 
 label=35;break;
 case 37: 
 var $192=$oldcode;
 var $193=($192|0)==-1;
 if($193){label=38;break;}else{label=41;break;}
 case 38: 
 var $195=$code;
 var $196=($195|0)>=256;
 if($196){label=39;break;}else{label=40;break;}
 case 39: 
 var $198=HEAP32[((_stderr)>>2)];
 var $199=$code;
 var $200=_fprintf($198,20896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$199,tempVarArgs)); STACKTOP=tempVarArgs;
 var $201=HEAP32[((_stderr)>>2)];
 var $202=_fprintf($201,25576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=-1;
 label=74;break;
 case 40: 
 var $204=$code;
 $oldcode=$204;
 $finchar=$204;
 var $205=(($204)&255);
 var $206=$outpos;
 var $207=((($206)+(1))|0);
 $outpos=$207;
 var $208=(($outbuf+$206)|0);
 HEAP8[($208)]=$205;
 label=28;break;
 case 41: 
 var $210=$code;
 var $211=($210|0)==256;
 if($211){label=42;break;}else{label=44;break;}
 case 42: 
 var $213=$block_mode;
 var $214=($213|0)!=0;
 if($214){label=43;break;}else{label=44;break;}
 case 43: 
 var $216=$codetab;
 _memset($216, 0, 256)|0;
 $free_ent=256;
 var $217=$posbits;
 var $218=((($217)-(1))|0);
 var $219=$n_bits;
 var $220=$219<<3;
 var $221=$posbits;
 var $222=((($221)-(1))|0);
 var $223=$n_bits;
 var $224=$223<<3;
 var $225=((($222)+($224))|0);
 var $226=$n_bits;
 var $227=$226<<3;
 var $228=(((($225|0))%(($227|0)))&-1);
 var $229=((($220)-($228))|0);
 var $230=((($218)+($229))|0);
 $posbits=$230;
 $n_bits=9;
 $maxcode=511;
 var $231=$n_bits;
 var $232=1<<$231;
 var $233=((($232)-(1))|0);
 $bitmask=$233;
 label=13;break;
 case 44: 
 var $235=$code;
 $incode=$235;
 var $236=(($htab+276000)|0);
 var $237=$236;
 $stackp=$237;
 var $238=$code;
 var $239=$free_ent;
 var $240=($238|0)>=($239|0);
 if($240){label=45;break;}else{label=48;break;}
 case 45: 
 var $242=$code;
 var $243=$free_ent;
 var $244=($242|0)>($243|0);
 if($244){label=46;break;}else{label=47;break;}
 case 46: 
 var $246=HEAP32[((_stderr)>>2)];
 var $247=_fprintf($246,25576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=-1;
 label=74;break;
 case 47: 
 var $249=$finchar;
 var $250=(($249)&255);
 var $251=$stackp;
 var $252=((($251)-(1))|0);
 $stackp=$252;
 HEAP8[($252)]=$250;
 var $253=$oldcode;
 $code=$253;
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 var $256=$code;
 var $257=($256|0)>=256;
 if($257){label=50;break;}else{label=51;break;}
 case 50: 
 var $259=$code;
 var $260=(($htab)|0);
 var $261=$260;
 var $262=(($261+$259)|0);
 var $263=HEAP8[($262)];
 var $264=$stackp;
 var $265=((($264)-(1))|0);
 $stackp=$265;
 HEAP8[($265)]=$263;
 var $266=$code;
 var $267=(($codetab+($266<<1))|0);
 var $268=HEAP16[(($267)>>1)];
 var $269=($268&65535);
 $code=$269;
 label=49;break;
 case 51: 
 var $271=$code;
 var $272=(($htab)|0);
 var $273=$272;
 var $274=(($273+$271)|0);
 var $275=HEAP8[($274)];
 var $276=($275&255);
 $finchar=$276;
 var $277=(($276)&255);
 var $278=$stackp;
 var $279=((($278)-(1))|0);
 $stackp=$279;
 HEAP8[($279)]=$277;
 var $280=$outpos;
 var $281=(($htab+276000)|0);
 var $282=$281;
 var $283=$stackp;
 var $284=$282;
 var $285=$283;
 var $286=((($284)-($285))|0);
 $i=$286;
 var $287=((($280)+($286))|0);
 var $288=($287|0)>=1024;
 if($288){label=52;break;}else{label=64;break;}
 case 52: 
 label=53;break;
 case 53: 
 var $291=$i;
 var $292=$outpos;
 var $293=(((1024)-($292))|0);
 var $294=($291|0)>($293|0);
 if($294){label=54;break;}else{label=55;break;}
 case 54: 
 var $296=$outpos;
 var $297=(((1024)-($296))|0);
 $i=$297;
 label=55;break;
 case 55: 
 var $299=$i;
 var $300=($299|0)>0;
 if($300){label=56;break;}else{label=57;break;}
 case 56: 
 var $302=(($outbuf)|0);
 var $303=$outpos;
 var $304=(($302+$303)|0);
 var $305=$stackp;
 var $306=$i;
 assert($306 % 1 === 0);(_memcpy($304, $305, $306)|0);
 var $307=$i;
 var $308=$outpos;
 var $309=((($308)+($307))|0);
 $outpos=$309;
 label=57;break;
 case 57: 
 var $311=$outpos;
 var $312=($311|0)>=1024;
 if($312){label=58;break;}else{label=61;break;}
 case 58: 
 var $314=(($outbuf)|0);
 var $315=$outpos;
 var $316=$3;
 var $317=_fwrite($314,1,$315,$316);
 var $318=$outpos;
 var $319=($317|0)!=($318|0);
 if($319){label=59;break;}else{label=60;break;}
 case 59: 
 $1=-1;
 label=74;break;
 case 60: 
 $outpos=0;
 label=61;break;
 case 61: 
 var $323=$i;
 var $324=$stackp;
 var $325=(($324+$323)|0);
 $stackp=$325;
 label=62;break;
 case 62: 
 var $327=(($htab+276000)|0);
 var $328=$327;
 var $329=$stackp;
 var $330=$328;
 var $331=$329;
 var $332=((($330)-($331))|0);
 $i=$332;
 var $333=($332|0)>0;
 if($333){label=53;break;}else{label=63;break;}
 case 63: 
 label=65;break;
 case 64: 
 var $336=(($outbuf)|0);
 var $337=$outpos;
 var $338=(($336+$337)|0);
 var $339=$stackp;
 var $340=$i;
 assert($340 % 1 === 0);(_memcpy($338, $339, $340)|0);
 var $341=$i;
 var $342=$outpos;
 var $343=((($342)+($341))|0);
 $outpos=$343;
 label=65;break;
 case 65: 
 var $345=$free_ent;
 $code=$345;
 var $346=$maxmaxcode;
 var $347=($345|0)<($346|0);
 if($347){label=66;break;}else{label=67;break;}
 case 66: 
 var $349=$oldcode;
 var $350=(($349)&65535);
 var $351=$code;
 var $352=(($codetab+($351<<1))|0);
 HEAP16[(($352)>>1)]=$350;
 var $353=$finchar;
 var $354=(($353)&255);
 var $355=$code;
 var $356=(($htab)|0);
 var $357=$356;
 var $358=(($357+$355)|0);
 HEAP8[($358)]=$354;
 var $359=$code;
 var $360=((($359)+(1))|0);
 $free_ent=$360;
 label=67;break;
 case 67: 
 var $362=$incode;
 $oldcode=$362;
 label=28;break;
 case 68: 
 var $364=$rsize;
 var $365=$bytes_in;
 var $366=((($365)+($364))|0);
 $bytes_in=$366;
 label=69;break;
 case 69: 
 var $368=$rsize;
 var $369=($368|0)>0;
 if($369){label=12;break;}else{label=70;break;}
 case 70: 
 var $371=$outpos;
 var $372=($371|0)>0;
 if($372){label=71;break;}else{label=73;break;}
 case 71: 
 var $374=(($outbuf)|0);
 var $375=$outpos;
 var $376=$3;
 var $377=_fwrite($374,1,$375,$376);
 var $378=$outpos;
 var $379=($377|0)!=($378|0);
 if($379){label=72;break;}else{label=73;break;}
 case 72: 
 $1=-1;
 label=74;break;
 case 73: 
 $1=0;
 label=74;break;
 case 74: 
 var $383=$1;
 STACKTOP=sp;return $383;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_lha($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $data=sp;
 $2=$in;
 $3=$out;
 label=2;break;
 case 2: 
 var $5=$2;
 var $6=_get_header($5,$data);
 var $7=($6|0)<0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 label=7;break;
 case 4: 
 var $10=(($data+4)|0);
 var $11=(($10)|0);
 var $12=_exclude_match($11);
 var $13=($12|0)!=0;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=$2;
 var $16=(($data+260)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=_fseek($15,$17,1);
 label=2;break;
 case 6: 
 var $20=$2;
 var $21=$3;
 var $22=(($data+264)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($data)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=_LhA_Decrunch($20,$21,$23,$25);
 $1=$26;
 label=8;break;
 case 7: 
 $1=-1;
 label=8;break;
 case 8: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _get_header($f,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 var $size;
 var $level;
 var $namelen;
 var $type;
 $2=$f;
 $3=$data;
 var $4=$3;
 var $5=$4;
 _memset($5, 0, 272)|0;
 var $6=(($buf)|0);
 var $7=$2;
 var $8=_fread($6,1,21,$7);
 var $9=($8|0)!=21;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=19;break;
 case 3: 
 var $12=(($buf+20)|0);
 var $13=HEAP8[($12)];
 var $14=($13&255);
 $level=$14;
 var $15=$level;
 if(($15|0)==3){ label=10;break;}else if(($15|0)==0){ label=4;break;}else if(($15|0)==1){ label=5;break;}else if(($15|0)==2){ label=9;break;}else{label=17;break;}
 case 4: 
 var $17=(($buf)|0);
 var $18=HEAP8[($17)];
 var $19=($18&255);
 $size=$19;
 var $20=(($buf)|0);
 var $21=(($20+2)|0);
 var $22=_readmem32b($21);
 var $23=$3;
 var $24=(($23)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=(($buf)|0);
 var $26=(($25+7)|0);
 var $27=_readmem32l($26);
 var $28=$3;
 var $29=(($28+260)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=(($buf)|0);
 var $31=(($30+11)|0);
 var $32=_readmem32l($31);
 var $33=$3;
 var $34=(($33+264)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$2;
 var $36=_read8($35);
 var $37=($36&255);
 $namelen=$37;
 var $38=$3;
 var $39=(($38+4)|0);
 var $40=(($39)|0);
 var $41=$namelen;
 var $42=$2;
 var $43=_fread($40,1,$41,$42);
 var $44=$2;
 var $45=_read16l($44);
 var $46=($45&65535);
 var $47=$3;
 var $48=(($47+268)|0);
 HEAP32[(($48)>>2)]=$46;
 var $49=$2;
 var $50=$size;
 var $51=((($50)+(2))|0);
 var $52=((($51)-(24))|0);
 var $53=$namelen;
 var $54=((($52)-($53))|0);
 var $55=_fseek($49,$54,1);
 label=18;break;
 case 5: 
 var $57=(($buf)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 $size=$59;
 var $60=(($buf)|0);
 var $61=(($60+2)|0);
 var $62=_readmem32b($61);
 var $63=$3;
 var $64=(($63)|0);
 HEAP32[(($64)>>2)]=$62;
 var $65=(($buf)|0);
 var $66=(($65+7)|0);
 var $67=_readmem32l($66);
 var $68=$3;
 var $69=(($68+260)|0);
 HEAP32[(($69)>>2)]=$67;
 var $70=(($buf)|0);
 var $71=(($70+11)|0);
 var $72=_readmem32l($71);
 var $73=$3;
 var $74=(($73+264)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$2;
 var $76=_read8($75);
 var $77=($76&255);
 $namelen=$77;
 var $78=$3;
 var $79=(($78+4)|0);
 var $80=(($79)|0);
 var $81=$namelen;
 var $82=$2;
 var $83=_fread($80,1,$81,$82);
 var $84=$2;
 var $85=_read16l($84);
 var $86=($85&65535);
 var $87=$3;
 var $88=(($87+268)|0);
 HEAP32[(($88)>>2)]=$86;
 var $89=$2;
 var $90=$size;
 var $91=$namelen;
 var $92=((($91)+(22))|0);
 var $93=((($90)-($92))|0);
 var $94=((($93)-(2))|0);
 var $95=_fseek($89,$94,1);
 label=6;break;
 case 6: 
 var $97=$2;
 var $98=_read16l($97);
 var $99=($98&65535);
 $size=$99;
 var $100=($99|0)!=0;
 if($100){label=7;break;}else{label=8;break;}
 case 7: 
 var $102=$2;
 var $103=$size;
 var $104=((($103)-(2))|0);
 var $105=_fseek($102,$104,1);
 var $106=$size;
 var $107=$3;
 var $108=(($107+260)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=((($109)-($106))|0);
 HEAP32[(($108)>>2)]=$110;
 label=6;break;
 case 8: 
 label=18;break;
 case 9: 
 var $113=(($buf)|0);
 var $114=_readmem16l($113);
 var $115=($114&65535);
 $size=$115;
 label=10;break;
 case 10: 
 var $117=(($buf)|0);
 var $118=(($117+2)|0);
 var $119=_readmem32b($118);
 var $120=$3;
 var $121=(($120)|0);
 HEAP32[(($121)>>2)]=$119;
 var $122=(($buf)|0);
 var $123=(($122+7)|0);
 var $124=_readmem32l($123);
 var $125=$3;
 var $126=(($125+260)|0);
 HEAP32[(($126)>>2)]=$124;
 var $127=(($buf)|0);
 var $128=(($127+11)|0);
 var $129=_readmem32l($128);
 var $130=$3;
 var $131=(($130+264)|0);
 HEAP32[(($131)>>2)]=$129;
 var $132=$2;
 var $133=_read16l($132);
 var $134=($133&65535);
 var $135=$3;
 var $136=(($135+268)|0);
 HEAP32[(($136)>>2)]=$134;
 var $137=$2;
 var $138=_read8($137);
 label=11;break;
 case 11: 
 var $140=$2;
 var $141=_read16l($140);
 var $142=($141&65535);
 $size=$142;
 var $143=($142|0)!=0;
 if($143){label=12;break;}else{label=16;break;}
 case 12: 
 var $145=$2;
 var $146=_read8($145);
 var $147=($146&255);
 $type=$147;
 var $148=$type;
 var $149=($148|0)==1;
 if($149){label=13;break;}else{label=14;break;}
 case 13: 
 var $151=$3;
 var $152=(($151+4)|0);
 var $153=(($152)|0);
 var $154=$size;
 var $155=((($154)-(3))|0);
 var $156=$2;
 var $157=_fread($153,1,$155,$156);
 label=15;break;
 case 14: 
 var $159=$2;
 var $160=$size;
 var $161=((($160)-(3))|0);
 var $162=_fseek($159,$161,1);
 label=15;break;
 case 15: 
 label=11;break;
 case 16: 
 label=18;break;
 case 17: 
 $1=-1;
 label=19;break;
 case 18: 
 $1=0;
 label=19;break;
 case 19: 
 var $168=$1;
 STACKTOP=sp;return $168;
  default: assert(0, "bad label: " + label);
 }
}
function _LhA_Decrunch($in,$out,$size,$Method){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $dd;
 var $err;
 var $DecodeStart;
 var $DecodeC;
 var $DecodeP;
 var $text;
 var $i;
 var $c;
 var $offset;
 var $dicsiz;
 $1=$in;
 $2=$out;
 $3=$size;
 $4=$Method;
 $err=0;
 var $5=_calloc(25232,1);
 var $6=$5;
 $dd=$6;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=30;break;}
 case 2: 
 var $9=$1;
 var $10=$dd;
 var $11=(($10+4)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$dd;
 var $13=(($12+12)|0);
 HEAP16[(($13)>>1)]=13;
 $DecodeStart=454;
 $DecodeP=592;
 $DecodeC=336;
 var $14=$4;
 switch(($14|0)){case 762079281:{ label=3;break;}case 762079284:{ label=4;break;}case 762079285:{ label=5;break;}case 762079286:{ label=6;break;}case 762079287:{ label=7;break;}case 762079288:{ label=8;break;}default:{label=9;break;}}break;
 case 3: 
 var $16=$dd;
 var $17=(($16+12)|0);
 HEAP16[(($17)>>1)]=12;
 $DecodeStart=500;
 $DecodeC=8;
 $DecodeP=278;
 label=10;break;
 case 4: 
 var $19=$dd;
 var $20=(($19+12)|0);
 HEAP16[(($20)>>1)]=12;
 label=5;break;
 case 5: 
 label=10;break;
 case 6: 
 var $23=$dd;
 var $24=(($23+12)|0);
 HEAP16[(($24)>>1)]=15;
 label=10;break;
 case 7: 
 var $26=$dd;
 var $27=(($26+12)|0);
 HEAP16[(($27)>>1)]=16;
 label=10;break;
 case 8: 
 var $29=$dd;
 var $30=(($29+12)|0);
 HEAP16[(($30)>>1)]=17;
 label=10;break;
 case 9: 
 $err=1;
 label=10;break;
 case 10: 
 var $33=$err;
 var $34=($33|0)!=0;
 if($34){label=29;break;}else{label=11;break;}
 case 11: 
 var $36=$dd;
 var $37=(($36+12)|0);
 var $38=HEAP16[(($37)>>1)];
 var $39=($38&65535);
 var $40=1<<$39;
 $dicsiz=$40;
 var $41=$4;
 var $42=($41|0)==762083955;
 if($42){var $47=1;label=13;break;}else{label=12;break;}
 case 12: 
 var $44=$4;
 var $45=($44|0)==762342706;
 var $47=$45;label=13;break;
 case 13: 
 var $47;
 var $48=($47?254:253);
 $offset=$48;
 var $49=$dicsiz;
 var $50=_calloc($49,1);
 var $51=$dd;
 var $52=(($51+8)|0);
 HEAP32[(($52)>>2)]=$50;
 $text=$50;
 var $53=($50|0)!=0;
 if($53){label=14;break;}else{label=27;break;}
 case 14: 
 var $55=$text;
 var $56=$dicsiz;
 _memset($55, 32, $56)|0;
 var $57=$DecodeStart;
 var $58=$dd;
 FUNCTION_TABLE[$57]($58);
 var $59=$dicsiz;
 var $60=((($59)-(1))|0);
 $dicsiz=$60;
 label=15;break;
 case 15: 
 var $62=$dd;
 var $63=(($62+24)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$3;
 var $66=($64>>>0)>=($65>>>0);
 if($66){label=16;break;}else{label=17;break;}
 case 16: 
 label=26;break;
 case 17: 
 var $69=$DecodeC;
 var $70=$dd;
 var $71=FUNCTION_TABLE[$69]($70);
 var $72=($71&65535);
 $c=$72;
 var $73=$dd;
 var $74=(($73)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)!=0;
 if($76){label=18;break;}else{label=19;break;}
 case 18: 
 label=26;break;
 case 19: 
 var $79=$c;
 var $80=($79|0)<=255;
 if($80){label=20;break;}else{label=21;break;}
 case 20: 
 var $82=$c;
 var $83=$2;
 var $84=_fputc($82,$83);
 var $85=(($84)&255);
 var $86=$dd;
 var $87=(($86+20)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=((($88)+(1))|0);
 HEAP32[(($87)>>2)]=$89;
 var $90=$text;
 var $91=(($90+$88)|0);
 HEAP8[($91)]=$85;
 var $92=$dicsiz;
 var $93=$dd;
 var $94=(($93+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$95&$92;
 HEAP32[(($94)>>2)]=$96;
 var $97=$dd;
 var $98=(($97+24)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=((($99)+(1))|0);
 HEAP32[(($98)>>2)]=$100;
 label=25;break;
 case 21: 
 var $102=$offset;
 var $103=$c;
 var $104=((($103)-($102))|0);
 $c=$104;
 var $105=$dd;
 var $106=(($105+20)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$DecodeP;
 var $109=$dd;
 var $110=FUNCTION_TABLE[$108]($109);
 var $111=($110&65535);
 var $112=((($107)-($111))|0);
 var $113=((($112)-(1))|0);
 $i=$113;
 var $114=$c;
 var $115=$dd;
 var $116=(($115+24)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=((($117)+($114))|0);
 HEAP32[(($116)>>2)]=$118;
 label=22;break;
 case 22: 
 var $120=$c;
 var $121=((($120)-(1))|0);
 $c=$121;
 var $122=($120|0)!=0;
 if($122){label=23;break;}else{label=24;break;}
 case 23: 
 var $124=$i;
 var $125=((($124)+(1))|0);
 $i=$125;
 var $126=$dicsiz;
 var $127=$124&$126;
 var $128=$text;
 var $129=(($128+$127)|0);
 var $130=HEAP8[($129)];
 var $131=(($130<<24)>>24);
 var $132=$2;
 var $133=_fputc($131,$132);
 var $134=(($133)&255);
 var $135=$dd;
 var $136=(($135+20)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=((($137)+(1))|0);
 HEAP32[(($136)>>2)]=$138;
 var $139=$text;
 var $140=(($139+$137)|0);
 HEAP8[($140)]=$134;
 var $141=$dicsiz;
 var $142=$dd;
 var $143=(($142+20)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$144&$141;
 HEAP32[(($143)>>2)]=$145;
 label=22;break;
 case 24: 
 label=25;break;
 case 25: 
 label=15;break;
 case 26: 
 var $149=$dd;
 var $150=(($149)|0);
 var $151=HEAP32[(($150)>>2)];
 $err=$151;
 var $152=$text;
 _free($152);
 label=28;break;
 case 27: 
 $err=-1;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $156=$dd;
 var $157=$156;
 _free($157);
 label=31;break;
 case 30: 
 $err=-1;
 label=31;break;
 case 31: 
 var $160=$err;
 STACKTOP=sp;return $160;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_start_st1($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$dat;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535);
 var $6=($5|0)<=13;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=(($8+32)|0);
 var $10=$9;
 var $11=(($10+4)|0);
 HEAP32[(($11)>>2)]=14;
 var $12=$1;
 var $13=(($12+32)|0);
 var $14=$13;
 var $15=(($14)|0);
 HEAP32[(($15)>>2)]=4;
 label=7;break;
 case 3: 
 var $17=$1;
 var $18=(($17+12)|0);
 var $19=HEAP16[(($18)>>1)];
 var $20=($19&65535);
 var $21=($20|0)==16;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$1;
 var $24=(($23+32)|0);
 var $25=$24;
 var $26=(($25+4)|0);
 HEAP32[(($26)>>2)]=17;
 label=6;break;
 case 5: 
 var $28=$1;
 var $29=(($28+32)|0);
 var $30=$29;
 var $31=(($30+4)|0);
 HEAP32[(($31)>>2)]=16;
 label=6;break;
 case 6: 
 var $33=$1;
 var $34=(($33+32)|0);
 var $35=$34;
 var $36=(($35)|0);
 HEAP32[(($36)>>2)]=5;
 label=7;break;
 case 7: 
 var $38=$1;
 _init_getbits($38);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_p_st1($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $j;
 var $mask;
 $1=$dat;
 var $2=$1;
 var $3=(($2+14)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535);
 var $6=$5>>8;
 var $7=$1;
 var $8=(($7+32)|0);
 var $9=$8;
 var $10=(($9+8226)|0);
 var $11=(($10+($6<<1))|0);
 var $12=HEAP16[(($11)>>1)];
 $j=$12;
 var $13=$j;
 var $14=($13&65535);
 var $15=$1;
 var $16=(($15+32)|0);
 var $17=$16;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($14|0)<($19|0);
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 var $22=$1;
 var $23=$j;
 var $24=($23&65535);
 var $25=$1;
 var $26=(($25+32)|0);
 var $27=$26;
 var $28=(($27+25072)|0);
 var $29=(($28+$24)|0);
 var $30=HEAP8[($29)];
 _fillbuf($22,$30);
 label=10;break;
 case 3: 
 var $32=$1;
 _fillbuf($32,8);
 $mask=-32768;
 label=4;break;
 case 4: 
 var $34=$1;
 var $35=(($34+14)|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=($36&65535);
 var $38=$mask;
 var $39=($38&65535);
 var $40=$37&$39;
 var $41=($40|0)!=0;
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=$j;
 var $44=($43&65535);
 var $45=$1;
 var $46=(($45+32)|0);
 var $47=$46;
 var $48=(($47+10776)|0);
 var $49=(($48+($44<<1))|0);
 var $50=HEAP16[(($49)>>1)];
 $j=$50;
 label=7;break;
 case 6: 
 var $52=$j;
 var $53=($52&65535);
 var $54=$1;
 var $55=(($54+32)|0);
 var $56=$55;
 var $57=(($56+8738)|0);
 var $58=(($57+($53<<1))|0);
 var $59=HEAP16[(($58)>>1)];
 $j=$59;
 label=7;break;
 case 7: 
 var $61=$mask;
 var $62=($61&65535);
 var $63=$62>>1;
 var $64=(($63)&65535);
 $mask=$64;
 label=8;break;
 case 8: 
 var $66=$j;
 var $67=($66&65535);
 var $68=$1;
 var $69=(($68+32)|0);
 var $70=$69;
 var $71=(($70+4)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($67|0)>=($72|0);
 if($73){label=4;break;}else{label=9;break;}
 case 9: 
 var $75=$1;
 var $76=$j;
 var $77=($76&65535);
 var $78=$1;
 var $79=(($78+32)|0);
 var $80=$79;
 var $81=(($80+25072)|0);
 var $82=(($81+$77)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=((($84)-(8))|0);
 var $86=(($85)&255);
 _fillbuf($75,$86);
 label=10;break;
 case 10: 
 var $88=$j;
 var $89=(($88<<16)>>16)!=0;
 if($89){label=11;break;}else{label=12;break;}
 case 11: 
 var $91=$j;
 var $92=($91&65535);
 var $93=((($92)-(1))|0);
 var $94=1<<$93;
 var $95=$1;
 var $96=$j;
 var $97=($96&65535);
 var $98=((($97)-(1))|0);
 var $99=(($98)&255);
 var $100=_getbits($95,$99);
 var $101=($100&65535);
 var $102=((($94)+($101))|0);
 var $103=(($102)&65535);
 $j=$103;
 label=12;break;
 case 12: 
 var $105=$j;
 STACKTOP=sp;return $105;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_c_st1($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $j;
 var $mask;
 $1=$dat;
 var $2=$1;
 var $3=(($2+32)|0);
 var $4=$3;
 var $5=(($4+32)|0);
 var $6=HEAP16[(($5)>>1)];
 var $7=(($6<<16)>>16)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$1;
 var $10=_getbits($9,16);
 var $11=$1;
 var $12=(($11+32)|0);
 var $13=$12;
 var $14=(($13+32)|0);
 HEAP16[(($14)>>1)]=$10;
 var $15=$1;
 _read_pt_len($15,19,5,3);
 var $16=$1;
 _read_c_len($16);
 var $17=$1;
 var $18=$1;
 var $19=(($18+32)|0);
 var $20=$19;
 var $21=(($20+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22)&65535);
 var $24=$1;
 var $25=(($24+32)|0);
 var $26=$25;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28)&65535);
 _read_pt_len($17,$23,$29,-1);
 label=3;break;
 case 3: 
 var $31=$1;
 var $32=(($31+32)|0);
 var $33=$32;
 var $34=(($33+32)|0);
 var $35=HEAP16[(($34)>>1)];
 var $36=((($35)-(1))&65535);
 HEAP16[(($34)>>1)]=$36;
 var $37=$1;
 var $38=(($37+14)|0);
 var $39=HEAP16[(($38)>>1)];
 var $40=($39&65535);
 var $41=$40>>4;
 var $42=$1;
 var $43=(($42+32)|0);
 var $44=$43;
 var $45=(($44+34)|0);
 var $46=(($45+($41<<1))|0);
 var $47=HEAP16[(($46)>>1)];
 $j=$47;
 var $48=$j;
 var $49=($48&65535);
 var $50=($49|0)<510;
 if($50){label=4;break;}else{label=5;break;}
 case 4: 
 var $52=$1;
 var $53=$j;
 var $54=($53&65535);
 var $55=$1;
 var $56=(($55+32)|0);
 var $57=$56;
 var $58=(($57+24562)|0);
 var $59=(($58+$54)|0);
 var $60=HEAP8[($59)];
 _fillbuf($52,$60);
 label=12;break;
 case 5: 
 var $62=$1;
 _fillbuf($62,12);
 $mask=-32768;
 label=6;break;
 case 6: 
 var $64=$1;
 var $65=(($64+14)|0);
 var $66=HEAP16[(($65)>>1)];
 var $67=($66&65535);
 var $68=$mask;
 var $69=($68&65535);
 var $70=$67&$69;
 var $71=($70|0)!=0;
 if($71){label=7;break;}else{label=8;break;}
 case 7: 
 var $73=$j;
 var $74=($73&65535);
 var $75=$1;
 var $76=(($75+32)|0);
 var $77=$76;
 var $78=(($77+10776)|0);
 var $79=(($78+($74<<1))|0);
 var $80=HEAP16[(($79)>>1)];
 $j=$80;
 label=9;break;
 case 8: 
 var $82=$j;
 var $83=($82&65535);
 var $84=$1;
 var $85=(($84+32)|0);
 var $86=$85;
 var $87=(($86+8738)|0);
 var $88=(($87+($83<<1))|0);
 var $89=HEAP16[(($88)>>1)];
 $j=$89;
 label=9;break;
 case 9: 
 var $91=$mask;
 var $92=($91&65535);
 var $93=$92>>1;
 var $94=(($93)&65535);
 $mask=$94;
 label=10;break;
 case 10: 
 var $96=$j;
 var $97=($96&65535);
 var $98=($97|0)>=510;
 if($98){label=6;break;}else{label=11;break;}
 case 11: 
 var $100=$1;
 var $101=$j;
 var $102=($101&65535);
 var $103=$1;
 var $104=(($103+32)|0);
 var $105=$104;
 var $106=(($105+24562)|0);
 var $107=(($106+$102)|0);
 var $108=HEAP8[($107)];
 var $109=($108&255);
 var $110=((($109)-(12))|0);
 var $111=(($110)&255);
 _fillbuf($100,$111);
 label=12;break;
 case 12: 
 var $113=$j;
 STACKTOP=sp;return $113;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_start_fix($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$dat;
 var $2=$1;
 var $3=(($2+32)|0);
 var $4=$3;
 var $5=(($4+24)|0);
 HEAP32[(($5)>>2)]=314;
 var $6=$1;
 var $7=(($6+32)|0);
 var $8=$7;
 var $9=(($8+28)|0);
 HEAP16[(($9)>>1)]=60;
 var $10=$1;
 _init_getbits($10);
 var $11=$1;
 var $12=(($11+32)|0);
 var $13=$12;
 var $14=(($13+4)|0);
 HEAP32[(($14)>>2)]=64;
 var $15=$1;
 _start_c_dyn($15);
 var $16=$1;
 _ready_made($16,0);
 var $17=$1;
 var $18=$1;
 var $19=(($18+32)|0);
 var $20=$19;
 var $21=(($20+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22)&65535);
 var $24=$1;
 var $25=(($24+32)|0);
 var $26=$25;
 var $27=(($26+25072)|0);
 var $28=(($27)|0);
 var $29=$1;
 var $30=(($29+32)|0);
 var $31=$30;
 var $32=(($31+8226)|0);
 var $33=(($32)|0);
 _make_table($17,$23,$28,8,$33);
 STACKTOP=sp;return;
}
function _decode_c_dyn($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $c;
 var $buf;
 var $cnt;
 $1=$dat;
 var $2=$1;
 var $3=(($2+32)|0);
 var $4=$3;
 var $5=(($4+14838)|0);
 var $6=(($5)|0);
 var $7=HEAP16[(($6)>>1)];
 var $8=(($7<<16)>>16);
 $c=$8;
 var $9=$1;
 var $10=(($9+14)|0);
 var $11=HEAP16[(($10)>>1)];
 $buf=$11;
 $cnt=0;
 label=2;break;
 case 2: 
 var $13=$c;
 var $14=$buf;
 var $15=(($14<<16)>>16);
 var $16=($15|0)<0;
 var $17=($16&1);
 var $18=((($13)-($17))|0);
 var $19=$1;
 var $20=(($19+32)|0);
 var $21=$20;
 var $22=(($21+14838)|0);
 var $23=(($22+($18<<1))|0);
 var $24=HEAP16[(($23)>>1)];
 var $25=(($24<<16)>>16);
 $c=$25;
 var $26=$buf;
 var $27=(($26<<16)>>16);
 var $28=$27<<1;
 var $29=(($28)&65535);
 $buf=$29;
 var $30=$cnt;
 var $31=((($30)+(1))&65535);
 $cnt=$31;
 var $32=(($31<<16)>>16);
 var $33=($32|0)==16;
 if($33){label=3;break;}else{label=4;break;}
 case 3: 
 var $35=$1;
 _fillbuf($35,16);
 var $36=$1;
 var $37=(($36+14)|0);
 var $38=HEAP16[(($37)>>1)];
 $buf=$38;
 $cnt=0;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $41=$c;
 var $42=($41|0)>0;
 if($42){label=2;break;}else{label=6;break;}
 case 6: 
 var $44=$1;
 var $45=$cnt;
 var $46=(($45)&255);
 _fillbuf($44,$46);
 var $47=$c;
 var $48=$47^-1;
 $c=$48;
 var $49=$1;
 var $50=$c;
 _update_c($49,$50);
 var $51=$c;
 var $52=$1;
 var $53=(($52+32)|0);
 var $54=$53;
 var $55=(($54+12)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($51|0)==($56|0);
 if($57){label=7;break;}else{label=8;break;}
 case 7: 
 var $59=$1;
 var $60=_getbits($59,8);
 var $61=($60&65535);
 var $62=$c;
 var $63=((($62)+($61))|0);
 $c=$63;
 label=8;break;
 case 8: 
 var $65=$c;
 var $66=(($65)&65535);
 STACKTOP=sp;return $66;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_p_st0($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $j;
 $1=$dat;
 var $2=$1;
 var $3=(($2+14)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535);
 var $6=$5>>8;
 var $7=$1;
 var $8=(($7+32)|0);
 var $9=$8;
 var $10=(($9+8226)|0);
 var $11=(($10+($6<<1))|0);
 var $12=HEAP16[(($11)>>1)];
 var $13=($12&65535);
 $j=$13;
 var $14=$j;
 var $15=$1;
 var $16=(($15+32)|0);
 var $17=$16;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($14|0)<($19|0);
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 var $22=$1;
 var $23=$j;
 var $24=$1;
 var $25=(($24+32)|0);
 var $26=$25;
 var $27=(($26+25072)|0);
 var $28=(($27+$23)|0);
 var $29=HEAP8[($28)];
 _fillbuf($22,$29);
 label=10;break;
 case 3: 
 var $31=$1;
 _fillbuf($31,8);
 var $32=$1;
 var $33=(($32+14)|0);
 var $34=HEAP16[(($33)>>1)];
 var $35=($34&65535);
 $i=$35;
 label=4;break;
 case 4: 
 var $37=$i;
 var $38=(($37)&65535);
 var $39=(($38<<16)>>16);
 var $40=($39|0)<0;
 if($40){label=5;break;}else{label=6;break;}
 case 5: 
 var $42=$j;
 var $43=$1;
 var $44=(($43+32)|0);
 var $45=$44;
 var $46=(($45+10776)|0);
 var $47=(($46+($42<<1))|0);
 var $48=HEAP16[(($47)>>1)];
 var $49=($48&65535);
 $j=$49;
 label=7;break;
 case 6: 
 var $51=$j;
 var $52=$1;
 var $53=(($52+32)|0);
 var $54=$53;
 var $55=(($54+8738)|0);
 var $56=(($55+($51<<1))|0);
 var $57=HEAP16[(($56)>>1)];
 var $58=($57&65535);
 $j=$58;
 label=7;break;
 case 7: 
 var $60=$i;
 var $61=$60<<1;
 $i=$61;
 label=8;break;
 case 8: 
 var $63=$j;
 var $64=$1;
 var $65=(($64+32)|0);
 var $66=$65;
 var $67=(($66+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($63|0)>=($68|0);
 if($69){label=4;break;}else{label=9;break;}
 case 9: 
 var $71=$1;
 var $72=$j;
 var $73=$1;
 var $74=(($73+32)|0);
 var $75=$74;
 var $76=(($75+25072)|0);
 var $77=(($76+$72)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=((($79)-(8))|0);
 var $81=(($80)&255);
 _fillbuf($71,$81);
 label=10;break;
 case 10: 
 var $83=$j;
 var $84=$83<<6;
 var $85=$1;
 var $86=_getbits($85,6);
 var $87=($86&65535);
 var $88=((($84)+($87))|0);
 var $89=(($88)&65535);
 STACKTOP=sp;return $89;
  default: assert(0, "bad label: " + label);
 }
}
function _fillbuf($dat,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$dat;
 $2=$n;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=($4&255);
 var $6=$1;
 var $7=(($6+17)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 var $10=($5|0)>($9|0);
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=$1;
 var $13=(($12+17)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$2;
 var $17=($16&255);
 var $18=((($17)-($15))|0);
 var $19=(($18)&255);
 $2=$19;
 var $20=$1;
 var $21=(($20+14)|0);
 var $22=HEAP16[(($21)>>1)];
 var $23=($22&65535);
 var $24=$1;
 var $25=(($24+17)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=$23<<$27;
 var $29=$1;
 var $30=(($29+16)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=$1;
 var $34=(($33+17)|0);
 var $35=HEAP8[($34)];
 var $36=($35&255);
 var $37=(((8)-($36))|0);
 var $38=$32>>($37|0);
 var $39=((($28)+($38))|0);
 var $40=(($39)&65535);
 var $41=$1;
 var $42=(($41+14)|0);
 HEAP16[(($42)>>1)]=$40;
 var $43=$1;
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=_fgetc($45);
 var $47=(($46)&255);
 var $48=$1;
 var $49=(($48+16)|0);
 HEAP8[($49)]=$47;
 var $50=$1;
 var $51=(($50+17)|0);
 HEAP8[($51)]=8;
 label=2;break;
 case 4: 
 var $53=$2;
 var $54=($53&255);
 var $55=$1;
 var $56=(($55+17)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=((($58)-($54))|0);
 var $60=(($59)&255);
 HEAP8[($56)]=$60;
 var $61=$1;
 var $62=(($61+14)|0);
 var $63=HEAP16[(($62)>>1)];
 var $64=($63&65535);
 var $65=$2;
 var $66=($65&255);
 var $67=$64<<$66;
 var $68=$1;
 var $69=(($68+16)|0);
 var $70=HEAP8[($69)];
 var $71=($70&255);
 var $72=$2;
 var $73=($72&255);
 var $74=(((8)-($73))|0);
 var $75=$71>>($74|0);
 var $76=((($67)+($75))|0);
 var $77=(($76)&65535);
 var $78=$1;
 var $79=(($78+14)|0);
 HEAP16[(($79)>>1)]=$77;
 var $80=$2;
 var $81=($80&255);
 var $82=$1;
 var $83=(($82+16)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=$85<<$81;
 var $87=(($86)&255);
 HEAP8[($83)]=$87;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _getbits($dat,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $x;
 $1=$dat;
 $2=$n;
 var $3=$1;
 var $4=(($3+14)|0);
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=$2;
 var $8=($7&255);
 var $9=(((16)-($8))|0);
 var $10=$6>>($9|0);
 var $11=(($10)&65535);
 $x=$11;
 var $12=$1;
 var $13=$2;
 _fillbuf($12,$13);
 var $14=$x;
 STACKTOP=sp;return $14;
}
function _update_c($dat,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $q;
 $1=$dat;
 $2=$p;
 var $3=$1;
 var $4=(($3+32)|0);
 var $5=$4;
 var $6=(($5+12814)|0);
 var $7=(($6)|0);
 var $8=HEAP16[(($7)>>1)];
 var $9=($8&65535);
 var $10=($9|0)==32768;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$1;
 var $13=$1;
 var $14=(($13+32)|0);
 var $15=$14;
 var $16=(($15+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17<<1);
 var $19=((($18)-(1))|0);
 _reconst($12,0,$19);
 label=3;break;
 case 3: 
 var $21=$1;
 var $22=(($21+32)|0);
 var $23=$22;
 var $24=(($23+12814)|0);
 var $25=(($24)|0);
 var $26=HEAP16[(($25)>>1)];
 var $27=((($26)+(1))&65535);
 HEAP16[(($25)>>1)]=$27;
 var $28=$2;
 var $29=$1;
 var $30=(($29+32)|0);
 var $31=$30;
 var $32=(($31+18374)|0);
 var $33=(($32+($28<<1))|0);
 var $34=HEAP16[(($33)>>1)];
 var $35=(($34<<16)>>16);
 $q=$35;
 label=4;break;
 case 4: 
 var $37=$1;
 var $38=$q;
 var $39=_swap_inc($37,$38);
 $q=$39;
 label=5;break;
 case 5: 
 var $41=$q;
 var $42=($41|0)!=0;
 if($42){label=4;break;}else{label=6;break;}
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _reconst($dat,$start,$end){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $j;
 var $k;
 var $l;
 var $b;
 var $f;
 var $g;
 $1=$dat;
 $2=$start;
 $3=$end;
 $b=0;
 var $4=$2;
 $j=$4;
 $i=$4;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=$3;
 var $8=($6|0)<($7|0);
 if($8){label=3;break;}else{label=9;break;}
 case 3: 
 var $10=$i;
 var $11=$1;
 var $12=(($11+32)|0);
 var $13=$12;
 var $14=(($13+14838)|0);
 var $15=(($14+($10<<1))|0);
 var $16=HEAP16[(($15)>>1)];
 var $17=(($16<<16)>>16);
 $k=$17;
 var $18=($17|0)<0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$i;
 var $21=$1;
 var $22=(($21+32)|0);
 var $23=$22;
 var $24=(($23+12814)|0);
 var $25=(($24+($20<<1))|0);
 var $26=HEAP16[(($25)>>1)];
 var $27=($26&65535);
 var $28=((($27)+(1))|0);
 var $29=(((($28|0))/(2))&-1);
 var $30=(($29)&65535);
 var $31=$j;
 var $32=$1;
 var $33=(($32+32)|0);
 var $34=$33;
 var $35=(($34+12814)|0);
 var $36=(($35+($31<<1))|0);
 HEAP16[(($36)>>1)]=$30;
 var $37=$k;
 var $38=(($37)&65535);
 var $39=$j;
 var $40=$1;
 var $41=(($40+32)|0);
 var $42=$41;
 var $43=(($42+14838)|0);
 var $44=(($43+($39<<1))|0);
 HEAP16[(($44)>>1)]=$38;
 var $45=$j;
 var $46=((($45)+(1))|0);
 $j=$46;
 label=5;break;
 case 5: 
 var $48=$i;
 var $49=$1;
 var $50=(($49+32)|0);
 var $51=$50;
 var $52=(($51+19258)|0);
 var $53=(($52+($48<<1))|0);
 var $54=HEAP16[(($53)>>1)];
 var $55=(($54<<16)>>16);
 $b=$55;
 var $56=$1;
 var $57=(($56+32)|0);
 var $58=$57;
 var $59=(($58+22794)|0);
 var $60=(($59+($55<<1))|0);
 var $61=HEAP16[(($60)>>1)];
 var $62=(($61<<16)>>16);
 var $63=$i;
 var $64=($62|0)==($63|0);
 if($64){label=6;break;}else{label=7;break;}
 case 6: 
 var $66=$b;
 var $67=(($66)&65535);
 var $68=$1;
 var $69=(($68+32)|0);
 var $70=$69;
 var $71=(($70+20)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=((($72)-(1))|0);
 HEAP32[(($71)>>2)]=$73;
 var $74=$1;
 var $75=(($74+32)|0);
 var $76=$75;
 var $77=(($76+16606)|0);
 var $78=(($77+($73<<1))|0);
 HEAP16[(($78)>>1)]=$67;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $81=$i;
 var $82=((($81)+(1))|0);
 $i=$82;
 label=2;break;
 case 9: 
 var $84=$j;
 var $85=((($84)-(1))|0);
 $j=$85;
 var $86=$3;
 var $87=((($86)-(1))|0);
 $i=$87;
 var $88=$3;
 var $89=((($88)-(2))|0);
 $l=$89;
 label=10;break;
 case 10: 
 var $91=$i;
 var $92=$2;
 var $93=($91|0)>=($92|0);
 if($93){label=11;break;}else{label=22;break;}
 case 11: 
 label=12;break;
 case 12: 
 var $96=$i;
 var $97=$l;
 var $98=($96|0)>=($97|0);
 if($98){label=13;break;}else{label=14;break;}
 case 13: 
 var $100=$j;
 var $101=$1;
 var $102=(($101+32)|0);
 var $103=$102;
 var $104=(($103+12814)|0);
 var $105=(($104+($100<<1))|0);
 var $106=HEAP16[(($105)>>1)];
 var $107=$i;
 var $108=$1;
 var $109=(($108+32)|0);
 var $110=$109;
 var $111=(($110+12814)|0);
 var $112=(($111+($107<<1))|0);
 HEAP16[(($112)>>1)]=$106;
 var $113=$j;
 var $114=$1;
 var $115=(($114+32)|0);
 var $116=$115;
 var $117=(($116+14838)|0);
 var $118=(($117+($113<<1))|0);
 var $119=HEAP16[(($118)>>1)];
 var $120=$i;
 var $121=$1;
 var $122=(($121+32)|0);
 var $123=$122;
 var $124=(($123+14838)|0);
 var $125=(($124+($120<<1))|0);
 HEAP16[(($125)>>1)]=$119;
 var $126=$i;
 var $127=((($126)-(1))|0);
 $i=$127;
 var $128=$j;
 var $129=((($128)-(1))|0);
 $j=$129;
 label=12;break;
 case 14: 
 var $131=$l;
 var $132=$1;
 var $133=(($132+32)|0);
 var $134=$133;
 var $135=(($134+12814)|0);
 var $136=(($135+($131<<1))|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=($137&65535);
 var $139=$l;
 var $140=((($139)+(1))|0);
 var $141=$1;
 var $142=(($141+32)|0);
 var $143=$142;
 var $144=(($143+12814)|0);
 var $145=(($144+($140<<1))|0);
 var $146=HEAP16[(($145)>>1)];
 var $147=($146&65535);
 var $148=((($138)+($147))|0);
 $f=$148;
 var $149=$2;
 $k=$149;
 label=15;break;
 case 15: 
 var $151=$f;
 var $152=$k;
 var $153=$1;
 var $154=(($153+32)|0);
 var $155=$154;
 var $156=(($155+12814)|0);
 var $157=(($156+($152<<1))|0);
 var $158=HEAP16[(($157)>>1)];
 var $159=($158&65535);
 var $160=($151>>>0)<($159>>>0);
 if($160){label=16;break;}else{label=18;break;}
 case 16: 
 label=17;break;
 case 17: 
 var $163=$k;
 var $164=((($163)+(1))|0);
 $k=$164;
 label=15;break;
 case 18: 
 label=19;break;
 case 19: 
 var $167=$j;
 var $168=$k;
 var $169=($167|0)>=($168|0);
 if($169){label=20;break;}else{label=21;break;}
 case 20: 
 var $171=$j;
 var $172=$1;
 var $173=(($172+32)|0);
 var $174=$173;
 var $175=(($174+12814)|0);
 var $176=(($175+($171<<1))|0);
 var $177=HEAP16[(($176)>>1)];
 var $178=$i;
 var $179=$1;
 var $180=(($179+32)|0);
 var $181=$180;
 var $182=(($181+12814)|0);
 var $183=(($182+($178<<1))|0);
 HEAP16[(($183)>>1)]=$177;
 var $184=$j;
 var $185=$1;
 var $186=(($185+32)|0);
 var $187=$186;
 var $188=(($187+14838)|0);
 var $189=(($188+($184<<1))|0);
 var $190=HEAP16[(($189)>>1)];
 var $191=$i;
 var $192=$1;
 var $193=(($192+32)|0);
 var $194=$193;
 var $195=(($194+14838)|0);
 var $196=(($195+($191<<1))|0);
 HEAP16[(($196)>>1)]=$190;
 var $197=$i;
 var $198=((($197)-(1))|0);
 $i=$198;
 var $199=$j;
 var $200=((($199)-(1))|0);
 $j=$200;
 label=19;break;
 case 21: 
 var $202=$f;
 var $203=(($202)&65535);
 var $204=$i;
 var $205=$1;
 var $206=(($205+32)|0);
 var $207=$206;
 var $208=(($207+12814)|0);
 var $209=(($208+($204<<1))|0);
 HEAP16[(($209)>>1)]=$203;
 var $210=$l;
 var $211=((($210)+(1))|0);
 var $212=(($211)&65535);
 var $213=$i;
 var $214=$1;
 var $215=(($214+32)|0);
 var $216=$215;
 var $217=(($216+14838)|0);
 var $218=(($217+($213<<1))|0);
 HEAP16[(($218)>>1)]=$212;
 var $219=$i;
 var $220=((($219)-(1))|0);
 $i=$220;
 var $221=$l;
 var $222=((($221)-(2))|0);
 $l=$222;
 label=10;break;
 case 22: 
 $f=0;
 var $224=$2;
 $i=$224;
 label=23;break;
 case 23: 
 var $226=$i;
 var $227=$3;
 var $228=($226|0)<($227|0);
 if($228){label=24;break;}else{label=32;break;}
 case 24: 
 var $230=$i;
 var $231=$1;
 var $232=(($231+32)|0);
 var $233=$232;
 var $234=(($233+14838)|0);
 var $235=(($234+($230<<1))|0);
 var $236=HEAP16[(($235)>>1)];
 var $237=(($236<<16)>>16);
 $j=$237;
 var $238=($237|0)<0;
 if($238){label=25;break;}else{label=26;break;}
 case 25: 
 var $240=$i;
 var $241=(($240)&65535);
 var $242=$j;
 var $243=$242^-1;
 var $244=$1;
 var $245=(($244+32)|0);
 var $246=$245;
 var $247=(($246+18374)|0);
 var $248=(($247+($243<<1))|0);
 HEAP16[(($248)>>1)]=$241;
 label=27;break;
 case 26: 
 var $250=$i;
 var $251=(($250)&65535);
 var $252=$j;
 var $253=((($252)-(1))|0);
 var $254=$1;
 var $255=(($254+32)|0);
 var $256=$255;
 var $257=(($256+21026)|0);
 var $258=(($257+($253<<1))|0);
 HEAP16[(($258)>>1)]=$251;
 var $259=$j;
 var $260=$1;
 var $261=(($260+32)|0);
 var $262=$261;
 var $263=(($262+21026)|0);
 var $264=(($263+($259<<1))|0);
 HEAP16[(($264)>>1)]=$251;
 label=27;break;
 case 27: 
 var $266=$i;
 var $267=$1;
 var $268=(($267+32)|0);
 var $269=$268;
 var $270=(($269+12814)|0);
 var $271=(($270+($266<<1))|0);
 var $272=HEAP16[(($271)>>1)];
 var $273=($272&65535);
 $g=$273;
 var $274=$f;
 var $275=($273|0)==($274|0);
 if($275){label=28;break;}else{label=29;break;}
 case 28: 
 var $277=$b;
 var $278=(($277)&65535);
 var $279=$i;
 var $280=$1;
 var $281=(($280+32)|0);
 var $282=$281;
 var $283=(($282+19258)|0);
 var $284=(($283+($279<<1))|0);
 HEAP16[(($284)>>1)]=$278;
 label=30;break;
 case 29: 
 var $286=$i;
 var $287=(($286)&65535);
 var $288=$1;
 var $289=(($288+32)|0);
 var $290=$289;
 var $291=(($290+20)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=((($292)+(1))|0);
 HEAP32[(($291)>>2)]=$293;
 var $294=$1;
 var $295=(($294+32)|0);
 var $296=$295;
 var $297=(($296+16606)|0);
 var $298=(($297+($292<<1))|0);
 var $299=HEAP16[(($298)>>1)];
 var $300=$i;
 var $301=$1;
 var $302=(($301+32)|0);
 var $303=$302;
 var $304=(($303+19258)|0);
 var $305=(($304+($300<<1))|0);
 HEAP16[(($305)>>1)]=$299;
 var $306=(($299<<16)>>16);
 $b=$306;
 var $307=$1;
 var $308=(($307+32)|0);
 var $309=$308;
 var $310=(($309+22794)|0);
 var $311=(($310+($306<<1))|0);
 HEAP16[(($311)>>1)]=$287;
 var $312=$g;
 $f=$312;
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $315=$i;
 var $316=((($315)+(1))|0);
 $i=$316;
 label=23;break;
 case 32: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _swap_inc($dat,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $b;
 var $q;
 var $r;
 var $s;
 $1=$dat;
 $2=$p;
 var $3=$2;
 var $4=$1;
 var $5=(($4+32)|0);
 var $6=$5;
 var $7=(($6+19258)|0);
 var $8=(($7+($3<<1))|0);
 var $9=HEAP16[(($8)>>1)];
 var $10=(($9<<16)>>16);
 $b=$10;
 var $11=$b;
 var $12=$1;
 var $13=(($12+32)|0);
 var $14=$13;
 var $15=(($14+22794)|0);
 var $16=(($15+($11<<1))|0);
 var $17=HEAP16[(($16)>>1)];
 var $18=(($17<<16)>>16);
 $q=$18;
 var $19=$2;
 var $20=($18|0)!=($19|0);
 if($20){label=2;break;}else{label=12;break;}
 case 2: 
 var $22=$2;
 var $23=$1;
 var $24=(($23+32)|0);
 var $25=$24;
 var $26=(($25+14838)|0);
 var $27=(($26+($22<<1))|0);
 var $28=HEAP16[(($27)>>1)];
 var $29=(($28<<16)>>16);
 $r=$29;
 var $30=$q;
 var $31=$1;
 var $32=(($31+32)|0);
 var $33=$32;
 var $34=(($33+14838)|0);
 var $35=(($34+($30<<1))|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=(($36<<16)>>16);
 $s=$37;
 var $38=$s;
 var $39=(($38)&65535);
 var $40=$2;
 var $41=$1;
 var $42=(($41+32)|0);
 var $43=$42;
 var $44=(($43+14838)|0);
 var $45=(($44+($40<<1))|0);
 HEAP16[(($45)>>1)]=$39;
 var $46=$r;
 var $47=(($46)&65535);
 var $48=$q;
 var $49=$1;
 var $50=(($49+32)|0);
 var $51=$50;
 var $52=(($51+14838)|0);
 var $53=(($52+($48<<1))|0);
 HEAP16[(($53)>>1)]=$47;
 var $54=$r;
 var $55=($54|0)>=0;
 if($55){label=3;break;}else{label=4;break;}
 case 3: 
 var $57=$q;
 var $58=(($57)&65535);
 var $59=$r;
 var $60=((($59)-(1))|0);
 var $61=$1;
 var $62=(($61+32)|0);
 var $63=$62;
 var $64=(($63+21026)|0);
 var $65=(($64+($60<<1))|0);
 HEAP16[(($65)>>1)]=$58;
 var $66=$r;
 var $67=$1;
 var $68=(($67+32)|0);
 var $69=$68;
 var $70=(($69+21026)|0);
 var $71=(($70+($66<<1))|0);
 HEAP16[(($71)>>1)]=$58;
 label=5;break;
 case 4: 
 var $73=$q;
 var $74=(($73)&65535);
 var $75=$r;
 var $76=$75^-1;
 var $77=$1;
 var $78=(($77+32)|0);
 var $79=$78;
 var $80=(($79+18374)|0);
 var $81=(($80+($76<<1))|0);
 HEAP16[(($81)>>1)]=$74;
 label=5;break;
 case 5: 
 var $83=$s;
 var $84=($83|0)>=0;
 if($84){label=6;break;}else{label=7;break;}
 case 6: 
 var $86=$2;
 var $87=(($86)&65535);
 var $88=$s;
 var $89=((($88)-(1))|0);
 var $90=$1;
 var $91=(($90+32)|0);
 var $92=$91;
 var $93=(($92+21026)|0);
 var $94=(($93+($89<<1))|0);
 HEAP16[(($94)>>1)]=$87;
 var $95=$s;
 var $96=$1;
 var $97=(($96+32)|0);
 var $98=$97;
 var $99=(($98+21026)|0);
 var $100=(($99+($95<<1))|0);
 HEAP16[(($100)>>1)]=$87;
 label=8;break;
 case 7: 
 var $102=$2;
 var $103=(($102)&65535);
 var $104=$s;
 var $105=$104^-1;
 var $106=$1;
 var $107=(($106+32)|0);
 var $108=$107;
 var $109=(($108+18374)|0);
 var $110=(($109+($105<<1))|0);
 HEAP16[(($110)>>1)]=$103;
 label=8;break;
 case 8: 
 var $112=$q;
 $2=$112;
 var $113=$b;
 var $114=$1;
 var $115=(($114+32)|0);
 var $116=$115;
 var $117=(($116+22794)|0);
 var $118=(($117+($113<<1))|0);
 var $119=HEAP16[(($118)>>1)];
 var $120=((($119)+(1))&65535);
 HEAP16[(($118)>>1)]=$120;
 var $121=$2;
 var $122=$1;
 var $123=(($122+32)|0);
 var $124=$123;
 var $125=(($124+12814)|0);
 var $126=(($125+($121<<1))|0);
 var $127=HEAP16[(($126)>>1)];
 var $128=((($127)+(1))&65535);
 HEAP16[(($126)>>1)]=$128;
 var $129=($128&65535);
 var $130=$2;
 var $131=((($130)-(1))|0);
 var $132=$1;
 var $133=(($132+32)|0);
 var $134=$133;
 var $135=(($134+12814)|0);
 var $136=(($135+($131<<1))|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=($137&65535);
 var $139=($129|0)==($138|0);
 if($139){label=9;break;}else{label=10;break;}
 case 9: 
 var $141=$2;
 var $142=((($141)-(1))|0);
 var $143=$1;
 var $144=(($143+32)|0);
 var $145=$144;
 var $146=(($145+19258)|0);
 var $147=(($146+($142<<1))|0);
 var $148=HEAP16[(($147)>>1)];
 var $149=$2;
 var $150=$1;
 var $151=(($150+32)|0);
 var $152=$151;
 var $153=(($152+19258)|0);
 var $154=(($153+($149<<1))|0);
 HEAP16[(($154)>>1)]=$148;
 label=11;break;
 case 10: 
 var $156=$2;
 var $157=(($156)&65535);
 var $158=$1;
 var $159=(($158+32)|0);
 var $160=$159;
 var $161=(($160+20)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=((($162)+(1))|0);
 HEAP32[(($161)>>2)]=$163;
 var $164=$1;
 var $165=(($164+32)|0);
 var $166=$165;
 var $167=(($166+16606)|0);
 var $168=(($167+($162<<1))|0);
 var $169=HEAP16[(($168)>>1)];
 var $170=$2;
 var $171=$1;
 var $172=(($171+32)|0);
 var $173=$172;
 var $174=(($173+19258)|0);
 var $175=(($174+($170<<1))|0);
 HEAP16[(($175)>>1)]=$169;
 var $176=(($169<<16)>>16);
 var $177=$1;
 var $178=(($177+32)|0);
 var $179=$178;
 var $180=(($179+22794)|0);
 var $181=(($180+($176<<1))|0);
 HEAP16[(($181)>>1)]=$157;
 label=11;break;
 case 11: 
 label=21;break;
 case 12: 
 var $184=$b;
 var $185=$2;
 var $186=((($185)+(1))|0);
 var $187=$1;
 var $188=(($187+32)|0);
 var $189=$188;
 var $190=(($189+19258)|0);
 var $191=(($190+($186<<1))|0);
 var $192=HEAP16[(($191)>>1)];
 var $193=(($192<<16)>>16);
 var $194=($184|0)==($193|0);
 if($194){label=13;break;}else{label=17;break;}
 case 13: 
 var $196=$b;
 var $197=$1;
 var $198=(($197+32)|0);
 var $199=$198;
 var $200=(($199+22794)|0);
 var $201=(($200+($196<<1))|0);
 var $202=HEAP16[(($201)>>1)];
 var $203=((($202)+(1))&65535);
 HEAP16[(($201)>>1)]=$203;
 var $204=$2;
 var $205=$1;
 var $206=(($205+32)|0);
 var $207=$206;
 var $208=(($207+12814)|0);
 var $209=(($208+($204<<1))|0);
 var $210=HEAP16[(($209)>>1)];
 var $211=((($210)+(1))&65535);
 HEAP16[(($209)>>1)]=$211;
 var $212=($211&65535);
 var $213=$2;
 var $214=((($213)-(1))|0);
 var $215=$1;
 var $216=(($215+32)|0);
 var $217=$216;
 var $218=(($217+12814)|0);
 var $219=(($218+($214<<1))|0);
 var $220=HEAP16[(($219)>>1)];
 var $221=($220&65535);
 var $222=($212|0)==($221|0);
 if($222){label=14;break;}else{label=15;break;}
 case 14: 
 var $224=$2;
 var $225=((($224)-(1))|0);
 var $226=$1;
 var $227=(($226+32)|0);
 var $228=$227;
 var $229=(($228+19258)|0);
 var $230=(($229+($225<<1))|0);
 var $231=HEAP16[(($230)>>1)];
 var $232=$2;
 var $233=$1;
 var $234=(($233+32)|0);
 var $235=$234;
 var $236=(($235+19258)|0);
 var $237=(($236+($232<<1))|0);
 HEAP16[(($237)>>1)]=$231;
 label=16;break;
 case 15: 
 var $239=$2;
 var $240=(($239)&65535);
 var $241=$1;
 var $242=(($241+32)|0);
 var $243=$242;
 var $244=(($243+20)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=((($245)+(1))|0);
 HEAP32[(($244)>>2)]=$246;
 var $247=$1;
 var $248=(($247+32)|0);
 var $249=$248;
 var $250=(($249+16606)|0);
 var $251=(($250+($245<<1))|0);
 var $252=HEAP16[(($251)>>1)];
 var $253=$2;
 var $254=$1;
 var $255=(($254+32)|0);
 var $256=$255;
 var $257=(($256+19258)|0);
 var $258=(($257+($253<<1))|0);
 HEAP16[(($258)>>1)]=$252;
 var $259=(($252<<16)>>16);
 var $260=$1;
 var $261=(($260+32)|0);
 var $262=$261;
 var $263=(($262+22794)|0);
 var $264=(($263+($259<<1))|0);
 HEAP16[(($264)>>1)]=$240;
 label=16;break;
 case 16: 
 label=20;break;
 case 17: 
 var $267=$2;
 var $268=$1;
 var $269=(($268+32)|0);
 var $270=$269;
 var $271=(($270+12814)|0);
 var $272=(($271+($267<<1))|0);
 var $273=HEAP16[(($272)>>1)];
 var $274=((($273)+(1))&65535);
 HEAP16[(($272)>>1)]=$274;
 var $275=($274&65535);
 var $276=$2;
 var $277=((($276)-(1))|0);
 var $278=$1;
 var $279=(($278+32)|0);
 var $280=$279;
 var $281=(($280+12814)|0);
 var $282=(($281+($277<<1))|0);
 var $283=HEAP16[(($282)>>1)];
 var $284=($283&65535);
 var $285=($275|0)==($284|0);
 if($285){label=18;break;}else{label=19;break;}
 case 18: 
 var $287=$b;
 var $288=(($287)&65535);
 var $289=$1;
 var $290=(($289+32)|0);
 var $291=$290;
 var $292=(($291+20)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=((($293)-(1))|0);
 HEAP32[(($292)>>2)]=$294;
 var $295=$1;
 var $296=(($295+32)|0);
 var $297=$296;
 var $298=(($297+16606)|0);
 var $299=(($298+($294<<1))|0);
 HEAP16[(($299)>>1)]=$288;
 var $300=$2;
 var $301=((($300)-(1))|0);
 var $302=$1;
 var $303=(($302+32)|0);
 var $304=$303;
 var $305=(($304+19258)|0);
 var $306=(($305+($301<<1))|0);
 var $307=HEAP16[(($306)>>1)];
 var $308=$2;
 var $309=$1;
 var $310=(($309+32)|0);
 var $311=$310;
 var $312=(($311+19258)|0);
 var $313=(($312+($308<<1))|0);
 HEAP16[(($313)>>1)]=$307;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $317=$2;
 var $318=$1;
 var $319=(($318+32)|0);
 var $320=$319;
 var $321=(($320+21026)|0);
 var $322=(($321+($317<<1))|0);
 var $323=HEAP16[(($322)>>1)];
 var $324=(($323<<16)>>16);
 STACKTOP=sp;return $324;
  default: assert(0, "bad label: " + label);
 }
}
function _init_getbits($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$dat;
 var $2=$1;
 var $3=(($2+14)|0);
 HEAP16[(($3)>>1)]=0;
 var $4=$1;
 var $5=(($4+16)|0);
 HEAP8[($5)]=0;
 var $6=$1;
 var $7=(($6+17)|0);
 HEAP8[($7)]=0;
 var $8=$1;
 _fillbuf($8,16);
 STACKTOP=sp;return;
}
function _start_c_dyn($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $j;
 var $f;
 $1=$dat;
 var $2=$1;
 var $3=(($2+32)|0);
 var $4=$3;
 var $5=(($4+24)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$1;
 var $8=(($7+32)|0);
 var $9=$8;
 var $10=(($9+28)|0);
 var $11=HEAP16[(($10)>>1)];
 var $12=($11&65535);
 var $13=((($12)+(256))|0);
 var $14=((($13)-(3))|0);
 var $15=((($14)+(1))|0);
 var $16=($6>>>0)>=($15>>>0);
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=512;label=4;break;
 case 3: 
 var $19=$1;
 var $20=(($19+32)|0);
 var $21=$20;
 var $22=(($21+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($23)-(1))|0);
 var $26=$24;label=4;break;
 case 4: 
 var $26;
 var $27=$1;
 var $28=(($27+32)|0);
 var $29=$28;
 var $30=(($29+12)|0);
 HEAP32[(($30)>>2)]=$26;
 $i=0;
 label=5;break;
 case 5: 
 var $32=$i;
 var $33=($32|0)<628;
 if($33){label=6;break;}else{label=8;break;}
 case 6: 
 var $35=$i;
 var $36=(($35)&65535);
 var $37=$i;
 var $38=$1;
 var $39=(($38+32)|0);
 var $40=$39;
 var $41=(($40+16606)|0);
 var $42=(($41+($37<<1))|0);
 HEAP16[(($42)>>1)]=$36;
 var $43=$i;
 var $44=$1;
 var $45=(($44+32)|0);
 var $46=$45;
 var $47=(($46+19258)|0);
 var $48=(($47+($43<<1))|0);
 HEAP16[(($48)>>1)]=0;
 label=7;break;
 case 7: 
 var $50=$i;
 var $51=((($50)+(1))|0);
 $i=$51;
 label=5;break;
 case 8: 
 $i=0;
 var $53=$1;
 var $54=(($53+32)|0);
 var $55=$54;
 var $56=(($55+24)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57<<1);
 var $59=((($58)-(2))|0);
 $j=$59;
 label=9;break;
 case 9: 
 var $61=$i;
 var $62=$1;
 var $63=(($62+32)|0);
 var $64=$63;
 var $65=(($64+24)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($61|0)<($66|0);
 if($67){label=10;break;}else{label=12;break;}
 case 10: 
 var $69=$j;
 var $70=$1;
 var $71=(($70+32)|0);
 var $72=$71;
 var $73=(($72+12814)|0);
 var $74=(($73+($69<<1))|0);
 HEAP16[(($74)>>1)]=1;
 var $75=$i;
 var $76=$75^-1;
 var $77=(($76)&65535);
 var $78=$j;
 var $79=$1;
 var $80=(($79+32)|0);
 var $81=$80;
 var $82=(($81+14838)|0);
 var $83=(($82+($78<<1))|0);
 HEAP16[(($83)>>1)]=$77;
 var $84=$j;
 var $85=(($84)&65535);
 var $86=$i;
 var $87=$1;
 var $88=(($87+32)|0);
 var $89=$88;
 var $90=(($89+18374)|0);
 var $91=(($90+($86<<1))|0);
 HEAP16[(($91)>>1)]=$85;
 var $92=$j;
 var $93=$1;
 var $94=(($93+32)|0);
 var $95=$94;
 var $96=(($95+19258)|0);
 var $97=(($96+($92<<1))|0);
 HEAP16[(($97)>>1)]=1;
 label=11;break;
 case 11: 
 var $99=$i;
 var $100=((($99)+(1))|0);
 $i=$100;
 var $101=$j;
 var $102=((($101)-(1))|0);
 $j=$102;
 label=9;break;
 case 12: 
 var $104=$1;
 var $105=(($104+32)|0);
 var $106=$105;
 var $107=(($106+20)|0);
 HEAP32[(($107)>>2)]=2;
 var $108=$1;
 var $109=(($108+32)|0);
 var $110=$109;
 var $111=(($110+24)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=((($112)-(1))|0);
 var $114=(($113)&65535);
 var $115=$1;
 var $116=(($115+32)|0);
 var $117=$116;
 var $118=(($117+22794)|0);
 var $119=(($118+2)|0);
 HEAP16[(($119)>>1)]=$114;
 var $120=$1;
 var $121=(($120+32)|0);
 var $122=$121;
 var $123=(($122+24)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=($124<<1);
 var $126=((($125)-(2))|0);
 $i=$126;
 label=13;break;
 case 13: 
 var $128=$j;
 var $129=($128|0)>=0;
 if($129){label=14;break;}else{label=18;break;}
 case 14: 
 var $131=$i;
 var $132=$1;
 var $133=(($132+32)|0);
 var $134=$133;
 var $135=(($134+12814)|0);
 var $136=(($135+($131<<1))|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=($137&65535);
 var $139=$i;
 var $140=((($139)-(1))|0);
 var $141=$1;
 var $142=(($141+32)|0);
 var $143=$142;
 var $144=(($143+12814)|0);
 var $145=(($144+($140<<1))|0);
 var $146=HEAP16[(($145)>>1)];
 var $147=($146&65535);
 var $148=((($138)+($147))|0);
 var $149=(($148)&65535);
 var $150=$j;
 var $151=$1;
 var $152=(($151+32)|0);
 var $153=$152;
 var $154=(($153+12814)|0);
 var $155=(($154+($150<<1))|0);
 HEAP16[(($155)>>1)]=$149;
 var $156=($149&65535);
 $f=$156;
 var $157=$i;
 var $158=(($157)&65535);
 var $159=$j;
 var $160=$1;
 var $161=(($160+32)|0);
 var $162=$161;
 var $163=(($162+14838)|0);
 var $164=(($163+($159<<1))|0);
 HEAP16[(($164)>>1)]=$158;
 var $165=$j;
 var $166=(($165)&65535);
 var $167=$i;
 var $168=((($167)-(1))|0);
 var $169=$1;
 var $170=(($169+32)|0);
 var $171=$170;
 var $172=(($171+21026)|0);
 var $173=(($172+($168<<1))|0);
 HEAP16[(($173)>>1)]=$166;
 var $174=$i;
 var $175=$1;
 var $176=(($175+32)|0);
 var $177=$176;
 var $178=(($177+21026)|0);
 var $179=(($178+($174<<1))|0);
 HEAP16[(($179)>>1)]=$166;
 var $180=$f;
 var $181=$j;
 var $182=((($181)+(1))|0);
 var $183=$1;
 var $184=(($183+32)|0);
 var $185=$184;
 var $186=(($185+12814)|0);
 var $187=(($186+($182<<1))|0);
 var $188=HEAP16[(($187)>>1)];
 var $189=($188&65535);
 var $190=($180|0)==($189|0);
 if($190){label=15;break;}else{label=16;break;}
 case 15: 
 var $192=$j;
 var $193=(($192)&65535);
 var $194=$j;
 var $195=((($194)+(1))|0);
 var $196=$1;
 var $197=(($196+32)|0);
 var $198=$197;
 var $199=(($198+19258)|0);
 var $200=(($199+($195<<1))|0);
 var $201=HEAP16[(($200)>>1)];
 var $202=$j;
 var $203=$1;
 var $204=(($203+32)|0);
 var $205=$204;
 var $206=(($205+19258)|0);
 var $207=(($206+($202<<1))|0);
 HEAP16[(($207)>>1)]=$201;
 var $208=(($201<<16)>>16);
 var $209=$1;
 var $210=(($209+32)|0);
 var $211=$210;
 var $212=(($211+22794)|0);
 var $213=(($212+($208<<1))|0);
 HEAP16[(($213)>>1)]=$193;
 label=17;break;
 case 16: 
 var $215=$j;
 var $216=(($215)&65535);
 var $217=$1;
 var $218=(($217+32)|0);
 var $219=$218;
 var $220=(($219+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=((($221)+(1))|0);
 HEAP32[(($220)>>2)]=$222;
 var $223=$1;
 var $224=(($223+32)|0);
 var $225=$224;
 var $226=(($225+16606)|0);
 var $227=(($226+($221<<1))|0);
 var $228=HEAP16[(($227)>>1)];
 var $229=$j;
 var $230=$1;
 var $231=(($230+32)|0);
 var $232=$231;
 var $233=(($232+19258)|0);
 var $234=(($233+($229<<1))|0);
 HEAP16[(($234)>>1)]=$228;
 var $235=(($228<<16)>>16);
 var $236=$1;
 var $237=(($236+32)|0);
 var $238=$237;
 var $239=(($238+22794)|0);
 var $240=(($239+($235<<1))|0);
 HEAP16[(($240)>>1)]=$216;
 label=17;break;
 case 17: 
 var $242=$i;
 var $243=((($242)-(2))|0);
 $i=$243;
 var $244=$j;
 var $245=((($244)-(1))|0);
 $j=$245;
 label=13;break;
 case 18: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _ready_made($dat,$method){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 var $code;
 var $weight;
 var $tbl;
 $1=$dat;
 $2=$method;
 var $3=$2;
 var $4=((8072+($3<<6))|0);
 var $5=(($4)|0);
 $tbl=$5;
 var $6=$tbl;
 var $7=(($6+4)|0);
 $tbl=$7;
 var $8=HEAP32[(($6)>>2)];
 $j=$8;
 var $9=$j;
 var $10=(((16)-($9))|0);
 var $11=1<<$10;
 $weight=$11;
 $code=0;
 $i=0;
 label=2;break;
 case 2: 
 var $13=$i;
 var $14=$1;
 var $15=(($14+32)|0);
 var $16=$15;
 var $17=(($16+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($13|0)<($18|0);
 if($19){label=3;break;}else{label=8;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $22=$tbl;
 var $23=HEAP32[(($22)>>2)];
 var $24=$i;
 var $25=($23|0)==($24|0);
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=$j;
 var $28=((($27)+(1))|0);
 $j=$28;
 var $29=$tbl;
 var $30=(($29+4)|0);
 $tbl=$30;
 var $31=$weight;
 var $32=$31>>>1;
 $weight=$32;
 label=4;break;
 case 6: 
 var $34=$j;
 var $35=(($34)&255);
 var $36=$i;
 var $37=$1;
 var $38=(($37+32)|0);
 var $39=$38;
 var $40=(($39+25072)|0);
 var $41=(($40+$36)|0);
 HEAP8[($41)]=$35;
 var $42=$code;
 var $43=(($42)&65535);
 var $44=$i;
 var $45=$1;
 var $46=(($45+32)|0);
 var $47=$46;
 var $48=(($47+14582)|0);
 var $49=(($48+($44<<1))|0);
 HEAP16[(($49)>>1)]=$43;
 var $50=$weight;
 var $51=$code;
 var $52=((($51)+($50))|0);
 $code=$52;
 label=7;break;
 case 7: 
 var $54=$i;
 var $55=((($54)+(1))|0);
 $i=$55;
 label=2;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _make_table($dat,$nchar,$bitlen,$tablebits,$table){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $count=sp;
 var $weight=(sp)+(40);
 var $start=(sp)+(80);
 var $total;
 var $i;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $avail;
 var $p;
 $1=$dat;
 $2=$nchar;
 $3=$bitlen;
 $4=$tablebits;
 $5=$table;
 var $6=$2;
 var $7=(($6<<16)>>16);
 $avail=$7;
 var $8=$count;
 _memset($8, 0, 34)|0;
 $i=1;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=($10>>>0)<=16;
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$i;
 var $14=(((16)-($13))|0);
 var $15=1<<$14;
 var $16=(($15)&65535);
 var $17=$i;
 var $18=(($weight+($17<<1))|0);
 HEAP16[(($18)>>1)]=$16;
 label=4;break;
 case 4: 
 var $20=$i;
 var $21=((($20)+(1))|0);
 $i=$21;
 label=2;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $24=$i;
 var $25=$2;
 var $26=(($25<<16)>>16);
 var $27=($24>>>0)<($26>>>0);
 if($27){label=7;break;}else{label=9;break;}
 case 7: 
 var $29=$i;
 var $30=$3;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=(($count+($33<<1))|0);
 var $35=HEAP16[(($34)>>1)];
 var $36=((($35)+(1))&65535);
 HEAP16[(($34)>>1)]=$36;
 label=8;break;
 case 8: 
 var $38=$i;
 var $39=((($38)+(1))|0);
 $i=$39;
 label=6;break;
 case 9: 
 $total=0;
 $i=1;
 label=10;break;
 case 10: 
 var $42=$i;
 var $43=($42>>>0)<=16;
 if($43){label=11;break;}else{label=13;break;}
 case 11: 
 var $45=$total;
 var $46=$i;
 var $47=(($start+($46<<1))|0);
 HEAP16[(($47)>>1)]=$45;
 var $48=$i;
 var $49=(($weight+($48<<1))|0);
 var $50=HEAP16[(($49)>>1)];
 var $51=($50&65535);
 var $52=$i;
 var $53=(($count+($52<<1))|0);
 var $54=HEAP16[(($53)>>1)];
 var $55=($54&65535);
 var $56=(Math_imul($51,$55)|0);
 var $57=$total;
 var $58=($57&65535);
 var $59=((($58)+($56))|0);
 var $60=(($59)&65535);
 $total=$60;
 label=12;break;
 case 12: 
 var $62=$i;
 var $63=((($62)+(1))|0);
 $i=$63;
 label=10;break;
 case 13: 
 var $65=$total;
 var $66=($65&65535);
 var $67=$66&65535;
 var $68=($67|0)!=0;
 if($68){label=14;break;}else{label=15;break;}
 case 14: 
 var $70=$1;
 var $71=(($70)|0);
 HEAP32[(($71)>>2)]=1;
 label=47;break;
 case 15: 
 var $73=$4;
 var $74=(($73<<16)>>16);
 var $75=(((16)-($74))|0);
 $m=$75;
 $i=1;
 label=16;break;
 case 16: 
 var $77=$i;
 var $78=$4;
 var $79=(($78<<16)>>16);
 var $80=($77>>>0)<=($79>>>0);
 if($80){label=17;break;}else{label=19;break;}
 case 17: 
 var $82=$m;
 var $83=$i;
 var $84=(($start+($83<<1))|0);
 var $85=HEAP16[(($84)>>1)];
 var $86=($85&65535);
 var $87=$86>>($82|0);
 var $88=(($87)&65535);
 HEAP16[(($84)>>1)]=$88;
 var $89=$m;
 var $90=$i;
 var $91=(($weight+($90<<1))|0);
 var $92=HEAP16[(($91)>>1)];
 var $93=($92&65535);
 var $94=$93>>($89|0);
 var $95=(($94)&65535);
 HEAP16[(($91)>>1)]=$95;
 label=18;break;
 case 18: 
 var $97=$i;
 var $98=((($97)+(1))|0);
 $i=$98;
 label=16;break;
 case 19: 
 var $100=$4;
 var $101=(($100<<16)>>16);
 var $102=((($101)+(1))|0);
 var $103=(($start+($102<<1))|0);
 var $104=HEAP16[(($103)>>1)];
 var $105=($104&65535);
 var $106=$m;
 var $107=$105>>($106|0);
 $j=$107;
 var $108=$4;
 var $109=(($108<<16)>>16);
 var $110=1<<$109;
 $k=$110;
 var $111=$j;
 var $112=($111|0)!=0;
 if($112){label=20;break;}else{label=25;break;}
 case 20: 
 var $114=$j;
 $i=$114;
 label=21;break;
 case 21: 
 var $116=$i;
 var $117=$k;
 var $118=($116>>>0)<($117>>>0);
 if($118){label=22;break;}else{label=24;break;}
 case 22: 
 var $120=$i;
 var $121=$5;
 var $122=(($121+($120<<1))|0);
 HEAP16[(($122)>>1)]=0;
 label=23;break;
 case 23: 
 var $124=$i;
 var $125=((($124)+(1))|0);
 $i=$125;
 label=21;break;
 case 24: 
 label=25;break;
 case 25: 
 $j=0;
 label=26;break;
 case 26: 
 var $129=$j;
 var $130=$2;
 var $131=(($130<<16)>>16);
 var $132=($129|0)<($131|0);
 if($132){label=27;break;}else{label=46;break;}
 case 27: 
 var $134=$j;
 var $135=$3;
 var $136=(($135+$134)|0);
 var $137=HEAP8[($136)];
 var $138=($137&255);
 $k=$138;
 var $139=$k;
 var $140=($139|0)==0;
 if($140){label=28;break;}else{label=29;break;}
 case 28: 
 label=45;break;
 case 29: 
 var $143=$k;
 var $144=(($start+($143<<1))|0);
 var $145=HEAP16[(($144)>>1)];
 var $146=($145&65535);
 var $147=$k;
 var $148=(($weight+($147<<1))|0);
 var $149=HEAP16[(($148)>>1)];
 var $150=($149&65535);
 var $151=((($146)+($150))|0);
 $l=$151;
 var $152=$k;
 var $153=$4;
 var $154=(($153<<16)>>16);
 var $155=($152|0)<=($154|0);
 if($155){label=30;break;}else{label=35;break;}
 case 30: 
 var $157=$k;
 var $158=(($start+($157<<1))|0);
 var $159=HEAP16[(($158)>>1)];
 var $160=($159&65535);
 $i=$160;
 label=31;break;
 case 31: 
 var $162=$i;
 var $163=$l;
 var $164=($162>>>0)<($163>>>0);
 if($164){label=32;break;}else{label=34;break;}
 case 32: 
 var $166=$j;
 var $167=(($166)&65535);
 var $168=$i;
 var $169=$5;
 var $170=(($169+($168<<1))|0);
 HEAP16[(($170)>>1)]=$167;
 label=33;break;
 case 33: 
 var $172=$i;
 var $173=((($172)+(1))|0);
 $i=$173;
 label=31;break;
 case 34: 
 label=44;break;
 case 35: 
 var $176=$k;
 var $177=(($start+($176<<1))|0);
 var $178=HEAP16[(($177)>>1)];
 var $179=($178&65535);
 $i=$179;
 var $180=$m;
 var $181=$179>>>($180>>>0);
 var $182=$5;
 var $183=(($182+($181<<1))|0);
 $p=$183;
 var $184=$4;
 var $185=(($184<<16)>>16);
 var $186=$i;
 var $187=$186<<$185;
 $i=$187;
 var $188=$k;
 var $189=$4;
 var $190=(($189<<16)>>16);
 var $191=((($188)-($190))|0);
 $n=$191;
 label=36;break;
 case 36: 
 var $193=$n;
 var $194=((($193)-(1))|0);
 $n=$194;
 var $195=($194|0)>=0;
 if($195){label=37;break;}else{label=43;break;}
 case 37: 
 var $197=$p;
 var $198=HEAP16[(($197)>>1)];
 var $199=($198&65535);
 var $200=($199|0)==0;
 if($200){label=38;break;}else{label=39;break;}
 case 38: 
 var $202=$avail;
 var $203=$1;
 var $204=(($203+32)|0);
 var $205=$204;
 var $206=(($205+8738)|0);
 var $207=(($206+($202<<1))|0);
 HEAP16[(($207)>>1)]=0;
 var $208=$avail;
 var $209=$1;
 var $210=(($209+32)|0);
 var $211=$210;
 var $212=(($211+10776)|0);
 var $213=(($212+($208<<1))|0);
 HEAP16[(($213)>>1)]=0;
 var $214=$avail;
 var $215=((($214)+(1))|0);
 $avail=$215;
 var $216=(($214)&65535);
 var $217=$p;
 HEAP16[(($217)>>1)]=$216;
 label=39;break;
 case 39: 
 var $219=$i;
 var $220=$219&32768;
 var $221=($220|0)!=0;
 if($221){label=40;break;}else{label=41;break;}
 case 40: 
 var $223=$p;
 var $224=HEAP16[(($223)>>1)];
 var $225=($224&65535);
 var $226=$1;
 var $227=(($226+32)|0);
 var $228=$227;
 var $229=(($228+10776)|0);
 var $230=(($229+($225<<1))|0);
 $p=$230;
 label=42;break;
 case 41: 
 var $232=$p;
 var $233=HEAP16[(($232)>>1)];
 var $234=($233&65535);
 var $235=$1;
 var $236=(($235+32)|0);
 var $237=$236;
 var $238=(($237+8738)|0);
 var $239=(($238+($234<<1))|0);
 $p=$239;
 label=42;break;
 case 42: 
 var $241=$i;
 var $242=$241<<1;
 $i=$242;
 label=36;break;
 case 43: 
 var $244=$j;
 var $245=(($244)&65535);
 var $246=$p;
 HEAP16[(($246)>>1)]=$245;
 label=44;break;
 case 44: 
 var $248=$l;
 var $249=(($248)&65535);
 var $250=$k;
 var $251=(($start+($250<<1))|0);
 HEAP16[(($251)>>1)]=$249;
 label=45;break;
 case 45: 
 var $253=$j;
 var $254=((($253)+(1))|0);
 $j=$254;
 label=26;break;
 case 46: 
 label=47;break;
 case 47: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _read_pt_len($dat,$nn,$nbit,$i_special){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $c;
 var $n;
 var $mask;
 $1=$dat;
 $2=$nn;
 $3=$nbit;
 $4=$i_special;
 var $5=$1;
 var $6=$3;
 var $7=(($6)&255);
 var $8=_getbits($5,$7);
 $n=$8;
 var $9=(($8<<16)>>16)!=0;
 if($9){label=11;break;}else{label=2;break;}
 case 2: 
 var $11=$1;
 var $12=$3;
 var $13=(($12)&255);
 var $14=_getbits($11,$13);
 $c=$14;
 $i=0;
 label=3;break;
 case 3: 
 var $16=$i;
 var $17=(($16<<16)>>16);
 var $18=$2;
 var $19=(($18<<16)>>16);
 var $20=($17|0)<($19|0);
 if($20){label=4;break;}else{label=6;break;}
 case 4: 
 var $22=$i;
 var $23=(($22<<16)>>16);
 var $24=$1;
 var $25=(($24+32)|0);
 var $26=$25;
 var $27=(($26+25072)|0);
 var $28=(($27+$23)|0);
 HEAP8[($28)]=0;
 label=5;break;
 case 5: 
 var $30=$i;
 var $31=((($30)+(1))&65535);
 $i=$31;
 label=3;break;
 case 6: 
 $i=0;
 label=7;break;
 case 7: 
 var $34=$i;
 var $35=(($34<<16)>>16);
 var $36=($35|0)<256;
 if($36){label=8;break;}else{label=10;break;}
 case 8: 
 var $38=$c;
 var $39=$i;
 var $40=(($39<<16)>>16);
 var $41=$1;
 var $42=(($41+32)|0);
 var $43=$42;
 var $44=(($43+8226)|0);
 var $45=(($44+($40<<1))|0);
 HEAP16[(($45)>>1)]=$38;
 label=9;break;
 case 9: 
 var $47=$i;
 var $48=((($47)+(1))&65535);
 $i=$48;
 label=7;break;
 case 10: 
 label=31;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $52=$i;
 var $53=(($52<<16)>>16);
 var $54=$n;
 var $55=(($54<<16)>>16);
 var $56=($53|0)<($55|0);
 if($56){label=13;break;}else{label=27;break;}
 case 13: 
 var $58=$1;
 var $59=(($58+14)|0);
 var $60=HEAP16[(($59)>>1)];
 var $61=($60&65535);
 var $62=$61>>13;
 var $63=(($62)&65535);
 $c=$63;
 var $64=$c;
 var $65=(($64<<16)>>16);
 var $66=($65|0)==7;
 if($66){label=14;break;}else{label=18;break;}
 case 14: 
 $mask=4096;
 label=15;break;
 case 15: 
 var $69=$mask;
 var $70=($69&65535);
 var $71=$1;
 var $72=(($71+14)|0);
 var $73=HEAP16[(($72)>>1)];
 var $74=($73&65535);
 var $75=$70&$74;
 var $76=($75|0)!=0;
 if($76){label=16;break;}else{label=17;break;}
 case 16: 
 var $78=$mask;
 var $79=($78&65535);
 var $80=$79>>1;
 var $81=(($80)&65535);
 $mask=$81;
 var $82=$c;
 var $83=((($82)+(1))&65535);
 $c=$83;
 label=15;break;
 case 17: 
 label=18;break;
 case 18: 
 var $86=$1;
 var $87=$c;
 var $88=(($87<<16)>>16);
 var $89=($88|0)<7;
 if($89){label=19;break;}else{label=20;break;}
 case 19: 
 var $96=3;label=21;break;
 case 20: 
 var $92=$c;
 var $93=(($92<<16)>>16);
 var $94=((($93)-(3))|0);
 var $96=$94;label=21;break;
 case 21: 
 var $96;
 var $97=(($96)&255);
 _fillbuf($86,$97);
 var $98=$c;
 var $99=(($98)&255);
 var $100=$i;
 var $101=((($100)+(1))&65535);
 $i=$101;
 var $102=(($100<<16)>>16);
 var $103=$1;
 var $104=(($103+32)|0);
 var $105=$104;
 var $106=(($105+25072)|0);
 var $107=(($106+$102)|0);
 HEAP8[($107)]=$99;
 var $108=$i;
 var $109=(($108<<16)>>16);
 var $110=$4;
 var $111=(($110<<16)>>16);
 var $112=($109|0)==($111|0);
 if($112){label=22;break;}else{label=26;break;}
 case 22: 
 var $114=$1;
 var $115=_getbits($114,2);
 $c=$115;
 label=23;break;
 case 23: 
 var $117=$c;
 var $118=((($117)-(1))&65535);
 $c=$118;
 var $119=(($118<<16)>>16);
 var $120=($119|0)>=0;
 if($120){label=24;break;}else{label=25;break;}
 case 24: 
 var $122=$i;
 var $123=((($122)+(1))&65535);
 $i=$123;
 var $124=(($122<<16)>>16);
 var $125=$1;
 var $126=(($125+32)|0);
 var $127=$126;
 var $128=(($127+25072)|0);
 var $129=(($128+$124)|0);
 HEAP8[($129)]=0;
 label=23;break;
 case 25: 
 label=26;break;
 case 26: 
 label=12;break;
 case 27: 
 label=28;break;
 case 28: 
 var $134=$i;
 var $135=(($134<<16)>>16);
 var $136=$2;
 var $137=(($136<<16)>>16);
 var $138=($135|0)<($137|0);
 if($138){label=29;break;}else{label=30;break;}
 case 29: 
 var $140=$i;
 var $141=((($140)+(1))&65535);
 $i=$141;
 var $142=(($140<<16)>>16);
 var $143=$1;
 var $144=(($143+32)|0);
 var $145=$144;
 var $146=(($145+25072)|0);
 var $147=(($146+$142)|0);
 HEAP8[($147)]=0;
 label=28;break;
 case 30: 
 var $149=$1;
 var $150=$2;
 var $151=$1;
 var $152=(($151+32)|0);
 var $153=$152;
 var $154=(($153+25072)|0);
 var $155=(($154)|0);
 var $156=$1;
 var $157=(($156+32)|0);
 var $158=$157;
 var $159=(($158+8226)|0);
 var $160=(($159)|0);
 _make_table($149,$150,$155,8,$160);
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _read_c_len($dat){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $c;
 var $n;
 var $mask;
 $1=$dat;
 var $2=$1;
 var $3=_getbits($2,9);
 $n=$3;
 var $4=(($3<<16)>>16)!=0;
 if($4){label=11;break;}else{label=2;break;}
 case 2: 
 var $6=$1;
 var $7=_getbits($6,9);
 $c=$7;
 $i=0;
 label=3;break;
 case 3: 
 var $9=$i;
 var $10=(($9<<16)>>16);
 var $11=($10|0)<510;
 if($11){label=4;break;}else{label=6;break;}
 case 4: 
 var $13=$i;
 var $14=(($13<<16)>>16);
 var $15=$1;
 var $16=(($15+32)|0);
 var $17=$16;
 var $18=(($17+24562)|0);
 var $19=(($18+$14)|0);
 HEAP8[($19)]=0;
 label=5;break;
 case 5: 
 var $21=$i;
 var $22=((($21)+(1))&65535);
 $i=$22;
 label=3;break;
 case 6: 
 $i=0;
 label=7;break;
 case 7: 
 var $25=$i;
 var $26=(($25<<16)>>16);
 var $27=($26|0)<4096;
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=$c;
 var $30=$i;
 var $31=(($30<<16)>>16);
 var $32=$1;
 var $33=(($32+32)|0);
 var $34=$33;
 var $35=(($34+34)|0);
 var $36=(($35+($31<<1))|0);
 HEAP16[(($36)>>1)]=$29;
 label=9;break;
 case 9: 
 var $38=$i;
 var $39=((($38)+(1))&65535);
 $i=$39;
 label=7;break;
 case 10: 
 label=38;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $43=$i;
 var $44=(($43<<16)>>16);
 var $45=$n;
 var $46=(($45<<16)>>16);
 var $47=($44|0)<($46|0);
 if($47){label=13;break;}else{label=34;break;}
 case 13: 
 var $49=$1;
 var $50=(($49+14)|0);
 var $51=HEAP16[(($50)>>1)];
 var $52=($51&65535);
 var $53=$52>>8;
 var $54=$1;
 var $55=(($54+32)|0);
 var $56=$55;
 var $57=(($56+8226)|0);
 var $58=(($57+($53<<1))|0);
 var $59=HEAP16[(($58)>>1)];
 $c=$59;
 var $60=$c;
 var $61=(($60<<16)>>16);
 var $62=($61|0)>=19;
 if($62){label=14;break;}else{label=21;break;}
 case 14: 
 $mask=128;
 label=15;break;
 case 15: 
 var $65=$1;
 var $66=(($65+14)|0);
 var $67=HEAP16[(($66)>>1)];
 var $68=($67&65535);
 var $69=$mask;
 var $70=($69&65535);
 var $71=$68&$70;
 var $72=($71|0)!=0;
 if($72){label=16;break;}else{label=17;break;}
 case 16: 
 var $74=$c;
 var $75=(($74<<16)>>16);
 var $76=$1;
 var $77=(($76+32)|0);
 var $78=$77;
 var $79=(($78+10776)|0);
 var $80=(($79+($75<<1))|0);
 var $81=HEAP16[(($80)>>1)];
 $c=$81;
 label=18;break;
 case 17: 
 var $83=$c;
 var $84=(($83<<16)>>16);
 var $85=$1;
 var $86=(($85+32)|0);
 var $87=$86;
 var $88=(($87+8738)|0);
 var $89=(($88+($84<<1))|0);
 var $90=HEAP16[(($89)>>1)];
 $c=$90;
 label=18;break;
 case 18: 
 var $92=$mask;
 var $93=($92&65535);
 var $94=$93>>1;
 var $95=(($94)&65535);
 $mask=$95;
 label=19;break;
 case 19: 
 var $97=$c;
 var $98=(($97<<16)>>16);
 var $99=($98|0)>=19;
 if($99){label=15;break;}else{label=20;break;}
 case 20: 
 label=21;break;
 case 21: 
 var $102=$1;
 var $103=$c;
 var $104=(($103<<16)>>16);
 var $105=$1;
 var $106=(($105+32)|0);
 var $107=$106;
 var $108=(($107+25072)|0);
 var $109=(($108+$104)|0);
 var $110=HEAP8[($109)];
 _fillbuf($102,$110);
 var $111=$c;
 var $112=(($111<<16)>>16);
 var $113=($112|0)<=2;
 if($113){label=22;break;}else{label=32;break;}
 case 22: 
 var $115=$c;
 var $116=(($115<<16)>>16)!=0;
 if($116){label=24;break;}else{label=23;break;}
 case 23: 
 $c=1;
 label=28;break;
 case 24: 
 var $119=$c;
 var $120=(($119<<16)>>16);
 var $121=($120|0)==1;
 if($121){label=25;break;}else{label=26;break;}
 case 25: 
 var $123=$1;
 var $124=_getbits($123,4);
 var $125=($124&65535);
 var $126=((($125)+(3))|0);
 var $127=(($126)&65535);
 $c=$127;
 label=27;break;
 case 26: 
 var $129=$1;
 var $130=_getbits($129,9);
 var $131=($130&65535);
 var $132=((($131)+(20))|0);
 var $133=(($132)&65535);
 $c=$133;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $137=$c;
 var $138=((($137)-(1))&65535);
 $c=$138;
 var $139=(($138<<16)>>16);
 var $140=($139|0)>=0;
 if($140){label=30;break;}else{label=31;break;}
 case 30: 
 var $142=$i;
 var $143=((($142)+(1))&65535);
 $i=$143;
 var $144=(($142<<16)>>16);
 var $145=$1;
 var $146=(($145+32)|0);
 var $147=$146;
 var $148=(($147+24562)|0);
 var $149=(($148+$144)|0);
 HEAP8[($149)]=0;
 label=29;break;
 case 31: 
 label=33;break;
 case 32: 
 var $152=$c;
 var $153=(($152<<16)>>16);
 var $154=((($153)-(2))|0);
 var $155=(($154)&255);
 var $156=$i;
 var $157=((($156)+(1))&65535);
 $i=$157;
 var $158=(($156<<16)>>16);
 var $159=$1;
 var $160=(($159+32)|0);
 var $161=$160;
 var $162=(($161+24562)|0);
 var $163=(($162+$158)|0);
 HEAP8[($163)]=$155;
 label=33;break;
 case 33: 
 label=12;break;
 case 34: 
 label=35;break;
 case 35: 
 var $167=$i;
 var $168=(($167<<16)>>16);
 var $169=($168|0)<510;
 if($169){label=36;break;}else{label=37;break;}
 case 36: 
 var $171=$i;
 var $172=((($171)+(1))&65535);
 $i=$172;
 var $173=(($171<<16)>>16);
 var $174=$1;
 var $175=(($174+32)|0);
 var $176=$175;
 var $177=(($176+24562)|0);
 var $178=(($177+$173)|0);
 HEAP8[($178)]=0;
 label=35;break;
 case 37: 
 var $180=$1;
 var $181=$1;
 var $182=(($181+32)|0);
 var $183=$182;
 var $184=(($183+24562)|0);
 var $185=(($184)|0);
 var $186=$1;
 var $187=(($186+32)|0);
 var $188=$187;
 var $189=(($188+34)|0);
 var $190=(($189)|0);
 _make_table($180,510,$185,12,$190);
 label=38;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_lzx($f,$fo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $decr;
 $2=$f;
 $3=$fo;
 var $4=$3;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $8=_malloc(94532);
 var $9=$8;
 $decr=$9;
 var $10=$decr;
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $14=$2;
 var $15=_fseek($14,10,1);
 _crc32_init_A();
 var $16=$3;
 var $17=$decr;
 var $18=(($17+560)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$2;
 var $20=$decr;
 var $21=_extract_archive($19,$20);
 var $22=$decr;
 var $23=$22;
 _free($23);
 $1=0;
 label=6;break;
 case 6: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _extract_archive($in_file,$decr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $temp;
 var $filename_next;
 var $node;
 var $temp_node;
 var $actual;
 var $abort;
 var $result;
 $1=$in_file;
 $2=$decr;
 $result=1;
 var $3=$2;
 var $4=(($3+564)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=$2;
 var $6=(($5+564)|0);
 $filename_next=$6;
 label=2;break;
 case 2: 
 $abort=1;
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=(($9)|0);
 var $11=$1;
 var $12=_fread($10,1,31,$11);
 $actual=$12;
 var $13=$1;
 var $14=_ferror($13);
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 label=35;break;
 case 4: 
 var $18=$actual;
 var $19=($18|0)==0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 $result=0;
 label=35;break;
 case 6: 
 var $22=$actual;
 var $23=($22|0)!=31;
 if($23){label=7;break;}else{label=8;break;}
 case 7: 
 label=35;break;
 case 8: 
 var $26=$2;
 var $27=(($26+556)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=$2;
 var $29=(($28+4)|0);
 var $30=(($29)|0);
 var $31=(($30+26)|0);
 var $32=_readmem32l($31);
 var $33=$2;
 var $34=(($33+548)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$2;
 var $36=(($35+4)|0);
 var $37=(($36)|0);
 var $38=(($37+26)|0);
 HEAP8[($38)]=0; HEAP8[((($38)+(1))|0)]=0; HEAP8[((($38)+(2))|0)]=0; HEAP8[((($38)+(3))|0)]=0;
 var $39=$2;
 var $40=(($39+4)|0);
 var $41=(($40)|0);
 var $42=$2;
 var $43=(($42+556)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=_crc32_A1($41,31,$44);
 var $46=$2;
 var $47=(($46+556)|0);
 HEAP32[(($47)>>2)]=$45;
 var $48=$2;
 var $49=(($48+4)|0);
 var $50=(($49+30)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 $temp=$52;
 var $53=$2;
 var $54=(($53+35)|0);
 var $55=(($54)|0);
 var $56=$temp;
 var $57=$1;
 var $58=_fread($55,1,$56,$57);
 $actual=$58;
 var $59=$1;
 var $60=_ferror($59);
 var $61=($60|0)!=0;
 if($61){label=9;break;}else{label=10;break;}
 case 9: 
 label=35;break;
 case 10: 
 var $64=$actual;
 var $65=$temp;
 var $66=($64|0)!=($65|0);
 if($66){label=11;break;}else{label=12;break;}
 case 11: 
 label=35;break;
 case 12: 
 var $69=$temp;
 var $70=$2;
 var $71=(($70+35)|0);
 var $72=(($71+$69)|0);
 HEAP8[($72)]=0;
 var $73=$2;
 var $74=(($73+35)|0);
 var $75=(($74)|0);
 var $76=$temp;
 var $77=$2;
 var $78=(($77+556)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=_crc32_A1($75,$76,$79);
 var $81=$2;
 var $82=(($81+556)|0);
 HEAP32[(($82)>>2)]=$80;
 var $83=$2;
 var $84=(($83+4)|0);
 var $85=(($84+14)|0);
 var $86=HEAP8[($85)];
 var $87=($86&255);
 $temp=$87;
 var $88=$2;
 var $89=(($88+291)|0);
 var $90=(($89)|0);
 var $91=$temp;
 var $92=$1;
 var $93=_fread($90,1,$91,$92);
 $actual=$93;
 var $94=$1;
 var $95=_ferror($94);
 var $96=($95|0)!=0;
 if($96){label=13;break;}else{label=14;break;}
 case 13: 
 label=35;break;
 case 14: 
 var $99=$actual;
 var $100=$temp;
 var $101=($99|0)!=($100|0);
 if($101){label=15;break;}else{label=16;break;}
 case 15: 
 label=35;break;
 case 16: 
 var $104=$temp;
 var $105=$2;
 var $106=(($105+291)|0);
 var $107=(($106+$104)|0);
 HEAP8[($107)]=0;
 var $108=$2;
 var $109=(($108+291)|0);
 var $110=(($109)|0);
 var $111=$temp;
 var $112=$2;
 var $113=(($112+556)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=_crc32_A1($110,$111,$114);
 var $116=$2;
 var $117=(($116+556)|0);
 HEAP32[(($117)>>2)]=$115;
 var $118=$2;
 var $119=(($118+556)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$2;
 var $122=(($121+548)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=($120|0)!=($123|0);
 if($124){label=17;break;}else{label=18;break;}
 case 17: 
 label=35;break;
 case 18: 
 var $127=$2;
 var $128=(($127+4)|0);
 var $129=(($128)|0);
 var $130=(($129+2)|0);
 var $131=_readmem32l($130);
 var $132=$2;
 var $133=(($132+596)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=$2;
 var $135=(($134+4)|0);
 var $136=(($135)|0);
 var $137=(($136+6)|0);
 var $138=_readmem32l($137);
 var $139=$2;
 var $140=(($139+592)|0);
 HEAP32[(($140)>>2)]=$138;
 var $141=$2;
 var $142=(($141+4)|0);
 var $143=(($142+11)|0);
 var $144=HEAP8[($143)];
 var $145=$2;
 var $146=(($145+552)|0);
 HEAP8[($146)]=$144;
 var $147=$2;
 var $148=(($147+4)|0);
 var $149=(($148)|0);
 var $150=(($149+22)|0);
 var $151=_readmem32l($150);
 var $152=$2;
 var $153=(($152+548)|0);
 HEAP32[(($153)>>2)]=$151;
 var $154=_malloc(268);
 var $155=$154;
 $node=$155;
 var $156=$node;
 var $157=($156|0)==0;
 if($157){label=19;break;}else{label=20;break;}
 case 19: 
 label=35;break;
 case 20: 
 var $160=$node;
 var $161=$filename_next;
 HEAP32[(($161)>>2)]=$160;
 var $162=$node;
 var $163=(($162)|0);
 $filename_next=$163;
 var $164=$node;
 var $165=(($164)|0);
 HEAP32[(($165)>>2)]=0;
 var $166=$2;
 var $167=(($166+596)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$node;
 var $170=(($169+4)|0);
 HEAP32[(($170)>>2)]=$168;
 var $171=$2;
 var $172=(($171+548)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$node;
 var $175=(($174+8)|0);
 HEAP32[(($175)>>2)]=$173;
 $temp=0;
 label=21;break;
 case 21: 
 var $177=$temp;
 var $178=$2;
 var $179=(($178+35)|0);
 var $180=(($179+$177)|0);
 var $181=HEAP8[($180)];
 var $182=$temp;
 var $183=$node;
 var $184=(($183+12)|0);
 var $185=(($184+$182)|0);
 HEAP8[($185)]=$181;
 var $186=(($181<<24)>>24)!=0;
 if($186){label=22;break;}else{label=24;break;}
 case 22: 
 label=23;break;
 case 23: 
 var $189=$temp;
 var $190=((($189)+(1))|0);
 $temp=$190;
 label=21;break;
 case 24: 
 var $192=$2;
 var $193=(($192+552)|0);
 var $194=HEAP8[($193)];
 var $195=($194&255);
 if(($195|0)==2){ label=25;break;}else{label=26;break;}
 case 25: 
 var $197=$1;
 var $198=$2;
 var $199=_extract_normal($197,$198);
 $abort=1;
 label=27;break;
 case 26: 
 label=27;break;
 case 27: 
 var $202=$abort;
 var $203=($202|0)!=0;
 if($203){label=28;break;}else{label=29;break;}
 case 28: 
 label=36;break;
 case 29: 
 var $206=$2;
 var $207=(($206+564)|0);
 var $208=HEAP32[(($207)>>2)];
 $temp_node=$208;
 label=30;break;
 case 30: 
 var $210=$temp_node;
 $node=$210;
 var $211=($210|0)!=0;
 if($211){label=31;break;}else{label=32;break;}
 case 31: 
 var $213=$node;
 var $214=(($213)|0);
 var $215=HEAP32[(($214)>>2)];
 $temp_node=$215;
 var $216=$node;
 var $217=$216;
 _free($217);
 label=30;break;
 case 32: 
 var $219=$2;
 var $220=(($219+564)|0);
 HEAP32[(($220)>>2)]=0;
 var $221=$2;
 var $222=(($221+564)|0);
 $filename_next=$222;
 var $223=$1;
 var $224=$2;
 var $225=(($224+592)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=_fseek($223,$226,1);
 var $228=($227|0)!=0;
 if($228){label=33;break;}else{label=34;break;}
 case 33: 
 label=36;break;
 case 34: 
 label=35;break;
 case 35: 
 var $232=$abort;
 var $233=($232|0)!=0;
 var $234=$233^1;
 if($234){label=2;break;}else{label=36;break;}
 case 36: 
 var $236=$2;
 var $237=(($236+564)|0);
 var $238=HEAP32[(($237)>>2)];
 $temp_node=$238;
 label=37;break;
 case 37: 
 var $240=$temp_node;
 $node=$240;
 var $241=($240|0)!=0;
 if($241){label=38;break;}else{label=39;break;}
 case 38: 
 var $243=$node;
 var $244=(($243)|0);
 var $245=HEAP32[(($244)>>2)];
 $temp_node=$245;
 var $246=$node;
 var $247=$246;
 _free($247);
 label=37;break;
 case 39: 
 var $249=$result;
 STACKTOP=sp;return $249;
  default: assert(0, "bad label: " + label);
 }
}
function _extract_normal($in_file,$decr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $node;
 var $out_file;
 var $pos;
 var $temp;
 var $count;
 var $abort;
 $1=$in_file;
 $2=$decr;
 $out_file=0;
 $abort=0;
 var $3=$2;
 var $4=(($3+604)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=$2;
 var $6=(($5+608)|0);
 HEAP32[(($6)>>2)]=-16;
 var $7=$2;
 var $8=(($7+600)|0);
 HEAP32[(($8)>>2)]=1;
 var $9=$2;
 var $10=(($9+596)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=$2;
 var $12=(($11+588)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$2;
 var $14=(($13+612)|0);
 var $15=$14;
 _memset($15, 0, 8)|0;
 var $16=$2;
 var $17=(($16+1088)|0);
 var $18=$17;
 _memset($18, 0, 768)|0;
 var $19=$2;
 var $20=(($19+12096)|0);
 var $21=(($20)|0);
 var $22=(($21+16384)|0);
 var $23=$2;
 var $24=(($23+568)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=$2;
 var $26=(($25+568)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($27)-(1024))|0);
 var $29=$2;
 var $30=(($29+576)|0);
 HEAP32[(($30)>>2)]=$28;
 var $31=$2;
 var $32=(($31+28480)|0);
 var $33=(($32)|0);
 var $34=(($33+258)|0);
 var $35=(($34+65536)|0);
 var $36=$2;
 var $37=(($36+572)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$2;
 var $39=(($38+580)|0);
 HEAP32[(($39)>>2)]=$35;
 $pos=$35;
 var $40=$2;
 var $41=(($40+564)|0);
 var $42=HEAP32[(($41)>>2)];
 $node=$42;
 label=2;break;
 case 2: 
 var $44=$abort;
 var $45=($44|0)!=0;
 if($45){var $50=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $47=$node;
 var $48=($47|0)!=0;
 var $50=$48;label=4;break;
 case 4: 
 var $50;
 if($50){label=5;break;}else{label=47;break;}
 case 5: 
 var $52=$node;
 var $53=(($52+12)|0);
 var $54=(($53)|0);
 var $55=_exclude_match($54);
 var $56=($55|0)!=0;
 if($56){label=6;break;}else{label=7;break;}
 case 6: 
 $out_file=0;
 label=8;break;
 case 7: 
 var $59=$2;
 var $60=(($59+560)|0);
 var $61=HEAP32[(($60)>>2)];
 $out_file=$61;
 label=8;break;
 case 8: 
 var $63=$2;
 var $64=(($63+556)|0);
 HEAP32[(($64)>>2)]=0;
 var $65=$node;
 var $66=(($65+4)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$2;
 var $69=(($68+596)|0);
 HEAP32[(($69)>>2)]=$67;
 label=9;break;
 case 9: 
 var $71=$2;
 var $72=(($71+596)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73>>>0)>0;
 if($74){label=10;break;}else{label=45;break;}
 case 10: 
 var $76=$pos;
 var $77=$2;
 var $78=(($77+572)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($76|0)==($79|0);
 if($80){label=11;break;}else{label=38;break;}
 case 11: 
 var $82=$2;
 var $83=(($82+568)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$2;
 var $86=(($85+576)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($84>>>0)>=($87>>>0);
 if($88){label=12;break;}else{label=24;break;}
 case 12: 
 var $90=$2;
 var $91=(($90+12096)|0);
 var $92=(($91)|0);
 $temp=$92;
 var $93=$temp;
 var $94=$2;
 var $95=(($94+568)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$93;
 var $98=$96;
 var $99=((($97)-($98))|0);
 var $100=((($99)+(16384))|0);
 $count=$100;
 var $101=($100|0)!=0;
 if($101){label=13;break;}else{label=17;break;}
 case 13: 
 label=14;break;
 case 14: 
 var $104=$2;
 var $105=(($104+568)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+1)|0);
 HEAP32[(($105)>>2)]=$107;
 var $108=HEAP8[($106)];
 var $109=$temp;
 var $110=(($109+1)|0);
 $temp=$110;
 HEAP8[($109)]=$108;
 label=15;break;
 case 15: 
 var $112=$count;
 var $113=((($112)-(1))|0);
 $count=$113;
 var $114=($113|0)!=0;
 if($114){label=14;break;}else{label=16;break;}
 case 16: 
 label=17;break;
 case 17: 
 var $117=$2;
 var $118=(($117+12096)|0);
 var $119=(($118)|0);
 var $120=$2;
 var $121=(($120+568)|0);
 HEAP32[(($121)>>2)]=$119;
 var $122=$2;
 var $123=(($122+568)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$temp;
 var $126=$124;
 var $127=$125;
 var $128=((($126)-($127))|0);
 var $129=((($128)+(16384))|0);
 $count=$129;
 var $130=$2;
 var $131=(($130+592)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$count;
 var $134=($132>>>0)<($133>>>0);
 if($134){label=18;break;}else{label=19;break;}
 case 18: 
 var $136=$2;
 var $137=(($136+592)|0);
 var $138=HEAP32[(($137)>>2)];
 $count=$138;
 label=19;break;
 case 19: 
 var $140=$temp;
 var $141=$count;
 var $142=$1;
 var $143=_fread($140,1,$141,$142);
 var $144=$count;
 var $145=($143|0)!=($144|0);
 if($145){label=20;break;}else{label=21;break;}
 case 20: 
 $abort=1;
 label=45;break;
 case 21: 
 var $148=$count;
 var $149=$2;
 var $150=(($149+592)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=((($151)-($148))|0);
 HEAP32[(($150)>>2)]=$152;
 var $153=$count;
 var $154=$temp;
 var $155=(($154+$153)|0);
 $temp=$155;
 var $156=$2;
 var $157=(($156+568)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$temp;
 var $160=($158>>>0)>=($159>>>0);
 if($160){label=22;break;}else{label=23;break;}
 case 22: 
 label=45;break;
 case 23: 
 label=24;break;
 case 24: 
 var $164=$2;
 var $165=(($164+588)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($166>>>0)<=0;
 if($167){label=25;break;}else{label=28;break;}
 case 25: 
 var $169=$2;
 var $170=_read_literal_table($169);
 var $171=($170|0)!=0;
 if($171){label=26;break;}else{label=27;break;}
 case 26: 
 label=45;break;
 case 27: 
 label=28;break;
 case 28: 
 var $175=$2;
 var $176=(($175+572)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=$2;
 var $179=(($178+28480)|0);
 var $180=(($179)|0);
 var $181=(($180+258)|0);
 var $182=(($181+65536)|0);
 var $183=($177>>>0)>=($182>>>0);
 if($183){label=29;break;}else{label=35;break;}
 case 29: 
 var $185=$2;
 var $186=(($185+572)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$2;
 var $189=(($188+28480)|0);
 var $190=(($189)|0);
 var $191=$187;
 var $192=$190;
 var $193=((($191)-($192))|0);
 var $194=((($193)-(65536))|0);
 $count=$194;
 var $195=($194|0)!=0;
 if($195){label=30;break;}else{label=34;break;}
 case 30: 
 var $197=$2;
 var $198=(($197+28480)|0);
 var $199=(($198)|0);
 var $200=$2;
 var $201=(($200+572)|0);
 HEAP32[(($201)>>2)]=$199;
 var $202=(($199+65536)|0);
 $temp=$202;
 label=31;break;
 case 31: 
 var $204=$temp;
 var $205=(($204+1)|0);
 $temp=$205;
 var $206=HEAP8[($204)];
 var $207=$2;
 var $208=(($207+572)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+1)|0);
 HEAP32[(($208)>>2)]=$210;
 HEAP8[($209)]=$206;
 label=32;break;
 case 32: 
 var $212=$count;
 var $213=((($212)-(1))|0);
 $count=$213;
 var $214=($213|0)!=0;
 if($214){label=31;break;}else{label=33;break;}
 case 33: 
 label=34;break;
 case 34: 
 var $217=$2;
 var $218=(($217+572)|0);
 var $219=HEAP32[(($218)>>2)];
 $pos=$219;
 label=35;break;
 case 35: 
 var $221=$2;
 var $222=(($221+572)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=$2;
 var $225=(($224+588)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($223+$226)|0);
 var $228=$2;
 var $229=(($228+580)|0);
 HEAP32[(($229)>>2)]=$227;
 var $230=$2;
 var $231=(($230+580)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=$2;
 var $234=(($233+28480)|0);
 var $235=(($234)|0);
 var $236=(($235+258)|0);
 var $237=(($236+65536)|0);
 var $238=($232>>>0)>($237>>>0);
 if($238){label=36;break;}else{label=37;break;}
 case 36: 
 var $240=$2;
 var $241=(($240+28480)|0);
 var $242=(($241)|0);
 var $243=(($242+258)|0);
 var $244=(($243+65536)|0);
 var $245=$2;
 var $246=(($245+580)|0);
 HEAP32[(($246)>>2)]=$244;
 label=37;break;
 case 37: 
 var $248=$2;
 var $249=(($248+572)|0);
 var $250=HEAP32[(($249)>>2)];
 $temp=$250;
 var $251=$2;
 _decrunch808($251);
 var $252=$2;
 var $253=(($252+572)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=$temp;
 var $256=$254;
 var $257=$255;
 var $258=((($256)-($257))|0);
 var $259=$2;
 var $260=(($259+588)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=((($261)-($258))|0);
 HEAP32[(($260)>>2)]=$262;
 label=38;break;
 case 38: 
 var $264=$2;
 var $265=(($264+572)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=$pos;
 var $268=$266;
 var $269=$267;
 var $270=((($268)-($269))|0);
 $count=$270;
 var $271=$count;
 var $272=$2;
 var $273=(($272+596)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($271>>>0)>($274>>>0);
 if($275){label=39;break;}else{label=40;break;}
 case 39: 
 var $277=$2;
 var $278=(($277+596)|0);
 var $279=HEAP32[(($278)>>2)];
 $count=$279;
 label=40;break;
 case 40: 
 var $281=$pos;
 var $282=$count;
 var $283=$2;
 var $284=(($283+556)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=_crc32_A1($281,$282,$285);
 var $287=$2;
 var $288=(($287+556)|0);
 HEAP32[(($288)>>2)]=$286;
 var $289=$out_file;
 var $290=($289|0)!=0;
 if($290){label=41;break;}else{label=44;break;}
 case 41: 
 $abort=1;
 var $292=$pos;
 var $293=$count;
 var $294=$out_file;
 var $295=_fwrite($292,1,$293,$294);
 var $296=$count;
 var $297=($295|0)!=($296|0);
 if($297){label=42;break;}else{label=43;break;}
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $301=$count;
 var $302=$2;
 var $303=(($302+596)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=((($304)-($301))|0);
 HEAP32[(($303)>>2)]=$305;
 var $306=$count;
 var $307=$pos;
 var $308=(($307+$306)|0);
 $pos=$308;
 label=9;break;
 case 45: 
 label=46;break;
 case 46: 
 var $311=$node;
 var $312=(($311)|0);
 var $313=HEAP32[(($312)>>2)];
 $node=$313;
 label=2;break;
 case 47: 
 var $315=$abort;
 STACKTOP=sp;return $315;
  default: assert(0, "bad label: " + label);
 }
}
function _read_literal_table($decr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $control;
 var $shift;
 var $temp;
 var $symbol;
 var $pos;
 var $count;
 var $fix;
 var $max_symbol;
 var $src;
 var $abort;
 $1=$decr;
 $abort=0;
 var $2=$1;
 var $3=(($2+604)|0);
 var $4=HEAP32[(($3)>>2)];
 $control=$4;
 var $5=$1;
 var $6=(($5+608)|0);
 var $7=HEAP32[(($6)>>2)];
 $shift=$7;
 var $8=$1;
 var $9=(($8+568)|0);
 var $10=HEAP32[(($9)>>2)];
 $src=$10;
 var $11=$shift;
 var $12=($11|0)<0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$shift;
 var $15=((($14)+(16))|0);
 $shift=$15;
 var $16=$src;
 var $17=(($16+1)|0);
 $src=$17;
 var $18=HEAP8[($16)];
 var $19=($18&255);
 var $20=$shift;
 var $21=((($20)+(8))|0);
 var $22=$19<<$21;
 var $23=$control;
 var $24=((($23)+($22))|0);
 $control=$24;
 var $25=$src;
 var $26=(($25+1)|0);
 $src=$26;
 var $27=HEAP8[($25)];
 var $28=($27&255);
 var $29=$shift;
 var $30=$28<<$29;
 var $31=$control;
 var $32=((($31)+($30))|0);
 $control=$32;
 label=3;break;
 case 3: 
 var $34=$control;
 var $35=$34&7;
 var $36=$1;
 var $37=(($36+584)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$control;
 var $39=$38>>>3;
 $control=$39;
 var $40=$shift;
 var $41=((($40)-(3))|0);
 $shift=$41;
 var $42=$shift;
 var $43=($42|0)<0;
 if($43){label=4;break;}else{label=5;break;}
 case 4: 
 var $45=$shift;
 var $46=((($45)+(16))|0);
 $shift=$46;
 var $47=$src;
 var $48=(($47+1)|0);
 $src=$48;
 var $49=HEAP8[($47)];
 var $50=($49&255);
 var $51=$shift;
 var $52=((($51)+(8))|0);
 var $53=$50<<$52;
 var $54=$control;
 var $55=((($54)+($53))|0);
 $control=$55;
 var $56=$src;
 var $57=(($56+1)|0);
 $src=$57;
 var $58=HEAP8[($56)];
 var $59=($58&255);
 var $60=$shift;
 var $61=$59<<$60;
 var $62=$control;
 var $63=((($62)+($61))|0);
 $control=$63;
 label=5;break;
 case 5: 
 var $65=$abort;
 var $66=($65|0)!=0;
 if($66){label=14;break;}else{label=6;break;}
 case 6: 
 var $68=$1;
 var $69=(($68+584)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==3;
 if($71){label=7;break;}else{label=14;break;}
 case 7: 
 $temp=0;
 label=8;break;
 case 8: 
 var $74=$temp;
 var $75=($74>>>0)<8;
 if($75){label=9;break;}else{label=13;break;}
 case 9: 
 var $77=$control;
 var $78=$77&7;
 var $79=(($78)&255);
 var $80=$temp;
 var $81=$1;
 var $82=(($81+612)|0);
 var $83=(($82+$80)|0);
 HEAP8[($83)]=$79;
 var $84=$control;
 var $85=$84>>>3;
 $control=$85;
 var $86=$shift;
 var $87=((($86)-(3))|0);
 $shift=$87;
 var $88=($87|0)<0;
 if($88){label=10;break;}else{label=11;break;}
 case 10: 
 var $90=$shift;
 var $91=((($90)+(16))|0);
 $shift=$91;
 var $92=$src;
 var $93=(($92+1)|0);
 $src=$93;
 var $94=HEAP8[($92)];
 var $95=($94&255);
 var $96=$shift;
 var $97=((($96)+(8))|0);
 var $98=$95<<$97;
 var $99=$control;
 var $100=((($99)+($98))|0);
 $control=$100;
 var $101=$src;
 var $102=(($101+1)|0);
 $src=$102;
 var $103=HEAP8[($101)];
 var $104=($103&255);
 var $105=$shift;
 var $106=$104<<$105;
 var $107=$control;
 var $108=((($107)+($106))|0);
 $control=$108;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $111=$temp;
 var $112=((($111)+(1))|0);
 $temp=$112;
 label=8;break;
 case 13: 
 var $114=$1;
 var $115=(($114+612)|0);
 var $116=(($115)|0);
 var $117=$1;
 var $118=(($117+620)|0);
 var $119=(($118)|0);
 var $120=_make_decode_table(8,7,$116,$119);
 $abort=$120;
 label=14;break;
 case 14: 
 var $122=$abort;
 var $123=($122|0)!=0;
 if($123){label=22;break;}else{label=15;break;}
 case 15: 
 var $125=$control;
 var $126=$125&255;
 var $127=$126<<16;
 var $128=$1;
 var $129=(($128+588)|0);
 HEAP32[(($129)>>2)]=$127;
 var $130=$control;
 var $131=$130>>>8;
 $control=$131;
 var $132=$shift;
 var $133=((($132)-(8))|0);
 $shift=$133;
 var $134=$shift;
 var $135=($134|0)<0;
 if($135){label=16;break;}else{label=17;break;}
 case 16: 
 var $137=$shift;
 var $138=((($137)+(16))|0);
 $shift=$138;
 var $139=$src;
 var $140=(($139+1)|0);
 $src=$140;
 var $141=HEAP8[($139)];
 var $142=($141&255);
 var $143=$shift;
 var $144=((($143)+(8))|0);
 var $145=$142<<$144;
 var $146=$control;
 var $147=((($146)+($145))|0);
 $control=$147;
 var $148=$src;
 var $149=(($148+1)|0);
 $src=$149;
 var $150=HEAP8[($148)];
 var $151=($150&255);
 var $152=$shift;
 var $153=$151<<$152;
 var $154=$control;
 var $155=((($154)+($153))|0);
 $control=$155;
 label=17;break;
 case 17: 
 var $157=$control;
 var $158=$157&255;
 var $159=$158<<8;
 var $160=$1;
 var $161=(($160+588)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=((($162)+($159))|0);
 HEAP32[(($161)>>2)]=$163;
 var $164=$control;
 var $165=$164>>>8;
 $control=$165;
 var $166=$shift;
 var $167=((($166)-(8))|0);
 $shift=$167;
 var $168=$shift;
 var $169=($168|0)<0;
 if($169){label=18;break;}else{label=19;break;}
 case 18: 
 var $171=$shift;
 var $172=((($171)+(16))|0);
 $shift=$172;
 var $173=$src;
 var $174=(($173+1)|0);
 $src=$174;
 var $175=HEAP8[($173)];
 var $176=($175&255);
 var $177=$shift;
 var $178=((($177)+(8))|0);
 var $179=$176<<$178;
 var $180=$control;
 var $181=((($180)+($179))|0);
 $control=$181;
 var $182=$src;
 var $183=(($182+1)|0);
 $src=$183;
 var $184=HEAP8[($182)];
 var $185=($184&255);
 var $186=$shift;
 var $187=$185<<$186;
 var $188=$control;
 var $189=((($188)+($187))|0);
 $control=$189;
 label=19;break;
 case 19: 
 var $191=$control;
 var $192=$191&255;
 var $193=$1;
 var $194=(($193+588)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=((($195)+($192))|0);
 HEAP32[(($194)>>2)]=$196;
 var $197=$control;
 var $198=$197>>>8;
 $control=$198;
 var $199=$shift;
 var $200=((($199)-(8))|0);
 $shift=$200;
 var $201=$shift;
 var $202=($201|0)<0;
 if($202){label=20;break;}else{label=21;break;}
 case 20: 
 var $204=$shift;
 var $205=((($204)+(16))|0);
 $shift=$205;
 var $206=$src;
 var $207=(($206+1)|0);
 $src=$207;
 var $208=HEAP8[($206)];
 var $209=($208&255);
 var $210=$shift;
 var $211=((($210)+(8))|0);
 var $212=$209<<$211;
 var $213=$control;
 var $214=((($213)+($212))|0);
 $control=$214;
 var $215=$src;
 var $216=(($215+1)|0);
 $src=$216;
 var $217=HEAP8[($215)];
 var $218=($217&255);
 var $219=$shift;
 var $220=$218<<$219;
 var $221=$control;
 var $222=((($221)+($220))|0);
 $control=$222;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $225=$abort;
 var $226=($225|0)!=0;
 if($226){label=82;break;}else{label=23;break;}
 case 23: 
 var $228=$1;
 var $229=(($228+584)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($230|0)!=1;
 if($231){label=24;break;}else{label=82;break;}
 case 24: 
 $pos=0;
 $fix=1;
 $max_symbol=256;
 label=25;break;
 case 25: 
 $temp=0;
 label=26;break;
 case 26: 
 var $235=$temp;
 var $236=($235>>>0)<20;
 if($236){label=27;break;}else{label=31;break;}
 case 27: 
 var $238=$control;
 var $239=$238&15;
 var $240=(($239)&255);
 var $241=$temp;
 var $242=$1;
 var $243=(($242+876)|0);
 var $244=(($243+$241)|0);
 HEAP8[($244)]=$240;
 var $245=$control;
 var $246=$245>>>4;
 $control=$246;
 var $247=$shift;
 var $248=((($247)-(4))|0);
 $shift=$248;
 var $249=($248|0)<0;
 if($249){label=28;break;}else{label=29;break;}
 case 28: 
 var $251=$shift;
 var $252=((($251)+(16))|0);
 $shift=$252;
 var $253=$src;
 var $254=(($253+1)|0);
 $src=$254;
 var $255=HEAP8[($253)];
 var $256=($255&255);
 var $257=$shift;
 var $258=((($257)+(8))|0);
 var $259=$256<<$258;
 var $260=$control;
 var $261=((($260)+($259))|0);
 $control=$261;
 var $262=$src;
 var $263=(($262+1)|0);
 $src=$263;
 var $264=HEAP8[($262)];
 var $265=($264&255);
 var $266=$shift;
 var $267=$265<<$266;
 var $268=$control;
 var $269=((($268)+($267))|0);
 $control=$269;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $272=$temp;
 var $273=((($272)+(1))|0);
 $temp=$273;
 label=26;break;
 case 31: 
 var $275=$1;
 var $276=(($275+876)|0);
 var $277=(($276)|0);
 var $278=$1;
 var $279=(($278+896)|0);
 var $280=(($279)|0);
 var $281=_make_decode_table(20,6,$277,$280);
 $abort=$281;
 var $282=$abort;
 var $283=($282|0)!=0;
 if($283){label=32;break;}else{label=33;break;}
 case 32: 
 label=79;break;
 case 33: 
 label=34;break;
 case 34: 
 var $287=$control;
 var $288=$287&63;
 var $289=$1;
 var $290=(($289+896)|0);
 var $291=(($290+($288<<1))|0);
 var $292=HEAP16[(($291)>>1)];
 var $293=($292&65535);
 $symbol=$293;
 var $294=($293>>>0)>=20;
 if($294){label=35;break;}else{label=41;break;}
 case 35: 
 label=36;break;
 case 36: 
 var $297=$control;
 var $298=$297>>>6;
 var $299=$298&1;
 var $300=$symbol;
 var $301=$300<<1;
 var $302=((($299)+($301))|0);
 var $303=$1;
 var $304=(($303+896)|0);
 var $305=(($304+($302<<1))|0);
 var $306=HEAP16[(($305)>>1)];
 var $307=($306&65535);
 $symbol=$307;
 var $308=$shift;
 var $309=((($308)-(1))|0);
 $shift=$309;
 var $310=($308|0)!=0;
 if($310){label=38;break;}else{label=37;break;}
 case 37: 
 var $312=$shift;
 var $313=((($312)+(16))|0);
 $shift=$313;
 var $314=$src;
 var $315=(($314+1)|0);
 $src=$315;
 var $316=HEAP8[($314)];
 var $317=($316&255);
 var $318=$317<<24;
 var $319=$control;
 var $320=((($319)+($318))|0);
 $control=$320;
 var $321=$src;
 var $322=(($321+1)|0);
 $src=$322;
 var $323=HEAP8[($321)];
 var $324=($323&255);
 var $325=$324<<16;
 var $326=$control;
 var $327=((($326)+($325))|0);
 $control=$327;
 label=38;break;
 case 38: 
 var $329=$control;
 var $330=$329>>>1;
 $control=$330;
 label=39;break;
 case 39: 
 var $332=$symbol;
 var $333=($332>>>0)>=20;
 if($333){label=36;break;}else{label=40;break;}
 case 40: 
 $temp=6;
 label=42;break;
 case 41: 
 var $336=$symbol;
 var $337=$1;
 var $338=(($337+876)|0);
 var $339=(($338+$336)|0);
 var $340=HEAP8[($339)];
 var $341=($340&255);
 $temp=$341;
 label=42;break;
 case 42: 
 var $343=$temp;
 var $344=$control;
 var $345=$344>>>($343>>>0);
 $control=$345;
 var $346=$temp;
 var $347=$shift;
 var $348=((($347)-($346))|0);
 $shift=$348;
 var $349=($348|0)<0;
 if($349){label=43;break;}else{label=44;break;}
 case 43: 
 var $351=$shift;
 var $352=((($351)+(16))|0);
 $shift=$352;
 var $353=$src;
 var $354=(($353+1)|0);
 $src=$354;
 var $355=HEAP8[($353)];
 var $356=($355&255);
 var $357=$shift;
 var $358=((($357)+(8))|0);
 var $359=$356<<$358;
 var $360=$control;
 var $361=((($360)+($359))|0);
 $control=$361;
 var $362=$src;
 var $363=(($362+1)|0);
 $src=$363;
 var $364=HEAP8[($362)];
 var $365=($364&255);
 var $366=$shift;
 var $367=$365<<$366;
 var $368=$control;
 var $369=((($368)+($367))|0);
 $control=$369;
 label=44;break;
 case 44: 
 var $371=$symbol;
 if(($371|0)==17|($371|0)==18){ label=45;break;}else if(($371|0)==19){ label=56;break;}else{label=74;break;}
 case 45: 
 var $373=$symbol;
 var $374=($373|0)==17;
 if($374){label=46;break;}else{label=47;break;}
 case 46: 
 $temp=4;
 $count=3;
 label=48;break;
 case 47: 
 var $377=$fix;
 var $378=(((6)-($377))|0);
 $temp=$378;
 $count=19;
 label=48;break;
 case 48: 
 var $380=$control;
 var $381=$temp;
 var $382=((1592+($381<<2))|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=$380&$383;
 var $385=$fix;
 var $386=((($384)+($385))|0);
 var $387=$count;
 var $388=((($387)+($386))|0);
 $count=$388;
 var $389=$temp;
 var $390=$control;
 var $391=$390>>>($389>>>0);
 $control=$391;
 var $392=$temp;
 var $393=$shift;
 var $394=((($393)-($392))|0);
 $shift=$394;
 var $395=($394|0)<0;
 if($395){label=49;break;}else{label=50;break;}
 case 49: 
 var $397=$shift;
 var $398=((($397)+(16))|0);
 $shift=$398;
 var $399=$src;
 var $400=(($399+1)|0);
 $src=$400;
 var $401=HEAP8[($399)];
 var $402=($401&255);
 var $403=$shift;
 var $404=((($403)+(8))|0);
 var $405=$402<<$404;
 var $406=$control;
 var $407=((($406)+($405))|0);
 $control=$407;
 var $408=$src;
 var $409=(($408+1)|0);
 $src=$409;
 var $410=HEAP8[($408)];
 var $411=($410&255);
 var $412=$shift;
 var $413=$411<<$412;
 var $414=$control;
 var $415=((($414)+($413))|0);
 $control=$415;
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $418=$pos;
 var $419=$max_symbol;
 var $420=($418>>>0)<($419>>>0);
 if($420){label=52;break;}else{var $426=0;label=53;break;}
 case 52: 
 var $422=$count;
 var $423=((($422)-(1))|0);
 $count=$423;
 var $424=($422|0)!=0;
 var $426=$424;label=53;break;
 case 53: 
 var $426;
 if($426){label=54;break;}else{label=55;break;}
 case 54: 
 var $428=$pos;
 var $429=((($428)+(1))|0);
 $pos=$429;
 var $430=$1;
 var $431=(($430+1088)|0);
 var $432=(($431+$428)|0);
 HEAP8[($432)]=0;
 label=51;break;
 case 55: 
 label=75;break;
 case 56: 
 var $435=$control;
 var $436=$435&1;
 var $437=((($436)+(3))|0);
 var $438=$fix;
 var $439=((($437)+($438))|0);
 $count=$439;
 var $440=$shift;
 var $441=((($440)-(1))|0);
 $shift=$441;
 var $442=($440|0)!=0;
 if($442){label=58;break;}else{label=57;break;}
 case 57: 
 var $444=$shift;
 var $445=((($444)+(16))|0);
 $shift=$445;
 var $446=$src;
 var $447=(($446+1)|0);
 $src=$447;
 var $448=HEAP8[($446)];
 var $449=($448&255);
 var $450=$449<<24;
 var $451=$control;
 var $452=((($451)+($450))|0);
 $control=$452;
 var $453=$src;
 var $454=(($453+1)|0);
 $src=$454;
 var $455=HEAP8[($453)];
 var $456=($455&255);
 var $457=$456<<16;
 var $458=$control;
 var $459=((($458)+($457))|0);
 $control=$459;
 label=58;break;
 case 58: 
 var $461=$control;
 var $462=$461>>>1;
 $control=$462;
 var $463=$control;
 var $464=$463&63;
 var $465=$1;
 var $466=(($465+896)|0);
 var $467=(($466+($464<<1))|0);
 var $468=HEAP16[(($467)>>1)];
 var $469=($468&65535);
 $symbol=$469;
 var $470=($469>>>0)>=20;
 if($470){label=59;break;}else{label=65;break;}
 case 59: 
 label=60;break;
 case 60: 
 var $473=$control;
 var $474=$473>>>6;
 var $475=$474&1;
 var $476=$symbol;
 var $477=$476<<1;
 var $478=((($475)+($477))|0);
 var $479=$1;
 var $480=(($479+896)|0);
 var $481=(($480+($478<<1))|0);
 var $482=HEAP16[(($481)>>1)];
 var $483=($482&65535);
 $symbol=$483;
 var $484=$shift;
 var $485=((($484)-(1))|0);
 $shift=$485;
 var $486=($484|0)!=0;
 if($486){label=62;break;}else{label=61;break;}
 case 61: 
 var $488=$shift;
 var $489=((($488)+(16))|0);
 $shift=$489;
 var $490=$src;
 var $491=(($490+1)|0);
 $src=$491;
 var $492=HEAP8[($490)];
 var $493=($492&255);
 var $494=$493<<24;
 var $495=$control;
 var $496=((($495)+($494))|0);
 $control=$496;
 var $497=$src;
 var $498=(($497+1)|0);
 $src=$498;
 var $499=HEAP8[($497)];
 var $500=($499&255);
 var $501=$500<<16;
 var $502=$control;
 var $503=((($502)+($501))|0);
 $control=$503;
 label=62;break;
 case 62: 
 var $505=$control;
 var $506=$505>>>1;
 $control=$506;
 label=63;break;
 case 63: 
 var $508=$symbol;
 var $509=($508>>>0)>=20;
 if($509){label=60;break;}else{label=64;break;}
 case 64: 
 $temp=6;
 label=66;break;
 case 65: 
 var $512=$symbol;
 var $513=$1;
 var $514=(($513+876)|0);
 var $515=(($514+$512)|0);
 var $516=HEAP8[($515)];
 var $517=($516&255);
 $temp=$517;
 label=66;break;
 case 66: 
 var $519=$temp;
 var $520=$control;
 var $521=$520>>>($519>>>0);
 $control=$521;
 var $522=$temp;
 var $523=$shift;
 var $524=((($523)-($522))|0);
 $shift=$524;
 var $525=($524|0)<0;
 if($525){label=67;break;}else{label=68;break;}
 case 67: 
 var $527=$shift;
 var $528=((($527)+(16))|0);
 $shift=$528;
 var $529=$src;
 var $530=(($529+1)|0);
 $src=$530;
 var $531=HEAP8[($529)];
 var $532=($531&255);
 var $533=$shift;
 var $534=((($533)+(8))|0);
 var $535=$532<<$534;
 var $536=$control;
 var $537=((($536)+($535))|0);
 $control=$537;
 var $538=$src;
 var $539=(($538+1)|0);
 $src=$539;
 var $540=HEAP8[($538)];
 var $541=($540&255);
 var $542=$shift;
 var $543=$541<<$542;
 var $544=$control;
 var $545=((($544)+($543))|0);
 $control=$545;
 label=68;break;
 case 68: 
 var $547=$pos;
 var $548=$1;
 var $549=(($548+1088)|0);
 var $550=(($549+$547)|0);
 var $551=HEAP8[($550)];
 var $552=($551&255);
 var $553=((($552)+(17))|0);
 var $554=$symbol;
 var $555=((($553)-($554))|0);
 var $556=((1688+$555)|0);
 var $557=HEAP8[($556)];
 var $558=($557&255);
 $symbol=$558;
 label=69;break;
 case 69: 
 var $560=$pos;
 var $561=$max_symbol;
 var $562=($560>>>0)<($561>>>0);
 if($562){label=70;break;}else{var $568=0;label=71;break;}
 case 70: 
 var $564=$count;
 var $565=((($564)-(1))|0);
 $count=$565;
 var $566=($564|0)!=0;
 var $568=$566;label=71;break;
 case 71: 
 var $568;
 if($568){label=72;break;}else{label=73;break;}
 case 72: 
 var $570=$symbol;
 var $571=(($570)&255);
 var $572=$pos;
 var $573=((($572)+(1))|0);
 $pos=$573;
 var $574=$1;
 var $575=(($574+1088)|0);
 var $576=(($575+$572)|0);
 HEAP8[($576)]=$571;
 label=69;break;
 case 73: 
 label=75;break;
 case 74: 
 var $579=$pos;
 var $580=$1;
 var $581=(($580+1088)|0);
 var $582=(($581+$579)|0);
 var $583=HEAP8[($582)];
 var $584=($583&255);
 var $585=((($584)+(17))|0);
 var $586=$symbol;
 var $587=((($585)-($586))|0);
 var $588=((1688+$587)|0);
 var $589=HEAP8[($588)];
 var $590=($589&255);
 $symbol=$590;
 var $591=$symbol;
 var $592=(($591)&255);
 var $593=$pos;
 var $594=((($593)+(1))|0);
 $pos=$594;
 var $595=$1;
 var $596=(($595+1088)|0);
 var $597=(($596+$593)|0);
 HEAP8[($597)]=$592;
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 var $600=$pos;
 var $601=$max_symbol;
 var $602=($600>>>0)<($601>>>0);
 if($602){label=34;break;}else{label=77;break;}
 case 77: 
 var $604=$fix;
 var $605=((($604)-(1))|0);
 $fix=$605;
 var $606=$max_symbol;
 var $607=((($606)+(512))|0);
 $max_symbol=$607;
 label=78;break;
 case 78: 
 var $609=$max_symbol;
 var $610=($609|0)==768;
 if($610){label=25;break;}else{label=79;break;}
 case 79: 
 var $612=$abort;
 var $613=($612|0)!=0;
 if($613){label=81;break;}else{label=80;break;}
 case 80: 
 var $615=$1;
 var $616=(($615+1088)|0);
 var $617=(($616)|0);
 var $618=$1;
 var $619=(($618+1856)|0);
 var $620=(($619)|0);
 var $621=_make_decode_table(768,12,$617,$620);
 $abort=$621;
 label=81;break;
 case 81: 
 label=82;break;
 case 82: 
 var $624=$control;
 var $625=$1;
 var $626=(($625+604)|0);
 HEAP32[(($626)>>2)]=$624;
 var $627=$shift;
 var $628=$1;
 var $629=(($628+608)|0);
 HEAP32[(($629)>>2)]=$627;
 var $630=$src;
 var $631=$1;
 var $632=(($631+568)|0);
 HEAP32[(($632)>>2)]=$630;
 var $633=$abort;
 STACKTOP=sp;return $633;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch808($decr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $control;
 var $shift;
 var $temp;
 var $symbol;
 var $count;
 var $string;
 var $src;
 var $dest;
 $1=$decr;
 var $2=$1;
 var $3=(($2+604)|0);
 var $4=HEAP32[(($3)>>2)];
 $control=$4;
 var $5=$1;
 var $6=(($5+608)|0);
 var $7=HEAP32[(($6)>>2)];
 $shift=$7;
 var $8=$1;
 var $9=(($8+568)|0);
 var $10=HEAP32[(($9)>>2)];
 $src=$10;
 var $11=$1;
 var $12=(($11+572)|0);
 var $13=HEAP32[(($12)>>2)];
 $dest=$13;
 label=2;break;
 case 2: 
 var $15=$control;
 var $16=$15&4095;
 var $17=$1;
 var $18=(($17+1856)|0);
 var $19=(($18+($16<<1))|0);
 var $20=HEAP16[(($19)>>1)];
 var $21=($20&65535);
 $symbol=$21;
 var $22=($21>>>0)>=768;
 if($22){label=3;break;}else{label=11;break;}
 case 3: 
 var $24=$control;
 var $25=$24>>>12;
 $control=$25;
 var $26=$shift;
 var $27=((($26)-(12))|0);
 $shift=$27;
 var $28=($27|0)<0;
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 var $30=$shift;
 var $31=((($30)+(16))|0);
 $shift=$31;
 var $32=$src;
 var $33=(($32+1)|0);
 $src=$33;
 var $34=HEAP8[($32)];
 var $35=($34&255);
 var $36=$shift;
 var $37=((($36)+(8))|0);
 var $38=$35<<$37;
 var $39=$control;
 var $40=((($39)+($38))|0);
 $control=$40;
 var $41=$src;
 var $42=(($41+1)|0);
 $src=$42;
 var $43=HEAP8[($41)];
 var $44=($43&255);
 var $45=$shift;
 var $46=$44<<$45;
 var $47=$control;
 var $48=((($47)+($46))|0);
 $control=$48;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $51=$control;
 var $52=$51&1;
 var $53=$symbol;
 var $54=$53<<1;
 var $55=((($52)+($54))|0);
 var $56=$1;
 var $57=(($56+1856)|0);
 var $58=(($57+($55<<1))|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=($59&65535);
 $symbol=$60;
 var $61=$shift;
 var $62=((($61)-(1))|0);
 $shift=$62;
 var $63=($61|0)!=0;
 if($63){label=8;break;}else{label=7;break;}
 case 7: 
 var $65=$shift;
 var $66=((($65)+(16))|0);
 $shift=$66;
 var $67=$src;
 var $68=(($67+1)|0);
 $src=$68;
 var $69=HEAP8[($67)];
 var $70=($69&255);
 var $71=$70<<24;
 var $72=$control;
 var $73=((($72)+($71))|0);
 $control=$73;
 var $74=$src;
 var $75=(($74+1)|0);
 $src=$75;
 var $76=HEAP8[($74)];
 var $77=($76&255);
 var $78=$77<<16;
 var $79=$control;
 var $80=((($79)+($78))|0);
 $control=$80;
 label=8;break;
 case 8: 
 var $82=$control;
 var $83=$82>>>1;
 $control=$83;
 label=9;break;
 case 9: 
 var $85=$symbol;
 var $86=($85>>>0)>=768;
 if($86){label=6;break;}else{label=10;break;}
 case 10: 
 label=14;break;
 case 11: 
 var $89=$symbol;
 var $90=$1;
 var $91=(($90+1088)|0);
 var $92=(($91+$89)|0);
 var $93=HEAP8[($92)];
 var $94=($93&255);
 $temp=$94;
 var $95=$temp;
 var $96=$control;
 var $97=$96>>>($95>>>0);
 $control=$97;
 var $98=$temp;
 var $99=$shift;
 var $100=((($99)-($98))|0);
 $shift=$100;
 var $101=($100|0)<0;
 if($101){label=12;break;}else{label=13;break;}
 case 12: 
 var $103=$shift;
 var $104=((($103)+(16))|0);
 $shift=$104;
 var $105=$src;
 var $106=(($105+1)|0);
 $src=$106;
 var $107=HEAP8[($105)];
 var $108=($107&255);
 var $109=$shift;
 var $110=((($109)+(8))|0);
 var $111=$108<<$110;
 var $112=$control;
 var $113=((($112)+($111))|0);
 $control=$113;
 var $114=$src;
 var $115=(($114+1)|0);
 $src=$115;
 var $116=HEAP8[($114)];
 var $117=($116&255);
 var $118=$shift;
 var $119=$117<<$118;
 var $120=$control;
 var $121=((($120)+($119))|0);
 $control=$121;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $124=$symbol;
 var $125=($124>>>0)<256;
 if($125){label=15;break;}else{label=16;break;}
 case 15: 
 var $127=$symbol;
 var $128=(($127)&255);
 var $129=$dest;
 var $130=(($129+1)|0);
 $dest=$130;
 HEAP8[($129)]=$128;
 label=35;break;
 case 16: 
 var $132=$symbol;
 var $133=((($132)-(256))|0);
 $symbol=$133;
 var $134=$symbol;
 var $135=$134&31;
 $temp=$135;
 var $136=((1464+($135<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 $count=$137;
 var $138=$temp;
 var $139=((1656+$138)|0);
 var $140=HEAP8[($139)];
 var $141=($140&255);
 $temp=$141;
 var $142=$temp;
 var $143=($142>>>0)>=3;
 if($143){label=17;break;}else{label=21;break;}
 case 17: 
 var $145=$1;
 var $146=(($145+584)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==3;
 if($148){label=18;break;}else{label=21;break;}
 case 18: 
 var $150=$temp;
 var $151=((($150)-(3))|0);
 $temp=$151;
 var $152=$control;
 var $153=$temp;
 var $154=((1592+($153<<2))|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$152&$155;
 var $157=$156<<3;
 var $158=$count;
 var $159=((($158)+($157))|0);
 $count=$159;
 var $160=$temp;
 var $161=$control;
 var $162=$161>>>($160>>>0);
 $control=$162;
 var $163=$temp;
 var $164=$shift;
 var $165=((($164)-($163))|0);
 $shift=$165;
 var $166=($165|0)<0;
 if($166){label=19;break;}else{label=20;break;}
 case 19: 
 var $168=$shift;
 var $169=((($168)+(16))|0);
 $shift=$169;
 var $170=$src;
 var $171=(($170+1)|0);
 $src=$171;
 var $172=HEAP8[($170)];
 var $173=($172&255);
 var $174=$shift;
 var $175=((($174)+(8))|0);
 var $176=$173<<$175;
 var $177=$control;
 var $178=((($177)+($176))|0);
 $control=$178;
 var $179=$src;
 var $180=(($179+1)|0);
 $src=$180;
 var $181=HEAP8[($179)];
 var $182=($181&255);
 var $183=$shift;
 var $184=$182<<$183;
 var $185=$control;
 var $186=((($185)+($184))|0);
 $control=$186;
 label=20;break;
 case 20: 
 var $188=$control;
 var $189=$188&127;
 var $190=$1;
 var $191=(($190+620)|0);
 var $192=(($191+($189<<1))|0);
 var $193=HEAP16[(($192)>>1)];
 var $194=($193&65535);
 $temp=$194;
 var $195=$count;
 var $196=((($195)+($194))|0);
 $count=$196;
 var $197=$temp;
 var $198=$1;
 var $199=(($198+612)|0);
 var $200=(($199+$197)|0);
 var $201=HEAP8[($200)];
 var $202=($201&255);
 $temp=$202;
 label=24;break;
 case 21: 
 var $204=$control;
 var $205=$temp;
 var $206=((1592+($205<<2))|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$204&$207;
 var $209=$count;
 var $210=((($209)+($208))|0);
 $count=$210;
 var $211=$count;
 var $212=($211|0)!=0;
 if($212){label=23;break;}else{label=22;break;}
 case 22: 
 var $214=$1;
 var $215=(($214+600)|0);
 var $216=HEAP32[(($215)>>2)];
 $count=$216;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $219=$temp;
 var $220=$control;
 var $221=$220>>>($219>>>0);
 $control=$221;
 var $222=$temp;
 var $223=$shift;
 var $224=((($223)-($222))|0);
 $shift=$224;
 var $225=($224|0)<0;
 if($225){label=25;break;}else{label=26;break;}
 case 25: 
 var $227=$shift;
 var $228=((($227)+(16))|0);
 $shift=$228;
 var $229=$src;
 var $230=(($229+1)|0);
 $src=$230;
 var $231=HEAP8[($229)];
 var $232=($231&255);
 var $233=$shift;
 var $234=((($233)+(8))|0);
 var $235=$232<<$234;
 var $236=$control;
 var $237=((($236)+($235))|0);
 $control=$237;
 var $238=$src;
 var $239=(($238+1)|0);
 $src=$239;
 var $240=HEAP8[($238)];
 var $241=($240&255);
 var $242=$shift;
 var $243=$241<<$242;
 var $244=$control;
 var $245=((($244)+($243))|0);
 $control=$245;
 label=26;break;
 case 26: 
 var $247=$count;
 var $248=$1;
 var $249=(($248+600)|0);
 HEAP32[(($249)>>2)]=$247;
 var $250=$symbol;
 var $251=$250>>>5;
 var $252=$251&15;
 $temp=$252;
 var $253=((1464+($252<<2))|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=((($254)+(3))|0);
 $count=$255;
 var $256=$temp;
 var $257=((1656+$256)|0);
 var $258=HEAP8[($257)];
 var $259=($258&255);
 $temp=$259;
 var $260=$control;
 var $261=$temp;
 var $262=((1592+($261<<2))|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=$260&$263;
 var $265=$count;
 var $266=((($265)+($264))|0);
 $count=$266;
 var $267=$temp;
 var $268=$control;
 var $269=$268>>>($267>>>0);
 $control=$269;
 var $270=$temp;
 var $271=$shift;
 var $272=((($271)-($270))|0);
 $shift=$272;
 var $273=$shift;
 var $274=($273|0)<0;
 if($274){label=27;break;}else{label=28;break;}
 case 27: 
 var $276=$shift;
 var $277=((($276)+(16))|0);
 $shift=$277;
 var $278=$src;
 var $279=(($278+1)|0);
 $src=$279;
 var $280=HEAP8[($278)];
 var $281=($280&255);
 var $282=$shift;
 var $283=((($282)+(8))|0);
 var $284=$281<<$283;
 var $285=$control;
 var $286=((($285)+($284))|0);
 $control=$286;
 var $287=$src;
 var $288=(($287+1)|0);
 $src=$288;
 var $289=HEAP8[($287)];
 var $290=($289&255);
 var $291=$shift;
 var $292=$290<<$291;
 var $293=$control;
 var $294=((($293)+($292))|0);
 $control=$294;
 label=28;break;
 case 28: 
 var $296=$1;
 var $297=(($296+28480)|0);
 var $298=(($297)|0);
 var $299=$1;
 var $300=(($299+600)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($298+$301)|0);
 var $303=$dest;
 var $304=($302>>>0)<($303>>>0);
 if($304){label=29;break;}else{label=30;break;}
 case 29: 
 var $306=$dest;
 var $307=$1;
 var $308=(($307+600)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(((-$309))|0);
 var $311=(($306+$310)|0);
 var $321=$311;label=31;break;
 case 30: 
 var $313=$dest;
 var $314=(($313+65536)|0);
 var $315=$1;
 var $316=(($315+600)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(((-$317))|0);
 var $319=(($314+$318)|0);
 var $321=$319;label=31;break;
 case 31: 
 var $321;
 $string=$321;
 label=32;break;
 case 32: 
 var $323=$string;
 var $324=(($323+1)|0);
 $string=$324;
 var $325=HEAP8[($323)];
 var $326=$dest;
 var $327=(($326+1)|0);
 $dest=$327;
 HEAP8[($326)]=$325;
 label=33;break;
 case 33: 
 var $329=$count;
 var $330=((($329)-(1))|0);
 $count=$330;
 var $331=($330|0)!=0;
 if($331){label=32;break;}else{label=34;break;}
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $335=$dest;
 var $336=$1;
 var $337=(($336+580)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=($335>>>0)<($338>>>0);
 if($339){label=37;break;}else{var $347=0;label=38;break;}
 case 37: 
 var $341=$src;
 var $342=$1;
 var $343=(($342+576)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=($341>>>0)<($344>>>0);
 var $347=$345;label=38;break;
 case 38: 
 var $347;
 if($347){label=2;break;}else{label=39;break;}
 case 39: 
 var $349=$control;
 var $350=$1;
 var $351=(($350+604)|0);
 HEAP32[(($351)>>2)]=$349;
 var $352=$shift;
 var $353=$1;
 var $354=(($353+608)|0);
 HEAP32[(($354)>>2)]=$352;
 var $355=$src;
 var $356=$1;
 var $357=(($356+568)|0);
 HEAP32[(($357)>>2)]=$355;
 var $358=$dest;
 var $359=$1;
 var $360=(($359+572)|0);
 HEAP32[(($360)>>2)]=$358;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _make_decode_table($number_symbols,$table_size,$length,$table){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $bit_num;
 var $symbol;
 var $leaf;
 var $table_mask;
 var $bit_mask;
 var $pos;
 var $fill;
 var $next_symbol;
 var $reverse;
 $2=$number_symbols;
 $3=$table_size;
 $4=$length;
 $5=$table;
 $bit_num=0;
 $pos=0;
 var $6=$3;
 var $7=1<<$6;
 $table_mask=$7;
 $bit_mask=$7;
 var $8=$bit_mask;
 var $9=$8>>>1;
 $bit_mask=$9;
 var $10=$bit_num;
 var $11=((($10)+(1))&255);
 $bit_num=$11;
 label=2;break;
 case 2: 
 var $13=$bit_num;
 var $14=($13&255);
 var $15=$3;
 var $16=($14|0)<=($15|0);
 if($16){label=3;break;}else{label=18;break;}
 case 3: 
 $symbol=0;
 label=4;break;
 case 4: 
 var $19=$symbol;
 var $20=$2;
 var $21=($19|0)<($20|0);
 if($21){label=5;break;}else{label=17;break;}
 case 5: 
 var $23=$symbol;
 var $24=$4;
 var $25=(($24+$23)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=$bit_num;
 var $29=($28&255);
 var $30=($27|0)==($29|0);
 if($30){label=6;break;}else{label=15;break;}
 case 6: 
 var $32=$pos;
 $reverse=$32;
 $leaf=0;
 var $33=$3;
 $fill=$33;
 label=7;break;
 case 7: 
 var $35=$leaf;
 var $36=$35<<1;
 var $37=$reverse;
 var $38=$37&1;
 var $39=((($36)+($38))|0);
 $leaf=$39;
 var $40=$reverse;
 var $41=$40>>>1;
 $reverse=$41;
 label=8;break;
 case 8: 
 var $43=$fill;
 var $44=((($43)-(1))|0);
 $fill=$44;
 var $45=($44|0)!=0;
 if($45){label=7;break;}else{label=9;break;}
 case 9: 
 var $47=$bit_mask;
 var $48=$pos;
 var $49=((($48)+($47))|0);
 $pos=$49;
 var $50=$table_mask;
 var $51=($49>>>0)>($50>>>0);
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=50;break;
 case 11: 
 var $54=$bit_mask;
 $fill=$54;
 var $55=$bit_num;
 var $56=($55&255);
 var $57=1<<$56;
 $next_symbol=$57;
 label=12;break;
 case 12: 
 var $59=$symbol;
 var $60=(($59)&65535);
 var $61=$leaf;
 var $62=$5;
 var $63=(($62+($61<<1))|0);
 HEAP16[(($63)>>1)]=$60;
 var $64=$next_symbol;
 var $65=$leaf;
 var $66=((($65)+($64))|0);
 $leaf=$66;
 label=13;break;
 case 13: 
 var $68=$fill;
 var $69=((($68)-(1))|0);
 $fill=$69;
 var $70=($69|0)!=0;
 if($70){label=12;break;}else{label=14;break;}
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $74=$symbol;
 var $75=((($74)+(1))|0);
 $symbol=$75;
 label=4;break;
 case 17: 
 var $77=$bit_mask;
 var $78=$77>>>1;
 $bit_mask=$78;
 var $79=$bit_num;
 var $80=((($79)+(1))&255);
 $bit_num=$80;
 label=2;break;
 case 18: 
 var $82=$pos;
 var $83=$table_mask;
 var $84=($82|0)!=($83|0);
 if($84){label=19;break;}else{label=47;break;}
 case 19: 
 var $86=$pos;
 $symbol=$86;
 label=20;break;
 case 20: 
 var $88=$symbol;
 var $89=$table_mask;
 var $90=($88>>>0)<($89>>>0);
 if($90){label=21;break;}else{label=26;break;}
 case 21: 
 var $92=$symbol;
 $reverse=$92;
 $leaf=0;
 var $93=$3;
 $fill=$93;
 label=22;break;
 case 22: 
 var $95=$leaf;
 var $96=$95<<1;
 var $97=$reverse;
 var $98=$97&1;
 var $99=((($96)+($98))|0);
 $leaf=$99;
 var $100=$reverse;
 var $101=$100>>>1;
 $reverse=$101;
 label=23;break;
 case 23: 
 var $103=$fill;
 var $104=((($103)-(1))|0);
 $fill=$104;
 var $105=($104|0)!=0;
 if($105){label=22;break;}else{label=24;break;}
 case 24: 
 var $107=$leaf;
 var $108=$5;
 var $109=(($108+($107<<1))|0);
 HEAP16[(($109)>>1)]=0;
 label=25;break;
 case 25: 
 var $111=$symbol;
 var $112=((($111)+(1))|0);
 $symbol=$112;
 label=20;break;
 case 26: 
 var $114=$table_mask;
 var $115=$114>>>1;
 $next_symbol=$115;
 var $116=$pos;
 var $117=$116<<16;
 $pos=$117;
 var $118=$table_mask;
 var $119=$118<<16;
 $table_mask=$119;
 $bit_mask=32768;
 label=27;break;
 case 27: 
 var $121=$bit_num;
 var $122=($121&255);
 var $123=($122|0)<=16;
 if($123){label=28;break;}else{label=46;break;}
 case 28: 
 $symbol=0;
 label=29;break;
 case 29: 
 var $126=$symbol;
 var $127=$2;
 var $128=($126|0)<($127|0);
 if($128){label=30;break;}else{label=45;break;}
 case 30: 
 var $130=$symbol;
 var $131=$4;
 var $132=(($131+$130)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$bit_num;
 var $136=($135&255);
 var $137=($134|0)==($136|0);
 if($137){label=31;break;}else{label=43;break;}
 case 31: 
 var $139=$pos;
 var $140=$139>>>16;
 $reverse=$140;
 $leaf=0;
 var $141=$3;
 $fill=$141;
 label=32;break;
 case 32: 
 var $143=$leaf;
 var $144=$143<<1;
 var $145=$reverse;
 var $146=$145&1;
 var $147=((($144)+($146))|0);
 $leaf=$147;
 var $148=$reverse;
 var $149=$148>>>1;
 $reverse=$149;
 label=33;break;
 case 33: 
 var $151=$fill;
 var $152=((($151)-(1))|0);
 $fill=$152;
 var $153=($152|0)!=0;
 if($153){label=32;break;}else{label=34;break;}
 case 34: 
 $fill=0;
 label=35;break;
 case 35: 
 var $156=$fill;
 var $157=$bit_num;
 var $158=($157&255);
 var $159=$3;
 var $160=((($158)-($159))|0);
 var $161=($156>>>0)<($160>>>0);
 if($161){label=36;break;}else{label=40;break;}
 case 36: 
 var $163=$leaf;
 var $164=$5;
 var $165=(($164+($163<<1))|0);
 var $166=HEAP16[(($165)>>1)];
 var $167=($166&65535);
 var $168=($167|0)==0;
 if($168){label=37;break;}else{label=38;break;}
 case 37: 
 var $170=$next_symbol;
 var $171=$170<<1;
 var $172=$5;
 var $173=(($172+($171<<1))|0);
 HEAP16[(($173)>>1)]=0;
 var $174=$next_symbol;
 var $175=$174<<1;
 var $176=((($175)+(1))|0);
 var $177=$5;
 var $178=(($177+($176<<1))|0);
 HEAP16[(($178)>>1)]=0;
 var $179=$next_symbol;
 var $180=((($179)+(1))|0);
 $next_symbol=$180;
 var $181=(($179)&65535);
 var $182=$leaf;
 var $183=$5;
 var $184=(($183+($182<<1))|0);
 HEAP16[(($184)>>1)]=$181;
 label=38;break;
 case 38: 
 var $186=$leaf;
 var $187=$5;
 var $188=(($187+($186<<1))|0);
 var $189=HEAP16[(($188)>>1)];
 var $190=($189&65535);
 var $191=$190<<1;
 $leaf=$191;
 var $192=$pos;
 var $193=$fill;
 var $194=(((15)-($193))|0);
 var $195=$192>>>($194>>>0);
 var $196=$195&1;
 var $197=$leaf;
 var $198=((($197)+($196))|0);
 $leaf=$198;
 label=39;break;
 case 39: 
 var $200=$fill;
 var $201=((($200)+(1))|0);
 $fill=$201;
 label=35;break;
 case 40: 
 var $203=$symbol;
 var $204=(($203)&65535);
 var $205=$leaf;
 var $206=$5;
 var $207=(($206+($205<<1))|0);
 HEAP16[(($207)>>1)]=$204;
 var $208=$bit_mask;
 var $209=$pos;
 var $210=((($209)+($208))|0);
 $pos=$210;
 var $211=$pos;
 var $212=$table_mask;
 var $213=($211>>>0)>($212>>>0);
 if($213){label=41;break;}else{label=42;break;}
 case 41: 
 $1=-1;
 label=50;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $218=$symbol;
 var $219=((($218)+(1))|0);
 $symbol=$219;
 label=29;break;
 case 45: 
 var $221=$bit_mask;
 var $222=$221>>>1;
 $bit_mask=$222;
 var $223=$bit_num;
 var $224=((($223)+(1))&255);
 $bit_num=$224;
 label=27;break;
 case 46: 
 label=47;break;
 case 47: 
 var $227=$pos;
 var $228=$table_mask;
 var $229=($227|0)!=($228|0);
 if($229){label=48;break;}else{label=49;break;}
 case 48: 
 $1=-1;
 label=50;break;
 case 49: 
 $1=0;
 label=50;break;
 case 50: 
 var $233=$1;
 STACKTOP=sp;return $233;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_sqsh($f,$fo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $src;
 var $dest;
 var $srclen;
 var $destlen;
 $2=$f;
 $3=$fo;
 var $4=$2;
 var $5=_read32b($4);
 var $6=($5|0)!=1481657158;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 label=18;break;
 case 3: 
 var $9=$2;
 var $10=_read32b($9);
 $srclen=$10;
 var $11=$2;
 var $12=_read32b($11);
 var $13=($12|0)!=1397838664;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 label=18;break;
 case 5: 
 var $16=$2;
 var $17=_read32b($16);
 $destlen=$17;
 var $18=$srclen;
 var $19=((($18)+(3))|0);
 var $20=_malloc($19);
 $src=$20;
 var $21=($20|0)==0;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 label=18;break;
 case 7: 
 var $24=$destlen;
 var $25=((($24)+(100))|0);
 var $26=_malloc($25);
 $dest=$26;
 var $27=($26|0)==0;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 label=17;break;
 case 9: 
 var $30=$src;
 var $31=$srclen;
 var $32=((($31)-(8))|0);
 var $33=$2;
 var $34=_fread($30,$32,1,$33);
 var $35=($34|0)!=1;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 label=16;break;
 case 11: 
 var $38=$src;
 var $39=$dest;
 var $40=$destlen;
 var $41=_unsqsh($38,$39,$40);
 var $42=$destlen;
 var $43=($41|0)!=($42|0);
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 label=16;break;
 case 13: 
 var $46=$dest;
 var $47=$destlen;
 var $48=$3;
 var $49=_fwrite($46,$47,1,$48);
 var $50=($49|0)!=1;
 if($50){label=14;break;}else{label=15;break;}
 case 14: 
 label=16;break;
 case 15: 
 var $53=$dest;
 _free($53);
 var $54=$src;
 _free($54);
 $1=0;
 label=19;break;
 case 16: 
 var $56=$dest;
 _free($56);
 label=17;break;
 case 17: 
 var $58=$src;
 _free($58);
 label=18;break;
 case 18: 
 $1=-1;
 label=19;break;
 case 19: 
 var $61=$1;
 STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }
}
function _unsqsh($src,$dest,$len){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $decrunched;
 var $type;
 var $sum;
 var $packed_size;
 var $unpacked_size;
 var $lchk;
 var $c;
 var $dest_end;
 var $bc=sp;
 var $io=(sp)+(8);
 $2=$src;
 $3=$dest;
 $4=$len;
 $decrunched=0;
 var $5=$2;
 var $6=(($io)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=$3;
 var $8=(($io+4)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$2;
 var $10=(($9+20)|0);
 $c=$10;
 label=2;break;
 case 2: 
 var $12=$4;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=10;break;}
 case 3: 
 var $15=$c;
 var $16=(($15+1)|0);
 $c=$16;
 var $17=HEAP8[($15)];
 var $18=($17&255);
 $type=$18;
 var $19=$c;
 var $20=(($19+1)|0);
 $c=$20;
 var $21=$c;
 var $22=$21;
 var $23=HEAP16[(($22)>>1)];
 var $24=($23&65535);
 $sum=$24;
 var $25=$c;
 var $26=(($25+2)|0);
 $c=$26;
 var $27=$c;
 var $28=_readmem16b($27);
 var $29=($28&65535);
 $packed_size=$29;
 var $30=$c;
 var $31=(($30+2)|0);
 $c=$31;
 var $32=$c;
 var $33=_readmem16b($32);
 var $34=($33&65535);
 $unpacked_size=$34;
 var $35=$c;
 var $36=(($35+2)|0);
 $c=$36;
 var $37=$c;
 var $38=(($37+2)|0);
 var $39=(($io)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=$bc;
 var $41=$c;
 var $42=$packed_size;
 var $43=(($41+$42)|0);
 assert(3 % 1 === 0);HEAP8[($40)]=HEAP8[($43)];HEAP8[((($40)+(1))|0)]=HEAP8[((($43)+(1))|0)];HEAP8[((($40)+(2))|0)]=HEAP8[((($43)+(2))|0)];
 var $44=$c;
 var $45=$packed_size;
 var $46=(($44+$45)|0);
 HEAP8[($46)]=0; HEAP8[((($46)+(1))|0)]=0; HEAP8[((($46)+(2))|0)]=0;
 var $47=$c;
 var $48=$47;
 var $49=$packed_size;
 var $50=((($49)+(3))|0);
 var $51=$50>>2;
 var $52=_xchecksum($48,$51);
 var $53=($52&65535);
 $lchk=$53;
 var $54=$c;
 var $55=$packed_size;
 var $56=(($54+$55)|0);
 var $57=$bc;
 assert(3 % 1 === 0);HEAP8[($56)]=HEAP8[($57)];HEAP8[((($56)+(1))|0)]=HEAP8[((($57)+(1))|0)];HEAP8[((($56)+(2))|0)]=HEAP8[((($57)+(2))|0)];
 var $58=$lchk;
 var $59=$sum;
 var $60=($58|0)!=($59|0);
 if($60){label=4;break;}else{label=5;break;}
 case 4: 
 var $62=$decrunched;
 $1=$62;
 label=11;break;
 case 5: 
 var $64=$type;
 var $65=($64|0)==0;
 if($65){label=6;break;}else{label=7;break;}
 case 6: 
 var $67=(($io+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$c;
 var $70=$packed_size;
 assert($70 % 1 === 0);(_memcpy($68, $69, $70)|0);
 var $71=$packed_size;
 var $72=(($io+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+$71)|0);
 HEAP32[(($72)>>2)]=$74;
 var $75=$packed_size;
 var $76=$c;
 var $77=(($76+$75)|0);
 $c=$77;
 var $78=$packed_size;
 var $79=$4;
 var $80=((($79)-($78))|0);
 $4=$80;
 var $81=$packed_size;
 var $82=$decrunched;
 var $83=((($82)+($81))|0);
 $decrunched=$83;
 label=2;break;
 case 7: 
 var $85=$type;
 var $86=($85|0)!=1;
 if($86){label=8;break;}else{label=9;break;}
 case 8: 
 var $88=$decrunched;
 $1=$88;
 label=11;break;
 case 9: 
 var $90=$unpacked_size;
 var $91=$4;
 var $92=((($91)-($90))|0);
 $4=$92;
 var $93=$unpacked_size;
 var $94=$decrunched;
 var $95=((($94)+($93))|0);
 $decrunched=$95;
 var $96=$packed_size;
 var $97=((($96)+(3))|0);
 var $98=$97&65532;
 $packed_size=$98;
 var $99=$packed_size;
 var $100=$c;
 var $101=(($100+$99)|0);
 $c=$101;
 var $102=(($io+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=$unpacked_size;
 var $105=(($103+$104)|0);
 $dest_end=$105;
 var $106=$dest_end;
 _unsqsh_block($io,$106);
 var $107=$dest_end;
 var $108=(($io+4)|0);
 HEAP32[(($108)>>2)]=$107;
 label=2;break;
 case 10: 
 var $110=$decrunched;
 $1=$110;
 label=11;break;
 case 11: 
 var $112=$1;
 STACKTOP=sp;return $112;
  default: assert(0, "bad label: " + label);
 }
}
function _xchecksum($ptr,$count){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $sum;
 $1=$ptr;
 $2=$count;
 $sum=0;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=((($4)-(1))|0);
 $2=$5;
 var $6=($4>>>0)>0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=$1;
 var $9=(($8+4)|0);
 $1=$9;
 var $10=HEAP32[(($8)>>2)];
 var $11=$sum;
 var $12=$11^$10;
 $sum=$12;
 label=2;break;
 case 4: 
 var $14=$sum;
 var $15=$sum;
 var $16=$15>>>16;
 var $17=$14^$16;
 var $18=(($17)&65535);
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _unsqsh_block($io,$dest_end){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $d1;
 var $d2;
 var $data=sp;
 var $unpack_len;
 var $count;
 var $old_count;
 $1=$io;
 $2=$dest_end;
 $old_count=0;
 HEAP32[(($data)>>2)]=0;
 $d2=0;
 $d1=0;
 var $3=$1;
 var $4=(($3+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($6)>>2)]=$8;
 var $9=HEAP8[($7)];
 var $10=($9&255);
 HEAP32[(($data)>>2)]=$10;
 var $11=HEAP32[(($data)>>2)];
 var $12=(($11)&255);
 var $13=$1;
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+1)|0);
 HEAP32[(($14)>>2)]=$16;
 HEAP8[($15)]=$12;
 label=2;break;
 case 2: 
 var $18=$d1;
 var $19=($18|0)<8;
 if($19){label=3;break;}else{label=6;break;}
 case 3: 
 var $21=$1;
 var $22=_get_bits811($21,1);
 var $23=($22|0)!=0;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=$1;
 var $26=$d1;
 var $27=_copy_data($25,$26,$data);
 $d1=$27;
 var $28=$d2;
 var $29=$28>>3;
 var $30=$d2;
 var $31=((($30)-($29))|0);
 $d2=$31;
 label=36;break;
 case 5: 
 $unpack_len=0;
 $count=8;
 label=30;break;
 case 6: 
 var $34=$1;
 var $35=_get_bits811($34,1);
 var $36=($35|0)!=0;
 if($36){label=7;break;}else{label=14;break;}
 case 7: 
 $count=8;
 var $38=$count;
 var $39=$old_count;
 var $40=($38|0)==($39|0);
 if($40){label=8;break;}else{label=12;break;}
 case 8: 
 var $42=$d2;
 var $43=($42|0)>=20;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 $unpack_len=1;
 var $45=$d2;
 var $46=((($45)+(8))|0);
 $d2=$46;
 label=11;break;
 case 10: 
 $unpack_len=0;
 label=11;break;
 case 11: 
 label=13;break;
 case 12: 
 var $50=$old_count;
 $count=$50;
 $unpack_len=4;
 var $51=$d2;
 var $52=((($51)+(8))|0);
 $d2=$52;
 label=13;break;
 case 13: 
 label=29;break;
 case 14: 
 var $55=$1;
 var $56=_get_bits811($55,1);
 var $57=($56|0)==0;
 if($57){label=15;break;}else{label=16;break;}
 case 15: 
 var $59=$1;
 var $60=$d1;
 var $61=_copy_data($59,$60,$data);
 $d1=$61;
 var $62=$d2;
 var $63=$62>>3;
 var $64=$d2;
 var $65=((($64)-($63))|0);
 $d2=$65;
 label=36;break;
 case 16: 
 var $67=$1;
 var $68=_get_bits811($67,1);
 var $69=($68|0)==0;
 if($69){label=17;break;}else{label=18;break;}
 case 17: 
 $count=2;
 label=22;break;
 case 18: 
 var $72=$1;
 var $73=_get_bits811($72,1);
 var $74=($73|0)!=0;
 if($74){label=19;break;}else{label=20;break;}
 case 19: 
 var $76=$1;
 var $77=(($76+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=((($78)-(1))|0);
 HEAP32[(($77)>>2)]=$79;
 var $80=$1;
 var $81=_get_bits811($80,3);
 $count=$81;
 label=21;break;
 case 20: 
 $count=3;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $85=$old_count;
 var $86=($85<<3);
 var $87=$count;
 var $88=((($86)+($87))|0);
 var $89=((($88)-(17))|0);
 var $90=((18616+$89)|0);
 var $91=HEAP8[($90)];
 var $92=($91&255);
 $count=$92;
 var $93=$count;
 var $94=($93|0)!=8;
 if($94){label=23;break;}else{label=24;break;}
 case 23: 
 $unpack_len=4;
 var $96=$d2;
 var $97=((($96)+(8))|0);
 $d2=$97;
 label=28;break;
 case 24: 
 var $99=$d2;
 var $100=($99|0)>=20;
 if($100){label=25;break;}else{label=26;break;}
 case 25: 
 $unpack_len=1;
 var $102=$d2;
 var $103=((($102)+(8))|0);
 $d2=$103;
 label=27;break;
 case 26: 
 $unpack_len=0;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $110=$1;
 var $111=$count;
 var $112=_get_bits_final($110,$111);
 var $113=HEAP32[(($data)>>2)];
 var $114=((($113)-($112))|0);
 HEAP32[(($data)>>2)]=$114;
 var $115=HEAP32[(($data)>>2)];
 var $116=(($115)&255);
 var $117=$1;
 var $118=(($117+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+1)|0);
 HEAP32[(($118)>>2)]=$120;
 HEAP8[($119)]=$116;
 label=32;break;
 case 32: 
 var $122=$unpack_len;
 var $123=((($122)-(1))|0);
 $unpack_len=$123;
 var $124=($122|0)!=0;
 if($124){label=31;break;}else{label=33;break;}
 case 33: 
 var $126=$d1;
 var $127=($126|0)!=31;
 if($127){label=34;break;}else{label=35;break;}
 case 34: 
 var $129=$d1;
 var $130=((($129)+(1))|0);
 $d1=$130;
 label=35;break;
 case 35: 
 var $132=$count;
 $old_count=$132;
 var $133=$d2;
 var $134=$133>>3;
 var $135=$d2;
 var $136=((($135)-($134))|0);
 $d2=$136;
 label=36;break;
 case 36: 
 var $138=$1;
 var $139=(($138+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=$2;
 var $142=($140>>>0)<($141>>>0);
 if($142){label=2;break;}else{label=37;break;}
 case 37: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_bits811($io,$count){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $r;
 $1=$io;
 $2=$count;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8>>3;
 var $10=(($5+$9)|0);
 var $11=_readmem24b($10);
 $r=$11;
 var $12=$1;
 var $13=(($12+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(((($14|0))%(8))&-1);
 var $16=$r;
 var $17=$16<<$15;
 $r=$17;
 var $18=$r;
 var $19=$18&16777215;
 $r=$19;
 var $20=$2;
 var $21=(((24)-($20))|0);
 var $22=$r;
 var $23=$22>>($21|0);
 $r=$23;
 var $24=$2;
 var $25=$1;
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($27)+($24))|0);
 HEAP32[(($26)>>2)]=$28;
 var $29=$r;
 STACKTOP=sp;return $29;
}
function _copy_data($io,$d1,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $copy_src;
 var $dest_offset;
 var $count;
 var $copy_len;
 $1=$io;
 $2=$d1;
 $3=$data;
 var $4=$1;
 var $5=_get_bits811($4,1);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=_get_bits811($8,1);
 var $10=((($9)+(2))|0);
 $copy_len=$10;
 label=13;break;
 case 3: 
 var $12=$1;
 var $13=_get_bits811($12,1);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$1;
 var $17=_get_bits811($16,1);
 var $18=((($17)+(4))|0);
 $copy_len=$18;
 label=12;break;
 case 5: 
 var $20=$1;
 var $21=_get_bits811($20,1);
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$1;
 var $25=_get_bits811($24,1);
 var $26=((($25)+(6))|0);
 $copy_len=$26;
 label=11;break;
 case 7: 
 var $28=$1;
 var $29=_get_bits811($28,1);
 var $30=($29|0)==0;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 var $32=$1;
 var $33=_get_bits811($32,3);
 var $34=((($33)+(8))|0);
 $copy_len=$34;
 label=10;break;
 case 9: 
 var $36=$1;
 var $37=_get_bits811($36,5);
 var $38=((($37)+(16))|0);
 $copy_len=$38;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $43=$1;
 var $44=_get_bits811($43,1);
 var $45=($44|0)==0;
 if($45){label=14;break;}else{label=18;break;}
 case 14: 
 var $47=$1;
 var $48=_get_bits811($47,1);
 var $49=($48|0)==0;
 if($49){label=15;break;}else{label=16;break;}
 case 15: 
 $count=8;
 $dest_offset=0;
 label=17;break;
 case 16: 
 $count=14;
 $dest_offset=-4352;
 label=17;break;
 case 17: 
 label=19;break;
 case 18: 
 $count=12;
 $dest_offset=-256;
 label=19;break;
 case 19: 
 var $55=$copy_len;
 var $56=((($55)-(3))|0);
 $copy_len=$56;
 var $57=$copy_len;
 var $58=($57|0)>=0;
 if($58){label=20;break;}else{label=25;break;}
 case 20: 
 var $60=$copy_len;
 var $61=($60|0)!=0;
 if($61){label=21;break;}else{label=22;break;}
 case 21: 
 var $63=$2;
 var $64=((($63)-(1))|0);
 $2=$64;
 label=22;break;
 case 22: 
 var $66=$2;
 var $67=((($66)-(1))|0);
 $2=$67;
 var $68=$2;
 var $69=($68|0)<0;
 if($69){label=23;break;}else{label=24;break;}
 case 23: 
 $2=0;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $73=$copy_len;
 var $74=((($73)+(2))|0);
 $copy_len=$74;
 var $75=$1;
 var $76=(($75+4)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=$dest_offset;
 var $79=(($77+$78)|0);
 var $80=$1;
 var $81=$count;
 var $82=_get_bits811($80,$81);
 var $83=(((-$82))|0);
 var $84=(($79+$83)|0);
 var $85=((($84)-(1))|0);
 $copy_src=$85;
 label=26;break;
 case 26: 
 var $87=$copy_src;
 var $88=(($87+1)|0);
 $copy_src=$88;
 var $89=HEAP8[($87)];
 var $90=$1;
 var $91=(($90+4)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+1)|0);
 HEAP32[(($91)>>2)]=$93;
 HEAP8[($92)]=$89;
 label=27;break;
 case 27: 
 var $95=$copy_len;
 var $96=((($95)-(1))|0);
 $copy_len=$96;
 var $97=($95|0)!=0;
 if($97){label=26;break;}else{label=28;break;}
 case 28: 
 var $99=$copy_src;
 var $100=((($99)-(1))|0);
 $copy_src=$100;
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=$3;
 HEAP32[(($103)>>2)]=$102;
 var $104=$2;
 STACKTOP=sp;return $104;
  default: assert(0, "bad label: " + label);
 }
}
function _get_bits_final($io,$count){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $r;
 $1=$io;
 $2=$count;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8>>3;
 var $10=(($5+$9)|0);
 var $11=_readmem24b($10);
 $r=$11;
 var $12=$1;
 var $13=(($12+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(((($14|0))%(8))&-1);
 var $16=((($15)+(8))|0);
 var $17=$r;
 var $18=$17<<$16;
 $r=$18;
 var $19=$2;
 var $20=(((32)-($19))|0);
 var $21=$r;
 var $22=$21>>($20|0);
 $r=$22;
 var $23=$2;
 var $24=$1;
 var $25=(($24+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=((($26)+($23))|0);
 HEAP32[(($25)>>2)]=$27;
 var $28=$r;
 STACKTOP=sp;return $28;
}
function _decrunch_xz($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $b=sp;
 var $state;
 var $membuf;
 var $ret;
 var $r;
 var $rd;
 $2=$in;
 $3=$out;
 $ret=0;
 _crc32_init_A();
 var $4=$b;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 var $5=_malloc(8192);
 $membuf=$5;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=17;break;
 case 3: 
 var $9=$membuf;
 var $10=(($b)|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=$membuf;
 var $12=(($11+4096)|0);
 var $13=(($b+12)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($b+20)|0);
 HEAP32[(($14)>>2)]=4096;
 var $15=_xz_dec_init(2,16777216);
 $state=$15;
 label=4;break;
 case 4: 
 var $17=(($b+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($b+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($18|0)==($20|0);
 if($21){label=5;break;}else{label=8;break;}
 case 5: 
 var $23=$membuf;
 var $24=$2;
 var $25=_fread($23,1,4096,$24);
 $rd=$25;
 var $26=$rd;
 var $27=($26|0)<0;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 $ret=-1;
 label=16;break;
 case 7: 
 var $30=$rd;
 var $31=(($b+8)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=(($b+4)|0);
 HEAP32[(($32)>>2)]=0;
 label=8;break;
 case 8: 
 var $34=$state;
 var $35=_xz_dec_run($34,$b);
 $r=$35;
 var $36=(($b+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)!=0;
 if($38){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($b+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($b+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$3;
 var $45=_fwrite($41,1,$43,$44);
 var $46=(($b+16)|0);
 HEAP32[(($46)>>2)]=0;
 label=10;break;
 case 10: 
 var $48=$r;
 var $49=($48|0)==1;
 if($49){label=11;break;}else{label=12;break;}
 case 11: 
 label=16;break;
 case 12: 
 var $52=$r;
 var $53=($52|0)!=0;
 if($53){label=13;break;}else{label=15;break;}
 case 13: 
 var $55=$r;
 var $56=($55|0)!=2;
 if($56){label=14;break;}else{label=15;break;}
 case 14: 
 $ret=-1;
 label=16;break;
 case 15: 
 label=4;break;
 case 16: 
 var $60=$state;
 _xz_dec_end($60);
 var $61=$membuf;
 _free($61);
 var $62=$ret;
 $1=$62;
 label=17;break;
 case 17: 
 var $64=$1;
 STACKTOP=sp;return $64;
  default: assert(0, "bad label: " + label);
 }
}
function _decrunch_zip($in,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $offset;
 $2=$in;
 $3=$out;
 var $4=$2;
 var $5=_kunzip_get_offset_excluding($4);
 $offset=$5;
 var $6=$offset;
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $10=$2;
 var $11=$offset;
 var $12=_fseek($10,$11,0);
 var $13=$2;
 var $14=$3;
 var $15=_kunzip_file_with_name($13,$14);
 var $16=($15|0)<0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $20=$1;
 STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _kunzip_get_offset_excluding($in){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1080)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $header=sp;
 var $i;
 var $curr;
 var $name_size;
 var $marker;
 var $name=(sp)+(56);
 $2=$in;
 $i=0;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=_ftell($4);
 $curr=$5;
 var $6=$2;
 var $7=_read_zip_header($6,$header);
 $i=$7;
 var $8=$i;
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 label=9;break;
 case 4: 
 var $12=$2;
 var $13=_ftell($12);
 $marker=$13;
 var $14=(($header+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $name_size=$15;
 var $16=$name_size;
 var $17=($16|0)>1023;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 $name_size=1023;
 label=6;break;
 case 6: 
 var $20=$2;
 var $21=(($name)|0);
 var $22=$name_size;
 var $23=_read_chars($20,$21,$22);
 var $24=$name_size;
 var $25=(($name+$24)|0);
 HEAP8[($25)]=0;
 var $26=$2;
 var $27=$marker;
 var $28=_fseek($26,$27,0);
 var $29=(($name)|0);
 var $30=_exclude_match($29);
 var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=7;break;}
 case 7: 
 label=9;break;
 case 8: 
 var $34=$2;
 var $35=(($header+28)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($header+36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=((($36)+($38))|0);
 var $40=(($header+40)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=((($39)+($41))|0);
 var $43=_fseek($34,$42,1);
 label=2;break;
 case 9: 
 var $45=$i;
 var $46=($45|0)!=-1;
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=$curr;
 $1=$48;
 label=12;break;
 case 11: 
 $1=-1;
 label=12;break;
 case 12: 
 var $51=$1;
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }
}
function _kunzip_file_with_name($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $header=sp;
 var $ret_code;
 var $checksum=(sp)+(56);
 var $marker;
 var $data=(sp)+(64);
 $2=$in;
 $3=$out;
 HEAP32[(($checksum)>>2)]=0;
 $ret_code=0;
 var $4=$2;
 var $5=_read_zip_header($4,$header);
 var $6=($5|0)==-1;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=21;break;
 case 3: 
 var $9=(($header+36)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)+(1))|0);
 var $12=_malloc($11);
 var $13=(($header+44)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=(($header+44)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 label=20;break;
 case 5: 
 var $19=(($header+40)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 var $22=_malloc($21);
 var $23=(($header+48)|0);
 HEAP32[(($23)>>2)]=$22;
 var $24=(($header+48)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 label=19;break;
 case 7: 
 var $29=$2;
 var $30=(($header+44)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($header+36)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=_read_chars($29,$31,$33);
 var $35=$2;
 var $36=(($header+48)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($header+40)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=_read_chars($35,$37,$39);
 var $41=$2;
 var $42=_ftell($41);
 $marker=$42;
 _crc32_init_A();
 var $43=(($header+32)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0)!=0;
 if($45){label=8;break;}else{label=16;break;}
 case 8: 
 var $47=(($header+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){label=9;break;}else{label=10;break;}
 case 9: 
 var $51=$2;
 var $52=$3;
 var $53=(($header+32)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=_copy_file($51,$52,$54,$data);
 HEAP32[(($checksum)>>2)]=$55;
 label=13;break;
 case 10: 
 var $57=$2;
 var $58=$3;
 var $59=_inflate($57,$58,$checksum,1);
 var $60=($59|0)<0;
 if($60){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=21;break;
 case 12: 
 label=13;break;
 case 13: 
 var $64=HEAP32[(($checksum)>>2)];
 var $65=(($header+24)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)!=($66|0);
 if($67){label=14;break;}else{label=15;break;}
 case 14: 
 $ret_code=-4;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $71=(($header+44)|0);
 var $72=HEAP32[(($71)>>2)];
 _free($72);
 var $73=(($header+48)|0);
 var $74=HEAP32[(($73)>>2)];
 _free($74);
 var $75=$2;
 var $76=$marker;
 var $77=(($header+28)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=((($76)+($78))|0);
 var $80=_fseek($75,$79,0);
 var $81=(($header+8)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$82&8;
 var $84=($83|0)!=0;
 if($84){label=17;break;}else{label=18;break;}
 case 17: 
 var $86=$2;
 var $87=_read32l($86);
 var $88=$2;
 var $89=_read32l($88);
 var $90=$2;
 var $91=_read32l($90);
 label=18;break;
 case 18: 
 var $93=$ret_code;
 $1=$93;
 label=21;break;
 case 19: 
 var $95=(($header+44)|0);
 var $96=HEAP32[(($95)>>2)];
 _free($96);
 label=20;break;
 case 20: 
 $1=-1;
 label=21;break;
 case 21: 
 var $99=$1;
 STACKTOP=sp;return $99;
  default: assert(0, "bad label: " + label);
 }
}
function _read_zip_header($in,$header){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$in;
 $3=$header;
 var $4=$2;
 var $5=_read32l($4);
 var $6=$3;
 var $7=(($6)|0);
 HEAP32[(($7)>>2)]=$5;
 var $8=$3;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)!=67324752;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $14=$2;
 var $15=_read16l($14);
 var $16=($15&65535);
 var $17=$3;
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$2;
 var $20=_read16l($19);
 var $21=($20&65535);
 var $22=$3;
 var $23=(($22+8)|0);
 HEAP32[(($23)>>2)]=$21;
 var $24=$2;
 var $25=_read16l($24);
 var $26=($25&65535);
 var $27=$3;
 var $28=(($27+12)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$2;
 var $30=_read16l($29);
 var $31=($30&65535);
 var $32=$3;
 var $33=(($32+16)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=$2;
 var $35=_read16l($34);
 var $36=($35&65535);
 var $37=$3;
 var $38=(($37+20)|0);
 HEAP32[(($38)>>2)]=$36;
 var $39=$2;
 var $40=_read32l($39);
 var $41=$3;
 var $42=(($41+24)|0);
 HEAP32[(($42)>>2)]=$40;
 var $43=$2;
 var $44=_read32l($43);
 var $45=$3;
 var $46=(($45+28)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$2;
 var $48=_read32l($47);
 var $49=$3;
 var $50=(($49+32)|0);
 HEAP32[(($50)>>2)]=$48;
 var $51=$2;
 var $52=_read16l($51);
 var $53=($52&65535);
 var $54=$3;
 var $55=(($54+36)|0);
 HEAP32[(($55)>>2)]=$53;
 var $56=$2;
 var $57=_read16l($56);
 var $58=($57&65535);
 var $59=$3;
 var $60=(($59+40)|0);
 HEAP32[(($60)>>2)]=$58;
 $1=0;
 label=4;break;
 case 4: 
 var $62=$1;
 STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _read_chars($in,$s,$count){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $t;
 $1=$in;
 $2=$s;
 $3=$count;
 $t=0;
 label=2;break;
 case 2: 
 var $5=$t;
 var $6=$3;
 var $7=($5|0)<($6|0);
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $9=$1;
 var $10=_fgetc($9);
 var $11=(($10)&255);
 var $12=$t;
 var $13=$2;
 var $14=(($13+$12)|0);
 HEAP8[($14)]=$11;
 label=4;break;
 case 4: 
 var $16=$t;
 var $17=((($16)+(1))|0);
 $t=$17;
 label=2;break;
 case 5: 
 var $19=$t;
 var $20=$2;
 var $21=(($20+$19)|0);
 HEAP8[($21)]=0;
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _copy_file($in,$out,$len,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16744)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buffer=sp;
 var $checksum;
 var $t;
 var $r;
 $1=$in;
 $2=$out;
 $3=$len;
 $4=$data;
 $checksum=-1;
 $t=0;
 label=2;break;
 case 2: 
 var $6=$t;
 var $7=$3;
 var $8=($6|0)<($7|0);
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 var $10=$t;
 var $11=((($10)+(16738))|0);
 var $12=$3;
 var $13=($11|0)<($12|0);
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $r=16738;
 label=6;break;
 case 5: 
 var $16=$3;
 var $17=$t;
 var $18=((($16)-($17))|0);
 $r=$18;
 label=6;break;
 case 6: 
 var $20=$1;
 var $21=(($buffer)|0);
 var $22=$r;
 var $23=_read_buffer($20,$21,$22);
 var $24=$2;
 var $25=(($buffer)|0);
 var $26=$r;
 var $27=_write_buffer($24,$25,$26);
 var $28=(($buffer)|0);
 var $29=$r;
 var $30=$checksum;
 var $31=_crc32_A2($28,$29,$30);
 $checksum=$31;
 var $32=$t;
 var $33=$r;
 var $34=((($32)+($33))|0);
 $t=$34;
 label=2;break;
 case 7: 
 var $36=$checksum;
 var $37=$36^-1;
 STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _read_buffer($in,$buffer,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $t;
 $1=$in;
 $2=$buffer;
 $3=$len;
 $t=0;
 label=2;break;
 case 2: 
 var $5=$t;
 var $6=$3;
 var $7=($5|0)<($6|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$t;
 var $10=$2;
 var $11=$t;
 var $12=(($10+$11)|0);
 var $13=$3;
 var $14=$t;
 var $15=((($13)-($14))|0);
 var $16=$1;
 var $17=_fread($12,1,$15,$16);
 var $18=((($9)+($17))|0);
 $t=$18;
 label=2;break;
 case 4: 
 var $20=$t;
 STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _write_buffer($out,$buffer,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $t;
 $1=$out;
 $2=$buffer;
 $3=$len;
 $t=0;
 label=2;break;
 case 2: 
 var $5=$t;
 var $6=$3;
 var $7=($5|0)<($6|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$t;
 var $10=$2;
 var $11=$t;
 var $12=(($10+$11)|0);
 var $13=$3;
 var $14=$t;
 var $15=((($13)-($14))|0);
 var $16=$1;
 var $17=_fwrite($12,1,$15,$16);
 var $18=((($9)+($17))|0);
 $t=$18;
 label=2;break;
 case 4: 
 var $20=$t;
 STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _stb_vorbis_close($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$p;
 var $2=$1;
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $6=$1;
 _vorbis_deinit($6);
 var $7=$1;
 var $8=$1;
 var $9=$8;
 _setup_free($7,$9);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_deinit($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $j;
 var $r;
 var $c;
 $1=$p;
 $i=0;
 label=2;break;
 case 2: 
 var $3=$i;
 var $4=($3|0)<2;
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 var $6=$1;
 var $7=$i;
 var $8=$1;
 var $9=(($8+832)|0);
 var $10=(($9+($7<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 _setup_free($6,$12);
 var $13=$1;
 var $14=$i;
 var $15=$1;
 var $16=(($15+840)|0);
 var $17=(($16+($14<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18;
 _setup_free($13,$19);
 var $20=$1;
 var $21=$i;
 var $22=$1;
 var $23=(($22+848)|0);
 var $24=(($23+($21<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25;
 _setup_free($20,$26);
 var $27=$1;
 var $28=$i;
 var $29=$1;
 var $30=(($29+864)|0);
 var $31=(($30+($28<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 _setup_free($27,$33);
 label=4;break;
 case 4: 
 var $35=$i;
 var $36=((($35)+(1))|0);
 $i=$36;
 label=2;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $39=$i;
 var $40=$1;
 var $41=(($40+268)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($39|0)<($42|0);
 if($43){label=7;break;}else{label=15;break;}
 case 7: 
 var $45=$1;
 var $46=(($45+400)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$i;
 var $49=(($47+((($48)*(24))&-1))|0);
 $r=$49;
 var $50=$r;
 var $51=(($50+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)!=0;
 if($53){label=8;break;}else{label=13;break;}
 case 8: 
 $j=0;
 label=9;break;
 case 9: 
 var $56=$j;
 var $57=$r;
 var $58=(($57+13)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=$1;
 var $62=(($61+128)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+((($60)*(2096))&-1))|0);
 var $65=(($64+4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($56|0)<($66|0);
 if($67){label=10;break;}else{label=12;break;}
 case 10: 
 var $69=$1;
 var $70=$j;
 var $71=$r;
 var $72=(($71+16)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+($70<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 _setup_free($69,$75);
 label=11;break;
 case 11: 
 var $77=$j;
 var $78=((($77)+(1))|0);
 $j=$78;
 label=9;break;
 case 12: 
 var $80=$1;
 var $81=$r;
 var $82=(($81+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$83;
 _setup_free($80,$84);
 label=13;break;
 case 13: 
 var $86=$1;
 var $87=$r;
 var $88=(($87+20)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$89;
 _setup_free($86,$90);
 label=14;break;
 case 14: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=6;break;
 case 15: 
 var $95=$1;
 var $96=(($95+128)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($97|0)!=0;
 if($98){label=16;break;}else{label=24;break;}
 case 16: 
 $i=0;
 label=17;break;
 case 17: 
 var $101=$i;
 var $102=$1;
 var $103=(($102+124)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($101|0)<($104|0);
 if($105){label=18;break;}else{label=23;break;}
 case 18: 
 var $107=$1;
 var $108=(($107+128)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$i;
 var $111=(($109+((($110)*(2096))&-1))|0);
 $c=$111;
 var $112=$1;
 var $113=$c;
 var $114=(($113+8)|0);
 var $115=HEAP32[(($114)>>2)];
 _setup_free($112,$115);
 var $116=$1;
 var $117=$c;
 var $118=(($117+28)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$119;
 _setup_free($116,$120);
 var $121=$1;
 var $122=$c;
 var $123=(($122+32)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 _setup_free($121,$125);
 var $126=$1;
 var $127=$c;
 var $128=(($127+2084)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=$129;
 _setup_free($126,$130);
 var $131=$1;
 var $132=$c;
 var $133=(($132+2088)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)!=0;
 if($135){label=19;break;}else{label=20;break;}
 case 19: 
 var $137=$c;
 var $138=(($137+2088)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=((($139)-(4))|0);
 var $143=$140;label=21;break;
 case 20: 
 var $143=0;label=21;break;
 case 21: 
 var $143;
 var $144=$143;
 _setup_free($131,$144);
 label=22;break;
 case 22: 
 var $146=$i;
 var $147=((($146)+(1))|0);
 $i=$147;
 label=17;break;
 case 23: 
 var $149=$1;
 var $150=$1;
 var $151=(($150+128)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$152;
 _setup_free($149,$153);
 label=24;break;
 case 24: 
 var $155=$1;
 var $156=$1;
 var $157=(($156+264)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$158;
 _setup_free($155,$159);
 var $160=$1;
 var $161=$1;
 var $162=(($161+400)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 _setup_free($160,$164);
 $i=0;
 label=25;break;
 case 25: 
 var $166=$i;
 var $167=$1;
 var $168=(($167+404)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($166|0)<($169|0);
 if($170){label=26;break;}else{label=28;break;}
 case 26: 
 var $172=$1;
 var $173=$i;
 var $174=$1;
 var $175=(($174+408)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+((($173)*(40))&-1))|0);
 var $178=(($177+4)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=$179;
 _setup_free($172,$180);
 label=27;break;
 case 27: 
 var $182=$i;
 var $183=((($182)+(1))|0);
 $i=$183;
 label=25;break;
 case 28: 
 var $185=$1;
 var $186=$1;
 var $187=(($186+408)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=$188;
 _setup_free($185,$189);
 $i=0;
 label=29;break;
 case 29: 
 var $191=$i;
 var $192=$1;
 var $193=(($192+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($191|0)<($194|0);
 if($195){label=30;break;}else{label=32;break;}
 case 30: 
 var $197=$1;
 var $198=$i;
 var $199=$1;
 var $200=(($199+804)|0);
 var $201=(($200+($198<<2))|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$202;
 _setup_free($197,$203);
 var $204=$1;
 var $205=$i;
 var $206=$1;
 var $207=(($206+812)|0);
 var $208=(($207+($205<<2))|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$209;
 _setup_free($204,$210);
 var $211=$1;
 var $212=$i;
 var $213=$1;
 var $214=(($213+820)|0);
 var $215=(($214+($212<<2))|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$216;
 _setup_free($211,$217);
 label=31;break;
 case 31: 
 var $219=$i;
 var $220=((($219)+(1))|0);
 $i=$220;
 label=29;break;
 case 32: 
 $i=0;
 label=33;break;
 case 33: 
 var $223=$i;
 var $224=($223|0)<2;
 if($224){label=34;break;}else{label=36;break;}
 case 34: 
 var $226=$1;
 var $227=$i;
 var $228=$1;
 var $229=(($228+856)|0);
 var $230=(($229+($227<<2))|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=$231;
 _setup_free($226,$232);
 label=35;break;
 case 35: 
 var $234=$i;
 var $235=((($234)+(1))|0);
 $i=$235;
 label=33;break;
 case 36: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _setup_free($f,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$p;
 var $3=$2;
 _free($3);
 STACKTOP=sp;return;
}
function _stb_vorbis_get_file_offset($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$f;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$4;
 var $9=$7;
 var $10=((($8)-($9))|0);
 STACKTOP=sp;return $10;
}
function _stb_vorbis_get_frame_float($f,$channels,$output){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $len=sp;
 var $right=(sp)+(8);
 var $left=(sp)+(16);
 var $i;
 $2=$f;
 $3=$channels;
 $4=$output;
 var $5=$2;
 var $6=_vorbis_decode_packet($5,$len,$left,$right);
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$2;
 var $10=(($9+1192)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=$2;
 var $12=(($11+1188)|0);
 HEAP32[(($12)>>2)]=0;
 $1=0;
 label=12;break;
 case 3: 
 var $14=$2;
 var $15=HEAP32[(($len)>>2)];
 var $16=HEAP32[(($left)>>2)];
 var $17=HEAP32[(($right)>>2)];
 var $18=_vorbis_finish_frame($14,$15,$16,$17);
 HEAP32[(($len)>>2)]=$18;
 $i=0;
 label=4;break;
 case 4: 
 var $20=$i;
 var $21=$2;
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($20|0)<($23|0);
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=$i;
 var $27=$2;
 var $28=(($27+804)|0);
 var $29=(($28+($26<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=HEAP32[(($left)>>2)];
 var $32=(($30+($31<<2))|0);
 var $33=$i;
 var $34=$2;
 var $35=(($34+808)|0);
 var $36=(($35+($33<<2))|0);
 HEAP32[(($36)>>2)]=$32;
 label=6;break;
 case 6: 
 var $38=$i;
 var $39=((($38)+(1))|0);
 $i=$39;
 label=4;break;
 case 7: 
 var $41=HEAP32[(($left)>>2)];
 var $42=$2;
 var $43=(($42+1188)|0);
 HEAP32[(($43)>>2)]=$41;
 var $44=HEAP32[(($left)>>2)];
 var $45=HEAP32[(($len)>>2)];
 var $46=((($44)+($45))|0);
 var $47=$2;
 var $48=(($47+1192)|0);
 HEAP32[(($48)>>2)]=$46;
 var $49=$3;
 var $50=($49|0)!=0;
 if($50){label=8;break;}else{label=9;break;}
 case 8: 
 var $52=$2;
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$3;
 HEAP32[(($55)>>2)]=$54;
 label=9;break;
 case 9: 
 var $57=$4;
 var $58=($57|0)!=0;
 if($58){label=10;break;}else{label=11;break;}
 case 10: 
 var $60=$2;
 var $61=(($60+808)|0);
 var $62=(($61)|0);
 var $63=$4;
 HEAP32[(($63)>>2)]=$62;
 label=11;break;
 case 11: 
 var $65=HEAP32[(($len)>>2)];
 $1=$65;
 label=12;break;
 case 12: 
 var $67=$1;
 STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_decode_packet($f,$len,$p_left,$p_right){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $mode=sp;
 var $left_end=(sp)+(8);
 var $right_end=(sp)+(16);
 $2=$f;
 $3=$len;
 $4=$p_left;
 $5=$p_right;
 var $6=$2;
 var $7=$4;
 var $8=$5;
 var $9=_vorbis_decode_initial($6,$7,$left_end,$8,$right_end,$mode);
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 var $13=$2;
 var $14=$3;
 var $15=$2;
 var $16=(($15+416)|0);
 var $17=(($16)|0);
 var $18=HEAP32[(($mode)>>2)];
 var $19=(($17+((($18)*(6))&-1))|0);
 var $20=$4;
 var $21=HEAP32[(($20)>>2)];
 var $22=HEAP32[(($left_end)>>2)];
 var $23=$5;
 var $24=HEAP32[(($23)>>2)];
 var $25=HEAP32[(($right_end)>>2)];
 var $26=$4;
 var $27=_vorbis_decode_packet_rest($13,$14,$19,$21,$22,$24,$25,$26);
 $1=$27;
 label=4;break;
 case 4: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_finish_frame($f,$len,$left,$right){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $prev;
 var $i;
 var $j;
 var $i1;
 var $j2;
 var $n;
 var $w;
 $2=$f;
 $3=$len;
 $4=$left;
 $5=$right;
 var $6=$2;
 var $7=(($6+816)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=11;break;}
 case 2: 
 var $11=$2;
 var $12=(($11+816)|0);
 var $13=HEAP32[(($12)>>2)];
 $n=$13;
 var $14=$2;
 var $15=$n;
 var $16=_get_window($14,$15);
 $w=$16;
 $i1=0;
 label=3;break;
 case 3: 
 var $18=$i1;
 var $19=$2;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($18|0)<($21|0);
 if($22){label=4;break;}else{label=10;break;}
 case 4: 
 $j2=0;
 label=5;break;
 case 5: 
 var $25=$j2;
 var $26=$n;
 var $27=($25|0)<($26|0);
 if($27){label=6;break;}else{label=8;break;}
 case 6: 
 var $29=$4;
 var $30=$j2;
 var $31=((($29)+($30))|0);
 var $32=$i1;
 var $33=$2;
 var $34=(($33+804)|0);
 var $35=(($34+($32<<2))|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+($31<<2))|0);
 var $38=HEAPF32[(($37)>>2)];
 var $39=$j2;
 var $40=$w;
 var $41=(($40+($39<<2))|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=($38)*($42);
 var $44=$j2;
 var $45=$i1;
 var $46=$2;
 var $47=(($46+812)|0);
 var $48=(($47+($45<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+($44<<2))|0);
 var $51=HEAPF32[(($50)>>2)];
 var $52=$n;
 var $53=((($52)-(1))|0);
 var $54=$j2;
 var $55=((($53)-($54))|0);
 var $56=$w;
 var $57=(($56+($55<<2))|0);
 var $58=HEAPF32[(($57)>>2)];
 var $59=($51)*($58);
 var $60=($43)+($59);
 var $61=$4;
 var $62=$j2;
 var $63=((($61)+($62))|0);
 var $64=$i1;
 var $65=$2;
 var $66=(($65+804)|0);
 var $67=(($66+($64<<2))|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+($63<<2))|0);
 HEAPF32[(($69)>>2)]=$60;
 label=7;break;
 case 7: 
 var $71=$j2;
 var $72=((($71)+(1))|0);
 $j2=$72;
 label=5;break;
 case 8: 
 label=9;break;
 case 9: 
 var $75=$i1;
 var $76=((($75)+(1))|0);
 $i1=$76;
 label=3;break;
 case 10: 
 label=11;break;
 case 11: 
 var $79=$2;
 var $80=(($79+816)|0);
 var $81=HEAP32[(($80)>>2)];
 $prev=$81;
 var $82=$3;
 var $83=$5;
 var $84=((($82)-($83))|0);
 var $85=$2;
 var $86=(($85+816)|0);
 HEAP32[(($86)>>2)]=$84;
 $i=0;
 label=12;break;
 case 12: 
 var $88=$i;
 var $89=$2;
 var $90=(($89+4)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($88|0)<($91|0);
 if($92){label=13;break;}else{label=19;break;}
 case 13: 
 $j=0;
 label=14;break;
 case 14: 
 var $95=$5;
 var $96=$j;
 var $97=((($95)+($96))|0);
 var $98=$3;
 var $99=($97|0)<($98|0);
 if($99){label=15;break;}else{label=17;break;}
 case 15: 
 var $101=$5;
 var $102=$j;
 var $103=((($101)+($102))|0);
 var $104=$i;
 var $105=$2;
 var $106=(($105+804)|0);
 var $107=(($106+($104<<2))|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+($103<<2))|0);
 var $110=HEAPF32[(($109)>>2)];
 var $111=$j;
 var $112=$i;
 var $113=$2;
 var $114=(($113+812)|0);
 var $115=(($114+($112<<2))|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+($111<<2))|0);
 HEAPF32[(($117)>>2)]=$110;
 label=16;break;
 case 16: 
 var $119=$j;
 var $120=((($119)+(1))|0);
 $j=$120;
 label=14;break;
 case 17: 
 label=18;break;
 case 18: 
 var $123=$i;
 var $124=((($123)+(1))|0);
 $i=$124;
 label=12;break;
 case 19: 
 var $126=$prev;
 var $127=($126|0)!=0;
 if($127){label=21;break;}else{label=20;break;}
 case 20: 
 $1=0;
 label=24;break;
 case 21: 
 var $130=$3;
 var $131=$5;
 var $132=($130|0)<($131|0);
 if($132){label=22;break;}else{label=23;break;}
 case 22: 
 var $134=$3;
 $5=$134;
 label=23;break;
 case 23: 
 var $136=$5;
 var $137=$4;
 var $138=((($136)-($137))|0);
 var $139=$2;
 var $140=(($139+1180)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=((($141)+($138))|0);
 HEAP32[(($140)>>2)]=$142;
 var $143=$5;
 var $144=$4;
 var $145=((($143)-($144))|0);
 $1=$145;
 label=24;break;
 case 24: 
 var $147=$1;
 STACKTOP=sp;return $147;
  default: assert(0, "bad label: " + label);
 }
}
function _stb_vorbis_open_memory($data,$len,$error,$alloc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $f;
 var $p=sp;
 $2=$data;
 $3=$len;
 $4=$error;
 $5=$alloc;
 var $6=$2;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=10;break;
 case 3: 
 var $10=$5;
 _vorbis_init($p,$10);
 var $11=$2;
 var $12=(($p+20)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$2;
 var $14=$3;
 var $15=(($13+$14)|0);
 var $16=(($p+28)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($p+20)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($p+24)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=$3;
 var $21=(($p+32)|0);
 HEAP32[(($21)>>2)]=$20;
 var $22=(($p+36)|0);
 HEAP8[($22)]=0;
 var $23=_start_decoder($p);
 var $24=($23|0)!=0;
 if($24){label=4;break;}else{label=7;break;}
 case 4: 
 var $26=_vorbis_alloc($p);
 $f=$26;
 var $27=$f;
 var $28=($27|0)!=0;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 var $30=$f;
 var $31=$30;
 var $32=$p;
 assert(1196 % 1 === 0);(_memcpy($31, $32, 1196)|0);
 var $33=$f;
 _vorbis_pump_first_frame($33);
 var $34=$f;
 $1=$34;
 label=10;break;
 case 6: 
 label=7;break;
 case 7: 
 var $37=$4;
 var $38=($37|0)!=0;
 if($38){label=8;break;}else{label=9;break;}
 case 8: 
 var $40=(($p+104)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$4;
 HEAP32[(($42)>>2)]=$41;
 label=9;break;
 case 9: 
 _vorbis_deinit($p);
 $1=0;
 label=10;break;
 case 10: 
 var $45=$1;
 STACKTOP=sp;return $45;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_init($p,$z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$p;
 $2=$z;
 var $3=$1;
 var $4=$3;
 _memset($4, 0, 1196)|0;
 var $5=$2;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=(($8+84)|0);
 var $10=$2;
 var $11=$9;
 var $12=$10;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=$1;
 var $14=(($13+84)|0);
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=((($16)+(3))|0);
 var $18=$17&-4;
 var $19=$1;
 var $20=(($19+84)|0);
 var $21=(($20+4)|0);
 HEAP32[(($21)>>2)]=$18;
 var $22=$1;
 var $23=(($22+84)|0);
 var $24=(($23+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$1;
 var $27=(($26+96)|0);
 HEAP32[(($27)>>2)]=$25;
 label=3;break;
 case 3: 
 var $29=$1;
 var $30=(($29+100)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=$1;
 var $32=(($31+104)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=$1;
 var $34=(($33+20)|0);
 HEAP32[(($34)>>2)]=0;
 var $35=$1;
 var $36=(($35+128)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=$1;
 var $38=(($37+1184)|0);
 HEAP32[(($38)>>2)]=-1;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _start_decoder($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1088)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $header=sp;
 var $x;
 var $y;
 var $len;
 var $i;
 var $j;
 var $k;
 var $max_submaps;
 var $longest_floorlist;
 var $log0;
 var $log1;
 var $values;
 var $ordered;
 var $sorted_count;
 var $total;
 var $lengths;
 var $c;
 var $current_entry;
 var $current_length;
 var $limit;
 var $n;
 var $present;
 var $size;
 var $mults;
 var $q;
 var $len1;
 var $sparse;
 var $z;
 var $div;
 var $off;
 var $z2;
 var $g;
 var $p=(sp)+(8);
 var $g3;
 var $max_class;
 var $c4;
 var $low=(sp)+(1008);
 var $hi=(sp)+(1016);
 var $residue_cascade=(sp)+(1024);
 var $r;
 var $high_bits;
 var $low_bits;
 var $classwords;
 var $temp;
 var $m;
 var $mapping_type;
 var $m5;
 var $imdct_mem;
 var $classify_mem;
 var $i6;
 var $max_part_read;
 var $r7;
 var $n_read;
 var $part_read;
 $2=$f;
 $max_submaps=0;
 $longest_floorlist=0;
 var $3=$2;
 var $4=_start_page($3);
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=353;break;
 case 3: 
 var $8=$2;
 var $9=(($8+1139)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&2;
 var $13=($12|0)!=0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=$2;
 var $16=_error($15,34);
 $1=$16;
 label=353;break;
 case 5: 
 var $18=$2;
 var $19=(($18+1139)|0);
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=$21&4;
 var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$2;
 var $26=_error($25,34);
 $1=$26;
 label=353;break;
 case 7: 
 var $28=$2;
 var $29=(($28+1139)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=$31&1;
 var $33=($32|0)!=0;
 if($33){label=8;break;}else{label=9;break;}
 case 8: 
 var $35=$2;
 var $36=_error($35,34);
 $1=$36;
 label=353;break;
 case 9: 
 var $38=$2;
 var $39=(($38+880)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)!=1;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=$2;
 var $44=_error($43,34);
 $1=$44;
 label=353;break;
 case 11: 
 var $46=$2;
 var $47=(($46+884)|0);
 var $48=(($47)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=($50|0)!=30;
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $53=$2;
 var $54=_error($53,34);
 $1=$54;
 label=353;break;
 case 13: 
 var $56=$2;
 var $57=_get8($56);
 var $58=($57&255);
 var $59=($58|0)!=1;
 if($59){label=14;break;}else{label=15;break;}
 case 14: 
 var $61=$2;
 var $62=_error($61,34);
 $1=$62;
 label=353;break;
 case 15: 
 var $64=$2;
 var $65=(($header)|0);
 var $66=_getn($64,$65,6);
 var $67=($66|0)!=0;
 if($67){label=17;break;}else{label=16;break;}
 case 16: 
 var $69=$2;
 var $70=_error($69,10);
 $1=$70;
 label=353;break;
 case 17: 
 var $72=(($header)|0);
 var $73=_vorbis_validate($72);
 var $74=($73|0)!=0;
 if($74){label=19;break;}else{label=18;break;}
 case 18: 
 var $76=$2;
 var $77=_error($76,34);
 $1=$77;
 label=353;break;
 case 19: 
 var $79=$2;
 var $80=_get32($79);
 var $81=($80|0)!=0;
 if($81){label=20;break;}else{label=21;break;}
 case 20: 
 var $83=$2;
 var $84=_error($83,34);
 $1=$84;
 label=353;break;
 case 21: 
 var $86=$2;
 var $87=_get8($86);
 var $88=($87&255);
 var $89=$2;
 var $90=(($89+4)|0);
 HEAP32[(($90)>>2)]=$88;
 var $91=$2;
 var $92=(($91+4)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=($93|0)!=0;
 if($94){label=23;break;}else{label=22;break;}
 case 22: 
 var $96=$2;
 var $97=_error($96,34);
 $1=$97;
 label=353;break;
 case 23: 
 var $99=$2;
 var $100=(($99+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)>1;
 if($102){label=24;break;}else{label=25;break;}
 case 24: 
 var $104=$2;
 var $105=_error($104,5);
 $1=$105;
 label=353;break;
 case 25: 
 var $107=$2;
 var $108=_get32($107);
 var $109=$2;
 var $110=(($109)|0);
 HEAP32[(($110)>>2)]=$108;
 var $111=$2;
 var $112=(($111)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($113|0)!=0;
 if($114){label=27;break;}else{label=26;break;}
 case 26: 
 var $116=$2;
 var $117=_error($116,34);
 $1=$117;
 label=353;break;
 case 27: 
 var $119=$2;
 var $120=_get32($119);
 var $121=$2;
 var $122=_get32($121);
 var $123=$2;
 var $124=_get32($123);
 var $125=$2;
 var $126=_get8($125);
 $x=$126;
 var $127=$x;
 var $128=($127&255);
 var $129=$128&15;
 $log0=$129;
 var $130=$x;
 var $131=($130&255);
 var $132=$131>>4;
 $log1=$132;
 var $133=$log0;
 var $134=1<<$133;
 var $135=$2;
 var $136=(($135+116)|0);
 HEAP32[(($136)>>2)]=$134;
 var $137=$log1;
 var $138=1<<$137;
 var $139=$2;
 var $140=(($139+120)|0);
 HEAP32[(($140)>>2)]=$138;
 var $141=$log0;
 var $142=($141|0)<6;
 if($142){label=29;break;}else{label=28;break;}
 case 28: 
 var $144=$log0;
 var $145=($144|0)>13;
 if($145){label=29;break;}else{label=30;break;}
 case 29: 
 var $147=$2;
 var $148=_error($147,20);
 $1=$148;
 label=353;break;
 case 30: 
 var $150=$log1;
 var $151=($150|0)<6;
 if($151){label=32;break;}else{label=31;break;}
 case 31: 
 var $153=$log1;
 var $154=($153|0)>13;
 if($154){label=32;break;}else{label=33;break;}
 case 32: 
 var $156=$2;
 var $157=_error($156,20);
 $1=$157;
 label=353;break;
 case 33: 
 var $159=$log0;
 var $160=$log1;
 var $161=($159|0)>($160|0);
 if($161){label=34;break;}else{label=35;break;}
 case 34: 
 var $163=$2;
 var $164=_error($163,20);
 $1=$164;
 label=353;break;
 case 35: 
 var $166=$2;
 var $167=_get8($166);
 $x=$167;
 var $168=$x;
 var $169=($168&255);
 var $170=$169&1;
 var $171=($170|0)!=0;
 if($171){label=37;break;}else{label=36;break;}
 case 36: 
 var $173=$2;
 var $174=_error($173,34);
 $1=$174;
 label=353;break;
 case 37: 
 var $176=$2;
 var $177=_start_page($176);
 var $178=($177|0)!=0;
 if($178){label=39;break;}else{label=38;break;}
 case 38: 
 $1=0;
 label=353;break;
 case 39: 
 var $181=$2;
 var $182=_start_packet($181);
 var $183=($182|0)!=0;
 if($183){label=41;break;}else{label=40;break;}
 case 40: 
 $1=0;
 label=353;break;
 case 41: 
 label=42;break;
 case 42: 
 var $187=$2;
 var $188=_next_segment($187);
 $len=$188;
 var $189=$2;
 var $190=$len;
 _skip($189,$190);
 var $191=$2;
 var $192=(($191+1140)|0);
 HEAP8[($192)]=0;
 label=43;break;
 case 43: 
 var $194=$len;
 var $195=($194|0)!=0;
 if($195){label=42;break;}else{label=44;break;}
 case 44: 
 var $197=$2;
 var $198=_start_packet($197);
 var $199=($198|0)!=0;
 if($199){label=46;break;}else{label=45;break;}
 case 45: 
 $1=0;
 label=353;break;
 case 46: 
 _crc32_init_A834();
 var $202=$2;
 var $203=_get8_packet($202);
 var $204=($203|0)!=5;
 if($204){label=47;break;}else{label=48;break;}
 case 47: 
 var $206=$2;
 var $207=_error($206,20);
 $1=$207;
 label=353;break;
 case 48: 
 $i=0;
 label=49;break;
 case 49: 
 var $210=$i;
 var $211=($210|0)<6;
 if($211){label=50;break;}else{label=52;break;}
 case 50: 
 var $213=$2;
 var $214=_get8_packet($213);
 var $215=(($214)&255);
 var $216=$i;
 var $217=(($header+$216)|0);
 HEAP8[($217)]=$215;
 label=51;break;
 case 51: 
 var $219=$i;
 var $220=((($219)+(1))|0);
 $i=$220;
 label=49;break;
 case 52: 
 var $222=(($header)|0);
 var $223=_vorbis_validate($222);
 var $224=($223|0)!=0;
 if($224){label=54;break;}else{label=53;break;}
 case 53: 
 var $226=$2;
 var $227=_error($226,20);
 $1=$227;
 label=353;break;
 case 54: 
 var $229=$2;
 var $230=_get_bits835($229,8);
 var $231=((($230)+(1))|0);
 var $232=$2;
 var $233=(($232+124)|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=$2;
 var $235=$2;
 var $236=(($235+124)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=((($237)*(2096))&-1);
 var $239=_setup_malloc($234,$238);
 var $240=$239;
 var $241=$2;
 var $242=(($241+128)|0);
 HEAP32[(($242)>>2)]=$240;
 var $243=$2;
 var $244=(($243+128)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($245|0)==0;
 if($246){label=55;break;}else{label=56;break;}
 case 55: 
 var $248=$2;
 var $249=_error($248,3);
 $1=$249;
 label=353;break;
 case 56: 
 var $251=$2;
 var $252=(($251+128)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=$253;
 var $255=$2;
 var $256=(($255+124)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=((($257)*(2096))&-1);
 _memset($254, 0, $258)|0;
 $i=0;
 label=57;break;
 case 57: 
 var $260=$i;
 var $261=$2;
 var $262=(($261+124)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=($260|0)<($263|0);
 if($264){label=58;break;}else{label=183;break;}
 case 58: 
 $total=0;
 var $266=$2;
 var $267=(($266+128)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=$i;
 var $270=(($268+((($269)*(2096))&-1))|0);
 $c=$270;
 var $271=$2;
 var $272=_get_bits835($271,8);
 var $273=(($272)&255);
 $x=$273;
 var $274=$x;
 var $275=($274&255);
 var $276=($275|0)!=66;
 if($276){label=59;break;}else{label=60;break;}
 case 59: 
 var $278=$2;
 var $279=_error($278,20);
 $1=$279;
 label=353;break;
 case 60: 
 var $281=$2;
 var $282=_get_bits835($281,8);
 var $283=(($282)&255);
 $x=$283;
 var $284=$x;
 var $285=($284&255);
 var $286=($285|0)!=67;
 if($286){label=61;break;}else{label=62;break;}
 case 61: 
 var $288=$2;
 var $289=_error($288,20);
 $1=$289;
 label=353;break;
 case 62: 
 var $291=$2;
 var $292=_get_bits835($291,8);
 var $293=(($292)&255);
 $x=$293;
 var $294=$x;
 var $295=($294&255);
 var $296=($295|0)!=86;
 if($296){label=63;break;}else{label=64;break;}
 case 63: 
 var $298=$2;
 var $299=_error($298,20);
 $1=$299;
 label=353;break;
 case 64: 
 var $301=$2;
 var $302=_get_bits835($301,8);
 var $303=(($302)&255);
 $x=$303;
 var $304=$2;
 var $305=_get_bits835($304,8);
 var $306=$305<<8;
 var $307=$x;
 var $308=($307&255);
 var $309=((($306)+($308))|0);
 var $310=$c;
 var $311=(($310)|0);
 HEAP32[(($311)>>2)]=$309;
 var $312=$2;
 var $313=_get_bits835($312,8);
 var $314=(($313)&255);
 $x=$314;
 var $315=$2;
 var $316=_get_bits835($315,8);
 var $317=(($316)&255);
 $y=$317;
 var $318=$2;
 var $319=_get_bits835($318,8);
 var $320=$319<<16;
 var $321=$y;
 var $322=($321&255);
 var $323=$322<<8;
 var $324=((($320)+($323))|0);
 var $325=$x;
 var $326=($325&255);
 var $327=((($324)+($326))|0);
 var $328=$c;
 var $329=(($328+4)|0);
 HEAP32[(($329)>>2)]=$327;
 var $330=$2;
 var $331=_get_bits835($330,1);
 $ordered=$331;
 var $332=$ordered;
 var $333=($332|0)!=0;
 if($333){label=65;break;}else{label=66;break;}
 case 65: 
 var $339=0;label=67;break;
 case 66: 
 var $336=$2;
 var $337=_get_bits835($336,1);
 var $339=$337;label=67;break;
 case 67: 
 var $339;
 var $340=(($339)&255);
 var $341=$c;
 var $342=(($341+23)|0);
 HEAP8[($342)]=$340;
 var $343=$c;
 var $344=(($343+23)|0);
 var $345=HEAP8[($344)];
 var $346=(($345<<24)>>24)!=0;
 if($346){label=68;break;}else{label=69;break;}
 case 68: 
 var $348=$2;
 var $349=$c;
 var $350=(($349+4)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=_setup_temp_malloc($348,$351);
 $lengths=$352;
 label=70;break;
 case 69: 
 var $354=$2;
 var $355=$c;
 var $356=(($355+4)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=_setup_malloc($354,$357);
 var $359=$c;
 var $360=(($359+8)|0);
 HEAP32[(($360)>>2)]=$358;
 $lengths=$358;
 label=70;break;
 case 70: 
 var $362=$lengths;
 var $363=($362|0)!=0;
 if($363){label=72;break;}else{label=71;break;}
 case 71: 
 var $365=$2;
 var $366=_error($365,3);
 $1=$366;
 label=353;break;
 case 72: 
 var $368=$ordered;
 var $369=($368|0)!=0;
 if($369){label=73;break;}else{label=79;break;}
 case 73: 
 $current_entry=0;
 var $371=$2;
 var $372=_get_bits835($371,5);
 var $373=((($372)+(1))|0);
 $current_length=$373;
 label=74;break;
 case 74: 
 var $375=$current_entry;
 var $376=$c;
 var $377=(($376+4)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=($375|0)<($378|0);
 if($379){label=75;break;}else{label=78;break;}
 case 75: 
 var $381=$c;
 var $382=(($381+4)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=$current_entry;
 var $385=((($383)-($384))|0);
 $limit=$385;
 var $386=$2;
 var $387=$limit;
 var $388=_ilog($387);
 var $389=_get_bits835($386,$388);
 $n=$389;
 var $390=$current_entry;
 var $391=$n;
 var $392=((($390)+($391))|0);
 var $393=$c;
 var $394=(($393+4)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=($392|0)>($395|0);
 if($396){label=76;break;}else{label=77;break;}
 case 76: 
 var $398=$2;
 var $399=_error($398,20);
 $1=$399;
 label=353;break;
 case 77: 
 var $401=$lengths;
 var $402=$current_entry;
 var $403=(($401+$402)|0);
 var $404=$current_length;
 var $405=(($404)&255);
 var $406=$n;
 _memset($403, $405, $406)|0;
 var $407=$n;
 var $408=$current_entry;
 var $409=((($408)+($407))|0);
 $current_entry=$409;
 var $410=$current_length;
 var $411=((($410)+(1))|0);
 $current_length=$411;
 label=74;break;
 case 78: 
 label=90;break;
 case 79: 
 $j=0;
 label=80;break;
 case 80: 
 var $415=$j;
 var $416=$c;
 var $417=(($416+4)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=($415|0)<($418|0);
 if($419){label=81;break;}else{label=89;break;}
 case 81: 
 var $421=$c;
 var $422=(($421+23)|0);
 var $423=HEAP8[($422)];
 var $424=($423&255);
 var $425=($424|0)!=0;
 if($425){label=82;break;}else{label=83;break;}
 case 82: 
 var $427=$2;
 var $428=_get_bits835($427,1);
 var $431=$428;label=84;break;
 case 83: 
 var $431=1;label=84;break;
 case 84: 
 var $431;
 $present=$431;
 var $432=$present;
 var $433=($432|0)!=0;
 if($433){label=85;break;}else{label=86;break;}
 case 85: 
 var $435=$2;
 var $436=_get_bits835($435,5);
 var $437=((($436)+(1))|0);
 var $438=(($437)&255);
 var $439=$j;
 var $440=$lengths;
 var $441=(($440+$439)|0);
 HEAP8[($441)]=$438;
 var $442=$total;
 var $443=((($442)+(1))|0);
 $total=$443;
 label=87;break;
 case 86: 
 var $445=$j;
 var $446=$lengths;
 var $447=(($446+$445)|0);
 HEAP8[($447)]=-1;
 label=87;break;
 case 87: 
 label=88;break;
 case 88: 
 var $450=$j;
 var $451=((($450)+(1))|0);
 $j=$451;
 label=80;break;
 case 89: 
 label=90;break;
 case 90: 
 var $454=$c;
 var $455=(($454+23)|0);
 var $456=HEAP8[($455)];
 var $457=($456&255);
 var $458=($457|0)!=0;
 if($458){label=91;break;}else{label=95;break;}
 case 91: 
 var $460=$total;
 var $461=$c;
 var $462=(($461+4)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=$463>>2;
 var $465=($460|0)>=($464|0);
 if($465){label=92;break;}else{label=95;break;}
 case 92: 
 var $467=$c;
 var $468=(($467+4)|0);
 var $469=HEAP32[(($468)>>2)];
 var $470=$2;
 var $471=(($470+16)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=($469|0)>($472|0);
 if($473){label=93;break;}else{label=94;break;}
 case 93: 
 var $475=$c;
 var $476=(($475+4)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=$2;
 var $479=(($478+16)|0);
 HEAP32[(($479)>>2)]=$477;
 label=94;break;
 case 94: 
 var $481=$2;
 var $482=$c;
 var $483=(($482+4)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=_setup_malloc($481,$484);
 var $486=$c;
 var $487=(($486+8)|0);
 HEAP32[(($487)>>2)]=$485;
 var $488=$c;
 var $489=(($488+8)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=$lengths;
 var $492=$c;
 var $493=(($492+4)|0);
 var $494=HEAP32[(($493)>>2)];
 assert($494 % 1 === 0);(_memcpy($490, $491, $494)|0);
 var $495=$2;
 var $496=$lengths;
 var $497=$c;
 var $498=(($497+4)|0);
 var $499=HEAP32[(($498)>>2)];
 _setup_temp_free($495,$496,$499);
 var $500=$c;
 var $501=(($500+8)|0);
 var $502=HEAP32[(($501)>>2)];
 $lengths=$502;
 var $503=$c;
 var $504=(($503+23)|0);
 HEAP8[($504)]=0;
 label=95;break;
 case 95: 
 var $506=$c;
 var $507=(($506+23)|0);
 var $508=HEAP8[($507)];
 var $509=(($508<<24)>>24)!=0;
 if($509){label=96;break;}else{label=97;break;}
 case 96: 
 var $511=$total;
 $sorted_count=$511;
 label=105;break;
 case 97: 
 $sorted_count=0;
 $j=0;
 label=98;break;
 case 98: 
 var $514=$j;
 var $515=$c;
 var $516=(($515+4)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=($514|0)<($517|0);
 if($518){label=99;break;}else{label=104;break;}
 case 99: 
 var $520=$j;
 var $521=$lengths;
 var $522=(($521+$520)|0);
 var $523=HEAP8[($522)];
 var $524=($523&255);
 var $525=($524|0)>10;
 if($525){label=100;break;}else{label=102;break;}
 case 100: 
 var $527=$j;
 var $528=$lengths;
 var $529=(($528+$527)|0);
 var $530=HEAP8[($529)];
 var $531=($530&255);
 var $532=($531|0)!=255;
 if($532){label=101;break;}else{label=102;break;}
 case 101: 
 var $534=$sorted_count;
 var $535=((($534)+(1))|0);
 $sorted_count=$535;
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 var $538=$j;
 var $539=((($538)+(1))|0);
 $j=$539;
 label=98;break;
 case 104: 
 label=105;break;
 case 105: 
 var $542=$sorted_count;
 var $543=$c;
 var $544=(($543+2092)|0);
 HEAP32[(($544)>>2)]=$542;
 $values=0;
 var $545=$c;
 var $546=(($545+23)|0);
 var $547=HEAP8[($546)];
 var $548=(($547<<24)>>24)!=0;
 if($548){label=109;break;}else{label=106;break;}
 case 106: 
 var $550=$2;
 var $551=$c;
 var $552=(($551+4)|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=($553<<2);
 var $555=_setup_malloc($550,$554);
 var $556=$555;
 var $557=$c;
 var $558=(($557+32)|0);
 HEAP32[(($558)>>2)]=$556;
 var $559=$c;
 var $560=(($559+32)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=($561|0)!=0;
 if($562){label=108;break;}else{label=107;break;}
 case 107: 
 var $564=$2;
 var $565=_error($564,3);
 $1=$565;
 label=353;break;
 case 108: 
 label=120;break;
 case 109: 
 var $568=$c;
 var $569=(($568+2092)|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=($570|0)!=0;
 if($571){label=110;break;}else{label=117;break;}
 case 110: 
 var $573=$2;
 var $574=$c;
 var $575=(($574+2092)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=_setup_malloc($573,$576);
 var $578=$c;
 var $579=(($578+8)|0);
 HEAP32[(($579)>>2)]=$577;
 var $580=$c;
 var $581=(($580+8)|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=($582|0)!=0;
 if($583){label=112;break;}else{label=111;break;}
 case 111: 
 var $585=$2;
 var $586=_error($585,3);
 $1=$586;
 label=353;break;
 case 112: 
 var $588=$2;
 var $589=$c;
 var $590=(($589+2092)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=($591<<2);
 var $593=_setup_temp_malloc($588,$592);
 var $594=$593;
 var $595=$c;
 var $596=(($595+32)|0);
 HEAP32[(($596)>>2)]=$594;
 var $597=$c;
 var $598=(($597+32)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=($599|0)!=0;
 if($600){label=114;break;}else{label=113;break;}
 case 113: 
 var $602=$2;
 var $603=_error($602,3);
 $1=$603;
 label=353;break;
 case 114: 
 var $605=$2;
 var $606=$c;
 var $607=(($606+2092)|0);
 var $608=HEAP32[(($607)>>2)];
 var $609=($608<<2);
 var $610=_setup_temp_malloc($605,$609);
 var $611=$610;
 $values=$611;
 var $612=$values;
 var $613=($612|0)!=0;
 if($613){label=116;break;}else{label=115;break;}
 case 115: 
 var $615=$2;
 var $616=_error($615,3);
 $1=$616;
 label=353;break;
 case 116: 
 label=117;break;
 case 117: 
 var $619=$c;
 var $620=(($619+4)|0);
 var $621=HEAP32[(($620)>>2)];
 var $622=$c;
 var $623=(($622+2092)|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=($624<<3);
 var $626=((($621)+($625))|0);
 $size=$626;
 var $627=$size;
 var $628=$2;
 var $629=(($628+16)|0);
 var $630=HEAP32[(($629)>>2)];
 var $631=($627>>>0)>($630>>>0);
 if($631){label=118;break;}else{label=119;break;}
 case 118: 
 var $633=$size;
 var $634=$2;
 var $635=(($634+16)|0);
 HEAP32[(($635)>>2)]=$633;
 label=119;break;
 case 119: 
 label=120;break;
 case 120: 
 var $638=$c;
 var $639=$lengths;
 var $640=$c;
 var $641=(($640+4)|0);
 var $642=HEAP32[(($641)>>2)];
 var $643=$values;
 var $644=_compute_codewords($638,$639,$642,$643);
 var $645=($644|0)!=0;
 if($645){label=124;break;}else{label=121;break;}
 case 121: 
 var $647=$c;
 var $648=(($647+23)|0);
 var $649=HEAP8[($648)];
 var $650=(($649<<24)>>24)!=0;
 if($650){label=122;break;}else{label=123;break;}
 case 122: 
 var $652=$2;
 var $653=$values;
 var $654=$653;
 _setup_temp_free($652,$654,0);
 label=123;break;
 case 123: 
 var $656=$2;
 var $657=_error($656,20);
 $1=$657;
 label=353;break;
 case 124: 
 var $659=$c;
 var $660=(($659+2092)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=($661|0)!=0;
 if($662){label=125;break;}else{label=128;break;}
 case 125: 
 var $664=$2;
 var $665=$c;
 var $666=(($665+2092)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=((($667)+(1))|0);
 var $669=($668<<2);
 var $670=_setup_malloc($664,$669);
 var $671=$670;
 var $672=$c;
 var $673=(($672+2084)|0);
 HEAP32[(($673)>>2)]=$671;
 var $674=$2;
 var $675=$c;
 var $676=(($675+2092)|0);
 var $677=HEAP32[(($676)>>2)];
 var $678=((($677)+(1))|0);
 var $679=($678<<2);
 var $680=_setup_malloc($674,$679);
 var $681=$680;
 var $682=$c;
 var $683=(($682+2088)|0);
 HEAP32[(($683)>>2)]=$681;
 var $684=$c;
 var $685=(($684+2088)|0);
 var $686=HEAP32[(($685)>>2)];
 var $687=($686|0)!=0;
 if($687){label=126;break;}else{label=127;break;}
 case 126: 
 var $689=$c;
 var $690=(($689+2088)|0);
 var $691=HEAP32[(($690)>>2)];
 var $692=(($691+4)|0);
 HEAP32[(($690)>>2)]=$692;
 var $693=$c;
 var $694=(($693+2088)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=((($695)-(4))|0);
 HEAP32[(($696)>>2)]=-1;
 label=127;break;
 case 127: 
 var $698=$c;
 var $699=$lengths;
 var $700=$values;
 _compute_sorted_huffman($698,$699,$700);
 label=128;break;
 case 128: 
 var $702=$c;
 var $703=(($702+23)|0);
 var $704=HEAP8[($703)];
 var $705=(($704<<24)>>24)!=0;
 if($705){label=129;break;}else{label=130;break;}
 case 129: 
 var $707=$2;
 var $708=$values;
 var $709=$708;
 var $710=$c;
 var $711=(($710+2092)|0);
 var $712=HEAP32[(($711)>>2)];
 var $713=($712<<2);
 _setup_temp_free($707,$709,$713);
 var $714=$2;
 var $715=$c;
 var $716=(($715+32)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=$717;
 var $719=$c;
 var $720=(($719+2092)|0);
 var $721=HEAP32[(($720)>>2)];
 var $722=($721<<2);
 _setup_temp_free($714,$718,$722);
 var $723=$2;
 var $724=$lengths;
 var $725=$c;
 var $726=(($725+4)|0);
 var $727=HEAP32[(($726)>>2)];
 _setup_temp_free($723,$724,$727);
 var $728=$c;
 var $729=(($728+32)|0);
 HEAP32[(($729)>>2)]=0;
 label=130;break;
 case 130: 
 var $731=$c;
 _compute_accelerated_huffman($731);
 var $732=$2;
 var $733=_get_bits835($732,4);
 var $734=(($733)&255);
 var $735=$c;
 var $736=(($735+21)|0);
 HEAP8[($736)]=$734;
 var $737=$c;
 var $738=(($737+21)|0);
 var $739=HEAP8[($738)];
 var $740=($739&255);
 var $741=($740|0)>2;
 if($741){label=131;break;}else{label=132;break;}
 case 131: 
 var $743=$2;
 var $744=_error($743,20);
 $1=$744;
 label=353;break;
 case 132: 
 var $746=$c;
 var $747=(($746+21)|0);
 var $748=HEAP8[($747)];
 var $749=($748&255);
 var $750=($749|0)>0;
 if($750){label=133;break;}else{label=181;break;}
 case 133: 
 var $752=$2;
 var $753=_get_bits835($752,32);
 var $754=_float32_unpack($753);
 var $755=$c;
 var $756=(($755+12)|0);
 HEAPF32[(($756)>>2)]=$754;
 var $757=$2;
 var $758=_get_bits835($757,32);
 var $759=_float32_unpack($758);
 var $760=$c;
 var $761=(($760+16)|0);
 HEAPF32[(($761)>>2)]=$759;
 var $762=$2;
 var $763=_get_bits835($762,4);
 var $764=((($763)+(1))|0);
 var $765=(($764)&255);
 var $766=$c;
 var $767=(($766+20)|0);
 HEAP8[($767)]=$765;
 var $768=$2;
 var $769=_get_bits835($768,1);
 var $770=(($769)&255);
 var $771=$c;
 var $772=(($771+22)|0);
 HEAP8[($772)]=$770;
 var $773=$c;
 var $774=(($773+21)|0);
 var $775=HEAP8[($774)];
 var $776=($775&255);
 var $777=($776|0)==1;
 if($777){label=134;break;}else{label=135;break;}
 case 134: 
 var $779=$c;
 var $780=(($779+4)|0);
 var $781=HEAP32[(($780)>>2)];
 var $782=$c;
 var $783=(($782)|0);
 var $784=HEAP32[(($783)>>2)];
 var $785=_lookup1_values($781,$784);
 var $786=$c;
 var $787=(($786+24)|0);
 HEAP32[(($787)>>2)]=$785;
 label=136;break;
 case 135: 
 var $789=$c;
 var $790=(($789+4)|0);
 var $791=HEAP32[(($790)>>2)];
 var $792=$c;
 var $793=(($792)|0);
 var $794=HEAP32[(($793)>>2)];
 var $795=(Math_imul($791,$794)|0);
 var $796=$c;
 var $797=(($796+24)|0);
 HEAP32[(($797)>>2)]=$795;
 label=136;break;
 case 136: 
 var $799=$2;
 var $800=$c;
 var $801=(($800+24)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=($802<<1);
 var $804=_setup_temp_malloc($799,$803);
 var $805=$804;
 $mults=$805;
 var $806=$mults;
 var $807=($806|0)==0;
 if($807){label=137;break;}else{label=138;break;}
 case 137: 
 var $809=$2;
 var $810=_error($809,3);
 $1=$810;
 label=353;break;
 case 138: 
 $j=0;
 label=139;break;
 case 139: 
 var $813=$j;
 var $814=$c;
 var $815=(($814+24)|0);
 var $816=HEAP32[(($815)>>2)];
 var $817=($813|0)<($816|0);
 if($817){label=140;break;}else{label=144;break;}
 case 140: 
 var $819=$2;
 var $820=$c;
 var $821=(($820+20)|0);
 var $822=HEAP8[($821)];
 var $823=($822&255);
 var $824=_get_bits835($819,$823);
 $q=$824;
 var $825=$q;
 var $826=($825|0)==-1;
 if($826){label=141;break;}else{label=142;break;}
 case 141: 
 var $828=$2;
 var $829=$mults;
 var $830=$829;
 var $831=$c;
 var $832=(($831+24)|0);
 var $833=HEAP32[(($832)>>2)];
 var $834=($833<<1);
 _setup_temp_free($828,$830,$834);
 var $835=$2;
 var $836=_error($835,20);
 $1=$836;
 label=353;break;
 case 142: 
 var $838=$q;
 var $839=(($838)&65535);
 var $840=$j;
 var $841=$mults;
 var $842=(($841+($840<<1))|0);
 HEAP16[(($842)>>1)]=$839;
 label=143;break;
 case 143: 
 var $844=$j;
 var $845=((($844)+(1))|0);
 $j=$845;
 label=139;break;
 case 144: 
 var $847=$c;
 var $848=(($847+21)|0);
 var $849=HEAP8[($848)];
 var $850=($849&255);
 var $851=($850|0)==1;
 if($851){label=145;break;}else{label=167;break;}
 case 145: 
 var $853=$c;
 var $854=(($853+23)|0);
 var $855=HEAP8[($854)];
 var $856=($855&255);
 $sparse=$856;
 var $857=$sparse;
 var $858=($857|0)!=0;
 if($858){label=146;break;}else{label=149;break;}
 case 146: 
 var $860=$c;
 var $861=(($860+2092)|0);
 var $862=HEAP32[(($861)>>2)];
 var $863=($862|0)==0;
 if($863){label=147;break;}else{label=148;break;}
 case 147: 
 label=173;break;
 case 148: 
 var $866=$2;
 var $867=$c;
 var $868=(($867+2092)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=($869<<2);
 var $871=$c;
 var $872=(($871)|0);
 var $873=HEAP32[(($872)>>2)];
 var $874=(Math_imul($870,$873)|0);
 var $875=_setup_malloc($866,$874);
 var $876=$875;
 var $877=$c;
 var $878=(($877+28)|0);
 HEAP32[(($878)>>2)]=$876;
 label=150;break;
 case 149: 
 var $880=$2;
 var $881=$c;
 var $882=(($881+4)|0);
 var $883=HEAP32[(($882)>>2)];
 var $884=($883<<2);
 var $885=$c;
 var $886=(($885)|0);
 var $887=HEAP32[(($886)>>2)];
 var $888=(Math_imul($884,$887)|0);
 var $889=_setup_malloc($880,$888);
 var $890=$889;
 var $891=$c;
 var $892=(($891+28)|0);
 HEAP32[(($892)>>2)]=$890;
 label=150;break;
 case 150: 
 var $894=$c;
 var $895=(($894+28)|0);
 var $896=HEAP32[(($895)>>2)];
 var $897=($896|0)==0;
 if($897){label=151;break;}else{label=152;break;}
 case 151: 
 var $899=$2;
 var $900=$mults;
 var $901=$900;
 var $902=$c;
 var $903=(($902+24)|0);
 var $904=HEAP32[(($903)>>2)];
 var $905=($904<<1);
 _setup_temp_free($899,$901,$905);
 var $906=$2;
 var $907=_error($906,3);
 $1=$907;
 label=353;break;
 case 152: 
 var $909=$sparse;
 var $910=($909|0)!=0;
 if($910){label=153;break;}else{label=154;break;}
 case 153: 
 var $912=$c;
 var $913=(($912+2092)|0);
 var $914=HEAP32[(($913)>>2)];
 var $920=$914;label=155;break;
 case 154: 
 var $916=$c;
 var $917=(($916+4)|0);
 var $918=HEAP32[(($917)>>2)];
 var $920=$918;label=155;break;
 case 155: 
 var $920;
 $len1=$920;
 $j=0;
 label=156;break;
 case 156: 
 var $922=$j;
 var $923=$len1;
 var $924=($922|0)<($923|0);
 if($924){label=157;break;}else{label=166;break;}
 case 157: 
 var $926=$sparse;
 var $927=($926|0)!=0;
 if($927){label=158;break;}else{label=159;break;}
 case 158: 
 var $929=$j;
 var $930=$c;
 var $931=(($930+2088)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=(($932+($929<<2))|0);
 var $934=HEAP32[(($933)>>2)];
 var $938=$934;label=160;break;
 case 159: 
 var $936=$j;
 var $938=$936;label=160;break;
 case 160: 
 var $938;
 $z=$938;
 $div=1;
 $k=0;
 label=161;break;
 case 161: 
 var $940=$k;
 var $941=$c;
 var $942=(($941)|0);
 var $943=HEAP32[(($942)>>2)];
 var $944=($940|0)<($943|0);
 if($944){label=162;break;}else{label=164;break;}
 case 162: 
 var $946=$z;
 var $947=$div;
 var $948=(((($946|0))/(($947|0)))&-1);
 var $949=$c;
 var $950=(($949+24)|0);
 var $951=HEAP32[(($950)>>2)];
 var $952=(((($948>>>0))%(($951>>>0)))&-1);
 $off=$952;
 var $953=$off;
 var $954=$mults;
 var $955=(($954+($953<<1))|0);
 var $956=HEAP16[(($955)>>1)];
 var $957=($956&65535);
 var $958=($957|0);
 var $959=$c;
 var $960=(($959+16)|0);
 var $961=HEAPF32[(($960)>>2)];
 var $962=($958)*($961);
 var $963=$c;
 var $964=(($963+12)|0);
 var $965=HEAPF32[(($964)>>2)];
 var $966=($962)+($965);
 var $967=$j;
 var $968=$c;
 var $969=(($968)|0);
 var $970=HEAP32[(($969)>>2)];
 var $971=(Math_imul($967,$970)|0);
 var $972=$k;
 var $973=((($971)+($972))|0);
 var $974=$c;
 var $975=(($974+28)|0);
 var $976=HEAP32[(($975)>>2)];
 var $977=(($976+($973<<2))|0);
 HEAPF32[(($977)>>2)]=$966;
 var $978=$c;
 var $979=(($978+24)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=$div;
 var $982=(Math_imul($981,$980)|0);
 $div=$982;
 label=163;break;
 case 163: 
 var $984=$k;
 var $985=((($984)+(1))|0);
 $k=$985;
 label=161;break;
 case 164: 
 label=165;break;
 case 165: 
 var $988=$j;
 var $989=((($988)+(1))|0);
 $j=$989;
 label=156;break;
 case 166: 
 var $991=$2;
 var $992=$mults;
 var $993=$992;
 var $994=$c;
 var $995=(($994+24)|0);
 var $996=HEAP32[(($995)>>2)];
 var $997=($996<<1);
 _setup_temp_free($991,$993,$997);
 var $998=$c;
 var $999=(($998+21)|0);
 HEAP8[($999)]=2;
 label=172;break;
 case 167: 
 var $1001=$2;
 var $1002=$c;
 var $1003=(($1002+24)|0);
 var $1004=HEAP32[(($1003)>>2)];
 var $1005=($1004<<2);
 var $1006=_setup_malloc($1001,$1005);
 var $1007=$1006;
 var $1008=$c;
 var $1009=(($1008+28)|0);
 HEAP32[(($1009)>>2)]=$1007;
 $j=0;
 label=168;break;
 case 168: 
 var $1011=$j;
 var $1012=$c;
 var $1013=(($1012+24)|0);
 var $1014=HEAP32[(($1013)>>2)];
 var $1015=($1011|0)<($1014|0);
 if($1015){label=169;break;}else{label=171;break;}
 case 169: 
 var $1017=$j;
 var $1018=$mults;
 var $1019=(($1018+($1017<<1))|0);
 var $1020=HEAP16[(($1019)>>1)];
 var $1021=($1020&65535);
 var $1022=($1021|0);
 var $1023=$c;
 var $1024=(($1023+16)|0);
 var $1025=HEAPF32[(($1024)>>2)];
 var $1026=($1022)*($1025);
 var $1027=$c;
 var $1028=(($1027+12)|0);
 var $1029=HEAPF32[(($1028)>>2)];
 var $1030=($1026)+($1029);
 var $1031=$j;
 var $1032=$c;
 var $1033=(($1032+28)|0);
 var $1034=HEAP32[(($1033)>>2)];
 var $1035=(($1034+($1031<<2))|0);
 HEAPF32[(($1035)>>2)]=$1030;
 label=170;break;
 case 170: 
 var $1037=$j;
 var $1038=((($1037)+(1))|0);
 $j=$1038;
 label=168;break;
 case 171: 
 var $1040=$2;
 var $1041=$mults;
 var $1042=$1041;
 var $1043=$c;
 var $1044=(($1043+24)|0);
 var $1045=HEAP32[(($1044)>>2)];
 var $1046=($1045<<1);
 _setup_temp_free($1040,$1042,$1046);
 label=172;break;
 case 172: 
 label=173;break;
 case 173: 
 var $1049=$c;
 var $1050=(($1049+21)|0);
 var $1051=HEAP8[($1050)];
 var $1052=($1051&255);
 var $1053=($1052|0)==2;
 if($1053){label=174;break;}else{label=180;break;}
 case 174: 
 var $1055=$c;
 var $1056=(($1055+22)|0);
 var $1057=HEAP8[($1056)];
 var $1058=($1057&255);
 var $1059=($1058|0)!=0;
 if($1059){label=175;break;}else{label=180;break;}
 case 175: 
 $j=1;
 label=176;break;
 case 176: 
 var $1062=$j;
 var $1063=$c;
 var $1064=(($1063+24)|0);
 var $1065=HEAP32[(($1064)>>2)];
 var $1066=($1062|0)<($1065|0);
 if($1066){label=177;break;}else{label=179;break;}
 case 177: 
 var $1068=$j;
 var $1069=((($1068)-(1))|0);
 var $1070=$c;
 var $1071=(($1070+28)|0);
 var $1072=HEAP32[(($1071)>>2)];
 var $1073=(($1072+($1069<<2))|0);
 var $1074=HEAPF32[(($1073)>>2)];
 var $1075=$j;
 var $1076=$c;
 var $1077=(($1076+28)|0);
 var $1078=HEAP32[(($1077)>>2)];
 var $1079=(($1078+($1075<<2))|0);
 HEAPF32[(($1079)>>2)]=$1074;
 label=178;break;
 case 178: 
 var $1081=$j;
 var $1082=((($1081)+(1))|0);
 $j=$1082;
 label=176;break;
 case 179: 
 var $1084=$c;
 var $1085=(($1084+22)|0);
 HEAP8[($1085)]=0;
 label=180;break;
 case 180: 
 label=181;break;
 case 181: 
 label=182;break;
 case 182: 
 var $1089=$i;
 var $1090=((($1089)+(1))|0);
 $i=$1090;
 label=57;break;
 case 183: 
 var $1092=$2;
 var $1093=_get_bits835($1092,6);
 var $1094=((($1093)+(1))|0);
 var $1095=(($1094)&255);
 $x=$1095;
 $i=0;
 label=184;break;
 case 184: 
 var $1097=$i;
 var $1098=$x;
 var $1099=($1098&255);
 var $1100=($1097|0)<($1099|0);
 if($1100){label=185;break;}else{label=189;break;}
 case 185: 
 var $1102=$2;
 var $1103=_get_bits835($1102,16);
 $z2=$1103;
 var $1104=$z2;
 var $1105=($1104|0)!=0;
 if($1105){label=186;break;}else{label=187;break;}
 case 186: 
 var $1107=$2;
 var $1108=_error($1107,20);
 $1=$1108;
 label=353;break;
 case 187: 
 label=188;break;
 case 188: 
 var $1111=$i;
 var $1112=((($1111)+(1))|0);
 $i=$1112;
 label=184;break;
 case 189: 
 var $1114=$2;
 var $1115=_get_bits835($1114,6);
 var $1116=((($1115)+(1))|0);
 var $1117=$2;
 var $1118=(($1117+132)|0);
 HEAP32[(($1118)>>2)]=$1116;
 var $1119=$2;
 var $1120=$2;
 var $1121=(($1120+132)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=((($1122)*(1596))&-1);
 var $1124=_setup_malloc($1119,$1123);
 var $1125=$1124;
 var $1126=$2;
 var $1127=(($1126+264)|0);
 HEAP32[(($1127)>>2)]=$1125;
 $i=0;
 label=190;break;
 case 190: 
 var $1129=$i;
 var $1130=$2;
 var $1131=(($1130+132)|0);
 var $1132=HEAP32[(($1131)>>2)];
 var $1133=($1129|0)<($1132|0);
 if($1133){label=191;break;}else{label=244;break;}
 case 191: 
 var $1135=$2;
 var $1136=_get_bits835($1135,16);
 var $1137=(($1136)&65535);
 var $1138=$i;
 var $1139=$2;
 var $1140=(($1139+136)|0);
 var $1141=(($1140+($1138<<1))|0);
 HEAP16[(($1141)>>1)]=$1137;
 var $1142=$i;
 var $1143=$2;
 var $1144=(($1143+136)|0);
 var $1145=(($1144+($1142<<1))|0);
 var $1146=HEAP16[(($1145)>>1)];
 var $1147=($1146&65535);
 var $1148=($1147|0)>1;
 if($1148){label=192;break;}else{label=193;break;}
 case 192: 
 var $1150=$2;
 var $1151=_error($1150,20);
 $1=$1151;
 label=353;break;
 case 193: 
 var $1153=$i;
 var $1154=$2;
 var $1155=(($1154+136)|0);
 var $1156=(($1155+($1153<<1))|0);
 var $1157=HEAP16[(($1156)>>1)];
 var $1158=($1157&65535);
 var $1159=($1158|0)==0;
 if($1159){label=194;break;}else{label=199;break;}
 case 194: 
 var $1161=$i;
 var $1162=$2;
 var $1163=(($1162+264)|0);
 var $1164=HEAP32[(($1163)>>2)];
 var $1165=(($1164+((($1161)*(1596))&-1))|0);
 var $1166=$1165;
 $g=$1166;
 var $1167=$2;
 var $1168=_get_bits835($1167,8);
 var $1169=(($1168)&255);
 var $1170=$g;
 var $1171=(($1170)|0);
 HEAP8[($1171)]=$1169;
 var $1172=$2;
 var $1173=_get_bits835($1172,16);
 var $1174=(($1173)&65535);
 var $1175=$g;
 var $1176=(($1175+2)|0);
 HEAP16[(($1176)>>1)]=$1174;
 var $1177=$2;
 var $1178=_get_bits835($1177,16);
 var $1179=(($1178)&65535);
 var $1180=$g;
 var $1181=(($1180+4)|0);
 HEAP16[(($1181)>>1)]=$1179;
 var $1182=$2;
 var $1183=_get_bits835($1182,6);
 var $1184=(($1183)&255);
 var $1185=$g;
 var $1186=(($1185+6)|0);
 HEAP8[($1186)]=$1184;
 var $1187=$2;
 var $1188=_get_bits835($1187,8);
 var $1189=(($1188)&255);
 var $1190=$g;
 var $1191=(($1190+7)|0);
 HEAP8[($1191)]=$1189;
 var $1192=$2;
 var $1193=_get_bits835($1192,4);
 var $1194=((($1193)+(1))|0);
 var $1195=(($1194)&255);
 var $1196=$g;
 var $1197=(($1196+8)|0);
 HEAP8[($1197)]=$1195;
 $j=0;
 label=195;break;
 case 195: 
 var $1199=$j;
 var $1200=$g;
 var $1201=(($1200+8)|0);
 var $1202=HEAP8[($1201)];
 var $1203=($1202&255);
 var $1204=($1199|0)<($1203|0);
 if($1204){label=196;break;}else{label=198;break;}
 case 196: 
 var $1206=$2;
 var $1207=_get_bits835($1206,8);
 var $1208=(($1207)&255);
 var $1209=$j;
 var $1210=$g;
 var $1211=(($1210+9)|0);
 var $1212=(($1211+$1209)|0);
 HEAP8[($1212)]=$1208;
 label=197;break;
 case 197: 
 var $1214=$j;
 var $1215=((($1214)+(1))|0);
 $j=$1215;
 label=195;break;
 case 198: 
 var $1217=$2;
 var $1218=_error($1217,4);
 $1=$1218;
 label=353;break;
 case 199: 
 var $1220=$i;
 var $1221=$2;
 var $1222=(($1221+264)|0);
 var $1223=HEAP32[(($1222)>>2)];
 var $1224=(($1223+((($1220)*(1596))&-1))|0);
 var $1225=$1224;
 $g3=$1225;
 $max_class=-1;
 var $1226=$2;
 var $1227=_get_bits835($1226,5);
 var $1228=(($1227)&255);
 var $1229=$g3;
 var $1230=(($1229)|0);
 HEAP8[($1230)]=$1228;
 $j=0;
 label=200;break;
 case 200: 
 var $1232=$j;
 var $1233=$g3;
 var $1234=(($1233)|0);
 var $1235=HEAP8[($1234)];
 var $1236=($1235&255);
 var $1237=($1232|0)<($1236|0);
 if($1237){label=201;break;}else{label=205;break;}
 case 201: 
 var $1239=$2;
 var $1240=_get_bits835($1239,4);
 var $1241=(($1240)&255);
 var $1242=$j;
 var $1243=$g3;
 var $1244=(($1243+1)|0);
 var $1245=(($1244+$1242)|0);
 HEAP8[($1245)]=$1241;
 var $1246=$j;
 var $1247=$g3;
 var $1248=(($1247+1)|0);
 var $1249=(($1248+$1246)|0);
 var $1250=HEAP8[($1249)];
 var $1251=($1250&255);
 var $1252=$max_class;
 var $1253=($1251|0)>($1252|0);
 if($1253){label=202;break;}else{label=203;break;}
 case 202: 
 var $1255=$j;
 var $1256=$g3;
 var $1257=(($1256+1)|0);
 var $1258=(($1257+$1255)|0);
 var $1259=HEAP8[($1258)];
 var $1260=($1259&255);
 $max_class=$1260;
 label=203;break;
 case 203: 
 label=204;break;
 case 204: 
 var $1263=$j;
 var $1264=((($1263)+(1))|0);
 $j=$1264;
 label=200;break;
 case 205: 
 $j=0;
 label=206;break;
 case 206: 
 var $1267=$j;
 var $1268=$max_class;
 var $1269=($1267|0)<=($1268|0);
 if($1269){label=207;break;}else{label=219;break;}
 case 207: 
 var $1271=$2;
 var $1272=_get_bits835($1271,3);
 var $1273=((($1272)+(1))|0);
 var $1274=(($1273)&255);
 var $1275=$j;
 var $1276=$g3;
 var $1277=(($1276+33)|0);
 var $1278=(($1277+$1275)|0);
 HEAP8[($1278)]=$1274;
 var $1279=$2;
 var $1280=_get_bits835($1279,2);
 var $1281=(($1280)&255);
 var $1282=$j;
 var $1283=$g3;
 var $1284=(($1283+49)|0);
 var $1285=(($1284+$1282)|0);
 HEAP8[($1285)]=$1281;
 var $1286=$j;
 var $1287=$g3;
 var $1288=(($1287+49)|0);
 var $1289=(($1288+$1286)|0);
 var $1290=HEAP8[($1289)];
 var $1291=(($1290<<24)>>24)!=0;
 if($1291){label=208;break;}else{label=211;break;}
 case 208: 
 var $1293=$2;
 var $1294=_get_bits835($1293,8);
 var $1295=(($1294)&255);
 var $1296=$j;
 var $1297=$g3;
 var $1298=(($1297+65)|0);
 var $1299=(($1298+$1296)|0);
 HEAP8[($1299)]=$1295;
 var $1300=$j;
 var $1301=$g3;
 var $1302=(($1301+65)|0);
 var $1303=(($1302+$1300)|0);
 var $1304=HEAP8[($1303)];
 var $1305=($1304&255);
 var $1306=$2;
 var $1307=(($1306+124)|0);
 var $1308=HEAP32[(($1307)>>2)];
 var $1309=($1305|0)>=($1308|0);
 if($1309){label=209;break;}else{label=210;break;}
 case 209: 
 var $1311=$2;
 var $1312=_error($1311,20);
 $1=$1312;
 label=353;break;
 case 210: 
 label=211;break;
 case 211: 
 $k=0;
 label=212;break;
 case 212: 
 var $1316=$k;
 var $1317=$j;
 var $1318=$g3;
 var $1319=(($1318+49)|0);
 var $1320=(($1319+$1317)|0);
 var $1321=HEAP8[($1320)];
 var $1322=($1321&255);
 var $1323=1<<$1322;
 var $1324=($1316|0)<($1323|0);
 if($1324){label=213;break;}else{label=217;break;}
 case 213: 
 var $1326=$2;
 var $1327=_get_bits835($1326,8);
 var $1328=((($1327)-(1))|0);
 var $1329=(($1328)&65535);
 var $1330=$k;
 var $1331=$j;
 var $1332=$g3;
 var $1333=(($1332+82)|0);
 var $1334=(($1333+($1331<<4))|0);
 var $1335=(($1334+($1330<<1))|0);
 HEAP16[(($1335)>>1)]=$1329;
 var $1336=$k;
 var $1337=$j;
 var $1338=$g3;
 var $1339=(($1338+82)|0);
 var $1340=(($1339+($1337<<4))|0);
 var $1341=(($1340+($1336<<1))|0);
 var $1342=HEAP16[(($1341)>>1)];
 var $1343=(($1342<<16)>>16);
 var $1344=$2;
 var $1345=(($1344+124)|0);
 var $1346=HEAP32[(($1345)>>2)];
 var $1347=($1343|0)>=($1346|0);
 if($1347){label=214;break;}else{label=215;break;}
 case 214: 
 var $1349=$2;
 var $1350=_error($1349,20);
 $1=$1350;
 label=353;break;
 case 215: 
 label=216;break;
 case 216: 
 var $1353=$k;
 var $1354=((($1353)+(1))|0);
 $k=$1354;
 label=212;break;
 case 217: 
 label=218;break;
 case 218: 
 var $1357=$j;
 var $1358=((($1357)+(1))|0);
 $j=$1358;
 label=206;break;
 case 219: 
 var $1360=$2;
 var $1361=_get_bits835($1360,2);
 var $1362=((($1361)+(1))|0);
 var $1363=(($1362)&255);
 var $1364=$g3;
 var $1365=(($1364+1588)|0);
 HEAP8[($1365)]=$1363;
 var $1366=$2;
 var $1367=_get_bits835($1366,4);
 var $1368=(($1367)&255);
 var $1369=$g3;
 var $1370=(($1369+1589)|0);
 HEAP8[($1370)]=$1368;
 var $1371=$g3;
 var $1372=(($1371+338)|0);
 var $1373=(($1372)|0);
 HEAP16[(($1373)>>1)]=0;
 var $1374=$g3;
 var $1375=(($1374+1589)|0);
 var $1376=HEAP8[($1375)];
 var $1377=($1376&255);
 var $1378=1<<$1377;
 var $1379=(($1378)&65535);
 var $1380=$g3;
 var $1381=(($1380+338)|0);
 var $1382=(($1381+2)|0);
 HEAP16[(($1382)>>1)]=$1379;
 var $1383=$g3;
 var $1384=(($1383+1592)|0);
 HEAP32[(($1384)>>2)]=2;
 $j=0;
 label=220;break;
 case 220: 
 var $1386=$j;
 var $1387=$g3;
 var $1388=(($1387)|0);
 var $1389=HEAP8[($1388)];
 var $1390=($1389&255);
 var $1391=($1386|0)<($1390|0);
 if($1391){label=221;break;}else{label=227;break;}
 case 221: 
 var $1393=$j;
 var $1394=$g3;
 var $1395=(($1394+1)|0);
 var $1396=(($1395+$1393)|0);
 var $1397=HEAP8[($1396)];
 var $1398=($1397&255);
 $c4=$1398;
 $k=0;
 label=222;break;
 case 222: 
 var $1400=$k;
 var $1401=$c4;
 var $1402=$g3;
 var $1403=(($1402+33)|0);
 var $1404=(($1403+$1401)|0);
 var $1405=HEAP8[($1404)];
 var $1406=($1405&255);
 var $1407=($1400|0)<($1406|0);
 if($1407){label=223;break;}else{label=225;break;}
 case 223: 
 var $1409=$2;
 var $1410=$g3;
 var $1411=(($1410+1589)|0);
 var $1412=HEAP8[($1411)];
 var $1413=($1412&255);
 var $1414=_get_bits835($1409,$1413);
 var $1415=(($1414)&65535);
 var $1416=$g3;
 var $1417=(($1416+1592)|0);
 var $1418=HEAP32[(($1417)>>2)];
 var $1419=$g3;
 var $1420=(($1419+338)|0);
 var $1421=(($1420+($1418<<1))|0);
 HEAP16[(($1421)>>1)]=$1415;
 var $1422=$g3;
 var $1423=(($1422+1592)|0);
 var $1424=HEAP32[(($1423)>>2)];
 var $1425=((($1424)+(1))|0);
 HEAP32[(($1423)>>2)]=$1425;
 label=224;break;
 case 224: 
 var $1427=$k;
 var $1428=((($1427)+(1))|0);
 $k=$1428;
 label=222;break;
 case 225: 
 label=226;break;
 case 226: 
 var $1431=$j;
 var $1432=((($1431)+(1))|0);
 $j=$1432;
 label=220;break;
 case 227: 
 $j=0;
 label=228;break;
 case 228: 
 var $1435=$j;
 var $1436=$g3;
 var $1437=(($1436+1592)|0);
 var $1438=HEAP32[(($1437)>>2)];
 var $1439=($1435|0)<($1438|0);
 if($1439){label=229;break;}else{label=231;break;}
 case 229: 
 var $1441=$j;
 var $1442=$g3;
 var $1443=(($1442+338)|0);
 var $1444=(($1443+($1441<<1))|0);
 var $1445=HEAP16[(($1444)>>1)];
 var $1446=$j;
 var $1447=(($p+($1446<<2))|0);
 var $1448=(($1447)|0);
 HEAP16[(($1448)>>1)]=$1445;
 var $1449=$j;
 var $1450=(($1449)&65535);
 var $1451=$j;
 var $1452=(($p+($1451<<2))|0);
 var $1453=(($1452+2)|0);
 HEAP16[(($1453)>>1)]=$1450;
 label=230;break;
 case 230: 
 var $1455=$j;
 var $1456=((($1455)+(1))|0);
 $j=$1456;
 label=228;break;
 case 231: 
 var $1458=(($p)|0);
 var $1459=$1458;
 var $1460=$g3;
 var $1461=(($1460+1592)|0);
 var $1462=HEAP32[(($1461)>>2)];
 _qsort($1459,$1462,4,58);
 $j=0;
 label=232;break;
 case 232: 
 var $1464=$j;
 var $1465=$g3;
 var $1466=(($1465+1592)|0);
 var $1467=HEAP32[(($1466)>>2)];
 var $1468=($1464|0)<($1467|0);
 if($1468){label=233;break;}else{label=235;break;}
 case 233: 
 var $1470=$j;
 var $1471=(($p+($1470<<2))|0);
 var $1472=(($1471+2)|0);
 var $1473=HEAP16[(($1472)>>1)];
 var $1474=(($1473)&255);
 var $1475=$j;
 var $1476=$g3;
 var $1477=(($1476+838)|0);
 var $1478=(($1477+$1475)|0);
 HEAP8[($1478)]=$1474;
 label=234;break;
 case 234: 
 var $1480=$j;
 var $1481=((($1480)+(1))|0);
 $j=$1481;
 label=232;break;
 case 235: 
 $j=2;
 label=236;break;
 case 236: 
 var $1484=$j;
 var $1485=$g3;
 var $1486=(($1485+1592)|0);
 var $1487=HEAP32[(($1486)>>2)];
 var $1488=($1484|0)<($1487|0);
 if($1488){label=237;break;}else{label=239;break;}
 case 237: 
 HEAP32[(($low)>>2)]=0;
 HEAP32[(($hi)>>2)]=0;
 var $1490=$g3;
 var $1491=(($1490+338)|0);
 var $1492=(($1491)|0);
 var $1493=$j;
 _neighbors($1492,$1493,$low,$hi);
 var $1494=HEAP32[(($low)>>2)];
 var $1495=(($1494)&255);
 var $1496=$j;
 var $1497=$g3;
 var $1498=(($1497+1088)|0);
 var $1499=(($1498+($1496<<1))|0);
 var $1500=(($1499)|0);
 HEAP8[($1500)]=$1495;
 var $1501=HEAP32[(($hi)>>2)];
 var $1502=(($1501)&255);
 var $1503=$j;
 var $1504=$g3;
 var $1505=(($1504+1088)|0);
 var $1506=(($1505+($1503<<1))|0);
 var $1507=(($1506+1)|0);
 HEAP8[($1507)]=$1502;
 label=238;break;
 case 238: 
 var $1509=$j;
 var $1510=((($1509)+(1))|0);
 $j=$1510;
 label=236;break;
 case 239: 
 var $1512=$g3;
 var $1513=(($1512+1592)|0);
 var $1514=HEAP32[(($1513)>>2)];
 var $1515=$longest_floorlist;
 var $1516=($1514|0)>($1515|0);
 if($1516){label=240;break;}else{label=241;break;}
 case 240: 
 var $1518=$g3;
 var $1519=(($1518+1592)|0);
 var $1520=HEAP32[(($1519)>>2)];
 $longest_floorlist=$1520;
 label=241;break;
 case 241: 
 label=242;break;
 case 242: 
 label=243;break;
 case 243: 
 var $1524=$i;
 var $1525=((($1524)+(1))|0);
 $i=$1525;
 label=190;break;
 case 244: 
 var $1527=$2;
 var $1528=_get_bits835($1527,6);
 var $1529=((($1528)+(1))|0);
 var $1530=$2;
 var $1531=(($1530+268)|0);
 HEAP32[(($1531)>>2)]=$1529;
 var $1532=$2;
 var $1533=$2;
 var $1534=(($1533+268)|0);
 var $1535=HEAP32[(($1534)>>2)];
 var $1536=((($1535)*(24))&-1);
 var $1537=_setup_malloc($1532,$1536);
 var $1538=$1537;
 var $1539=$2;
 var $1540=(($1539+400)|0);
 HEAP32[(($1540)>>2)]=$1538;
 $i=0;
 label=245;break;
 case 245: 
 var $1542=$i;
 var $1543=$2;
 var $1544=(($1543+268)|0);
 var $1545=HEAP32[(($1544)>>2)];
 var $1546=($1542|0)<($1545|0);
 if($1546){label=246;break;}else{label=279;break;}
 case 246: 
 var $1548=$2;
 var $1549=(($1548+400)|0);
 var $1550=HEAP32[(($1549)>>2)];
 var $1551=$i;
 var $1552=(($1550+((($1551)*(24))&-1))|0);
 $r=$1552;
 var $1553=$2;
 var $1554=_get_bits835($1553,16);
 var $1555=(($1554)&65535);
 var $1556=$i;
 var $1557=$2;
 var $1558=(($1557+272)|0);
 var $1559=(($1558+($1556<<1))|0);
 HEAP16[(($1559)>>1)]=$1555;
 var $1560=$i;
 var $1561=$2;
 var $1562=(($1561+272)|0);
 var $1563=(($1562+($1560<<1))|0);
 var $1564=HEAP16[(($1563)>>1)];
 var $1565=($1564&65535);
 var $1566=($1565|0)>2;
 if($1566){label=247;break;}else{label=248;break;}
 case 247: 
 var $1568=$2;
 var $1569=_error($1568,20);
 $1=$1569;
 label=353;break;
 case 248: 
 var $1571=$2;
 var $1572=_get_bits835($1571,24);
 var $1573=$r;
 var $1574=(($1573)|0);
 HEAP32[(($1574)>>2)]=$1572;
 var $1575=$2;
 var $1576=_get_bits835($1575,24);
 var $1577=$r;
 var $1578=(($1577+4)|0);
 HEAP32[(($1578)>>2)]=$1576;
 var $1579=$2;
 var $1580=_get_bits835($1579,24);
 var $1581=((($1580)+(1))|0);
 var $1582=$r;
 var $1583=(($1582+8)|0);
 HEAP32[(($1583)>>2)]=$1581;
 var $1584=$2;
 var $1585=_get_bits835($1584,6);
 var $1586=((($1585)+(1))|0);
 var $1587=(($1586)&255);
 var $1588=$r;
 var $1589=(($1588+12)|0);
 HEAP8[($1589)]=$1587;
 var $1590=$2;
 var $1591=_get_bits835($1590,8);
 var $1592=(($1591)&255);
 var $1593=$r;
 var $1594=(($1593+13)|0);
 HEAP8[($1594)]=$1592;
 $j=0;
 label=249;break;
 case 249: 
 var $1596=$j;
 var $1597=$r;
 var $1598=(($1597+12)|0);
 var $1599=HEAP8[($1598)];
 var $1600=($1599&255);
 var $1601=($1596|0)<($1600|0);
 if($1601){label=250;break;}else{label=254;break;}
 case 250: 
 $high_bits=0;
 var $1603=$2;
 var $1604=_get_bits835($1603,3);
 var $1605=(($1604)&255);
 $low_bits=$1605;
 var $1606=$2;
 var $1607=_get_bits835($1606,1);
 var $1608=($1607|0)!=0;
 if($1608){label=251;break;}else{label=252;break;}
 case 251: 
 var $1610=$2;
 var $1611=_get_bits835($1610,5);
 var $1612=(($1611)&255);
 $high_bits=$1612;
 label=252;break;
 case 252: 
 var $1614=$high_bits;
 var $1615=($1614&255);
 var $1616=($1615<<3);
 var $1617=$low_bits;
 var $1618=($1617&255);
 var $1619=((($1616)+($1618))|0);
 var $1620=(($1619)&255);
 var $1621=$j;
 var $1622=(($residue_cascade+$1621)|0);
 HEAP8[($1622)]=$1620;
 label=253;break;
 case 253: 
 var $1624=$j;
 var $1625=((($1624)+(1))|0);
 $j=$1625;
 label=249;break;
 case 254: 
 var $1627=$2;
 var $1628=$r;
 var $1629=(($1628+12)|0);
 var $1630=HEAP8[($1629)];
 var $1631=($1630&255);
 var $1632=($1631<<4);
 var $1633=_setup_malloc($1627,$1632);
 var $1634=$1633;
 var $1635=$r;
 var $1636=(($1635+20)|0);
 HEAP32[(($1636)>>2)]=$1634;
 $j=0;
 label=255;break;
 case 255: 
 var $1638=$j;
 var $1639=$r;
 var $1640=(($1639+12)|0);
 var $1641=HEAP8[($1640)];
 var $1642=($1641&255);
 var $1643=($1638|0)<($1642|0);
 if($1643){label=256;break;}else{label=267;break;}
 case 256: 
 $k=0;
 label=257;break;
 case 257: 
 var $1646=$k;
 var $1647=($1646|0)<8;
 if($1647){label=258;break;}else{label=265;break;}
 case 258: 
 var $1649=$j;
 var $1650=(($residue_cascade+$1649)|0);
 var $1651=HEAP8[($1650)];
 var $1652=($1651&255);
 var $1653=$k;
 var $1654=1<<$1653;
 var $1655=$1652&$1654;
 var $1656=($1655|0)!=0;
 if($1656){label=259;break;}else{label=262;break;}
 case 259: 
 var $1658=$2;
 var $1659=_get_bits835($1658,8);
 var $1660=(($1659)&65535);
 var $1661=$k;
 var $1662=$j;
 var $1663=$r;
 var $1664=(($1663+20)|0);
 var $1665=HEAP32[(($1664)>>2)];
 var $1666=(($1665+($1662<<4))|0);
 var $1667=(($1666+($1661<<1))|0);
 HEAP16[(($1667)>>1)]=$1660;
 var $1668=$k;
 var $1669=$j;
 var $1670=$r;
 var $1671=(($1670+20)|0);
 var $1672=HEAP32[(($1671)>>2)];
 var $1673=(($1672+($1669<<4))|0);
 var $1674=(($1673+($1668<<1))|0);
 var $1675=HEAP16[(($1674)>>1)];
 var $1676=(($1675<<16)>>16);
 var $1677=$2;
 var $1678=(($1677+124)|0);
 var $1679=HEAP32[(($1678)>>2)];
 var $1680=($1676|0)>=($1679|0);
 if($1680){label=260;break;}else{label=261;break;}
 case 260: 
 var $1682=$2;
 var $1683=_error($1682,20);
 $1=$1683;
 label=353;break;
 case 261: 
 label=263;break;
 case 262: 
 var $1686=$k;
 var $1687=$j;
 var $1688=$r;
 var $1689=(($1688+20)|0);
 var $1690=HEAP32[(($1689)>>2)];
 var $1691=(($1690+($1687<<4))|0);
 var $1692=(($1691+($1686<<1))|0);
 HEAP16[(($1692)>>1)]=-1;
 label=263;break;
 case 263: 
 label=264;break;
 case 264: 
 var $1695=$k;
 var $1696=((($1695)+(1))|0);
 $k=$1696;
 label=257;break;
 case 265: 
 label=266;break;
 case 266: 
 var $1699=$j;
 var $1700=((($1699)+(1))|0);
 $j=$1700;
 label=255;break;
 case 267: 
 var $1702=$2;
 var $1703=$r;
 var $1704=(($1703+13)|0);
 var $1705=HEAP8[($1704)];
 var $1706=($1705&255);
 var $1707=$2;
 var $1708=(($1707+128)|0);
 var $1709=HEAP32[(($1708)>>2)];
 var $1710=(($1709+((($1706)*(2096))&-1))|0);
 var $1711=(($1710+4)|0);
 var $1712=HEAP32[(($1711)>>2)];
 var $1713=($1712<<2);
 var $1714=_setup_malloc($1702,$1713);
 var $1715=$1714;
 var $1716=$r;
 var $1717=(($1716+16)|0);
 HEAP32[(($1717)>>2)]=$1715;
 var $1718=$r;
 var $1719=(($1718+16)|0);
 var $1720=HEAP32[(($1719)>>2)];
 var $1721=($1720|0)!=0;
 if($1721){label=269;break;}else{label=268;break;}
 case 268: 
 var $1723=$2;
 var $1724=_error($1723,3);
 $1=$1724;
 label=353;break;
 case 269: 
 var $1726=$r;
 var $1727=(($1726+16)|0);
 var $1728=HEAP32[(($1727)>>2)];
 var $1729=$1728;
 var $1730=$r;
 var $1731=(($1730+13)|0);
 var $1732=HEAP8[($1731)];
 var $1733=($1732&255);
 var $1734=$2;
 var $1735=(($1734+128)|0);
 var $1736=HEAP32[(($1735)>>2)];
 var $1737=(($1736+((($1733)*(2096))&-1))|0);
 var $1738=(($1737+4)|0);
 var $1739=HEAP32[(($1738)>>2)];
 var $1740=($1739<<2);
 _memset($1729, 0, $1740)|0;
 $j=0;
 label=270;break;
 case 270: 
 var $1742=$j;
 var $1743=$r;
 var $1744=(($1743+13)|0);
 var $1745=HEAP8[($1744)];
 var $1746=($1745&255);
 var $1747=$2;
 var $1748=(($1747+128)|0);
 var $1749=HEAP32[(($1748)>>2)];
 var $1750=(($1749+((($1746)*(2096))&-1))|0);
 var $1751=(($1750+4)|0);
 var $1752=HEAP32[(($1751)>>2)];
 var $1753=($1742|0)<($1752|0);
 if($1753){label=271;break;}else{label=277;break;}
 case 271: 
 var $1755=$r;
 var $1756=(($1755+13)|0);
 var $1757=HEAP8[($1756)];
 var $1758=($1757&255);
 var $1759=$2;
 var $1760=(($1759+128)|0);
 var $1761=HEAP32[(($1760)>>2)];
 var $1762=(($1761+((($1758)*(2096))&-1))|0);
 var $1763=(($1762)|0);
 var $1764=HEAP32[(($1763)>>2)];
 $classwords=$1764;
 var $1765=$j;
 $temp=$1765;
 var $1766=$2;
 var $1767=$classwords;
 var $1768=$1767;
 var $1769=_setup_malloc($1766,$1768);
 var $1770=$j;
 var $1771=$r;
 var $1772=(($1771+16)|0);
 var $1773=HEAP32[(($1772)>>2)];
 var $1774=(($1773+($1770<<2))|0);
 HEAP32[(($1774)>>2)]=$1769;
 var $1775=$classwords;
 var $1776=((($1775)-(1))|0);
 $k=$1776;
 label=272;break;
 case 272: 
 var $1778=$k;
 var $1779=($1778|0)>=0;
 if($1779){label=273;break;}else{label=275;break;}
 case 273: 
 var $1781=$temp;
 var $1782=$r;
 var $1783=(($1782+12)|0);
 var $1784=HEAP8[($1783)];
 var $1785=($1784&255);
 var $1786=(((($1781|0))%(($1785|0)))&-1);
 var $1787=(($1786)&255);
 var $1788=$k;
 var $1789=$j;
 var $1790=$r;
 var $1791=(($1790+16)|0);
 var $1792=HEAP32[(($1791)>>2)];
 var $1793=(($1792+($1789<<2))|0);
 var $1794=HEAP32[(($1793)>>2)];
 var $1795=(($1794+$1788)|0);
 HEAP8[($1795)]=$1787;
 var $1796=$r;
 var $1797=(($1796+12)|0);
 var $1798=HEAP8[($1797)];
 var $1799=($1798&255);
 var $1800=$temp;
 var $1801=(((($1800|0))/(($1799|0)))&-1);
 $temp=$1801;
 label=274;break;
 case 274: 
 var $1803=$k;
 var $1804=((($1803)-(1))|0);
 $k=$1804;
 label=272;break;
 case 275: 
 label=276;break;
 case 276: 
 var $1807=$j;
 var $1808=((($1807)+(1))|0);
 $j=$1808;
 label=270;break;
 case 277: 
 label=278;break;
 case 278: 
 var $1811=$i;
 var $1812=((($1811)+(1))|0);
 $i=$1812;
 label=245;break;
 case 279: 
 var $1814=$2;
 var $1815=_get_bits835($1814,6);
 var $1816=((($1815)+(1))|0);
 var $1817=$2;
 var $1818=(($1817+404)|0);
 HEAP32[(($1818)>>2)]=$1816;
 var $1819=$2;
 var $1820=$2;
 var $1821=(($1820+404)|0);
 var $1822=HEAP32[(($1821)>>2)];
 var $1823=((($1822)*(40))&-1);
 var $1824=_setup_malloc($1819,$1823);
 var $1825=$1824;
 var $1826=$2;
 var $1827=(($1826+408)|0);
 HEAP32[(($1827)>>2)]=$1825;
 $i=0;
 label=280;break;
 case 280: 
 var $1829=$i;
 var $1830=$2;
 var $1831=(($1830+404)|0);
 var $1832=HEAP32[(($1831)>>2)];
 var $1833=($1829|0)<($1832|0);
 if($1833){label=281;break;}else{label=326;break;}
 case 281: 
 var $1835=$2;
 var $1836=(($1835+408)|0);
 var $1837=HEAP32[(($1836)>>2)];
 var $1838=$i;
 var $1839=(($1837+((($1838)*(40))&-1))|0);
 $m=$1839;
 var $1840=$2;
 var $1841=_get_bits835($1840,16);
 $mapping_type=$1841;
 var $1842=$mapping_type;
 var $1843=($1842|0)!=0;
 if($1843){label=282;break;}else{label=283;break;}
 case 282: 
 var $1845=$2;
 var $1846=_error($1845,20);
 $1=$1846;
 label=353;break;
 case 283: 
 var $1848=$2;
 var $1849=$2;
 var $1850=(($1849+4)|0);
 var $1851=HEAP32[(($1850)>>2)];
 var $1852=((($1851)*(3))&-1);
 var $1853=_setup_malloc($1848,$1852);
 var $1854=$1853;
 var $1855=$m;
 var $1856=(($1855+4)|0);
 HEAP32[(($1856)>>2)]=$1854;
 var $1857=$2;
 var $1858=_get_bits835($1857,1);
 var $1859=($1858|0)!=0;
 if($1859){label=284;break;}else{label=285;break;}
 case 284: 
 var $1861=$2;
 var $1862=_get_bits835($1861,4);
 var $1863=(($1862)&255);
 var $1864=$m;
 var $1865=(($1864+8)|0);
 HEAP8[($1865)]=$1863;
 label=286;break;
 case 285: 
 var $1867=$m;
 var $1868=(($1867+8)|0);
 HEAP8[($1868)]=1;
 label=286;break;
 case 286: 
 var $1870=$m;
 var $1871=(($1870+8)|0);
 var $1872=HEAP8[($1871)];
 var $1873=($1872&255);
 var $1874=$max_submaps;
 var $1875=($1873|0)>($1874|0);
 if($1875){label=287;break;}else{label=288;break;}
 case 287: 
 var $1877=$m;
 var $1878=(($1877+8)|0);
 var $1879=HEAP8[($1878)];
 var $1880=($1879&255);
 $max_submaps=$1880;
 label=288;break;
 case 288: 
 var $1882=$2;
 var $1883=_get_bits835($1882,1);
 var $1884=($1883|0)!=0;
 if($1884){label=289;break;}else{label=300;break;}
 case 289: 
 var $1886=$2;
 var $1887=_get_bits835($1886,8);
 var $1888=((($1887)+(1))|0);
 var $1889=(($1888)&65535);
 var $1890=$m;
 var $1891=(($1890)|0);
 HEAP16[(($1891)>>1)]=$1889;
 $k=0;
 label=290;break;
 case 290: 
 var $1893=$k;
 var $1894=$m;
 var $1895=(($1894)|0);
 var $1896=HEAP16[(($1895)>>1)];
 var $1897=($1896&65535);
 var $1898=($1893|0)<($1897|0);
 if($1898){label=291;break;}else{label=299;break;}
 case 291: 
 var $1900=$2;
 var $1901=$2;
 var $1902=(($1901+4)|0);
 var $1903=HEAP32[(($1902)>>2)];
 var $1904=_ilog($1903);
 var $1905=((($1904)-(1))|0);
 var $1906=_get_bits835($1900,$1905);
 var $1907=(($1906)&255);
 var $1908=$k;
 var $1909=$m;
 var $1910=(($1909+4)|0);
 var $1911=HEAP32[(($1910)>>2)];
 var $1912=(($1911+((($1908)*(3))&-1))|0);
 var $1913=(($1912)|0);
 HEAP8[($1913)]=$1907;
 var $1914=$2;
 var $1915=$2;
 var $1916=(($1915+4)|0);
 var $1917=HEAP32[(($1916)>>2)];
 var $1918=_ilog($1917);
 var $1919=((($1918)-(1))|0);
 var $1920=_get_bits835($1914,$1919);
 var $1921=(($1920)&255);
 var $1922=$k;
 var $1923=$m;
 var $1924=(($1923+4)|0);
 var $1925=HEAP32[(($1924)>>2)];
 var $1926=(($1925+((($1922)*(3))&-1))|0);
 var $1927=(($1926+1)|0);
 HEAP8[($1927)]=$1921;
 var $1928=$k;
 var $1929=$m;
 var $1930=(($1929+4)|0);
 var $1931=HEAP32[(($1930)>>2)];
 var $1932=(($1931+((($1928)*(3))&-1))|0);
 var $1933=(($1932)|0);
 var $1934=HEAP8[($1933)];
 var $1935=($1934&255);
 var $1936=$2;
 var $1937=(($1936+4)|0);
 var $1938=HEAP32[(($1937)>>2)];
 var $1939=($1935|0)>=($1938|0);
 if($1939){label=292;break;}else{label=293;break;}
 case 292: 
 var $1941=$2;
 var $1942=_error($1941,20);
 $1=$1942;
 label=353;break;
 case 293: 
 var $1944=$k;
 var $1945=$m;
 var $1946=(($1945+4)|0);
 var $1947=HEAP32[(($1946)>>2)];
 var $1948=(($1947+((($1944)*(3))&-1))|0);
 var $1949=(($1948+1)|0);
 var $1950=HEAP8[($1949)];
 var $1951=($1950&255);
 var $1952=$2;
 var $1953=(($1952+4)|0);
 var $1954=HEAP32[(($1953)>>2)];
 var $1955=($1951|0)>=($1954|0);
 if($1955){label=294;break;}else{label=295;break;}
 case 294: 
 var $1957=$2;
 var $1958=_error($1957,20);
 $1=$1958;
 label=353;break;
 case 295: 
 var $1960=$k;
 var $1961=$m;
 var $1962=(($1961+4)|0);
 var $1963=HEAP32[(($1962)>>2)];
 var $1964=(($1963+((($1960)*(3))&-1))|0);
 var $1965=(($1964)|0);
 var $1966=HEAP8[($1965)];
 var $1967=($1966&255);
 var $1968=$k;
 var $1969=$m;
 var $1970=(($1969+4)|0);
 var $1971=HEAP32[(($1970)>>2)];
 var $1972=(($1971+((($1968)*(3))&-1))|0);
 var $1973=(($1972+1)|0);
 var $1974=HEAP8[($1973)];
 var $1975=($1974&255);
 var $1976=($1967|0)==($1975|0);
 if($1976){label=296;break;}else{label=297;break;}
 case 296: 
 var $1978=$2;
 var $1979=_error($1978,20);
 $1=$1979;
 label=353;break;
 case 297: 
 label=298;break;
 case 298: 
 var $1982=$k;
 var $1983=((($1982)+(1))|0);
 $k=$1983;
 label=290;break;
 case 299: 
 label=301;break;
 case 300: 
 var $1986=$m;
 var $1987=(($1986)|0);
 HEAP16[(($1987)>>1)]=0;
 label=301;break;
 case 301: 
 var $1989=$2;
 var $1990=_get_bits835($1989,2);
 var $1991=($1990|0)!=0;
 if($1991){label=302;break;}else{label=303;break;}
 case 302: 
 var $1993=$2;
 var $1994=_error($1993,20);
 $1=$1994;
 label=353;break;
 case 303: 
 var $1996=$m;
 var $1997=(($1996+8)|0);
 var $1998=HEAP8[($1997)];
 var $1999=($1998&255);
 var $2000=($1999|0)>1;
 if($2000){label=304;break;}else{label=311;break;}
 case 304: 
 $j=0;
 label=305;break;
 case 305: 
 var $2003=$j;
 var $2004=$2;
 var $2005=(($2004+4)|0);
 var $2006=HEAP32[(($2005)>>2)];
 var $2007=($2003|0)<($2006|0);
 if($2007){label=306;break;}else{label=310;break;}
 case 306: 
 var $2009=$2;
 var $2010=_get_bits835($2009,4);
 var $2011=(($2010)&255);
 var $2012=$j;
 var $2013=$m;
 var $2014=(($2013+4)|0);
 var $2015=HEAP32[(($2014)>>2)];
 var $2016=(($2015+((($2012)*(3))&-1))|0);
 var $2017=(($2016+2)|0);
 HEAP8[($2017)]=$2011;
 var $2018=$j;
 var $2019=$m;
 var $2020=(($2019+4)|0);
 var $2021=HEAP32[(($2020)>>2)];
 var $2022=(($2021+((($2018)*(3))&-1))|0);
 var $2023=(($2022+2)|0);
 var $2024=HEAP8[($2023)];
 var $2025=($2024&255);
 var $2026=$m;
 var $2027=(($2026+8)|0);
 var $2028=HEAP8[($2027)];
 var $2029=($2028&255);
 var $2030=($2025|0)>=($2029|0);
 if($2030){label=307;break;}else{label=308;break;}
 case 307: 
 var $2032=$2;
 var $2033=_error($2032,20);
 $1=$2033;
 label=353;break;
 case 308: 
 label=309;break;
 case 309: 
 var $2036=$j;
 var $2037=((($2036)+(1))|0);
 $j=$2037;
 label=305;break;
 case 310: 
 label=316;break;
 case 311: 
 $j=0;
 label=312;break;
 case 312: 
 var $2041=$j;
 var $2042=$2;
 var $2043=(($2042+4)|0);
 var $2044=HEAP32[(($2043)>>2)];
 var $2045=($2041|0)<($2044|0);
 if($2045){label=313;break;}else{label=315;break;}
 case 313: 
 var $2047=$j;
 var $2048=$m;
 var $2049=(($2048+4)|0);
 var $2050=HEAP32[(($2049)>>2)];
 var $2051=(($2050+((($2047)*(3))&-1))|0);
 var $2052=(($2051+2)|0);
 HEAP8[($2052)]=0;
 label=314;break;
 case 314: 
 var $2054=$j;
 var $2055=((($2054)+(1))|0);
 $j=$2055;
 label=312;break;
 case 315: 
 label=316;break;
 case 316: 
 $j=0;
 label=317;break;
 case 317: 
 var $2059=$j;
 var $2060=$m;
 var $2061=(($2060+8)|0);
 var $2062=HEAP8[($2061)];
 var $2063=($2062&255);
 var $2064=($2059|0)<($2063|0);
 if($2064){label=318;break;}else{label=324;break;}
 case 318: 
 var $2066=$2;
 var $2067=_get_bits835($2066,8);
 var $2068=$2;
 var $2069=_get_bits835($2068,8);
 var $2070=(($2069)&255);
 var $2071=$j;
 var $2072=$m;
 var $2073=(($2072+9)|0);
 var $2074=(($2073+$2071)|0);
 HEAP8[($2074)]=$2070;
 var $2075=$2;
 var $2076=_get_bits835($2075,8);
 var $2077=(($2076)&255);
 var $2078=$j;
 var $2079=$m;
 var $2080=(($2079+24)|0);
 var $2081=(($2080+$2078)|0);
 HEAP8[($2081)]=$2077;
 var $2082=$j;
 var $2083=$m;
 var $2084=(($2083+9)|0);
 var $2085=(($2084+$2082)|0);
 var $2086=HEAP8[($2085)];
 var $2087=($2086&255);
 var $2088=$2;
 var $2089=(($2088+132)|0);
 var $2090=HEAP32[(($2089)>>2)];
 var $2091=($2087|0)>=($2090|0);
 if($2091){label=319;break;}else{label=320;break;}
 case 319: 
 var $2093=$2;
 var $2094=_error($2093,20);
 $1=$2094;
 label=353;break;
 case 320: 
 var $2096=$j;
 var $2097=$m;
 var $2098=(($2097+24)|0);
 var $2099=(($2098+$2096)|0);
 var $2100=HEAP8[($2099)];
 var $2101=($2100&255);
 var $2102=$2;
 var $2103=(($2102+268)|0);
 var $2104=HEAP32[(($2103)>>2)];
 var $2105=($2101|0)>=($2104|0);
 if($2105){label=321;break;}else{label=322;break;}
 case 321: 
 var $2107=$2;
 var $2108=_error($2107,20);
 $1=$2108;
 label=353;break;
 case 322: 
 label=323;break;
 case 323: 
 var $2111=$j;
 var $2112=((($2111)+(1))|0);
 $j=$2112;
 label=317;break;
 case 324: 
 label=325;break;
 case 325: 
 var $2115=$i;
 var $2116=((($2115)+(1))|0);
 $i=$2116;
 label=280;break;
 case 326: 
 var $2118=$2;
 var $2119=_get_bits835($2118,6);
 var $2120=((($2119)+(1))|0);
 var $2121=$2;
 var $2122=(($2121+412)|0);
 HEAP32[(($2122)>>2)]=$2120;
 $i=0;
 label=327;break;
 case 327: 
 var $2124=$i;
 var $2125=$2;
 var $2126=(($2125+412)|0);
 var $2127=HEAP32[(($2126)>>2)];
 var $2128=($2124|0)<($2127|0);
 if($2128){label=328;break;}else{label=336;break;}
 case 328: 
 var $2130=$2;
 var $2131=(($2130+416)|0);
 var $2132=(($2131)|0);
 var $2133=$i;
 var $2134=(($2132+((($2133)*(6))&-1))|0);
 $m5=$2134;
 var $2135=$2;
 var $2136=_get_bits835($2135,1);
 var $2137=(($2136)&255);
 var $2138=$m5;
 var $2139=(($2138)|0);
 HEAP8[($2139)]=$2137;
 var $2140=$2;
 var $2141=_get_bits835($2140,16);
 var $2142=(($2141)&65535);
 var $2143=$m5;
 var $2144=(($2143+2)|0);
 HEAP16[(($2144)>>1)]=$2142;
 var $2145=$2;
 var $2146=_get_bits835($2145,16);
 var $2147=(($2146)&65535);
 var $2148=$m5;
 var $2149=(($2148+4)|0);
 HEAP16[(($2149)>>1)]=$2147;
 var $2150=$2;
 var $2151=_get_bits835($2150,8);
 var $2152=(($2151)&255);
 var $2153=$m5;
 var $2154=(($2153+1)|0);
 HEAP8[($2154)]=$2152;
 var $2155=$m5;
 var $2156=(($2155+2)|0);
 var $2157=HEAP16[(($2156)>>1)];
 var $2158=($2157&65535);
 var $2159=($2158|0)!=0;
 if($2159){label=329;break;}else{label=330;break;}
 case 329: 
 var $2161=$2;
 var $2162=_error($2161,20);
 $1=$2162;
 label=353;break;
 case 330: 
 var $2164=$m5;
 var $2165=(($2164+4)|0);
 var $2166=HEAP16[(($2165)>>1)];
 var $2167=($2166&65535);
 var $2168=($2167|0)!=0;
 if($2168){label=331;break;}else{label=332;break;}
 case 331: 
 var $2170=$2;
 var $2171=_error($2170,20);
 $1=$2171;
 label=353;break;
 case 332: 
 var $2173=$m5;
 var $2174=(($2173+1)|0);
 var $2175=HEAP8[($2174)];
 var $2176=($2175&255);
 var $2177=$2;
 var $2178=(($2177+404)|0);
 var $2179=HEAP32[(($2178)>>2)];
 var $2180=($2176|0)>=($2179|0);
 if($2180){label=333;break;}else{label=334;break;}
 case 333: 
 var $2182=$2;
 var $2183=_error($2182,20);
 $1=$2183;
 label=353;break;
 case 334: 
 label=335;break;
 case 335: 
 var $2186=$i;
 var $2187=((($2186)+(1))|0);
 $i=$2187;
 label=327;break;
 case 336: 
 var $2189=$2;
 _flush_packet($2189);
 var $2190=$2;
 var $2191=(($2190+816)|0);
 HEAP32[(($2191)>>2)]=0;
 $i=0;
 label=337;break;
 case 337: 
 var $2193=$i;
 var $2194=$2;
 var $2195=(($2194+4)|0);
 var $2196=HEAP32[(($2195)>>2)];
 var $2197=($2193|0)<($2196|0);
 if($2197){label=338;break;}else{label=340;break;}
 case 338: 
 var $2199=$2;
 var $2200=$2;
 var $2201=(($2200+120)|0);
 var $2202=HEAP32[(($2201)>>2)];
 var $2203=($2202<<2);
 var $2204=_setup_malloc($2199,$2203);
 var $2205=$2204;
 var $2206=$i;
 var $2207=$2;
 var $2208=(($2207+804)|0);
 var $2209=(($2208+($2206<<2))|0);
 HEAP32[(($2209)>>2)]=$2205;
 var $2210=$2;
 var $2211=$2;
 var $2212=(($2211+120)|0);
 var $2213=HEAP32[(($2212)>>2)];
 var $2214=($2213<<2);
 var $2215=(((($2214>>>0))/(2))&-1);
 var $2216=_setup_malloc($2210,$2215);
 var $2217=$2216;
 var $2218=$i;
 var $2219=$2;
 var $2220=(($2219+812)|0);
 var $2221=(($2220+($2218<<2))|0);
 HEAP32[(($2221)>>2)]=$2217;
 var $2222=$2;
 var $2223=$longest_floorlist;
 var $2224=($2223<<1);
 var $2225=_setup_malloc($2222,$2224);
 var $2226=$2225;
 var $2227=$i;
 var $2228=$2;
 var $2229=(($2228+820)|0);
 var $2230=(($2229+($2227<<2))|0);
 HEAP32[(($2230)>>2)]=$2226;
 label=339;break;
 case 339: 
 var $2232=$i;
 var $2233=((($2232)+(1))|0);
 $i=$2233;
 label=337;break;
 case 340: 
 var $2235=$2;
 var $2236=$2;
 var $2237=(($2236+116)|0);
 var $2238=HEAP32[(($2237)>>2)];
 var $2239=_init_blocksize($2235,0,$2238);
 var $2240=($2239|0)!=0;
 if($2240){label=342;break;}else{label=341;break;}
 case 341: 
 $1=0;
 label=353;break;
 case 342: 
 var $2243=$2;
 var $2244=$2;
 var $2245=(($2244+120)|0);
 var $2246=HEAP32[(($2245)>>2)];
 var $2247=_init_blocksize($2243,1,$2246);
 var $2248=($2247|0)!=0;
 if($2248){label=344;break;}else{label=343;break;}
 case 343: 
 $1=0;
 label=353;break;
 case 344: 
 var $2251=$2;
 var $2252=(($2251+116)|0);
 var $2253=HEAP32[(($2252)>>2)];
 var $2254=$2;
 var $2255=(($2254+108)|0);
 var $2256=(($2255)|0);
 HEAP32[(($2256)>>2)]=$2253;
 var $2257=$2;
 var $2258=(($2257+120)|0);
 var $2259=HEAP32[(($2258)>>2)];
 var $2260=$2;
 var $2261=(($2260+108)|0);
 var $2262=(($2261+4)|0);
 HEAP32[(($2262)>>2)]=$2259;
 var $2263=$2;
 var $2264=(($2263+120)|0);
 var $2265=HEAP32[(($2264)>>2)];
 var $2266=($2265<<2);
 var $2267=$2266>>>1;
 $imdct_mem=$2267;
 $max_part_read=0;
 $i6=0;
 label=345;break;
 case 345: 
 var $2269=$i6;
 var $2270=$2;
 var $2271=(($2270+268)|0);
 var $2272=HEAP32[(($2271)>>2)];
 var $2273=($2269|0)<($2272|0);
 if($2273){label=346;break;}else{label=350;break;}
 case 346: 
 var $2275=$2;
 var $2276=(($2275+400)|0);
 var $2277=HEAP32[(($2276)>>2)];
 var $2278=$i6;
 var $2279=(($2277+((($2278)*(24))&-1))|0);
 $r7=$2279;
 var $2280=$r7;
 var $2281=(($2280+4)|0);
 var $2282=HEAP32[(($2281)>>2)];
 var $2283=$r7;
 var $2284=(($2283)|0);
 var $2285=HEAP32[(($2284)>>2)];
 var $2286=((($2282)-($2285))|0);
 $n_read=$2286;
 var $2287=$n_read;
 var $2288=$r7;
 var $2289=(($2288+8)|0);
 var $2290=HEAP32[(($2289)>>2)];
 var $2291=(((($2287>>>0))/(($2290>>>0)))&-1);
 $part_read=$2291;
 var $2292=$part_read;
 var $2293=$max_part_read;
 var $2294=($2292|0)>($2293|0);
 if($2294){label=347;break;}else{label=348;break;}
 case 347: 
 var $2296=$part_read;
 $max_part_read=$2296;
 label=348;break;
 case 348: 
 label=349;break;
 case 349: 
 var $2299=$i6;
 var $2300=((($2299)+(1))|0);
 $i6=$2300;
 label=345;break;
 case 350: 
 var $2302=$2;
 var $2303=(($2302+4)|0);
 var $2304=HEAP32[(($2303)>>2)];
 var $2305=$max_part_read;
 var $2306=($2305<<2);
 var $2307=((($2306)+(4))|0);
 var $2308=(Math_imul($2304,$2307)|0);
 $classify_mem=$2308;
 var $2309=$classify_mem;
 var $2310=$2;
 var $2311=(($2310+12)|0);
 HEAP32[(($2311)>>2)]=$2309;
 var $2312=$imdct_mem;
 var $2313=$2;
 var $2314=(($2313+12)|0);
 var $2315=HEAP32[(($2314)>>2)];
 var $2316=($2312>>>0)>($2315>>>0);
 if($2316){label=351;break;}else{label=352;break;}
 case 351: 
 var $2318=$imdct_mem;
 var $2319=$2;
 var $2320=(($2319+12)|0);
 HEAP32[(($2320)>>2)]=$2318;
 label=352;break;
 case 352: 
 var $2322=$2;
 var $2323=(($2322+1141)|0);
 HEAP8[($2323)]=1;
 var $2324=$2;
 var $2325=_stb_vorbis_get_file_offset($2324);
 var $2326=$2;
 var $2327=(($2326+40)|0);
 HEAP32[(($2327)>>2)]=$2325;
 $1=1;
 label=353;break;
 case 353: 
 var $2329=$1;
 STACKTOP=sp;return $2329;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_alloc($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $p;
 $1=$f;
 var $2=$1;
 var $3=_setup_malloc($2,1196);
 var $4=$3;
 $p=$4;
 var $5=$p;
 STACKTOP=sp;return $5;
}
function _vorbis_pump_first_frame($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $len=sp;
 var $right=(sp)+(8);
 var $left=(sp)+(16);
 $1=$f;
 var $2=$1;
 var $3=_vorbis_decode_packet($2,$len,$left,$right);
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 var $7=HEAP32[(($len)>>2)];
 var $8=HEAP32[(($left)>>2)];
 var $9=HEAP32[(($right)>>2)];
 var $10=_vorbis_finish_frame($6,$7,$8,$9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _stb_vorbis_get_frame_short($f,$num_c,$buffer,$num_samples){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $output=sp;
 var $len;
 $1=$f;
 $2=$num_c;
 $3=$buffer;
 $4=$num_samples;
 var $5=$1;
 var $6=_stb_vorbis_get_frame_float($5,0,$output);
 $len=$6;
 var $7=$len;
 var $8=$4;
 var $9=($7|0)>($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$4;
 $len=$11;
 label=3;break;
 case 3: 
 var $13=$len;
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$3;
 var $18=$1;
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($output)>>2)];
 var $22=$len;
 _convert_samples_short($16,$17,0,$20,$21,0,$22);
 label=5;break;
 case 5: 
 var $24=$len;
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _convert_samples_short($buf_c,$buffer,$b_offset,$data_c,$data,$d_offset,$samples){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $i;
 var $limit;
 $1=$buf_c;
 $2=$buffer;
 $3=$b_offset;
 $4=$data_c;
 $5=$data;
 $6=$d_offset;
 $7=$samples;
 var $8=$1;
 var $9=$4;
 var $10=($8|0)<($9|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$1;
 var $16=$12;label=4;break;
 case 3: 
 var $14=$4;
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 $limit=$16;
 $i=0;
 label=5;break;
 case 5: 
 var $18=$i;
 var $19=$limit;
 var $20=($18|0)<($19|0);
 if($20){label=6;break;}else{label=8;break;}
 case 6: 
 var $22=$i;
 var $23=$2;
 var $24=(($23+($22<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$3;
 var $27=(($25+($26<<1))|0);
 var $28=$i;
 var $29=$5;
 var $30=(($29+($28<<2))|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$7;
 _copy_samples($27,$31,$32);
 label=7;break;
 case 7: 
 var $34=$i;
 var $35=((($34)+(1))|0);
 $i=$35;
 label=5;break;
 case 8: 
 label=9;break;
 case 9: 
 var $38=$i;
 var $39=$1;
 var $40=($38|0)<($39|0);
 if($40){label=10;break;}else{label=12;break;}
 case 10: 
 var $42=$i;
 var $43=$2;
 var $44=(($43+($42<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$3;
 var $47=(($45+($46<<1))|0);
 var $48=$47;
 var $49=$7;
 var $50=($49<<1);
 _memset($48, 0, $50)|0;
 label=11;break;
 case 11: 
 var $52=$i;
 var $53=((($52)+(1))|0);
 $i=$53;
 label=9;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _stb_vorbis_get_frame_short_interleaved($f,$num_c,$buffer,$num_shorts){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 $2=$f;
 $3=$num_c;
 HEAP32[(($4)>>2)]=$buffer;
 $5=$num_shorts;
 var $6=$3;
 var $7=($6|0)==1;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$2;
 var $10=$3;
 var $11=$5;
 var $12=_stb_vorbis_get_frame_short($9,$10,$4,$11);
 $1=$12;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $15=$1;
 STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }
}
function _stb_vorbis_decode_memory($mem,$len,$channels,$output){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $data_len;
 var $offset;
 var $total;
 var $limit;
 var $error=sp;
 var $data;
 var $v;
 var $n;
 var $data2;
 $2=$mem;
 $3=$len;
 $4=$channels;
 $5=$output;
 var $6=$2;
 var $7=$3;
 var $8=_stb_vorbis_open_memory($6,$7,$error,0);
 $v=$8;
 var $9=$v;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=14;break;
 case 3: 
 var $13=$v;
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15<<12);
 $limit=$16;
 var $17=$v;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$4;
 HEAP32[(($20)>>2)]=$19;
 $data_len=0;
 $offset=0;
 var $21=$limit;
 $total=$21;
 var $22=$total;
 var $23=($22<<1);
 var $24=_malloc($23);
 var $25=$24;
 $data=$25;
 var $26=$data;
 var $27=($26|0)==0;
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $29=$v;
 _stb_vorbis_close($29);
 $1=-2;
 label=14;break;
 case 5: 
 label=6;break;
 case 6: 
 var $32=$v;
 var $33=$v;
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$data;
 var $37=$offset;
 var $38=(($36+($37<<1))|0);
 var $39=$total;
 var $40=$offset;
 var $41=((($39)-($40))|0);
 var $42=_stb_vorbis_get_frame_short_interleaved($32,$35,$38,$41);
 $n=$42;
 var $43=$n;
 var $44=($43|0)==0;
 if($44){label=7;break;}else{label=8;break;}
 case 7: 
 label=13;break;
 case 8: 
 var $47=$n;
 var $48=$data_len;
 var $49=((($48)+($47))|0);
 $data_len=$49;
 var $50=$n;
 var $51=$v;
 var $52=(($51+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(Math_imul($50,$53)|0);
 var $55=$offset;
 var $56=((($55)+($54))|0);
 $offset=$56;
 var $57=$offset;
 var $58=$limit;
 var $59=((($57)+($58))|0);
 var $60=$total;
 var $61=($59|0)>($60|0);
 if($61){label=9;break;}else{label=12;break;}
 case 9: 
 var $63=$total;
 var $64=($63<<1);
 $total=$64;
 var $65=$data;
 var $66=$65;
 var $67=$total;
 var $68=($67<<1);
 var $69=_realloc($66,$68);
 var $70=$69;
 $data2=$70;
 var $71=$data2;
 var $72=($71|0)==0;
 if($72){label=10;break;}else{label=11;break;}
 case 10: 
 var $74=$data;
 var $75=$74;
 _free($75);
 var $76=$v;
 _stb_vorbis_close($76);
 $1=-2;
 label=14;break;
 case 11: 
 var $78=$data2;
 $data=$78;
 label=12;break;
 case 12: 
 label=6;break;
 case 13: 
 var $81=$v;
 _stb_vorbis_close($81);
 var $82=$data;
 var $83=$5;
 HEAP32[(($83)>>2)]=$82;
 var $84=$data_len;
 $1=$84;
 label=14;break;
 case 14: 
 var $86=$1;
 STACKTOP=sp;return $86;
  default: assert(0, "bad label: " + label);
 }
}
function _copy_samples($dest,$src,$len){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $temp=sp;
 var $v;
 $1=$dest;
 $2=$src;
 $3=$len;
 $i=0;
 label=2;break;
 case 2: 
 var $5=$i;
 var $6=$3;
 var $7=($5|0)<($6|0);
 if($7){label=3;break;}else{label=7;break;}
 case 3: 
 var $9=$i;
 var $10=$2;
 var $11=(($10+($9<<2))|0);
 var $12=HEAPF32[(($11)>>2)];
 var $13=($12)+(384);
 var $14=$temp;
 HEAPF32[(($14)>>2)]=$13;
 var $15=$temp;
 var $16=HEAP32[(($15)>>2)];
 var $17=((($16)-(1136656384))|0);
 $v=$17;
 var $18=$v;
 var $19=((($18)+(32768))|0);
 var $20=($19>>>0)>65535;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$v;
 var $23=($22|0)<0;
 var $24=($23?-32768:32767);
 $v=$24;
 label=5;break;
 case 5: 
 var $26=$v;
 var $27=(($26)&65535);
 var $28=$i;
 var $29=$1;
 var $30=(($29+($28<<1))|0);
 HEAP16[(($30)>>1)]=$27;
 label=6;break;
 case 6: 
 var $32=$i;
 var $33=((($32)+(1))|0);
 $i=$33;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _setup_malloc($f,$sz){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$f;
 $2=$sz;
 var $3=$2;
 var $4=((($3)+(3))|0);
 var $5=$4&-4;
 $2=$5;
 var $6=$2;
 var $7=$1;
 var $8=(($7+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)+($6))|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=$2;
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$2;
 var $15=_malloc($14);
 var $18=$15;label=4;break;
 case 3: 
 var $18=0;label=4;break;
 case 4: 
 var $18;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _start_page($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$f;
 var $3=$2;
 var $4=_capture_pattern($3);
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$2;
 var $8=_error($7,30);
 $1=$8;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=_start_page_no_capturepattern($10);
 $1=$11;
 label=4;break;
 case 4: 
 var $13=$1;
 STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _error($f,$e){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$f;
 $2=$e;
 var $3=$2;
 var $4=$1;
 var $5=(($4+104)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$1;
 var $7=(($6+100)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 if($9){label=4;break;}else{label=2;break;}
 case 2: 
 var $11=$2;
 var $12=($11|0)!=1;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$2;
 var $15=$1;
 var $16=(($15+104)|0);
 HEAP32[(($16)>>2)]=$14;
 label=4;break;
 case 4: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _get8($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$z;
 var $3=$2;
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=(($6+28)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($5>>>0)>=($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=(($11+100)|0);
 HEAP32[(($12)>>2)]=1;
 $1=0;
 label=4;break;
 case 3: 
 var $14=$2;
 var $15=(($14+20)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+1)|0);
 HEAP32[(($15)>>2)]=$17;
 var $18=HEAP8[($16)];
 $1=$18;
 label=4;break;
 case 4: 
 var $20=$1;
 STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _getn($z,$data,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$z;
 $3=$data;
 $4=$n;
 var $5=$2;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$4;
 var $9=(($7+$8)|0);
 var $10=$2;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9>>>0)>($12>>>0);
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$2;
 var $16=(($15+100)|0);
 HEAP32[(($16)>>2)]=1;
 $1=0;
 label=4;break;
 case 3: 
 var $18=$3;
 var $19=$2;
 var $20=(($19+20)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$4;
 assert($22 % 1 === 0);(_memcpy($18, $21, $22)|0);
 var $23=$4;
 var $24=$2;
 var $25=(($24+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+$23)|0);
 HEAP32[(($25)>>2)]=$27;
 $1=1;
 label=4;break;
 case 4: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_validate($data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$data;
 var $2=$1;
 var $3=_memcmp($2,80,6);
 var $4=($3|0)==0;
 var $5=($4&1);
 STACKTOP=sp;return $5;
}
function _get32($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $x;
 $1=$f;
 var $2=$1;
 var $3=_get8($2);
 var $4=($3&255);
 $x=$4;
 var $5=$1;
 var $6=_get8($5);
 var $7=($6&255);
 var $8=$7<<8;
 var $9=$x;
 var $10=((($9)+($8))|0);
 $x=$10;
 var $11=$1;
 var $12=_get8($11);
 var $13=($12&255);
 var $14=$13<<16;
 var $15=$x;
 var $16=((($15)+($14))|0);
 $x=$16;
 var $17=$1;
 var $18=_get8($17);
 var $19=($18&255);
 var $20=$19<<24;
 var $21=$x;
 var $22=((($21)+($20))|0);
 $x=$22;
 var $23=$x;
 STACKTOP=sp;return $23;
}
function _start_packet($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$f;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=(($4+1144)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=8;break;}
 case 3: 
 var $9=$2;
 var $10=_start_page($9);
 var $11=($10|0)!=0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 $1=0;
 label=9;break;
 case 5: 
 var $14=$2;
 var $15=(($14+1139)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 var $21=$2;
 var $22=_error($21,32);
 $1=$22;
 label=9;break;
 case 7: 
 label=2;break;
 case 8: 
 var $25=$2;
 var $26=(($25+1148)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=$2;
 var $28=(($27+1160)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=$2;
 var $30=(($29+1164)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=$2;
 var $32=(($31+1140)|0);
 HEAP8[($32)]=0;
 $1=1;
 label=9;break;
 case 9: 
 var $34=$1;
 STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _next_segment($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $len;
 $2=$f;
 var $3=$2;
 var $4=(($3+1148)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=16;break;
 case 3: 
 var $9=$2;
 var $10=(($9+1144)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=9;break;}
 case 4: 
 var $14=$2;
 var $15=(($14+880)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=((($16)-(1))|0);
 var $18=$2;
 var $19=(($18+1152)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$2;
 var $21=_start_page($20);
 var $22=($21|0)!=0;
 if($22){label=6;break;}else{label=5;break;}
 case 5: 
 var $24=$2;
 var $25=(($24+1148)|0);
 HEAP32[(($25)>>2)]=1;
 $1=0;
 label=16;break;
 case 6: 
 var $27=$2;
 var $28=(($27+1139)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&1;
 var $32=($31|0)!=0;
 if($32){label=8;break;}else{label=7;break;}
 case 7: 
 var $34=$2;
 var $35=_error($34,32);
 $1=$35;
 label=16;break;
 case 8: 
 label=9;break;
 case 9: 
 var $38=$2;
 var $39=(($38+1144)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=$2;
 var $43=(($42+884)|0);
 var $44=(($43+$40)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 $len=$46;
 var $47=$len;
 var $48=($47|0)<255;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=$2;
 var $51=(($50+1148)|0);
 HEAP32[(($51)>>2)]=1;
 var $52=$2;
 var $53=(($52+1144)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=((($54)-(1))|0);
 var $56=$2;
 var $57=(($56+1152)|0);
 HEAP32[(($57)>>2)]=$55;
 label=11;break;
 case 11: 
 var $59=$2;
 var $60=(($59+1144)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$2;
 var $63=(($62+880)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($61|0)>=($64|0);
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 var $67=$2;
 var $68=(($67+1144)|0);
 HEAP32[(($68)>>2)]=-1;
 label=13;break;
 case 13: 
 var $70=$2;
 var $71=(($70+1140)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=($73|0)==0;
 if($74){var $78=1;label=15;break;}else{label=14;break;}
 case 14: 
 ___assert_fail(27392,25552,1163,27712);
 throw "Reached an unreachable!";
 label=15;break;
 case 15: 
 var $78;
 var $79=($78&1);
 var $80=$len;
 var $81=(($80)&255);
 var $82=$2;
 var $83=(($82+1140)|0);
 HEAP8[($83)]=$81;
 var $84=$len;
 $1=$84;
 label=16;break;
 case 16: 
 var $86=$1;
 STACKTOP=sp;return $86;
  default: assert(0, "bad label: " + label);
 }
}
function _skip($z,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$z;
 $2=$n;
 var $3=$2;
 var $4=$1;
 var $5=(($4+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+$3)|0);
 HEAP32[(($5)>>2)]=$7;
 var $8=$1;
 var $9=(($8+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($10>>>0)>=($13>>>0);
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 var $16=$1;
 var $17=(($16+100)|0);
 HEAP32[(($17)>>2)]=1;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _crc32_init_A834(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $i;
 var $j;
 var $s;
 $i=0;
 label=2;break;
 case 2: 
 var $2=$i;
 var $3=($2|0)<256;
 if($3){label=3;break;}else{label=9;break;}
 case 3: 
 var $5=$i;
 var $6=$5<<24;
 $s=$6;
 $j=0;
 label=4;break;
 case 4: 
 var $8=$j;
 var $9=($8|0)<8;
 if($9){label=5;break;}else{label=7;break;}
 case 5: 
 var $11=$s;
 var $12=$11<<1;
 var $13=$s;
 var $14=($13>>>0)>=2147483648;
 var $15=($14?79764919:0);
 var $16=$12^$15;
 $s=$16;
 label=6;break;
 case 6: 
 var $18=$j;
 var $19=((($18)+(1))|0);
 $j=$19;
 label=4;break;
 case 7: 
 var $21=$s;
 var $22=$i;
 var $23=((28992+($22<<2))|0);
 HEAP32[(($23)>>2)]=$21;
 label=8;break;
 case 8: 
 var $25=$i;
 var $26=((($25)+(1))|0);
 $i=$26;
 label=2;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _get8_packet($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $x;
 $1=$f;
 var $2=$1;
 var $3=_get8_packet_raw($2);
 $x=$3;
 var $4=$1;
 var $5=(($4+1160)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$x;
 STACKTOP=sp;return $6;
}
function _get_bits835($f,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $z;
 var $z1;
 $2=$f;
 $3=$n;
 var $4=$2;
 var $5=(($4+1160)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=17;break;
 case 3: 
 var $10=$2;
 var $11=(($10+1160)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$3;
 var $14=($12|0)<($13|0);
 if($14){label=4;break;}else{label=14;break;}
 case 4: 
 var $16=$3;
 var $17=($16|0)>24;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$2;
 var $20=_get_bits835($19,24);
 $z=$20;
 var $21=$2;
 var $22=$3;
 var $23=((($22)-(24))|0);
 var $24=_get_bits835($21,$23);
 var $25=$24<<24;
 var $26=$z;
 var $27=((($26)+($25))|0);
 $z=$27;
 var $28=$z;
 $1=$28;
 label=17;break;
 case 6: 
 var $30=$2;
 var $31=(($30+1160)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=$2;
 var $36=(($35+1156)|0);
 HEAP32[(($36)>>2)]=0;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $39=$2;
 var $40=(($39+1160)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=($41|0)<($42|0);
 if($43){label=10;break;}else{label=13;break;}
 case 10: 
 var $45=$2;
 var $46=_get8_packet_raw($45);
 $z1=$46;
 var $47=$z1;
 var $48=($47|0)==-1;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 var $50=$2;
 var $51=(($50+1160)|0);
 HEAP32[(($51)>>2)]=-1;
 $1=0;
 label=17;break;
 case 12: 
 var $53=$z1;
 var $54=$2;
 var $55=(($54+1160)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$53<<$56;
 var $58=$2;
 var $59=(($58+1156)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=((($60)+($57))|0);
 HEAP32[(($59)>>2)]=$61;
 var $62=$2;
 var $63=(($62+1160)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=((($64)+(8))|0);
 HEAP32[(($63)>>2)]=$65;
 label=9;break;
 case 13: 
 label=14;break;
 case 14: 
 var $68=$2;
 var $69=(($68+1160)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)<0;
 if($71){label=15;break;}else{label=16;break;}
 case 15: 
 $1=0;
 label=17;break;
 case 16: 
 var $74=$2;
 var $75=(($74+1156)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$3;
 var $78=1<<$77;
 var $79=((($78)-(1))|0);
 var $80=$76&$79;
 $z=$80;
 var $81=$3;
 var $82=$2;
 var $83=(($82+1156)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$84>>>($81>>>0);
 HEAP32[(($83)>>2)]=$85;
 var $86=$3;
 var $87=$2;
 var $88=(($87+1160)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=((($89)-($86))|0);
 HEAP32[(($88)>>2)]=$90;
 var $91=$z;
 $1=$91;
 label=17;break;
 case 17: 
 var $93=$1;
 STACKTOP=sp;return $93;
  default: assert(0, "bad label: " + label);
 }
}
function _setup_temp_malloc($f,$sz){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$f;
 $2=$sz;
 var $3=$2;
 var $4=((($3)+(3))|0);
 var $5=$4&-4;
 $2=$5;
 var $6=$2;
 var $7=_malloc($6);
 STACKTOP=sp;return $7;
}
function _ilog($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$n;
 var $3=$2;
 var $4=($3>>>0)<16384;
 if($4){label=2;break;}else{label=7;break;}
 case 2: 
 var $6=$2;
 var $7=($6>>>0)<16;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$2;
 var $10=((7264+$9)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24);
 var $13=(($12)|0);
 $1=$13;
 label=16;break;
 case 4: 
 var $15=$2;
 var $16=($15>>>0)<512;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=$2;
 var $19=$18>>5;
 var $20=((7264+$19)|0);
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24);
 var $23=((($22)+(5))|0);
 $1=$23;
 label=16;break;
 case 6: 
 var $25=$2;
 var $26=$25>>10;
 var $27=((7264+$26)|0);
 var $28=HEAP8[($27)];
 var $29=(($28<<24)>>24);
 var $30=((($29)+(10))|0);
 $1=$30;
 label=16;break;
 case 7: 
 var $32=$2;
 var $33=($32>>>0)<16777216;
 if($33){label=8;break;}else{label=11;break;}
 case 8: 
 var $35=$2;
 var $36=($35>>>0)<524288;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 var $38=$2;
 var $39=$38>>15;
 var $40=((7264+$39)|0);
 var $41=HEAP8[($40)];
 var $42=(($41<<24)>>24);
 var $43=((($42)+(15))|0);
 $1=$43;
 label=16;break;
 case 10: 
 var $45=$2;
 var $46=$45>>20;
 var $47=((7264+$46)|0);
 var $48=HEAP8[($47)];
 var $49=(($48<<24)>>24);
 var $50=((($49)+(20))|0);
 $1=$50;
 label=16;break;
 case 11: 
 var $52=$2;
 var $53=($52>>>0)<536870912;
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 var $55=$2;
 var $56=$55>>25;
 var $57=((7264+$56)|0);
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24);
 var $60=((($59)+(25))|0);
 $1=$60;
 label=16;break;
 case 13: 
 var $62=$2;
 var $63=($62>>>0)<2147483648;
 if($63){label=14;break;}else{label=15;break;}
 case 14: 
 var $65=$2;
 var $66=$65>>30;
 var $67=((7264+$66)|0);
 var $68=HEAP8[($67)];
 var $69=(($68<<24)>>24);
 var $70=((($69)+(30))|0);
 $1=$70;
 label=16;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $73=$1;
 STACKTOP=sp;return $73;
  default: assert(0, "bad label: " + label);
 }
}
function _setup_temp_free($f,$p,$sz){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$f;
 $2=$p;
 $3=$sz;
 var $4=$2;
 _free($4);
 STACKTOP=sp;return;
}
function _compute_codewords($c,$len,$n,$values){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $k;
 var $m;
 var $available=sp;
 var $res;
 var $z;
 var $y;
 $2=$c;
 $3=$len;
 $4=$n;
 $5=$values;
 $m=0;
 var $6=$available;
 _memset($6, 0, 128)|0;
 $k=0;
 label=2;break;
 case 2: 
 var $8=$k;
 var $9=$4;
 var $10=($8|0)<($9|0);
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 var $12=$k;
 var $13=$3;
 var $14=(($13+$12)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)<255;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 label=7;break;
 case 5: 
 label=6;break;
 case 6: 
 var $21=$k;
 var $22=((($21)+(1))|0);
 $k=$22;
 label=2;break;
 case 7: 
 var $24=$k;
 var $25=$4;
 var $26=($24|0)==($25|0);
 if($26){label=8;break;}else{label=11;break;}
 case 8: 
 var $28=$2;
 var $29=(($28+2092)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){var $35=1;label=10;break;}else{label=9;break;}
 case 9: 
 ___assert_fail(20952,25552,709,27912);
 throw "Reached an unreachable!";
 label=10;break;
 case 10: 
 var $35;
 var $36=($35&1);
 $1=1;
 label=37;break;
 case 11: 
 var $38=$2;
 var $39=$k;
 var $40=$m;
 var $41=((($40)+(1))|0);
 $m=$41;
 var $42=$k;
 var $43=$3;
 var $44=(($43+$42)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=$5;
 _add_entry($38,0,$39,$40,$46,$47);
 $i=1;
 label=12;break;
 case 12: 
 var $49=$i;
 var $50=$k;
 var $51=$3;
 var $52=(($51+$50)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=($49|0)<=($54|0);
 if($55){label=13;break;}else{label=15;break;}
 case 13: 
 var $57=$i;
 var $58=(((32)-($57))|0);
 var $59=1<<$58;
 var $60=$i;
 var $61=(($available+($60<<2))|0);
 HEAP32[(($61)>>2)]=$59;
 label=14;break;
 case 14: 
 var $63=$i;
 var $64=((($63)+(1))|0);
 $i=$64;
 label=12;break;
 case 15: 
 var $66=$k;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=16;break;
 case 16: 
 var $69=$i;
 var $70=$4;
 var $71=($69|0)<($70|0);
 if($71){label=17;break;}else{label=36;break;}
 case 17: 
 var $73=$i;
 var $74=$3;
 var $75=(($74+$73)|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 $z=$77;
 var $78=$z;
 var $79=($78|0)==255;
 if($79){label=18;break;}else{label=19;break;}
 case 18: 
 label=35;break;
 case 19: 
 label=20;break;
 case 20: 
 var $83=$z;
 var $84=($83|0)>0;
 if($84){label=21;break;}else{var $92=0;label=22;break;}
 case 21: 
 var $86=$z;
 var $87=(($available+($86<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)!=0;
 var $90=$89^1;
 var $92=$90;label=22;break;
 case 22: 
 var $92;
 if($92){label=23;break;}else{label=24;break;}
 case 23: 
 var $94=$z;
 var $95=((($94)-(1))|0);
 $z=$95;
 label=20;break;
 case 24: 
 var $97=$z;
 var $98=($97|0)==0;
 if($98){label=25;break;}else{label=26;break;}
 case 25: 
 ___assert_fail(20616,25552,730,27912);
 throw "Reached an unreachable!";
 case 26: 
 var $101=$z;
 var $102=(($available+($101<<2))|0);
 var $103=HEAP32[(($102)>>2)];
 $res=$103;
 var $104=$z;
 var $105=(($available+($104<<2))|0);
 HEAP32[(($105)>>2)]=0;
 var $106=$2;
 var $107=$res;
 var $108=_bit_reverse($107);
 var $109=$i;
 var $110=$m;
 var $111=((($110)+(1))|0);
 $m=$111;
 var $112=$i;
 var $113=$3;
 var $114=(($113+$112)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=$5;
 _add_entry($106,$108,$109,$110,$116,$117);
 var $118=$z;
 var $119=$i;
 var $120=$3;
 var $121=(($120+$119)|0);
 var $122=HEAP8[($121)];
 var $123=($122&255);
 var $124=($118|0)!=($123|0);
 if($124){label=27;break;}else{label=34;break;}
 case 27: 
 var $126=$i;
 var $127=$3;
 var $128=(($127+$126)|0);
 var $129=HEAP8[($128)];
 var $130=($129&255);
 $y=$130;
 label=28;break;
 case 28: 
 var $132=$y;
 var $133=$z;
 var $134=($132|0)>($133|0);
 if($134){label=29;break;}else{label=33;break;}
 case 29: 
 var $136=$y;
 var $137=(($available+($136<<2))|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){var $143=1;label=31;break;}else{label=30;break;}
 case 30: 
 ___assert_fail(20088,25552,737,27912);
 throw "Reached an unreachable!";
 label=31;break;
 case 31: 
 var $143;
 var $144=($143&1);
 var $145=$res;
 var $146=$y;
 var $147=(((32)-($146))|0);
 var $148=1<<$147;
 var $149=((($145)+($148))|0);
 var $150=$y;
 var $151=(($available+($150<<2))|0);
 HEAP32[(($151)>>2)]=$149;
 label=32;break;
 case 32: 
 var $153=$y;
 var $154=((($153)-(1))|0);
 $y=$154;
 label=28;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $158=$i;
 var $159=((($158)+(1))|0);
 $i=$159;
 label=16;break;
 case 36: 
 $1=1;
 label=37;break;
 case 37: 
 var $162=$1;
 STACKTOP=sp;return $162;
  default: assert(0, "bad label: " + label);
 }
}
function _compute_sorted_huffman($c,$lengths,$values){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $len;
 var $k;
 var $huff_len;
 var $code;
 var $x;
 var $n;
 var $m;
 $1=$c;
 $2=$lengths;
 $3=$values;
 var $4=$1;
 var $5=(($4+23)|0);
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24)!=0;
 if($7){label=11;break;}else{label=2;break;}
 case 2: 
 $k=0;
 $i=0;
 label=3;break;
 case 3: 
 var $10=$i;
 var $11=$1;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($10|0)<($13|0);
 if($14){label=4;break;}else{label=8;break;}
 case 4: 
 var $16=$1;
 var $17=$i;
 var $18=$2;
 var $19=(($18+$17)|0);
 var $20=HEAP8[($19)];
 var $21=_include_in_sort($16,$20);
 var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=$i;
 var $25=$1;
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+($24<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=_bit_reverse($29);
 var $31=$k;
 var $32=((($31)+(1))|0);
 $k=$32;
 var $33=$1;
 var $34=(($33+2084)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+($31<<2))|0);
 HEAP32[(($36)>>2)]=$30;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $39=$i;
 var $40=((($39)+(1))|0);
 $i=$40;
 label=3;break;
 case 8: 
 var $42=$k;
 var $43=$1;
 var $44=(($43+2092)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($42|0)==($45|0);
 if($46){var $50=1;label=10;break;}else{label=9;break;}
 case 9: 
 ___assert_fail(22616,25552,798,27888);
 throw "Reached an unreachable!";
 label=10;break;
 case 10: 
 var $50;
 var $51=($50&1);
 label=16;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 var $54=$i;
 var $55=$1;
 var $56=(($55+2092)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($54|0)<($57|0);
 if($58){label=13;break;}else{label=15;break;}
 case 13: 
 var $60=$i;
 var $61=$1;
 var $62=(($61+32)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+($60<<2))|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=_bit_reverse($65);
 var $67=$i;
 var $68=$1;
 var $69=(($68+2084)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+($67<<2))|0);
 HEAP32[(($71)>>2)]=$66;
 label=14;break;
 case 14: 
 var $73=$i;
 var $74=((($73)+(1))|0);
 $i=$74;
 label=12;break;
 case 15: 
 label=16;break;
 case 16: 
 var $77=$1;
 var $78=(($77+2084)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$79;
 var $81=$1;
 var $82=(($81+2092)|0);
 var $83=HEAP32[(($82)>>2)];
 _qsort($80,$83,4,396);
 var $84=$1;
 var $85=(($84+2092)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=$1;
 var $88=(($87+2084)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+($86<<2))|0);
 HEAP32[(($90)>>2)]=-1;
 var $91=$1;
 var $92=(($91+23)|0);
 var $93=HEAP8[($92)];
 var $94=($93&255);
 var $95=($94|0)!=0;
 if($95){label=17;break;}else{label=18;break;}
 case 17: 
 var $97=$1;
 var $98=(($97+2092)|0);
 var $99=HEAP32[(($98)>>2)];
 var $105=$99;label=19;break;
 case 18: 
 var $101=$1;
 var $102=(($101+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $105=$103;label=19;break;
 case 19: 
 var $105;
 $len=$105;
 $i=0;
 label=20;break;
 case 20: 
 var $107=$i;
 var $108=$len;
 var $109=($107|0)<($108|0);
 if($109){label=21;break;}else{label=39;break;}
 case 21: 
 var $111=$1;
 var $112=(($111+23)|0);
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=($114|0)!=0;
 if($115){label=22;break;}else{label=23;break;}
 case 22: 
 var $117=$i;
 var $118=$3;
 var $119=(($118+($117<<2))|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$2;
 var $122=(($121+$120)|0);
 var $123=HEAP8[($122)];
 var $124=($123&255);
 var $132=$124;label=24;break;
 case 23: 
 var $126=$i;
 var $127=$2;
 var $128=(($127+$126)|0);
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $132=$130;label=24;break;
 case 24: 
 var $132;
 $huff_len=$132;
 var $133=$1;
 var $134=$huff_len;
 var $135=(($134)&255);
 var $136=_include_in_sort($133,$135);
 var $137=($136|0)!=0;
 if($137){label=25;break;}else{label=37;break;}
 case 25: 
 var $139=$i;
 var $140=$1;
 var $141=(($140+32)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+($139<<2))|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=_bit_reverse($144);
 $code=$145;
 $x=0;
 var $146=$1;
 var $147=(($146+2092)|0);
 var $148=HEAP32[(($147)>>2)];
 $n=$148;
 label=26;break;
 case 26: 
 var $150=$n;
 var $151=($150|0)>1;
 if($151){label=27;break;}else{label=31;break;}
 case 27: 
 var $153=$x;
 var $154=$n;
 var $155=$154>>1;
 var $156=((($153)+($155))|0);
 $m=$156;
 var $157=$m;
 var $158=$1;
 var $159=(($158+2084)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+($157<<2))|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$code;
 var $164=($162>>>0)<=($163>>>0);
 if($164){label=28;break;}else{label=29;break;}
 case 28: 
 var $166=$m;
 $x=$166;
 var $167=$n;
 var $168=$167>>1;
 var $169=$n;
 var $170=((($169)-($168))|0);
 $n=$170;
 label=30;break;
 case 29: 
 var $172=$n;
 var $173=$172>>1;
 $n=$173;
 label=30;break;
 case 30: 
 label=26;break;
 case 31: 
 var $176=$x;
 var $177=$1;
 var $178=(($177+2084)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+($176<<2))|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=$code;
 var $183=($181|0)==($182|0);
 if($183){var $187=1;label=33;break;}else{label=32;break;}
 case 32: 
 ___assert_fail(21832,25552,828,27888);
 throw "Reached an unreachable!";
 label=33;break;
 case 33: 
 var $187;
 var $188=($187&1);
 var $189=$1;
 var $190=(($189+23)|0);
 var $191=HEAP8[($190)];
 var $192=(($191<<24)>>24)!=0;
 if($192){label=34;break;}else{label=35;break;}
 case 34: 
 var $194=$i;
 var $195=$3;
 var $196=(($195+($194<<2))|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=$x;
 var $199=$1;
 var $200=(($199+2088)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+($198<<2))|0);
 HEAP32[(($202)>>2)]=$197;
 var $203=$huff_len;
 var $204=(($203)&255);
 var $205=$x;
 var $206=$1;
 var $207=(($206+8)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+$205)|0);
 HEAP8[($209)]=$204;
 label=36;break;
 case 35: 
 var $211=$i;
 var $212=$x;
 var $213=$1;
 var $214=(($213+2088)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+($212<<2))|0);
 HEAP32[(($216)>>2)]=$211;
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 var $220=$i;
 var $221=((($220)+(1))|0);
 $i=$221;
 label=20;break;
 case 39: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _compute_accelerated_huffman($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $len;
 var $z;
 $1=$c;
 $i=0;
 label=2;break;
 case 2: 
 var $3=$i;
 var $4=($3|0)<1024;
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 var $6=$i;
 var $7=$1;
 var $8=(($7+36)|0);
 var $9=(($8+($6<<1))|0);
 HEAP16[(($9)>>1)]=-1;
 label=4;break;
 case 4: 
 var $11=$i;
 var $12=((($11)+(1))|0);
 $i=$12;
 label=2;break;
 case 5: 
 var $14=$1;
 var $15=(($14+23)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=$1;
 var $21=(($20+2092)|0);
 var $22=HEAP32[(($21)>>2)];
 var $28=$22;label=8;break;
 case 7: 
 var $24=$1;
 var $25=(($24+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $28=$26;label=8;break;
 case 8: 
 var $28;
 $len=$28;
 var $29=$len;
 var $30=($29|0)>32767;
 if($30){label=9;break;}else{label=10;break;}
 case 9: 
 $len=32767;
 label=10;break;
 case 10: 
 $i=0;
 label=11;break;
 case 11: 
 var $34=$i;
 var $35=$len;
 var $36=($34|0)<($35|0);
 if($36){label=12;break;}else{label=22;break;}
 case 12: 
 var $38=$i;
 var $39=$1;
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+$38)|0);
 var $43=HEAP8[($42)];
 var $44=($43&255);
 var $45=($44|0)<=10;
 if($45){label=13;break;}else{label=20;break;}
 case 13: 
 var $47=$1;
 var $48=(($47+23)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=($50|0)!=0;
 if($51){label=14;break;}else{label=15;break;}
 case 14: 
 var $53=$i;
 var $54=$1;
 var $55=(($54+2084)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+($53<<2))|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=_bit_reverse($58);
 var $68=$59;label=16;break;
 case 15: 
 var $61=$i;
 var $62=$1;
 var $63=(($62+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+($61<<2))|0);
 var $66=HEAP32[(($65)>>2)];
 var $68=$66;label=16;break;
 case 16: 
 var $68;
 $z=$68;
 label=17;break;
 case 17: 
 var $70=$z;
 var $71=($70>>>0)<1024;
 if($71){label=18;break;}else{label=19;break;}
 case 18: 
 var $73=$i;
 var $74=(($73)&65535);
 var $75=$z;
 var $76=$1;
 var $77=(($76+36)|0);
 var $78=(($77+($75<<1))|0);
 HEAP16[(($78)>>1)]=$74;
 var $79=$i;
 var $80=$1;
 var $81=(($80+8)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+$79)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=1<<$85;
 var $87=$z;
 var $88=((($87)+($86))|0);
 $z=$88;
 label=17;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $92=$i;
 var $93=((($92)+(1))|0);
 $i=$93;
 label=11;break;
 case 22: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _float32_unpack($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $mantissa;
 var $sign;
 var $exp;
 var $res;
 $1=$x;
 var $2=$1;
 var $3=$2&2097151;
 $mantissa=$3;
 var $4=$1;
 var $5=$4&-2147483648;
 $sign=$5;
 var $6=$1;
 var $7=$6&2145386496;
 var $8=$7>>>21;
 $exp=$8;
 var $9=$sign;
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$mantissa;
 var $13=($12>>>0);
 var $14=((-.0))-($13);
 var $19=$14;label=4;break;
 case 3: 
 var $16=$mantissa;
 var $17=($16>>>0);
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 $res=$19;
 var $20=$res;
 var $21=$20;
 var $22=$21;
 var $23=$exp;
 var $24=((($23)-(788))|0);
 var $25=_ldexp($22,$24);
 var $26=$25;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }
}
function _lookup1_values($entries,$dim){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $r;
 $1=$entries;
 $2=$dim;
 var $3=$1;
 var $4=($3|0);
 var $5=$4;
 var $6=Math_log($5);
 var $7=$6;
 var $8=$2;
 var $9=($8|0);
 var $10=($7)/($9);
 var $11=$10;
 var $12=Math_exp($11);
 var $13=Math_floor($12);
 var $14=(($13)&-1);
 $r=$14;
 var $15=$r;
 var $16=($15|0);
 var $17=($16)+(1);
 var $18=$17;
 var $19=$2;
 var $20=($19|0);
 var $21=Math_pow($18,$20);
 var $22=Math_floor($21);
 var $23=(($22)&-1);
 var $24=$1;
 var $25=($23|0)<=($24|0);
 if($25){label=2;break;}else{label=3;break;}
 case 2: 
 var $27=$r;
 var $28=((($27)+(1))|0);
 $r=$28;
 label=3;break;
 case 3: 
 var $30=$r;
 var $31=($30|0);
 var $32=($31)+(1);
 var $33=$32;
 var $34=$2;
 var $35=($34|0);
 var $36=Math_pow($33,$35);
 var $37=$1;
 var $38=($37|0);
 var $39=$36>$38;
 if($39){var $43=1;label=5;break;}else{label=4;break;}
 case 4: 
 ___assert_fail(24104,25552,853,27728);
 throw "Reached an unreachable!";
 label=5;break;
 case 5: 
 var $43;
 var $44=($43&1);
 var $45=$r;
 var $46=($45|0);
 var $47=$46;
 var $48=$2;
 var $49=($48|0);
 var $50=Math_pow($47,$49);
 var $51=Math_floor($50);
 var $52=(($51)&-1);
 var $53=$1;
 var $54=($52|0)<=($53|0);
 if($54){var $58=1;label=7;break;}else{label=6;break;}
 case 6: 
 ___assert_fail(23200,25552,854,27728);
 throw "Reached an unreachable!";
 label=7;break;
 case 7: 
 var $58;
 var $59=($58&1);
 var $60=$r;
 STACKTOP=sp;return $60;
  default: assert(0, "bad label: " + label);
 }
}
function _point_compare($p,$q){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $a;
 var $b;
 $1=$p;
 $2=$q;
 var $3=$1;
 var $4=$3;
 $a=$4;
 var $5=$2;
 var $6=$5;
 $b=$6;
 var $7=$a;
 var $8=(($7)|0);
 var $9=HEAP16[(($8)>>1)];
 var $10=($9&65535);
 var $11=$b;
 var $12=(($11)|0);
 var $13=HEAP16[(($12)>>1)];
 var $14=($13&65535);
 var $15=($10|0)<($14|0);
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $29=-1;label=4;break;
 case 3: 
 var $18=$a;
 var $19=(($18)|0);
 var $20=HEAP16[(($19)>>1)];
 var $21=($20&65535);
 var $22=$b;
 var $23=(($22)|0);
 var $24=HEAP16[(($23)>>1)];
 var $25=($24&65535);
 var $26=($21|0)>($25|0);
 var $27=($26&1);
 var $29=$27;label=4;break;
 case 4: 
 var $29;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _neighbors($x,$n,$plow,$phigh){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $low;
 var $high;
 var $i;
 $1=$x;
 $2=$n;
 $3=$plow;
 $4=$phigh;
 $low=-1;
 $high=65536;
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=$2;
 var $8=($6|0)<($7|0);
 if($8){label=3;break;}else{label=11;break;}
 case 3: 
 var $10=$i;
 var $11=$1;
 var $12=(($11+($10<<1))|0);
 var $13=HEAP16[(($12)>>1)];
 var $14=($13&65535);
 var $15=$low;
 var $16=($14|0)>($15|0);
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$i;
 var $19=$1;
 var $20=(($19+($18<<1))|0);
 var $21=HEAP16[(($20)>>1)];
 var $22=($21&65535);
 var $23=$2;
 var $24=$1;
 var $25=(($24+($23<<1))|0);
 var $26=HEAP16[(($25)>>1)];
 var $27=($26&65535);
 var $28=($22|0)<($27|0);
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 var $30=$i;
 var $31=$3;
 HEAP32[(($31)>>2)]=$30;
 var $32=$i;
 var $33=$1;
 var $34=(($33+($32<<1))|0);
 var $35=HEAP16[(($34)>>1)];
 var $36=($35&65535);
 $low=$36;
 label=6;break;
 case 6: 
 var $38=$i;
 var $39=$1;
 var $40=(($39+($38<<1))|0);
 var $41=HEAP16[(($40)>>1)];
 var $42=($41&65535);
 var $43=$high;
 var $44=($42|0)<($43|0);
 if($44){label=7;break;}else{label=9;break;}
 case 7: 
 var $46=$i;
 var $47=$1;
 var $48=(($47+($46<<1))|0);
 var $49=HEAP16[(($48)>>1)];
 var $50=($49&65535);
 var $51=$2;
 var $52=$1;
 var $53=(($52+($51<<1))|0);
 var $54=HEAP16[(($53)>>1)];
 var $55=($54&65535);
 var $56=($50|0)>($55|0);
 if($56){label=8;break;}else{label=9;break;}
 case 8: 
 var $58=$i;
 var $59=$4;
 HEAP32[(($59)>>2)]=$58;
 var $60=$i;
 var $61=$1;
 var $62=(($61+($60<<1))|0);
 var $63=HEAP16[(($62)>>1)];
 var $64=($63&65535);
 $high=$64;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $67=$i;
 var $68=((($67)+(1))|0);
 $i=$68;
 label=2;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _flush_packet($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$f;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=_get8_packet_raw($3);
 var $5=($4|0)!=-1;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _init_blocksize($f,$b,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $n2;
 var $n4;
 var $n8;
 $2=$f;
 $3=$b;
 $4=$n;
 var $5=$4;
 var $6=$5>>1;
 $n2=$6;
 var $7=$4;
 var $8=$7>>2;
 $n4=$8;
 var $9=$4;
 var $10=$9>>3;
 $n8=$10;
 var $11=$2;
 var $12=$n2;
 var $13=($12<<2);
 var $14=_setup_malloc($11,$13);
 var $15=$14;
 var $16=$3;
 var $17=$2;
 var $18=(($17+832)|0);
 var $19=(($18+($16<<2))|0);
 HEAP32[(($19)>>2)]=$15;
 var $20=$2;
 var $21=$n2;
 var $22=($21<<2);
 var $23=_setup_malloc($20,$22);
 var $24=$23;
 var $25=$3;
 var $26=$2;
 var $27=(($26+840)|0);
 var $28=(($27+($25<<2))|0);
 HEAP32[(($28)>>2)]=$24;
 var $29=$2;
 var $30=$n4;
 var $31=($30<<2);
 var $32=_setup_malloc($29,$31);
 var $33=$32;
 var $34=$3;
 var $35=$2;
 var $36=(($35+848)|0);
 var $37=(($36+($34<<2))|0);
 HEAP32[(($37)>>2)]=$33;
 var $38=$3;
 var $39=$2;
 var $40=(($39+832)|0);
 var $41=(($40+($38<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)!=0;
 if($43){label=2;break;}else{label=4;break;}
 case 2: 
 var $45=$3;
 var $46=$2;
 var $47=(($46+840)|0);
 var $48=(($47+($45<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($49|0)!=0;
 if($50){label=3;break;}else{label=4;break;}
 case 3: 
 var $52=$3;
 var $53=$2;
 var $54=(($53+848)|0);
 var $55=(($54+($52<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)!=0;
 if($57){label=5;break;}else{label=4;break;}
 case 4: 
 var $59=$2;
 var $60=_error($59,3);
 $1=$60;
 label=10;break;
 case 5: 
 var $62=$4;
 var $63=$3;
 var $64=$2;
 var $65=(($64+832)|0);
 var $66=(($65+($63<<2))|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$3;
 var $69=$2;
 var $70=(($69+840)|0);
 var $71=(($70+($68<<2))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$3;
 var $74=$2;
 var $75=(($74+848)|0);
 var $76=(($75+($73<<2))|0);
 var $77=HEAP32[(($76)>>2)];
 _compute_twiddle_factors($62,$67,$72,$77);
 var $78=$2;
 var $79=$n2;
 var $80=($79<<2);
 var $81=_setup_malloc($78,$80);
 var $82=$81;
 var $83=$3;
 var $84=$2;
 var $85=(($84+856)|0);
 var $86=(($85+($83<<2))|0);
 HEAP32[(($86)>>2)]=$82;
 var $87=$3;
 var $88=$2;
 var $89=(($88+856)|0);
 var $90=(($89+($87<<2))|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($91|0)!=0;
 if($92){label=7;break;}else{label=6;break;}
 case 6: 
 var $94=$2;
 var $95=_error($94,3);
 $1=$95;
 label=10;break;
 case 7: 
 var $97=$4;
 var $98=$3;
 var $99=$2;
 var $100=(($99+856)|0);
 var $101=(($100+($98<<2))|0);
 var $102=HEAP32[(($101)>>2)];
 _compute_window($97,$102);
 var $103=$2;
 var $104=$n8;
 var $105=($104<<1);
 var $106=_setup_malloc($103,$105);
 var $107=$106;
 var $108=$3;
 var $109=$2;
 var $110=(($109+864)|0);
 var $111=(($110+($108<<2))|0);
 HEAP32[(($111)>>2)]=$107;
 var $112=$3;
 var $113=$2;
 var $114=(($113+864)|0);
 var $115=(($114+($112<<2))|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($116|0)!=0;
 if($117){label=9;break;}else{label=8;break;}
 case 8: 
 var $119=$2;
 var $120=_error($119,3);
 $1=$120;
 label=10;break;
 case 9: 
 var $122=$4;
 var $123=$3;
 var $124=$2;
 var $125=(($124+864)|0);
 var $126=(($125+($123<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 _compute_bitreverse($122,$127);
 $1=1;
 label=10;break;
 case 10: 
 var $129=$1;
 STACKTOP=sp;return $129;
  default: assert(0, "bad label: " + label);
 }
}
function _compute_twiddle_factors($n,$A,$B,$C){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $n4;
 var $n8;
 var $k;
 var $k2;
 $1=$n;
 $2=$A;
 $3=$B;
 $4=$C;
 var $5=$1;
 var $6=$5>>2;
 $n4=$6;
 var $7=$1;
 var $8=$7>>3;
 $n8=$8;
 $k2=0;
 $k=0;
 label=2;break;
 case 2: 
 var $10=$k;
 var $11=$n4;
 var $12=($10|0)<($11|0);
 if($12){label=3;break;}else{label=5;break;}
 case 3: 
 var $14=$k;
 var $15=($14<<2);
 var $16=($15|0);
 var $17=($16)*((3.141592653589793));
 var $18=$1;
 var $19=($18|0);
 var $20=($17)/($19);
 var $21=Math_cos($20);
 var $22=$21;
 var $23=$k2;
 var $24=$2;
 var $25=(($24+($23<<2))|0);
 HEAPF32[(($25)>>2)]=$22;
 var $26=$k;
 var $27=($26<<2);
 var $28=($27|0);
 var $29=($28)*((3.141592653589793));
 var $30=$1;
 var $31=($30|0);
 var $32=($29)/($31);
 var $33=Math_sin($32);
 var $34=((-.0))-($33);
 var $35=$34;
 var $36=$k2;
 var $37=((($36)+(1))|0);
 var $38=$2;
 var $39=(($38+($37<<2))|0);
 HEAPF32[(($39)>>2)]=$35;
 var $40=$k2;
 var $41=((($40)+(1))|0);
 var $42=($41|0);
 var $43=($42)*((3.141592653589793));
 var $44=$1;
 var $45=($44|0);
 var $46=($43)/($45);
 var $47=($46)/(2);
 var $48=Math_cos($47);
 var $49=$48;
 var $50=($49)*((0.5));
 var $51=$k2;
 var $52=$3;
 var $53=(($52+($51<<2))|0);
 HEAPF32[(($53)>>2)]=$50;
 var $54=$k2;
 var $55=((($54)+(1))|0);
 var $56=($55|0);
 var $57=($56)*((3.141592653589793));
 var $58=$1;
 var $59=($58|0);
 var $60=($57)/($59);
 var $61=($60)/(2);
 var $62=Math_sin($61);
 var $63=$62;
 var $64=($63)*((0.5));
 var $65=$k2;
 var $66=((($65)+(1))|0);
 var $67=$3;
 var $68=(($67+($66<<2))|0);
 HEAPF32[(($68)>>2)]=$64;
 label=4;break;
 case 4: 
 var $70=$k;
 var $71=((($70)+(1))|0);
 $k=$71;
 var $72=$k2;
 var $73=((($72)+(2))|0);
 $k2=$73;
 label=2;break;
 case 5: 
 $k2=0;
 $k=0;
 label=6;break;
 case 6: 
 var $76=$k;
 var $77=$n8;
 var $78=($76|0)<($77|0);
 if($78){label=7;break;}else{label=9;break;}
 case 7: 
 var $80=$k2;
 var $81=((($80)+(1))|0);
 var $82=($81<<1);
 var $83=($82|0);
 var $84=($83)*((3.141592653589793));
 var $85=$1;
 var $86=($85|0);
 var $87=($84)/($86);
 var $88=Math_cos($87);
 var $89=$88;
 var $90=$k2;
 var $91=$4;
 var $92=(($91+($90<<2))|0);
 HEAPF32[(($92)>>2)]=$89;
 var $93=$k2;
 var $94=((($93)+(1))|0);
 var $95=($94<<1);
 var $96=($95|0);
 var $97=($96)*((3.141592653589793));
 var $98=$1;
 var $99=($98|0);
 var $100=($97)/($99);
 var $101=Math_sin($100);
 var $102=((-.0))-($101);
 var $103=$102;
 var $104=$k2;
 var $105=((($104)+(1))|0);
 var $106=$4;
 var $107=(($106+($105<<2))|0);
 HEAPF32[(($107)>>2)]=$103;
 label=8;break;
 case 8: 
 var $109=$k;
 var $110=((($109)+(1))|0);
 $k=$110;
 var $111=$k2;
 var $112=((($111)+(2))|0);
 $k2=$112;
 label=6;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _compute_window($n,$window){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $n2;
 var $i;
 $1=$n;
 $2=$window;
 var $3=$1;
 var $4=$3>>1;
 $n2=$4;
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=$n2;
 var $8=($6|0)<($7|0);
 if($8){label=3;break;}else{label=5;break;}
 case 3: 
 var $10=$i;
 var $11=(($10)|0);
 var $12=($11|0);
 var $13=($12)+((0.5));
 var $14=$n2;
 var $15=($14|0);
 var $16=($13)/($15);
 var $17=($16)*((0.5));
 var $18=($17)*((3.141592653589793));
 var $19=Math_sin($18);
 var $20=$19;
 var $21=_square($20);
 var $22=$21;
 var $23=((1.5707963267948966))*($22);
 var $24=Math_sin($23);
 var $25=$24;
 var $26=$i;
 var $27=$2;
 var $28=(($27+($26<<2))|0);
 HEAPF32[(($28)>>2)]=$25;
 label=4;break;
 case 4: 
 var $30=$i;
 var $31=((($30)+(1))|0);
 $i=$31;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _compute_bitreverse($n,$rev){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ld;
 var $i;
 var $n8;
 $1=$n;
 $2=$rev;
 var $3=$1;
 var $4=_ilog($3);
 var $5=((($4)-(1))|0);
 $ld=$5;
 var $6=$1;
 var $7=$6>>3;
 $n8=$7;
 $i=0;
 label=2;break;
 case 2: 
 var $9=$i;
 var $10=$n8;
 var $11=($9|0)<($10|0);
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$i;
 var $14=_bit_reverse($13);
 var $15=$ld;
 var $16=(((32)-($15))|0);
 var $17=((($16)+(3))|0);
 var $18=$14>>>($17>>>0);
 var $19=$18<<2;
 var $20=(($19)&65535);
 var $21=$i;
 var $22=$2;
 var $23=(($22+($21<<1))|0);
 HEAP16[(($23)>>1)]=$20;
 label=4;break;
 case 4: 
 var $25=$i;
 var $26=((($25)+(1))|0);
 $i=$26;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _bit_reverse($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$n;
 var $2=$1;
 var $3=$2&-1431655766;
 var $4=$3>>>1;
 var $5=$1;
 var $6=$5&1431655765;
 var $7=$6<<1;
 var $8=$4|$7;
 $1=$8;
 var $9=$1;
 var $10=$9&-858993460;
 var $11=$10>>>2;
 var $12=$1;
 var $13=$12&858993459;
 var $14=$13<<2;
 var $15=$11|$14;
 $1=$15;
 var $16=$1;
 var $17=$16&-252645136;
 var $18=$17>>>4;
 var $19=$1;
 var $20=$19&252645135;
 var $21=$20<<4;
 var $22=$18|$21;
 $1=$22;
 var $23=$1;
 var $24=$23&-16711936;
 var $25=$24>>>8;
 var $26=$1;
 var $27=$26&16711935;
 var $28=$27<<8;
 var $29=$25|$28;
 $1=$29;
 var $30=$1;
 var $31=$30>>>16;
 var $32=$1;
 var $33=$32<<16;
 var $34=$31|$33;
 STACKTOP=sp;return $34;
}
function _square($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$x;
 var $2=$1;
 var $3=$1;
 var $4=($2)*($3);
 STACKTOP=sp;return $4;
}
function _get8_packet_raw($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$f;
 var $3=$2;
 var $4=(($3+1140)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)!=0;
 if($6){label=8;break;}else{label=2;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+1148)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=11;break;
 case 4: 
 var $14=$2;
 var $15=_next_segment($14);
 var $16=($15|0)!=0;
 if($16){label=6;break;}else{label=5;break;}
 case 5: 
 $1=-1;
 label=11;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $21=$2;
 var $22=(($21+1140)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=($24|0)>0;
 if($25){var $29=1;label=10;break;}else{label=9;break;}
 case 9: 
 ___assert_fail(20864,25552,1177,27840);
 throw "Reached an unreachable!";
 label=10;break;
 case 10: 
 var $29;
 var $30=($29&1);
 var $31=$2;
 var $32=(($31+1140)|0);
 var $33=HEAP8[($32)];
 var $34=((($33)-(1))&255);
 HEAP8[($32)]=$34;
 var $35=$2;
 var $36=(($35+1164)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($37)+(1))|0);
 HEAP32[(($36)>>2)]=$38;
 var $39=$2;
 var $40=_get8($39);
 var $41=($40&255);
 $1=$41;
 label=11;break;
 case 11: 
 var $43=$1;
 STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _include_in_sort($c,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$c;
 $3=$len;
 var $4=$2;
 var $5=(($4+23)|0);
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24)!=0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=$3;
 var $10=($9&255);
 var $11=($10|0)!=255;
 if($11){var $15=1;label=4;break;}else{label=3;break;}
 case 3: 
 ___assert_fail(21328,25552,778,27776);
 throw "Reached an unreachable!";
 label=4;break;
 case 4: 
 var $15;
 var $16=($15&1);
 $1=1;
 label=10;break;
 case 5: 
 var $18=$3;
 var $19=($18&255);
 var $20=($19|0)==255;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=10;break;
 case 7: 
 var $23=$3;
 var $24=($23&255);
 var $25=($24|0)>10;
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 $1=1;
 label=10;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _uint32_compare($p,$q){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $x;
 var $y;
 $1=$p;
 $2=$q;
 var $3=$1;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 $x=$5;
 var $6=$2;
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 $y=$8;
 var $9=$x;
 var $10=$y;
 var $11=($9>>>0)<($10>>>0);
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=-1;label=4;break;
 case 3: 
 var $14=$x;
 var $15=$y;
 var $16=($14>>>0)>($15>>>0);
 var $17=($16&1);
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _add_entry($c,$huff_code,$symbol,$count,$len,$values){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 $1=$c;
 $2=$huff_code;
 $3=$symbol;
 $4=$count;
 $5=$len;
 $6=$values;
 var $7=$1;
 var $8=(($7+23)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)!=0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $12=$2;
 var $13=$3;
 var $14=$1;
 var $15=(($14+32)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+($13<<2))|0);
 HEAP32[(($17)>>2)]=$12;
 label=4;break;
 case 3: 
 var $19=$2;
 var $20=$4;
 var $21=$1;
 var $22=(($21+32)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+($20<<2))|0);
 HEAP32[(($24)>>2)]=$19;
 var $25=$5;
 var $26=(($25)&255);
 var $27=$4;
 var $28=$1;
 var $29=(($28+8)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+$27)|0);
 HEAP8[($31)]=$26;
 var $32=$3;
 var $33=$4;
 var $34=$6;
 var $35=(($34+($33<<2))|0);
 HEAP32[(($35)>>2)]=$32;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _capture_pattern($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$f;
 var $3=$2;
 var $4=_get8($3);
 var $5=($4&255);
 var $6=79!=($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=10;break;
 case 3: 
 var $9=$2;
 var $10=_get8($9);
 var $11=($10&255);
 var $12=103!=($11|0);
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=10;break;
 case 5: 
 var $15=$2;
 var $16=_get8($15);
 var $17=($16&255);
 var $18=103!=($17|0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=10;break;
 case 7: 
 var $21=$2;
 var $22=_get8($21);
 var $23=($22&255);
 var $24=83!=($23|0);
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=10;break;
 case 9: 
 $1=1;
 label=10;break;
 case 10: 
 var $28=$1;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _start_page_no_capturepattern($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $loc0;
 var $loc1;
 var $n;
 var $i;
 var $i1;
 var $len;
 var $p=sp;
 $2=$f;
 var $3=$2;
 var $4=_get8($3);
 var $5=($4&255);
 var $6=0!=($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=_error($8,31);
 $1=$9;
 label=23;break;
 case 3: 
 var $11=$2;
 var $12=_get8($11);
 var $13=$2;
 var $14=(($13+1139)|0);
 HEAP8[($14)]=$12;
 var $15=$2;
 var $16=_get32($15);
 $loc0=$16;
 var $17=$2;
 var $18=_get32($17);
 $loc1=$18;
 var $19=$2;
 var $20=_get32($19);
 var $21=$2;
 var $22=_get32($21);
 $n=$22;
 var $23=$n;
 var $24=$2;
 var $25=(($24+876)|0);
 HEAP32[(($25)>>2)]=$23;
 var $26=$2;
 var $27=_get32($26);
 var $28=$2;
 var $29=_get8($28);
 var $30=($29&255);
 var $31=$2;
 var $32=(($31+880)|0);
 HEAP32[(($32)>>2)]=$30;
 var $33=$2;
 var $34=$2;
 var $35=(($34+884)|0);
 var $36=(($35)|0);
 var $37=$2;
 var $38=(($37+880)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=_getn($33,$36,$39);
 var $41=($40|0)!=0;
 if($41){label=5;break;}else{label=4;break;}
 case 4: 
 var $43=$2;
 var $44=_error($43,10);
 $1=$44;
 label=23;break;
 case 5: 
 var $46=$2;
 var $47=(($46+1168)|0);
 HEAP32[(($47)>>2)]=-2;
 var $48=$loc0;
 var $49=($48|0)!=-1;
 if($49){label=7;break;}else{label=6;break;}
 case 6: 
 var $51=$loc1;
 var $52=($51|0)!=-1;
 if($52){label=7;break;}else{label=16;break;}
 case 7: 
 var $54=$2;
 var $55=(($54+880)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=((($56)-(1))|0);
 $i=$57;
 label=8;break;
 case 8: 
 var $59=$i;
 var $60=($59|0)>=0;
 if($60){label=9;break;}else{label=13;break;}
 case 9: 
 var $62=$i;
 var $63=$2;
 var $64=(($63+884)|0);
 var $65=(($64+$62)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=($67|0)<255;
 if($68){label=10;break;}else{label=11;break;}
 case 10: 
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 var $72=$i;
 var $73=((($72)-(1))|0);
 $i=$73;
 label=8;break;
 case 13: 
 var $75=$i;
 var $76=($75|0)>=0;
 if($76){label=14;break;}else{label=15;break;}
 case 14: 
 var $78=$i;
 var $79=$2;
 var $80=(($79+1168)|0);
 HEAP32[(($80)>>2)]=$78;
 var $81=$loc0;
 var $82=$2;
 var $83=(($82+1172)|0);
 HEAP32[(($83)>>2)]=$81;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $86=$2;
 var $87=(($86+1141)|0);
 var $88=HEAP8[($87)];
 var $89=(($88<<24)>>24)!=0;
 if($89){label=17;break;}else{label=22;break;}
 case 17: 
 $len=0;
 $i1=0;
 label=18;break;
 case 18: 
 var $92=$i1;
 var $93=$2;
 var $94=(($93+880)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($92|0)<($95|0);
 if($96){label=19;break;}else{label=21;break;}
 case 19: 
 var $98=$i1;
 var $99=$2;
 var $100=(($99+884)|0);
 var $101=(($100+$98)|0);
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$len;
 var $105=((($104)+($103))|0);
 $len=$105;
 label=20;break;
 case 20: 
 var $107=$i1;
 var $108=((($107)+(1))|0);
 $i1=$108;
 label=18;break;
 case 21: 
 var $110=$2;
 var $111=(($110+880)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=((($112)+(27))|0);
 var $114=$len;
 var $115=((($114)+($113))|0);
 $len=$115;
 var $116=$2;
 var $117=(($116+40)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($p)|0);
 HEAP32[(($119)>>2)]=$118;
 var $120=(($p)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$len;
 var $123=((($121)+($122))|0);
 var $124=(($p+4)|0);
 HEAP32[(($124)>>2)]=$123;
 var $125=(($p)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($p+8)|0);
 HEAP32[(($127)>>2)]=$126;
 var $128=(($p+12)|0);
 HEAP32[(($128)>>2)]=0;
 var $129=$loc0;
 var $130=(($p+16)|0);
 HEAP32[(($130)>>2)]=$129;
 var $131=$2;
 var $132=(($131+44)|0);
 var $133=$132;
 var $134=$p;
 assert(20 % 1 === 0);HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];HEAP32[((($133)+(8))>>2)]=HEAP32[((($134)+(8))>>2)];HEAP32[((($133)+(12))>>2)]=HEAP32[((($134)+(12))>>2)];HEAP32[((($133)+(16))>>2)]=HEAP32[((($134)+(16))>>2)];
 label=22;break;
 case 22: 
 var $136=$2;
 var $137=(($136+1144)|0);
 HEAP32[(($137)>>2)]=0;
 $1=1;
 label=23;break;
 case 23: 
 var $139=$1;
 STACKTOP=sp;return $139;
  default: assert(0, "bad label: " + label);
 }
}
function _get_window($f,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$f;
 $3=$len;
 var $4=$3;
 var $5=$4<<1;
 $3=$5;
 var $6=$3;
 var $7=$2;
 var $8=(($7+116)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($6|0)==($9|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$2;
 var $13=(($12+856)|0);
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 $1=$15;
 label=6;break;
 case 3: 
 var $17=$3;
 var $18=$2;
 var $19=(($18+120)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($17|0)==($20|0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$2;
 var $24=(($23+856)|0);
 var $25=(($24+4)|0);
 var $26=HEAP32[(($25)>>2)];
 $1=$26;
 label=6;break;
 case 5: 
 ___assert_fail(20616,25552,2801,27824);
 throw "Reached an unreachable!";
 case 6: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_decode_initial($f,$p_left_start,$p_left_end,$p_right_start,$p_right_end,$mode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $m;
 var $i;
 var $n;
 var $prev;
 var $next;
 var $window_center;
 $2=$f;
 $3=$p_left_start;
 $4=$p_left_end;
 $5=$p_right_start;
 $6=$p_right_end;
 $7=$mode;
 var $8=$2;
 var $9=(($8+1192)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$2;
 var $11=(($10+1188)|0);
 HEAP32[(($11)>>2)]=0;
 label=2;break;
 case 2: 
 var $13=$2;
 var $14=(($13+100)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)!=0;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=27;break;
 case 4: 
 var $19=$2;
 var $20=_maybe_start_packet($19);
 var $21=($20|0)!=0;
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 $1=0;
 label=27;break;
 case 6: 
 var $24=$2;
 var $25=_get_bits835($24,1);
 var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 label=8;break;
 case 8: 
 var $29=$2;
 var $30=_get8_packet($29);
 var $31=-1!=($30|0);
 if($31){label=9;break;}else{label=10;break;}
 case 9: 
 label=8;break;
 case 10: 
 label=2;break;
 case 11: 
 var $35=$2;
 var $36=$2;
 var $37=(($36+412)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=((($38)-(1))|0);
 var $40=_ilog($39);
 var $41=_get_bits835($35,$40);
 $i=$41;
 var $42=$i;
 var $43=($42|0)==-1;
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 $1=0;
 label=27;break;
 case 13: 
 var $46=$i;
 var $47=$2;
 var $48=(($47+412)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($46|0)>=($49|0);
 if($50){label=14;break;}else{label=15;break;}
 case 14: 
 $1=0;
 label=27;break;
 case 15: 
 var $53=$i;
 var $54=$7;
 HEAP32[(($54)>>2)]=$53;
 var $55=$2;
 var $56=(($55+416)|0);
 var $57=(($56)|0);
 var $58=$i;
 var $59=(($57+((($58)*(6))&-1))|0);
 $m=$59;
 var $60=$m;
 var $61=(($60)|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)!=0;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 var $65=$2;
 var $66=(($65+120)|0);
 var $67=HEAP32[(($66)>>2)];
 $n=$67;
 var $68=$2;
 var $69=_get_bits835($68,1);
 $prev=$69;
 var $70=$2;
 var $71=_get_bits835($70,1);
 $next=$71;
 label=18;break;
 case 17: 
 $next=0;
 $prev=0;
 var $73=$2;
 var $74=(($73+116)|0);
 var $75=HEAP32[(($74)>>2)];
 $n=$75;
 label=18;break;
 case 18: 
 var $77=$n;
 var $78=$77>>1;
 $window_center=$78;
 var $79=$m;
 var $80=(($79)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=($82|0)!=0;
 if($83){label=19;break;}else{label=21;break;}
 case 19: 
 var $85=$prev;
 var $86=($85|0)!=0;
 if($86){label=21;break;}else{label=20;break;}
 case 20: 
 var $88=$n;
 var $89=$2;
 var $90=(($89+116)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=((($88)-($91))|0);
 var $93=$92>>2;
 var $94=$3;
 HEAP32[(($94)>>2)]=$93;
 var $95=$n;
 var $96=$2;
 var $97=(($96+116)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=((($95)+($98))|0);
 var $100=$99>>2;
 var $101=$4;
 HEAP32[(($101)>>2)]=$100;
 label=22;break;
 case 21: 
 var $103=$3;
 HEAP32[(($103)>>2)]=0;
 var $104=$window_center;
 var $105=$4;
 HEAP32[(($105)>>2)]=$104;
 label=22;break;
 case 22: 
 var $107=$m;
 var $108=(($107)|0);
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=($110|0)!=0;
 if($111){label=23;break;}else{label=25;break;}
 case 23: 
 var $113=$next;
 var $114=($113|0)!=0;
 if($114){label=25;break;}else{label=24;break;}
 case 24: 
 var $116=$n;
 var $117=((($116)*(3))&-1);
 var $118=$2;
 var $119=(($118+116)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=((($117)-($120))|0);
 var $122=$121>>2;
 var $123=$5;
 HEAP32[(($123)>>2)]=$122;
 var $124=$n;
 var $125=((($124)*(3))&-1);
 var $126=$2;
 var $127=(($126+116)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=((($125)+($128))|0);
 var $130=$129>>2;
 var $131=$6;
 HEAP32[(($131)>>2)]=$130;
 label=26;break;
 case 25: 
 var $133=$window_center;
 var $134=$5;
 HEAP32[(($134)>>2)]=$133;
 var $135=$n;
 var $136=$6;
 HEAP32[(($136)>>2)]=$135;
 label=26;break;
 case 26: 
 $1=1;
 label=27;break;
 case 27: 
 var $139=$1;
 STACKTOP=sp;return $139;
  default: assert(0, "bad label: " + label);
 }
}
function _vorbis_decode_packet_rest($f,$len,$m,$left_start,$left_end,$right_start,$right_end,$p_left){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2568)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $map;
 var $i;
 var $j;
 var $k;
 var $n;
 var $n2;
 var $zero_channel=sp;
 var $really_zero_channel=(sp)+(1024);
 var $window_center;
 var $s;
 var $floor;
 var $g;
 var $finalY;
 var $step2_flag=(sp)+(2048);
 var $range;
 var $offset;
 var $pclass;
 var $cdim;
 var $cbits;
 var $csub;
 var $cval;
 var $c;
 var $n1;
 var $book;
 var $temp;
 var $c2;
 var $n3;
 var $low;
 var $high;
 var $pred;
 var $highroom;
 var $lowroom;
 var $room;
 var $val;
 var $residue_buffers=(sp)+(2304);
 var $r;
 var $t;
 var $do_not_decode=(sp)+(2312);
 var $ch;
 var $n24;
 var $m5;
 var $a;
 var $a2;
 var $m2;
 var $current_end;
 $2=$f;
 $3=$len;
 $4=$m;
 $5=$left_start;
 $6=$left_end;
 $7=$right_start;
 $8=$right_end;
 $9=$p_left;
 var $10=$4;
 var $11=(($10)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=$2;
 var $15=(($14+108)|0);
 var $16=(($15+($13<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 $n=$17;
 var $18=$n;
 var $19=$18>>1;
 $window_center=$19;
 var $20=$4;
 var $21=(($20+1)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$2;
 var $25=(($24+408)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+((($23)*(40))&-1))|0);
 $map=$27;
 var $28=$n;
 var $29=$28>>1;
 $n2=$29;
 $i=0;
 label=2;break;
 case 2: 
 var $31=$i;
 var $32=$2;
 var $33=(($32+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($31|0)<($34|0);
 if($35){label=3;break;}else{label=70;break;}
 case 3: 
 var $37=$i;
 var $38=$map;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+((($37)*(3))&-1))|0);
 var $42=(($41+2)|0);
 var $43=HEAP8[($42)];
 var $44=($43&255);
 $s=$44;
 var $45=$i;
 var $46=(($zero_channel+($45<<2))|0);
 HEAP32[(($46)>>2)]=0;
 var $47=$s;
 var $48=$map;
 var $49=(($48+9)|0);
 var $50=(($49+$47)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 $floor=$52;
 var $53=$floor;
 var $54=$2;
 var $55=(($54+136)|0);
 var $56=(($55+($53<<1))|0);
 var $57=HEAP16[(($56)>>1)];
 var $58=($57&65535);
 var $59=($58|0)==0;
 if($59){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=$2;
 var $62=_error($61,21);
 $1=$62;
 label=140;break;
 case 5: 
 var $64=$floor;
 var $65=$2;
 var $66=(($65+264)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+((($64)*(1596))&-1))|0);
 var $69=$68;
 $g=$69;
 var $70=$2;
 var $71=_get_bits835($70,1);
 var $72=($71|0)!=0;
 if($72){label=6;break;}else{label=65;break;}
 case 6: 
 var $74=$g;
 var $75=(($74+1588)|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=((($77)-(1))|0);
 var $79=((88+($78<<2))|0);
 var $80=HEAP32[(($79)>>2)];
 $range=$80;
 $offset=2;
 var $81=$i;
 var $82=$2;
 var $83=(($82+820)|0);
 var $84=(($83+($81<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 $finalY=$85;
 var $86=$2;
 var $87=$range;
 var $88=_ilog($87);
 var $89=((($88)-(1))|0);
 var $90=_get_bits835($86,$89);
 var $91=(($90)&65535);
 var $92=$finalY;
 var $93=(($92)|0);
 HEAP16[(($93)>>1)]=$91;
 var $94=$2;
 var $95=$range;
 var $96=_ilog($95);
 var $97=((($96)-(1))|0);
 var $98=_get_bits835($94,$97);
 var $99=(($98)&65535);
 var $100=$finalY;
 var $101=(($100+2)|0);
 HEAP16[(($101)>>1)]=$99;
 $j=0;
 label=7;break;
 case 7: 
 var $103=$j;
 var $104=$g;
 var $105=(($104)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=($103|0)<($107|0);
 if($108){label=8;break;}else{label=37;break;}
 case 8: 
 var $110=$j;
 var $111=$g;
 var $112=(($111+1)|0);
 var $113=(($112+$110)|0);
 var $114=HEAP8[($113)];
 var $115=($114&255);
 $pclass=$115;
 var $116=$pclass;
 var $117=$g;
 var $118=(($117+33)|0);
 var $119=(($118+$116)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 $cdim=$121;
 var $122=$pclass;
 var $123=$g;
 var $124=(($123+49)|0);
 var $125=(($124+$122)|0);
 var $126=HEAP8[($125)];
 var $127=($126&255);
 $cbits=$127;
 var $128=$cbits;
 var $129=1<<$128;
 var $130=((($129)-(1))|0);
 $csub=$130;
 $cval=0;
 var $131=$cbits;
 var $132=($131|0)!=0;
 if($132){label=9;break;}else{label=19;break;}
 case 9: 
 var $134=$2;
 var $135=(($134+128)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$pclass;
 var $138=$g;
 var $139=(($138+65)|0);
 var $140=(($139+$137)|0);
 var $141=HEAP8[($140)];
 var $142=($141&255);
 var $143=(($136+((($142)*(2096))&-1))|0);
 $c=$143;
 var $144=$2;
 var $145=(($144+1160)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)<10;
 if($147){label=10;break;}else{label=11;break;}
 case 10: 
 var $149=$2;
 _prep_huffman($149);
 label=11;break;
 case 11: 
 var $151=$2;
 var $152=(($151+1156)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153&1023;
 $cval=$154;
 var $155=$cval;
 var $156=$c;
 var $157=(($156+36)|0);
 var $158=(($157+($155<<1))|0);
 var $159=HEAP16[(($158)>>1)];
 var $160=(($159<<16)>>16);
 $cval=$160;
 var $161=$cval;
 var $162=($161|0)>=0;
 if($162){label=12;break;}else{label=15;break;}
 case 12: 
 var $164=$cval;
 var $165=$c;
 var $166=(($165+8)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+$164)|0);
 var $169=HEAP8[($168)];
 var $170=($169&255);
 $n1=$170;
 var $171=$n1;
 var $172=$2;
 var $173=(($172+1156)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174>>>($171>>>0);
 HEAP32[(($173)>>2)]=$175;
 var $176=$n1;
 var $177=$2;
 var $178=(($177+1160)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=((($179)-($176))|0);
 HEAP32[(($178)>>2)]=$180;
 var $181=$2;
 var $182=(($181+1160)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)<0;
 if($184){label=13;break;}else{label=14;break;}
 case 13: 
 var $186=$2;
 var $187=(($186+1160)|0);
 HEAP32[(($187)>>2)]=0;
 $cval=-1;
 label=14;break;
 case 14: 
 label=16;break;
 case 15: 
 var $190=$2;
 var $191=$c;
 var $192=_codebook_decode_scalar_raw($190,$191);
 $cval=$192;
 label=16;break;
 case 16: 
 var $194=$c;
 var $195=(($194+23)|0);
 var $196=HEAP8[($195)];
 var $197=(($196<<24)>>24)!=0;
 if($197){label=17;break;}else{label=18;break;}
 case 17: 
 var $199=$cval;
 var $200=$c;
 var $201=(($200+2088)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+($199<<2))|0);
 var $204=HEAP32[(($203)>>2)];
 $cval=$204;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 $k=0;
 label=20;break;
 case 20: 
 var $208=$k;
 var $209=$cdim;
 var $210=($208|0)<($209|0);
 if($210){label=21;break;}else{label=35;break;}
 case 21: 
 var $212=$cval;
 var $213=$csub;
 var $214=$212&$213;
 var $215=$pclass;
 var $216=$g;
 var $217=(($216+82)|0);
 var $218=(($217+($215<<4))|0);
 var $219=(($218+($214<<1))|0);
 var $220=HEAP16[(($219)>>1)];
 var $221=(($220<<16)>>16);
 $book=$221;
 var $222=$cval;
 var $223=$cbits;
 var $224=$222>>($223|0);
 $cval=$224;
 var $225=$book;
 var $226=($225|0)>=0;
 if($226){label=22;break;}else{label=32;break;}
 case 22: 
 var $228=$2;
 var $229=(($228+128)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=$book;
 var $232=(($230+((($231)*(2096))&-1))|0);
 $c2=$232;
 var $233=$2;
 var $234=(($233+1160)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=($235|0)<10;
 if($236){label=23;break;}else{label=24;break;}
 case 23: 
 var $238=$2;
 _prep_huffman($238);
 label=24;break;
 case 24: 
 var $240=$2;
 var $241=(($240+1156)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=$242&1023;
 $temp=$243;
 var $244=$temp;
 var $245=$c2;
 var $246=(($245+36)|0);
 var $247=(($246+($244<<1))|0);
 var $248=HEAP16[(($247)>>1)];
 var $249=(($248<<16)>>16);
 $temp=$249;
 var $250=$temp;
 var $251=($250|0)>=0;
 if($251){label=25;break;}else{label=28;break;}
 case 25: 
 var $253=$temp;
 var $254=$c2;
 var $255=(($254+8)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+$253)|0);
 var $258=HEAP8[($257)];
 var $259=($258&255);
 $n3=$259;
 var $260=$n3;
 var $261=$2;
 var $262=(($261+1156)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=$263>>>($260>>>0);
 HEAP32[(($262)>>2)]=$264;
 var $265=$n3;
 var $266=$2;
 var $267=(($266+1160)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=((($268)-($265))|0);
 HEAP32[(($267)>>2)]=$269;
 var $270=$2;
 var $271=(($270+1160)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=($272|0)<0;
 if($273){label=26;break;}else{label=27;break;}
 case 26: 
 var $275=$2;
 var $276=(($275+1160)|0);
 HEAP32[(($276)>>2)]=0;
 $temp=-1;
 label=27;break;
 case 27: 
 label=29;break;
 case 28: 
 var $279=$2;
 var $280=$c2;
 var $281=_codebook_decode_scalar_raw($279,$280);
 $temp=$281;
 label=29;break;
 case 29: 
 var $283=$c2;
 var $284=(($283+23)|0);
 var $285=HEAP8[($284)];
 var $286=(($285<<24)>>24)!=0;
 if($286){label=30;break;}else{label=31;break;}
 case 30: 
 var $288=$temp;
 var $289=$c2;
 var $290=(($289+2088)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+($288<<2))|0);
 var $293=HEAP32[(($292)>>2)];
 $temp=$293;
 label=31;break;
 case 31: 
 var $295=$temp;
 var $296=(($295)&65535);
 var $297=$offset;
 var $298=((($297)+(1))|0);
 $offset=$298;
 var $299=$finalY;
 var $300=(($299+($297<<1))|0);
 HEAP16[(($300)>>1)]=$296;
 label=33;break;
 case 32: 
 var $302=$offset;
 var $303=((($302)+(1))|0);
 $offset=$303;
 var $304=$finalY;
 var $305=(($304+($302<<1))|0);
 HEAP16[(($305)>>1)]=0;
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $308=$k;
 var $309=((($308)+(1))|0);
 $k=$309;
 label=20;break;
 case 35: 
 label=36;break;
 case 36: 
 var $312=$j;
 var $313=((($312)+(1))|0);
 $j=$313;
 label=7;break;
 case 37: 
 var $315=$2;
 var $316=(($315+1160)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=($317|0)==-1;
 if($318){label=38;break;}else{label=39;break;}
 case 38: 
 label=66;break;
 case 39: 
 var $321=(($step2_flag+1)|0);
 HEAP8[($321)]=1;
 var $322=(($step2_flag)|0);
 HEAP8[($322)]=1;
 $j=2;
 label=40;break;
 case 40: 
 var $324=$j;
 var $325=$g;
 var $326=(($325+1592)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=($324|0)<($327|0);
 if($328){label=41;break;}else{label=58;break;}
 case 41: 
 var $330=$j;
 var $331=$g;
 var $332=(($331+1088)|0);
 var $333=(($332+($330<<1))|0);
 var $334=(($333)|0);
 var $335=HEAP8[($334)];
 var $336=($335&255);
 $low=$336;
 var $337=$j;
 var $338=$g;
 var $339=(($338+1088)|0);
 var $340=(($339+($337<<1))|0);
 var $341=(($340+1)|0);
 var $342=HEAP8[($341)];
 var $343=($342&255);
 $high=$343;
 var $344=$j;
 var $345=$g;
 var $346=(($345+338)|0);
 var $347=(($346+($344<<1))|0);
 var $348=HEAP16[(($347)>>1)];
 var $349=($348&65535);
 var $350=$low;
 var $351=$g;
 var $352=(($351+338)|0);
 var $353=(($352+($350<<1))|0);
 var $354=HEAP16[(($353)>>1)];
 var $355=($354&65535);
 var $356=$high;
 var $357=$g;
 var $358=(($357+338)|0);
 var $359=(($358+($356<<1))|0);
 var $360=HEAP16[(($359)>>1)];
 var $361=($360&65535);
 var $362=$low;
 var $363=$finalY;
 var $364=(($363+($362<<1))|0);
 var $365=HEAP16[(($364)>>1)];
 var $366=(($365<<16)>>16);
 var $367=$high;
 var $368=$finalY;
 var $369=(($368+($367<<1))|0);
 var $370=HEAP16[(($369)>>1)];
 var $371=(($370<<16)>>16);
 var $372=_predict_point($349,$355,$361,$366,$371);
 $pred=$372;
 var $373=$j;
 var $374=$finalY;
 var $375=(($374+($373<<1))|0);
 var $376=HEAP16[(($375)>>1)];
 var $377=(($376<<16)>>16);
 $val=$377;
 var $378=$range;
 var $379=$pred;
 var $380=((($378)-($379))|0);
 $highroom=$380;
 var $381=$pred;
 $lowroom=$381;
 var $382=$highroom;
 var $383=$lowroom;
 var $384=($382|0)<($383|0);
 if($384){label=42;break;}else{label=43;break;}
 case 42: 
 var $386=$highroom;
 var $387=($386<<1);
 $room=$387;
 label=44;break;
 case 43: 
 var $389=$lowroom;
 var $390=($389<<1);
 $room=$390;
 label=44;break;
 case 44: 
 var $392=$val;
 var $393=($392|0)!=0;
 if($393){label=45;break;}else{label=55;break;}
 case 45: 
 var $395=$high;
 var $396=(($step2_flag+$395)|0);
 HEAP8[($396)]=1;
 var $397=$low;
 var $398=(($step2_flag+$397)|0);
 HEAP8[($398)]=1;
 var $399=$j;
 var $400=(($step2_flag+$399)|0);
 HEAP8[($400)]=1;
 var $401=$val;
 var $402=$room;
 var $403=($401|0)>=($402|0);
 if($403){label=46;break;}else{label=50;break;}
 case 46: 
 var $405=$highroom;
 var $406=$lowroom;
 var $407=($405|0)>($406|0);
 if($407){label=47;break;}else{label=48;break;}
 case 47: 
 var $409=$val;
 var $410=$lowroom;
 var $411=((($409)-($410))|0);
 var $412=$pred;
 var $413=((($411)+($412))|0);
 var $414=(($413)&65535);
 var $415=$j;
 var $416=$finalY;
 var $417=(($416+($415<<1))|0);
 HEAP16[(($417)>>1)]=$414;
 label=49;break;
 case 48: 
 var $419=$pred;
 var $420=$val;
 var $421=((($419)-($420))|0);
 var $422=$highroom;
 var $423=((($421)+($422))|0);
 var $424=((($423)-(1))|0);
 var $425=(($424)&65535);
 var $426=$j;
 var $427=$finalY;
 var $428=(($427+($426<<1))|0);
 HEAP16[(($428)>>1)]=$425;
 label=49;break;
 case 49: 
 label=54;break;
 case 50: 
 var $431=$val;
 var $432=$431&1;
 var $433=($432|0)!=0;
 if($433){label=51;break;}else{label=52;break;}
 case 51: 
 var $435=$pred;
 var $436=$val;
 var $437=((($436)+(1))|0);
 var $438=$437>>1;
 var $439=((($435)-($438))|0);
 var $440=(($439)&65535);
 var $441=$j;
 var $442=$finalY;
 var $443=(($442+($441<<1))|0);
 HEAP16[(($443)>>1)]=$440;
 label=53;break;
 case 52: 
 var $445=$pred;
 var $446=$val;
 var $447=$446>>1;
 var $448=((($445)+($447))|0);
 var $449=(($448)&65535);
 var $450=$j;
 var $451=$finalY;
 var $452=(($451+($450<<1))|0);
 HEAP16[(($452)>>1)]=$449;
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=56;break;
 case 55: 
 var $456=$j;
 var $457=(($step2_flag+$456)|0);
 HEAP8[($457)]=0;
 var $458=$pred;
 var $459=(($458)&65535);
 var $460=$j;
 var $461=$finalY;
 var $462=(($461+($460<<1))|0);
 HEAP16[(($462)>>1)]=$459;
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $465=$j;
 var $466=((($465)+(1))|0);
 $j=$466;
 label=40;break;
 case 58: 
 $j=0;
 label=59;break;
 case 59: 
 var $469=$j;
 var $470=$g;
 var $471=(($470+1592)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=($469|0)<($472|0);
 if($473){label=60;break;}else{label=64;break;}
 case 60: 
 var $475=$j;
 var $476=(($step2_flag+$475)|0);
 var $477=HEAP8[($476)];
 var $478=(($477<<24)>>24)!=0;
 if($478){label=62;break;}else{label=61;break;}
 case 61: 
 var $480=$j;
 var $481=$finalY;
 var $482=(($481+($480<<1))|0);
 HEAP16[(($482)>>1)]=-1;
 label=62;break;
 case 62: 
 label=63;break;
 case 63: 
 var $485=$j;
 var $486=((($485)+(1))|0);
 $j=$486;
 label=59;break;
 case 64: 
 label=67;break;
 case 65: 
 label=66;break;
 case 66: 
 var $490=$i;
 var $491=(($zero_channel+($490<<2))|0);
 HEAP32[(($491)>>2)]=1;
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 var $495=$i;
 var $496=((($495)+(1))|0);
 $i=$496;
 label=2;break;
 case 70: 
 var $498=$really_zero_channel;
 var $499=$zero_channel;
 var $500=$2;
 var $501=(($500+4)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=($502<<2);
 assert($503 % 1 === 0);(_memcpy($498, $499, $503)|0);
 $i=0;
 label=71;break;
 case 71: 
 var $505=$i;
 var $506=$map;
 var $507=(($506)|0);
 var $508=HEAP16[(($507)>>1)];
 var $509=($508&65535);
 var $510=($505|0)<($509|0);
 if($510){label=72;break;}else{label=77;break;}
 case 72: 
 var $512=$i;
 var $513=$map;
 var $514=(($513+4)|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=(($515+((($512)*(3))&-1))|0);
 var $517=(($516)|0);
 var $518=HEAP8[($517)];
 var $519=($518&255);
 var $520=(($zero_channel+($519<<2))|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=($521|0)!=0;
 if($522){label=73;break;}else{label=74;break;}
 case 73: 
 var $524=$i;
 var $525=$map;
 var $526=(($525+4)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=(($527+((($524)*(3))&-1))|0);
 var $529=(($528+1)|0);
 var $530=HEAP8[($529)];
 var $531=($530&255);
 var $532=(($zero_channel+($531<<2))|0);
 var $533=HEAP32[(($532)>>2)];
 var $534=($533|0)!=0;
 if($534){label=75;break;}else{label=74;break;}
 case 74: 
 var $536=$i;
 var $537=$map;
 var $538=(($537+4)|0);
 var $539=HEAP32[(($538)>>2)];
 var $540=(($539+((($536)*(3))&-1))|0);
 var $541=(($540+1)|0);
 var $542=HEAP8[($541)];
 var $543=($542&255);
 var $544=(($zero_channel+($543<<2))|0);
 HEAP32[(($544)>>2)]=0;
 var $545=$i;
 var $546=$map;
 var $547=(($546+4)|0);
 var $548=HEAP32[(($547)>>2)];
 var $549=(($548+((($545)*(3))&-1))|0);
 var $550=(($549)|0);
 var $551=HEAP8[($550)];
 var $552=($551&255);
 var $553=(($zero_channel+($552<<2))|0);
 HEAP32[(($553)>>2)]=0;
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 var $556=$i;
 var $557=((($556)+(1))|0);
 $i=$557;
 label=71;break;
 case 77: 
 $i=0;
 label=78;break;
 case 78: 
 var $560=$i;
 var $561=$map;
 var $562=(($561+8)|0);
 var $563=HEAP8[($562)];
 var $564=($563&255);
 var $565=($560|0)<($564|0);
 if($565){label=79;break;}else{label=90;break;}
 case 79: 
 $ch=0;
 $j=0;
 label=80;break;
 case 80: 
 var $568=$j;
 var $569=$2;
 var $570=(($569+4)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=($568|0)<($571|0);
 if($572){label=81;break;}else{label=88;break;}
 case 81: 
 var $574=$j;
 var $575=$map;
 var $576=(($575+4)|0);
 var $577=HEAP32[(($576)>>2)];
 var $578=(($577+((($574)*(3))&-1))|0);
 var $579=(($578+2)|0);
 var $580=HEAP8[($579)];
 var $581=($580&255);
 var $582=$i;
 var $583=($581|0)==($582|0);
 if($583){label=82;break;}else{label=86;break;}
 case 82: 
 var $585=$j;
 var $586=(($zero_channel+($585<<2))|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=($587|0)!=0;
 if($588){label=83;break;}else{label=84;break;}
 case 83: 
 var $590=$ch;
 var $591=(($do_not_decode+$590)|0);
 HEAP8[($591)]=1;
 var $592=$ch;
 var $593=(($residue_buffers+($592<<2))|0);
 HEAP32[(($593)>>2)]=0;
 label=85;break;
 case 84: 
 var $595=$ch;
 var $596=(($do_not_decode+$595)|0);
 HEAP8[($596)]=0;
 var $597=$j;
 var $598=$2;
 var $599=(($598+804)|0);
 var $600=(($599+($597<<2))|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=$ch;
 var $603=(($residue_buffers+($602<<2))|0);
 HEAP32[(($603)>>2)]=$601;
 label=85;break;
 case 85: 
 var $605=$ch;
 var $606=((($605)+(1))|0);
 $ch=$606;
 label=86;break;
 case 86: 
 label=87;break;
 case 87: 
 var $609=$j;
 var $610=((($609)+(1))|0);
 $j=$610;
 label=80;break;
 case 88: 
 var $612=$i;
 var $613=$map;
 var $614=(($613+24)|0);
 var $615=(($614+$612)|0);
 var $616=HEAP8[($615)];
 var $617=($616&255);
 $r=$617;
 var $618=$r;
 var $619=$2;
 var $620=(($619+272)|0);
 var $621=(($620+($618<<1))|0);
 var $622=HEAP16[(($621)>>1)];
 var $623=($622&65535);
 $t=$623;
 var $624=$2;
 var $625=(($residue_buffers)|0);
 var $626=$ch;
 var $627=$n2;
 var $628=$r;
 var $629=(($do_not_decode)|0);
 _decode_residue($624,$625,$626,$627,$628,$629);
 label=89;break;
 case 89: 
 var $631=$i;
 var $632=((($631)+(1))|0);
 $i=$632;
 label=78;break;
 case 90: 
 var $634=$map;
 var $635=(($634)|0);
 var $636=HEAP16[(($635)>>1)];
 var $637=($636&65535);
 var $638=((($637)-(1))|0);
 $i=$638;
 label=91;break;
 case 91: 
 var $640=$i;
 var $641=($640|0)>=0;
 if($641){label=92;break;}else{label=107;break;}
 case 92: 
 var $643=$n;
 var $644=$643>>1;
 $n24=$644;
 var $645=$i;
 var $646=$map;
 var $647=(($646+4)|0);
 var $648=HEAP32[(($647)>>2)];
 var $649=(($648+((($645)*(3))&-1))|0);
 var $650=(($649)|0);
 var $651=HEAP8[($650)];
 var $652=($651&255);
 var $653=$2;
 var $654=(($653+804)|0);
 var $655=(($654+($652<<2))|0);
 var $656=HEAP32[(($655)>>2)];
 $m5=$656;
 var $657=$i;
 var $658=$map;
 var $659=(($658+4)|0);
 var $660=HEAP32[(($659)>>2)];
 var $661=(($660+((($657)*(3))&-1))|0);
 var $662=(($661+1)|0);
 var $663=HEAP8[($662)];
 var $664=($663&255);
 var $665=$2;
 var $666=(($665+804)|0);
 var $667=(($666+($664<<2))|0);
 var $668=HEAP32[(($667)>>2)];
 $a=$668;
 $j=0;
 label=93;break;
 case 93: 
 var $670=$j;
 var $671=$n24;
 var $672=($670|0)<($671|0);
 if($672){label=94;break;}else{label=105;break;}
 case 94: 
 var $674=$j;
 var $675=$m5;
 var $676=(($675+($674<<2))|0);
 var $677=HEAPF32[(($676)>>2)];
 var $678=$677>0;
 if($678){label=95;break;}else{label=99;break;}
 case 95: 
 var $680=$j;
 var $681=$a;
 var $682=(($681+($680<<2))|0);
 var $683=HEAPF32[(($682)>>2)];
 var $684=$683>0;
 if($684){label=96;break;}else{label=97;break;}
 case 96: 
 var $686=$j;
 var $687=$m5;
 var $688=(($687+($686<<2))|0);
 var $689=HEAPF32[(($688)>>2)];
 $m2=$689;
 var $690=$j;
 var $691=$m5;
 var $692=(($691+($690<<2))|0);
 var $693=HEAPF32[(($692)>>2)];
 var $694=$j;
 var $695=$a;
 var $696=(($695+($694<<2))|0);
 var $697=HEAPF32[(($696)>>2)];
 var $698=($693)-($697);
 $a2=$698;
 label=98;break;
 case 97: 
 var $700=$j;
 var $701=$m5;
 var $702=(($701+($700<<2))|0);
 var $703=HEAPF32[(($702)>>2)];
 $a2=$703;
 var $704=$j;
 var $705=$m5;
 var $706=(($705+($704<<2))|0);
 var $707=HEAPF32[(($706)>>2)];
 var $708=$j;
 var $709=$a;
 var $710=(($709+($708<<2))|0);
 var $711=HEAPF32[(($710)>>2)];
 var $712=($707)+($711);
 $m2=$712;
 label=98;break;
 case 98: 
 label=103;break;
 case 99: 
 var $715=$j;
 var $716=$a;
 var $717=(($716+($715<<2))|0);
 var $718=HEAPF32[(($717)>>2)];
 var $719=$718>0;
 if($719){label=100;break;}else{label=101;break;}
 case 100: 
 var $721=$j;
 var $722=$m5;
 var $723=(($722+($721<<2))|0);
 var $724=HEAPF32[(($723)>>2)];
 $m2=$724;
 var $725=$j;
 var $726=$m5;
 var $727=(($726+($725<<2))|0);
 var $728=HEAPF32[(($727)>>2)];
 var $729=$j;
 var $730=$a;
 var $731=(($730+($729<<2))|0);
 var $732=HEAPF32[(($731)>>2)];
 var $733=($728)+($732);
 $a2=$733;
 label=102;break;
 case 101: 
 var $735=$j;
 var $736=$m5;
 var $737=(($736+($735<<2))|0);
 var $738=HEAPF32[(($737)>>2)];
 $a2=$738;
 var $739=$j;
 var $740=$m5;
 var $741=(($740+($739<<2))|0);
 var $742=HEAPF32[(($741)>>2)];
 var $743=$j;
 var $744=$a;
 var $745=(($744+($743<<2))|0);
 var $746=HEAPF32[(($745)>>2)];
 var $747=($742)-($746);
 $m2=$747;
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 var $750=$m2;
 var $751=$j;
 var $752=$m5;
 var $753=(($752+($751<<2))|0);
 HEAPF32[(($753)>>2)]=$750;
 var $754=$a2;
 var $755=$j;
 var $756=$a;
 var $757=(($756+($755<<2))|0);
 HEAPF32[(($757)>>2)]=$754;
 label=104;break;
 case 104: 
 var $759=$j;
 var $760=((($759)+(1))|0);
 $j=$760;
 label=93;break;
 case 105: 
 label=106;break;
 case 106: 
 var $763=$i;
 var $764=((($763)-(1))|0);
 $i=$764;
 label=91;break;
 case 107: 
 $i=0;
 label=108;break;
 case 108: 
 var $767=$i;
 var $768=$2;
 var $769=(($768+4)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($767|0)<($770|0);
 if($771){label=109;break;}else{label=114;break;}
 case 109: 
 var $773=$i;
 var $774=(($really_zero_channel+($773<<2))|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=($775|0)!=0;
 if($776){label=110;break;}else{label=111;break;}
 case 110: 
 var $778=$i;
 var $779=$2;
 var $780=(($779+804)|0);
 var $781=(($780+($778<<2))|0);
 var $782=HEAP32[(($781)>>2)];
 var $783=$782;
 var $784=$n2;
 var $785=($784<<2);
 _memset($783, 0, $785)|0;
 label=112;break;
 case 111: 
 var $787=$2;
 var $788=$map;
 var $789=$i;
 var $790=$n;
 var $791=$i;
 var $792=$2;
 var $793=(($792+804)|0);
 var $794=(($793+($791<<2))|0);
 var $795=HEAP32[(($794)>>2)];
 var $796=$i;
 var $797=$2;
 var $798=(($797+820)|0);
 var $799=(($798+($796<<2))|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=_do_floor($787,$788,$789,$790,$795,$800,0);
 label=112;break;
 case 112: 
 label=113;break;
 case 113: 
 var $804=$i;
 var $805=((($804)+(1))|0);
 $i=$805;
 label=108;break;
 case 114: 
 $i=0;
 label=115;break;
 case 115: 
 var $808=$i;
 var $809=$2;
 var $810=(($809+4)|0);
 var $811=HEAP32[(($810)>>2)];
 var $812=($808|0)<($811|0);
 if($812){label=116;break;}else{label=118;break;}
 case 116: 
 var $814=$i;
 var $815=$2;
 var $816=(($815+804)|0);
 var $817=(($816+($814<<2))|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=$n;
 var $820=$2;
 var $821=$4;
 var $822=(($821)|0);
 var $823=HEAP8[($822)];
 var $824=($823&255);
 _inverse_mdct($818,$819,$820,$824);
 label=117;break;
 case 117: 
 var $826=$i;
 var $827=((($826)+(1))|0);
 $i=$827;
 label=115;break;
 case 118: 
 var $829=$2;
 _flush_packet($829);
 var $830=$2;
 var $831=(($830+1141)|0);
 var $832=HEAP8[($831)];
 var $833=(($832<<24)>>24)!=0;
 if($833){label=119;break;}else{label=120;break;}
 case 119: 
 var $835=$n2;
 var $836=(((-$835))|0);
 var $837=$2;
 var $838=(($837+824)|0);
 HEAP32[(($838)>>2)]=$836;
 var $839=$n;
 var $840=$8;
 var $841=((($839)-($840))|0);
 var $842=$2;
 var $843=(($842+1176)|0);
 HEAP32[(($843)>>2)]=$841;
 var $844=$2;
 var $845=(($844+828)|0);
 HEAP32[(($845)>>2)]=1;
 var $846=$2;
 var $847=(($846+1141)|0);
 HEAP8[($847)]=0;
 label=127;break;
 case 120: 
 var $849=$2;
 var $850=(($849+1176)|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=($851|0)!=0;
 if($852){label=121;break;}else{label=122;break;}
 case 121: 
 var $854=$2;
 var $855=(($854+1176)|0);
 var $856=HEAP32[(($855)>>2)];
 var $857=$5;
 var $858=((($857)+($856))|0);
 $5=$858;
 var $859=$5;
 var $860=$9;
 HEAP32[(($860)>>2)]=$859;
 var $861=$2;
 var $862=(($861+1176)|0);
 HEAP32[(($862)>>2)]=0;
 label=126;break;
 case 122: 
 var $864=$2;
 var $865=(($864+816)|0);
 var $866=HEAP32[(($865)>>2)];
 var $867=($866|0)==0;
 if($867){label=123;break;}else{label=125;break;}
 case 123: 
 var $869=$2;
 var $870=(($869+828)|0);
 var $871=HEAP32[(($870)>>2)];
 var $872=($871|0)!=0;
 if($872){label=124;break;}else{label=125;break;}
 case 124: 
 label=125;break;
 case 125: 
 label=126;break;
 case 126: 
 label=127;break;
 case 127: 
 var $877=$2;
 var $878=(($877+1152)|0);
 var $879=HEAP32[(($878)>>2)];
 var $880=$2;
 var $881=(($880+1168)|0);
 var $882=HEAP32[(($881)>>2)];
 var $883=($879|0)==($882|0);
 if($883){label=128;break;}else{label=137;break;}
 case 128: 
 var $885=$2;
 var $886=(($885+828)|0);
 var $887=HEAP32[(($886)>>2)];
 var $888=($887|0)!=0;
 if($888){label=129;break;}else{label=136;break;}
 case 129: 
 var $890=$2;
 var $891=(($890+1139)|0);
 var $892=HEAP8[($891)];
 var $893=($892&255);
 var $894=$893&4;
 var $895=($894|0)!=0;
 if($895){label=130;break;}else{label=136;break;}
 case 130: 
 var $897=$2;
 var $898=(($897+1172)|0);
 var $899=HEAP32[(($898)>>2)];
 var $900=$n;
 var $901=$8;
 var $902=((($900)-($901))|0);
 var $903=((($899)-($902))|0);
 $current_end=$903;
 var $904=$current_end;
 var $905=$2;
 var $906=(($905+824)|0);
 var $907=HEAP32[(($906)>>2)];
 var $908=$8;
 var $909=((($907)+($908))|0);
 var $910=($904>>>0)<($909>>>0);
 if($910){label=131;break;}else{label=135;break;}
 case 131: 
 var $912=$current_end;
 var $913=$2;
 var $914=(($913+824)|0);
 var $915=HEAP32[(($914)>>2)];
 var $916=($912>>>0)<($915>>>0);
 if($916){label=132;break;}else{label=133;break;}
 case 132: 
 var $918=$3;
 HEAP32[(($918)>>2)]=0;
 label=134;break;
 case 133: 
 var $920=$current_end;
 var $921=$2;
 var $922=(($921+824)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=((($920)-($923))|0);
 var $925=$3;
 HEAP32[(($925)>>2)]=$924;
 label=134;break;
 case 134: 
 var $927=$5;
 var $928=$3;
 var $929=HEAP32[(($928)>>2)];
 var $930=((($929)+($927))|0);
 HEAP32[(($928)>>2)]=$930;
 var $931=$3;
 var $932=HEAP32[(($931)>>2)];
 var $933=$2;
 var $934=(($933+824)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=((($935)+($932))|0);
 HEAP32[(($934)>>2)]=$936;
 $1=1;
 label=140;break;
 case 135: 
 label=136;break;
 case 136: 
 var $939=$2;
 var $940=(($939+1172)|0);
 var $941=HEAP32[(($940)>>2)];
 var $942=$n2;
 var $943=$5;
 var $944=((($942)-($943))|0);
 var $945=((($941)-($944))|0);
 var $946=$2;
 var $947=(($946+824)|0);
 HEAP32[(($947)>>2)]=$945;
 var $948=$2;
 var $949=(($948+828)|0);
 HEAP32[(($949)>>2)]=1;
 label=137;break;
 case 137: 
 var $951=$2;
 var $952=(($951+828)|0);
 var $953=HEAP32[(($952)>>2)];
 var $954=($953|0)!=0;
 if($954){label=138;break;}else{label=139;break;}
 case 138: 
 var $956=$7;
 var $957=$5;
 var $958=((($956)-($957))|0);
 var $959=$2;
 var $960=(($959+824)|0);
 var $961=HEAP32[(($960)>>2)];
 var $962=((($961)+($958))|0);
 HEAP32[(($960)>>2)]=$962;
 label=139;break;
 case 139: 
 var $964=$8;
 var $965=$3;
 HEAP32[(($965)>>2)]=$964;
 $1=1;
 label=140;break;
 case 140: 
 var $967=$1;
 STACKTOP=sp;return $967;
  default: assert(0, "bad label: " + label);
 }
}
function _prep_huffman($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $z;
 $1=$f;
 var $2=$1;
 var $3=(($2+1160)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)<=24;
 if($5){label=2;break;}else{label=13;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+1160)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=$1;
 var $13=(($12+1156)|0);
 HEAP32[(($13)>>2)]=0;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $16=$1;
 var $17=(($16+1148)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=8;break;}
 case 6: 
 var $21=$1;
 var $22=(($21+1140)|0);
 var $23=HEAP8[($22)];
 var $24=(($23<<24)>>24)!=0;
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 label=13;break;
 case 8: 
 var $27=$1;
 var $28=_get8_packet_raw($27);
 $z=$28;
 var $29=$z;
 var $30=($29|0)==-1;
 if($30){label=9;break;}else{label=10;break;}
 case 9: 
 label=13;break;
 case 10: 
 var $33=$z;
 var $34=$1;
 var $35=(($34+1160)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$33<<$36;
 var $38=$1;
 var $39=(($38+1156)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+($37))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=$1;
 var $43=(($42+1160)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=((($44)+(8))|0);
 HEAP32[(($43)>>2)]=$45;
 label=11;break;
 case 11: 
 var $47=$1;
 var $48=(($47+1160)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($49|0)<=24;
 if($50){label=5;break;}else{label=12;break;}
 case 12: 
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _codebook_decode_scalar_raw($f,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $code;
 var $x;
 var $n;
 var $len;
 var $m;
 $2=$f;
 $3=$c;
 var $4=$2;
 _prep_huffman($4);
 var $5=$3;
 var $6=(($5+2084)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){var $17=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $10=$3;
 var $11=(($10+32)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 if($13){var $17=1;label=4;break;}else{label=3;break;}
 case 3: 
 ___assert_fail(26280,25552,1268,27960);
 throw "Reached an unreachable!";
 label=4;break;
 case 4: 
 var $17;
 var $18=($17&1);
 var $19=$3;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)>8;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=$3;
 var $25=(($24+2084)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)!=0;
 if($27){label=7;break;}else{label=18;break;}
 case 6: 
 var $29=$3;
 var $30=(($29+32)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)!=0;
 if($32){label=18;break;}else{label=7;break;}
 case 7: 
 var $34=$2;
 var $35=(($34+1156)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=_bit_reverse($36);
 $code=$37;
 $x=0;
 var $38=$3;
 var $39=(($38+2092)|0);
 var $40=HEAP32[(($39)>>2)];
 $n=$40;
 label=8;break;
 case 8: 
 var $42=$n;
 var $43=($42|0)>1;
 if($43){label=9;break;}else{label=13;break;}
 case 9: 
 var $45=$x;
 var $46=$n;
 var $47=$46>>1;
 var $48=((($45)+($47))|0);
 $m=$48;
 var $49=$m;
 var $50=$3;
 var $51=(($50+2084)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+($49<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$code;
 var $56=($54>>>0)<=($55>>>0);
 if($56){label=10;break;}else{label=11;break;}
 case 10: 
 var $58=$m;
 $x=$58;
 var $59=$n;
 var $60=$59>>1;
 var $61=$n;
 var $62=((($61)-($60))|0);
 $n=$62;
 label=12;break;
 case 11: 
 var $64=$n;
 var $65=$64>>1;
 $n=$65;
 label=12;break;
 case 12: 
 label=8;break;
 case 13: 
 var $68=$3;
 var $69=(($68+23)|0);
 var $70=HEAP8[($69)];
 var $71=(($70<<24)>>24)!=0;
 if($71){label=15;break;}else{label=14;break;}
 case 14: 
 var $73=$x;
 var $74=$3;
 var $75=(($74+2088)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+($73<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 $x=$78;
 label=15;break;
 case 15: 
 var $80=$x;
 var $81=$3;
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+$80)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 $len=$86;
 var $87=$2;
 var $88=(($87+1160)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$len;
 var $91=($89|0)>=($90|0);
 if($91){label=16;break;}else{label=17;break;}
 case 16: 
 var $93=$len;
 var $94=$2;
 var $95=(($94+1156)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$96>>>($93>>>0);
 HEAP32[(($95)>>2)]=$97;
 var $98=$len;
 var $99=$2;
 var $100=(($99+1160)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=((($101)-($98))|0);
 HEAP32[(($100)>>2)]=$102;
 var $103=$x;
 $1=$103;
 label=31;break;
 case 17: 
 var $105=$2;
 var $106=(($105+1160)|0);
 HEAP32[(($106)>>2)]=0;
 $1=-1;
 label=31;break;
 case 18: 
 var $108=$3;
 var $109=(($108+23)|0);
 var $110=HEAP8[($109)];
 var $111=(($110<<24)>>24)!=0;
 if($111){label=19;break;}else{var $115=1;label=20;break;}
 case 19: 
 ___assert_fail(25984,25552,1301,27960);
 throw "Reached an unreachable!";
 label=20;break;
 case 20: 
 var $115;
 var $116=($115&1);
 $i=0;
 label=21;break;
 case 21: 
 var $118=$i;
 var $119=$3;
 var $120=(($119+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($118|0)<($121|0);
 if($122){label=22;break;}else{label=30;break;}
 case 22: 
 var $124=$i;
 var $125=$3;
 var $126=(($125+8)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+$124)|0);
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=($130|0)==255;
 if($131){label=23;break;}else{label=24;break;}
 case 23: 
 label=29;break;
 case 24: 
 var $134=$i;
 var $135=$3;
 var $136=(($135+32)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+($134<<2))|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$2;
 var $141=(($140+1156)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$i;
 var $144=$3;
 var $145=(($144+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+$143)|0);
 var $148=HEAP8[($147)];
 var $149=($148&255);
 var $150=1<<$149;
 var $151=((($150)-(1))|0);
 var $152=$142&$151;
 var $153=($139|0)==($152|0);
 if($153){label=25;break;}else{label=28;break;}
 case 25: 
 var $155=$2;
 var $156=(($155+1160)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$i;
 var $159=$3;
 var $160=(($159+8)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+$158)|0);
 var $163=HEAP8[($162)];
 var $164=($163&255);
 var $165=($157|0)>=($164|0);
 if($165){label=26;break;}else{label=27;break;}
 case 26: 
 var $167=$i;
 var $168=$3;
 var $169=(($168+8)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+$167)|0);
 var $172=HEAP8[($171)];
 var $173=($172&255);
 var $174=$2;
 var $175=(($174+1156)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=$176>>>($173>>>0);
 HEAP32[(($175)>>2)]=$177;
 var $178=$i;
 var $179=$3;
 var $180=(($179+8)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+$178)|0);
 var $183=HEAP8[($182)];
 var $184=($183&255);
 var $185=$2;
 var $186=(($185+1160)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=((($187)-($184))|0);
 HEAP32[(($186)>>2)]=$188;
 var $189=$i;
 $1=$189;
 label=31;break;
 case 27: 
 var $191=$2;
 var $192=(($191+1160)|0);
 HEAP32[(($192)>>2)]=0;
 $1=-1;
 label=31;break;
 case 28: 
 label=29;break;
 case 29: 
 var $195=$i;
 var $196=((($195)+(1))|0);
 $i=$196;
 label=21;break;
 case 30: 
 var $198=$2;
 var $199=_error($198,21);
 var $200=$2;
 var $201=(($200+1160)|0);
 HEAP32[(($201)>>2)]=0;
 $1=-1;
 label=31;break;
 case 31: 
 var $203=$1;
 STACKTOP=sp;return $203;
  default: assert(0, "bad label: " + label);
 }
}
function _predict_point($x,$x0,$x1,$y0,$y1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $dy;
 var $adx;
 var $err;
 var $off;
 $1=$x;
 $2=$x0;
 $3=$x1;
 $4=$y0;
 $5=$y1;
 var $6=$5;
 var $7=$4;
 var $8=((($6)-($7))|0);
 $dy=$8;
 var $9=$3;
 var $10=$2;
 var $11=((($9)-($10))|0);
 $adx=$11;
 var $12=$dy;
 var $13=Math_abs($12);
 var $14=$1;
 var $15=$2;
 var $16=((($14)-($15))|0);
 var $17=(Math_imul($13,$16)|0);
 $err=$17;
 var $18=$err;
 var $19=$adx;
 var $20=(((($18|0))/(($19|0)))&-1);
 $off=$20;
 var $21=$dy;
 var $22=($21|0)<0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=$4;
 var $25=$off;
 var $26=((($24)-($25))|0);
 var $32=$26;label=4;break;
 case 3: 
 var $28=$4;
 var $29=$off;
 var $30=((($28)+($29))|0);
 var $32=$30;label=4;break;
 case 4: 
 var $32;
 STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_residue($f,$residue_buffers,$ch,$n,$rn,$do_not_decode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $j;
 var $pass;
 var $r;
 var $rtype;
 var $c;
 var $classwords;
 var $n_read;
 var $part_read;
 var $temp_alloc_point;
 var $part_classdata;
 var $pcount;
 var $class_set;
 var $c1;
 var $temp;
 var $n2;
 var $c3;
 var $b;
 var $target;
 var $offset;
 var $n4;
 var $book;
 $1=$f;
 $2=$residue_buffers;
 $3=$ch;
 $4=$n;
 $5=$rn;
 $6=$do_not_decode;
 var $7=$1;
 var $8=(($7+400)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$5;
 var $11=(($9+((($10)*(24))&-1))|0);
 $r=$11;
 var $12=$5;
 var $13=$1;
 var $14=(($13+272)|0);
 var $15=(($14+($12<<1))|0);
 var $16=HEAP16[(($15)>>1)];
 var $17=($16&65535);
 $rtype=$17;
 var $18=$r;
 var $19=(($18+13)|0);
 var $20=HEAP8[($19)];
 var $21=($20&255);
 $c=$21;
 var $22=$c;
 var $23=$1;
 var $24=(($23+128)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+((($22)*(2096))&-1))|0);
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 $classwords=$28;
 var $29=$r;
 var $30=(($29+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$r;
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=((($31)-($34))|0);
 $n_read=$35;
 var $36=$n_read;
 var $37=$r;
 var $38=(($37+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(((($36>>>0))/(($39>>>0)))&-1);
 $part_read=$40;
 var $41=$1;
 var $42=(($41+96)|0);
 var $43=HEAP32[(($42)>>2)];
 $temp_alloc_point=$43;
 var $44=$1;
 var $45=(($44+4)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$part_read;
 var $48=($47<<2);
 var $49=((($48)+(4))|0);
 var $50=(Math_imul($46,$49)|0);
 var $51=STACKTOP;STACKTOP = (STACKTOP + $50)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $52=$1;
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$part_read;
 var $56=($55<<2);
 var $57=_make_block_array($51,$54,$56);
 var $58=$57;
 $part_classdata=$58;
 $i=0;
 label=2;break;
 case 2: 
 var $60=$i;
 var $61=$3;
 var $62=($60|0)<($61|0);
 if($62){label=3;break;}else{label=7;break;}
 case 3: 
 var $64=$i;
 var $65=$6;
 var $66=(($65+$64)|0);
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24)!=0;
 if($68){label=5;break;}else{label=4;break;}
 case 4: 
 var $70=$i;
 var $71=$2;
 var $72=(($71+($70<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$73;
 var $75=$4;
 var $76=($75<<2);
 _memset($74, 0, $76)|0;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $79=$i;
 var $80=((($79)+(1))|0);
 $i=$80;
 label=2;break;
 case 7: 
 $pass=0;
 label=8;break;
 case 8: 
 var $83=$pass;
 var $84=($83|0)<8;
 if($84){label=9;break;}else{label=49;break;}
 case 9: 
 $pcount=0;
 $class_set=0;
 label=10;break;
 case 10: 
 var $87=$pcount;
 var $88=$part_read;
 var $89=($87|0)<($88|0);
 if($89){label=11;break;}else{label=47;break;}
 case 11: 
 var $91=$pass;
 var $92=($91|0)==0;
 if($92){label=12;break;}else{label=30;break;}
 case 12: 
 $j=0;
 label=13;break;
 case 13: 
 var $95=$j;
 var $96=$3;
 var $97=($95|0)<($96|0);
 if($97){label=14;break;}else{label=29;break;}
 case 14: 
 var $99=$j;
 var $100=$6;
 var $101=(($100+$99)|0);
 var $102=HEAP8[($101)];
 var $103=(($102<<24)>>24)!=0;
 if($103){label=27;break;}else{label=15;break;}
 case 15: 
 var $105=$1;
 var $106=(($105+128)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$r;
 var $109=(($108+13)|0);
 var $110=HEAP8[($109)];
 var $111=($110&255);
 var $112=(($107+((($111)*(2096))&-1))|0);
 $c1=$112;
 var $113=$1;
 var $114=(($113+1160)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($115|0)<10;
 if($116){label=16;break;}else{label=17;break;}
 case 16: 
 var $118=$1;
 _prep_huffman($118);
 label=17;break;
 case 17: 
 var $120=$1;
 var $121=(($120+1156)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122&1023;
 $temp=$123;
 var $124=$temp;
 var $125=$c1;
 var $126=(($125+36)|0);
 var $127=(($126+($124<<1))|0);
 var $128=HEAP16[(($127)>>1)];
 var $129=(($128<<16)>>16);
 $temp=$129;
 var $130=$temp;
 var $131=($130|0)>=0;
 if($131){label=18;break;}else{label=21;break;}
 case 18: 
 var $133=$temp;
 var $134=$c1;
 var $135=(($134+8)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+$133)|0);
 var $138=HEAP8[($137)];
 var $139=($138&255);
 $n2=$139;
 var $140=$n2;
 var $141=$1;
 var $142=(($141+1156)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$143>>>($140>>>0);
 HEAP32[(($142)>>2)]=$144;
 var $145=$n2;
 var $146=$1;
 var $147=(($146+1160)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=((($148)-($145))|0);
 HEAP32[(($147)>>2)]=$149;
 var $150=$1;
 var $151=(($150+1160)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)<0;
 if($153){label=19;break;}else{label=20;break;}
 case 19: 
 var $155=$1;
 var $156=(($155+1160)|0);
 HEAP32[(($156)>>2)]=0;
 $temp=-1;
 label=20;break;
 case 20: 
 label=22;break;
 case 21: 
 var $159=$1;
 var $160=$c1;
 var $161=_codebook_decode_scalar_raw($159,$160);
 $temp=$161;
 label=22;break;
 case 22: 
 var $163=$c1;
 var $164=(($163+23)|0);
 var $165=HEAP8[($164)];
 var $166=(($165<<24)>>24)!=0;
 if($166){label=23;break;}else{label=24;break;}
 case 23: 
 var $168=$temp;
 var $169=$c1;
 var $170=(($169+2088)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+($168<<2))|0);
 var $173=HEAP32[(($172)>>2)];
 $temp=$173;
 label=24;break;
 case 24: 
 var $175=$temp;
 var $176=($175|0)==-1;
 if($176){label=25;break;}else{label=26;break;}
 case 25: 
 label=50;break;
 case 26: 
 var $179=$temp;
 var $180=$r;
 var $181=(($180+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+($179<<2))|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=$class_set;
 var $186=$j;
 var $187=$part_classdata;
 var $188=(($187+($186<<2))|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+($185<<2))|0);
 HEAP32[(($190)>>2)]=$184;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $193=$j;
 var $194=((($193)+(1))|0);
 $j=$194;
 label=13;break;
 case 29: 
 label=30;break;
 case 30: 
 $i=0;
 label=31;break;
 case 31: 
 var $198=$i;
 var $199=$classwords;
 var $200=($198|0)<($199|0);
 if($200){label=32;break;}else{var $206=0;label=33;break;}
 case 32: 
 var $202=$pcount;
 var $203=$part_read;
 var $204=($202|0)<($203|0);
 var $206=$204;label=33;break;
 case 33: 
 var $206;
 if($206){label=34;break;}else{label=46;break;}
 case 34: 
 $j=0;
 label=35;break;
 case 35: 
 var $209=$j;
 var $210=$3;
 var $211=($209|0)<($210|0);
 if($211){label=36;break;}else{label=44;break;}
 case 36: 
 var $213=$j;
 var $214=$6;
 var $215=(($214+$213)|0);
 var $216=HEAP8[($215)];
 var $217=(($216<<24)>>24)!=0;
 if($217){label=42;break;}else{label=37;break;}
 case 37: 
 var $219=$i;
 var $220=$class_set;
 var $221=$j;
 var $222=$part_classdata;
 var $223=(($222+($221<<2))|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224+($220<<2))|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+$219)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 $c3=$229;
 var $230=$pass;
 var $231=$c3;
 var $232=$r;
 var $233=(($232+20)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+($231<<4))|0);
 var $236=(($235+($230<<1))|0);
 var $237=HEAP16[(($236)>>1)];
 var $238=(($237<<16)>>16);
 $b=$238;
 var $239=$b;
 var $240=($239|0)>=0;
 if($240){label=38;break;}else{label=41;break;}
 case 38: 
 var $242=$j;
 var $243=$2;
 var $244=(($243+($242<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 $target=$245;
 var $246=$r;
 var $247=(($246)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=$pcount;
 var $250=$r;
 var $251=(($250+8)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=(Math_imul($249,$252)|0);
 var $254=((($248)+($253))|0);
 $offset=$254;
 var $255=$r;
 var $256=(($255+8)|0);
 var $257=HEAP32[(($256)>>2)];
 $n4=$257;
 var $258=$1;
 var $259=(($258+128)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=$b;
 var $262=(($260+((($261)*(2096))&-1))|0);
 $book=$262;
 var $263=$1;
 var $264=$book;
 var $265=$target;
 var $266=$offset;
 var $267=$n4;
 var $268=$rtype;
 var $269=_residue_decode($263,$264,$265,$266,$267,$268);
 var $270=($269|0)!=0;
 if($270){label=40;break;}else{label=39;break;}
 case 39: 
 label=50;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $276=$j;
 var $277=((($276)+(1))|0);
 $j=$277;
 label=35;break;
 case 44: 
 label=45;break;
 case 45: 
 var $280=$i;
 var $281=((($280)+(1))|0);
 $i=$281;
 var $282=$pcount;
 var $283=((($282)+(1))|0);
 $pcount=$283;
 label=31;break;
 case 46: 
 var $285=$class_set;
 var $286=((($285)+(1))|0);
 $class_set=$286;
 label=10;break;
 case 47: 
 label=48;break;
 case 48: 
 var $289=$pass;
 var $290=((($289)+(1))|0);
 $pass=$290;
 label=8;break;
 case 49: 
 label=50;break;
 case 50: 
 var $293=$temp_alloc_point;
 var $294=$1;
 var $295=(($294+96)|0);
 HEAP32[(($295)>>2)]=$293;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _do_floor($f,$map,$i,$n,$target,$finalY,$step2_flag){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $n2;
 var $s;
 var $floor;
 var $g;
 var $j;
 var $q;
 var $lx;
 var $ly;
 var $hy;
 var $hx;
 $2=$f;
 $3=$map;
 $4=$i;
 $5=$n;
 $6=$target;
 $7=$finalY;
 $8=$step2_flag;
 var $9=$5;
 var $10=$9>>1;
 $n2=$10;
 var $11=$4;
 var $12=$3;
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+((($11)*(3))&-1))|0);
 var $16=(($15+2)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 $s=$18;
 var $19=$s;
 var $20=$3;
 var $21=(($20+9)|0);
 var $22=(($21+$19)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 $floor=$24;
 var $25=$floor;
 var $26=$2;
 var $27=(($26+136)|0);
 var $28=(($27+($25<<1))|0);
 var $29=HEAP16[(($28)>>1)];
 var $30=($29&65535);
 var $31=($30|0)==0;
 if($31){label=2;break;}else{label=3;break;}
 case 2: 
 var $33=$2;
 var $34=_error($33,21);
 $1=$34;
 label=17;break;
 case 3: 
 var $36=$floor;
 var $37=$2;
 var $38=(($37+264)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+((($36)*(1596))&-1))|0);
 var $41=$40;
 $g=$41;
 $lx=0;
 var $42=$7;
 var $43=(($42)|0);
 var $44=HEAP16[(($43)>>1)];
 var $45=(($44<<16)>>16);
 var $46=$g;
 var $47=(($46+1588)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=(Math_imul($45,$49)|0);
 $ly=$50;
 $q=1;
 label=4;break;
 case 4: 
 var $52=$q;
 var $53=$g;
 var $54=(($53+1592)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($52|0)<($55|0);
 if($56){label=5;break;}else{label=9;break;}
 case 5: 
 var $58=$q;
 var $59=$g;
 var $60=(($59+838)|0);
 var $61=(($60+$58)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 $j=$63;
 var $64=$j;
 var $65=$7;
 var $66=(($65+($64<<1))|0);
 var $67=HEAP16[(($66)>>1)];
 var $68=(($67<<16)>>16);
 var $69=($68|0)>=0;
 if($69){label=6;break;}else{label=7;break;}
 case 6: 
 var $71=$j;
 var $72=$7;
 var $73=(($72+($71<<1))|0);
 var $74=HEAP16[(($73)>>1)];
 var $75=(($74<<16)>>16);
 var $76=$g;
 var $77=(($76+1588)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=(Math_imul($75,$79)|0);
 $hy=$80;
 var $81=$j;
 var $82=$g;
 var $83=(($82+338)|0);
 var $84=(($83+($81<<1))|0);
 var $85=HEAP16[(($84)>>1)];
 var $86=($85&65535);
 $hx=$86;
 var $87=$6;
 var $88=$lx;
 var $89=$ly;
 var $90=$hx;
 var $91=$hy;
 var $92=$n2;
 _draw_line($87,$88,$89,$90,$91,$92);
 var $93=$hx;
 $lx=$93;
 var $94=$hy;
 $ly=$94;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $97=$q;
 var $98=((($97)+(1))|0);
 $q=$98;
 label=4;break;
 case 9: 
 var $100=$lx;
 var $101=$n2;
 var $102=($100|0)<($101|0);
 if($102){label=10;break;}else{label=15;break;}
 case 10: 
 var $104=$lx;
 $j=$104;
 label=11;break;
 case 11: 
 var $106=$j;
 var $107=$n2;
 var $108=($106|0)<($107|0);
 if($108){label=12;break;}else{label=14;break;}
 case 12: 
 var $110=$ly;
 var $111=((6208+($110<<2))|0);
 var $112=HEAPF32[(($111)>>2)];
 var $113=$j;
 var $114=$6;
 var $115=(($114+($113<<2))|0);
 var $116=HEAPF32[(($115)>>2)];
 var $117=($116)*($112);
 HEAPF32[(($115)>>2)]=$117;
 label=13;break;
 case 13: 
 var $119=$j;
 var $120=((($119)+(1))|0);
 $j=$120;
 label=11;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 $1=1;
 label=17;break;
 case 17: 
 var $125=$1;
 STACKTOP=sp;return $125;
  default: assert(0, "bad label: " + label);
 }
}
function _inverse_mdct($buffer,$n,$f,$blocktype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $n2;
 var $n4;
 var $n8;
 var $l;
 var $ld;
 var $save_point;
 var $buf2;
 var $u;
 var $v;
 var $A;
 var $d;
 var $e;
 var $AA;
 var $e_stop;
 var $AA1;
 var $d0;
 var $d1;
 var $e0;
 var $e1;
 var $v40_20;
 var $v41_21;
 var $k0;
 var $k0_2;
 var $lim;
 var $i;
 var $k02;
 var $k1;
 var $k0_23;
 var $rlim;
 var $r;
 var $lim4;
 var $i_off;
 var $A0;
 var $bitrev;
 var $d05;
 var $d16;
 var $k4;
 var $C;
 var $d7;
 var $e8;
 var $a02;
 var $a11;
 var $b0;
 var $b1;
 var $b2;
 var $b3;
 var $d09;
 var $d110;
 var $d2;
 var $d3;
 var $B;
 var $e11;
 var $p0;
 var $p1;
 var $p2;
 var $p3;
 $1=$buffer;
 $2=$n;
 $3=$f;
 $4=$blocktype;
 var $5=$2;
 var $6=$5>>1;
 $n2=$6;
 var $7=$2;
 var $8=$7>>2;
 $n4=$8;
 var $9=$2;
 var $10=$9>>3;
 $n8=$10;
 var $11=$3;
 var $12=(($11+96)|0);
 var $13=HEAP32[(($12)>>2)];
 $save_point=$13;
 var $14=$n2;
 var $15=($14<<2);
 var $16=STACKTOP;STACKTOP = (STACKTOP + $15)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $17=$16;
 $buf2=$17;
 $u=0;
 $v=0;
 var $18=$4;
 var $19=$3;
 var $20=(($19+832)|0);
 var $21=(($20+($18<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 $A=$22;
 var $23=$n2;
 var $24=((($23)-(2))|0);
 var $25=$buf2;
 var $26=(($25+($24<<2))|0);
 $d=$26;
 var $27=$A;
 $AA=$27;
 var $28=$1;
 var $29=(($28)|0);
 $e=$29;
 var $30=$n2;
 var $31=$1;
 var $32=(($31+($30<<2))|0);
 $e_stop=$32;
 label=2;break;
 case 2: 
 var $34=$e;
 var $35=$e_stop;
 var $36=($34|0)!=($35|0);
 if($36){label=3;break;}else{label=4;break;}
 case 3: 
 var $38=$e;
 var $39=(($38)|0);
 var $40=HEAPF32[(($39)>>2)];
 var $41=$AA;
 var $42=(($41)|0);
 var $43=HEAPF32[(($42)>>2)];
 var $44=($40)*($43);
 var $45=$e;
 var $46=(($45+8)|0);
 var $47=HEAPF32[(($46)>>2)];
 var $48=$AA;
 var $49=(($48+4)|0);
 var $50=HEAPF32[(($49)>>2)];
 var $51=($47)*($50);
 var $52=($44)-($51);
 var $53=$d;
 var $54=(($53+4)|0);
 HEAPF32[(($54)>>2)]=$52;
 var $55=$e;
 var $56=(($55)|0);
 var $57=HEAPF32[(($56)>>2)];
 var $58=$AA;
 var $59=(($58+4)|0);
 var $60=HEAPF32[(($59)>>2)];
 var $61=($57)*($60);
 var $62=$e;
 var $63=(($62+8)|0);
 var $64=HEAPF32[(($63)>>2)];
 var $65=$AA;
 var $66=(($65)|0);
 var $67=HEAPF32[(($66)>>2)];
 var $68=($64)*($67);
 var $69=($61)+($68);
 var $70=$d;
 var $71=(($70)|0);
 HEAPF32[(($71)>>2)]=$69;
 var $72=$d;
 var $73=((($72)-(8))|0);
 $d=$73;
 var $74=$AA;
 var $75=(($74+8)|0);
 $AA=$75;
 var $76=$e;
 var $77=(($76+16)|0);
 $e=$77;
 label=2;break;
 case 4: 
 var $79=$n2;
 var $80=((($79)-(3))|0);
 var $81=$1;
 var $82=(($81+($80<<2))|0);
 $e=$82;
 label=5;break;
 case 5: 
 var $84=$d;
 var $85=$buf2;
 var $86=($84>>>0)>=($85>>>0);
 if($86){label=6;break;}else{label=7;break;}
 case 6: 
 var $88=$e;
 var $89=(($88+8)|0);
 var $90=HEAPF32[(($89)>>2)];
 var $91=((-.0))-($90);
 var $92=$AA;
 var $93=(($92)|0);
 var $94=HEAPF32[(($93)>>2)];
 var $95=($91)*($94);
 var $96=$e;
 var $97=(($96)|0);
 var $98=HEAPF32[(($97)>>2)];
 var $99=((-.0))-($98);
 var $100=$AA;
 var $101=(($100+4)|0);
 var $102=HEAPF32[(($101)>>2)];
 var $103=($99)*($102);
 var $104=($95)-($103);
 var $105=$d;
 var $106=(($105+4)|0);
 HEAPF32[(($106)>>2)]=$104;
 var $107=$e;
 var $108=(($107+8)|0);
 var $109=HEAPF32[(($108)>>2)];
 var $110=((-.0))-($109);
 var $111=$AA;
 var $112=(($111+4)|0);
 var $113=HEAPF32[(($112)>>2)];
 var $114=($110)*($113);
 var $115=$e;
 var $116=(($115)|0);
 var $117=HEAPF32[(($116)>>2)];
 var $118=((-.0))-($117);
 var $119=$AA;
 var $120=(($119)|0);
 var $121=HEAPF32[(($120)>>2)];
 var $122=($118)*($121);
 var $123=($114)+($122);
 var $124=$d;
 var $125=(($124)|0);
 HEAPF32[(($125)>>2)]=$123;
 var $126=$d;
 var $127=((($126)-(8))|0);
 $d=$127;
 var $128=$AA;
 var $129=(($128+8)|0);
 $AA=$129;
 var $130=$e;
 var $131=((($130)-(16))|0);
 $e=$131;
 label=5;break;
 case 7: 
 var $133=$1;
 $u=$133;
 var $134=$buf2;
 $v=$134;
 var $135=$n2;
 var $136=((($135)-(8))|0);
 var $137=$A;
 var $138=(($137+($136<<2))|0);
 $AA1=$138;
 var $139=$n4;
 var $140=$v;
 var $141=(($140+($139<<2))|0);
 $e0=$141;
 var $142=$v;
 var $143=(($142)|0);
 $e1=$143;
 var $144=$n4;
 var $145=$u;
 var $146=(($145+($144<<2))|0);
 $d0=$146;
 var $147=$u;
 var $148=(($147)|0);
 $d1=$148;
 label=8;break;
 case 8: 
 var $150=$AA1;
 var $151=$A;
 var $152=($150>>>0)>=($151>>>0);
 if($152){label=9;break;}else{label=10;break;}
 case 9: 
 var $154=$e0;
 var $155=(($154+4)|0);
 var $156=HEAPF32[(($155)>>2)];
 var $157=$e1;
 var $158=(($157+4)|0);
 var $159=HEAPF32[(($158)>>2)];
 var $160=($156)-($159);
 $v41_21=$160;
 var $161=$e0;
 var $162=(($161)|0);
 var $163=HEAPF32[(($162)>>2)];
 var $164=$e1;
 var $165=(($164)|0);
 var $166=HEAPF32[(($165)>>2)];
 var $167=($163)-($166);
 $v40_20=$167;
 var $168=$e0;
 var $169=(($168+4)|0);
 var $170=HEAPF32[(($169)>>2)];
 var $171=$e1;
 var $172=(($171+4)|0);
 var $173=HEAPF32[(($172)>>2)];
 var $174=($170)+($173);
 var $175=$d0;
 var $176=(($175+4)|0);
 HEAPF32[(($176)>>2)]=$174;
 var $177=$e0;
 var $178=(($177)|0);
 var $179=HEAPF32[(($178)>>2)];
 var $180=$e1;
 var $181=(($180)|0);
 var $182=HEAPF32[(($181)>>2)];
 var $183=($179)+($182);
 var $184=$d0;
 var $185=(($184)|0);
 HEAPF32[(($185)>>2)]=$183;
 var $186=$v41_21;
 var $187=$AA1;
 var $188=(($187+16)|0);
 var $189=HEAPF32[(($188)>>2)];
 var $190=($186)*($189);
 var $191=$v40_20;
 var $192=$AA1;
 var $193=(($192+20)|0);
 var $194=HEAPF32[(($193)>>2)];
 var $195=($191)*($194);
 var $196=($190)-($195);
 var $197=$d1;
 var $198=(($197+4)|0);
 HEAPF32[(($198)>>2)]=$196;
 var $199=$v40_20;
 var $200=$AA1;
 var $201=(($200+16)|0);
 var $202=HEAPF32[(($201)>>2)];
 var $203=($199)*($202);
 var $204=$v41_21;
 var $205=$AA1;
 var $206=(($205+20)|0);
 var $207=HEAPF32[(($206)>>2)];
 var $208=($204)*($207);
 var $209=($203)+($208);
 var $210=$d1;
 var $211=(($210)|0);
 HEAPF32[(($211)>>2)]=$209;
 var $212=$e0;
 var $213=(($212+12)|0);
 var $214=HEAPF32[(($213)>>2)];
 var $215=$e1;
 var $216=(($215+12)|0);
 var $217=HEAPF32[(($216)>>2)];
 var $218=($214)-($217);
 $v41_21=$218;
 var $219=$e0;
 var $220=(($219+8)|0);
 var $221=HEAPF32[(($220)>>2)];
 var $222=$e1;
 var $223=(($222+8)|0);
 var $224=HEAPF32[(($223)>>2)];
 var $225=($221)-($224);
 $v40_20=$225;
 var $226=$e0;
 var $227=(($226+12)|0);
 var $228=HEAPF32[(($227)>>2)];
 var $229=$e1;
 var $230=(($229+12)|0);
 var $231=HEAPF32[(($230)>>2)];
 var $232=($228)+($231);
 var $233=$d0;
 var $234=(($233+12)|0);
 HEAPF32[(($234)>>2)]=$232;
 var $235=$e0;
 var $236=(($235+8)|0);
 var $237=HEAPF32[(($236)>>2)];
 var $238=$e1;
 var $239=(($238+8)|0);
 var $240=HEAPF32[(($239)>>2)];
 var $241=($237)+($240);
 var $242=$d0;
 var $243=(($242+8)|0);
 HEAPF32[(($243)>>2)]=$241;
 var $244=$v41_21;
 var $245=$AA1;
 var $246=(($245)|0);
 var $247=HEAPF32[(($246)>>2)];
 var $248=($244)*($247);
 var $249=$v40_20;
 var $250=$AA1;
 var $251=(($250+4)|0);
 var $252=HEAPF32[(($251)>>2)];
 var $253=($249)*($252);
 var $254=($248)-($253);
 var $255=$d1;
 var $256=(($255+12)|0);
 HEAPF32[(($256)>>2)]=$254;
 var $257=$v40_20;
 var $258=$AA1;
 var $259=(($258)|0);
 var $260=HEAPF32[(($259)>>2)];
 var $261=($257)*($260);
 var $262=$v41_21;
 var $263=$AA1;
 var $264=(($263+4)|0);
 var $265=HEAPF32[(($264)>>2)];
 var $266=($262)*($265);
 var $267=($261)+($266);
 var $268=$d1;
 var $269=(($268+8)|0);
 HEAPF32[(($269)>>2)]=$267;
 var $270=$AA1;
 var $271=((($270)-(32))|0);
 $AA1=$271;
 var $272=$d0;
 var $273=(($272+16)|0);
 $d0=$273;
 var $274=$d1;
 var $275=(($274+16)|0);
 $d1=$275;
 var $276=$e0;
 var $277=(($276+16)|0);
 $e0=$277;
 var $278=$e1;
 var $279=(($278+16)|0);
 $e1=$279;
 label=8;break;
 case 10: 
 var $281=$2;
 var $282=_ilog($281);
 var $283=((($282)-(1))|0);
 $ld=$283;
 var $284=$2;
 var $285=$284>>4;
 var $286=$u;
 var $287=$n2;
 var $288=((($287)-(1))|0);
 var $289=$n4;
 var $290=0;
 var $291=((($288)-($290))|0);
 var $292=$2;
 var $293=$292>>3;
 var $294=(((-$293))|0);
 var $295=$A;
 _imdct_step3_iter0_loop($285,$286,$291,$294,$295);
 var $296=$2;
 var $297=$296>>4;
 var $298=$u;
 var $299=$n2;
 var $300=((($299)-(1))|0);
 var $301=$n4;
 var $302=$301;
 var $303=((($300)-($302))|0);
 var $304=$2;
 var $305=$304>>3;
 var $306=(((-$305))|0);
 var $307=$A;
 _imdct_step3_iter0_loop($297,$298,$303,$306,$307);
 var $308=$2;
 var $309=$308>>5;
 var $310=$u;
 var $311=$n2;
 var $312=((($311)-(1))|0);
 var $313=$n8;
 var $314=0;
 var $315=((($312)-($314))|0);
 var $316=$2;
 var $317=$316>>4;
 var $318=(((-$317))|0);
 var $319=$A;
 _imdct_step3_inner_r_loop($309,$310,$315,$318,$319,16);
 var $320=$2;
 var $321=$320>>5;
 var $322=$u;
 var $323=$n2;
 var $324=((($323)-(1))|0);
 var $325=$n8;
 var $326=$325;
 var $327=((($324)-($326))|0);
 var $328=$2;
 var $329=$328>>4;
 var $330=(((-$329))|0);
 var $331=$A;
 _imdct_step3_inner_r_loop($321,$322,$327,$330,$331,16);
 var $332=$2;
 var $333=$332>>5;
 var $334=$u;
 var $335=$n2;
 var $336=((($335)-(1))|0);
 var $337=$n8;
 var $338=($337<<1);
 var $339=((($336)-($338))|0);
 var $340=$2;
 var $341=$340>>4;
 var $342=(((-$341))|0);
 var $343=$A;
 _imdct_step3_inner_r_loop($333,$334,$339,$342,$343,16);
 var $344=$2;
 var $345=$344>>5;
 var $346=$u;
 var $347=$n2;
 var $348=((($347)-(1))|0);
 var $349=$n8;
 var $350=((($349)*(3))&-1);
 var $351=((($348)-($350))|0);
 var $352=$2;
 var $353=$352>>4;
 var $354=(((-$353))|0);
 var $355=$A;
 _imdct_step3_inner_r_loop($345,$346,$351,$354,$355,16);
 $l=2;
 label=11;break;
 case 11: 
 var $357=$l;
 var $358=$ld;
 var $359=((($358)-(3))|0);
 var $360=$359>>1;
 var $361=($357|0)<($360|0);
 if($361){label=12;break;}else{label=18;break;}
 case 12: 
 var $363=$2;
 var $364=$l;
 var $365=((($364)+(2))|0);
 var $366=$363>>($365|0);
 $k0=$366;
 var $367=$k0;
 var $368=$367>>1;
 $k0_2=$368;
 var $369=$l;
 var $370=((($369)+(1))|0);
 var $371=1<<$370;
 $lim=$371;
 $i=0;
 label=13;break;
 case 13: 
 var $373=$i;
 var $374=$lim;
 var $375=($373|0)<($374|0);
 if($375){label=14;break;}else{label=16;break;}
 case 14: 
 var $377=$2;
 var $378=$l;
 var $379=((($378)+(4))|0);
 var $380=$377>>($379|0);
 var $381=$u;
 var $382=$n2;
 var $383=((($382)-(1))|0);
 var $384=$k0;
 var $385=$i;
 var $386=(Math_imul($384,$385)|0);
 var $387=((($383)-($386))|0);
 var $388=$k0_2;
 var $389=(((-$388))|0);
 var $390=$A;
 var $391=$l;
 var $392=((($391)+(3))|0);
 var $393=1<<$392;
 _imdct_step3_inner_r_loop($380,$381,$387,$389,$390,$393);
 label=15;break;
 case 15: 
 var $395=$i;
 var $396=((($395)+(1))|0);
 $i=$396;
 label=13;break;
 case 16: 
 label=17;break;
 case 17: 
 var $399=$l;
 var $400=((($399)+(1))|0);
 $l=$400;
 label=11;break;
 case 18: 
 label=19;break;
 case 19: 
 var $403=$l;
 var $404=$ld;
 var $405=((($404)-(6))|0);
 var $406=($403|0)<($405|0);
 if($406){label=20;break;}else{label=26;break;}
 case 20: 
 var $408=$2;
 var $409=$l;
 var $410=((($409)+(2))|0);
 var $411=$408>>($410|0);
 $k02=$411;
 var $412=$l;
 var $413=((($412)+(3))|0);
 var $414=1<<$413;
 $k1=$414;
 var $415=$k02;
 var $416=$415>>1;
 $k0_23=$416;
 var $417=$2;
 var $418=$l;
 var $419=((($418)+(6))|0);
 var $420=$417>>($419|0);
 $rlim=$420;
 var $421=$l;
 var $422=((($421)+(1))|0);
 var $423=1<<$422;
 $lim4=$423;
 var $424=$A;
 $A0=$424;
 var $425=$n2;
 var $426=((($425)-(1))|0);
 $i_off=$426;
 var $427=$rlim;
 $r=$427;
 label=21;break;
 case 21: 
 var $429=$r;
 var $430=($429|0)>0;
 if($430){label=22;break;}else{label=24;break;}
 case 22: 
 var $432=$lim4;
 var $433=$u;
 var $434=$i_off;
 var $435=$k0_23;
 var $436=(((-$435))|0);
 var $437=$A0;
 var $438=$k1;
 var $439=$k02;
 _imdct_step3_inner_s_loop($432,$433,$434,$436,$437,$438,$439);
 var $440=$k1;
 var $441=($440<<2);
 var $442=$A0;
 var $443=(($442+($441<<2))|0);
 $A0=$443;
 var $444=$i_off;
 var $445=((($444)-(8))|0);
 $i_off=$445;
 label=23;break;
 case 23: 
 var $447=$r;
 var $448=((($447)-(1))|0);
 $r=$448;
 label=21;break;
 case 24: 
 label=25;break;
 case 25: 
 var $451=$l;
 var $452=((($451)+(1))|0);
 $l=$452;
 label=19;break;
 case 26: 
 var $454=$2;
 var $455=$454>>5;
 var $456=$u;
 var $457=$n2;
 var $458=((($457)-(1))|0);
 var $459=$A;
 var $460=$2;
 _imdct_step3_inner_s_loop_ld654($455,$456,$458,$459,$460);
 var $461=$4;
 var $462=$3;
 var $463=(($462+864)|0);
 var $464=(($463+($461<<2))|0);
 var $465=HEAP32[(($464)>>2)];
 $bitrev=$465;
 var $466=$n4;
 var $467=((($466)-(4))|0);
 var $468=$v;
 var $469=(($468+($467<<2))|0);
 $d05=$469;
 var $470=$n2;
 var $471=((($470)-(4))|0);
 var $472=$v;
 var $473=(($472+($471<<2))|0);
 $d16=$473;
 label=27;break;
 case 27: 
 var $475=$d05;
 var $476=$v;
 var $477=($475>>>0)>=($476>>>0);
 if($477){label=28;break;}else{label=29;break;}
 case 28: 
 var $479=$bitrev;
 var $480=(($479)|0);
 var $481=HEAP16[(($480)>>1)];
 var $482=($481&65535);
 $k4=$482;
 var $483=$k4;
 var $484=(($483)|0);
 var $485=$u;
 var $486=(($485+($484<<2))|0);
 var $487=HEAPF32[(($486)>>2)];
 var $488=$d16;
 var $489=(($488+12)|0);
 HEAPF32[(($489)>>2)]=$487;
 var $490=$k4;
 var $491=((($490)+(1))|0);
 var $492=$u;
 var $493=(($492+($491<<2))|0);
 var $494=HEAPF32[(($493)>>2)];
 var $495=$d16;
 var $496=(($495+8)|0);
 HEAPF32[(($496)>>2)]=$494;
 var $497=$k4;
 var $498=((($497)+(2))|0);
 var $499=$u;
 var $500=(($499+($498<<2))|0);
 var $501=HEAPF32[(($500)>>2)];
 var $502=$d05;
 var $503=(($502+12)|0);
 HEAPF32[(($503)>>2)]=$501;
 var $504=$k4;
 var $505=((($504)+(3))|0);
 var $506=$u;
 var $507=(($506+($505<<2))|0);
 var $508=HEAPF32[(($507)>>2)];
 var $509=$d05;
 var $510=(($509+8)|0);
 HEAPF32[(($510)>>2)]=$508;
 var $511=$bitrev;
 var $512=(($511+2)|0);
 var $513=HEAP16[(($512)>>1)];
 var $514=($513&65535);
 $k4=$514;
 var $515=$k4;
 var $516=(($515)|0);
 var $517=$u;
 var $518=(($517+($516<<2))|0);
 var $519=HEAPF32[(($518)>>2)];
 var $520=$d16;
 var $521=(($520+4)|0);
 HEAPF32[(($521)>>2)]=$519;
 var $522=$k4;
 var $523=((($522)+(1))|0);
 var $524=$u;
 var $525=(($524+($523<<2))|0);
 var $526=HEAPF32[(($525)>>2)];
 var $527=$d16;
 var $528=(($527)|0);
 HEAPF32[(($528)>>2)]=$526;
 var $529=$k4;
 var $530=((($529)+(2))|0);
 var $531=$u;
 var $532=(($531+($530<<2))|0);
 var $533=HEAPF32[(($532)>>2)];
 var $534=$d05;
 var $535=(($534+4)|0);
 HEAPF32[(($535)>>2)]=$533;
 var $536=$k4;
 var $537=((($536)+(3))|0);
 var $538=$u;
 var $539=(($538+($537<<2))|0);
 var $540=HEAPF32[(($539)>>2)];
 var $541=$d05;
 var $542=(($541)|0);
 HEAPF32[(($542)>>2)]=$540;
 var $543=$d05;
 var $544=((($543)-(16))|0);
 $d05=$544;
 var $545=$d16;
 var $546=((($545)-(16))|0);
 $d16=$546;
 var $547=$bitrev;
 var $548=(($547+4)|0);
 $bitrev=$548;
 label=27;break;
 case 29: 
 var $550=$v;
 var $551=$buf2;
 var $552=($550|0)==($551|0);
 if($552){var $556=1;label=31;break;}else{label=30;break;}
 case 30: 
 ___assert_fail(27152,25552,2554,27760);
 throw "Reached an unreachable!";
 label=31;break;
 case 31: 
 var $556;
 var $557=($556&1);
 var $558=$4;
 var $559=$3;
 var $560=(($559+848)|0);
 var $561=(($560+($558<<2))|0);
 var $562=HEAP32[(($561)>>2)];
 $C=$562;
 var $563=$v;
 $d7=$563;
 var $564=$v;
 var $565=$n2;
 var $566=(($564+($565<<2))|0);
 var $567=((($566)-(16))|0);
 $e8=$567;
 label=32;break;
 case 32: 
 var $569=$d7;
 var $570=$e8;
 var $571=($569>>>0)<($570>>>0);
 if($571){label=33;break;}else{label=34;break;}
 case 33: 
 var $573=$d7;
 var $574=(($573)|0);
 var $575=HEAPF32[(($574)>>2)];
 var $576=$e8;
 var $577=(($576+8)|0);
 var $578=HEAPF32[(($577)>>2)];
 var $579=($575)-($578);
 $a02=$579;
 var $580=$d7;
 var $581=(($580+4)|0);
 var $582=HEAPF32[(($581)>>2)];
 var $583=$e8;
 var $584=(($583+12)|0);
 var $585=HEAPF32[(($584)>>2)];
 var $586=($582)+($585);
 $a11=$586;
 var $587=$C;
 var $588=(($587+4)|0);
 var $589=HEAPF32[(($588)>>2)];
 var $590=$a02;
 var $591=($589)*($590);
 var $592=$C;
 var $593=(($592)|0);
 var $594=HEAPF32[(($593)>>2)];
 var $595=$a11;
 var $596=($594)*($595);
 var $597=($591)+($596);
 $b0=$597;
 var $598=$C;
 var $599=(($598+4)|0);
 var $600=HEAPF32[(($599)>>2)];
 var $601=$a11;
 var $602=($600)*($601);
 var $603=$C;
 var $604=(($603)|0);
 var $605=HEAPF32[(($604)>>2)];
 var $606=$a02;
 var $607=($605)*($606);
 var $608=($602)-($607);
 $b1=$608;
 var $609=$d7;
 var $610=(($609)|0);
 var $611=HEAPF32[(($610)>>2)];
 var $612=$e8;
 var $613=(($612+8)|0);
 var $614=HEAPF32[(($613)>>2)];
 var $615=($611)+($614);
 $b2=$615;
 var $616=$d7;
 var $617=(($616+4)|0);
 var $618=HEAPF32[(($617)>>2)];
 var $619=$e8;
 var $620=(($619+12)|0);
 var $621=HEAPF32[(($620)>>2)];
 var $622=($618)-($621);
 $b3=$622;
 var $623=$b2;
 var $624=$b0;
 var $625=($623)+($624);
 var $626=$d7;
 var $627=(($626)|0);
 HEAPF32[(($627)>>2)]=$625;
 var $628=$b3;
 var $629=$b1;
 var $630=($628)+($629);
 var $631=$d7;
 var $632=(($631+4)|0);
 HEAPF32[(($632)>>2)]=$630;
 var $633=$b2;
 var $634=$b0;
 var $635=($633)-($634);
 var $636=$e8;
 var $637=(($636+8)|0);
 HEAPF32[(($637)>>2)]=$635;
 var $638=$b1;
 var $639=$b3;
 var $640=($638)-($639);
 var $641=$e8;
 var $642=(($641+12)|0);
 HEAPF32[(($642)>>2)]=$640;
 var $643=$d7;
 var $644=(($643+8)|0);
 var $645=HEAPF32[(($644)>>2)];
 var $646=$e8;
 var $647=(($646)|0);
 var $648=HEAPF32[(($647)>>2)];
 var $649=($645)-($648);
 $a02=$649;
 var $650=$d7;
 var $651=(($650+12)|0);
 var $652=HEAPF32[(($651)>>2)];
 var $653=$e8;
 var $654=(($653+4)|0);
 var $655=HEAPF32[(($654)>>2)];
 var $656=($652)+($655);
 $a11=$656;
 var $657=$C;
 var $658=(($657+12)|0);
 var $659=HEAPF32[(($658)>>2)];
 var $660=$a02;
 var $661=($659)*($660);
 var $662=$C;
 var $663=(($662+8)|0);
 var $664=HEAPF32[(($663)>>2)];
 var $665=$a11;
 var $666=($664)*($665);
 var $667=($661)+($666);
 $b0=$667;
 var $668=$C;
 var $669=(($668+12)|0);
 var $670=HEAPF32[(($669)>>2)];
 var $671=$a11;
 var $672=($670)*($671);
 var $673=$C;
 var $674=(($673+8)|0);
 var $675=HEAPF32[(($674)>>2)];
 var $676=$a02;
 var $677=($675)*($676);
 var $678=($672)-($677);
 $b1=$678;
 var $679=$d7;
 var $680=(($679+8)|0);
 var $681=HEAPF32[(($680)>>2)];
 var $682=$e8;
 var $683=(($682)|0);
 var $684=HEAPF32[(($683)>>2)];
 var $685=($681)+($684);
 $b2=$685;
 var $686=$d7;
 var $687=(($686+12)|0);
 var $688=HEAPF32[(($687)>>2)];
 var $689=$e8;
 var $690=(($689+4)|0);
 var $691=HEAPF32[(($690)>>2)];
 var $692=($688)-($691);
 $b3=$692;
 var $693=$b2;
 var $694=$b0;
 var $695=($693)+($694);
 var $696=$d7;
 var $697=(($696+8)|0);
 HEAPF32[(($697)>>2)]=$695;
 var $698=$b3;
 var $699=$b1;
 var $700=($698)+($699);
 var $701=$d7;
 var $702=(($701+12)|0);
 HEAPF32[(($702)>>2)]=$700;
 var $703=$b2;
 var $704=$b0;
 var $705=($703)-($704);
 var $706=$e8;
 var $707=(($706)|0);
 HEAPF32[(($707)>>2)]=$705;
 var $708=$b1;
 var $709=$b3;
 var $710=($708)-($709);
 var $711=$e8;
 var $712=(($711+4)|0);
 HEAPF32[(($712)>>2)]=$710;
 var $713=$C;
 var $714=(($713+16)|0);
 $C=$714;
 var $715=$d7;
 var $716=(($715+16)|0);
 $d7=$716;
 var $717=$e8;
 var $718=((($717)-(16))|0);
 $e8=$718;
 label=32;break;
 case 34: 
 var $720=$4;
 var $721=$3;
 var $722=(($721+840)|0);
 var $723=(($722+($720<<2))|0);
 var $724=HEAP32[(($723)>>2)];
 var $725=$n2;
 var $726=(($724+($725<<2))|0);
 var $727=((($726)-(32))|0);
 $B=$727;
 var $728=$buf2;
 var $729=$n2;
 var $730=(($728+($729<<2))|0);
 var $731=((($730)-(32))|0);
 $e11=$731;
 var $732=$1;
 var $733=(($732)|0);
 $d09=$733;
 var $734=$n2;
 var $735=((($734)-(4))|0);
 var $736=$1;
 var $737=(($736+($735<<2))|0);
 $d110=$737;
 var $738=$n2;
 var $739=$1;
 var $740=(($739+($738<<2))|0);
 $d2=$740;
 var $741=$2;
 var $742=((($741)-(4))|0);
 var $743=$1;
 var $744=(($743+($742<<2))|0);
 $d3=$744;
 label=35;break;
 case 35: 
 var $746=$e11;
 var $747=$v;
 var $748=($746>>>0)>=($747>>>0);
 if($748){label=36;break;}else{label=37;break;}
 case 36: 
 var $750=$e11;
 var $751=(($750+24)|0);
 var $752=HEAPF32[(($751)>>2)];
 var $753=$B;
 var $754=(($753+28)|0);
 var $755=HEAPF32[(($754)>>2)];
 var $756=($752)*($755);
 var $757=$e11;
 var $758=(($757+28)|0);
 var $759=HEAPF32[(($758)>>2)];
 var $760=$B;
 var $761=(($760+24)|0);
 var $762=HEAPF32[(($761)>>2)];
 var $763=($759)*($762);
 var $764=($756)-($763);
 $p3=$764;
 var $765=$e11;
 var $766=(($765+24)|0);
 var $767=HEAPF32[(($766)>>2)];
 var $768=((-.0))-($767);
 var $769=$B;
 var $770=(($769+24)|0);
 var $771=HEAPF32[(($770)>>2)];
 var $772=($768)*($771);
 var $773=$e11;
 var $774=(($773+28)|0);
 var $775=HEAPF32[(($774)>>2)];
 var $776=$B;
 var $777=(($776+28)|0);
 var $778=HEAPF32[(($777)>>2)];
 var $779=($775)*($778);
 var $780=($772)-($779);
 $p2=$780;
 var $781=$p3;
 var $782=$d09;
 var $783=(($782)|0);
 HEAPF32[(($783)>>2)]=$781;
 var $784=$p3;
 var $785=((-.0))-($784);
 var $786=$d110;
 var $787=(($786+12)|0);
 HEAPF32[(($787)>>2)]=$785;
 var $788=$p2;
 var $789=$d2;
 var $790=(($789)|0);
 HEAPF32[(($790)>>2)]=$788;
 var $791=$p2;
 var $792=$d3;
 var $793=(($792+12)|0);
 HEAPF32[(($793)>>2)]=$791;
 var $794=$e11;
 var $795=(($794+16)|0);
 var $796=HEAPF32[(($795)>>2)];
 var $797=$B;
 var $798=(($797+20)|0);
 var $799=HEAPF32[(($798)>>2)];
 var $800=($796)*($799);
 var $801=$e11;
 var $802=(($801+20)|0);
 var $803=HEAPF32[(($802)>>2)];
 var $804=$B;
 var $805=(($804+16)|0);
 var $806=HEAPF32[(($805)>>2)];
 var $807=($803)*($806);
 var $808=($800)-($807);
 $p1=$808;
 var $809=$e11;
 var $810=(($809+16)|0);
 var $811=HEAPF32[(($810)>>2)];
 var $812=((-.0))-($811);
 var $813=$B;
 var $814=(($813+16)|0);
 var $815=HEAPF32[(($814)>>2)];
 var $816=($812)*($815);
 var $817=$e11;
 var $818=(($817+20)|0);
 var $819=HEAPF32[(($818)>>2)];
 var $820=$B;
 var $821=(($820+20)|0);
 var $822=HEAPF32[(($821)>>2)];
 var $823=($819)*($822);
 var $824=($816)-($823);
 $p0=$824;
 var $825=$p1;
 var $826=$d09;
 var $827=(($826+4)|0);
 HEAPF32[(($827)>>2)]=$825;
 var $828=$p1;
 var $829=((-.0))-($828);
 var $830=$d110;
 var $831=(($830+8)|0);
 HEAPF32[(($831)>>2)]=$829;
 var $832=$p0;
 var $833=$d2;
 var $834=(($833+4)|0);
 HEAPF32[(($834)>>2)]=$832;
 var $835=$p0;
 var $836=$d3;
 var $837=(($836+8)|0);
 HEAPF32[(($837)>>2)]=$835;
 var $838=$e11;
 var $839=(($838+8)|0);
 var $840=HEAPF32[(($839)>>2)];
 var $841=$B;
 var $842=(($841+12)|0);
 var $843=HEAPF32[(($842)>>2)];
 var $844=($840)*($843);
 var $845=$e11;
 var $846=(($845+12)|0);
 var $847=HEAPF32[(($846)>>2)];
 var $848=$B;
 var $849=(($848+8)|0);
 var $850=HEAPF32[(($849)>>2)];
 var $851=($847)*($850);
 var $852=($844)-($851);
 $p3=$852;
 var $853=$e11;
 var $854=(($853+8)|0);
 var $855=HEAPF32[(($854)>>2)];
 var $856=((-.0))-($855);
 var $857=$B;
 var $858=(($857+8)|0);
 var $859=HEAPF32[(($858)>>2)];
 var $860=($856)*($859);
 var $861=$e11;
 var $862=(($861+12)|0);
 var $863=HEAPF32[(($862)>>2)];
 var $864=$B;
 var $865=(($864+12)|0);
 var $866=HEAPF32[(($865)>>2)];
 var $867=($863)*($866);
 var $868=($860)-($867);
 $p2=$868;
 var $869=$p3;
 var $870=$d09;
 var $871=(($870+8)|0);
 HEAPF32[(($871)>>2)]=$869;
 var $872=$p3;
 var $873=((-.0))-($872);
 var $874=$d110;
 var $875=(($874+4)|0);
 HEAPF32[(($875)>>2)]=$873;
 var $876=$p2;
 var $877=$d2;
 var $878=(($877+8)|0);
 HEAPF32[(($878)>>2)]=$876;
 var $879=$p2;
 var $880=$d3;
 var $881=(($880+4)|0);
 HEAPF32[(($881)>>2)]=$879;
 var $882=$e11;
 var $883=(($882)|0);
 var $884=HEAPF32[(($883)>>2)];
 var $885=$B;
 var $886=(($885+4)|0);
 var $887=HEAPF32[(($886)>>2)];
 var $888=($884)*($887);
 var $889=$e11;
 var $890=(($889+4)|0);
 var $891=HEAPF32[(($890)>>2)];
 var $892=$B;
 var $893=(($892)|0);
 var $894=HEAPF32[(($893)>>2)];
 var $895=($891)*($894);
 var $896=($888)-($895);
 $p1=$896;
 var $897=$e11;
 var $898=(($897)|0);
 var $899=HEAPF32[(($898)>>2)];
 var $900=((-.0))-($899);
 var $901=$B;
 var $902=(($901)|0);
 var $903=HEAPF32[(($902)>>2)];
 var $904=($900)*($903);
 var $905=$e11;
 var $906=(($905+4)|0);
 var $907=HEAPF32[(($906)>>2)];
 var $908=$B;
 var $909=(($908+4)|0);
 var $910=HEAPF32[(($909)>>2)];
 var $911=($907)*($910);
 var $912=($904)-($911);
 $p0=$912;
 var $913=$p1;
 var $914=$d09;
 var $915=(($914+12)|0);
 HEAPF32[(($915)>>2)]=$913;
 var $916=$p1;
 var $917=((-.0))-($916);
 var $918=$d110;
 var $919=(($918)|0);
 HEAPF32[(($919)>>2)]=$917;
 var $920=$p0;
 var $921=$d2;
 var $922=(($921+12)|0);
 HEAPF32[(($922)>>2)]=$920;
 var $923=$p0;
 var $924=$d3;
 var $925=(($924)|0);
 HEAPF32[(($925)>>2)]=$923;
 var $926=$B;
 var $927=((($926)-(32))|0);
 $B=$927;
 var $928=$e11;
 var $929=((($928)-(32))|0);
 $e11=$929;
 var $930=$d09;
 var $931=(($930+16)|0);
 $d09=$931;
 var $932=$d2;
 var $933=(($932+16)|0);
 $d2=$933;
 var $934=$d110;
 var $935=((($934)-(16))|0);
 $d110=$935;
 var $936=$d3;
 var $937=((($936)-(16))|0);
 $d3=$937;
 label=35;break;
 case 37: 
 var $939=$save_point;
 var $940=$3;
 var $941=(($940+96)|0);
 HEAP32[(($941)>>2)]=$939;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _imdct_step3_iter0_loop($n,$e,$i_off,$k_off,$A){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $ee0;
 var $ee2;
 var $i;
 var $k00_20;
 var $k01_21;
 $1=$n;
 $2=$e;
 $3=$i_off;
 $4=$k_off;
 $5=$A;
 var $6=$2;
 var $7=$3;
 var $8=(($6+($7<<2))|0);
 $ee0=$8;
 var $9=$ee0;
 var $10=$4;
 var $11=(($9+($10<<2))|0);
 $ee2=$11;
 var $12=$1;
 var $13=$12&3;
 var $14=($13|0)==0;
 if($14){var $18=0;label=3;break;}else{label=2;break;}
 case 2: 
 ___assert_fail(26824,25552,2149,27792);
 throw "Reached an unreachable!";
 label=3;break;
 case 3: 
 var $18;
 var $19=($18&1);
 var $20=$1;
 var $21=$20>>2;
 $i=$21;
 label=4;break;
 case 4: 
 var $23=$i;
 var $24=($23|0)>0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=$ee0;
 var $27=(($26)|0);
 var $28=HEAPF32[(($27)>>2)];
 var $29=$ee2;
 var $30=(($29)|0);
 var $31=HEAPF32[(($30)>>2)];
 var $32=($28)-($31);
 $k00_20=$32;
 var $33=$ee0;
 var $34=((($33)-(4))|0);
 var $35=HEAPF32[(($34)>>2)];
 var $36=$ee2;
 var $37=((($36)-(4))|0);
 var $38=HEAPF32[(($37)>>2)];
 var $39=($35)-($38);
 $k01_21=$39;
 var $40=$ee2;
 var $41=(($40)|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=$ee0;
 var $44=(($43)|0);
 var $45=HEAPF32[(($44)>>2)];
 var $46=($45)+($42);
 HEAPF32[(($44)>>2)]=$46;
 var $47=$ee2;
 var $48=((($47)-(4))|0);
 var $49=HEAPF32[(($48)>>2)];
 var $50=$ee0;
 var $51=((($50)-(4))|0);
 var $52=HEAPF32[(($51)>>2)];
 var $53=($52)+($49);
 HEAPF32[(($51)>>2)]=$53;
 var $54=$k00_20;
 var $55=$5;
 var $56=(($55)|0);
 var $57=HEAPF32[(($56)>>2)];
 var $58=($54)*($57);
 var $59=$k01_21;
 var $60=$5;
 var $61=(($60+4)|0);
 var $62=HEAPF32[(($61)>>2)];
 var $63=($59)*($62);
 var $64=($58)-($63);
 var $65=$ee2;
 var $66=(($65)|0);
 HEAPF32[(($66)>>2)]=$64;
 var $67=$k01_21;
 var $68=$5;
 var $69=(($68)|0);
 var $70=HEAPF32[(($69)>>2)];
 var $71=($67)*($70);
 var $72=$k00_20;
 var $73=$5;
 var $74=(($73+4)|0);
 var $75=HEAPF32[(($74)>>2)];
 var $76=($72)*($75);
 var $77=($71)+($76);
 var $78=$ee2;
 var $79=((($78)-(4))|0);
 HEAPF32[(($79)>>2)]=$77;
 var $80=$5;
 var $81=(($80+32)|0);
 $5=$81;
 var $82=$ee0;
 var $83=((($82)-(8))|0);
 var $84=HEAPF32[(($83)>>2)];
 var $85=$ee2;
 var $86=((($85)-(8))|0);
 var $87=HEAPF32[(($86)>>2)];
 var $88=($84)-($87);
 $k00_20=$88;
 var $89=$ee0;
 var $90=((($89)-(12))|0);
 var $91=HEAPF32[(($90)>>2)];
 var $92=$ee2;
 var $93=((($92)-(12))|0);
 var $94=HEAPF32[(($93)>>2)];
 var $95=($91)-($94);
 $k01_21=$95;
 var $96=$ee2;
 var $97=((($96)-(8))|0);
 var $98=HEAPF32[(($97)>>2)];
 var $99=$ee0;
 var $100=((($99)-(8))|0);
 var $101=HEAPF32[(($100)>>2)];
 var $102=($101)+($98);
 HEAPF32[(($100)>>2)]=$102;
 var $103=$ee2;
 var $104=((($103)-(12))|0);
 var $105=HEAPF32[(($104)>>2)];
 var $106=$ee0;
 var $107=((($106)-(12))|0);
 var $108=HEAPF32[(($107)>>2)];
 var $109=($108)+($105);
 HEAPF32[(($107)>>2)]=$109;
 var $110=$k00_20;
 var $111=$5;
 var $112=(($111)|0);
 var $113=HEAPF32[(($112)>>2)];
 var $114=($110)*($113);
 var $115=$k01_21;
 var $116=$5;
 var $117=(($116+4)|0);
 var $118=HEAPF32[(($117)>>2)];
 var $119=($115)*($118);
 var $120=($114)-($119);
 var $121=$ee2;
 var $122=((($121)-(8))|0);
 HEAPF32[(($122)>>2)]=$120;
 var $123=$k01_21;
 var $124=$5;
 var $125=(($124)|0);
 var $126=HEAPF32[(($125)>>2)];
 var $127=($123)*($126);
 var $128=$k00_20;
 var $129=$5;
 var $130=(($129+4)|0);
 var $131=HEAPF32[(($130)>>2)];
 var $132=($128)*($131);
 var $133=($127)+($132);
 var $134=$ee2;
 var $135=((($134)-(12))|0);
 HEAPF32[(($135)>>2)]=$133;
 var $136=$5;
 var $137=(($136+32)|0);
 $5=$137;
 var $138=$ee0;
 var $139=((($138)-(16))|0);
 var $140=HEAPF32[(($139)>>2)];
 var $141=$ee2;
 var $142=((($141)-(16))|0);
 var $143=HEAPF32[(($142)>>2)];
 var $144=($140)-($143);
 $k00_20=$144;
 var $145=$ee0;
 var $146=((($145)-(20))|0);
 var $147=HEAPF32[(($146)>>2)];
 var $148=$ee2;
 var $149=((($148)-(20))|0);
 var $150=HEAPF32[(($149)>>2)];
 var $151=($147)-($150);
 $k01_21=$151;
 var $152=$ee2;
 var $153=((($152)-(16))|0);
 var $154=HEAPF32[(($153)>>2)];
 var $155=$ee0;
 var $156=((($155)-(16))|0);
 var $157=HEAPF32[(($156)>>2)];
 var $158=($157)+($154);
 HEAPF32[(($156)>>2)]=$158;
 var $159=$ee2;
 var $160=((($159)-(20))|0);
 var $161=HEAPF32[(($160)>>2)];
 var $162=$ee0;
 var $163=((($162)-(20))|0);
 var $164=HEAPF32[(($163)>>2)];
 var $165=($164)+($161);
 HEAPF32[(($163)>>2)]=$165;
 var $166=$k00_20;
 var $167=$5;
 var $168=(($167)|0);
 var $169=HEAPF32[(($168)>>2)];
 var $170=($166)*($169);
 var $171=$k01_21;
 var $172=$5;
 var $173=(($172+4)|0);
 var $174=HEAPF32[(($173)>>2)];
 var $175=($171)*($174);
 var $176=($170)-($175);
 var $177=$ee2;
 var $178=((($177)-(16))|0);
 HEAPF32[(($178)>>2)]=$176;
 var $179=$k01_21;
 var $180=$5;
 var $181=(($180)|0);
 var $182=HEAPF32[(($181)>>2)];
 var $183=($179)*($182);
 var $184=$k00_20;
 var $185=$5;
 var $186=(($185+4)|0);
 var $187=HEAPF32[(($186)>>2)];
 var $188=($184)*($187);
 var $189=($183)+($188);
 var $190=$ee2;
 var $191=((($190)-(20))|0);
 HEAPF32[(($191)>>2)]=$189;
 var $192=$5;
 var $193=(($192+32)|0);
 $5=$193;
 var $194=$ee0;
 var $195=((($194)-(24))|0);
 var $196=HEAPF32[(($195)>>2)];
 var $197=$ee2;
 var $198=((($197)-(24))|0);
 var $199=HEAPF32[(($198)>>2)];
 var $200=($196)-($199);
 $k00_20=$200;
 var $201=$ee0;
 var $202=((($201)-(28))|0);
 var $203=HEAPF32[(($202)>>2)];
 var $204=$ee2;
 var $205=((($204)-(28))|0);
 var $206=HEAPF32[(($205)>>2)];
 var $207=($203)-($206);
 $k01_21=$207;
 var $208=$ee2;
 var $209=((($208)-(24))|0);
 var $210=HEAPF32[(($209)>>2)];
 var $211=$ee0;
 var $212=((($211)-(24))|0);
 var $213=HEAPF32[(($212)>>2)];
 var $214=($213)+($210);
 HEAPF32[(($212)>>2)]=$214;
 var $215=$ee2;
 var $216=((($215)-(28))|0);
 var $217=HEAPF32[(($216)>>2)];
 var $218=$ee0;
 var $219=((($218)-(28))|0);
 var $220=HEAPF32[(($219)>>2)];
 var $221=($220)+($217);
 HEAPF32[(($219)>>2)]=$221;
 var $222=$k00_20;
 var $223=$5;
 var $224=(($223)|0);
 var $225=HEAPF32[(($224)>>2)];
 var $226=($222)*($225);
 var $227=$k01_21;
 var $228=$5;
 var $229=(($228+4)|0);
 var $230=HEAPF32[(($229)>>2)];
 var $231=($227)*($230);
 var $232=($226)-($231);
 var $233=$ee2;
 var $234=((($233)-(24))|0);
 HEAPF32[(($234)>>2)]=$232;
 var $235=$k01_21;
 var $236=$5;
 var $237=(($236)|0);
 var $238=HEAPF32[(($237)>>2)];
 var $239=($235)*($238);
 var $240=$k00_20;
 var $241=$5;
 var $242=(($241+4)|0);
 var $243=HEAPF32[(($242)>>2)];
 var $244=($240)*($243);
 var $245=($239)+($244);
 var $246=$ee2;
 var $247=((($246)-(28))|0);
 HEAPF32[(($247)>>2)]=$245;
 var $248=$5;
 var $249=(($248+32)|0);
 $5=$249;
 var $250=$ee0;
 var $251=((($250)-(32))|0);
 $ee0=$251;
 var $252=$ee2;
 var $253=((($252)-(32))|0);
 $ee2=$253;
 label=6;break;
 case 6: 
 var $255=$i;
 var $256=((($255)-(1))|0);
 $i=$256;
 label=4;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _imdct_step3_inner_r_loop($lim,$e,$d0,$k_off,$A,$k1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $k00_20;
 var $k01_21;
 var $e0;
 var $e2;
 $1=$lim;
 $2=$e;
 $3=$d0;
 $4=$k_off;
 $5=$A;
 $6=$k1;
 var $7=$2;
 var $8=$3;
 var $9=(($7+($8<<2))|0);
 $e0=$9;
 var $10=$e0;
 var $11=$4;
 var $12=(($10+($11<<2))|0);
 $e2=$12;
 var $13=$1;
 var $14=$13>>2;
 $i=$14;
 label=2;break;
 case 2: 
 var $16=$i;
 var $17=($16|0)>0;
 if($17){label=3;break;}else{label=5;break;}
 case 3: 
 var $19=$e0;
 var $20=(($19)|0);
 var $21=HEAPF32[(($20)>>2)];
 var $22=$e2;
 var $23=(($22)|0);
 var $24=HEAPF32[(($23)>>2)];
 var $25=($21)-($24);
 $k00_20=$25;
 var $26=$e0;
 var $27=((($26)-(4))|0);
 var $28=HEAPF32[(($27)>>2)];
 var $29=$e2;
 var $30=((($29)-(4))|0);
 var $31=HEAPF32[(($30)>>2)];
 var $32=($28)-($31);
 $k01_21=$32;
 var $33=$e2;
 var $34=(($33)|0);
 var $35=HEAPF32[(($34)>>2)];
 var $36=$e0;
 var $37=(($36)|0);
 var $38=HEAPF32[(($37)>>2)];
 var $39=($38)+($35);
 HEAPF32[(($37)>>2)]=$39;
 var $40=$e2;
 var $41=((($40)-(4))|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=$e0;
 var $44=((($43)-(4))|0);
 var $45=HEAPF32[(($44)>>2)];
 var $46=($45)+($42);
 HEAPF32[(($44)>>2)]=$46;
 var $47=$k00_20;
 var $48=$5;
 var $49=(($48)|0);
 var $50=HEAPF32[(($49)>>2)];
 var $51=($47)*($50);
 var $52=$k01_21;
 var $53=$5;
 var $54=(($53+4)|0);
 var $55=HEAPF32[(($54)>>2)];
 var $56=($52)*($55);
 var $57=($51)-($56);
 var $58=$e2;
 var $59=(($58)|0);
 HEAPF32[(($59)>>2)]=$57;
 var $60=$k01_21;
 var $61=$5;
 var $62=(($61)|0);
 var $63=HEAPF32[(($62)>>2)];
 var $64=($60)*($63);
 var $65=$k00_20;
 var $66=$5;
 var $67=(($66+4)|0);
 var $68=HEAPF32[(($67)>>2)];
 var $69=($65)*($68);
 var $70=($64)+($69);
 var $71=$e2;
 var $72=((($71)-(4))|0);
 HEAPF32[(($72)>>2)]=$70;
 var $73=$6;
 var $74=$5;
 var $75=(($74+($73<<2))|0);
 $5=$75;
 var $76=$e0;
 var $77=((($76)-(8))|0);
 var $78=HEAPF32[(($77)>>2)];
 var $79=$e2;
 var $80=((($79)-(8))|0);
 var $81=HEAPF32[(($80)>>2)];
 var $82=($78)-($81);
 $k00_20=$82;
 var $83=$e0;
 var $84=((($83)-(12))|0);
 var $85=HEAPF32[(($84)>>2)];
 var $86=$e2;
 var $87=((($86)-(12))|0);
 var $88=HEAPF32[(($87)>>2)];
 var $89=($85)-($88);
 $k01_21=$89;
 var $90=$e2;
 var $91=((($90)-(8))|0);
 var $92=HEAPF32[(($91)>>2)];
 var $93=$e0;
 var $94=((($93)-(8))|0);
 var $95=HEAPF32[(($94)>>2)];
 var $96=($95)+($92);
 HEAPF32[(($94)>>2)]=$96;
 var $97=$e2;
 var $98=((($97)-(12))|0);
 var $99=HEAPF32[(($98)>>2)];
 var $100=$e0;
 var $101=((($100)-(12))|0);
 var $102=HEAPF32[(($101)>>2)];
 var $103=($102)+($99);
 HEAPF32[(($101)>>2)]=$103;
 var $104=$k00_20;
 var $105=$5;
 var $106=(($105)|0);
 var $107=HEAPF32[(($106)>>2)];
 var $108=($104)*($107);
 var $109=$k01_21;
 var $110=$5;
 var $111=(($110+4)|0);
 var $112=HEAPF32[(($111)>>2)];
 var $113=($109)*($112);
 var $114=($108)-($113);
 var $115=$e2;
 var $116=((($115)-(8))|0);
 HEAPF32[(($116)>>2)]=$114;
 var $117=$k01_21;
 var $118=$5;
 var $119=(($118)|0);
 var $120=HEAPF32[(($119)>>2)];
 var $121=($117)*($120);
 var $122=$k00_20;
 var $123=$5;
 var $124=(($123+4)|0);
 var $125=HEAPF32[(($124)>>2)];
 var $126=($122)*($125);
 var $127=($121)+($126);
 var $128=$e2;
 var $129=((($128)-(12))|0);
 HEAPF32[(($129)>>2)]=$127;
 var $130=$6;
 var $131=$5;
 var $132=(($131+($130<<2))|0);
 $5=$132;
 var $133=$e0;
 var $134=((($133)-(16))|0);
 var $135=HEAPF32[(($134)>>2)];
 var $136=$e2;
 var $137=((($136)-(16))|0);
 var $138=HEAPF32[(($137)>>2)];
 var $139=($135)-($138);
 $k00_20=$139;
 var $140=$e0;
 var $141=((($140)-(20))|0);
 var $142=HEAPF32[(($141)>>2)];
 var $143=$e2;
 var $144=((($143)-(20))|0);
 var $145=HEAPF32[(($144)>>2)];
 var $146=($142)-($145);
 $k01_21=$146;
 var $147=$e2;
 var $148=((($147)-(16))|0);
 var $149=HEAPF32[(($148)>>2)];
 var $150=$e0;
 var $151=((($150)-(16))|0);
 var $152=HEAPF32[(($151)>>2)];
 var $153=($152)+($149);
 HEAPF32[(($151)>>2)]=$153;
 var $154=$e2;
 var $155=((($154)-(20))|0);
 var $156=HEAPF32[(($155)>>2)];
 var $157=$e0;
 var $158=((($157)-(20))|0);
 var $159=HEAPF32[(($158)>>2)];
 var $160=($159)+($156);
 HEAPF32[(($158)>>2)]=$160;
 var $161=$k00_20;
 var $162=$5;
 var $163=(($162)|0);
 var $164=HEAPF32[(($163)>>2)];
 var $165=($161)*($164);
 var $166=$k01_21;
 var $167=$5;
 var $168=(($167+4)|0);
 var $169=HEAPF32[(($168)>>2)];
 var $170=($166)*($169);
 var $171=($165)-($170);
 var $172=$e2;
 var $173=((($172)-(16))|0);
 HEAPF32[(($173)>>2)]=$171;
 var $174=$k01_21;
 var $175=$5;
 var $176=(($175)|0);
 var $177=HEAPF32[(($176)>>2)];
 var $178=($174)*($177);
 var $179=$k00_20;
 var $180=$5;
 var $181=(($180+4)|0);
 var $182=HEAPF32[(($181)>>2)];
 var $183=($179)*($182);
 var $184=($178)+($183);
 var $185=$e2;
 var $186=((($185)-(20))|0);
 HEAPF32[(($186)>>2)]=$184;
 var $187=$6;
 var $188=$5;
 var $189=(($188+($187<<2))|0);
 $5=$189;
 var $190=$e0;
 var $191=((($190)-(24))|0);
 var $192=HEAPF32[(($191)>>2)];
 var $193=$e2;
 var $194=((($193)-(24))|0);
 var $195=HEAPF32[(($194)>>2)];
 var $196=($192)-($195);
 $k00_20=$196;
 var $197=$e0;
 var $198=((($197)-(28))|0);
 var $199=HEAPF32[(($198)>>2)];
 var $200=$e2;
 var $201=((($200)-(28))|0);
 var $202=HEAPF32[(($201)>>2)];
 var $203=($199)-($202);
 $k01_21=$203;
 var $204=$e2;
 var $205=((($204)-(24))|0);
 var $206=HEAPF32[(($205)>>2)];
 var $207=$e0;
 var $208=((($207)-(24))|0);
 var $209=HEAPF32[(($208)>>2)];
 var $210=($209)+($206);
 HEAPF32[(($208)>>2)]=$210;
 var $211=$e2;
 var $212=((($211)-(28))|0);
 var $213=HEAPF32[(($212)>>2)];
 var $214=$e0;
 var $215=((($214)-(28))|0);
 var $216=HEAPF32[(($215)>>2)];
 var $217=($216)+($213);
 HEAPF32[(($215)>>2)]=$217;
 var $218=$k00_20;
 var $219=$5;
 var $220=(($219)|0);
 var $221=HEAPF32[(($220)>>2)];
 var $222=($218)*($221);
 var $223=$k01_21;
 var $224=$5;
 var $225=(($224+4)|0);
 var $226=HEAPF32[(($225)>>2)];
 var $227=($223)*($226);
 var $228=($222)-($227);
 var $229=$e2;
 var $230=((($229)-(24))|0);
 HEAPF32[(($230)>>2)]=$228;
 var $231=$k01_21;
 var $232=$5;
 var $233=(($232)|0);
 var $234=HEAPF32[(($233)>>2)];
 var $235=($231)*($234);
 var $236=$k00_20;
 var $237=$5;
 var $238=(($237+4)|0);
 var $239=HEAPF32[(($238)>>2)];
 var $240=($236)*($239);
 var $241=($235)+($240);
 var $242=$e2;
 var $243=((($242)-(28))|0);
 HEAPF32[(($243)>>2)]=$241;
 var $244=$e0;
 var $245=((($244)-(32))|0);
 $e0=$245;
 var $246=$e2;
 var $247=((($246)-(32))|0);
 $e2=$247;
 var $248=$6;
 var $249=$5;
 var $250=(($249+($248<<2))|0);
 $5=$250;
 label=4;break;
 case 4: 
 var $252=$i;
 var $253=((($252)-(1))|0);
 $i=$253;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _imdct_step3_inner_s_loop($n,$e,$i_off,$k_off,$A,$a_off,$k0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $i;
 var $A0;
 var $A1;
 var $A2;
 var $A3;
 var $A4;
 var $A5;
 var $A6;
 var $A7;
 var $k00;
 var $k11;
 var $ee0;
 var $ee2;
 $1=$n;
 $2=$e;
 $3=$i_off;
 $4=$k_off;
 $5=$A;
 $6=$a_off;
 $7=$k0;
 var $8=$5;
 var $9=(($8)|0);
 var $10=HEAPF32[(($9)>>2)];
 $A0=$10;
 var $11=$5;
 var $12=(($11+4)|0);
 var $13=HEAPF32[(($12)>>2)];
 $A1=$13;
 var $14=$6;
 var $15=(($14)|0);
 var $16=$5;
 var $17=(($16+($15<<2))|0);
 var $18=HEAPF32[(($17)>>2)];
 $A2=$18;
 var $19=$6;
 var $20=(($19)|0);
 var $21=((($20)+(1))|0);
 var $22=$5;
 var $23=(($22+($21<<2))|0);
 var $24=HEAPF32[(($23)>>2)];
 $A3=$24;
 var $25=$6;
 var $26=($25<<1);
 var $27=(($26)|0);
 var $28=(($27)|0);
 var $29=$5;
 var $30=(($29+($28<<2))|0);
 var $31=HEAPF32[(($30)>>2)];
 $A4=$31;
 var $32=$6;
 var $33=($32<<1);
 var $34=(($33)|0);
 var $35=((($34)+(1))|0);
 var $36=$5;
 var $37=(($36+($35<<2))|0);
 var $38=HEAPF32[(($37)>>2)];
 $A5=$38;
 var $39=$6;
 var $40=((($39)*(3))&-1);
 var $41=(($40)|0);
 var $42=(($41)|0);
 var $43=$5;
 var $44=(($43+($42<<2))|0);
 var $45=HEAPF32[(($44)>>2)];
 $A6=$45;
 var $46=$6;
 var $47=((($46)*(3))&-1);
 var $48=(($47)|0);
 var $49=((($48)+(1))|0);
 var $50=$5;
 var $51=(($50+($49<<2))|0);
 var $52=HEAPF32[(($51)>>2)];
 $A7=$52;
 var $53=$2;
 var $54=$3;
 var $55=(($53+($54<<2))|0);
 $ee0=$55;
 var $56=$ee0;
 var $57=$4;
 var $58=(($56+($57<<2))|0);
 $ee2=$58;
 var $59=$1;
 $i=$59;
 label=2;break;
 case 2: 
 var $61=$i;
 var $62=($61|0)>0;
 if($62){label=3;break;}else{label=5;break;}
 case 3: 
 var $64=$ee0;
 var $65=(($64)|0);
 var $66=HEAPF32[(($65)>>2)];
 var $67=$ee2;
 var $68=(($67)|0);
 var $69=HEAPF32[(($68)>>2)];
 var $70=($66)-($69);
 $k00=$70;
 var $71=$ee0;
 var $72=((($71)-(4))|0);
 var $73=HEAPF32[(($72)>>2)];
 var $74=$ee2;
 var $75=((($74)-(4))|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=($73)-($76);
 $k11=$77;
 var $78=$ee0;
 var $79=(($78)|0);
 var $80=HEAPF32[(($79)>>2)];
 var $81=$ee2;
 var $82=(($81)|0);
 var $83=HEAPF32[(($82)>>2)];
 var $84=($80)+($83);
 var $85=$ee0;
 var $86=(($85)|0);
 HEAPF32[(($86)>>2)]=$84;
 var $87=$ee0;
 var $88=((($87)-(4))|0);
 var $89=HEAPF32[(($88)>>2)];
 var $90=$ee2;
 var $91=((($90)-(4))|0);
 var $92=HEAPF32[(($91)>>2)];
 var $93=($89)+($92);
 var $94=$ee0;
 var $95=((($94)-(4))|0);
 HEAPF32[(($95)>>2)]=$93;
 var $96=$k00;
 var $97=$A0;
 var $98=($96)*($97);
 var $99=$k11;
 var $100=$A1;
 var $101=($99)*($100);
 var $102=($98)-($101);
 var $103=$ee2;
 var $104=(($103)|0);
 HEAPF32[(($104)>>2)]=$102;
 var $105=$k11;
 var $106=$A0;
 var $107=($105)*($106);
 var $108=$k00;
 var $109=$A1;
 var $110=($108)*($109);
 var $111=($107)+($110);
 var $112=$ee2;
 var $113=((($112)-(4))|0);
 HEAPF32[(($113)>>2)]=$111;
 var $114=$ee0;
 var $115=((($114)-(8))|0);
 var $116=HEAPF32[(($115)>>2)];
 var $117=$ee2;
 var $118=((($117)-(8))|0);
 var $119=HEAPF32[(($118)>>2)];
 var $120=($116)-($119);
 $k00=$120;
 var $121=$ee0;
 var $122=((($121)-(12))|0);
 var $123=HEAPF32[(($122)>>2)];
 var $124=$ee2;
 var $125=((($124)-(12))|0);
 var $126=HEAPF32[(($125)>>2)];
 var $127=($123)-($126);
 $k11=$127;
 var $128=$ee0;
 var $129=((($128)-(8))|0);
 var $130=HEAPF32[(($129)>>2)];
 var $131=$ee2;
 var $132=((($131)-(8))|0);
 var $133=HEAPF32[(($132)>>2)];
 var $134=($130)+($133);
 var $135=$ee0;
 var $136=((($135)-(8))|0);
 HEAPF32[(($136)>>2)]=$134;
 var $137=$ee0;
 var $138=((($137)-(12))|0);
 var $139=HEAPF32[(($138)>>2)];
 var $140=$ee2;
 var $141=((($140)-(12))|0);
 var $142=HEAPF32[(($141)>>2)];
 var $143=($139)+($142);
 var $144=$ee0;
 var $145=((($144)-(12))|0);
 HEAPF32[(($145)>>2)]=$143;
 var $146=$k00;
 var $147=$A2;
 var $148=($146)*($147);
 var $149=$k11;
 var $150=$A3;
 var $151=($149)*($150);
 var $152=($148)-($151);
 var $153=$ee2;
 var $154=((($153)-(8))|0);
 HEAPF32[(($154)>>2)]=$152;
 var $155=$k11;
 var $156=$A2;
 var $157=($155)*($156);
 var $158=$k00;
 var $159=$A3;
 var $160=($158)*($159);
 var $161=($157)+($160);
 var $162=$ee2;
 var $163=((($162)-(12))|0);
 HEAPF32[(($163)>>2)]=$161;
 var $164=$ee0;
 var $165=((($164)-(16))|0);
 var $166=HEAPF32[(($165)>>2)];
 var $167=$ee2;
 var $168=((($167)-(16))|0);
 var $169=HEAPF32[(($168)>>2)];
 var $170=($166)-($169);
 $k00=$170;
 var $171=$ee0;
 var $172=((($171)-(20))|0);
 var $173=HEAPF32[(($172)>>2)];
 var $174=$ee2;
 var $175=((($174)-(20))|0);
 var $176=HEAPF32[(($175)>>2)];
 var $177=($173)-($176);
 $k11=$177;
 var $178=$ee0;
 var $179=((($178)-(16))|0);
 var $180=HEAPF32[(($179)>>2)];
 var $181=$ee2;
 var $182=((($181)-(16))|0);
 var $183=HEAPF32[(($182)>>2)];
 var $184=($180)+($183);
 var $185=$ee0;
 var $186=((($185)-(16))|0);
 HEAPF32[(($186)>>2)]=$184;
 var $187=$ee0;
 var $188=((($187)-(20))|0);
 var $189=HEAPF32[(($188)>>2)];
 var $190=$ee2;
 var $191=((($190)-(20))|0);
 var $192=HEAPF32[(($191)>>2)];
 var $193=($189)+($192);
 var $194=$ee0;
 var $195=((($194)-(20))|0);
 HEAPF32[(($195)>>2)]=$193;
 var $196=$k00;
 var $197=$A4;
 var $198=($196)*($197);
 var $199=$k11;
 var $200=$A5;
 var $201=($199)*($200);
 var $202=($198)-($201);
 var $203=$ee2;
 var $204=((($203)-(16))|0);
 HEAPF32[(($204)>>2)]=$202;
 var $205=$k11;
 var $206=$A4;
 var $207=($205)*($206);
 var $208=$k00;
 var $209=$A5;
 var $210=($208)*($209);
 var $211=($207)+($210);
 var $212=$ee2;
 var $213=((($212)-(20))|0);
 HEAPF32[(($213)>>2)]=$211;
 var $214=$ee0;
 var $215=((($214)-(24))|0);
 var $216=HEAPF32[(($215)>>2)];
 var $217=$ee2;
 var $218=((($217)-(24))|0);
 var $219=HEAPF32[(($218)>>2)];
 var $220=($216)-($219);
 $k00=$220;
 var $221=$ee0;
 var $222=((($221)-(28))|0);
 var $223=HEAPF32[(($222)>>2)];
 var $224=$ee2;
 var $225=((($224)-(28))|0);
 var $226=HEAPF32[(($225)>>2)];
 var $227=($223)-($226);
 $k11=$227;
 var $228=$ee0;
 var $229=((($228)-(24))|0);
 var $230=HEAPF32[(($229)>>2)];
 var $231=$ee2;
 var $232=((($231)-(24))|0);
 var $233=HEAPF32[(($232)>>2)];
 var $234=($230)+($233);
 var $235=$ee0;
 var $236=((($235)-(24))|0);
 HEAPF32[(($236)>>2)]=$234;
 var $237=$ee0;
 var $238=((($237)-(28))|0);
 var $239=HEAPF32[(($238)>>2)];
 var $240=$ee2;
 var $241=((($240)-(28))|0);
 var $242=HEAPF32[(($241)>>2)];
 var $243=($239)+($242);
 var $244=$ee0;
 var $245=((($244)-(28))|0);
 HEAPF32[(($245)>>2)]=$243;
 var $246=$k00;
 var $247=$A6;
 var $248=($246)*($247);
 var $249=$k11;
 var $250=$A7;
 var $251=($249)*($250);
 var $252=($248)-($251);
 var $253=$ee2;
 var $254=((($253)-(24))|0);
 HEAPF32[(($254)>>2)]=$252;
 var $255=$k11;
 var $256=$A6;
 var $257=($255)*($256);
 var $258=$k00;
 var $259=$A7;
 var $260=($258)*($259);
 var $261=($257)+($260);
 var $262=$ee2;
 var $263=((($262)-(28))|0);
 HEAPF32[(($263)>>2)]=$261;
 var $264=$7;
 var $265=$ee0;
 var $266=(((-$264))|0);
 var $267=(($265+($266<<2))|0);
 $ee0=$267;
 var $268=$7;
 var $269=$ee2;
 var $270=(((-$268))|0);
 var $271=(($269+($270<<2))|0);
 $ee2=$271;
 label=4;break;
 case 4: 
 var $273=$i;
 var $274=((($273)-(1))|0);
 $i=$274;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _imdct_step3_inner_s_loop_ld654($n,$e,$i_off,$A,$base_n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $a_off;
 var $A2;
 var $z;
 var $base;
 var $k00;
 var $k11;
 $1=$n;
 $2=$e;
 $3=$i_off;
 $4=$A;
 $5=$base_n;
 var $6=$5;
 var $7=$6>>3;
 $a_off=$7;
 var $8=$a_off;
 var $9=(($8)|0);
 var $10=$4;
 var $11=(($10+($9<<2))|0);
 var $12=HEAPF32[(($11)>>2)];
 $A2=$12;
 var $13=$2;
 var $14=$3;
 var $15=(($13+($14<<2))|0);
 $z=$15;
 var $16=$z;
 var $17=$1;
 var $18=($17<<4);
 var $19=(((-$18))|0);
 var $20=(($16+($19<<2))|0);
 $base=$20;
 label=2;break;
 case 2: 
 var $22=$z;
 var $23=$base;
 var $24=($22>>>0)>($23>>>0);
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 var $26=$z;
 var $27=(($26)|0);
 var $28=HEAPF32[(($27)>>2)];
 var $29=$z;
 var $30=((($29)-(32))|0);
 var $31=HEAPF32[(($30)>>2)];
 var $32=($28)-($31);
 $k00=$32;
 var $33=$z;
 var $34=((($33)-(4))|0);
 var $35=HEAPF32[(($34)>>2)];
 var $36=$z;
 var $37=((($36)-(36))|0);
 var $38=HEAPF32[(($37)>>2)];
 var $39=($35)-($38);
 $k11=$39;
 var $40=$z;
 var $41=(($40)|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=$z;
 var $44=((($43)-(32))|0);
 var $45=HEAPF32[(($44)>>2)];
 var $46=($42)+($45);
 var $47=$z;
 var $48=(($47)|0);
 HEAPF32[(($48)>>2)]=$46;
 var $49=$z;
 var $50=((($49)-(4))|0);
 var $51=HEAPF32[(($50)>>2)];
 var $52=$z;
 var $53=((($52)-(36))|0);
 var $54=HEAPF32[(($53)>>2)];
 var $55=($51)+($54);
 var $56=$z;
 var $57=((($56)-(4))|0);
 HEAPF32[(($57)>>2)]=$55;
 var $58=$k00;
 var $59=$z;
 var $60=((($59)-(32))|0);
 HEAPF32[(($60)>>2)]=$58;
 var $61=$k11;
 var $62=$z;
 var $63=((($62)-(36))|0);
 HEAPF32[(($63)>>2)]=$61;
 var $64=$z;
 var $65=((($64)-(8))|0);
 var $66=HEAPF32[(($65)>>2)];
 var $67=$z;
 var $68=((($67)-(40))|0);
 var $69=HEAPF32[(($68)>>2)];
 var $70=($66)-($69);
 $k00=$70;
 var $71=$z;
 var $72=((($71)-(12))|0);
 var $73=HEAPF32[(($72)>>2)];
 var $74=$z;
 var $75=((($74)-(44))|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=($73)-($76);
 $k11=$77;
 var $78=$z;
 var $79=((($78)-(8))|0);
 var $80=HEAPF32[(($79)>>2)];
 var $81=$z;
 var $82=((($81)-(40))|0);
 var $83=HEAPF32[(($82)>>2)];
 var $84=($80)+($83);
 var $85=$z;
 var $86=((($85)-(8))|0);
 HEAPF32[(($86)>>2)]=$84;
 var $87=$z;
 var $88=((($87)-(12))|0);
 var $89=HEAPF32[(($88)>>2)];
 var $90=$z;
 var $91=((($90)-(44))|0);
 var $92=HEAPF32[(($91)>>2)];
 var $93=($89)+($92);
 var $94=$z;
 var $95=((($94)-(12))|0);
 HEAPF32[(($95)>>2)]=$93;
 var $96=$k00;
 var $97=$k11;
 var $98=($96)+($97);
 var $99=$A2;
 var $100=($98)*($99);
 var $101=$z;
 var $102=((($101)-(40))|0);
 HEAPF32[(($102)>>2)]=$100;
 var $103=$k11;
 var $104=$k00;
 var $105=($103)-($104);
 var $106=$A2;
 var $107=($105)*($106);
 var $108=$z;
 var $109=((($108)-(44))|0);
 HEAPF32[(($109)>>2)]=$107;
 var $110=$z;
 var $111=((($110)-(48))|0);
 var $112=HEAPF32[(($111)>>2)];
 var $113=$z;
 var $114=((($113)-(16))|0);
 var $115=HEAPF32[(($114)>>2)];
 var $116=($112)-($115);
 $k00=$116;
 var $117=$z;
 var $118=((($117)-(20))|0);
 var $119=HEAPF32[(($118)>>2)];
 var $120=$z;
 var $121=((($120)-(52))|0);
 var $122=HEAPF32[(($121)>>2)];
 var $123=($119)-($122);
 $k11=$123;
 var $124=$z;
 var $125=((($124)-(16))|0);
 var $126=HEAPF32[(($125)>>2)];
 var $127=$z;
 var $128=((($127)-(48))|0);
 var $129=HEAPF32[(($128)>>2)];
 var $130=($126)+($129);
 var $131=$z;
 var $132=((($131)-(16))|0);
 HEAPF32[(($132)>>2)]=$130;
 var $133=$z;
 var $134=((($133)-(20))|0);
 var $135=HEAPF32[(($134)>>2)];
 var $136=$z;
 var $137=((($136)-(52))|0);
 var $138=HEAPF32[(($137)>>2)];
 var $139=($135)+($138);
 var $140=$z;
 var $141=((($140)-(20))|0);
 HEAPF32[(($141)>>2)]=$139;
 var $142=$k11;
 var $143=$z;
 var $144=((($143)-(48))|0);
 HEAPF32[(($144)>>2)]=$142;
 var $145=$k00;
 var $146=$z;
 var $147=((($146)-(52))|0);
 HEAPF32[(($147)>>2)]=$145;
 var $148=$z;
 var $149=((($148)-(56))|0);
 var $150=HEAPF32[(($149)>>2)];
 var $151=$z;
 var $152=((($151)-(24))|0);
 var $153=HEAPF32[(($152)>>2)];
 var $154=($150)-($153);
 $k00=$154;
 var $155=$z;
 var $156=((($155)-(28))|0);
 var $157=HEAPF32[(($156)>>2)];
 var $158=$z;
 var $159=((($158)-(60))|0);
 var $160=HEAPF32[(($159)>>2)];
 var $161=($157)-($160);
 $k11=$161;
 var $162=$z;
 var $163=((($162)-(24))|0);
 var $164=HEAPF32[(($163)>>2)];
 var $165=$z;
 var $166=((($165)-(56))|0);
 var $167=HEAPF32[(($166)>>2)];
 var $168=($164)+($167);
 var $169=$z;
 var $170=((($169)-(24))|0);
 HEAPF32[(($170)>>2)]=$168;
 var $171=$z;
 var $172=((($171)-(28))|0);
 var $173=HEAPF32[(($172)>>2)];
 var $174=$z;
 var $175=((($174)-(60))|0);
 var $176=HEAPF32[(($175)>>2)];
 var $177=($173)+($176);
 var $178=$z;
 var $179=((($178)-(28))|0);
 HEAPF32[(($179)>>2)]=$177;
 var $180=$k00;
 var $181=$k11;
 var $182=($180)+($181);
 var $183=$A2;
 var $184=($182)*($183);
 var $185=$z;
 var $186=((($185)-(56))|0);
 HEAPF32[(($186)>>2)]=$184;
 var $187=$k00;
 var $188=$k11;
 var $189=($187)-($188);
 var $190=$A2;
 var $191=($189)*($190);
 var $192=$z;
 var $193=((($192)-(60))|0);
 HEAPF32[(($193)>>2)]=$191;
 var $194=$z;
 _iter_54($194);
 var $195=$z;
 var $196=((($195)-(32))|0);
 _iter_54($196);
 var $197=$z;
 var $198=((($197)-(64))|0);
 $z=$198;
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _iter_54($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $k00;
 var $k11;
 var $k22;
 var $k33;
 var $y0;
 var $y1;
 var $y2;
 var $y3;
 $1=$z;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAPF32[(($3)>>2)];
 var $5=$1;
 var $6=((($5)-(16))|0);
 var $7=HEAPF32[(($6)>>2)];
 var $8=($4)-($7);
 $k00=$8;
 var $9=$1;
 var $10=(($9)|0);
 var $11=HEAPF32[(($10)>>2)];
 var $12=$1;
 var $13=((($12)-(16))|0);
 var $14=HEAPF32[(($13)>>2)];
 var $15=($11)+($14);
 $y0=$15;
 var $16=$1;
 var $17=((($16)-(8))|0);
 var $18=HEAPF32[(($17)>>2)];
 var $19=$1;
 var $20=((($19)-(24))|0);
 var $21=HEAPF32[(($20)>>2)];
 var $22=($18)+($21);
 $y2=$22;
 var $23=$1;
 var $24=((($23)-(8))|0);
 var $25=HEAPF32[(($24)>>2)];
 var $26=$1;
 var $27=((($26)-(24))|0);
 var $28=HEAPF32[(($27)>>2)];
 var $29=($25)-($28);
 $k22=$29;
 var $30=$y0;
 var $31=$y2;
 var $32=($30)+($31);
 var $33=$1;
 var $34=(($33)|0);
 HEAPF32[(($34)>>2)]=$32;
 var $35=$y0;
 var $36=$y2;
 var $37=($35)-($36);
 var $38=$1;
 var $39=((($38)-(8))|0);
 HEAPF32[(($39)>>2)]=$37;
 var $40=$1;
 var $41=((($40)-(12))|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=$1;
 var $44=((($43)-(28))|0);
 var $45=HEAPF32[(($44)>>2)];
 var $46=($42)-($45);
 $k33=$46;
 var $47=$k00;
 var $48=$k33;
 var $49=($47)+($48);
 var $50=$1;
 var $51=((($50)-(16))|0);
 HEAPF32[(($51)>>2)]=$49;
 var $52=$k00;
 var $53=$k33;
 var $54=($52)-($53);
 var $55=$1;
 var $56=((($55)-(24))|0);
 HEAPF32[(($56)>>2)]=$54;
 var $57=$1;
 var $58=((($57)-(4))|0);
 var $59=HEAPF32[(($58)>>2)];
 var $60=$1;
 var $61=((($60)-(20))|0);
 var $62=HEAPF32[(($61)>>2)];
 var $63=($59)-($62);
 $k11=$63;
 var $64=$1;
 var $65=((($64)-(4))|0);
 var $66=HEAPF32[(($65)>>2)];
 var $67=$1;
 var $68=((($67)-(20))|0);
 var $69=HEAPF32[(($68)>>2)];
 var $70=($66)+($69);
 $y1=$70;
 var $71=$1;
 var $72=((($71)-(12))|0);
 var $73=HEAPF32[(($72)>>2)];
 var $74=$1;
 var $75=((($74)-(28))|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=($73)+($76);
 $y3=$77;
 var $78=$y1;
 var $79=$y3;
 var $80=($78)+($79);
 var $81=$1;
 var $82=((($81)-(4))|0);
 HEAPF32[(($82)>>2)]=$80;
 var $83=$y1;
 var $84=$y3;
 var $85=($83)-($84);
 var $86=$1;
 var $87=((($86)-(12))|0);
 HEAPF32[(($87)>>2)]=$85;
 var $88=$k11;
 var $89=$k22;
 var $90=($88)-($89);
 var $91=$1;
 var $92=((($91)-(20))|0);
 HEAPF32[(($92)>>2)]=$90;
 var $93=$k11;
 var $94=$k22;
 var $95=($93)+($94);
 var $96=$1;
 var $97=((($96)-(28))|0);
 HEAPF32[(($97)>>2)]=$95;
 STACKTOP=sp;return;
}
function _draw_line($output,$x0,$y0,$x1,$y1,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $dy;
 var $adx;
 var $ady;
 var $base;
 var $x;
 var $y;
 var $err;
 var $sy;
 $1=$output;
 $2=$x0;
 $3=$y0;
 $4=$x1;
 $5=$y1;
 $6=$n;
 var $7=$5;
 var $8=$3;
 var $9=((($7)-($8))|0);
 $dy=$9;
 var $10=$4;
 var $11=$2;
 var $12=((($10)-($11))|0);
 $adx=$12;
 var $13=$dy;
 var $14=Math_abs($13);
 $ady=$14;
 var $15=$2;
 $x=$15;
 var $16=$3;
 $y=$16;
 $err=0;
 var $17=$dy;
 var $18=$adx;
 var $19=(((($17|0))/(($18|0)))&-1);
 $base=$19;
 var $20=$dy;
 var $21=($20|0)<0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$base;
 var $24=((($23)-(1))|0);
 $sy=$24;
 label=4;break;
 case 3: 
 var $26=$base;
 var $27=((($26)+(1))|0);
 $sy=$27;
 label=4;break;
 case 4: 
 var $29=$base;
 var $30=Math_abs($29);
 var $31=$adx;
 var $32=(Math_imul($30,$31)|0);
 var $33=$ady;
 var $34=((($33)-($32))|0);
 $ady=$34;
 var $35=$4;
 var $36=$6;
 var $37=($35|0)>($36|0);
 if($37){label=5;break;}else{label=6;break;}
 case 5: 
 var $39=$6;
 $4=$39;
 label=6;break;
 case 6: 
 var $41=$y;
 var $42=((6208+($41<<2))|0);
 var $43=HEAPF32[(($42)>>2)];
 var $44=$x;
 var $45=$1;
 var $46=(($45+($44<<2))|0);
 var $47=HEAPF32[(($46)>>2)];
 var $48=($47)*($43);
 HEAPF32[(($46)>>2)]=$48;
 var $49=$x;
 var $50=((($49)+(1))|0);
 $x=$50;
 label=7;break;
 case 7: 
 var $52=$x;
 var $53=$4;
 var $54=($52|0)<($53|0);
 if($54){label=8;break;}else{label=13;break;}
 case 8: 
 var $56=$ady;
 var $57=$err;
 var $58=((($57)+($56))|0);
 $err=$58;
 var $59=$err;
 var $60=$adx;
 var $61=($59|0)>=($60|0);
 if($61){label=9;break;}else{label=10;break;}
 case 9: 
 var $63=$adx;
 var $64=$err;
 var $65=((($64)-($63))|0);
 $err=$65;
 var $66=$sy;
 var $67=$y;
 var $68=((($67)+($66))|0);
 $y=$68;
 label=11;break;
 case 10: 
 var $70=$base;
 var $71=$y;
 var $72=((($71)+($70))|0);
 $y=$72;
 label=11;break;
 case 11: 
 var $74=$y;
 var $75=((6208+($74<<2))|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=$x;
 var $78=$1;
 var $79=(($78+($77<<2))|0);
 var $80=HEAPF32[(($79)>>2)];
 var $81=($80)*($76);
 HEAPF32[(($79)>>2)]=$81;
 label=12;break;
 case 12: 
 var $83=$x;
 var $84=((($83)+(1))|0);
 $x=$84;
 label=7;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _make_block_array($mem,$count,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $p;
 var $q;
 $1=$mem;
 $2=$count;
 $3=$size;
 var $4=$1;
 var $5=$4;
 $p=$5;
 var $6=$p;
 var $7=$2;
 var $8=(($6+($7<<2))|0);
 var $9=$8;
 $q=$9;
 $i=0;
 label=2;break;
 case 2: 
 var $11=$i;
 var $12=$2;
 var $13=($11|0)<($12|0);
 if($13){label=3;break;}else{label=5;break;}
 case 3: 
 var $15=$q;
 var $16=$i;
 var $17=$p;
 var $18=(($17+($16<<2))|0);
 HEAP32[(($18)>>2)]=$15;
 var $19=$3;
 var $20=$q;
 var $21=(($20+$19)|0);
 $q=$21;
 label=4;break;
 case 4: 
 var $23=$i;
 var $24=((($23)+(1))|0);
 $i=$24;
 label=2;break;
 case 5: 
 var $26=$p;
 var $27=$26;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _residue_decode($f,$book,$target,$offset,$n,$rtype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $k;
 var $step;
 $2=$f;
 $3=$book;
 $4=$target;
 $5=$offset;
 $6=$n;
 $7=$rtype;
 var $8=$7;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=9;break;}
 case 2: 
 var $11=$6;
 var $12=$3;
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(((($11|0))/(($14|0)))&-1);
 $step=$15;
 $k=0;
 label=3;break;
 case 3: 
 var $17=$k;
 var $18=$step;
 var $19=($17|0)<($18|0);
 if($19){label=4;break;}else{label=8;break;}
 case 4: 
 var $21=$2;
 var $22=$3;
 var $23=$4;
 var $24=$5;
 var $25=(($23+($24<<2))|0);
 var $26=$k;
 var $27=(($25+($26<<2))|0);
 var $28=$6;
 var $29=$5;
 var $30=((($28)-($29))|0);
 var $31=$k;
 var $32=((($30)-($31))|0);
 var $33=$step;
 var $34=_codebook_decode_step($21,$22,$27,$32,$33);
 var $35=($34|0)!=0;
 if($35){label=6;break;}else{label=5;break;}
 case 5: 
 $1=0;
 label=16;break;
 case 6: 
 label=7;break;
 case 7: 
 var $39=$k;
 var $40=((($39)+(1))|0);
 $k=$40;
 label=3;break;
 case 8: 
 label=15;break;
 case 9: 
 $k=0;
 label=10;break;
 case 10: 
 var $44=$k;
 var $45=$6;
 var $46=($44|0)<($45|0);
 if($46){label=11;break;}else{label=14;break;}
 case 11: 
 var $48=$2;
 var $49=$3;
 var $50=$4;
 var $51=$5;
 var $52=(($50+($51<<2))|0);
 var $53=$6;
 var $54=$k;
 var $55=((($53)-($54))|0);
 var $56=_codebook_decode($48,$49,$52,$55);
 var $57=($56|0)!=0;
 if($57){label=13;break;}else{label=12;break;}
 case 12: 
 $1=0;
 label=16;break;
 case 13: 
 var $60=$3;
 var $61=(($60)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$k;
 var $64=((($63)+($62))|0);
 $k=$64;
 var $65=$3;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$5;
 var $69=((($68)+($67))|0);
 $5=$69;
 label=10;break;
 case 14: 
 label=15;break;
 case 15: 
 $1=1;
 label=16;break;
 case 16: 
 var $73=$1;
 STACKTOP=sp;return $73;
  default: assert(0, "bad label: " + label);
 }
}
function _codebook_decode_step($f,$c,$output,$len,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $z;
 var $last;
 var $val;
 $2=$f;
 $3=$c;
 $4=$output;
 $5=$len;
 $6=$step;
 var $7=$2;
 var $8=$3;
 var $9=$5;
 var $10=_codebook_decode_start($7,$8,$9);
 $z=$10;
 $last=0;
 var $11=$z;
 var $12=($11|0)<0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=12;break;
 case 3: 
 var $15=$5;
 var $16=$3;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($15|0)>($18|0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=$3;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 $5=$23;
 label=5;break;
 case 5: 
 var $25=$3;
 var $26=(($25)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$z;
 var $29=(Math_imul($28,$27)|0);
 $z=$29;
 $i=0;
 label=6;break;
 case 6: 
 var $31=$i;
 var $32=$5;
 var $33=($31|0)<($32|0);
 if($33){label=7;break;}else{label=11;break;}
 case 7: 
 var $35=$z;
 var $36=$i;
 var $37=((($35)+($36))|0);
 var $38=$3;
 var $39=(($38+28)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+($37<<2))|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=$last;
 var $44=($42)+($43);
 $val=$44;
 var $45=$val;
 var $46=$i;
 var $47=$6;
 var $48=(Math_imul($46,$47)|0);
 var $49=$4;
 var $50=(($49+($48<<2))|0);
 var $51=HEAPF32[(($50)>>2)];
 var $52=($51)+($45);
 HEAPF32[(($50)>>2)]=$52;
 var $53=$3;
 var $54=(($53+22)|0);
 var $55=HEAP8[($54)];
 var $56=(($55<<24)>>24)!=0;
 if($56){label=8;break;}else{label=9;break;}
 case 8: 
 var $58=$val;
 $last=$58;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=6;break;
 case 11: 
 $1=1;
 label=12;break;
 case 12: 
 var $65=$1;
 STACKTOP=sp;return $65;
  default: assert(0, "bad label: " + label);
 }
}
function _codebook_decode($f,$c,$output,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $z;
 var $last;
 var $val;
 var $last1;
 $2=$f;
 $3=$c;
 $4=$output;
 $5=$len;
 var $6=$2;
 var $7=$3;
 var $8=$5;
 var $9=_codebook_decode_start($6,$7,$8);
 $z=$9;
 var $10=$z;
 var $11=($10|0)<0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=17;break;
 case 3: 
 var $14=$5;
 var $15=$3;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($14|0)>($17|0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$3;
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 $5=$22;
 label=5;break;
 case 5: 
 var $24=$3;
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$z;
 var $28=(Math_imul($27,$26)|0);
 $z=$28;
 var $29=$3;
 var $30=(($29+22)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24)!=0;
 if($32){label=6;break;}else{label=11;break;}
 case 6: 
 $last=0;
 $i=0;
 label=7;break;
 case 7: 
 var $35=$i;
 var $36=$5;
 var $37=($35|0)<($36|0);
 if($37){label=8;break;}else{label=10;break;}
 case 8: 
 var $39=$z;
 var $40=$i;
 var $41=((($39)+($40))|0);
 var $42=$3;
 var $43=(($42+28)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+($41<<2))|0);
 var $46=HEAPF32[(($45)>>2)];
 var $47=$last;
 var $48=($46)+($47);
 $val=$48;
 var $49=$val;
 var $50=$i;
 var $51=$4;
 var $52=(($51+($50<<2))|0);
 var $53=HEAPF32[(($52)>>2)];
 var $54=($53)+($49);
 HEAPF32[(($52)>>2)]=$54;
 var $55=$val;
 var $56=$3;
 var $57=(($56+12)|0);
 var $58=HEAPF32[(($57)>>2)];
 var $59=($55)+($58);
 $last=$59;
 label=9;break;
 case 9: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=7;break;
 case 10: 
 label=16;break;
 case 11: 
 $last1=0;
 $i=0;
 label=12;break;
 case 12: 
 var $66=$i;
 var $67=$5;
 var $68=($66|0)<($67|0);
 if($68){label=13;break;}else{label=15;break;}
 case 13: 
 var $70=$z;
 var $71=$i;
 var $72=((($70)+($71))|0);
 var $73=$3;
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+($72<<2))|0);
 var $77=HEAPF32[(($76)>>2)];
 var $78=$last1;
 var $79=($77)+($78);
 var $80=$i;
 var $81=$4;
 var $82=(($81+($80<<2))|0);
 var $83=HEAPF32[(($82)>>2)];
 var $84=($83)+($79);
 HEAPF32[(($82)>>2)]=$84;
 label=14;break;
 case 14: 
 var $86=$i;
 var $87=((($86)+(1))|0);
 $i=$87;
 label=12;break;
 case 15: 
 label=16;break;
 case 16: 
 $1=1;
 label=17;break;
 case 17: 
 var $91=$1;
 STACKTOP=sp;return $91;
  default: assert(0, "bad label: " + label);
 }
}
function _codebook_decode_start($f,$c,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $z;
 var $n;
 $2=$f;
 $3=$c;
 $4=$len;
 $z=-1;
 var $5=$3;
 var $6=(($5+21)|0);
 var $7=HEAP8[($6)];
 var $8=($7&255);
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=_error($11,21);
 label=21;break;
 case 3: 
 var $14=$2;
 var $15=(($14+1160)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)<10;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$2;
 _prep_huffman($19);
 label=5;break;
 case 5: 
 var $21=$2;
 var $22=(($21+1156)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23&1023;
 $z=$24;
 var $25=$z;
 var $26=$3;
 var $27=(($26+36)|0);
 var $28=(($27+($25<<1))|0);
 var $29=HEAP16[(($28)>>1)];
 var $30=(($29<<16)>>16);
 $z=$30;
 var $31=$z;
 var $32=($31|0)>=0;
 if($32){label=6;break;}else{label=9;break;}
 case 6: 
 var $34=$z;
 var $35=$3;
 var $36=(($35+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$34)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 $n=$40;
 var $41=$n;
 var $42=$2;
 var $43=(($42+1156)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$44>>>($41>>>0);
 HEAP32[(($43)>>2)]=$45;
 var $46=$n;
 var $47=$2;
 var $48=(($47+1160)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=((($49)-($46))|0);
 HEAP32[(($48)>>2)]=$50;
 var $51=$2;
 var $52=(($51+1160)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)<0;
 if($54){label=7;break;}else{label=8;break;}
 case 7: 
 var $56=$2;
 var $57=(($56+1160)|0);
 HEAP32[(($57)>>2)]=0;
 $z=-1;
 label=8;break;
 case 8: 
 label=10;break;
 case 9: 
 var $60=$2;
 var $61=$3;
 var $62=_codebook_decode_scalar_raw($60,$61);
 $z=$62;
 label=10;break;
 case 10: 
 var $64=$3;
 var $65=(($64+23)|0);
 var $66=HEAP8[($65)];
 var $67=(($66<<24)>>24)!=0;
 if($67){label=11;break;}else{label=14;break;}
 case 11: 
 var $69=$z;
 var $70=$3;
 var $71=(($70+2092)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($69|0)<($72|0);
 if($73){var $77=1;label=13;break;}else{label=12;break;}
 case 12: 
 ___assert_fail(26584,25552,1397,27936);
 throw "Reached an unreachable!";
 label=13;break;
 case 13: 
 var $77;
 var $78=($77&1);
 label=14;break;
 case 14: 
 var $80=$z;
 var $81=($80|0)<0;
 if($81){label=15;break;}else{label=20;break;}
 case 15: 
 var $83=$2;
 var $84=(($83+1140)|0);
 var $85=HEAP8[($84)];
 var $86=(($85<<24)>>24)!=0;
 if($86){label=19;break;}else{label=16;break;}
 case 16: 
 var $88=$2;
 var $89=(($88+1148)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)!=0;
 if($91){label=17;break;}else{label=18;break;}
 case 17: 
 var $93=$z;
 $1=$93;
 label=22;break;
 case 18: 
 label=19;break;
 case 19: 
 var $96=$2;
 var $97=_error($96,21);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $100=$z;
 $1=$100;
 label=22;break;
 case 22: 
 var $102=$1;
 STACKTOP=sp;return $102;
  default: assert(0, "bad label: " + label);
 }
}
function _maybe_start_packet($f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $x;
 $2=$f;
 var $3=$2;
 var $4=(($3+1144)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=2;break;}else{label=17;break;}
 case 2: 
 var $8=$2;
 var $9=_get8($8);
 var $10=($9&255);
 $x=$10;
 var $11=$2;
 var $12=(($11+100)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=18;break;
 case 4: 
 var $17=$x;
 var $18=79!=($17|0);
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$2;
 var $21=_error($20,30);
 $1=$21;
 label=18;break;
 case 6: 
 var $23=$2;
 var $24=_get8($23);
 var $25=($24&255);
 var $26=103!=($25|0);
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=$2;
 var $29=_error($28,30);
 $1=$29;
 label=18;break;
 case 8: 
 var $31=$2;
 var $32=_get8($31);
 var $33=($32&255);
 var $34=103!=($33|0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=$2;
 var $37=_error($36,30);
 $1=$37;
 label=18;break;
 case 10: 
 var $39=$2;
 var $40=_get8($39);
 var $41=($40&255);
 var $42=83!=($41|0);
 if($42){label=11;break;}else{label=12;break;}
 case 11: 
 var $44=$2;
 var $45=_error($44,30);
 $1=$45;
 label=18;break;
 case 12: 
 var $47=$2;
 var $48=_start_page_no_capturepattern($47);
 var $49=($48|0)!=0;
 if($49){label=14;break;}else{label=13;break;}
 case 13: 
 $1=0;
 label=18;break;
 case 14: 
 var $52=$2;
 var $53=(($52+1139)|0);
 var $54=HEAP8[($53)];
 var $55=($54&255);
 var $56=$55&1;
 var $57=($56|0)!=0;
 if($57){label=15;break;}else{label=16;break;}
 case 15: 
 var $59=$2;
 var $60=(($59+1148)|0);
 HEAP32[(($60)>>2)]=0;
 var $61=$2;
 var $62=(($61+1140)|0);
 HEAP8[($62)]=0;
 var $63=$2;
 var $64=_error($63,32);
 $1=$64;
 label=18;break;
 case 16: 
 label=17;break;
 case 17: 
 var $67=$2;
 var $68=_start_packet($67);
 $1=$68;
 label=18;break;
 case 18: 
 var $70=$1;
 STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }
}
function _xz_dec_run($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $in_start;
 var $out_start;
 var $ret;
 $1=$s;
 $2=$b;
 var $3=$1;
 var $4=(($3+32)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 _xz_dec_reset($8);
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 $in_start=$12;
 var $13=$2;
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 $out_start=$15;
 var $16=$1;
 var $17=$2;
 var $18=_dec_main($16,$17);
 $ret=$18;
 var $19=$1;
 var $20=(($19+32)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=4;break;}else{label=9;break;}
 case 4: 
 var $24=$ret;
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=$2;
 var $28=(($27+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$2;
 var $31=(($30+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($29|0)==($32|0);
 var $34=($33?7:8);
 $ret=$34;
 label=6;break;
 case 6: 
 var $36=$ret;
 var $37=($36|0)!=1;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 var $39=$in_start;
 var $40=$2;
 var $41=(($40+4)|0);
 HEAP32[(($41)>>2)]=$39;
 var $42=$out_start;
 var $43=$2;
 var $44=(($43+16)|0);
 HEAP32[(($44)>>2)]=$42;
 label=8;break;
 case 8: 
 label=17;break;
 case 9: 
 var $47=$ret;
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=15;break;}
 case 10: 
 var $50=$in_start;
 var $51=$2;
 var $52=(($51+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($50|0)==($53|0);
 if($54){label=11;break;}else{label=15;break;}
 case 11: 
 var $56=$out_start;
 var $57=$2;
 var $58=(($57+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($56|0)==($59|0);
 if($60){label=12;break;}else{label=15;break;}
 case 12: 
 var $62=$1;
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)!=0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 $ret=8;
 label=14;break;
 case 14: 
 var $68=$1;
 var $69=(($68+36)|0);
 HEAP32[(($69)>>2)]=1;
 label=16;break;
 case 15: 
 var $71=$1;
 var $72=(($71+36)|0);
 HEAP32[(($72)>>2)]=0;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $75=$ret;
 STACKTOP=sp;return $75;
  default: assert(0, "bad label: " + label);
 }
}
function _xz_dec_reset($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$s;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=$1;
 var $5=(($4+36)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$1;
 var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=$1;
 var $9=(($8+24)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$1;
 var $11=(($10+64)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0; HEAP32[((($12)+(12))>>2)]=0; HEAP32[((($12)+(16))>>2)]=0; HEAP32[((($12)+(20))>>2)]=0; HEAP32[((($12)+(24))>>2)]=0; HEAP32[((($12)+(28))>>2)]=0; HEAP32[((($12)+(32))>>2)]=0; HEAP32[((($12)+(36))>>2)]=0; HEAP32[((($12)+(40))>>2)]=0; HEAP32[((($12)+(44))>>2)]=0;
 var $13=$1;
 var $14=(($13+112)|0);
 var $15=$14;
 HEAP32[(($15)>>2)]=0; HEAP32[((($15)+(4))>>2)]=0; HEAP32[((($15)+(8))>>2)]=0; HEAP32[((($15)+(12))>>2)]=0; HEAP32[((($15)+(16))>>2)]=0; HEAP32[((($15)+(20))>>2)]=0; HEAP32[((($15)+(24))>>2)]=0; HEAP32[((($15)+(28))>>2)]=0; HEAP32[((($15)+(32))>>2)]=0; HEAP32[((($15)+(36))>>2)]=0; HEAP32[((($15)+(40))>>2)]=0; HEAP32[((($15)+(44))>>2)]=0;
 var $16=$1;
 var $17=(($16+160)|0);
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=$1;
 var $20=(($19+160)|0);
 var $21=(($20+4)|0);
 HEAP32[(($21)>>2)]=12;
 STACKTOP=sp;return;
}
function _dec_main($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ret;
 $2=$s;
 $3=$b;
 var $4=$3;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=(($7+16)|0);
 HEAP32[(($8)>>2)]=$6;
 label=2;break;
 case 2: 
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 switch(($12|0)){case 2:{ label=13;break;}case 3:{ label=18;break;}case 4:{ label=21;break;}case 5:{ label=29;break;}case 0:{ label=3;break;}case 6:{ label=37;break;}case 7:{ label=40;break;}case 8:{ label=50;break;}case 9:{ label=53;break;}case 1:{ label=8;break;}default:{label=56;break;}}break;
 case 3: 
 var $14=$2;
 var $15=$3;
 var $16=_fill_temp($14,$15);
 var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=4;break;}
 case 4: 
 $1=0;
 label=57;break;
 case 5: 
 var $20=$2;
 var $21=(($20)|0);
 HEAP32[(($21)>>2)]=1;
 var $22=$2;
 var $23=_dec_stream_header($22);
 $ret=$23;
 var $24=$ret;
 var $25=($24|0)!=0;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$ret;
 $1=$27;
 label=57;break;
 case 7: 
 label=8;break;
 case 8: 
 var $30=$3;
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$3;
 var $34=(($33+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($32|0)==($35|0);
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 label=57;break;
 case 10: 
 var $39=$3;
 var $40=(($39+4)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$3;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+$41)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=($47|0)==0;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 var $50=$3;
 var $51=(($50+4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=((($52)+(1))|0);
 HEAP32[(($51)>>2)]=$53;
 var $54=$2;
 var $55=(($54+16)|0);
 HEAP32[(($55)>>2)]=$52;
 var $56=$2;
 var $57=(($56)|0);
 HEAP32[(($57)>>2)]=6;
 label=56;break;
 case 12: 
 var $59=$3;
 var $60=(($59+4)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$3;
 var $63=(($62)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+$61)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=((($67)+(1))|0);
 var $69=($68<<2);
 var $70=$2;
 var $71=(($70+40)|0);
 var $72=(($71+16)|0);
 HEAP32[(($72)>>2)]=$69;
 var $73=$2;
 var $74=(($73+40)|0);
 var $75=(($74+16)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$2;
 var $78=(($77+160)|0);
 var $79=(($78+4)|0);
 HEAP32[(($79)>>2)]=$76;
 var $80=$2;
 var $81=(($80+160)|0);
 var $82=(($81)|0);
 HEAP32[(($82)>>2)]=0;
 var $83=$2;
 var $84=(($83)|0);
 HEAP32[(($84)>>2)]=2;
 label=13;break;
 case 13: 
 var $86=$2;
 var $87=$3;
 var $88=_fill_temp($86,$87);
 var $89=($88|0)!=0;
 if($89){label=15;break;}else{label=14;break;}
 case 14: 
 $1=0;
 label=57;break;
 case 15: 
 var $92=$2;
 var $93=_dec_block_header($92);
 $ret=$93;
 var $94=$ret;
 var $95=($94|0)!=0;
 if($95){label=16;break;}else{label=17;break;}
 case 16: 
 var $97=$ret;
 $1=$97;
 label=57;break;
 case 17: 
 var $99=$2;
 var $100=(($99)|0);
 HEAP32[(($100)>>2)]=3;
 label=18;break;
 case 18: 
 var $102=$2;
 var $103=$3;
 var $104=_dec_block($102,$103);
 $ret=$104;
 var $105=$ret;
 var $106=($105|0)!=1;
 if($106){label=19;break;}else{label=20;break;}
 case 19: 
 var $108=$ret;
 $1=$108;
 label=57;break;
 case 20: 
 var $110=$2;
 var $111=(($110)|0);
 HEAP32[(($111)>>2)]=4;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $114=$2;
 var $115=(($114+64)|0);
 var $116=(($115)|0);
 var $ld$0$0=(($116)|0);
 var $117$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($116+4)|0);
 var $117$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3;
 var $$etemp$2$1=0;
 var $118$0=$117$0&$$etemp$2$0;
 var $118$1=$117$1&$$etemp$2$1;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $119=(($118$0|0) != ($$etemp$3$0|0)) | (($118$1|0) != ($$etemp$3$1|0));
 if($119){label=23;break;}else{label=28;break;}
 case 23: 
 var $121=$3;
 var $122=(($121+4)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$3;
 var $125=(($124+8)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($123|0)==($126|0);
 if($127){label=24;break;}else{label=25;break;}
 case 24: 
 $1=0;
 label=57;break;
 case 25: 
 var $130=$3;
 var $131=(($130+4)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=((($132)+(1))|0);
 HEAP32[(($131)>>2)]=$133;
 var $134=$3;
 var $135=(($134)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+$132)|0);
 var $138=HEAP8[($137)];
 var $139=($138&255);
 var $140=($139|0)!=0;
 if($140){label=26;break;}else{label=27;break;}
 case 26: 
 $1=7;
 label=57;break;
 case 27: 
 var $143=$2;
 var $144=(($143+64)|0);
 var $145=(($144)|0);
 var $ld$4$0=(($145)|0);
 var $146$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($145+4)|0);
 var $146$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$6$0=1;
 var $$etemp$6$1=0;
 var $147$0=_i64Add($146$0,$146$1,$$etemp$6$0,$$etemp$6$1);var $147$1=tempRet0;
 var $st$7$0=(($145)|0);
 HEAP32[(($st$7$0)>>2)]=$147$0;
 var $st$8$1=(($145+4)|0);
 HEAP32[(($st$8$1)>>2)]=$147$1;
 label=22;break;
 case 28: 
 var $149=$2;
 var $150=(($149)|0);
 HEAP32[(($150)>>2)]=5;
 label=29;break;
 case 29: 
 var $152=$2;
 var $153=(($152+28)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($154|0)==1;
 if($155){label=30;break;}else{label=33;break;}
 case 30: 
 var $157=$2;
 var $158=$3;
 var $159=_crc32_validate($157,$158);
 $ret=$159;
 var $160=$ret;
 var $161=($160|0)!=1;
 if($161){label=31;break;}else{label=32;break;}
 case 31: 
 var $163=$ret;
 $1=$163;
 label=57;break;
 case 32: 
 label=36;break;
 case 33: 
 var $166=$2;
 var $167=$3;
 var $168=_check_skip($166,$167);
 var $169=($168|0)!=0;
 if($169){label=35;break;}else{label=34;break;}
 case 34: 
 $1=0;
 label=57;break;
 case 35: 
 label=36;break;
 case 36: 
 var $173=$2;
 var $174=(($173)|0);
 HEAP32[(($174)>>2)]=1;
 label=56;break;
 case 37: 
 var $176=$2;
 var $177=$3;
 var $178=_dec_index($176,$177);
 $ret=$178;
 var $179=$ret;
 var $180=($179|0)!=1;
 if($180){label=38;break;}else{label=39;break;}
 case 38: 
 var $182=$ret;
 $1=$182;
 label=57;break;
 case 39: 
 var $184=$2;
 var $185=(($184)|0);
 HEAP32[(($185)>>2)]=7;
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $188=$2;
 var $189=(($188+112)|0);
 var $190=(($189+8)|0);
 var $ld$9$0=(($190)|0);
 var $191$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($190+4)|0);
 var $191$1=HEAP32[(($ld$10$1)>>2)];
 var $192=$3;
 var $193=(($192+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$2;
 var $196=(($195+16)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=((($194)-($197))|0);
 var $199$0=$198;
 var $199$1=0;
 var $200$0=_i64Add($191$0,$191$1,$199$0,$199$1);var $200$1=tempRet0;
 var $$etemp$11$0=3;
 var $$etemp$11$1=0;
 var $201$0=$200$0&$$etemp$11$0;
 var $201$1=$200$1&$$etemp$11$1;
 var $$etemp$12$0=0;
 var $$etemp$12$1=0;
 var $202=(($201$0|0) != ($$etemp$12$0|0)) | (($201$1|0) != ($$etemp$12$1|0));
 if($202){label=42;break;}else{label=47;break;}
 case 42: 
 var $204=$3;
 var $205=(($204+4)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=$3;
 var $208=(($207+8)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($206|0)==($209|0);
 if($210){label=43;break;}else{label=44;break;}
 case 43: 
 var $212=$2;
 var $213=$3;
 _index_update($212,$213);
 $1=0;
 label=57;break;
 case 44: 
 var $215=$3;
 var $216=(($215+4)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=((($217)+(1))|0);
 HEAP32[(($216)>>2)]=$218;
 var $219=$3;
 var $220=(($219)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+$217)|0);
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=($224|0)!=0;
 if($225){label=45;break;}else{label=46;break;}
 case 45: 
 $1=7;
 label=57;break;
 case 46: 
 label=41;break;
 case 47: 
 var $229=$2;
 var $230=$3;
 _index_update($229,$230);
 var $231=$2;
 var $232=(($231+64)|0);
 var $233=(($232+24)|0);
 var $234=$233;
 var $235=$2;
 var $236=(($235+112)|0);
 var $237=(($236+24)|0);
 var $238=$237;
 var $239=_memcmp($234,$238,24);
 var $240=($239|0)==0;
 if($240){label=49;break;}else{label=48;break;}
 case 48: 
 $1=7;
 label=57;break;
 case 49: 
 var $243=$2;
 var $244=(($243)|0);
 HEAP32[(($244)>>2)]=8;
 label=50;break;
 case 50: 
 var $246=$2;
 var $247=$3;
 var $248=_crc32_validate($246,$247);
 $ret=$248;
 var $249=$ret;
 var $250=($249|0)!=1;
 if($250){label=51;break;}else{label=52;break;}
 case 51: 
 var $252=$ret;
 $1=$252;
 label=57;break;
 case 52: 
 var $254=$2;
 var $255=(($254+160)|0);
 var $256=(($255+4)|0);
 HEAP32[(($256)>>2)]=12;
 var $257=$2;
 var $258=(($257)|0);
 HEAP32[(($258)>>2)]=9;
 label=53;break;
 case 53: 
 var $260=$2;
 var $261=$3;
 var $262=_fill_temp($260,$261);
 var $263=($262|0)!=0;
 if($263){label=55;break;}else{label=54;break;}
 case 54: 
 $1=0;
 label=57;break;
 case 55: 
 var $266=$2;
 var $267=_dec_stream_footer($266);
 $1=$267;
 label=57;break;
 case 56: 
 label=2;break;
 case 57: 
 var $270=$1;
 STACKTOP=sp;return $270;
  default: assert(0, "bad label: " + label);
 }
}
function _xz_dec_init($mode,$dict_max){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 $2=$mode;
 $3=$dict_max;
 var $4=_malloc(1200);
 var $5=$4;
 $s=$5;
 var $6=$s;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=7;break;
 case 3: 
 var $10=$2;
 var $11=$s;
 var $12=(($11+32)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$2;
 var $14=$3;
 var $15=_xz_dec_lzma2_create($13,$14);
 var $16=$s;
 var $17=(($16+1192)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$s;
 var $19=(($18+1192)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $24=$s;
 _xz_dec_reset($24);
 var $25=$s;
 $1=$25;
 label=7;break;
 case 6: 
 var $27=$s;
 var $28=$27;
 _free($28);
 $1=0;
 label=7;break;
 case 7: 
 var $30=$1;
 STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _xz_dec_end($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$s;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$1;
 var $6=(($5+1192)|0);
 var $7=HEAP32[(($6)>>2)];
 _xz_dec_lzma2_end($7);
 var $8=$1;
 var $9=$8;
 _free($9);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _fill_temp($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $copy_size;
 $2=$s;
 $3=$b;
 var $4=$3;
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=(($7+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($6)-($9))|0);
 var $11=$2;
 var $12=(($11+160)|0);
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$2;
 var $16=(($15+160)|0);
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=((($14)-($18))|0);
 var $20=($10>>>0)<($19>>>0);
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 var $22=$3;
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$3;
 var $26=(($25+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($24)-($27))|0);
 var $40=$28;label=4;break;
 case 3: 
 var $30=$2;
 var $31=(($30+160)|0);
 var $32=(($31+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$2;
 var $35=(($34+160)|0);
 var $36=(($35)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($33)-($37))|0);
 var $40=$38;label=4;break;
 case 4: 
 var $40;
 $copy_size=$40;
 var $41=$2;
 var $42=(($41+160)|0);
 var $43=(($42+8)|0);
 var $44=(($43)|0);
 var $45=$2;
 var $46=(($45+160)|0);
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($44+$48)|0);
 var $50=$3;
 var $51=(($50)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$3;
 var $54=(($53+4)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($52+$55)|0);
 var $57=$copy_size;
 assert($57 % 1 === 0);(_memcpy($49, $56, $57)|0);
 var $58=$copy_size;
 var $59=$3;
 var $60=(($59+4)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=((($61)+($58))|0);
 HEAP32[(($60)>>2)]=$62;
 var $63=$copy_size;
 var $64=$2;
 var $65=(($64+160)|0);
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=((($67)+($63))|0);
 HEAP32[(($66)>>2)]=$68;
 var $69=$2;
 var $70=(($69+160)|0);
 var $71=(($70)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$2;
 var $74=(($73+160)|0);
 var $75=(($74+4)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($72|0)==($76|0);
 if($77){label=5;break;}else{label=6;break;}
 case 5: 
 var $79=$2;
 var $80=(($79+160)|0);
 var $81=(($80)|0);
 HEAP32[(($81)>>2)]=0;
 $1=1;
 label=7;break;
 case 6: 
 $1=0;
 label=7;break;
 case 7: 
 var $84=$1;
 STACKTOP=sp;return $84;
  default: assert(0, "bad label: " + label);
 }
}
function _dec_stream_header($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$s;
 var $3=$2;
 var $4=(($3+160)|0);
 var $5=(($4+8)|0);
 var $6=(($5)|0);
 var $7=_memcmp($6,25528,6);
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 $1=5;
 label=12;break;
 case 3: 
 var $11=$2;
 var $12=(($11+160)|0);
 var $13=(($12+8)|0);
 var $14=(($13)|0);
 var $15=(($14+6)|0);
 var $16=_crc32_A1($15,2,0);
 var $17=$2;
 var $18=(($17+160)|0);
 var $19=(($18+8)|0);
 var $20=(($19)|0);
 var $21=(($20+6)|0);
 var $22=(($21+2)|0);
 var $23=_get_unaligned_le32($22);
 var $24=($16|0)!=($23|0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 $1=7;
 label=12;break;
 case 5: 
 var $27=$2;
 var $28=(($27+160)|0);
 var $29=(($28+8)|0);
 var $30=(($29+6)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=($32|0)!=0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 $1=6;
 label=12;break;
 case 7: 
 var $36=$2;
 var $37=(($36+160)|0);
 var $38=(($37+8)|0);
 var $39=(($38+7)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$2;
 var $43=(($42+28)|0);
 HEAP32[(($43)>>2)]=$41;
 var $44=$2;
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46>>>0)>15;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 $1=6;
 label=12;break;
 case 9: 
 var $50=$2;
 var $51=(($50+28)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52>>>0)>1;
 if($53){label=10;break;}else{label=11;break;}
 case 10: 
 $1=2;
 label=12;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 var $57=$1;
 STACKTOP=sp;return $57;
  default: assert(0, "bad label: " + label);
 }
}
function _dec_block_header($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 $2=$s;
 var $3=$2;
 var $4=(($3+160)|0);
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)-(4))|0);
 HEAP32[(($5)>>2)]=$7;
 var $8=$2;
 var $9=(($8+160)|0);
 var $10=(($9+8)|0);
 var $11=(($10)|0);
 var $12=$2;
 var $13=(($12+160)|0);
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=_crc32_A1($11,$15,0);
 var $17=$2;
 var $18=(($17+160)|0);
 var $19=(($18+8)|0);
 var $20=(($19)|0);
 var $21=$2;
 var $22=(($21+160)|0);
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+$24)|0);
 var $26=_get_unaligned_le32($25);
 var $27=($16|0)!=($26|0);
 if($27){label=2;break;}else{label=3;break;}
 case 2: 
 $1=7;
 label=31;break;
 case 3: 
 var $30=$2;
 var $31=(($30+160)|0);
 var $32=(($31)|0);
 HEAP32[(($32)>>2)]=2;
 var $33=$2;
 var $34=(($33+160)|0);
 var $35=(($34+8)|0);
 var $36=(($35+1)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=$38&63;
 var $40=($39|0)!=0;
 if($40){label=4;break;}else{label=5;break;}
 case 4: 
 $1=6;
 label=31;break;
 case 5: 
 var $43=$2;
 var $44=(($43+160)|0);
 var $45=(($44+8)|0);
 var $46=(($45+1)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=$48&64;
 var $50=($49|0)!=0;
 if($50){label=6;break;}else{label=9;break;}
 case 6: 
 var $52=$2;
 var $53=$2;
 var $54=(($53+160)|0);
 var $55=(($54+8)|0);
 var $56=(($55)|0);
 var $57=$2;
 var $58=(($57+160)|0);
 var $59=(($58)|0);
 var $60=$2;
 var $61=(($60+160)|0);
 var $62=(($61+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=_dec_vli($52,$56,$59,$63);
 var $65=($64|0)!=1;
 if($65){label=7;break;}else{label=8;break;}
 case 7: 
 $1=7;
 label=31;break;
 case 8: 
 var $68=$2;
 var $69=(($68+8)|0);
 var $ld$0$0=(($69)|0);
 var $70$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($69+4)|0);
 var $70$1=HEAP32[(($ld$1$1)>>2)];
 var $71=$2;
 var $72=(($71+40)|0);
 var $73=(($72)|0);
 var $st$2$0=(($73)|0);
 HEAP32[(($st$2$0)>>2)]=$70$0;
 var $st$3$1=(($73+4)|0);
 HEAP32[(($st$3$1)>>2)]=$70$1;
 label=10;break;
 case 9: 
 var $75=$2;
 var $76=(($75+40)|0);
 var $77=(($76)|0);
 var $$etemp$4$0=-1;
 var $$etemp$4$1=-1;
 var $st$5$0=(($77)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($77+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 label=10;break;
 case 10: 
 var $79=$2;
 var $80=(($79+160)|0);
 var $81=(($80+8)|0);
 var $82=(($81+1)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=$84&128;
 var $86=($85|0)!=0;
 if($86){label=11;break;}else{label=14;break;}
 case 11: 
 var $88=$2;
 var $89=$2;
 var $90=(($89+160)|0);
 var $91=(($90+8)|0);
 var $92=(($91)|0);
 var $93=$2;
 var $94=(($93+160)|0);
 var $95=(($94)|0);
 var $96=$2;
 var $97=(($96+160)|0);
 var $98=(($97+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=_dec_vli($88,$92,$95,$99);
 var $101=($100|0)!=1;
 if($101){label=12;break;}else{label=13;break;}
 case 12: 
 $1=7;
 label=31;break;
 case 13: 
 var $104=$2;
 var $105=(($104+8)|0);
 var $ld$7$0=(($105)|0);
 var $106$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($105+4)|0);
 var $106$1=HEAP32[(($ld$8$1)>>2)];
 var $107=$2;
 var $108=(($107+40)|0);
 var $109=(($108+8)|0);
 var $st$9$0=(($109)|0);
 HEAP32[(($st$9$0)>>2)]=$106$0;
 var $st$10$1=(($109+4)|0);
 HEAP32[(($st$10$1)>>2)]=$106$1;
 label=15;break;
 case 14: 
 var $111=$2;
 var $112=(($111+40)|0);
 var $113=(($112+8)|0);
 var $$etemp$11$0=-1;
 var $$etemp$11$1=-1;
 var $st$12$0=(($113)|0);
 HEAP32[(($st$12$0)>>2)]=$$etemp$11$0;
 var $st$13$1=(($113+4)|0);
 HEAP32[(($st$13$1)>>2)]=$$etemp$11$1;
 label=15;break;
 case 15: 
 var $115=$2;
 var $116=(($115+160)|0);
 var $117=(($116+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$2;
 var $120=(($119+160)|0);
 var $121=(($120)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=((($118)-($122))|0);
 var $124=($123>>>0)<2;
 if($124){label=16;break;}else{label=17;break;}
 case 16: 
 $1=7;
 label=31;break;
 case 17: 
 var $127=$2;
 var $128=(($127+160)|0);
 var $129=(($128)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=((($130)+(1))|0);
 HEAP32[(($129)>>2)]=$131;
 var $132=$2;
 var $133=(($132+160)|0);
 var $134=(($133+8)|0);
 var $135=(($134+$130)|0);
 var $136=HEAP8[($135)];
 var $137=($136&255);
 var $138=($137|0)!=33;
 if($138){label=18;break;}else{label=19;break;}
 case 18: 
 $1=6;
 label=31;break;
 case 19: 
 var $141=$2;
 var $142=(($141+160)|0);
 var $143=(($142)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=((($144)+(1))|0);
 HEAP32[(($143)>>2)]=$145;
 var $146=$2;
 var $147=(($146+160)|0);
 var $148=(($147+8)|0);
 var $149=(($148+$144)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 var $152=($151|0)!=1;
 if($152){label=20;break;}else{label=21;break;}
 case 20: 
 $1=6;
 label=31;break;
 case 21: 
 var $155=$2;
 var $156=(($155+160)|0);
 var $157=(($156+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$2;
 var $160=(($159+160)|0);
 var $161=(($160)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=((($158)-($162))|0);
 var $164=($163>>>0)<1;
 if($164){label=22;break;}else{label=23;break;}
 case 22: 
 $1=7;
 label=31;break;
 case 23: 
 var $167=$2;
 var $168=(($167+1192)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$2;
 var $171=(($170+160)|0);
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=((($173)+(1))|0);
 HEAP32[(($172)>>2)]=$174;
 var $175=$2;
 var $176=(($175+160)|0);
 var $177=(($176+8)|0);
 var $178=(($177+$173)|0);
 var $179=HEAP8[($178)];
 var $180=_xz_dec_lzma2_reset($169,$179);
 $ret=$180;
 var $181=$ret;
 var $182=($181|0)!=0;
 if($182){label=24;break;}else{label=25;break;}
 case 24: 
 var $184=$ret;
 $1=$184;
 label=31;break;
 case 25: 
 label=26;break;
 case 26: 
 var $187=$2;
 var $188=(($187+160)|0);
 var $189=(($188)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$2;
 var $192=(($191+160)|0);
 var $193=(($192+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($190>>>0)<($194>>>0);
 if($195){label=27;break;}else{label=30;break;}
 case 27: 
 var $197=$2;
 var $198=(($197+160)|0);
 var $199=(($198)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=((($200)+(1))|0);
 HEAP32[(($199)>>2)]=$201;
 var $202=$2;
 var $203=(($202+160)|0);
 var $204=(($203+8)|0);
 var $205=(($204+$200)|0);
 var $206=HEAP8[($205)];
 var $207=($206&255);
 var $208=($207|0)!=0;
 if($208){label=28;break;}else{label=29;break;}
 case 28: 
 $1=6;
 label=31;break;
 case 29: 
 label=26;break;
 case 30: 
 var $212=$2;
 var $213=(($212+160)|0);
 var $214=(($213)|0);
 HEAP32[(($214)>>2)]=0;
 var $215=$2;
 var $216=(($215+64)|0);
 var $217=(($216)|0);
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $st$15$0=(($217)|0);
 HEAP32[(($st$15$0)>>2)]=$$etemp$14$0;
 var $st$16$1=(($217+4)|0);
 HEAP32[(($st$16$1)>>2)]=$$etemp$14$1;
 var $218=$2;
 var $219=(($218+64)|0);
 var $220=(($219+8)|0);
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $st$18$0=(($220)|0);
 HEAP32[(($st$18$0)>>2)]=$$etemp$17$0;
 var $st$19$1=(($220+4)|0);
 HEAP32[(($st$19$1)>>2)]=$$etemp$17$1;
 $1=0;
 label=31;break;
 case 31: 
 var $222=$1;
 STACKTOP=sp;return $222;
  default: assert(0, "bad label: " + label);
 }
}
function _dec_block($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ret;
 $2=$s;
 $3=$b;
 var $4=$3;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=(($7+16)|0);
 HEAP32[(($8)>>2)]=$6;
 var $9=$3;
 var $10=(($9+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=(($12+20)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$2;
 var $15=(($14+1192)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$3;
 var $18=_xz_dec_lzma2_run($16,$17);
 $ret=$18;
 var $19=$3;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$2;
 var $23=(($22+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($21)-($24))|0);
 var $26$0=$25;
 var $26$1=0;
 var $27=$2;
 var $28=(($27+64)|0);
 var $29=(($28)|0);
 var $ld$0$0=(($29)|0);
 var $30$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($29+4)|0);
 var $30$1=HEAP32[(($ld$1$1)>>2)];
 var $31$0=_i64Add($30$0,$30$1,$26$0,$26$1);var $31$1=tempRet0;
 var $st$2$0=(($29)|0);
 HEAP32[(($st$2$0)>>2)]=$31$0;
 var $st$3$1=(($29+4)|0);
 HEAP32[(($st$3$1)>>2)]=$31$1;
 var $32=$3;
 var $33=(($32+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$2;
 var $36=(($35+20)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($34)-($37))|0);
 var $39$0=$38;
 var $39$1=0;
 var $40=$2;
 var $41=(($40+64)|0);
 var $42=(($41+8)|0);
 var $ld$4$0=(($42)|0);
 var $43$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($42+4)|0);
 var $43$1=HEAP32[(($ld$5$1)>>2)];
 var $44$0=_i64Add($43$0,$43$1,$39$0,$39$1);var $44$1=tempRet0;
 var $st$6$0=(($42)|0);
 HEAP32[(($st$6$0)>>2)]=$44$0;
 var $st$7$1=(($42+4)|0);
 HEAP32[(($st$7$1)>>2)]=$44$1;
 var $45=$2;
 var $46=(($45+64)|0);
 var $47=(($46)|0);
 var $ld$8$0=(($47)|0);
 var $48$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($47+4)|0);
 var $48$1=HEAP32[(($ld$9$1)>>2)];
 var $49=$2;
 var $50=(($49+40)|0);
 var $51=(($50)|0);
 var $ld$10$0=(($51)|0);
 var $52$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($51+4)|0);
 var $52$1=HEAP32[(($ld$11$1)>>2)];
 var $53=(($48$1>>>0) > ($52$1>>>0)) | (((($48$1>>>0) == ($52$1>>>0) & ($48$0>>>0) >  ($52$0>>>0))));
 if($53){label=3;break;}else{label=2;break;}
 case 2: 
 var $55=$2;
 var $56=(($55+64)|0);
 var $57=(($56+8)|0);
 var $ld$12$0=(($57)|0);
 var $58$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($57+4)|0);
 var $58$1=HEAP32[(($ld$13$1)>>2)];
 var $59=$2;
 var $60=(($59+40)|0);
 var $61=(($60+8)|0);
 var $ld$14$0=(($61)|0);
 var $62$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$15$1)>>2)];
 var $63=(($58$1>>>0) > ($62$1>>>0)) | (((($58$1>>>0) == ($62$1>>>0) & ($58$0>>>0) >  ($62$0>>>0))));
 if($63){label=3;break;}else{label=4;break;}
 case 3: 
 $1=7;
 label=15;break;
 case 4: 
 var $66=$2;
 var $67=(($66+28)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==1;
 if($69){label=5;break;}else{label=6;break;}
 case 5: 
 var $71=$3;
 var $72=(($71+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$2;
 var $75=(($74+20)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($73+$76)|0);
 var $78=$3;
 var $79=(($78+16)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$2;
 var $82=(($81+20)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=((($80)-($83))|0);
 var $85=$2;
 var $86=(($85+24)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=_crc32_A1($77,$84,$87);
 var $89=$2;
 var $90=(($89+24)|0);
 HEAP32[(($90)>>2)]=$88;
 label=6;break;
 case 6: 
 var $92=$ret;
 var $93=($92|0)==1;
 if($93){label=7;break;}else{label=14;break;}
 case 7: 
 var $95=$2;
 var $96=(($95+40)|0);
 var $97=(($96)|0);
 var $ld$16$0=(($97)|0);
 var $98$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($97+4)|0);
 var $98$1=HEAP32[(($ld$17$1)>>2)];
 var $$etemp$18$0=-1;
 var $$etemp$18$1=-1;
 var $99=(($98$0|0) != ($$etemp$18$0|0)) | (($98$1|0) != ($$etemp$18$1|0));
 if($99){label=8;break;}else{label=10;break;}
 case 8: 
 var $101=$2;
 var $102=(($101+40)|0);
 var $103=(($102)|0);
 var $ld$19$0=(($103)|0);
 var $104$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($103+4)|0);
 var $104$1=HEAP32[(($ld$20$1)>>2)];
 var $105=$2;
 var $106=(($105+64)|0);
 var $107=(($106)|0);
 var $ld$21$0=(($107)|0);
 var $108$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($107+4)|0);
 var $108$1=HEAP32[(($ld$22$1)>>2)];
 var $109=(($104$0|0) != ($108$0|0)) | (($104$1|0) != ($108$1|0));
 if($109){label=9;break;}else{label=10;break;}
 case 9: 
 $1=7;
 label=15;break;
 case 10: 
 var $112=$2;
 var $113=(($112+40)|0);
 var $114=(($113+8)|0);
 var $ld$23$0=(($114)|0);
 var $115$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($114+4)|0);
 var $115$1=HEAP32[(($ld$24$1)>>2)];
 var $$etemp$25$0=-1;
 var $$etemp$25$1=-1;
 var $116=(($115$0|0) != ($$etemp$25$0|0)) | (($115$1|0) != ($$etemp$25$1|0));
 if($116){label=11;break;}else{label=13;break;}
 case 11: 
 var $118=$2;
 var $119=(($118+40)|0);
 var $120=(($119+8)|0);
 var $ld$26$0=(($120)|0);
 var $121$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($120+4)|0);
 var $121$1=HEAP32[(($ld$27$1)>>2)];
 var $122=$2;
 var $123=(($122+64)|0);
 var $124=(($123+8)|0);
 var $ld$28$0=(($124)|0);
 var $125$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($124+4)|0);
 var $125$1=HEAP32[(($ld$29$1)>>2)];
 var $126=(($121$0|0) != ($125$0|0)) | (($121$1|0) != ($125$1|0));
 if($126){label=12;break;}else{label=13;break;}
 case 12: 
 $1=7;
 label=15;break;
 case 13: 
 var $129=$2;
 var $130=(($129+40)|0);
 var $131=(($130+16)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133$0=$132;
 var $133$1=0;
 var $134=$2;
 var $135=(($134+64)|0);
 var $136=(($135)|0);
 var $ld$30$0=(($136)|0);
 var $137$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($136+4)|0);
 var $137$1=HEAP32[(($ld$31$1)>>2)];
 var $138$0=_i64Add($133$0,$133$1,$137$0,$137$1);var $138$1=tempRet0;
 var $139=$2;
 var $140=(($139+64)|0);
 var $141=(($140+24)|0);
 var $142=(($141)|0);
 var $ld$32$0=(($142)|0);
 var $143$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($142+4)|0);
 var $143$1=HEAP32[(($ld$33$1)>>2)];
 var $144$0=_i64Add($143$0,$143$1,$138$0,$138$1);var $144$1=tempRet0;
 var $st$34$0=(($142)|0);
 HEAP32[(($st$34$0)>>2)]=$144$0;
 var $st$35$1=(($142+4)|0);
 HEAP32[(($st$35$1)>>2)]=$144$1;
 var $145=$2;
 var $146=(($145+28)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=((18768+$147)|0);
 var $149=HEAP8[($148)];
 var $150$0=($149&255);
 var $150$1=0;
 var $151=$2;
 var $152=(($151+64)|0);
 var $153=(($152+24)|0);
 var $154=(($153)|0);
 var $ld$36$0=(($154)|0);
 var $155$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($154+4)|0);
 var $155$1=HEAP32[(($ld$37$1)>>2)];
 var $156$0=_i64Add($155$0,$155$1,$150$0,$150$1);var $156$1=tempRet0;
 var $st$38$0=(($154)|0);
 HEAP32[(($st$38$0)>>2)]=$156$0;
 var $st$39$1=(($154+4)|0);
 HEAP32[(($st$39$1)>>2)]=$156$1;
 var $157=$2;
 var $158=(($157+64)|0);
 var $159=(($158+8)|0);
 var $ld$40$0=(($159)|0);
 var $160$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($159+4)|0);
 var $160$1=HEAP32[(($ld$41$1)>>2)];
 var $161=$2;
 var $162=(($161+64)|0);
 var $163=(($162+24)|0);
 var $164=(($163+8)|0);
 var $ld$42$0=(($164)|0);
 var $165$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($164+4)|0);
 var $165$1=HEAP32[(($ld$43$1)>>2)];
 var $166$0=_i64Add($165$0,$165$1,$160$0,$160$1);var $166$1=tempRet0;
 var $st$44$0=(($164)|0);
 HEAP32[(($st$44$0)>>2)]=$166$0;
 var $st$45$1=(($164+4)|0);
 HEAP32[(($st$45$1)>>2)]=$166$1;
 var $167=$2;
 var $168=(($167+64)|0);
 var $169=(($168+24)|0);
 var $170=$169;
 var $171=$2;
 var $172=(($171+64)|0);
 var $173=(($172+24)|0);
 var $174=(($173+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=_crc32_A1($170,24,$175);
 var $177=$2;
 var $178=(($177+64)|0);
 var $179=(($178+24)|0);
 var $180=(($179+16)|0);
 HEAP32[(($180)>>2)]=$176;
 var $181=$2;
 var $182=(($181+64)|0);
 var $183=(($182+16)|0);
 var $ld$46$0=(($183)|0);
 var $184$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($183+4)|0);
 var $184$1=HEAP32[(($ld$47$1)>>2)];
 var $$etemp$48$0=1;
 var $$etemp$48$1=0;
 var $185$0=_i64Add($184$0,$184$1,$$etemp$48$0,$$etemp$48$1);var $185$1=tempRet0;
 var $st$49$0=(($183)|0);
 HEAP32[(($st$49$0)>>2)]=$185$0;
 var $st$50$1=(($183+4)|0);
 HEAP32[(($st$50$1)>>2)]=$185$1;
 label=14;break;
 case 14: 
 var $187=$ret;
 $1=$187;
 label=15;break;
 case 15: 
 var $189=$1;
 STACKTOP=sp;return $189;
  default: assert(0, "bad label: " + label);
 }
}
function _crc32_validate($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$s;
 $3=$b;
 label=2;break;
 case 2: 
 var $5=$3;
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$3;
 var $9=(($8+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($7|0)==($10|0);
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=9;break;
 case 4: 
 var $14=$2;
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$2;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$16>>>($19>>>0);
 var $21=$20&255;
 var $22=$3;
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($24)+(1))|0);
 HEAP32[(($23)>>2)]=$25;
 var $26=$3;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+$24)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=($21|0)!=($31|0);
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 $1=7;
 label=9;break;
 case 6: 
 var $35=$2;
 var $36=(($35+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($37)+(8))|0);
 HEAP32[(($36)>>2)]=$38;
 label=7;break;
 case 7: 
 var $40=$2;
 var $41=(($40+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42>>>0)<32;
 if($43){label=2;break;}else{label=8;break;}
 case 8: 
 var $45=$2;
 var $46=(($45+24)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=$2;
 var $48=(($47+4)|0);
 HEAP32[(($48)>>2)]=0;
 $1=1;
 label=9;break;
 case 9: 
 var $50=$1;
 STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }
}
function _check_skip($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$s;
 $3=$b;
 label=2;break;
 case 2: 
 var $5=$2;
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $9=(($8+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=((18768+$10)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=($7>>>0)<($13>>>0);
 if($14){label=3;break;}else{label=6;break;}
 case 3: 
 var $16=$3;
 var $17=(($16+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$3;
 var $20=(($19+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($18|0)==($21|0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=7;break;
 case 5: 
 var $25=$3;
 var $26=(($25+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($27)+(1))|0);
 HEAP32[(($26)>>2)]=$28;
 var $29=$2;
 var $30=(($29+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)+(1))|0);
 HEAP32[(($30)>>2)]=$32;
 label=2;break;
 case 6: 
 var $34=$2;
 var $35=(($34+4)|0);
 HEAP32[(($35)>>2)]=0;
 $1=1;
 label=7;break;
 case 7: 
 var $37=$1;
 STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _dec_index($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ret;
 $2=$s;
 $3=$b;
 label=2;break;
 case 2: 
 var $5=$2;
 var $6=$3;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$3;
 var $10=(($9+4)|0);
 var $11=$3;
 var $12=(($11+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=_dec_vli($5,$8,$10,$13);
 $ret=$14;
 var $15=$ret;
 var $16=($15|0)!=1;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=$2;
 var $19=$3;
 _index_update($18,$19);
 var $20=$ret;
 $1=$20;
 label=13;break;
 case 4: 
 var $22=$2;
 var $23=(($22+112)|0);
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 if(($25|0)==0){ label=5;break;}else if(($25|0)==1){ label=8;break;}else if(($25|0)==2){ label=9;break;}else{label=10;break;}
 case 5: 
 var $27=$2;
 var $28=(($27+8)|0);
 var $ld$0$0=(($28)|0);
 var $29$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$1$1)>>2)];
 var $30=$2;
 var $31=(($30+112)|0);
 var $32=(($31+16)|0);
 var $st$2$0=(($32)|0);
 HEAP32[(($st$2$0)>>2)]=$29$0;
 var $st$3$1=(($32+4)|0);
 HEAP32[(($st$3$1)>>2)]=$29$1;
 var $33=$2;
 var $34=(($33+112)|0);
 var $35=(($34+16)|0);
 var $ld$4$0=(($35)|0);
 var $36$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($35+4)|0);
 var $36$1=HEAP32[(($ld$5$1)>>2)];
 var $37=$2;
 var $38=(($37+64)|0);
 var $39=(($38+16)|0);
 var $ld$6$0=(($39)|0);
 var $40$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($39+4)|0);
 var $40$1=HEAP32[(($ld$7$1)>>2)];
 var $41=(($36$0|0) != ($40$0|0)) | (($36$1|0) != ($40$1|0));
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 $1=7;
 label=13;break;
 case 7: 
 var $44=$2;
 var $45=(($44+112)|0);
 var $46=(($45)|0);
 HEAP32[(($46)>>2)]=1;
 label=10;break;
 case 8: 
 var $48=$2;
 var $49=(($48+8)|0);
 var $ld$8$0=(($49)|0);
 var $50$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($49+4)|0);
 var $50$1=HEAP32[(($ld$9$1)>>2)];
 var $51=$2;
 var $52=(($51+112)|0);
 var $53=(($52+24)|0);
 var $54=(($53)|0);
 var $ld$10$0=(($54)|0);
 var $55$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($54+4)|0);
 var $55$1=HEAP32[(($ld$11$1)>>2)];
 var $56$0=_i64Add($55$0,$55$1,$50$0,$50$1);var $56$1=tempRet0;
 var $st$12$0=(($54)|0);
 HEAP32[(($st$12$0)>>2)]=$56$0;
 var $st$13$1=(($54+4)|0);
 HEAP32[(($st$13$1)>>2)]=$56$1;
 var $57=$2;
 var $58=(($57+112)|0);
 var $59=(($58)|0);
 HEAP32[(($59)>>2)]=2;
 label=10;break;
 case 9: 
 var $61=$2;
 var $62=(($61+8)|0);
 var $ld$14$0=(($62)|0);
 var $63$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($62+4)|0);
 var $63$1=HEAP32[(($ld$15$1)>>2)];
 var $64=$2;
 var $65=(($64+112)|0);
 var $66=(($65+24)|0);
 var $67=(($66+8)|0);
 var $ld$16$0=(($67)|0);
 var $68$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($67+4)|0);
 var $68$1=HEAP32[(($ld$17$1)>>2)];
 var $69$0=_i64Add($68$0,$68$1,$63$0,$63$1);var $69$1=tempRet0;
 var $st$18$0=(($67)|0);
 HEAP32[(($st$18$0)>>2)]=$69$0;
 var $st$19$1=(($67+4)|0);
 HEAP32[(($st$19$1)>>2)]=$69$1;
 var $70=$2;
 var $71=(($70+112)|0);
 var $72=(($71+24)|0);
 var $73=$72;
 var $74=$2;
 var $75=(($74+112)|0);
 var $76=(($75+24)|0);
 var $77=(($76+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=_crc32_A1($73,24,$78);
 var $80=$2;
 var $81=(($80+112)|0);
 var $82=(($81+24)|0);
 var $83=(($82+16)|0);
 HEAP32[(($83)>>2)]=$79;
 var $84=$2;
 var $85=(($84+112)|0);
 var $86=(($85+16)|0);
 var $ld$20$0=(($86)|0);
 var $87$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($86+4)|0);
 var $87$1=HEAP32[(($ld$21$1)>>2)];
 var $$etemp$22$0=-1;
 var $$etemp$22$1=-1;
 var $88$0=_i64Add($87$0,$87$1,$$etemp$22$0,$$etemp$22$1);var $88$1=tempRet0;
 var $st$23$0=(($86)|0);
 HEAP32[(($st$23$0)>>2)]=$88$0;
 var $st$24$1=(($86+4)|0);
 HEAP32[(($st$24$1)>>2)]=$88$1;
 var $89=$2;
 var $90=(($89+112)|0);
 var $91=(($90)|0);
 HEAP32[(($91)>>2)]=1;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $94=$2;
 var $95=(($94+112)|0);
 var $96=(($95+16)|0);
 var $ld$25$0=(($96)|0);
 var $97$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($96+4)|0);
 var $97$1=HEAP32[(($ld$26$1)>>2)];
 var $$etemp$27$0=0;
 var $$etemp$27$1=0;
 var $98=(($97$1>>>0) > ($$etemp$27$1>>>0)) | (((($97$1>>>0) == ($$etemp$27$1>>>0) & ($97$0>>>0) >  ($$etemp$27$0>>>0))));
 if($98){label=2;break;}else{label=12;break;}
 case 12: 
 $1=1;
 label=13;break;
 case 13: 
 var $101=$1;
 STACKTOP=sp;return $101;
  default: assert(0, "bad label: " + label);
 }
}
function _index_update($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $in_used;
 $1=$s;
 $2=$b;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($5)-($8))|0);
 $in_used=$9;
 var $10=$in_used;
 var $11$0=$10;
 var $11$1=0;
 var $12=$1;
 var $13=(($12+112)|0);
 var $14=(($13+8)|0);
 var $ld$0$0=(($14)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $16$0=_i64Add($15$0,$15$1,$11$0,$11$1);var $16$1=tempRet0;
 var $st$2$0=(($14)|0);
 HEAP32[(($st$2$0)>>2)]=$16$0;
 var $st$3$1=(($14+4)|0);
 HEAP32[(($st$3$1)>>2)]=$16$1;
 var $17=$2;
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$1;
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($19+$22)|0);
 var $24=$in_used;
 var $25=$1;
 var $26=(($25+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=_crc32_A1($23,$24,$27);
 var $29=$1;
 var $30=(($29+24)|0);
 HEAP32[(($30)>>2)]=$28;
 STACKTOP=sp;return;
}
function _dec_stream_footer($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$s;
 var $3=$2;
 var $4=(($3+160)|0);
 var $5=(($4+8)|0);
 var $6=(($5)|0);
 var $7=(($6+10)|0);
 var $8=_memcmp($7,20720,2);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 $1=7;
 label=11;break;
 case 3: 
 var $12=$2;
 var $13=(($12+160)|0);
 var $14=(($13+8)|0);
 var $15=(($14)|0);
 var $16=(($15+4)|0);
 var $17=_crc32_A1($16,6,0);
 var $18=$2;
 var $19=(($18+160)|0);
 var $20=(($19+8)|0);
 var $21=(($20)|0);
 var $22=_get_unaligned_le32($21);
 var $23=($17|0)!=($22|0);
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 $1=7;
 label=11;break;
 case 5: 
 var $26=$2;
 var $27=(($26+112)|0);
 var $28=(($27+8)|0);
 var $ld$0$0=(($28)|0);
 var $29$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$1$1)>>2)];
 var $30$0=($29$0>>>2)|($29$1<<30);
 var $30$1=($29$1>>>2)|(0<<30);
 var $31=$2;
 var $32=(($31+160)|0);
 var $33=(($32+8)|0);
 var $34=(($33)|0);
 var $35=(($34+4)|0);
 var $36=_get_unaligned_le32($35);
 var $37$0=$36;
 var $37$1=0;
 var $38=(($30$0|0) != ($37$0|0)) | (($30$1|0) != ($37$1|0));
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 $1=7;
 label=11;break;
 case 7: 
 var $41=$2;
 var $42=(($41+160)|0);
 var $43=(($42+8)|0);
 var $44=(($43+8)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=($46|0)!=0;
 if($47){label=9;break;}else{label=8;break;}
 case 8: 
 var $49=$2;
 var $50=(($49+160)|0);
 var $51=(($50+8)|0);
 var $52=(($51+9)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=$2;
 var $56=(($55+28)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($54|0)!=($57|0);
 if($58){label=9;break;}else{label=10;break;}
 case 9: 
 $1=7;
 label=11;break;
 case 10: 
 $1=1;
 label=11;break;
 case 11: 
 var $62=$1;
 STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _get_unaligned_le32($buf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$buf;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=$1;
 var $7=(($6+1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 var $10=$9<<8;
 var $11=$5|$10;
 var $12=$1;
 var $13=(($12+2)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$15<<16;
 var $17=$11|$16;
 var $18=$1;
 var $19=(($18+3)|0);
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=$21<<24;
 var $23=$17|$22;
 STACKTOP=sp;return $23;
}
function _dec_vli($s,$in,$in_pos,$in_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $byte;
 $2=$s;
 $3=$in;
 $4=$in_pos;
 $5=$in_size;
 var $6=$2;
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=(($11+8)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($12)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($12+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $15=$4;
 var $16=HEAP32[(($15)>>2)];
 var $17=$5;
 var $18=($16>>>0)<($17>>>0);
 if($18){label=5;break;}else{label=13;break;}
 case 5: 
 var $20=$4;
 var $21=HEAP32[(($20)>>2)];
 var $22=$3;
 var $23=(($22+$21)|0);
 var $24=HEAP8[($23)];
 $byte=$24;
 var $25=$4;
 var $26=HEAP32[(($25)>>2)];
 var $27=((($26)+(1))|0);
 HEAP32[(($25)>>2)]=$27;
 var $28=$byte;
 var $29=($28&255);
 var $30=$29&127;
 var $31$0=$30;
 var $31$1=((((($30|0)<0))|0)?-1:0);
 var $32=$2;
 var $33=(($32+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35$0=$34;
 var $35$1=0;
 var $36$0=_bitshift64Shl($31$0,$31$1,$35$0);var $36$1=tempRet0;
 var $37=$2;
 var $38=(($37+8)|0);
 var $ld$3$0=(($38)|0);
 var $39$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$4$1)>>2)];
 var $40$0=$39$0|$36$0;
 var $40$1=$39$1|$36$1;
 var $st$5$0=(($38)|0);
 HEAP32[(($st$5$0)>>2)]=$40$0;
 var $st$6$1=(($38+4)|0);
 HEAP32[(($st$6$1)>>2)]=$40$1;
 var $41=$byte;
 var $42=($41&255);
 var $43=$42&128;
 var $44=($43|0)==0;
 if($44){label=6;break;}else{label=10;break;}
 case 6: 
 var $46=$byte;
 var $47=($46&255);
 var $48=($47|0)==0;
 if($48){label=7;break;}else{label=9;break;}
 case 7: 
 var $50=$2;
 var $51=(($50+4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)!=0;
 if($53){label=8;break;}else{label=9;break;}
 case 8: 
 $1=7;
 label=14;break;
 case 9: 
 var $56=$2;
 var $57=(($56+4)|0);
 HEAP32[(($57)>>2)]=0;
 $1=1;
 label=14;break;
 case 10: 
 var $59=$2;
 var $60=(($59+4)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=((($61)+(7))|0);
 HEAP32[(($60)>>2)]=$62;
 var $63=$2;
 var $64=(($63+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==63;
 if($66){label=11;break;}else{label=12;break;}
 case 11: 
 $1=7;
 label=14;break;
 case 12: 
 label=4;break;
 case 13: 
 $1=0;
 label=14;break;
 case 14: 
 var $71=$1;
 STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }
}
function _get_envelope($env,$x,$def,$end){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $x1;
 var $x2;
 var $y1;
 var $y2;
 var $data;
 var $index;
 $2=$env;
 $3=$x;
 $4=$def;
 $5=$end;
 var $6=$2;
 var $7=(($6+28)|0);
 var $8=(($7)|0);
 $data=$8;
 var $9=$5;
 HEAP32[(($9)>>2)]=0;
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12^-1;
 var $14=$13&1;
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=2;break;}
 case 2: 
 var $17=$2;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)<=0;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 var $22=$4;
 $1=$22;
 label=16;break;
 case 4: 
 var $24=$2;
 var $25=(($24+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=((($26)-(1))|0);
 var $28=($27<<1);
 $index=$28;
 var $29=$index;
 var $30=$data;
 var $31=(($30+($29<<1))|0);
 var $32=HEAP16[(($31)>>1)];
 var $33=(($32<<16)>>16);
 $x1=$33;
 var $34=$3;
 var $35=$x1;
 var $36=($34|0)>=($35|0);
 if($36){label=6;break;}else{label=5;break;}
 case 5: 
 var $38=$index;
 var $39=($38|0)==0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $41=$5;
 HEAP32[(($41)>>2)]=1;
 var $42=$index;
 var $43=((($42)+(1))|0);
 var $44=$data;
 var $45=(($44+($43<<1))|0);
 var $46=HEAP16[(($45)>>1)];
 var $47=(($46<<16)>>16);
 $1=$47;
 label=16;break;
 case 7: 
 label=8;break;
 case 8: 
 var $50=$index;
 var $51=((($50)-(2))|0);
 $index=$51;
 var $52=$index;
 var $53=$data;
 var $54=(($53+($52<<1))|0);
 var $55=HEAP16[(($54)>>1)];
 var $56=(($55<<16)>>16);
 $x1=$56;
 label=9;break;
 case 9: 
 var $58=$index;
 var $59=($58|0)>0;
 if($59){label=10;break;}else{var $65=0;label=11;break;}
 case 10: 
 var $61=$x1;
 var $62=$3;
 var $63=($61|0)>($62|0);
 var $65=$63;label=11;break;
 case 11: 
 var $65;
 if($65){label=8;break;}else{label=12;break;}
 case 12: 
 var $67=$index;
 var $68=((($67)+(1))|0);
 var $69=$data;
 var $70=(($69+($68<<1))|0);
 var $71=HEAP16[(($70)>>1)];
 var $72=(($71<<16)>>16);
 $y1=$72;
 var $73=$index;
 var $74=((($73)+(2))|0);
 var $75=$data;
 var $76=(($75+($74<<1))|0);
 var $77=HEAP16[(($76)>>1)];
 var $78=(($77<<16)>>16);
 $x2=$78;
 var $79=$2;
 var $80=(($79)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$81&4;
 var $83=($82|0)!=0;
 if($83){label=13;break;}else{label=15;break;}
 case 13: 
 var $85=$index;
 var $86=$2;
 var $87=(($86+24)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$88<<1;
 var $90=($85|0)==($89|0);
 if($90){label=14;break;}else{label=15;break;}
 case 14: 
 var $92=$2;
 var $93=(($92+20)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=((($94)-(1))|0);
 var $96=($95<<1);
 $index=$96;
 label=15;break;
 case 15: 
 var $98=$index;
 var $99=((($98)+(3))|0);
 var $100=$data;
 var $101=(($100+($99<<1))|0);
 var $102=HEAP16[(($101)>>1)];
 var $103=(($102<<16)>>16);
 $y2=$103;
 var $104=$y2;
 var $105=$y1;
 var $106=((($104)-($105))|0);
 var $107=$3;
 var $108=$x1;
 var $109=((($107)-($108))|0);
 var $110=(Math_imul($106,$109)|0);
 var $111=$x2;
 var $112=$x1;
 var $113=((($111)-($112))|0);
 var $114=(((($110|0))/(($113|0)))&-1);
 var $115=$y1;
 var $116=((($114)+($115))|0);
 $1=$116;
 label=16;break;
 case 16: 
 var $118=$1;
 STACKTOP=sp;return $118;
  default: assert(0, "bad label: " + label);
 }
}
function _update_envelope($env,$x,$release){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $data;
 var $has_loop;
 var $has_sus;
 var $lpe;
 var $lps;
 var $sus;
 var $sue;
 $2=$env;
 $3=$x;
 $4=$release;
 var $5=$2;
 var $6=(($5+28)|0);
 var $7=(($6)|0);
 $data=$7;
 var $8=$3;
 var $9=($8|0)<65535;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$3;
 var $12=((($11)+(1))|0);
 $3=$12;
 label=3;break;
 case 3: 
 var $14=$2;
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16^-1;
 var $18=$17&1;
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 var $21=$2;
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)<=0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=$3;
 $1=$26;
 label=31;break;
 case 6: 
 var $28=$2;
 var $29=(($28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$30&4;
 $has_loop=$31;
 var $32=$2;
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$34&2;
 $has_sus=$35;
 var $36=$2;
 var $37=(($36+20)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$38<<1;
 $lps=$39;
 var $40=$2;
 var $41=(($40+24)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42<<1;
 $lpe=$43;
 var $44=$2;
 var $45=(($44+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$46<<1;
 $sus=$47;
 var $48=$2;
 var $49=(($48+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$50<<1;
 $sue=$51;
 var $52=$2;
 var $53=(($52)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$54&16;
 var $56=($55|0)!=0;
 if($56){label=7;break;}else{label=18;break;}
 case 7: 
 var $58=$4;
 var $59=($58|0)!=0;
 if($59){label=12;break;}else{label=8;break;}
 case 8: 
 var $61=$has_sus;
 var $62=($61|0)!=0;
 if($62){label=9;break;}else{label=12;break;}
 case 9: 
 var $64=$3;
 var $65=$sue;
 var $66=$data;
 var $67=(($66+($65<<1))|0);
 var $68=HEAP16[(($67)>>1)];
 var $69=(($68<<16)>>16);
 var $70=($64|0)>($69|0);
 if($70){label=10;break;}else{label=11;break;}
 case 10: 
 var $72=$sus;
 var $73=$data;
 var $74=(($73+($72<<1))|0);
 var $75=HEAP16[(($74)>>1)];
 var $76=(($75<<16)>>16);
 $3=$76;
 label=11;break;
 case 11: 
 label=17;break;
 case 12: 
 var $79=$has_loop;
 var $80=($79|0)!=0;
 if($80){label=13;break;}else{label=16;break;}
 case 13: 
 var $82=$3;
 var $83=$lpe;
 var $84=$data;
 var $85=(($84+($83<<1))|0);
 var $86=HEAP16[(($85)>>1)];
 var $87=(($86<<16)>>16);
 var $88=($82|0)>($87|0);
 if($88){label=14;break;}else{label=15;break;}
 case 14: 
 var $90=$lps;
 var $91=$data;
 var $92=(($91+($90<<1))|0);
 var $93=HEAP16[(($92)>>1)];
 var $94=(($93<<16)>>16);
 $3=$94;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=30;break;
 case 18: 
 var $99=$4;
 var $100=($99|0)!=0;
 if($100){label=22;break;}else{label=19;break;}
 case 19: 
 var $102=$has_sus;
 var $103=($102|0)!=0;
 if($103){label=20;break;}else{label=22;break;}
 case 20: 
 var $105=$3;
 var $106=$sus;
 var $107=$data;
 var $108=(($107+($106<<1))|0);
 var $109=HEAP16[(($108)>>1)];
 var $110=(($109<<16)>>16);
 var $111=($105|0)>($110|0);
 if($111){label=21;break;}else{label=22;break;}
 case 21: 
 var $113=$sus;
 var $114=$data;
 var $115=(($114+($113<<1))|0);
 var $116=HEAP16[(($115)>>1)];
 var $117=(($116<<16)>>16);
 $3=$117;
 label=22;break;
 case 22: 
 var $119=$has_loop;
 var $120=($119|0)!=0;
 if($120){label=23;break;}else{label=29;break;}
 case 23: 
 var $122=$3;
 var $123=$lpe;
 var $124=$data;
 var $125=(($124+($123<<1))|0);
 var $126=HEAP16[(($125)>>1)];
 var $127=(($126<<16)>>16);
 var $128=($122|0)>($127|0);
 if($128){label=24;break;}else{label=29;break;}
 case 24: 
 var $130=$4;
 var $131=($130|0)!=0;
 if($131){label=25;break;}else{label=27;break;}
 case 25: 
 var $133=$has_sus;
 var $134=($133|0)!=0;
 if($134){label=26;break;}else{label=27;break;}
 case 26: 
 var $136=$sus;
 var $137=$lpe;
 var $138=($136|0)==($137|0);
 if($138){label=28;break;}else{label=27;break;}
 case 27: 
 var $140=$lps;
 var $141=$data;
 var $142=(($141+($140<<1))|0);
 var $143=HEAP16[(($142)>>1)];
 var $144=(($143<<16)>>16);
 $3=$144;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $148=$3;
 $1=$148;
 label=31;break;
 case 31: 
 var $150=$1;
 STACKTOP=sp;return $150;
  default: assert(0, "bad label: " + label);
 }
}
function _check_envelope_fade($env,$x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $data;
 var $index;
 $2=$env;
 $3=$x;
 var $4=$2;
 var $5=(($4+28)|0);
 var $6=(($5)|0);
 $data=$6;
 var $7=$2;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9^-1;
 var $11=$10&1;
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 var $15=$2;
 var $16=(($15+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=((($17)-(1))|0);
 var $19=($18<<1);
 $index=$19;
 var $20=$3;
 var $21=$index;
 var $22=$data;
 var $23=(($22+($21<<1))|0);
 var $24=HEAP16[(($23)>>1)];
 var $25=(($24<<16)>>16);
 var $26=($20|0)>($25|0);
 if($26){label=4;break;}else{label=7;break;}
 case 4: 
 var $28=$index;
 var $29=((($28)+(1))|0);
 var $30=$data;
 var $31=(($30+($29<<1))|0);
 var $32=HEAP16[(($31)>>1)];
 var $33=(($32<<16)>>16);
 var $34=($33|0)==0;
 if($34){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=8;break;
 case 6: 
 $1=1;
 label=8;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $39=$1;
 STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _release_module_extras($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $m;
 $1=$ctx;
 var $2=$1;
 var $3=(($2+1552)|0);
 $m=$3;
 var $4=$m;
 var $5=(($4+6548)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 var $10=$m;
 var $11=(($10+6548)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==133303461;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=$m;
 _med_release_module_extras($18);
 label=8;break;
 case 4: 
 var $20=$m;
 var $21=(($20+6548)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=($23|0)!=0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=$m;
 var $27=(($26+6548)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=(($29)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)==68929562;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$m;
 _hmn_release_module_extras($34);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_channel_extras($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $m;
 $2=$ctx;
 $3=$xc;
 var $4=$2;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$m;
 var $7=(($6+6548)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=6;break;}
 case 2: 
 var $12=$m;
 var $13=(($12+6548)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==133303461;
 if($18){label=3;break;}else{label=6;break;}
 case 3: 
 var $20=$3;
 var $21=_med_new_channel_extras($20);
 var $22=($21|0)<0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=13;break;
 case 5: 
 label=12;break;
 case 6: 
 var $26=$m;
 var $27=(($26+6548)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=($29|0)!=0;
 if($30){label=7;break;}else{label=11;break;}
 case 7: 
 var $32=$m;
 var $33=(($32+6548)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$34;
 var $36=(($35)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==68929562;
 if($38){label=8;break;}else{label=11;break;}
 case 8: 
 var $40=$3;
 var $41=_hmn_new_channel_extras($40);
 var $42=($41|0)<0;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=13;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 $1=0;
 label=13;break;
 case 13: 
 var $48=$1;
 STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }
}
function _release_channel_extras($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $m;
 $1=$ctx;
 $2=$xc;
 var $3=$1;
 var $4=(($3+1552)|0);
 $m=$4;
 var $5=$m;
 var $6=(($5+6548)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=4;break;}
 case 2: 
 var $11=$m;
 var $12=(($11+6548)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==133303461;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 var $19=$2;
 _med_release_channel_extras($19);
 label=8;break;
 case 4: 
 var $21=$m;
 var $22=(($21+6548)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=$m;
 var $28=(($27+6548)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==68929562;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$2;
 _hmn_release_channel_extras($35);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _reset_channel_extras($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $m;
 $1=$ctx;
 $2=$xc;
 var $3=$1;
 var $4=(($3+1552)|0);
 $m=$4;
 var $5=$m;
 var $6=(($5+6548)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=4;break;}
 case 2: 
 var $11=$m;
 var $12=(($11+6548)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==133303461;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 var $19=$2;
 _med_reset_channel_extras($19);
 label=8;break;
 case 4: 
 var $21=$m;
 var $22=(($21+6548)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=$m;
 var $28=(($27+6548)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==68929562;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$2;
 _hmn_reset_channel_extras($35);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _play_extras($ctx,$xc,$chn,$new_note){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $m;
 $1=$ctx;
 $2=$xc;
 $3=$chn;
 $4=$new_note;
 var $5=$1;
 var $6=(($5+1552)|0);
 $m=$6;
 var $7=$2;
 var $8=(($7+36)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$m;
 var $11=(($10)|0);
 var $12=(($11+140)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($9|0)>=($13|0);
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 label=10;break;
 case 3: 
 var $17=$2;
 var $18=(($17+36)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$m;
 var $21=(($20)|0);
 var $22=(($21+176)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+((($19)*(764))&-1))|0);
 var $25=(($24+760)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$26;
 var $28=($27|0)!=0;
 if($28){label=4;break;}else{label=6;break;}
 case 4: 
 var $30=$2;
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$m;
 var $34=(($33)|0);
 var $35=(($34+176)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+((($32)*(764))&-1))|0);
 var $38=(($37+760)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$39;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==133303461;
 if($43){label=5;break;}else{label=6;break;}
 case 5: 
 var $45=$1;
 var $46=$2;
 var $47=$3;
 var $48=$4;
 _med_play_extras($45,$46,$47,$48);
 label=10;break;
 case 6: 
 var $50=$2;
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$m;
 var $54=(($53)|0);
 var $55=(($54+176)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+((($52)*(764))&-1))|0);
 var $58=(($57+760)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$59;
 var $61=($60|0)!=0;
 if($61){label=7;break;}else{label=9;break;}
 case 7: 
 var $63=$2;
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$m;
 var $67=(($66)|0);
 var $68=(($67+176)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+((($65)*(764))&-1))|0);
 var $71=(($70+760)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=(($73)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==68929562;
 if($76){label=8;break;}else{label=9;break;}
 case 8: 
 var $78=$1;
 var $79=$2;
 var $80=$3;
 var $81=$4;
 _hmn_play_extras($78,$79,$80,$81);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _extras_get_volume($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $m;
 var $vol;
 $1=$ctx;
 $2=$xc;
 var $3=$1;
 var $4=(($3+1552)|0);
 $m=$4;
 var $5=$2;
 var $6=(($5+36)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$m;
 var $9=(($8)|0);
 var $10=(($9+140)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($7|0)>=($11|0);
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$2;
 var $15=(($14+72)|0);
 var $16=HEAP32[(($15)>>2)];
 $vol=$16;
 label=12;break;
 case 3: 
 var $18=$2;
 var $19=(($18+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$m;
 var $22=(($21)|0);
 var $23=(($22+176)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+((($20)*(764))&-1))|0);
 var $26=(($25+760)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$27;
 var $29=($28|0)!=0;
 if($29){label=4;break;}else{label=6;break;}
 case 4: 
 var $31=$2;
 var $32=(($31+36)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$m;
 var $35=(($34)|0);
 var $36=(($35+176)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+((($33)*(764))&-1))|0);
 var $39=(($38+760)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==133303461;
 if($44){label=5;break;}else{label=6;break;}
 case 5: 
 var $46=$2;
 var $47=(($46+356)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$48;
 var $50=(($49+76)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$2;
 var $53=(($52+72)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(Math_imul($51,$54)|0);
 var $56=(((($55|0))/(64))&-1);
 $vol=$56;
 label=11;break;
 case 6: 
 var $58=$2;
 var $59=(($58+36)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=$m;
 var $62=(($61)|0);
 var $63=(($62+176)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+((($60)*(764))&-1))|0);
 var $66=(($65+760)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=($68|0)!=0;
 if($69){label=7;break;}else{label=9;break;}
 case 7: 
 var $71=$2;
 var $72=(($71+36)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$m;
 var $75=(($74)|0);
 var $76=(($75+176)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+((($73)*(764))&-1))|0);
 var $79=(($78+760)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($83|0)==68929562;
 if($84){label=8;break;}else{label=9;break;}
 case 8: 
 var $86=$2;
 var $87=(($86+356)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$88;
 var $90=(($89+8)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$2;
 var $93=(($92+72)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(Math_imul($91,$94)|0);
 var $96=(((($95|0))/(64))&-1);
 $vol=$96;
 label=10;break;
 case 9: 
 var $98=$2;
 var $99=(($98+72)|0);
 var $100=HEAP32[(($99)>>2)];
 $vol=$100;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $104=$vol;
 STACKTOP=sp;return $104;
  default: assert(0, "bad label: " + label);
 }
}
function _extras_get_period($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $period;
 $1=$ctx;
 $2=$xc;
 var $3=$2;
 var $4=(($3+356)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=$2;
 var $10=(($9+356)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==133303461;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$1;
 var $18=$2;
 var $19=_med_change_period($17,$18);
 $period=$19;
 label=5;break;
 case 4: 
 $period=0;
 label=5;break;
 case 5: 
 var $22=$period;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }
}
function _extras_get_linear_bend($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $linear_bend;
 $1=$ctx;
 $2=$xc;
 var $3=$2;
 var $4=(($3+356)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=$2;
 var $10=(($9+356)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==133303461;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$1;
 var $18=$2;
 var $19=_med_linear_bend($17,$18);
 $linear_bend=$19;
 label=9;break;
 case 4: 
 var $21=$2;
 var $22=(($21+356)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=$2;
 var $28=(($27+356)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==68929562;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$1;
 var $36=$2;
 var $37=_hmn_linear_bend($35,$36);
 $linear_bend=$37;
 label=8;break;
 case 7: 
 $linear_bend=0;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $41=$linear_bend;
 STACKTOP=sp;return $41;
  default: assert(0, "bad label: " + label);
 }
}
function _filter_setup($srate,$cutoff,$res,$a0,$b0,$b1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $fc;
 var $fs;
 var $fg;
 var $fb0;
 var $fb1;
 var $d2;
 var $d;
 var $e;
 $1=$srate;
 $2=$cutoff;
 $3=$res;
 $4=$a0;
 $5=$b0;
 $6=$b1;
 var $7=$1;
 var $8=($7|0);
 $fs=$8;
 label=2;break;
 case 2: 
 var $10=$2;
 var $11=($10|0)<0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 $2=0;
 label=7;break;
 case 4: 
 var $14=$2;
 var $15=($14|0)>255;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 $2=255;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $21=$3;
 var $22=($21|0)<0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 $3=0;
 label=14;break;
 case 11: 
 var $25=$3;
 var $26=($25|0)>255;
 if($26){label=12;break;}else{label=13;break;}
 case 12: 
 $3=255;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $31=$2;
 var $32=((8264+($31<<2))|0);
 var $33=HEAPF32[(($32)>>2)];
 $fc=$33;
 var $34=$fs;
 var $35=$34;
 var $36=((6.28318530717958))/($35);
 var $37=$fc;
 var $38=$37;
 var $39=($38)*($36);
 var $40=$39;
 $fc=$40;
 var $41=$3;
 var $42=$41>>1;
 var $43=((9624+($42<<2))|0);
 var $44=HEAPF32[(($43)>>2)];
 $d2=$44;
 var $45=$d2;
 var $46=$45;
 var $47=(1)-($46);
 var $48=$fc;
 var $49=$48;
 var $50=($47)*($49);
 var $51=$50;
 $d=$51;
 var $52=$d;
 var $53=$52;
 var $54=$53>2;
 if($54){label=16;break;}else{label=17;break;}
 case 16: 
 $d=2;
 label=17;break;
 case 17: 
 var $57=$fc;
 var $58=$fc;
 var $59=($57)*($58);
 var $60=$59;
 var $61=(1)/($60);
 var $62=$61;
 $e=$62;
 var $63=$d2;
 var $64=$d;
 var $65=($63)-($64);
 var $66=$fc;
 var $67=($65)/($66);
 var $68=$e;
 var $69=($67)+($68);
 $d=$69;
 var $70=$d;
 var $71=($70)+(1);
 var $72=$71;
 var $73=(1)/($72);
 var $74=$73;
 $fg=$74;
 var $75=$d;
 var $76=$e;
 var $77=($75)+($76);
 var $78=$d;
 var $79=($78)+(1);
 var $80=($77)/($79);
 $fb0=$80;
 var $81=$e;
 var $82=((-.0))-($81);
 var $83=$d;
 var $84=($83)+(1);
 var $85=($82)/($84);
 $fb1=$85;
 var $86=$fg;
 var $87=($86)*(65536);
 var $88=(($87)&-1);
 var $89=$4;
 HEAP32[(($89)>>2)]=$88;
 var $90=$fb0;
 var $91=($90)*(65536);
 var $92=(($91)&-1);
 var $93=$5;
 HEAP32[(($93)>>2)]=$92;
 var $94=$fb1;
 var $95=($94)*(65536);
 var $96=(($95)&-1);
 var $97=$6;
 HEAP32[(($97)>>2)]=$96;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _YM3812UpdateOne($OPL,$bk,$len,$vl,$vr,$st){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $data;
 var $amsCnt;
 var $vibCnt;
 var $rythm;
 var $CH;
 var $R_CH;
 var $ST;
 $1=$OPL;
 $2=$bk;
 $3=$len;
 $4=$vl;
 $5=$vr;
 $6=$st;
 var $7=$1;
 var $8=(($7+4792)|0);
 var $9=HEAP32[(($8)>>2)];
 $amsCnt=$9;
 var $10=$1;
 var $11=(($10+4800)|0);
 var $12=HEAP32[(($11)>>2)];
 $vibCnt=$12;
 var $13=$1;
 var $14=(($13+60)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=$16&32;
 var $18=(($17)&255);
 $rythm=$18;
 var $19=$1;
 var $20=(($19+4836)|0);
 $ST=$20;
 var $21=$1;
 var $22=$21;
 var $23=$ST;
 var $24=(($23+32792)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($22|0)!=($25|0);
 if($26){label=2;break;}else{label=3;break;}
 case 2: 
 var $28=$1;
 var $29=$28;
 var $30=$ST;
 var $31=(($30+32792)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$1;
 var $33=(($32+52)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$ST;
 var $36=(($35+32796)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$ST;
 var $38=(($37+32796)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+1800)|0);
 var $41=$ST;
 var $42=(($41+32800)|0);
 HEAP32[(($42)>>2)]=$40;
 var $43=$ST;
 var $44=(($43+32796)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+1400)|0);
 var $47=(($46)|0);
 var $48=(($47)|0);
 var $49=$ST;
 var $50=(($49+32804)|0);
 HEAP32[(($50)>>2)]=$48;
 var $51=$ST;
 var $52=(($51+32796)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+1400)|0);
 var $55=(($54)|0);
 var $56=(($55+80)|0);
 var $57=$ST;
 var $58=(($57+32808)|0);
 HEAP32[(($58)>>2)]=$56;
 var $59=$ST;
 var $60=(($59+32796)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+1600)|0);
 var $63=(($62)|0);
 var $64=(($63)|0);
 var $65=$ST;
 var $66=(($65+32812)|0);
 HEAP32[(($66)>>2)]=$64;
 var $67=$ST;
 var $68=(($67+32796)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+1600)|0);
 var $71=(($70)|0);
 var $72=(($71+80)|0);
 var $73=$ST;
 var $74=(($73+32816)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=$1;
 var $76=(($75+4796)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=$ST;
 var $79=(($78+32840)|0);
 HEAP32[(($79)>>2)]=$77;
 var $80=$1;
 var $81=(($80+4804)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$ST;
 var $84=(($83+32844)|0);
 HEAP32[(($84)>>2)]=$82;
 var $85=$1;
 var $86=(($85+4784)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$ST;
 var $89=(($88+32832)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=$1;
 var $91=(($90+4788)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$ST;
 var $94=(($93+32836)|0);
 HEAP32[(($94)>>2)]=$92;
 label=3;break;
 case 3: 
 var $96=$rythm;
 var $97=($96&255);
 var $98=($97|0)!=0;
 if($98){label=4;break;}else{label=5;break;}
 case 4: 
 var $100=$ST;
 var $101=(($100+32796)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+1200)|0);
 var $109=$103;label=6;break;
 case 5: 
 var $105=$ST;
 var $106=(($105+32800)|0);
 var $107=HEAP32[(($106)>>2)];
 var $109=$107;label=6;break;
 case 6: 
 var $109;
 $R_CH=$109;
 label=7;break;
 case 7: 
 var $111=$3;
 var $112=((($111)-(1))|0);
 $3=$112;
 var $113=($111|0)!=0;
 if($113){label=8;break;}else{label=15;break;}
 case 8: 
 var $115=$ST;
 var $116=(($115+32840)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$amsCnt;
 var $119=((($118)+($117))|0);
 $amsCnt=$119;
 var $120=$119>>>23;
 var $121=$ST;
 var $122=(($121+32832)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+($120<<2))|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$ST;
 var $127=(($126+32824)|0);
 HEAP32[(($127)>>2)]=$125;
 var $128=$ST;
 var $129=(($128+32844)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$vibCnt;
 var $132=((($131)+($130))|0);
 $vibCnt=$132;
 var $133=$132>>>23;
 var $134=$ST;
 var $135=(($134+32836)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+($133<<2))|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$ST;
 var $140=(($139+32828)|0);
 HEAP32[(($140)>>2)]=$138;
 var $141=$ST;
 var $142=(($141+32820)|0);
 var $143=(($142)|0);
 HEAP32[(($143)>>2)]=0;
 var $144=$ST;
 var $145=(($144+32796)|0);
 var $146=HEAP32[(($145)>>2)];
 $CH=$146;
 label=9;break;
 case 9: 
 var $148=$CH;
 var $149=$R_CH;
 var $150=($148>>>0)<($149>>>0);
 if($150){label=10;break;}else{label=12;break;}
 case 10: 
 var $152=$CH;
 var $153=$ST;
 _OPL_CALC_CH($152,$153);
 label=11;break;
 case 11: 
 var $155=$CH;
 var $156=(($155+200)|0);
 $CH=$156;
 label=9;break;
 case 12: 
 var $158=$ST;
 var $159=(($158+32820)|0);
 var $160=(($159)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=_Limit($161,268427264,-268435456);
 var $163=$162>>13;
 $data=$163;
 var $164=$6;
 var $165=($164|0)!=0;
 if($165){label=13;break;}else{label=14;break;}
 case 13: 
 var $167=$data;
 var $168=$5;
 var $169=(Math_imul($167,$168)|0);
 var $170=$2;
 var $171=(($170+4)|0);
 $2=$171;
 var $172=HEAP32[(($170)>>2)];
 var $173=((($172)+($169))|0);
 HEAP32[(($170)>>2)]=$173;
 label=14;break;
 case 14: 
 var $175=$data;
 var $176=$4;
 var $177=(Math_imul($175,$176)|0);
 var $178=$2;
 var $179=(($178+4)|0);
 $2=$179;
 var $180=HEAP32[(($178)>>2)];
 var $181=((($180)+($177))|0);
 HEAP32[(($178)>>2)]=$181;
 label=7;break;
 case 15: 
 var $183=$amsCnt;
 var $184=$1;
 var $185=(($184+4792)|0);
 HEAP32[(($185)>>2)]=$183;
 var $186=$vibCnt;
 var $187=$1;
 var $188=(($187+4800)|0);
 HEAP32[(($188)>>2)]=$186;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPL_CALC_CH($CH,$ST){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $env_out;
 var $SLOT;
 var $feedback1;
 $1=$CH;
 $2=$ST;
 var $3=$2;
 var $4=(($3+32848)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6)|0);
 $SLOT=$7;
 var $8=$SLOT;
 var $9=$2;
 var $10=_OPL_CALC_SLOT($8,$9);
 $env_out=$10;
 var $11=$env_out;
 var $12=($11>>>0)<4095;
 if($12){label=2;break;}else{label=9;break;}
 case 2: 
 var $14=$SLOT;
 var $15=(($14+73)|0);
 var $16=HEAP8[($15)];
 var $17=(($16<<24)>>24)!=0;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 var $19=$SLOT;
 var $20=(($19+40)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$2;
 var $23=(($22+32828)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(Math_imul($21,$24)|0);
 var $26=(((($25>>>0))/(256))&-1);
 var $27=$SLOT;
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)+($26))|0);
 HEAP32[(($28)>>2)]=$30;
 label=5;break;
 case 4: 
 var $32=$SLOT;
 var $33=(($32+40)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$SLOT;
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($37)+($34))|0);
 HEAP32[(($36)>>2)]=$38;
 label=5;break;
 case 5: 
 var $40=$1;
 var $41=(($40+161)|0);
 var $42=HEAP8[($41)];
 var $43=(($42<<24)>>24)!=0;
 if($43){label=6;break;}else{label=7;break;}
 case 6: 
 var $45=$1;
 var $46=(($45+172)|0);
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$1;
 var $50=(($49+172)|0);
 var $51=(($50+4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=((($48)+($52))|0);
 var $54=$1;
 var $55=(($54+161)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=$53>>($57|0);
 $feedback1=$58;
 var $59=$1;
 var $60=(($59+172)|0);
 var $61=(($60)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$1;
 var $64=(($63+172)|0);
 var $65=(($64+4)|0);
 HEAP32[(($65)>>2)]=$62;
 var $66=$env_out;
 var $67=$SLOT;
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$feedback1;
 var $71=((($69)+($70))|0);
 var $72=(((($71>>>0))/(8192))&-1);
 var $73=$72&2047;
 var $74=$SLOT;
 var $75=(($74+76)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+($73<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+($66<<2))|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$1;
 var $82=(($81+172)|0);
 var $83=(($82)|0);
 HEAP32[(($83)>>2)]=$80;
 var $84=$1;
 var $85=(($84+164)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=HEAP32[(($86)>>2)];
 var $88=((($87)+($80))|0);
 HEAP32[(($86)>>2)]=$88;
 label=8;break;
 case 7: 
 var $90=$env_out;
 var $91=$SLOT;
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93)|0);
 var $95=(((($94>>>0))/(8192))&-1);
 var $96=$95&2047;
 var $97=$SLOT;
 var $98=(($97+76)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+($96<<2))|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+($90<<2))|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=$1;
 var $105=(($104+164)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=HEAP32[(($106)>>2)];
 var $108=((($107)+($103))|0);
 HEAP32[(($106)>>2)]=$108;
 label=8;break;
 case 8: 
 label=10;break;
 case 9: 
 var $111=$1;
 var $112=(($111+172)|0);
 var $113=(($112)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$1;
 var $116=(($115+172)|0);
 var $117=(($116+4)|0);
 HEAP32[(($117)>>2)]=$114;
 var $118=$1;
 var $119=(($118+172)|0);
 var $120=(($119)|0);
 HEAP32[(($120)>>2)]=0;
 label=10;break;
 case 10: 
 var $122=$1;
 var $123=(($122)|0);
 var $124=(($123+80)|0);
 $SLOT=$124;
 var $125=$SLOT;
 var $126=$2;
 var $127=_OPL_CALC_SLOT($125,$126);
 $env_out=$127;
 var $128=$env_out;
 var $129=($128>>>0)<4095;
 if($129){label=11;break;}else{label=15;break;}
 case 11: 
 var $131=$SLOT;
 var $132=(($131+73)|0);
 var $133=HEAP8[($132)];
 var $134=(($133<<24)>>24)!=0;
 if($134){label=12;break;}else{label=13;break;}
 case 12: 
 var $136=$SLOT;
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$2;
 var $140=(($139+32828)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(Math_imul($138,$141)|0);
 var $143=(((($142>>>0))/(256))&-1);
 var $144=$SLOT;
 var $145=(($144+36)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=((($146)+($143))|0);
 HEAP32[(($145)>>2)]=$147;
 label=14;break;
 case 13: 
 var $149=$SLOT;
 var $150=(($149+40)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$SLOT;
 var $153=(($152+36)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=((($154)+($151))|0);
 HEAP32[(($153)>>2)]=$155;
 label=14;break;
 case 14: 
 var $157=$env_out;
 var $158=$SLOT;
 var $159=(($158+36)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=$2;
 var $162=(($161+32848)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=((($160)+($163))|0);
 var $165=(((($164>>>0))/(8192))&-1);
 var $166=$165&2047;
 var $167=$SLOT;
 var $168=(($167+76)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+($166<<2))|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+($157<<2))|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$2;
 var $175=(($174+32820)|0);
 var $176=(($175)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=((($177)+($173))|0);
 HEAP32[(($176)>>2)]=$178;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _Limit($val,$max,$min){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$val;
 $2=$max;
 $3=$min;
 var $4=$1;
 var $5=$2;
 var $6=($4|0)>($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 $1=$8;
 label=6;break;
 case 3: 
 var $10=$1;
 var $11=$3;
 var $12=($10|0)<($11|0);
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=$3;
 $1=$14;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $17=$1;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLResetChip($OPL){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ST;
 var $c;
 var $s;
 var $i;
 var $CH;
 $1=$OPL;
 var $2=$1;
 var $3=(($2+4836)|0);
 $ST=$3;
 var $4=$1;
 var $5=(($4+36)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$1;
 _OPLWriteReg($6,1,0);
 var $7=$1;
 _OPLWriteReg($7,2,0);
 var $8=$1;
 _OPLWriteReg($8,3,0);
 var $9=$1;
 _OPLWriteReg($9,4,0);
 $i=255;
 label=2;break;
 case 2: 
 var $11=$i;
 var $12=($11|0)>=32;
 if($12){label=3;break;}else{label=5;break;}
 case 3: 
 var $14=$1;
 var $15=$i;
 _OPLWriteReg($14,$15,0);
 label=4;break;
 case 4: 
 var $17=$i;
 var $18=((($17)-(1))|0);
 $i=$18;
 label=2;break;
 case 5: 
 $c=0;
 label=6;break;
 case 6: 
 var $21=$c;
 var $22=$1;
 var $23=(($22+56)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($21|0)<($24|0);
 if($25){label=7;break;}else{label=13;break;}
 case 7: 
 var $27=$c;
 var $28=$1;
 var $29=(($28+52)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+((($27)*(200))&-1))|0);
 $CH=$31;
 $s=0;
 label=8;break;
 case 8: 
 var $33=$s;
 var $34=($33|0)<2;
 if($34){label=9;break;}else{label=11;break;}
 case 9: 
 var $36=$ST;
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38)|0);
 var $40=$s;
 var $41=$CH;
 var $42=(($41)|0);
 var $43=(($42+((($40)*(80))&-1))|0);
 var $44=(($43+76)|0);
 HEAP32[(($44)>>2)]=$39;
 var $45=$s;
 var $46=$CH;
 var $47=(($46)|0);
 var $48=(($47+((($45)*(80))&-1))|0);
 var $49=(($48+48)|0);
 HEAP32[(($49)>>2)]=536870912;
 var $50=$s;
 var $51=$CH;
 var $52=(($51)|0);
 var $53=(($52+((($50)*(80))&-1))|0);
 var $54=(($53+52)|0);
 HEAP32[(($54)>>2)]=536870913;
 var $55=$s;
 var $56=$CH;
 var $57=(($56)|0);
 var $58=(($57+((($55)*(80))&-1))|0);
 var $59=(($58+56)|0);
 HEAP32[(($59)>>2)]=0;
 label=10;break;
 case 10: 
 var $61=$s;
 var $62=((($61)+(1))|0);
 $s=$62;
 label=8;break;
 case 11: 
 label=12;break;
 case 12: 
 var $65=$c;
 var $66=((($65)+(1))|0);
 $c=$66;
 label=6;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLWriteReg($OPL,$r,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $CH;
 var $slot;
 var $block_fnum;
 var $ST;
 var $c;
 var $keyon;
 var $blockRv;
 var $fnum;
 var $feedback;
 $1=$OPL;
 $2=$r;
 $3=$v;
 var $4=$1;
 var $5=(($4+4836)|0);
 $ST=$5;
 var $6=$2;
 var $7=$6&224;
 switch(($7|0)){case 32:{ label=16;break;}case 64:{ label=19;break;}case 0:{ label=2;break;}case 96:{ label=22;break;}case 128:{ label=25;break;}case 160:{ label=28;break;}case 192:{ label=46;break;}case 224:{ label=52;break;}default:{label=57;break;}}break;
 case 2: 
 var $9=$2;
 var $10=$9&31;
 if(($10|0)==2){ label=12;break;}else if(($10|0)==3){ label=13;break;}else if(($10|0)==4){ label=14;break;}else if(($10|0)==1){ label=3;break;}else{label=15;break;}
 case 3: 
 var $12=$1;
 var $13=(($12)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$15&1;
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=11;break;}
 case 4: 
 var $19=$3;
 var $20=$19&32;
 var $21=(($20)&255);
 var $22=$1;
 var $23=(($22+4808)|0);
 HEAP8[($23)]=$21;
 var $24=$1;
 var $25=(($24+4808)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24)!=0;
 if($27){label=10;break;}else{label=5;break;}
 case 5: 
 $c=0;
 label=6;break;
 case 6: 
 var $30=$c;
 var $31=$1;
 var $32=(($31+56)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($30|0)<($33|0);
 if($34){label=7;break;}else{label=9;break;}
 case 7: 
 var $36=$ST;
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38)|0);
 var $40=$c;
 var $41=$1;
 var $42=(($41+52)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+((($40)*(200))&-1))|0);
 var $45=(($44)|0);
 var $46=(($45)|0);
 var $47=(($46+76)|0);
 HEAP32[(($47)>>2)]=$39;
 var $48=$ST;
 var $49=(($48+4)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50)|0);
 var $52=$c;
 var $53=$1;
 var $54=(($53+52)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+((($52)*(200))&-1))|0);
 var $57=(($56)|0);
 var $58=(($57+80)|0);
 var $59=(($58+76)|0);
 HEAP32[(($59)>>2)]=$51;
 label=8;break;
 case 8: 
 var $61=$c;
 var $62=((($61)+(1))|0);
 $c=$62;
 label=6;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=57;break;
 case 12: 
 var $67=$3;
 var $68=(((256)-($67))|0);
 var $69=($68<<2);
 var $70=$1;
 var $71=(($70+40)|0);
 var $72=(($71)|0);
 HEAP32[(($72)>>2)]=$69;
 label=15;break;
 case 13: 
 var $74=$3;
 var $75=(((256)-($74))|0);
 var $76=($75<<4);
 var $77=$1;
 var $78=(($77+40)|0);
 var $79=(($78+4)|0);
 HEAP32[(($79)>>2)]=$76;
 label=57;break;
 case 14: 
 label=57;break;
 case 15: 
 label=57;break;
 case 16: 
 var $83=$2;
 var $84=$83&31;
 var $85=((1920+($84<<2))|0);
 var $86=HEAP32[(($85)>>2)];
 $slot=$86;
 var $87=$slot;
 var $88=($87|0)==-1;
 if($88){label=17;break;}else{label=18;break;}
 case 17: 
 label=57;break;
 case 18: 
 var $91=$1;
 var $92=$slot;
 var $93=$3;
 _set_mul($91,$92,$93);
 label=57;break;
 case 19: 
 var $95=$2;
 var $96=$95&31;
 var $97=((1920+($96<<2))|0);
 var $98=HEAP32[(($97)>>2)];
 $slot=$98;
 var $99=$slot;
 var $100=($99|0)==-1;
 if($100){label=20;break;}else{label=21;break;}
 case 20: 
 label=57;break;
 case 21: 
 var $103=$1;
 var $104=$slot;
 var $105=$3;
 _set_ksl_tl($103,$104,$105);
 label=57;break;
 case 22: 
 var $107=$2;
 var $108=$107&31;
 var $109=((1920+($108<<2))|0);
 var $110=HEAP32[(($109)>>2)];
 $slot=$110;
 var $111=$slot;
 var $112=($111|0)==-1;
 if($112){label=23;break;}else{label=24;break;}
 case 23: 
 label=57;break;
 case 24: 
 var $115=$1;
 var $116=$slot;
 var $117=$3;
 _set_ar_dr($115,$116,$117);
 label=57;break;
 case 25: 
 var $119=$2;
 var $120=$119&31;
 var $121=((1920+($120<<2))|0);
 var $122=HEAP32[(($121)>>2)];
 $slot=$122;
 var $123=$slot;
 var $124=($123|0)==-1;
 if($124){label=26;break;}else{label=27;break;}
 case 26: 
 label=57;break;
 case 27: 
 var $127=$1;
 var $128=$slot;
 var $129=$3;
 _set_sl_rr($127,$128,$129);
 label=57;break;
 case 28: 
 var $131=$2;
 if(($131|0)==189){ label=29;break;}else{label=30;break;}
 case 29: 
 var $133=$3;
 var $134=$133&128;
 var $135=($134|0)!=0;
 var $136=($135?512:0);
 var $137=$ST;
 var $138=(($137+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139+($136<<2))|0);
 var $141=$1;
 var $142=(($141+4784)|0);
 HEAP32[(($142)>>2)]=$140;
 var $143=$3;
 var $144=$143&64;
 var $145=($144|0)!=0;
 var $146=($145?512:0);
 var $147=$ST;
 var $148=(($147+12)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+($146<<2))|0);
 var $151=$1;
 var $152=(($151+4788)|0);
 HEAP32[(($152)>>2)]=$150;
 var $153=$3;
 var $154=$153&63;
 var $155=(($154)&255);
 var $156=$1;
 var $157=(($156+60)|0);
 HEAP8[($157)]=$155;
 label=57;break;
 case 30: 
 var $159=$2;
 var $160=$159&15;
 var $161=($160|0)>8;
 if($161){label=31;break;}else{label=32;break;}
 case 31: 
 label=57;break;
 case 32: 
 var $164=$2;
 var $165=$164&15;
 var $166=$1;
 var $167=(($166+52)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+((($165)*(200))&-1))|0);
 $CH=$169;
 var $170=$2;
 var $171=$170&16;
 var $172=($171|0)!=0;
 if($172){label=34;break;}else{label=33;break;}
 case 33: 
 var $174=$CH;
 var $175=(($174+180)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=$176&7936;
 var $178=$3;
 var $179=$177|$178;
 $block_fnum=$179;
 label=40;break;
 case 34: 
 var $181=$3;
 var $182=$181>>5;
 var $183=$182&1;
 $keyon=$183;
 var $184=$3;
 var $185=$184&31;
 var $186=$185<<8;
 var $187=$CH;
 var $188=(($187+180)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$189&255;
 var $191=$186|$190;
 $block_fnum=$191;
 var $192=$CH;
 var $193=(($192+196)|0);
 var $194=HEAP8[($193)];
 var $195=($194&255);
 var $196=$keyon;
 var $197=($195|0)!=($196|0);
 if($197){label=35;break;}else{label=39;break;}
 case 35: 
 var $199=$keyon;
 var $200=(($199)&255);
 var $201=$CH;
 var $202=(($201+196)|0);
 HEAP8[($202)]=$200;
 var $203=(($200<<24)>>24)!=0;
 if($203){label=36;break;}else{label=37;break;}
 case 36: 
 var $205=$CH;
 var $206=(($205+172)|0);
 var $207=(($206+4)|0);
 HEAP32[(($207)>>2)]=0;
 var $208=$CH;
 var $209=(($208+172)|0);
 var $210=(($209)|0);
 HEAP32[(($210)>>2)]=0;
 var $211=$CH;
 var $212=(($211)|0);
 var $213=(($212)|0);
 _OPL_KEYON($213);
 var $214=$CH;
 var $215=(($214)|0);
 var $216=(($215+80)|0);
 _OPL_KEYON($216);
 label=38;break;
 case 37: 
 var $218=$CH;
 var $219=(($218)|0);
 var $220=(($219)|0);
 _OPL_KEYOFF($220);
 var $221=$CH;
 var $222=(($221)|0);
 var $223=(($222+80)|0);
 _OPL_KEYOFF($223);
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $227=$CH;
 var $228=(($227+180)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=$block_fnum;
 var $231=($229|0)!=($230|0);
 if($231){label=41;break;}else{label=45;break;}
 case 41: 
 var $233=$block_fnum;
 var $234=$233>>10;
 var $235=(((7)-($234))|0);
 $blockRv=$235;
 var $236=$block_fnum;
 var $237=$236&1023;
 $fnum=$237;
 var $238=$block_fnum;
 var $239=$CH;
 var $240=(($239+180)|0);
 HEAP32[(($240)>>2)]=$238;
 var $241=$block_fnum;
 var $242=$241>>6;
 var $243=((28184+($242<<2))|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$CH;
 var $246=(($245+192)|0);
 HEAP32[(($246)>>2)]=$244;
 var $247=$fnum;
 var $248=$1;
 var $249=(($248+688)|0);
 var $250=(($249+($247<<2))|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=$blockRv;
 var $253=$251>>>($252>>>0);
 var $254=$CH;
 var $255=(($254+188)|0);
 HEAP32[(($255)>>2)]=$253;
 var $256=$CH;
 var $257=(($256+180)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=$258>>>9;
 var $260=(($259)&255);
 var $261=$CH;
 var $262=(($261+184)|0);
 HEAP8[($262)]=$260;
 var $263=$1;
 var $264=(($263+36)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=$265&64;
 var $267=($266|0)!=0;
 if($267){label=42;break;}else{label=44;break;}
 case 42: 
 var $269=$CH;
 var $270=(($269+180)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=$271&256;
 var $273=($272|0)!=0;
 if($273){label=43;break;}else{label=44;break;}
 case 43: 
 var $275=$CH;
 var $276=(($275+184)|0);
 var $277=HEAP8[($276)];
 var $278=($277&255);
 var $279=$278|1;
 var $280=(($279)&255);
 HEAP8[($276)]=$280;
 label=44;break;
 case 44: 
 var $282=$CH;
 var $283=$CH;
 var $284=(($283)|0);
 var $285=(($284)|0);
 _CALC_FCSLOT($282,$285);
 var $286=$CH;
 var $287=$CH;
 var $288=(($287)|0);
 var $289=(($288+80)|0);
 _CALC_FCSLOT($286,$289);
 label=45;break;
 case 45: 
 label=57;break;
 case 46: 
 var $292=$2;
 var $293=$292&15;
 var $294=($293|0)>8;
 if($294){label=47;break;}else{label=48;break;}
 case 47: 
 label=57;break;
 case 48: 
 var $297=$2;
 var $298=$297&15;
 var $299=$1;
 var $300=(($299+52)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($301+((($298)*(200))&-1))|0);
 $CH=$302;
 var $303=$3;
 var $304=$303>>1;
 var $305=$304&7;
 $feedback=$305;
 var $306=$feedback;
 var $307=($306|0)!=0;
 if($307){label=49;break;}else{label=50;break;}
 case 49: 
 var $309=$feedback;
 var $310=(((9)-($309))|0);
 var $313=$310;label=51;break;
 case 50: 
 var $313=0;label=51;break;
 case 51: 
 var $313;
 var $314=(($313)&255);
 var $315=$CH;
 var $316=(($315+161)|0);
 HEAP8[($316)]=$314;
 var $317=$3;
 var $318=$317&1;
 var $319=(($318)&255);
 var $320=$CH;
 var $321=(($320+160)|0);
 HEAP8[($321)]=$319;
 var $322=$CH;
 var $323=$ST;
 _set_algorythm($322,$323);
 label=57;break;
 case 52: 
 var $325=$2;
 var $326=$325&31;
 var $327=((1920+($326<<2))|0);
 var $328=HEAP32[(($327)>>2)];
 $slot=$328;
 var $329=$slot;
 var $330=($329|0)==-1;
 if($330){label=53;break;}else{label=54;break;}
 case 53: 
 label=57;break;
 case 54: 
 var $333=$slot;
 var $334=(((($333|0))/(2))&-1);
 var $335=$1;
 var $336=(($335+52)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=(($337+((($334)*(200))&-1))|0);
 $CH=$338;
 var $339=$1;
 var $340=(($339+4808)|0);
 var $341=HEAP8[($340)];
 var $342=(($341<<24)>>24)!=0;
 if($342){label=55;break;}else{label=56;break;}
 case 55: 
 var $344=$3;
 var $345=$344&3;
 var $346=($345<<11);
 var $347=$ST;
 var $348=(($347+4)|0);
 var $349=HEAP32[(($348)>>2)];
 var $350=(($349+($346<<2))|0);
 var $351=$slot;
 var $352=$351&1;
 var $353=$CH;
 var $354=(($353)|0);
 var $355=(($354+((($352)*(80))&-1))|0);
 var $356=(($355+76)|0);
 HEAP32[(($356)>>2)]=$350;
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLCreate($type,$clock,$rate){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ptr;
 var $OPL;
 var $state_size;
 var $max_ch;
 $2=$type;
 $3=$clock;
 $4=$rate;
 $max_ch=9;
 $state_size=37688;
 var $5=$max_ch;
 var $6=((($5)*(200))&-1);
 var $7=$state_size;
 var $8=((($7)+($6))|0);
 $state_size=$8;
 var $9=$state_size;
 var $10=_malloc($9);
 $ptr=$10;
 var $11=$ptr;
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $15=$ptr;
 var $16=$state_size;
 _memset($15, 0, $16)|0;
 var $17=$ptr;
 var $18=$17;
 $OPL=$18;
 var $19=$ptr;
 var $20=(($19+37688)|0);
 $ptr=$20;
 var $21=$OPL;
 var $22=(($21+4836)|0);
 var $23=(($22+32788)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=$OPL;
 var $25=(($24+4836)|0);
 var $26=(($25+32792)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=$OPL;
 var $28=(($27+4836)|0);
 var $29=_OPL_LockTable($28);
 var $30=($29|0)==-1;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 var $33=$ptr;
 var $34=$33;
 var $35=$OPL;
 var $36=(($35+52)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$max_ch;
 var $38=((($37)*(200))&-1);
 var $39=$ptr;
 var $40=(($39+$38)|0);
 $ptr=$40;
 var $41=$2;
 var $42=(($41)&255);
 var $43=$OPL;
 var $44=(($43)|0);
 HEAP8[($44)]=$42;
 var $45=$3;
 var $46=$OPL;
 var $47=(($46+4)|0);
 HEAP32[(($47)>>2)]=$45;
 var $48=$4;
 var $49=$OPL;
 var $50=(($49+8)|0);
 HEAP32[(($50)>>2)]=$48;
 var $51=$max_ch;
 var $52=$OPL;
 var $53=(($52+56)|0);
 HEAP32[(($53)>>2)]=$51;
 var $54=$OPL;
 _OPL_initalize($54);
 var $55=$OPL;
 _OPLResetChip($55);
 var $56=$OPL;
 $1=$56;
 label=6;break;
 case 6: 
 var $58=$1;
 STACKTOP=sp;return $58;
  default: assert(0, "bad label: " + label);
 }
}
function _OPL_LockTable($ST){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$ST;
 var $3=$2;
 var $4=(($3+32788)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)+(1))|0);
 HEAP32[(($4)>>2)]=$6;
 var $7=$2;
 var $8=(($7+32788)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)>1;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=(($13+32792)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$2;
 var $16=_OPLOpenTable($15);
 var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=4;break;}
 case 4: 
 var $19=$2;
 var $20=(($19+32788)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=((($21)-(1))|0);
 HEAP32[(($20)>>2)]=$22;
 $1=-1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _OPL_initalize($OPL){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $fn;
 $1=$OPL;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0);
 var $11=$1;
 var $12=(($11+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0);
 var $15=($10)/($14);
 var $16=($15)/(72);
 var $19=$16;label=4;break;
 case 3: 
 var $19=0;label=4;break;
 case 4: 
 var $19;
 var $20=$1;
 var $21=(($20+16)|0);
 HEAPF64[(($21)>>3)]=$19;
 var $22=$1;
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0);
 var $26=($25)/(72);
 var $27=(1)/($26);
 var $28=$1;
 var $29=(($28+24)|0);
 HEAPF64[(($29)>>3)]=$27;
 var $30=$1;
 _init_timetables($30,141280,1956000);
 $fn=0;
 label=5;break;
 case 5: 
 var $32=$fn;
 var $33=($32|0)<1024;
 if($33){label=6;break;}else{label=8;break;}
 case 6: 
 var $35=$1;
 var $36=(($35+16)|0);
 var $37=HEAPF64[(($36)>>3)];
 var $38=$fn;
 var $39=($38|0);
 var $40=($37)*($39);
 var $41=($40)*(16);
 var $42=($41)*(128);
 var $43=($42)/(2);
 var $44=($43>=0 ? Math_floor($43) : Math_ceil($43));
 var $45=$fn;
 var $46=$1;
 var $47=(($46+688)|0);
 var $48=(($47+($45<<2))|0);
 HEAP32[(($48)>>2)]=$44;
 label=7;break;
 case 7: 
 var $50=$fn;
 var $51=((($50)+(1))|0);
 $fn=$51;
 label=5;break;
 case 8: 
 var $53=$1;
 var $54=(($53+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)!=0;
 if($56){label=9;break;}else{label=10;break;}
 case 9: 
 var $58=$1;
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0);
 var $62=(4294967296)/($61);
 var $63=($62)*((3.7));
 var $64=$1;
 var $65=(($64+4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0);
 var $68=($67)/(3600000);
 var $69=($63)*($68);
 var $72=$69;label=11;break;
 case 10: 
 var $72=0;label=11;break;
 case 11: 
 var $72;
 var $73=(($72)&-1);
 var $74=$1;
 var $75=(($74+4796)|0);
 HEAP32[(($75)>>2)]=$73;
 var $76=$1;
 var $77=(($76+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($78|0)!=0;
 if($79){label=12;break;}else{label=13;break;}
 case 12: 
 var $81=$1;
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($83|0);
 var $85=(4294967296)/($84);
 var $86=($85)*((6.4));
 var $87=$1;
 var $88=(($87+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0);
 var $91=($90)/(3600000);
 var $92=($86)*($91);
 var $95=$92;label=14;break;
 case 13: 
 var $95=0;label=14;break;
 case 14: 
 var $95;
 var $96=(($95)&-1);
 var $97=$1;
 var $98=(($97+4804)|0);
 HEAP32[(($98)>>2)]=$96;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLDestroy($OPL){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$OPL;
 var $2=$1;
 var $3=(($2+4836)|0);
 _OPL_UnLockTable($3);
 var $4=$1;
 var $5=$4;
 _free($5);
 STACKTOP=sp;return;
}
function _OPL_UnLockTable($ST){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$ST;
 var $2=$1;
 var $3=(($2+32788)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+32788)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)-(1))|0);
 HEAP32[(($8)>>2)]=$10;
 label=3;break;
 case 3: 
 var $12=$1;
 var $13=(($12+32788)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)!=0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $18=$1;
 var $19=(($18+32792)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=$1;
 _OPLCloseTable($20);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLWrite($OPL,$a,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$OPL;
 $2=$a;
 $3=$v;
 var $4=$2;
 var $5=$4&1;
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=$3;
 var $9=$8&255;
 var $10=(($9)&255);
 var $11=$1;
 var $12=(($11+32)|0);
 HEAP8[($12)]=$10;
 label=6;break;
 case 3: 
 var $14=$1;
 var $15=(($14+4828)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$1;
 var $20=(($19+4828)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$1;
 var $23=(($22+4832)|0);
 var $24=HEAP32[(($23)>>2)];
 FUNCTION_TABLE[$21]($24,0);
 label=5;break;
 case 5: 
 var $26=$1;
 var $27=$1;
 var $28=(($27+32)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$3;
 _OPLWriteReg($26,$30,$31);
 label=6;break;
 case 6: 
 var $33=$1;
 var $34=(($33+33)|0);
 var $35=HEAP8[($34)];
 var $36=($35&255);
 var $37=$36>>7;
 STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLRead($OPL,$a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$OPL;
 $3=$a;
 var $4=$3;
 var $5=$4&1;
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+33)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$2;
 var $13=(($12+34)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$15|128;
 var $17=$11&$16;
 var $18=(($17)&255);
 $1=$18;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $21=$1;
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLCloseTable($ST){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$ST;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 _free($5);
 var $6=$1;
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 _free($9);
 var $10=$1;
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 _free($13);
 var $14=$1;
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 _free($17);
 STACKTOP=sp;return;
}
function _init_timetables($OPL,$ARRATE,$DRRATE){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $rate;
 $1=$OPL;
 $2=$ARRATE;
 $3=$DRRATE;
 $i=0;
 label=2;break;
 case 2: 
 var $5=$i;
 var $6=($5|0)<4;
 if($6){label=3;break;}else{label=5;break;}
 case 3: 
 var $8=$i;
 var $9=$1;
 var $10=(($9+388)|0);
 var $11=(($10+($8<<2))|0);
 HEAP32[(($11)>>2)]=0;
 var $12=$i;
 var $13=$1;
 var $14=(($13+88)|0);
 var $15=(($14+($12<<2))|0);
 HEAP32[(($15)>>2)]=0;
 label=4;break;
 case 4: 
 var $17=$i;
 var $18=((($17)+(1))|0);
 $i=$18;
 label=2;break;
 case 5: 
 $i=4;
 label=6;break;
 case 6: 
 var $21=$i;
 var $22=($21|0)<=60;
 if($22){label=7;break;}else{label=11;break;}
 case 7: 
 var $24=$1;
 var $25=(($24+16)|0);
 var $26=HEAPF64[(($25)>>3)];
 $rate=$26;
 var $27=$i;
 var $28=($27|0)<60;
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 var $30=$i;
 var $31=$30&3;
 var $32=($31|0);
 var $33=($32)*((0.25));
 var $34=($33)+(1);
 var $35=$rate;
 var $36=($35)*($34);
 $rate=$36;
 label=9;break;
 case 9: 
 var $38=$i;
 var $39=$38>>2;
 var $40=((($39)-(1))|0);
 var $41=1<<$40;
 var $42=($41|0);
 var $43=$rate;
 var $44=($43)*($42);
 $rate=$44;
 var $45=$rate;
 var $46=($45)*(268435456);
 $rate=$46;
 var $47=$rate;
 var $48=$2;
 var $49=($48|0);
 var $50=($47)/($49);
 var $51=(($50)&-1);
 var $52=$i;
 var $53=$1;
 var $54=(($53+88)|0);
 var $55=(($54+($52<<2))|0);
 HEAP32[(($55)>>2)]=$51;
 var $56=$rate;
 var $57=$3;
 var $58=($57|0);
 var $59=($56)/($58);
 var $60=(($59)&-1);
 var $61=$i;
 var $62=$1;
 var $63=(($62+388)|0);
 var $64=(($63+($61<<2))|0);
 HEAP32[(($64)>>2)]=$60;
 label=10;break;
 case 10: 
 var $66=$i;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=6;break;
 case 11: 
 $i=60;
 label=12;break;
 case 12: 
 var $70=$i;
 var $71=($70|0)<76;
 if($71){label=13;break;}else{label=15;break;}
 case 13: 
 var $73=$i;
 var $74=$1;
 var $75=(($74+88)|0);
 var $76=(($75+($73<<2))|0);
 HEAP32[(($76)>>2)]=268435455;
 var $77=$1;
 var $78=(($77+388)|0);
 var $79=(($78+240)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$i;
 var $82=$1;
 var $83=(($82+388)|0);
 var $84=(($83+($81<<2))|0);
 HEAP32[(($84)>>2)]=$80;
 label=14;break;
 case 14: 
 var $86=$i;
 var $87=((($86)+(1))|0);
 $i=$87;
 label=12;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPLOpenTable($ST){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $s;
 var $t;
 var $rate;
 var $i;
 var $j;
 var $pom;
 $2=$ST;
 var $3=_malloc(65536);
 var $4=$3;
 var $5=$2;
 var $6=(($5)|0);
 HEAP32[(($6)>>2)]=$4;
 var $7=($4|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=44;break;
 case 3: 
 var $10=_malloc(32768);
 var $11=$10;
 var $12=$2;
 var $13=(($12+4)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=($11|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18;
 _free($19);
 $1=0;
 label=44;break;
 case 5: 
 var $21=_malloc(4096);
 var $22=$21;
 var $23=$2;
 var $24=(($23+8)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=($22|0)==0;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$2;
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 _free($30);
 var $31=$2;
 var $32=(($31+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 _free($34);
 $1=0;
 label=44;break;
 case 7: 
 var $36=_malloc(4096);
 var $37=$36;
 var $38=$2;
 var $39=(($38+12)|0);
 HEAP32[(($39)>>2)]=$37;
 var $40=($37|0)==0;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 var $42=$2;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$44;
 _free($45);
 var $46=$2;
 var $47=(($46+4)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$48;
 _free($49);
 var $50=$2;
 var $51=(($50+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$52;
 _free($53);
 $1=0;
 label=44;break;
 case 9: 
 $t=0;
 label=10;break;
 case 10: 
 var $56=$t;
 var $57=($56|0)<4095;
 if($57){label=11;break;}else{label=13;break;}
 case 11: 
 var $59=$t;
 var $60=($59|0);
 var $61=((0.0234375))*($60);
 var $62=($61)/(20);
 var $63=Math_pow(10,$62);
 var $64=(67108863)/($63);
 $rate=$64;
 var $65=$rate;
 var $66=(($65)&-1);
 var $67=$t;
 var $68=$2;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+($67<<2))|0);
 HEAP32[(($71)>>2)]=$66;
 var $72=$t;
 var $73=$2;
 var $74=(($73)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+($72<<2))|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(((-$77))|0);
 var $79=$t;
 var $80=((($79)+(8192))|0);
 var $81=$2;
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+($80<<2))|0);
 HEAP32[(($84)>>2)]=$78;
 label=12;break;
 case 12: 
 var $86=$t;
 var $87=((($86)+(1))|0);
 $t=$87;
 label=10;break;
 case 13: 
 $t=4095;
 label=14;break;
 case 14: 
 var $90=$t;
 var $91=($90|0)<8192;
 if($91){label=15;break;}else{label=17;break;}
 case 15: 
 var $93=$t;
 var $94=((($93)+(8192))|0);
 var $95=$2;
 var $96=(($95)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+($94<<2))|0);
 HEAP32[(($98)>>2)]=0;
 var $99=$t;
 var $100=$2;
 var $101=(($100)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+($99<<2))|0);
 HEAP32[(($103)>>2)]=0;
 label=16;break;
 case 16: 
 var $105=$t;
 var $106=((($105)+(1))|0);
 $t=$106;
 label=14;break;
 case 17: 
 var $108=$2;
 var $109=(($108)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+16380)|0);
 var $112=$2;
 var $113=(($112+4)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+4096)|0);
 HEAP32[(($115)>>2)]=$111;
 var $116=$2;
 var $117=(($116+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118)|0);
 HEAP32[(($119)>>2)]=$111;
 $s=1;
 label=18;break;
 case 18: 
 var $121=$s;
 var $122=($121|0)<=512;
 if($122){label=19;break;}else{label=21;break;}
 case 19: 
 var $124=$s;
 var $125=($124|0);
 var $126=((6.283185307179586))*($125);
 var $127=($126)/(2048);
 var $128=Math_sin($127);
 $pom=$128;
 var $129=$pom;
 var $130=(1)/($129);
 var $131=_log10($130);
 var $132=($131)*(20);
 $pom=$132;
 var $133=$pom;
 var $134=($133)/((0.0234375));
 var $135=(($134)&-1);
 $j=$135;
 var $136=$j;
 var $137=$2;
 var $138=(($137)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139+($136<<2))|0);
 var $141=$s;
 var $142=(((1024)-($141))|0);
 var $143=$2;
 var $144=(($143+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+($142<<2))|0);
 HEAP32[(($146)>>2)]=$140;
 var $147=$s;
 var $148=$2;
 var $149=(($148+4)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+($147<<2))|0);
 HEAP32[(($151)>>2)]=$140;
 var $152=$j;
 var $153=((($152)+(8192))|0);
 var $154=$2;
 var $155=(($154)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+($153<<2))|0);
 var $158=$s;
 var $159=(((2048)-($158))|0);
 var $160=$2;
 var $161=(($160+4)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+($159<<2))|0);
 HEAP32[(($163)>>2)]=$157;
 var $164=$s;
 var $165=((($164)+(1024))|0);
 var $166=$2;
 var $167=(($166+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+($165<<2))|0);
 HEAP32[(($169)>>2)]=$157;
 label=20;break;
 case 20: 
 var $171=$s;
 var $172=((($171)+(1))|0);
 $s=$172;
 label=18;break;
 case 21: 
 $s=0;
 label=22;break;
 case 22: 
 var $175=$s;
 var $176=($175|0)<2048;
 if($176){label=23;break;}else{label=31;break;}
 case 23: 
 var $178=$s;
 var $179=($178|0)<1024;
 if($179){label=24;break;}else{label=25;break;}
 case 24: 
 var $181=$s;
 var $182=$2;
 var $183=(($182+4)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+($181<<2))|0);
 var $186=HEAP32[(($185)>>2)];
 var $193=$186;label=26;break;
 case 25: 
 var $188=$2;
 var $189=(($188)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+16384)|0);
 var $193=$191;label=26;break;
 case 26: 
 var $193;
 var $194=$s;
 var $195=((($194)+(2048))|0);
 var $196=$2;
 var $197=(($196+4)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+($195<<2))|0);
 HEAP32[(($199)>>2)]=$193;
 var $200=$s;
 var $201=(((($200|0))%(1024))&-1);
 var $202=$2;
 var $203=(($202+4)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+($201<<2))|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=$s;
 var $208=((($207)+(4096))|0);
 var $209=$2;
 var $210=(($209+4)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+($208<<2))|0);
 HEAP32[(($212)>>2)]=$206;
 var $213=$s;
 var $214=(((($213|0))/(512))&-1);
 var $215=$214&1;
 var $216=($215|0)!=0;
 if($216){label=27;break;}else{label=28;break;}
 case 27: 
 var $218=$2;
 var $219=(($218)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+16384)|0);
 var $231=$221;label=29;break;
 case 28: 
 var $223=$s;
 var $224=((($223)+(4096))|0);
 var $225=$2;
 var $226=(($225+4)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+($224<<2))|0);
 var $229=HEAP32[(($228)>>2)];
 var $231=$229;label=29;break;
 case 29: 
 var $231;
 var $232=$s;
 var $233=((($232)+(6144))|0);
 var $234=$2;
 var $235=(($234+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+($233<<2))|0);
 HEAP32[(($237)>>2)]=$231;
 label=30;break;
 case 30: 
 var $239=$s;
 var $240=((($239)+(1))|0);
 $s=$240;
 label=22;break;
 case 31: 
 $i=0;
 label=32;break;
 case 32: 
 var $243=$i;
 var $244=($243|0)<4096;
 if($244){label=33;break;}else{label=35;break;}
 case 33: 
 var $246=$i;
 var $247=(((4095)-($246))|0);
 var $248=($247|0);
 var $249=($248)/(4096);
 var $250=Math_pow($249,8);
 var $251=($250)*(4096);
 $pom=$251;
 var $252=$pom;
 var $253=(($252)&-1);
 var $254=$i;
 var $255=$2;
 var $256=(($255+16)|0);
 var $257=(($256+($254<<2))|0);
 HEAP32[(($257)>>2)]=$253;
 var $258=$i;
 var $259=$i;
 var $260=((($259)+(4096))|0);
 var $261=$2;
 var $262=(($261+16)|0);
 var $263=(($262+($260<<2))|0);
 HEAP32[(($263)>>2)]=$258;
 label=34;break;
 case 34: 
 var $265=$i;
 var $266=((($265)+(1))|0);
 $i=$266;
 label=32;break;
 case 35: 
 var $268=$2;
 var $269=(($268+16)|0);
 var $270=(($269+32768)|0);
 HEAP32[(($270)>>2)]=4095;
 $i=0;
 label=36;break;
 case 36: 
 var $272=$i;
 var $273=($272|0)<512;
 if($273){label=37;break;}else{label=39;break;}
 case 37: 
 var $275=$i;
 var $276=($275|0);
 var $277=((6.283185307179586))*($276);
 var $278=($277)/(512);
 var $279=Math_sin($278);
 var $280=($279)+(1);
 var $281=($280)/(2);
 $pom=$281;
 var $282=$pom;
 var $283=((42.666666666666664))*($282);
 var $284=(($283)&-1);
 var $285=$i;
 var $286=$2;
 var $287=(($286+8)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=(($288+($285<<2))|0);
 HEAP32[(($289)>>2)]=$284;
 var $290=$pom;
 var $291=((204.79999999999998))*($290);
 var $292=(($291)&-1);
 var $293=$i;
 var $294=((($293)+(512))|0);
 var $295=$2;
 var $296=(($295+8)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=(($297+($294<<2))|0);
 HEAP32[(($298)>>2)]=$292;
 label=38;break;
 case 38: 
 var $300=$i;
 var $301=((($300)+(1))|0);
 $i=$301;
 label=36;break;
 case 39: 
 $i=0;
 label=40;break;
 case 40: 
 var $304=$i;
 var $305=($304|0)<512;
 if($305){label=41;break;}else{label=43;break;}
 case 41: 
 var $307=$i;
 var $308=($307|0);
 var $309=((6.283185307179586))*($308);
 var $310=($309)/(512);
 var $311=Math_sin($310);
 var $312=((15.36))*($311);
 $pom=$312;
 var $313=$pom;
 var $314=($313)*((0.07));
 var $315=($314)+(256);
 var $316=(($315)&-1);
 var $317=$i;
 var $318=$2;
 var $319=(($318+12)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320+($317<<2))|0);
 HEAP32[(($321)>>2)]=$316;
 var $322=$pom;
 var $323=($322)*((0.14));
 var $324=($323)+(256);
 var $325=(($324)&-1);
 var $326=$i;
 var $327=((($326)+(512))|0);
 var $328=$2;
 var $329=(($328+12)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($330+($327<<2))|0);
 HEAP32[(($331)>>2)]=$325;
 label=42;break;
 case 42: 
 var $333=$i;
 var $334=((($333)+(1))|0);
 $i=$334;
 label=40;break;
 case 43: 
 $1=1;
 label=44;break;
 case 44: 
 var $337=$1;
 STACKTOP=sp;return $337;
  default: assert(0, "bad label: " + label);
 }
}
function _set_mul($OPL,$slot,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $CH;
 var $SLOT;
 $1=$OPL;
 $2=$slot;
 $3=$v;
 var $4=$2;
 var $5=(((($4|0))/(2))&-1);
 var $6=$1;
 var $7=(($6+52)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+((($5)*(200))&-1))|0);
 $CH=$9;
 var $10=$2;
 var $11=$10&1;
 var $12=$CH;
 var $13=(($12)|0);
 var $14=(($13+((($11)*(80))&-1))|0);
 $SLOT=$14;
 var $15=$3;
 var $16=$15&15;
 var $17=((28120+($16<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$SLOT;
 var $20=(($19+32)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$3;
 var $22=$21&16;
 var $23=($22|0)!=0;
 var $24=($23?0:2);
 var $25=(($24)&255);
 var $26=$SLOT;
 var $27=(($26+8)|0);
 HEAP8[($27)]=$25;
 var $28=$3;
 var $29=$28&32;
 var $30=$29>>5;
 var $31=(($30)&255);
 var $32=$SLOT;
 var $33=(($32+44)|0);
 HEAP8[($33)]=$31;
 var $34=$3;
 var $35=$34&64;
 var $36=(($35)&255);
 var $37=$SLOT;
 var $38=(($37+73)|0);
 HEAP8[($38)]=$36;
 var $39=$3;
 var $40=$39&128;
 var $41=(($40)&255);
 var $42=$SLOT;
 var $43=(($42+72)|0);
 HEAP8[($43)]=$41;
 var $44=$CH;
 var $45=$SLOT;
 _CALC_FCSLOT($44,$45);
 STACKTOP=sp;return;
}
function _set_ksl_tl($OPL,$slot,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $CH;
 var $SLOT;
 var $ksl;
 $1=$OPL;
 $2=$slot;
 $3=$v;
 var $4=$2;
 var $5=(((($4|0))/(2))&-1);
 var $6=$1;
 var $7=(($6+52)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+((($5)*(200))&-1))|0);
 $CH=$9;
 var $10=$2;
 var $11=$10&1;
 var $12=$CH;
 var $13=(($12)|0);
 var $14=(($13+((($11)*(80))&-1))|0);
 $SLOT=$14;
 var $15=$3;
 var $16=$15>>6;
 $ksl=$16;
 var $17=$ksl;
 var $18=($17|0)!=0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 var $20=$ksl;
 var $21=(((3)-($20))|0);
 var $24=$21;label=4;break;
 case 3: 
 var $24=31;label=4;break;
 case 4: 
 var $24;
 var $25=(($24)&255);
 var $26=$SLOT;
 var $27=(($26+28)|0);
 HEAP8[($27)]=$25;
 var $28=$3;
 var $29=$28&63;
 var $30=($29|0);
 var $31=($30)*(32);
 var $32=(($31)&-1);
 var $33=$SLOT;
 var $34=(($33)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$1;
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$37&128;
 var $39=($38|0)!=0;
 if($39){label=6;break;}else{label=5;break;}
 case 5: 
 var $41=$SLOT;
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$CH;
 var $45=(($44+192)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$SLOT;
 var $48=(($47+28)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=$46>>>($50>>>0);
 var $52=((($43)+($51))|0);
 var $53=$SLOT;
 var $54=(($53+4)|0);
 HEAP32[(($54)>>2)]=$52;
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_ar_dr($OPL,$slot,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $CH;
 var $SLOT;
 var $ar;
 var $dr;
 $1=$OPL;
 $2=$slot;
 $3=$v;
 var $4=$2;
 var $5=(((($4|0))/(2))&-1);
 var $6=$1;
 var $7=(($6+52)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+((($5)*(200))&-1))|0);
 $CH=$9;
 var $10=$2;
 var $11=$10&1;
 var $12=$CH;
 var $13=(($12)|0);
 var $14=(($13+((($11)*(80))&-1))|0);
 $SLOT=$14;
 var $15=$3;
 var $16=$15>>4;
 $ar=$16;
 var $17=$3;
 var $18=$17&15;
 $dr=$18;
 var $19=$ar;
 var $20=($19|0)!=0;
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 var $22=$ar;
 var $23=$22<<2;
 var $24=$1;
 var $25=(($24+88)|0);
 var $26=(($25+($23<<2))|0);
 var $29=$26;label=4;break;
 case 3: 
 var $29=32584;label=4;break;
 case 4: 
 var $29;
 var $30=$SLOT;
 var $31=(($30+12)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$SLOT;
 var $33=(($32+29)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$SLOT;
 var $37=(($36+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+($35<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$SLOT;
 var $42=(($41+60)|0);
 HEAP32[(($42)>>2)]=$40;
 var $43=$SLOT;
 var $44=(($43+45)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=($46|0)==2;
 if($47){label=5;break;}else{label=6;break;}
 case 5: 
 var $49=$SLOT;
 var $50=(($49+60)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$SLOT;
 var $53=(($52+56)|0);
 HEAP32[(($53)>>2)]=$51;
 label=6;break;
 case 6: 
 var $55=$dr;
 var $56=($55|0)!=0;
 if($56){label=7;break;}else{label=8;break;}
 case 7: 
 var $58=$dr;
 var $59=$58<<2;
 var $60=$1;
 var $61=(($60+388)|0);
 var $62=(($61+($59<<2))|0);
 var $65=$62;label=9;break;
 case 8: 
 var $65=32584;label=9;break;
 case 9: 
 var $65;
 var $66=$SLOT;
 var $67=(($66+16)|0);
 HEAP32[(($67)>>2)]=$65;
 var $68=$SLOT;
 var $69=(($68+29)|0);
 var $70=HEAP8[($69)];
 var $71=($70&255);
 var $72=$SLOT;
 var $73=(($72+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+($71<<2))|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$SLOT;
 var $78=(($77+64)|0);
 HEAP32[(($78)>>2)]=$76;
 var $79=$SLOT;
 var $80=(($79+45)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=($82|0)==1;
 if($83){label=10;break;}else{label=11;break;}
 case 10: 
 var $85=$SLOT;
 var $86=(($85+64)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$SLOT;
 var $89=(($88+56)|0);
 HEAP32[(($89)>>2)]=$87;
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_sl_rr($OPL,$slot,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $CH;
 var $SLOT;
 var $sl;
 var $rr;
 $1=$OPL;
 $2=$slot;
 $3=$v;
 var $4=$2;
 var $5=(((($4|0))/(2))&-1);
 var $6=$1;
 var $7=(($6+52)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+((($5)*(200))&-1))|0);
 $CH=$9;
 var $10=$2;
 var $11=$10&1;
 var $12=$CH;
 var $13=(($12)|0);
 var $14=(($13+((($11)*(80))&-1))|0);
 $SLOT=$14;
 var $15=$3;
 var $16=$15>>4;
 $sl=$16;
 var $17=$3;
 var $18=$17&15;
 $rr=$18;
 var $19=$sl;
 var $20=((27992+($19<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$SLOT;
 var $23=(($22+20)|0);
 HEAP32[(($23)>>2)]=$21;
 var $24=$SLOT;
 var $25=(($24+45)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=($27|0)==1;
 if($28){label=2;break;}else{label=3;break;}
 case 2: 
 var $30=$SLOT;
 var $31=(($30+20)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$SLOT;
 var $34=(($33+52)|0);
 HEAP32[(($34)>>2)]=$32;
 label=3;break;
 case 3: 
 var $36=$rr;
 var $37=$36<<2;
 var $38=$1;
 var $39=(($38+388)|0);
 var $40=(($39+($37<<2))|0);
 var $41=$SLOT;
 var $42=(($41+24)|0);
 HEAP32[(($42)>>2)]=$40;
 var $43=$SLOT;
 var $44=(($43+29)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=$SLOT;
 var $48=(($47+24)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+($46<<2))|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$SLOT;
 var $53=(($52+68)|0);
 HEAP32[(($53)>>2)]=$51;
 var $54=$SLOT;
 var $55=(($54+45)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=($57|0)==0;
 if($58){label=4;break;}else{label=5;break;}
 case 4: 
 var $60=$SLOT;
 var $61=(($60+68)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$SLOT;
 var $64=(($63+56)|0);
 HEAP32[(($64)>>2)]=$62;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPL_KEYON($SLOT){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$SLOT;
 var $2=$1;
 var $3=(($2+36)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=$1;
 var $5=(($4+45)|0);
 HEAP8[($5)]=2;
 var $6=$1;
 var $7=(($6+60)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$1;
 var $10=(($9+56)|0);
 HEAP32[(($10)>>2)]=$8;
 var $11=$1;
 var $12=(($11+48)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$1;
 var $14=(($13+52)|0);
 HEAP32[(($14)>>2)]=268435456;
 STACKTOP=sp;return;
}
function _OPL_KEYOFF($SLOT){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$SLOT;
 var $2=$1;
 var $3=(($2+45)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=($5|0)>0;
 if($6){label=2;break;}else{label=5;break;}
 case 2: 
 var $8=$1;
 var $9=(($8+45)|0);
 HEAP8[($9)]=0;
 var $10=$1;
 var $11=(($10+48)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&268435456;
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=3;break;}
 case 3: 
 var $16=$1;
 var $17=(($16+48)|0);
 HEAP32[(($17)>>2)]=268435456;
 label=4;break;
 case 4: 
 var $19=$1;
 var $20=(($19+52)|0);
 HEAP32[(($20)>>2)]=536870912;
 var $21=$1;
 var $22=(($21+68)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$1;
 var $25=(($24+56)|0);
 HEAP32[(($25)>>2)]=$23;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _CALC_FCSLOT($CH,$SLOT){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ksr;
 $1=$CH;
 $2=$SLOT;
 var $3=$1;
 var $4=(($3+188)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=(($6+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(Math_imul($5,$8)|0);
 var $10=$2;
 var $11=(($10+40)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$1;
 var $13=(($12+184)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$2;
 var $17=(($16+8)|0);
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=$15>>($19|0);
 $ksr=$20;
 var $21=$2;
 var $22=(($21+29)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=$ksr;
 var $26=($24|0)!=($25|0);
 if($26){label=2;break;}else{label=3;break;}
 case 2: 
 var $28=$ksr;
 var $29=(($28)&255);
 var $30=$2;
 var $31=(($30+29)|0);
 HEAP8[($31)]=$29;
 var $32=$ksr;
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+($32<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$2;
 var $39=(($38+60)|0);
 HEAP32[(($39)>>2)]=$37;
 var $40=$ksr;
 var $41=$2;
 var $42=(($41+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+($40<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$2;
 var $47=(($46+64)|0);
 HEAP32[(($47)>>2)]=$45;
 var $48=$ksr;
 var $49=$2;
 var $50=(($49+24)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+($48<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$2;
 var $55=(($54+68)|0);
 HEAP32[(($55)>>2)]=$53;
 label=3;break;
 case 3: 
 var $57=$2;
 var $58=(($57)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$1;
 var $61=(($60+192)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$2;
 var $64=(($63+28)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=$62>>>($66>>>0);
 var $68=((($59)+($67))|0);
 var $69=$2;
 var $70=(($69+4)|0);
 HEAP32[(($70)>>2)]=$68;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_algorythm($CH,$ST){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $carrier;
 $1=$CH;
 $2=$ST;
 var $3=$2;
 var $4=(($3+32820)|0);
 var $5=(($4)|0);
 $carrier=$5;
 var $6=$1;
 var $7=(($6+160)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255);
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$carrier;
 var $17=$12;label=4;break;
 case 3: 
 var $14=$2;
 var $15=(($14+32848)|0);
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 var $18=$1;
 var $19=(($18+164)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$carrier;
 var $21=$1;
 var $22=(($21+168)|0);
 HEAP32[(($22)>>2)]=$20;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _OPL_CALC_SLOT($SLOT,$ST){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$SLOT;
 $2=$ST;
 var $3=$1;
 var $4=(($3+56)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)+($5))|0);
 HEAP32[(($7)>>2)]=$9;
 var $10=$1;
 var $11=(($10+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9|0)>=($12|0);
 if($13){label=2;break;}else{label=10;break;}
 case 2: 
 var $15=$1;
 var $16=(($15+45)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 if(($18|0)==2){ label=3;break;}else if(($18|0)==1){ label=4;break;}else if(($18|0)==0){ label=8;break;}else{label=9;break;}
 case 3: 
 var $20=$1;
 var $21=(($20+45)|0);
 HEAP8[($21)]=1;
 var $22=$1;
 var $23=(($22+48)|0);
 HEAP32[(($23)>>2)]=268435456;
 var $24=$1;
 var $25=(($24+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$1;
 var $28=(($27+52)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$1;
 var $30=(($29+64)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$1;
 var $33=(($32+56)|0);
 HEAP32[(($33)>>2)]=$31;
 label=9;break;
 case 4: 
 var $35=$1;
 var $36=(($35+20)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$1;
 var $39=(($38+48)|0);
 HEAP32[(($39)>>2)]=$37;
 var $40=$1;
 var $41=(($40+52)|0);
 HEAP32[(($41)>>2)]=536870912;
 var $42=$1;
 var $43=(($42+44)|0);
 var $44=HEAP8[($43)];
 var $45=(($44<<24)>>24)!=0;
 if($45){label=5;break;}else{label=6;break;}
 case 5: 
 var $47=$1;
 var $48=(($47+56)|0);
 HEAP32[(($48)>>2)]=0;
 label=7;break;
 case 6: 
 var $50=$1;
 var $51=(($50+45)|0);
 HEAP8[($51)]=0;
 var $52=$1;
 var $53=(($52+68)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$1;
 var $56=(($55+56)|0);
 HEAP32[(($56)>>2)]=$54;
 label=7;break;
 case 7: 
 label=9;break;
 case 8: 
 var $59=$1;
 var $60=(($59+48)|0);
 HEAP32[(($60)>>2)]=536870912;
 var $61=$1;
 var $62=(($61+52)|0);
 HEAP32[(($62)>>2)]=536870913;
 var $63=$1;
 var $64=(($63+56)|0);
 HEAP32[(($64)>>2)]=0;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $67=$1;
 var $68=(($67+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$1;
 var $71=(($70+48)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$72>>16;
 var $74=$2;
 var $75=(($74+16)|0);
 var $76=(($75+($73<<2))|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=((($69)+($77))|0);
 var $79=$1;
 var $80=(($79+72)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=($82|0)!=0;
 if($83){label=11;break;}else{label=12;break;}
 case 11: 
 var $85=$2;
 var $86=(($85+32824)|0);
 var $87=HEAP32[(($86)>>2)];
 var $90=$87;label=13;break;
 case 12: 
 var $90=0;label=13;break;
 case 13: 
 var $90;
 var $91=((($78)+($90))|0);
 STACKTOP=sp;return $91;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read8s($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read8s($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 var $15=($14|0)>=1;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$2;
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($19+$22)|0);
 var $25=HEAP8[($24)];
 $1=$25;
 label=6;break;
 case 5: 
 $1=-1;
 label=6;break;
 case 6: 
 var $28=$1;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read8($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read8($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 var $15=($14|0)>=1;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$2;
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($19+$22)|0);
 var $25=HEAP8[($24)];
 $1=$25;
 label=6;break;
 case 5: 
 $1=-1;
 label=6;break;
 case 6: 
 var $28=$1;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read16l($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $can_read;
 var $n;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read16l($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 $can_read=$14;
 var $15=$can_read;
 var $16=($15|0)>=2;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$2;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($20+$23)|0);
 var $25=_readmem16l($24);
 $n=$25;
 var $26=$2;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(2))|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=$n;
 $1=$30;
 label=6;break;
 case 5: 
 var $32=$can_read;
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+($32))|0);
 HEAP32[(($34)>>2)]=$36;
 $1=-1;
 label=6;break;
 case 6: 
 var $38=$1;
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read16b($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $can_read;
 var $n;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read16b($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 $can_read=$14;
 var $15=$can_read;
 var $16=($15|0)>=2;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$2;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($20+$23)|0);
 var $25=_readmem16b($24);
 $n=$25;
 var $26=$2;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(2))|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=$n;
 $1=$30;
 label=6;break;
 case 5: 
 var $32=$can_read;
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+($32))|0);
 HEAP32[(($34)>>2)]=$36;
 $1=-1;
 label=6;break;
 case 6: 
 var $38=$1;
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read24l($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $can_read;
 var $n;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read24l($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 $can_read=$14;
 var $15=$can_read;
 var $16=($15|0)>=3;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$2;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($20+$23)|0);
 var $25=_readmem24l($24);
 $n=$25;
 var $26=$2;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(3))|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=$n;
 $1=$30;
 label=6;break;
 case 5: 
 var $32=$can_read;
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+($32))|0);
 HEAP32[(($34)>>2)]=$36;
 $1=-1;
 label=6;break;
 case 6: 
 var $38=$1;
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read24b($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $can_read;
 var $n;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read24b($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 $can_read=$14;
 var $15=$can_read;
 var $16=($15|0)>=3;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$2;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($20+$23)|0);
 var $25=_readmem24b($24);
 $n=$25;
 var $26=$2;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(3))|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=$n;
 $1=$30;
 label=6;break;
 case 5: 
 var $32=$can_read;
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+($32))|0);
 HEAP32[(($34)>>2)]=$36;
 $1=-1;
 label=6;break;
 case 6: 
 var $38=$1;
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read32l($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $can_read;
 var $n;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read32l($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 $can_read=$14;
 var $15=$can_read;
 var $16=($15|0)>=4;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$2;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($20+$23)|0);
 var $25=_readmem32l($24);
 $n=$25;
 var $26=$2;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(4))|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=$n;
 $1=$30;
 label=6;break;
 case 5: 
 var $32=$can_read;
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+($32))|0);
 HEAP32[(($34)>>2)]=$36;
 $1=-1;
 label=6;break;
 case 6: 
 var $38=$1;
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read32b($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $can_read;
 var $n;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_read32b($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=_CAN_READ($13);
 $can_read=$14;
 var $15=$can_read;
 var $16=($15|0)>=4;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$2;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($20+$23)|0);
 var $25=_readmem32b($24);
 $n=$25;
 var $26=$2;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(4))|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=$n;
 $1=$30;
 label=6;break;
 case 5: 
 var $32=$can_read;
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+($32))|0);
 HEAP32[(($34)>>2)]=$36;
 $1=-1;
 label=6;break;
 case 6: 
 var $38=$1;
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_read($buf,$size,$num,$h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $should_read;
 var $can_read;
 $2=$buf;
 $3=$size;
 $4=$num;
 $5=$h;
 var $6=$5;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=$3;
 var $13=$4;
 var $14=$5;
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=_fread($11,$12,$13,$16);
 $1=$17;
 label=8;break;
 case 3: 
 var $19=$3;
 var $20=$4;
 var $21=(Math_imul($19,$20)|0);
 $should_read=$21;
 var $22=$5;
 var $23=_CAN_READ($22);
 $can_read=$23;
 var $24=$can_read;
 var $25=($24|0)<=0;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=8;break;
 case 5: 
 var $28=$should_read;
 var $29=$can_read;
 var $30=($28>>>0)>($29>>>0);
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 var $32=$can_read;
 $should_read=$32;
 label=7;break;
 case 7: 
 var $34=$2;
 var $35=$5;
 var $36=(($35+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$5;
 var $39=(($38+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($37+$40)|0);
 var $42=$should_read;
 assert($42 % 1 === 0);(_memcpy($34, $41, $42)|0);
 var $43=$should_read;
 var $44=$5;
 var $45=(($44+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=((($46)+($43))|0);
 HEAP32[(($45)>>2)]=$47;
 var $48=$should_read;
 var $49=$3;
 var $50=(((($48>>>0))/(($49>>>0)))&-1);
 $1=$50;
 label=8;break;
 case 8: 
 var $52=$1;
 STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_seek($h,$offset,$whence){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$h;
 $3=$offset;
 $4=$whence;
 var $5=$2;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$3;
 var $14=$4;
 var $15=_fseek($12,$13,$14);
 $1=$15;
 label=18;break;
 case 3: 
 var $17=$4;
 if(($17|0)==1){ label=10;break;}else if(($17|0)==2){ label=15;break;}else if(($17|0)==0){ label=5;break;}else{label=4;break;}
 case 4: 
 label=5;break;
 case 5: 
 var $20=$2;
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)>=0;
 if($23){label=6;break;}else{label=9;break;}
 case 6: 
 var $25=$3;
 var $26=$2;
 var $27=(($26+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($25|0)>($28|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $31=$3;
 var $32=($31|0)<0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=18;break;
 case 9: 
 var $35=$3;
 var $36=$2;
 var $37=(($36+12)|0);
 HEAP32[(($37)>>2)]=$35;
 $1=0;
 label=18;break;
 case 10: 
 var $39=$2;
 var $40=(($39+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)>=0;
 if($42){label=11;break;}else{label=14;break;}
 case 11: 
 var $44=$3;
 var $45=$2;
 var $46=_CAN_READ($45);
 var $47=($44|0)>($46|0);
 if($47){label=13;break;}else{label=12;break;}
 case 12: 
 var $49=$3;
 var $50=$2;
 var $51=(($50+12)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(((-$52))|0);
 var $54=($49|0)<($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=18;break;
 case 14: 
 var $57=$3;
 var $58=$2;
 var $59=(($58+12)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=((($60)+($57))|0);
 HEAP32[(($59)>>2)]=$61;
 $1=0;
 label=18;break;
 case 15: 
 var $63=$2;
 var $64=(($63+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)<0;
 if($66){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=18;break;
 case 17: 
 var $69=$2;
 var $70=(($69+16)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$3;
 var $73=((($71)+($72))|0);
 var $74=$2;
 var $75=(($74+12)|0);
 HEAP32[(($75)>>2)]=$73;
 $1=0;
 label=18;break;
 case 18: 
 var $77=$1;
 STACKTOP=sp;return $77;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_tell($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_ftell($10);
 $1=$11;
 label=4;break;
 case 3: 
 var $13=$2;
 var $14=(($13+12)|0);
 var $15=HEAP32[(($14)>>2)];
 $1=$15;
 label=4;break;
 case 4: 
 var $17=$1;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_eof($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_feof($10);
 $1=$11;
 label=6;break;
 case 3: 
 var $13=$2;
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)<=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 var $19=$2;
 var $20=_CAN_READ($19);
 var $21=($20|0)<=0;
 var $22=($21&1);
 $1=$22;
 label=6;break;
 case 6: 
 var $24=$1;
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_open_file($path,$mode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $h;
 $2=$path;
 $3=$mode;
 var $4=_malloc(20);
 var $5=$4;
 $h=$5;
 var $6=$h;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 label=7;break;
 case 3: 
 var $10=$h;
 var $11=(($10)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=$2;
 var $13=$3;
 var $14=_fopen($12,$13);
 var $15=$h;
 var $16=(($15+4)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$h;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $23=$h;
 $1=$23;
 label=8;break;
 case 6: 
 var $25=$h;
 var $26=$25;
 _free($26);
 label=7;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $29=$1;
 STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_open_fd($fd,$mode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $h;
 $2=$fd;
 $3=$mode;
 var $4=_malloc(20);
 var $5=$4;
 $h=$5;
 var $6=$h;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $10=$h;
 var $11=(($10)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=$2;
 var $13=$3;
 var $14=_fdopen($12,$13);
 var $15=$h;
 var $16=(($15+4)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$h;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$h;
 var $23=$22;
 _free($23);
 $1=0;
 label=6;break;
 case 5: 
 var $25=$h;
 $1=$25;
 label=6;break;
 case 6: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_close($h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 $2=$h;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fclose($10);
 $ret=$11;
 var $12=$2;
 var $13=$12;
 _free($13);
 var $14=$ret;
 $1=$14;
 label=4;break;
 case 3: 
 var $16=$2;
 var $17=$16;
 _free($17);
 $1=0;
 label=4;break;
 case 4: 
 var $19=$1;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _hio_stat($h,$st){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$h;
 $3=$st;
 var $4=$2;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$2;
 var $10=(($9+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_fileno($11);
 var $13=$3;
 var $14=_fstat($12,$13);
 $1=$14;
 label=4;break;
 case 3: 
 var $16=$3;
 var $17=$16;
 _memset($17, 0, 76)|0;
 var $18=$2;
 var $19=(($18+16)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$3;
 var $22=(($21+36)|0);
 HEAP32[(($22)>>2)]=$20;
 $1=0;
 label=4;break;
 case 4: 
 var $24=$1;
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _hmn_linear_bend($ctx,$xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 $1=$ctx;
 $2=$xc;
 STACKTOP=sp;return 0;
}
function _hmn_play_extras($ctx,$xc,$chn,$new_note){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $m;
 var $ce;
 var $xxi;
 var $pos;
 var $waveform;
 var $volume;
 $1=$ctx;
 $2=$xc;
 $3=$chn;
 $4=$new_note;
 var $5=$1;
 var $6=(($5+1552)|0);
 $m=$6;
 var $7=$2;
 var $8=(($7+356)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $ce=$10;
 var $11=$4;
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$ce;
 var $15=(($14+4)|0);
 HEAP32[(($15)>>2)]=0;
 label=3;break;
 case 3: 
 var $17=$2;
 var $18=(($17+36)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$m;
 var $21=(($20)|0);
 var $22=(($21+176)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+((($19)*(764))&-1))|0);
 $xxi=$24;
 var $25=$ce;
 var $26=(($25+4)|0);
 var $27=HEAP32[(($26)>>2)];
 $pos=$27;
 var $28=$pos;
 var $29=$2;
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$m;
 var $33=(($32)|0);
 var $34=(($33+176)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+((($31)*(764))&-1))|0);
 var $37=(($36+760)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$38;
 var $40=(($39+12)|0);
 var $41=(($40+$28)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 $waveform=$43;
 var $44=$pos;
 var $45=$2;
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$m;
 var $49=(($48)|0);
 var $50=(($49+176)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+((($47)*(764))&-1))|0);
 var $53=(($52+760)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$54;
 var $56=(($55+76)|0);
 var $57=(($56+$44)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=$59&127;
 $volume=$60;
 var $61=$waveform;
 var $62=$xxi;
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($61|0)<($64|0);
 if($65){label=4;break;}else{label=6;break;}
 case 4: 
 var $67=$waveform;
 var $68=$xxi;
 var $69=(($68+756)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+($67<<6))|0);
 var $72=(($71+40)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$2;
 var $75=(($74+44)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($73|0)!=($76|0);
 if($77){label=5;break;}else{label=6;break;}
 case 5: 
 var $79=$waveform;
 var $80=$xxi;
 var $81=(($80+756)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+($79<<6))|0);
 var $84=(($83+40)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$2;
 var $87=(($86+44)|0);
 HEAP32[(($87)>>2)]=$85;
 var $88=$1;
 var $89=$3;
 var $90=$2;
 var $91=(($90+44)|0);
 var $92=HEAP32[(($91)>>2)];
 _virt_setsmp($88,$89,$92);
 label=6;break;
 case 6: 
 var $94=$pos;
 var $95=((($94)+(1))|0);
 $pos=$95;
 var $96=$pos;
 var $97=$2;
 var $98=(($97+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$m;
 var $101=(($100)|0);
 var $102=(($101+176)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+((($99)*(764))&-1))|0);
 var $105=(($104+760)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=$106;
 var $108=(($107+8)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($96|0)>($109|0);
 if($110){label=7;break;}else{label=8;break;}
 case 7: 
 var $112=$2;
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$m;
 var $116=(($115)|0);
 var $117=(($116+176)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+((($114)*(764))&-1))|0);
 var $120=(($119+760)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$121;
 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 $pos=$124;
 label=8;break;
 case 8: 
 var $126=$pos;
 var $127=$ce;
 var $128=(($127+4)|0);
 HEAP32[(($128)>>2)]=$126;
 var $129=$volume;
 var $130=$ce;
 var $131=(($130+8)|0);
 HEAP32[(($131)>>2)]=$129;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _hmn_new_instrument_extras($xxi){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$xxi;
 var $3=_calloc(1,140);
 var $4=$2;
 var $5=(($4+760)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=(($6+760)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $12=$2;
 var $13=(($12+760)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=68929562;
 $1=0;
 label=4;break;
 case 4: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _hmn_new_channel_extras($xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$xc;
 var $3=_calloc(1,12);
 var $4=$2;
 var $5=(($4+356)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=(($6+356)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $12=$2;
 var $13=(($12+356)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=68929562;
 $1=0;
 label=4;break;
 case 4: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _hmn_reset_channel_extras($xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$xc;
 var $2=$1;
 var $3=(($2+356)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 _memset($5, 0, 8)|0;
 STACKTOP=sp;return;
}
function _hmn_release_channel_extras($xc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$xc;
 var $2=$1;
 var $3=(($2+356)|0);
 var $4=HEAP32[(($3)>>2)];
 _free($4);
 STACKTOP=sp;return;
}
function _hmn_new_module_extras($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$m;
 var $3=_calloc(1,4);
 var $4=$2;
 var $5=(($4+6548)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=(($6+6548)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 var $12=$2;
 var $13=(($12+6548)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=68929562;
 $1=0;
 label=4;break;
 case 4: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _hmn_release_module_extras($m){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$m;
 var $2=$1;
 var $3=(($2+6548)|0);
 var $4=HEAP32[(($3)>>2)];
 _free($4);
 STACKTOP=sp;return;
}
function _get_lfo($lfo,$div){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $val;
 $2=$lfo;
 $3=$div;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$3;
 var $10=($9|0)==0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=12;break;
 case 4: 
 var $13=$2;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 switch(($15|0)){case 0:{ label=5;break;}case 1:{ label=6;break;}case 2:{ label=7;break;}case 3:{ label=8;break;}case 18:{ label=9;break;}default:{label=10;break;}}break;
 case 5: 
 var $17=$2;
 var $18=(($17+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=((2048+($19<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 $val=$21;
 label=11;break;
 case 6: 
 var $23=$2;
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25<<3;
 var $27=(((255)-($26))|0);
 $val=$27;
 label=11;break;
 case 7: 
 var $29=$2;
 var $30=(($29+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)<32;
 var $33=($32?255:-255);
 $val=$33;
 label=11;break;
 case 8: 
 var $35=_rand();
 var $36=$35&511;
 var $37=((($36)-(256))|0);
 $val=$37;
 label=11;break;
 case 9: 
 var $39=$2;
 var $40=(($39+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)<32;
 var $43=($42?255:0);
 $val=$43;
 label=11;break;
 case 10: 
 $1=0;
 label=12;break;
 case 11: 
 var $46=$val;
 var $47=$2;
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(Math_imul($46,$49)|0);
 var $51=$3;
 var $52=(((($50|0))/(($51|0)))&-1);
 $1=$52;
 label=12;break;
 case 12: 
 var $54=$1;
 STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }
}
function _update_lfo($lfo){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$lfo;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+12)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=((($7)+($4))|0);
 HEAP32[(($6)>>2)]=$8;
 var $9=$1;
 var $10=(($9+12)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(((($11|0))%(64))&-1);
 HEAP32[(($10)>>2)]=$12;
 STACKTOP=sp;return;
}
function _test_AC1D($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<896;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((896)-($9))|0);
 $1=$10;
 label=23;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13+2)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=172;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=$2;
 var $20=(($19+3)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)!=29;
 if($23){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=23;break;
 case 8: 
 var $26=$start;
 var $27=$2;
 var $28=(($27+$26)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=($30|0)>127;
 if($31){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=23;break;
 case 10: 
 $k=0;
 label=11;break;
 case 11: 
 var $35=$k;
 var $36=($35|0)<31;
 if($36){label=12;break;}else{label=16;break;}
 case 12: 
 var $38=$start;
 var $39=((($38)+(10))|0);
 var $40=$k;
 var $41=($40<<3);
 var $42=((($39)+($41))|0);
 var $43=$2;
 var $44=(($43+$42)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=($46|0)>15;
 if($47){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=23;break;
 case 14: 
 label=15;break;
 case 15: 
 var $51=$k;
 var $52=((($51)+(1))|0);
 $k=$52;
 label=11;break;
 case 16: 
 $j=0;
 label=17;break;
 case 17: 
 var $55=$j;
 var $56=($55|0)<128;
 if($56){label=18;break;}else{label=22;break;}
 case 18: 
 var $58=$start;
 var $59=((($58)+(768))|0);
 var $60=$j;
 var $61=((($59)+($60))|0);
 var $62=$2;
 var $63=(($62+$61)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=($65|0)>127;
 if($66){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=23;break;
 case 20: 
 label=21;break;
 case 21: 
 var $70=$j;
 var $71=((($70)+(1))|0);
 $j=$71;
 label=17;break;
 case 22: 
 var $73=$3;
 _pw_read_title(0,$73,0);
 $1=0;
 label=23;break;
 case 23: 
 var $75=$1;
 STACKTOP=sp;return $75;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_AC1D($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $NO_NOTE;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $npos;
 var $ntk_byte;
 var $tmp=sp;
 var $npat;
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $size;
 var $saddr;
 var $ssize;
 var $paddr=(sp)+(1024);
 var $psize=(sp)+(1536);
 var $tsize1;
 var $tsize2;
 var $tsize3;
 var $i;
 var $j;
 var $k;
 var $x;
 $1=$in;
 $2=$out;
 $NO_NOTE=-1;
 $ssize=0;
 var $3=$paddr;
 _memset($3, 0, 512)|0;
 var $4=$psize;
 _memset($4, 0, 512)|0;
 var $5=$1;
 var $6=_read8($5);
 $npos=$6;
 var $7=$1;
 var $8=_read8($7);
 $ntk_byte=$8;
 var $9=$1;
 var $10=_read16b($9);
 var $11=$1;
 var $12=_read32b($11);
 $saddr=$12;
 var $13=$2;
 var $14=_pw_write_zero($13,20);
 $i=0;
 label=2;break;
 case 2: 
 var $16=$i;
 var $17=($16|0)<31;
 if($17){label=3;break;}else{label=5;break;}
 case 3: 
 var $19=$2;
 var $20=_pw_write_zero($19,22);
 var $21=$2;
 var $22=$1;
 var $23=_read16b($22);
 var $24=($23&65535);
 $size=$24;
 var $25=(($24)&65535);
 _write16b($21,$25);
 var $26=$size;
 var $27=($26<<1);
 var $28=$ssize;
 var $29=((($28)+($27))|0);
 $ssize=$29;
 var $30=$2;
 var $31=$1;
 var $32=_read8($31);
 _write8($30,$32);
 var $33=$2;
 var $34=$1;
 var $35=_read8($34);
 _write8($33,$35);
 var $36=$2;
 var $37=$1;
 var $38=_read16b($37);
 _write16b($36,$38);
 var $39=$2;
 var $40=$1;
 var $41=_read16b($40);
 _write16b($39,$41);
 label=4;break;
 case 4: 
 var $43=$i;
 var $44=((($43)+(1))|0);
 $i=$44;
 label=2;break;
 case 5: 
 $npat=0;
 label=6;break;
 case 6: 
 var $47=$npat;
 var $48=($47&255);
 var $49=($48|0)<128;
 if($49){label=7;break;}else{label=11;break;}
 case 7: 
 var $51=$1;
 var $52=_read32b($51);
 var $53=$npat;
 var $54=($53&255);
 var $55=(($paddr+($54<<2))|0);
 HEAP32[(($55)>>2)]=$52;
 var $56=$npat;
 var $57=($56&255);
 var $58=(($paddr+($57<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=8;break;}else{label=9;break;}
 case 8: 
 label=11;break;
 case 9: 
 label=10;break;
 case 10: 
 var $64=$npat;
 var $65=((($64)+(1))&255);
 $npat=$65;
 label=6;break;
 case 11: 
 var $67=$npat;
 var $68=((($67)-(1))&255);
 $npat=$68;
 $i=0;
 label=12;break;
 case 12: 
 var $70=$i;
 var $71=$npat;
 var $72=($71&255);
 var $73=((($72)-(1))|0);
 var $74=($70|0)<($73|0);
 if($74){label=13;break;}else{label=15;break;}
 case 13: 
 var $76=$i;
 var $77=((($76)+(1))|0);
 var $78=(($paddr+($77<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$i;
 var $81=(($paddr+($80<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=((($79)-($82))|0);
 var $84=$i;
 var $85=(($psize+($84<<2))|0);
 HEAP32[(($85)>>2)]=$83;
 label=14;break;
 case 14: 
 var $87=$i;
 var $88=((($87)+(1))|0);
 $i=$88;
 label=12;break;
 case 15: 
 var $90=$2;
 var $91=$npos;
 _write8($90,$91);
 var $92=$2;
 var $93=$ntk_byte;
 _write8($92,$93);
 var $94=$1;
 var $95=_fseek($94,768,0);
 var $96=$2;
 var $97=$1;
 var $98=_pw_move_data($96,$97,128);
 var $99=$2;
 _write32b($99,1294879534);
 $i=0;
 label=16;break;
 case 16: 
 var $101=$i;
 var $102=$npat;
 var $103=($102&255);
 var $104=($101|0)<($103|0);
 if($104){label=17;break;}else{label=40;break;}
 case 17: 
 var $106=$1;
 var $107=$i;
 var $108=(($paddr+($107<<2))|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=_fseek($106,$109,0);
 var $111=$1;
 var $112=_read32b($111);
 $tsize1=$112;
 var $113=$1;
 var $114=_read32b($113);
 $tsize2=$114;
 var $115=$1;
 var $116=_read32b($115);
 $tsize3=$116;
 var $117=$tmp;
 _memset($117, 0, 1024)|0;
 $k=0;
 label=18;break;
 case 18: 
 var $119=$k;
 var $120=($119|0)<4;
 if($120){label=19;break;}else{label=38;break;}
 case 19: 
 $j=0;
 label=20;break;
 case 20: 
 var $123=$j;
 var $124=($123|0)<64;
 if($124){label=21;break;}else{label=36;break;}
 case 21: 
 var $126=$j;
 var $127=($126<<4);
 var $128=$k;
 var $129=($128<<2);
 var $130=((($127)+($129))|0);
 $x=$130;
 $fxp=0;
 $fxt=0;
 $ins=0;
 $note=0;
 var $131=$1;
 var $132=_read8($131);
 $c1=$132;
 var $133=$c1;
 var $134=($133&255);
 var $135=$134&128;
 var $136=($135|0)!=0;
 if($136){label=22;break;}else{label=23;break;}
 case 22: 
 var $138=$c1;
 var $139=($138&255);
 var $140=$139&127;
 var $141=(($140)&255);
 $c4=$141;
 var $142=$c4;
 var $143=($142&255);
 var $144=((($143)-(1))|0);
 var $145=$j;
 var $146=((($145)+($144))|0);
 $j=$146;
 label=35;break;
 case 23: 
 var $148=$1;
 var $149=_read8($148);
 $c2=$149;
 var $150=$c1;
 var $151=($150&255);
 var $152=$151&192;
 var $153=$152>>2;
 var $154=$c2;
 var $155=($154&255);
 var $156=$155>>4;
 var $157=$156&15;
 var $158=$153|$157;
 var $159=(($158)&255);
 $ins=$159;
 var $160=$c1;
 var $161=($160&255);
 var $162=$161&63;
 var $163=(($162)&255);
 $note=$163;
 var $164=$note;
 var $165=($164&255);
 var $166=($165|0)==63;
 if($166){label=24;break;}else{label=25;break;}
 case 24: 
 var $168=$NO_NOTE;
 $note=$168;
 label=28;break;
 case 25: 
 var $170=$note;
 var $171=(($170<<24)>>24)!=0;
 if($171){label=26;break;}else{label=27;break;}
 case 26: 
 var $173=$note;
 var $174=($173&255);
 var $175=((($174)-(11))|0);
 var $176=(($175)&255);
 $note=$176;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $179=$note;
 var $180=($179&255);
 var $181=($180|0)==0;
 if($181){label=29;break;}else{label=30;break;}
 case 29: 
 var $183=$note;
 var $184=((($183)+(1))&255);
 $note=$184;
 label=30;break;
 case 30: 
 var $186=$ins;
 var $187=($186&255);
 var $188=$187&240;
 var $189=(($188)&255);
 var $190=$x;
 var $191=(($tmp+$190)|0);
 HEAP8[($191)]=$189;
 var $192=$note;
 var $193=($192&255);
 var $194=$NO_NOTE;
 var $195=($194&255);
 var $196=($193|0)!=($195|0);
 if($196){label=31;break;}else{label=32;break;}
 case 31: 
 var $198=$note;
 var $199=($198&255);
 var $200=((4504+($199<<1))|0);
 var $201=(($200)|0);
 var $202=HEAP8[($201)];
 var $203=($202&255);
 var $204=$x;
 var $205=(($tmp+$204)|0);
 var $206=HEAP8[($205)];
 var $207=($206&255);
 var $208=$207|$203;
 var $209=(($208)&255);
 HEAP8[($205)]=$209;
 var $210=$note;
 var $211=($210&255);
 var $212=((4504+($211<<1))|0);
 var $213=(($212+1)|0);
 var $214=HEAP8[($213)];
 var $215=$x;
 var $216=((($215)+(1))|0);
 var $217=(($tmp+$216)|0);
 HEAP8[($217)]=$214;
 label=32;break;
 case 32: 
 var $219=$c2;
 var $220=($219&255);
 var $221=$220&15;
 var $222=($221|0)==7;
 if($222){label=33;break;}else{label=34;break;}
 case 33: 
 $fxt=0;
 $fxp=0;
 var $224=$ins;
 var $225=($224&255);
 var $226=$225<<4;
 var $227=$226&240;
 var $228=(($227)&255);
 var $229=$x;
 var $230=((($229)+(2))|0);
 var $231=(($tmp+$230)|0);
 HEAP8[($231)]=$228;
 label=35;break;
 case 34: 
 var $233=$1;
 var $234=_read8($233);
 $c3=$234;
 var $235=$c2;
 var $236=($235&255);
 var $237=$236&15;
 var $238=(($237)&255);
 $fxt=$238;
 var $239=$c3;
 $fxp=$239;
 var $240=$ins;
 var $241=($240&255);
 var $242=$241<<4;
 var $243=$242&240;
 var $244=$fxt;
 var $245=($244&255);
 var $246=$243|$245;
 var $247=(($246)&255);
 var $248=$x;
 var $249=((($248)+(2))|0);
 var $250=(($tmp+$249)|0);
 HEAP8[($250)]=$247;
 var $251=$fxp;
 var $252=$x;
 var $253=((($252)+(3))|0);
 var $254=(($tmp+$253)|0);
 HEAP8[($254)]=$251;
 label=35;break;
 case 35: 
 var $256=$j;
 var $257=((($256)+(1))|0);
 $j=$257;
 label=20;break;
 case 36: 
 label=37;break;
 case 37: 
 var $260=$k;
 var $261=((($260)+(1))|0);
 $k=$261;
 label=18;break;
 case 38: 
 var $263=(($tmp)|0);
 var $264=$2;
 var $265=_fwrite($263,1024,1,$264);
 label=39;break;
 case 39: 
 var $267=$i;
 var $268=((($267)+(1))|0);
 $i=$268;
 label=16;break;
 case 40: 
 var $270=$1;
 var $271=$saddr;
 var $272=_fseek($270,$271,0);
 var $273=$2;
 var $274=$1;
 var $275=$ssize;
 var $276=_pw_move_data($273,$274,$275);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_di($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ssize;
 var $start;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<21;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((21)-($9))|0);
 $1=$10;
 label=46;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=_readmem16b($15);
 var $17=($16&65535);
 $k=$17;
 var $18=$k;
 var $19=($18|0)>31;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=46;break;
 case 7: 
 $l=0;
 $j=0;
 label=8;break;
 case 8: 
 var $23=$j;
 var $24=$k;
 var $25=($23|0)<($24|0);
 if($25){label=9;break;}else{label=21;break;}
 case 9: 
 var $27=$2;
 var $28=$start;
 var $29=(($27+$28)|0);
 var $30=(($29+14)|0);
 var $31=_readmem16b($30);
 var $32=($31&65535);
 var $33=($32<<1);
 $o=$33;
 var $34=$2;
 var $35=$start;
 var $36=(($34+$35)|0);
 var $37=(($36+18)|0);
 var $38=_readmem16b($37);
 var $39=($38&65535);
 var $40=($39<<1);
 $m=$40;
 var $41=$2;
 var $42=$start;
 var $43=(($41+$42)|0);
 var $44=(($43+20)|0);
 var $45=_readmem16b($44);
 var $46=($45&65535);
 var $47=($46<<1);
 $n=$47;
 var $48=$o;
 var $49=($48|0)>65535;
 if($49){label=12;break;}else{label=10;break;}
 case 10: 
 var $51=$m;
 var $52=($51|0)>65535;
 if($52){label=12;break;}else{label=11;break;}
 case 11: 
 var $54=$n;
 var $55=($54|0)>65535;
 if($55){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=46;break;
 case 13: 
 var $58=$m;
 var $59=$n;
 var $60=((($58)+($59))|0);
 var $61=$o;
 var $62=($60|0)>($61|0);
 if($62){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=46;break;
 case 15: 
 var $65=$start;
 var $66=((($65)+(16))|0);
 var $67=$j;
 var $68=($67<<3);
 var $69=((($66)+($68))|0);
 var $70=$2;
 var $71=(($70+$69)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=($73|0)>15;
 if($74){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=46;break;
 case 17: 
 var $77=$start;
 var $78=((($77)+(17))|0);
 var $79=$j;
 var $80=($79<<3);
 var $81=((($78)+($80))|0);
 var $82=$2;
 var $83=(($82+$81)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=($85|0)>64;
 if($86){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=46;break;
 case 19: 
 var $89=$o;
 var $90=$l;
 var $91=((($90)+($89))|0);
 $l=$91;
 label=20;break;
 case 20: 
 var $93=$j;
 var $94=((($93)+(1))|0);
 $j=$94;
 label=8;break;
 case 21: 
 var $96=$l;
 var $97=($96|0)<=2;
 if($97){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=46;break;
 case 23: 
 var $100=$k;
 var $101=($100<<3);
 var $102=((($101)+(2))|0);
 $ssize=$102;
 var $103=$2;
 var $104=$start;
 var $105=(($103+$104)|0);
 var $106=(($105+2)|0);
 var $107=_readmem32b($106);
 $j=$107;
 var $108=$2;
 var $109=$start;
 var $110=(($108+$109)|0);
 var $111=(($110+6)|0);
 var $112=_readmem32b($111);
 $k=$112;
 var $113=$2;
 var $114=$start;
 var $115=(($113+$114)|0);
 var $116=(($115+10)|0);
 var $117=_readmem32b($116);
 $l=$117;
 var $118=$k;
 var $119=$j;
 var $120=($118|0)<=($119|0);
 if($120){label=26;break;}else{label=24;break;}
 case 24: 
 var $122=$l;
 var $123=$j;
 var $124=($122|0)<=($123|0);
 if($124){label=26;break;}else{label=25;break;}
 case 25: 
 var $126=$l;
 var $127=$k;
 var $128=($126|0)<=($127|0);
 if($128){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=46;break;
 case 27: 
 var $131=$k;
 var $132=$j;
 var $133=((($131)-($132))|0);
 var $134=($133|0)>128;
 if($134){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=46;break;
 case 29: 
 var $137=$j;
 var $138=$ssize;
 var $139=($137|0)<($138|0);
 if($139){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=46;break;
 case 31: 
 label=32;break;
 case 32: 
 var $143=$4;
 var $144=$start;
 var $145=$k;
 var $146=((($144)+($145))|0);
 var $147=((($146)-(1))|0);
 var $148=($143|0)<($147|0);
 if($148){label=33;break;}else{label=34;break;}
 case 33: 
 var $150=$start;
 var $151=$k;
 var $152=((($150)+($151))|0);
 var $153=((($152)-(1))|0);
 var $154=$4;
 var $155=((($153)-($154))|0);
 $1=$155;
 label=46;break;
 case 34: 
 label=35;break;
 case 35: 
 var $158=$j;
 $m=$158;
 label=36;break;
 case 36: 
 var $160=$m;
 var $161=$k;
 var $162=((($161)-(1))|0);
 var $163=($160|0)<($162|0);
 if($163){label=37;break;}else{label=41;break;}
 case 37: 
 var $165=$start;
 var $166=$m;
 var $167=((($165)+($166))|0);
 var $168=$2;
 var $169=(($168+$167)|0);
 var $170=HEAP8[($169)];
 var $171=($170&255);
 var $172=($171|0)>128;
 if($172){label=38;break;}else{label=39;break;}
 case 38: 
 $1=-1;
 label=46;break;
 case 39: 
 label=40;break;
 case 40: 
 var $176=$m;
 var $177=((($176)+(1))|0);
 $m=$177;
 label=36;break;
 case 41: 
 var $179=$start;
 var $180=$k;
 var $181=((($179)+($180))|0);
 var $182=((($181)-(1))|0);
 var $183=$2;
 var $184=(($183+$182)|0);
 var $185=HEAP8[($184)];
 var $186=($185&255);
 var $187=($186|0)!=255;
 if($187){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=46;break;
 case 43: 
 var $190=$l;
 var $191=($190|0)>65535;
 if($191){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=46;break;
 case 45: 
 var $194=$3;
 _pw_read_title(0,$194,0);
 $1=0;
 label=46;break;
 case 46: 
 var $196=$1;
 STACKTOP=sp;return $196;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_di($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $ptk_tab=sp;
 var $nins;
 var $npat;
 var $max;
 var $ptable=(sp)+(8);
 var $paddr=(sp)+(136);
 var $tmp=(sp)+(392);
 var $i;
 var $k;
 var $seq_offs;
 var $pat_offs;
 var $smp_offs;
 var $pos;
 var $size;
 var $ssize;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$ptk_tab;
 HEAP8[($4)]=0; HEAP8[((($4)+(1))|0)]=0; HEAP8[((($4)+(2))|0)]=0; HEAP8[((($4)+(3))|0)]=0; HEAP8[((($4)+(4))|0)]=0;
 var $5=$paddr;
 _memset($5, 0, 128)|0;
 var $6=$2;
 var $7=_pw_write_zero($6,20);
 var $8=$1;
 var $9=_read16b($8);
 var $10=(($9)&255);
 $nins=$10;
 var $11=$1;
 var $12=_read32b($11);
 $seq_offs=$12;
 var $13=$1;
 var $14=_read32b($13);
 $pat_offs=$14;
 var $15=$1;
 var $16=_read32b($15);
 $smp_offs=$16;
 $i=0;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=$nins;
 var $20=($19&255);
 var $21=($18|0)<($20|0);
 if($21){label=3;break;}else{label=5;break;}
 case 3: 
 var $23=$2;
 var $24=_pw_write_zero($23,22);
 var $25=$2;
 var $26=$1;
 var $27=_read16b($26);
 var $28=($27&65535);
 $size=$28;
 var $29=(($28)&65535);
 _write16b($25,$29);
 var $30=$size;
 var $31=($30<<1);
 var $32=$ssize;
 var $33=((($32)+($31))|0);
 $ssize=$33;
 var $34=$2;
 var $35=$1;
 var $36=_read8($35);
 _write8($34,$36);
 var $37=$2;
 var $38=$1;
 var $39=_read8($38);
 _write8($37,$39);
 var $40=$2;
 var $41=$1;
 var $42=_read16b($41);
 _write16b($40,$42);
 var $43=$2;
 var $44=$1;
 var $45=_read16b($44);
 _write16b($43,$45);
 label=4;break;
 case 4: 
 var $47=$i;
 var $48=((($47)+(1))|0);
 $i=$48;
 label=2;break;
 case 5: 
 var $50=$tmp;
 _memset($50, 0, 50)|0;
 var $51=$nins;
 var $52=($51&255);
 $i=$52;
 label=6;break;
 case 6: 
 var $54=$i;
 var $55=($54|0)<31;
 if($55){label=7;break;}else{label=9;break;}
 case 7: 
 var $57=(($tmp)|0);
 var $58=$2;
 var $59=_fwrite($57,30,1,$58);
 label=8;break;
 case 8: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=6;break;
 case 9: 
 var $64=$1;
 var $65=_ftell($64);
 $pos=$65;
 var $66=$1;
 var $67=$seq_offs;
 var $68=_fseek($66,$67,0);
 $i=0;
 label=10;break;
 case 10: 
 var $70=$1;
 var $71=_read8($70);
 $c1=$71;
 var $72=$c1;
 var $73=$i;
 var $74=((($73)+(1))|0);
 $i=$74;
 var $75=(($ptable+$73)|0);
 HEAP8[($75)]=$72;
 label=11;break;
 case 11: 
 var $77=$c1;
 var $78=($77&255);
 var $79=($78|0)!=255;
 if($79){label=10;break;}else{label=12;break;}
 case 12: 
 var $81=$i;
 var $82=((($81)-(1))|0);
 var $83=(($ptable+$82)|0);
 HEAP8[($83)]=0;
 var $84=$2;
 var $85=$i;
 var $86=((($85)-(1))|0);
 var $87=(($86)&255);
 $npat=$87;
 _write8($84,$87);
 var $88=$2;
 _write8($88,127);
 $i=0;
 $max=0;
 label=13;break;
 case 13: 
 var $90=$i;
 var $91=($90|0)<128;
 if($91){label=14;break;}else{label=18;break;}
 case 14: 
 var $93=$2;
 var $94=$i;
 var $95=(($ptable+$94)|0);
 var $96=HEAP8[($95)];
 _write8($93,$96);
 var $97=$i;
 var $98=(($ptable+$97)|0);
 var $99=HEAP8[($98)];
 var $100=($99&255);
 var $101=$max;
 var $102=($101&255);
 var $103=($100|0)>($102|0);
 if($103){label=15;break;}else{label=16;break;}
 case 15: 
 var $105=$i;
 var $106=(($ptable+$105)|0);
 var $107=HEAP8[($106)];
 $max=$107;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $110=$i;
 var $111=((($110)+(1))|0);
 $i=$111;
 label=13;break;
 case 18: 
 var $113=$2;
 _write32b($113,1294879534);
 var $114=$1;
 var $115=$pos;
 var $116=_fseek($114,$115,0);
 $i=0;
 label=19;break;
 case 19: 
 var $118=$i;
 var $119=$max;
 var $120=($119&255);
 var $121=($118|0)<=($120|0);
 if($121){label=20;break;}else{label=22;break;}
 case 20: 
 var $123=$1;
 var $124=_read16b($123);
 var $125=$i;
 var $126=(($paddr+($125<<1))|0);
 HEAP16[(($126)>>1)]=$124;
 label=21;break;
 case 21: 
 var $128=$i;
 var $129=((($128)+(1))|0);
 $i=$129;
 label=19;break;
 case 22: 
 $i=0;
 label=23;break;
 case 23: 
 var $132=$i;
 var $133=$max;
 var $134=($133&255);
 var $135=($132|0)<=($134|0);
 if($135){label=24;break;}else{label=34;break;}
 case 24: 
 var $137=$1;
 var $138=$i;
 var $139=(($paddr+($138<<1))|0);
 var $140=HEAP16[(($139)>>1)];
 var $141=($140&65535);
 var $142=_fseek($137,$141,0);
 $k=0;
 label=25;break;
 case 25: 
 var $144=$k;
 var $145=($144|0)<256;
 if($145){label=26;break;}else{label=32;break;}
 case 26: 
 var $147=$ptk_tab;
 HEAP8[($147)]=0; HEAP8[((($147)+(1))|0)]=0; HEAP8[((($147)+(2))|0)]=0; HEAP8[((($147)+(3))|0)]=0; HEAP8[((($147)+(4))|0)]=0;
 var $148=$1;
 var $149=_read8($148);
 $c1=$149;
 var $150=$c1;
 var $151=($150&255);
 var $152=$151&128;
 var $153=($152|0)==0;
 if($153){label=27;break;}else{label=28;break;}
 case 27: 
 var $155=$1;
 var $156=_read8($155);
 $c2=$156;
 var $157=$c1;
 var $158=($157&255);
 var $159=$158<<4;
 var $160=$159&48;
 var $161=$c2;
 var $162=($161&255);
 var $163=$162>>4;
 var $164=$163&15;
 var $165=$160|$164;
 var $166=(($165)&255);
 $note=$166;
 var $167=$note;
 var $168=($167&255);
 var $169=((4504+($168<<1))|0);
 var $170=(($169)|0);
 var $171=HEAP8[($170)];
 var $172=(($ptk_tab)|0);
 HEAP8[($172)]=$171;
 var $173=$note;
 var $174=($173&255);
 var $175=((4504+($174<<1))|0);
 var $176=(($175+1)|0);
 var $177=HEAP8[($176)];
 var $178=(($ptk_tab+1)|0);
 HEAP8[($178)]=$177;
 var $179=$c1;
 var $180=($179&255);
 var $181=$180>>2;
 var $182=$181&31;
 var $183=(($182)&255);
 $ins=$183;
 var $184=$ins;
 var $185=($184&255);
 var $186=$185&240;
 var $187=(($ptk_tab)|0);
 var $188=HEAP8[($187)];
 var $189=($188&255);
 var $190=$189|$186;
 var $191=(($190)&255);
 HEAP8[($187)]=$191;
 var $192=$ins;
 var $193=($192&255);
 var $194=$193<<4;
 var $195=$194&240;
 var $196=(($195)&255);
 var $197=(($ptk_tab+2)|0);
 HEAP8[($197)]=$196;
 var $198=$c2;
 var $199=($198&255);
 var $200=$199&15;
 var $201=(($200)&255);
 $fxt=$201;
 var $202=$fxt;
 var $203=($202&255);
 var $204=(($ptk_tab+2)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$206|$203;
 var $208=(($207)&255);
 HEAP8[($204)]=$208;
 $fxp=0;
 var $209=$fxp;
 var $210=(($ptk_tab+3)|0);
 HEAP8[($210)]=$209;
 var $211=(($ptk_tab)|0);
 var $212=$2;
 var $213=_fwrite($211,4,1,$212);
 label=31;break;
 case 28: 
 var $215=$c1;
 var $216=($215&255);
 var $217=($216|0)==255;
 if($217){label=29;break;}else{label=30;break;}
 case 29: 
 var $219=$ptk_tab;
 HEAP8[($219)]=0; HEAP8[((($219)+(1))|0)]=0; HEAP8[((($219)+(2))|0)]=0; HEAP8[((($219)+(3))|0)]=0; HEAP8[((($219)+(4))|0)]=0;
 var $220=(($ptk_tab)|0);
 var $221=$2;
 var $222=_fwrite($220,4,1,$221);
 label=31;break;
 case 30: 
 var $224=$1;
 var $225=_read8($224);
 $c2=$225;
 var $226=$1;
 var $227=_read8($226);
 $c3=$227;
 var $228=$c1;
 var $229=($228&255);
 var $230=$229<<4;
 var $231=$230&48;
 var $232=$c2;
 var $233=($232&255);
 var $234=$233>>4;
 var $235=$234&15;
 var $236=$231|$235;
 var $237=(($236)&255);
 $note=$237;
 var $238=$note;
 var $239=($238&255);
 var $240=((4504+($239<<1))|0);
 var $241=(($240)|0);
 var $242=HEAP8[($241)];
 var $243=(($ptk_tab)|0);
 HEAP8[($243)]=$242;
 var $244=$note;
 var $245=($244&255);
 var $246=((4504+($245<<1))|0);
 var $247=(($246+1)|0);
 var $248=HEAP8[($247)];
 var $249=(($ptk_tab+1)|0);
 HEAP8[($249)]=$248;
 var $250=$c1;
 var $251=($250&255);
 var $252=$251>>2;
 var $253=$252&31;
 var $254=(($253)&255);
 $ins=$254;
 var $255=$ins;
 var $256=($255&255);
 var $257=$256&240;
 var $258=(($ptk_tab)|0);
 var $259=HEAP8[($258)];
 var $260=($259&255);
 var $261=$260|$257;
 var $262=(($261)&255);
 HEAP8[($258)]=$262;
 var $263=$ins;
 var $264=($263&255);
 var $265=$264<<4;
 var $266=$265&240;
 var $267=(($266)&255);
 var $268=(($ptk_tab+2)|0);
 HEAP8[($268)]=$267;
 var $269=$c2;
 var $270=($269&255);
 var $271=$270&15;
 var $272=(($271)&255);
 $fxt=$272;
 var $273=$fxt;
 var $274=($273&255);
 var $275=(($ptk_tab+2)|0);
 var $276=HEAP8[($275)];
 var $277=($276&255);
 var $278=$277|$274;
 var $279=(($278)&255);
 HEAP8[($275)]=$279;
 var $280=$c3;
 $fxp=$280;
 var $281=$fxp;
 var $282=(($ptk_tab+3)|0);
 HEAP8[($282)]=$281;
 var $283=(($ptk_tab)|0);
 var $284=$2;
 var $285=_fwrite($283,4,1,$284);
 label=31;break;
 case 31: 
 var $287=$k;
 var $288=((($287)+(1))|0);
 $k=$288;
 label=25;break;
 case 32: 
 label=33;break;
 case 33: 
 var $291=$i;
 var $292=((($291)+(1))|0);
 $i=$292;
 label=23;break;
 case 34: 
 var $294=$1;
 var $295=$smp_offs;
 var $296=_fseek($294,$295,0);
 var $297=$2;
 var $298=$1;
 var $299=$ssize;
 var $300=_pw_move_data($297,$298,$299);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_eu($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1084;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1084)-($9))|0);
 $1=$10;
 label=69;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$start;
 var $14=((($13)+(950))|0);
 var $15=$2;
 var $16=(($15+$14)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 $j=$18;
 var $19=$j;
 var $20=($19|0)==0;
 if($20){label=7;break;}else{label=6;break;}
 case 6: 
 var $22=$j;
 var $23=($22|0)>127;
 if($23){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=69;break;
 case 8: 
 $k=0;
 label=9;break;
 case 9: 
 var $27=$k;
 var $28=($27|0)<31;
 if($28){label=10;break;}else{label=21;break;}
 case 10: 
 var $30=$start;
 var $31=((($30)+(42))|0);
 var $32=$k;
 var $33=((($32)*(30))&-1);
 var $34=((($31)+($33))|0);
 var $35=$2;
 var $36=(($35+$34)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=$38<<8;
 var $40=$start;
 var $41=((($40)+(43))|0);
 var $42=$k;
 var $43=((($42)*(30))&-1);
 var $44=((($41)+($43))|0);
 var $45=$2;
 var $46=(($45+$44)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=((($39)+($48))|0);
 $o=$49;
 var $50=$start;
 var $51=((($50)+(46))|0);
 var $52=$k;
 var $53=((($52)*(30))&-1);
 var $54=((($51)+($53))|0);
 var $55=$2;
 var $56=(($55+$54)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=$58<<8;
 var $60=$start;
 var $61=((($60)+(47))|0);
 var $62=$k;
 var $63=((($62)*(30))&-1);
 var $64=((($61)+($63))|0);
 var $65=$2;
 var $66=(($65+$64)|0);
 var $67=HEAP8[($66)];
 var $68=($67&255);
 var $69=((($59)+($68))|0);
 $m=$69;
 var $70=$start;
 var $71=((($70)+(48))|0);
 var $72=$k;
 var $73=((($72)*(30))&-1);
 var $74=((($71)+($73))|0);
 var $75=$2;
 var $76=(($75+$74)|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=$78<<8;
 var $80=$start;
 var $81=((($80)+(49))|0);
 var $82=$k;
 var $83=((($82)*(30))&-1);
 var $84=((($81)+($83))|0);
 var $85=$2;
 var $86=(($85+$84)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=((($79)+($88))|0);
 $n=$89;
 var $90=$o;
 var $91=($90<<1);
 $o=$91;
 var $92=$m;
 var $93=($92<<1);
 $m=$93;
 var $94=$n;
 var $95=($94<<1);
 $n=$95;
 var $96=$o;
 var $97=($96|0)>65535;
 if($97){label=13;break;}else{label=11;break;}
 case 11: 
 var $99=$m;
 var $100=($99|0)>65535;
 if($100){label=13;break;}else{label=12;break;}
 case 12: 
 var $102=$n;
 var $103=($102|0)>65535;
 if($103){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=69;break;
 case 14: 
 var $106=$m;
 var $107=$n;
 var $108=((($106)+($107))|0);
 var $109=$o;
 var $110=((($109)+(2))|0);
 var $111=($108|0)>($110|0);
 if($111){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=69;break;
 case 16: 
 var $114=$start;
 var $115=((($114)+(44))|0);
 var $116=$k;
 var $117=((($116)*(30))&-1);
 var $118=((($115)+($117))|0);
 var $119=$2;
 var $120=(($119+$118)|0);
 var $121=HEAP8[($120)];
 var $122=($121&255);
 var $123=($122|0)>15;
 if($123){label=18;break;}else{label=17;break;}
 case 17: 
 var $125=$start;
 var $126=((($125)+(45))|0);
 var $127=$k;
 var $128=((($127)*(30))&-1);
 var $129=((($126)+($128))|0);
 var $130=$2;
 var $131=(($130+$129)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=($133|0)>64;
 if($134){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=69;break;
 case 19: 
 label=20;break;
 case 20: 
 var $138=$k;
 var $139=((($138)+(1))|0);
 $k=$139;
 label=9;break;
 case 21: 
 var $141=$start;
 var $142=((($141)+(1080))|0);
 var $143=$2;
 var $144=(($143+$142)|0);
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=$146<<24;
 var $148=$start;
 var $149=((($148)+(1081))|0);
 var $150=$2;
 var $151=(($150+$149)|0);
 var $152=HEAP8[($151)];
 var $153=($152&255);
 var $154=$153<<16;
 var $155=((($147)+($154))|0);
 var $156=$start;
 var $157=((($156)+(1082))|0);
 var $158=$2;
 var $159=(($158+$157)|0);
 var $160=HEAP8[($159)];
 var $161=($160&255);
 var $162=$161<<8;
 var $163=((($155)+($162))|0);
 var $164=$start;
 var $165=((($164)+(1083))|0);
 var $166=$2;
 var $167=(($166+$165)|0);
 var $168=HEAP8[($167)];
 var $169=($168&255);
 var $170=((($163)+($169))|0);
 $l=$170;
 var $171=$l;
 var $172=($171|0)<1084;
 if($172){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=69;break;
 case 23: 
 $m=0;
 $k=0;
 label=24;break;
 case 24: 
 var $176=$k;
 var $177=$j;
 var $178=($176|0)<($177|0);
 if($178){label=25;break;}else{label=31;break;}
 case 25: 
 var $180=$start;
 var $181=((($180)+(952))|0);
 var $182=$k;
 var $183=((($181)+($182))|0);
 var $184=$2;
 var $185=(($184+$183)|0);
 var $186=HEAP8[($185)];
 var $187=($186&255);
 $n=$187;
 var $188=$n;
 var $189=$m;
 var $190=($188|0)>($189|0);
 if($190){label=26;break;}else{label=27;break;}
 case 26: 
 var $192=$n;
 $m=$192;
 label=27;break;
 case 27: 
 var $194=$n;
 var $195=($194|0)>127;
 if($195){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=69;break;
 case 29: 
 label=30;break;
 case 30: 
 var $199=$k;
 var $200=((($199)+(1))|0);
 $k=$200;
 label=24;break;
 case 31: 
 var $202=$k;
 var $203=((($202)+(2))|0);
 $k=$203;
 label=32;break;
 case 32: 
 var $205=$k;
 var $206=($205|0)!=128;
 if($206){label=33;break;}else{label=36;break;}
 case 33: 
 var $208=$start;
 var $209=((($208)+(952))|0);
 var $210=$k;
 var $211=((($209)+($210))|0);
 var $212=$2;
 var $213=(($212+$211)|0);
 var $214=HEAP8[($213)];
 var $215=($214&255);
 var $216=($215|0)!=0;
 if($216){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=69;break;
 case 35: 
 var $219=$k;
 var $220=((($219)+(1))|0);
 $k=$220;
 label=32;break;
 case 36: 
 var $222=$m;
 var $223=((($222)+(1))|0);
 $m=$223;
 $n=0;
 $j=999999;
 label=37;break;
 case 37: 
 var $225=$4;
 var $226=$start;
 var $227=$m;
 var $228=($227<<2);
 var $229=($228<<1);
 var $230=((($226)+($229))|0);
 var $231=((($230)+(1085))|0);
 var $232=($225|0)<($231|0);
 if($232){label=38;break;}else{label=39;break;}
 case 38: 
 var $234=$start;
 var $235=$m;
 var $236=($235<<2);
 var $237=($236<<1);
 var $238=((($234)+($237))|0);
 var $239=((($238)+(1085))|0);
 var $240=$4;
 var $241=((($239)-($240))|0);
 $1=$241;
 label=69;break;
 case 39: 
 label=40;break;
 case 40: 
 $k=0;
 label=41;break;
 case 41: 
 var $245=$k;
 var $246=$m;
 var $247=($246<<2);
 var $248=($245|0)<($247|0);
 if($248){label=42;break;}else{label=51;break;}
 case 42: 
 var $250=$start;
 var $251=$k;
 var $252=($251<<1);
 var $253=((($250)+($252))|0);
 var $254=((($253)+(1084))|0);
 var $255=$2;
 var $256=(($255+$254)|0);
 var $257=HEAP8[($256)];
 var $258=($257&255);
 var $259=$258<<8;
 var $260=$start;
 var $261=$k;
 var $262=($261<<1);
 var $263=((($260)+($262))|0);
 var $264=((($263)+(1085))|0);
 var $265=$2;
 var $266=(($265+$264)|0);
 var $267=HEAP8[($266)];
 var $268=($267&255);
 var $269=((($259)+($268))|0);
 $o=$269;
 var $270=$o;
 var $271=$l;
 var $272=($270|0)>($271|0);
 if($272){label=44;break;}else{label=43;break;}
 case 43: 
 var $274=$o;
 var $275=($274|0)<1084;
 if($275){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=69;break;
 case 45: 
 var $278=$o;
 var $279=$n;
 var $280=($278|0)>($279|0);
 if($280){label=46;break;}else{label=47;break;}
 case 46: 
 var $282=$o;
 $n=$282;
 label=47;break;
 case 47: 
 var $284=$o;
 var $285=$j;
 var $286=($284|0)<($285|0);
 if($286){label=48;break;}else{label=49;break;}
 case 48: 
 var $288=$o;
 $j=$288;
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 var $291=$k;
 var $292=((($291)+(1))|0);
 $k=$292;
 label=41;break;
 case 51: 
 var $294=$j;
 $k=$294;
 label=52;break;
 case 52: 
 var $296=$k;
 var $297=$o;
 var $298=($296|0)<($297|0);
 if($298){label=53;break;}else{label=68;break;}
 case 53: 
 var $300=$start;
 var $301=$k;
 var $302=((($300)+($301))|0);
 var $303=$2;
 var $304=(($303+$302)|0);
 var $305=HEAP8[($304)];
 var $306=($305&255);
 var $307=$306&192;
 var $308=($307|0)==192;
 if($308){label=54;break;}else{label=55;break;}
 case 54: 
 label=67;break;
 case 55: 
 var $311=$start;
 var $312=$k;
 var $313=((($311)+($312))|0);
 var $314=$2;
 var $315=(($314+$313)|0);
 var $316=HEAP8[($315)];
 var $317=($316&255);
 var $318=$317&192;
 var $319=($318|0)==128;
 if($319){label=56;break;}else{label=57;break;}
 case 56: 
 var $321=$k;
 var $322=((($321)+(2))|0);
 $k=$322;
 label=67;break;
 case 57: 
 var $324=$start;
 var $325=$k;
 var $326=((($324)+($325))|0);
 var $327=$2;
 var $328=(($327+$326)|0);
 var $329=HEAP8[($328)];
 var $330=($329&255);
 var $331=$330&192;
 var $332=($331|0)==64;
 if($332){label=58;break;}else{label=62;break;}
 case 58: 
 var $334=$start;
 var $335=$k;
 var $336=((($334)+($335))|0);
 var $337=$2;
 var $338=(($337+$336)|0);
 var $339=HEAP8[($338)];
 var $340=($339&255);
 var $341=$340&63;
 var $342=($341|0)==0;
 if($342){label=59;break;}else{label=61;break;}
 case 59: 
 var $344=$start;
 var $345=$k;
 var $346=((($344)+($345))|0);
 var $347=((($346)+(1))|0);
 var $348=$2;
 var $349=(($348+$347)|0);
 var $350=HEAP8[($349)];
 var $351=($350&255);
 var $352=($351|0)==0;
 if($352){label=60;break;}else{label=61;break;}
 case 60: 
 $1=-1;
 label=69;break;
 case 61: 
 var $355=$k;
 var $356=((($355)+(1))|0);
 $k=$356;
 label=67;break;
 case 62: 
 var $358=$start;
 var $359=$k;
 var $360=((($358)+($359))|0);
 var $361=$2;
 var $362=(($361+$360)|0);
 var $363=HEAP8[($362)];
 var $364=($363&255);
 var $365=$364&192;
 var $366=($365|0)==0;
 if($366){label=63;break;}else{label=66;break;}
 case 63: 
 var $368=$start;
 var $369=$k;
 var $370=((($368)+($369))|0);
 var $371=$2;
 var $372=(($371+$370)|0);
 var $373=HEAP8[($372)];
 var $374=($373&255);
 var $375=($374|0)>19;
 if($375){label=64;break;}else{label=65;break;}
 case 64: 
 $1=-1;
 label=69;break;
 case 65: 
 var $378=$k;
 var $379=((($378)+(3))|0);
 $k=$379;
 label=67;break;
 case 66: 
 label=67;break;
 case 67: 
 var $382=$k;
 var $383=((($382)+(1))|0);
 $k=$383;
 label=52;break;
 case 68: 
 var $385=$2;
 var $386=$3;
 _pw_read_title($385,$386,20);
 $1=0;
 label=69;break;
 case 69: 
 var $388=$1;
 STACKTOP=sp;return $388;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_eu($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $c1;
 var $npat;
 var $smp_addr;
 var $ssize;
 var $trk_addr=(sp)+(1080);
 var $i;
 var $j;
 var $k;
 var $x;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=(($tmp)|0);
 var $4=$1;
 var $5=_fread($3,1080,1,$4);
 var $6=(($tmp)|0);
 var $7=$2;
 var $8=_fwrite($6,1080,1,$7);
 $i=0;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=($10|0)<31;
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=(($tmp)|0);
 var $14=$i;
 var $15=((($14)*(30))&-1);
 var $16=(($13+$15)|0);
 var $17=(($16+42)|0);
 var $18=_readmem16b($17);
 var $19=($18&65535);
 var $20=($19<<1);
 var $21=$ssize;
 var $22=((($21)+($20))|0);
 $ssize=$22;
 label=4;break;
 case 4: 
 var $24=$i;
 var $25=((($24)+(1))|0);
 $i=$25;
 label=2;break;
 case 5: 
 $i=0;
 $npat=0;
 label=6;break;
 case 6: 
 var $28=$i;
 var $29=($28|0)<128;
 if($29){label=7;break;}else{label=11;break;}
 case 7: 
 var $31=$i;
 var $32=((($31)+(952))|0);
 var $33=(($tmp+$32)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$npat;
 var $37=($35|0)>($36|0);
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=$i;
 var $40=((($39)+(952))|0);
 var $41=(($tmp+$40)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 $npat=$43;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $46=$i;
 var $47=((($46)+(1))|0);
 $i=$47;
 label=6;break;
 case 11: 
 var $49=$npat;
 var $50=((($49)+(1))|0);
 $npat=$50;
 var $51=$2;
 _write32b($51,1294879534);
 var $52=$1;
 var $53=_read32b($52);
 $smp_addr=$53;
 $i=0;
 label=12;break;
 case 12: 
 var $55=$i;
 var $56=$npat;
 var $57=($55|0)<($56|0);
 if($57){label=13;break;}else{label=19;break;}
 case 13: 
 $j=0;
 label=14;break;
 case 14: 
 var $60=$j;
 var $61=($60|0)<4;
 if($61){label=15;break;}else{label=17;break;}
 case 15: 
 var $63=$1;
 var $64=_read16b($63);
 var $65=($64&65535);
 var $66=$j;
 var $67=$i;
 var $68=(($trk_addr+($67<<4))|0);
 var $69=(($68+($66<<2))|0);
 HEAP32[(($69)>>2)]=$65;
 label=16;break;
 case 16: 
 var $71=$j;
 var $72=((($71)+(1))|0);
 $j=$72;
 label=14;break;
 case 17: 
 label=18;break;
 case 18: 
 var $75=$i;
 var $76=((($75)+(1))|0);
 $i=$76;
 label=12;break;
 case 19: 
 $i=0;
 label=20;break;
 case 20: 
 var $79=$i;
 var $80=$npat;
 var $81=($79|0)<($80|0);
 if($81){label=21;break;}else{label=39;break;}
 case 21: 
 var $83=$tmp;
 _memset($83, 0, 1024)|0;
 $j=0;
 label=22;break;
 case 22: 
 var $85=$j;
 var $86=($85|0)<4;
 if($86){label=23;break;}else{label=37;break;}
 case 23: 
 var $88=$1;
 var $89=$j;
 var $90=$i;
 var $91=(($trk_addr+($90<<4))|0);
 var $92=(($91+($89<<2))|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=_fseek($88,$93,0);
 $k=0;
 label=24;break;
 case 24: 
 var $96=$k;
 var $97=($96|0)<64;
 if($97){label=25;break;}else{label=35;break;}
 case 25: 
 var $99=$k;
 var $100=($99<<4);
 var $101=$j;
 var $102=($101<<2);
 var $103=((($100)+($102))|0);
 var $104=(($tmp+$103)|0);
 $x=$104;
 var $105=$1;
 var $106=_read8($105);
 $c1=$106;
 var $107=$c1;
 var $108=($107&255);
 var $109=$108&192;
 var $110=($109|0)==0;
 if($110){label=26;break;}else{label=27;break;}
 case 26: 
 var $112=$c1;
 var $113=$x;
 var $114=(($113+1)|0);
 $x=$114;
 HEAP8[($113)]=$112;
 var $115=$1;
 var $116=_read8($115);
 var $117=$x;
 var $118=(($117+1)|0);
 $x=$118;
 HEAP8[($117)]=$116;
 var $119=$1;
 var $120=_read8($119);
 var $121=$x;
 var $122=(($121+1)|0);
 $x=$122;
 HEAP8[($121)]=$120;
 var $123=$1;
 var $124=_read8($123);
 var $125=$x;
 var $126=(($125+1)|0);
 $x=$126;
 HEAP8[($125)]=$124;
 label=34;break;
 case 27: 
 var $128=$c1;
 var $129=($128&255);
 var $130=$129&192;
 var $131=($130|0)==192;
 if($131){label=28;break;}else{label=29;break;}
 case 28: 
 var $133=$c1;
 var $134=($133&255);
 var $135=$134&63;
 var $136=$k;
 var $137=((($136)+($135))|0);
 $k=$137;
 label=34;break;
 case 29: 
 var $139=$c1;
 var $140=($139&255);
 var $141=$140&192;
 var $142=($141|0)==64;
 if($142){label=30;break;}else{label=31;break;}
 case 30: 
 var $144=$x;
 var $145=(($144+2)|0);
 $x=$145;
 var $146=$c1;
 var $147=($146&255);
 var $148=$147&15;
 var $149=(($148)&255);
 var $150=$x;
 var $151=(($150+1)|0);
 $x=$151;
 HEAP8[($150)]=$149;
 var $152=$1;
 var $153=_read8($152);
 var $154=$x;
 var $155=(($154+1)|0);
 $x=$155;
 HEAP8[($154)]=$153;
 label=34;break;
 case 31: 
 var $157=$c1;
 var $158=($157&255);
 var $159=$158&192;
 var $160=($159|0)==128;
 if($160){label=32;break;}else{label=33;break;}
 case 32: 
 var $162=$1;
 var $163=_read8($162);
 var $164=$x;
 var $165=(($164+1)|0);
 $x=$165;
 HEAP8[($164)]=$163;
 var $166=$1;
 var $167=_read8($166);
 var $168=$x;
 var $169=(($168+1)|0);
 $x=$169;
 HEAP8[($168)]=$167;
 var $170=$c1;
 var $171=($170&255);
 var $172=$171<<4;
 var $173=$172&240;
 var $174=(($173)&255);
 var $175=$x;
 var $176=(($175+1)|0);
 $x=$176;
 HEAP8[($175)]=$174;
 label=34;break;
 case 33: 
 label=34;break;
 case 34: 
 var $179=$k;
 var $180=((($179)+(1))|0);
 $k=$180;
 label=24;break;
 case 35: 
 label=36;break;
 case 36: 
 var $183=$j;
 var $184=((($183)+(1))|0);
 $j=$184;
 label=22;break;
 case 37: 
 var $186=(($tmp)|0);
 var $187=$2;
 var $188=_fwrite($186,1024,1,$187);
 label=38;break;
 case 38: 
 var $190=$i;
 var $191=((($190)+(1))|0);
 $i=$191;
 label=20;break;
 case 39: 
 var $193=$1;
 var $194=$smp_addr;
 var $195=_fseek($193,$194,0);
 var $196=$2;
 var $197=$1;
 var $198=$ssize;
 var $199=_pw_move_data($196,$197,$198);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_fcm($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 var $j;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<285;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((285)-($9))|0);
 $1=$10;
 label=21;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=70;
 if($17){label=9;break;}else{label=6;break;}
 case 6: 
 var $19=$2;
 var $20=(($19+1)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)!=67;
 if($23){label=9;break;}else{label=7;break;}
 case 7: 
 var $25=$2;
 var $26=(($25+2)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 var $29=($28|0)!=45;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=$2;
 var $32=(($31+3)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=($34|0)!=77;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=21;break;
 case 10: 
 var $38=$start;
 var $39=((($38)+(4))|0);
 var $40=$2;
 var $41=(($40+$39)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=($43|0)!=1;
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=21;break;
 case 12: 
 var $47=$start;
 var $48=((($47)+(5))|0);
 var $49=$2;
 var $50=(($49+$48)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=($52|0)!=0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=21;break;
 case 14: 
 $j=0;
 label=15;break;
 case 15: 
 var $57=$j;
 var $58=($57|0)<31;
 if($58){label=16;break;}else{label=20;break;}
 case 16: 
 var $60=$start;
 var $61=((($60)+(37))|0);
 var $62=$j;
 var $63=($62<<3);
 var $64=((($61)+($63))|0);
 var $65=$2;
 var $66=(($65+$64)|0);
 var $67=HEAP8[($66)];
 var $68=($67&255);
 var $69=($68|0)>64;
 if($69){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=21;break;
 case 18: 
 label=19;break;
 case 19: 
 var $73=$j;
 var $74=((($73)+(1))|0);
 $j=$74;
 label=15;break;
 case 20: 
 var $76=$2;
 var $77=(($76+10)|0);
 var $78=$3;
 _pw_read_title($77,$78,20);
 $1=0;
 label=21;break;
 case 21: 
 var $80=$1;
 STACKTOP=sp;return $80;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_fcm($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $ptable=sp;
 var $pat_pos;
 var $pat_max;
 var $i;
 var $size;
 var $ssize;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$1;
 var $5=_read32b($4);
 var $6=$1;
 var $7=_read16b($6);
 var $8=$1;
 var $9=_read32b($8);
 var $10=$2;
 var $11=$1;
 var $12=_pw_move_data($10,$11,20);
 var $13=$1;
 var $14=_read32b($13);
 $i=0;
 label=2;break;
 case 2: 
 var $16=$i;
 var $17=($16|0)<31;
 if($17){label=3;break;}else{label=7;break;}
 case 3: 
 var $19=$2;
 var $20=_pw_write_zero($19,22);
 var $21=$2;
 var $22=$1;
 var $23=_read16b($22);
 var $24=($23&65535);
 $size=$24;
 var $25=(($24)&65535);
 _write16b($21,$25);
 var $26=$size;
 var $27=($26<<1);
 var $28=$ssize;
 var $29=((($28)+($27))|0);
 $ssize=$29;
 var $30=$2;
 var $31=$1;
 var $32=_read8($31);
 _write8($30,$32);
 var $33=$2;
 var $34=$1;
 var $35=_read8($34);
 _write8($33,$35);
 var $36=$2;
 var $37=$1;
 var $38=_read16b($37);
 _write16b($36,$38);
 var $39=$1;
 var $40=_read16b($39);
 var $41=($40&65535);
 $size=$41;
 var $42=$size;
 var $43=($42|0)==0;
 if($43){label=4;break;}else{label=5;break;}
 case 4: 
 $size=1;
 label=5;break;
 case 5: 
 var $46=$2;
 var $47=$size;
 var $48=(($47)&65535);
 _write16b($46,$48);
 label=6;break;
 case 6: 
 var $50=$i;
 var $51=((($50)+(1))|0);
 $i=$51;
 label=2;break;
 case 7: 
 var $53=$1;
 var $54=_read32b($53);
 var $55=$2;
 var $56=$1;
 var $57=_read8($56);
 $pat_pos=$57;
 _write8($55,$57);
 var $58=$2;
 var $59=$1;
 var $60=_read8($59);
 _write8($58,$60);
 var $61=$1;
 var $62=_read32b($61);
 $i=0;
 $pat_max=0;
 label=8;break;
 case 8: 
 var $64=$i;
 var $65=$pat_pos;
 var $66=($65&255);
 var $67=($64|0)<($66|0);
 if($67){label=9;break;}else{label=13;break;}
 case 9: 
 var $69=$2;
 var $70=$1;
 var $71=_read8($70);
 $c1=$71;
 _write8($69,$71);
 var $72=$c1;
 var $73=($72&255);
 var $74=$pat_max;
 var $75=($74&255);
 var $76=($73|0)>($75|0);
 if($76){label=10;break;}else{label=11;break;}
 case 10: 
 var $78=$c1;
 $pat_max=$78;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $81=$i;
 var $82=((($81)+(1))|0);
 $i=$82;
 label=8;break;
 case 13: 
 label=14;break;
 case 14: 
 var $85=$i;
 var $86=($85|0)<128;
 if($86){label=15;break;}else{label=17;break;}
 case 15: 
 var $88=$2;
 _write8($88,0);
 label=16;break;
 case 16: 
 var $90=$i;
 var $91=((($90)+(1))|0);
 $i=$91;
 label=14;break;
 case 17: 
 var $93=$2;
 _write32b($93,1294879534);
 var $94=$1;
 var $95=_read32b($94);
 $i=0;
 label=18;break;
 case 18: 
 var $97=$i;
 var $98=$pat_max;
 var $99=($98&255);
 var $100=($97|0)<=($99|0);
 if($100){label=19;break;}else{label=21;break;}
 case 19: 
 var $102=$2;
 var $103=$1;
 var $104=_pw_move_data($102,$103,1024);
 label=20;break;
 case 20: 
 var $106=$i;
 var $107=((($106)+(1))|0);
 $i=$107;
 label=18;break;
 case 21: 
 var $109=$1;
 var $110=_read32b($109);
 var $111=$2;
 var $112=$1;
 var $113=$ssize;
 var $114=_pw_move_data($111,$112,$113);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_fuchs($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 var $j;
 var $k;
 var $m;
 var $n;
 var $o;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 var $5=$2;
 var $6=(($5+192)|0);
 var $7=_readmem32b($6);
 var $8=($7|0)!=1397706311;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=26;break;
 case 3: 
 var $11=$start;
 var $12=((($11)+(10))|0);
 var $13=$2;
 var $14=(($13+$12)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=$16<<24;
 var $18=$start;
 var $19=((($18)+(11))|0);
 var $20=$2;
 var $21=(($20+$19)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23<<16;
 var $25=((($17)+($24))|0);
 var $26=$start;
 var $27=((($26)+(12))|0);
 var $28=$2;
 var $29=(($28+$27)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=$31<<8;
 var $33=((($25)+($32))|0);
 var $34=$start;
 var $35=((($34)+(13))|0);
 var $36=$2;
 var $37=(($36+$35)|0);
 var $38=HEAP8[($37)];
 var $39=($38&255);
 var $40=((($33)+($39))|0);
 $j=$40;
 var $41=$j;
 var $42=($41|0)<=2;
 if($42){label=5;break;}else{label=4;break;}
 case 4: 
 var $44=$j;
 var $45=($44|0)>=1048560;
 if($45){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=26;break;
 case 6: 
 $m=0;
 $k=0;
 label=7;break;
 case 7: 
 var $49=$k;
 var $50=($49|0)<16;
 if($50){label=8;break;}else{label=14;break;}
 case 8: 
 var $52=$start;
 var $53=$k;
 var $54=($53<<1);
 var $55=((($52)+($54))|0);
 var $56=((($55)+(14))|0);
 var $57=$2;
 var $58=(($57+$56)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=$60<<8;
 var $62=$start;
 var $63=$k;
 var $64=($63<<1);
 var $65=((($62)+($64))|0);
 var $66=((($65)+(15))|0);
 var $67=$2;
 var $68=(($67+$66)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 var $71=((($61)+($70))|0);
 $o=$71;
 var $72=$start;
 var $73=$k;
 var $74=($73<<1);
 var $75=((($72)+($74))|0);
 var $76=((($75)+(78))|0);
 var $77=$2;
 var $78=(($77+$76)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=$80<<8;
 var $82=$start;
 var $83=$k;
 var $84=($83<<1);
 var $85=((($82)+($84))|0);
 var $86=((($85)+(79))|0);
 var $87=$2;
 var $88=(($87+$86)|0);
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=((($81)+($90))|0);
 $n=$91;
 var $92=$start;
 var $93=((($92)+(46))|0);
 var $94=$k;
 var $95=($94<<1);
 var $96=((($93)+($95))|0);
 var $97=$2;
 var $98=(($97+$96)|0);
 var $99=HEAP8[($98)];
 var $100=($99&255);
 var $101=($100|0)>64;
 if($101){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=26;break;
 case 10: 
 var $104=$o;
 var $105=$n;
 var $106=($104|0)<($105|0);
 if($106){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=26;break;
 case 12: 
 var $109=$o;
 var $110=$m;
 var $111=((($110)+($109))|0);
 $m=$111;
 label=13;break;
 case 13: 
 var $113=$k;
 var $114=((($113)+(1))|0);
 $k=$114;
 label=7;break;
 case 14: 
 var $116=$m;
 var $117=($116|0)<=2;
 if($117){label=16;break;}else{label=15;break;}
 case 15: 
 var $119=$m;
 var $120=$j;
 var $121=($119|0)>($120|0);
 if($121){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=26;break;
 case 17: 
 $k=0;
 $j=0;
 label=18;break;
 case 18: 
 var $125=$j;
 var $126=($125|0)<40;
 if($126){label=19;break;}else{label=25;break;}
 case 19: 
 var $128=$start;
 var $129=$j;
 var $130=($129<<1);
 var $131=((($128)+($130))|0);
 var $132=((($131)+(113))|0);
 var $133=$2;
 var $134=(($133+$132)|0);
 var $135=HEAP8[($134)];
 var $136=($135&255);
 $n=$136;
 var $137=$n;
 var $138=($137|0)>40;
 if($138){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=26;break;
 case 21: 
 var $141=$n;
 var $142=$k;
 var $143=($141|0)>($142|0);
 if($143){label=22;break;}else{label=23;break;}
 case 22: 
 var $145=$n;
 $k=$145;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $148=$j;
 var $149=((($148)+(1))|0);
 $j=$149;
 label=18;break;
 case 25: 
 var $151=$3;
 _pw_read_title(0,$151,0);
 $1=0;
 label=26;break;
 case 26: 
 var $153=$1;
 STACKTOP=sp;return $153;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_fuchs($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp;
 var $c1;
 var $pmax;
 var $ssize;
 var $SampleSizes=sp;
 var $LoopStart=(sp)+(64);
 var $i;
 var $j;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$SampleSizes;
 _memset($3, 0, 64)|0;
 var $4=$LoopStart;
 _memset($4, 0, 64)|0;
 var $5=$2;
 var $6=_pw_write_zero($5,1080);
 var $7=$2;
 var $8=_fseek($7,0,0);
 var $9=$2;
 var $10=$1;
 var $11=_pw_move_data($9,$10,10);
 var $12=$1;
 var $13=_read32b($12);
 $ssize=$13;
 $i=0;
 label=2;break;
 case 2: 
 var $15=$i;
 var $16=($15|0)<16;
 if($16){label=3;break;}else{label=5;break;}
 case 3: 
 var $18=$2;
 var $19=$i;
 var $20=((($19)*(30))&-1);
 var $21=((($20)+(42))|0);
 var $22=_fseek($18,$21,0);
 var $23=$2;
 var $24=$1;
 var $25=_read16b($24);
 var $26=($25&65535);
 var $27=$i;
 var $28=(($SampleSizes+($27<<2))|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=(((($26|0))/(2))&-1);
 var $30=(($29)&65535);
 _write16b($23,$30);
 label=4;break;
 case 4: 
 var $32=$i;
 var $33=((($32)+(1))|0);
 $i=$33;
 label=2;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $36=$i;
 var $37=($36|0)<16;
 if($37){label=7;break;}else{label=9;break;}
 case 7: 
 var $39=$2;
 var $40=$i;
 var $41=((($40)*(30))&-1);
 var $42=((($41)+(45))|0);
 var $43=_fseek($39,$42,0);
 var $44=$1;
 var $45=_fseek($44,1,1);
 var $46=$2;
 var $47=$1;
 var $48=_read8($47);
 _write8($46,$48);
 label=8;break;
 case 8: 
 var $50=$i;
 var $51=((($50)+(1))|0);
 $i=$51;
 label=6;break;
 case 9: 
 $i=0;
 label=10;break;
 case 10: 
 var $54=$i;
 var $55=($54|0)<16;
 if($55){label=11;break;}else{label=13;break;}
 case 11: 
 var $57=$2;
 var $58=$i;
 var $59=((($58)*(30))&-1);
 var $60=((($59)+(46))|0);
 var $61=_fseek($57,$60,0);
 var $62=$2;
 var $63=$1;
 var $64=_read16b($63);
 var $65=($64&65535);
 var $66=$i;
 var $67=(($LoopStart+($66<<2))|0);
 HEAP32[(($67)>>2)]=$65;
 var $68=(((($65|0))/(2))&-1);
 var $69=(($68)&255);
 _write8($62,$69);
 label=12;break;
 case 12: 
 var $71=$i;
 var $72=((($71)+(1))|0);
 $i=$72;
 label=10;break;
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 var $75=$i;
 var $76=($75|0)<16;
 if($76){label=15;break;}else{label=21;break;}
 case 15: 
 var $78=$2;
 var $79=$i;
 var $80=((($79)*(30))&-1);
 var $81=((($80)+(48))|0);
 var $82=_fseek($78,$81,0);
 var $83=$i;
 var $84=(($SampleSizes+($83<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$i;
 var $87=(($LoopStart+($86<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=((($85)-($88))|0);
 $j=$89;
 var $90=$j;
 var $91=($90|0)==0;
 if($91){label=17;break;}else{label=16;break;}
 case 16: 
 var $93=$i;
 var $94=(($LoopStart+($93<<2))|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=17;break;}else{label=18;break;}
 case 17: 
 var $98=$2;
 _write16b($98,1);
 label=19;break;
 case 18: 
 var $100=$2;
 var $101=$j;
 var $102=(((($101|0))/(2))&-1);
 var $103=(($102)&65535);
 _write16b($100,$103);
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $106=$i;
 var $107=((($106)+(1))|0);
 $i=$107;
 label=14;break;
 case 21: 
 $i=16;
 label=22;break;
 case 22: 
 var $110=$i;
 var $111=($110|0)<31;
 if($111){label=23;break;}else{label=25;break;}
 case 23: 
 var $113=$2;
 var $114=$i;
 var $115=((($114)*(30))&-1);
 var $116=((($115)+(48))|0);
 var $117=_fseek($113,$116,0);
 var $118=$2;
 _write16b($118,1);
 label=24;break;
 case 24: 
 var $120=$i;
 var $121=((($120)+(1))|0);
 $i=$121;
 label=22;break;
 case 25: 
 var $123=$2;
 var $124=_fseek($123,950,0);
 var $125=$1;
 var $126=_fseek($125,1,1);
 var $127=$2;
 var $128=$1;
 var $129=_read8($128);
 _write8($127,$129);
 var $130=$2;
 _write8($130,127);
 $i=0;
 $pmax=0;
 label=26;break;
 case 26: 
 var $132=$i;
 var $133=($132|0)<40;
 if($133){label=27;break;}else{label=31;break;}
 case 27: 
 var $135=$1;
 var $136=_fseek($135,1,1);
 var $137=$2;
 var $138=$1;
 var $139=_read8($138);
 $c1=$139;
 _write8($137,$139);
 var $140=$c1;
 var $141=($140&255);
 var $142=$pmax;
 var $143=($142&255);
 var $144=($141|0)>($143|0);
 if($144){label=28;break;}else{label=29;break;}
 case 28: 
 var $146=$c1;
 $pmax=$146;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $149=$i;
 var $150=((($149)+(1))|0);
 $i=$150;
 label=26;break;
 case 31: 
 var $152=$2;
 var $153=_fseek($152,0,2);
 var $154=$2;
 _write32b($154,1294879534);
 var $155=$1;
 var $156=_fseek($155,4,1);
 var $157=$1;
 var $158=_read32b($157);
 $j=$158;
 var $159=$j;
 var $160=_malloc($159);
 $tmp=$160;
 var $161=$tmp;
 var $162=$j;
 var $163=$1;
 var $164=_fread($161,$162,1,$163);
 $i=0;
 label=32;break;
 case 32: 
 var $166=$i;
 var $167=$j;
 var $168=($166|0)<($167|0);
 if($168){label=33;break;}else{label=57;break;}
 case 33: 
 var $170=$i;
 var $171=((($170)+(2))|0);
 var $172=$tmp;
 var $173=(($172+$171)|0);
 var $174=HEAP8[($173)];
 var $175=($174&255);
 var $176=$175&15;
 var $177=($176|0)==12;
 if($177){label=34;break;}else{label=55;break;}
 case 34: 
 var $179=$i;
 var $180=((($179)+(3))|0);
 var $181=$tmp;
 var $182=(($181+$180)|0);
 var $183=HEAP8[($182)];
 $c1=$183;
 var $184=$c1;
 var $185=($184&255);
 var $186=($185|0)<=9;
 if($186){label=35;break;}else{label=36;break;}
 case 35: 
 var $188=$c1;
 var $189=$i;
 var $190=((($189)+(3))|0);
 var $191=$tmp;
 var $192=(($191+$190)|0);
 HEAP8[($192)]=$188;
 label=56;break;
 case 36: 
 var $194=$c1;
 var $195=($194&255);
 var $196=($195|0)>=16;
 if($196){label=37;break;}else{label=39;break;}
 case 37: 
 var $198=$c1;
 var $199=($198&255);
 var $200=($199|0)<=25;
 if($200){label=38;break;}else{label=39;break;}
 case 38: 
 var $202=$c1;
 var $203=($202&255);
 var $204=((($203)-(6))|0);
 var $205=(($204)&255);
 var $206=$i;
 var $207=((($206)+(3))|0);
 var $208=$tmp;
 var $209=(($208+$207)|0);
 HEAP8[($209)]=$205;
 label=56;break;
 case 39: 
 var $211=$c1;
 var $212=($211&255);
 var $213=($212|0)>=32;
 if($213){label=40;break;}else{label=42;break;}
 case 40: 
 var $215=$c1;
 var $216=($215&255);
 var $217=($216|0)<=41;
 if($217){label=41;break;}else{label=42;break;}
 case 41: 
 var $219=$c1;
 var $220=($219&255);
 var $221=((($220)-(12))|0);
 var $222=(($221)&255);
 var $223=$i;
 var $224=((($223)+(3))|0);
 var $225=$tmp;
 var $226=(($225+$224)|0);
 HEAP8[($226)]=$222;
 label=56;break;
 case 42: 
 var $228=$c1;
 var $229=($228&255);
 var $230=($229|0)>=48;
 if($230){label=43;break;}else{label=45;break;}
 case 43: 
 var $232=$c1;
 var $233=($232&255);
 var $234=($233|0)<=57;
 if($234){label=44;break;}else{label=45;break;}
 case 44: 
 var $236=$c1;
 var $237=($236&255);
 var $238=((($237)-(18))|0);
 var $239=(($238)&255);
 var $240=$i;
 var $241=((($240)+(3))|0);
 var $242=$tmp;
 var $243=(($242+$241)|0);
 HEAP8[($243)]=$239;
 label=56;break;
 case 45: 
 var $245=$c1;
 var $246=($245&255);
 var $247=($246|0)>=64;
 if($247){label=46;break;}else{label=48;break;}
 case 46: 
 var $249=$c1;
 var $250=($249&255);
 var $251=($250|0)<=73;
 if($251){label=47;break;}else{label=48;break;}
 case 47: 
 var $253=$c1;
 var $254=($253&255);
 var $255=((($254)-(24))|0);
 var $256=(($255)&255);
 var $257=$i;
 var $258=((($257)+(3))|0);
 var $259=$tmp;
 var $260=(($259+$258)|0);
 HEAP8[($260)]=$256;
 label=56;break;
 case 48: 
 var $262=$c1;
 var $263=($262&255);
 var $264=($263|0)>=80;
 if($264){label=49;break;}else{label=51;break;}
 case 49: 
 var $266=$c1;
 var $267=($266&255);
 var $268=($267|0)<=89;
 if($268){label=50;break;}else{label=51;break;}
 case 50: 
 var $270=$c1;
 var $271=($270&255);
 var $272=((($271)-(30))|0);
 var $273=(($272)&255);
 var $274=$i;
 var $275=((($274)+(3))|0);
 var $276=$tmp;
 var $277=(($276+$275)|0);
 HEAP8[($277)]=$273;
 label=56;break;
 case 51: 
 var $279=$c1;
 var $280=($279&255);
 var $281=($280|0)>=96;
 if($281){label=52;break;}else{label=54;break;}
 case 52: 
 var $283=$c1;
 var $284=($283&255);
 var $285=($284|0)<=100;
 if($285){label=53;break;}else{label=54;break;}
 case 53: 
 var $287=$c1;
 var $288=($287&255);
 var $289=((($288)-(36))|0);
 var $290=(($289)&255);
 var $291=$i;
 var $292=((($291)+(3))|0);
 var $293=$tmp;
 var $294=(($293+$292)|0);
 HEAP8[($294)]=$290;
 label=56;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 var $298=$i;
 var $299=((($298)+(4))|0);
 $i=$299;
 label=32;break;
 case 57: 
 var $301=$tmp;
 var $302=$j;
 var $303=$2;
 var $304=_fwrite($301,$302,1,$303);
 var $305=$tmp;
 _free($305);
 var $306=$1;
 var $307=_fseek($306,4,1);
 $i=0;
 label=58;break;
 case 58: 
 var $309=$i;
 var $310=($309|0)<16;
 if($310){label=59;break;}else{label=63;break;}
 case 59: 
 var $312=$i;
 var $313=(($SampleSizes+($312<<2))|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=($314|0)!=0;
 if($315){label=60;break;}else{label=61;break;}
 case 60: 
 var $317=$2;
 var $318=$1;
 var $319=$i;
 var $320=(($SampleSizes+($319<<2))|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=_pw_move_data($317,$318,$321);
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 var $325=$i;
 var $326=((($325)+(1))|0);
 $i=$326;
 label=58;break;
 case 63: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_fuzz($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 $ssize=0;
 var $5=$2;
 var $6=_readmem32b($5);
 var $7=($6|0)!=1295068720;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=24;break;
 case 3: 
 $k=0;
 label=4;break;
 case 4: 
 var $11=$k;
 var $12=($11|0)<31;
 if($12){label=5;break;}else{label=9;break;}
 case 5: 
 var $14=$start;
 var $15=((($14)+(72))|0);
 var $16=$k;
 var $17=((($16)*(68))&-1);
 var $18=((($15)+($17))|0);
 var $19=$2;
 var $20=(($19+$18)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)>15;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=24;break;
 case 7: 
 label=8;break;
 case 8: 
 var $27=$k;
 var $28=((($27)+(1))|0);
 $k=$28;
 label=4;break;
 case 9: 
 $k=0;
 label=10;break;
 case 10: 
 var $31=$k;
 var $32=($31|0)<31;
 if($32){label=11;break;}else{label=15;break;}
 case 11: 
 var $34=$start;
 var $35=((($34)+(73))|0);
 var $36=$k;
 var $37=((($36)*(68))&-1);
 var $38=((($35)+($37))|0);
 var $39=$2;
 var $40=(($39+$38)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=($42|0)>64;
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=24;break;
 case 13: 
 label=14;break;
 case 14: 
 var $47=$k;
 var $48=((($47)+(1))|0);
 $k=$48;
 label=10;break;
 case 15: 
 $k=0;
 label=16;break;
 case 16: 
 var $51=$k;
 var $52=($51|0)<31;
 if($52){label=17;break;}else{label=21;break;}
 case 17: 
 var $54=$2;
 var $55=$start;
 var $56=(($54+$55)|0);
 var $57=$k;
 var $58=((($57)*(68))&-1);
 var $59=(($56+$58)|0);
 var $60=(($59+66)|0);
 var $61=_readmem16b($60);
 var $62=($61&65535);
 $j=$62;
 var $63=$j;
 var $64=($63|0)>32768;
 if($64){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=24;break;
 case 19: 
 var $67=$j;
 var $68=($67<<1);
 var $69=$ssize;
 var $70=((($69)+($68))|0);
 $ssize=$70;
 label=20;break;
 case 20: 
 var $72=$k;
 var $73=((($72)+(1))|0);
 $k=$73;
 label=16;break;
 case 21: 
 var $75=$start;
 var $76=((($75)+(2114))|0);
 var $77=$2;
 var $78=(($77+$76)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=($80|0)==0;
 if($81){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=24;break;
 case 23: 
 var $84=$3;
 _pw_read_title(0,$84,0);
 $1=0;
 label=24;break;
 case 24: 
 var $86=$1;
 STACKTOP=sp;return $86;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_fuzz($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4736)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $data=sp;
 var $ord=(sp)+(1024);
 var $tidx=(sp)+(1152);
 var $tidx_real=(sp)+(3200);
 var $track=(sp)+(3712);
 var $status;
 var $len;
 var $ntrk;
 var $npat;
 var $size;
 var $ssize;
 var $lps;
 var $lsz;
 var $i;
 var $j;
 var $k;
 var $l;
 $1=$in;
 $2=$out;
 $status=1;
 $ssize=0;
 var $3=$tidx;
 _memset($3, 0, 2048)|0;
 var $4=$tidx_real;
 _memset($4, 0, 512)|0;
 var $5=$ord;
 _memset($5, 0, 128)|0;
 var $6=$1;
 var $7=_read32b($6);
 var $8=$1;
 var $9=_read16b($8);
 var $10=$2;
 var $11=_pw_write_zero($10,20);
 $i=0;
 label=2;break;
 case 2: 
 var $13=$i;
 var $14=($13|0)<31;
 if($14){label=3;break;}else{label=8;break;}
 case 3: 
 var $16=$2;
 var $17=$1;
 var $18=_pw_move_data($16,$17,22);
 var $19=$1;
 var $20=_fseek($19,38,1);
 var $21=$2;
 var $22=$1;
 var $23=_read16b($22);
 var $24=($23&65535);
 $size=$24;
 var $25=(($24)&65535);
 _write16b($21,$25);
 var $26=$size;
 var $27=($26<<1);
 var $28=$ssize;
 var $29=((($28)+($27))|0);
 $ssize=$29;
 var $30=$1;
 var $31=_read16b($30);
 var $32=($31&65535);
 $lps=$32;
 var $33=$1;
 var $34=_read16b($33);
 var $35=($34&65535);
 $lsz=$35;
 var $36=$2;
 var $37=$1;
 var $38=_read8($37);
 _write8($36,$38);
 var $39=$2;
 var $40=$1;
 var $41=_read8($40);
 _write8($39,$41);
 var $42=$2;
 var $43=$lps;
 var $44=(($43)&65535);
 _write16b($42,$44);
 var $45=$2;
 var $46=$lsz;
 var $47=($46|0)>0;
 if($47){label=4;break;}else{label=5;break;}
 case 4: 
 var $49=$lsz;
 var $52=$49;label=6;break;
 case 5: 
 var $52=1;label=6;break;
 case 6: 
 var $52;
 var $53=(($52)&65535);
 _write16b($45,$53);
 label=7;break;
 case 7: 
 var $55=$i;
 var $56=((($55)+(1))|0);
 $i=$56;
 label=2;break;
 case 8: 
 var $58=$2;
 var $59=$1;
 var $60=_read8($59);
 var $61=($60&255);
 $len=$61;
 var $62=(($61)&255);
 _write8($58,$62);
 var $63=$1;
 var $64=_read8($63);
 var $65=($64&255);
 $ntrk=$65;
 var $66=$2;
 _write8($66,127);
 var $67=$1;
 var $68=_fseek($67,2118,0);
 $i=0;
 label=9;break;
 case 9: 
 var $70=$i;
 var $71=($70|0)<4;
 if($71){label=10;break;}else{label=16;break;}
 case 10: 
 $j=0;
 label=11;break;
 case 11: 
 var $74=$j;
 var $75=$len;
 var $76=($74|0)<($75|0);
 if($76){label=12;break;}else{label=14;break;}
 case 12: 
 var $78=$i;
 var $79=($78<<2);
 var $80=$j;
 var $81=(($tidx+($80<<4))|0);
 var $82=(($81+$79)|0);
 var $83=$1;
 var $84=_fread($82,1,4,$83);
 label=13;break;
 case 13: 
 var $86=$j;
 var $87=((($86)+(1))|0);
 $j=$87;
 label=11;break;
 case 14: 
 label=15;break;
 case 15: 
 var $90=$i;
 var $91=((($90)+(1))|0);
 $i=$91;
 label=9;break;
 case 16: 
 $npat=0;
 $i=0;
 label=17;break;
 case 17: 
 var $94=$i;
 var $95=$len;
 var $96=($94|0)<($95|0);
 if($96){label=18;break;}else{label=36;break;}
 case 18: 
 var $98=$i;
 var $99=($98|0)==0;
 if($99){label=19;break;}else{label=20;break;}
 case 19: 
 var $101=$npat;
 var $102=((($101)+(1))|0);
 $npat=$102;
 var $103=(($101)&255);
 var $104=(($ord)|0);
 HEAP8[($104)]=$103;
 label=35;break;
 case 20: 
 $j=0;
 label=21;break;
 case 21: 
 var $107=$j;
 var $108=$i;
 var $109=($107|0)<($108|0);
 if($109){label=22;break;}else{label=32;break;}
 case 22: 
 $status=1;
 $k=0;
 label=23;break;
 case 23: 
 var $112=$k;
 var $113=($112|0)<4;
 if($113){label=24;break;}else{label=28;break;}
 case 24: 
 var $115=$k;
 var $116=($115<<2);
 var $117=$j;
 var $118=(($tidx+($117<<4))|0);
 var $119=(($118+$116)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=$k;
 var $123=($122<<2);
 var $124=$i;
 var $125=(($tidx+($124<<4))|0);
 var $126=(($125+$123)|0);
 var $127=HEAP8[($126)];
 var $128=($127&255);
 var $129=($121|0)!=($128|0);
 if($129){label=25;break;}else{label=26;break;}
 case 25: 
 $status=0;
 label=28;break;
 case 26: 
 label=27;break;
 case 27: 
 var $133=$k;
 var $134=((($133)+(1))|0);
 $k=$134;
 label=23;break;
 case 28: 
 var $136=$status;
 var $137=($136&255);
 var $138=($137|0)==1;
 if($138){label=29;break;}else{label=30;break;}
 case 29: 
 var $140=$j;
 var $141=(($ord+$140)|0);
 var $142=HEAP8[($141)];
 var $143=$i;
 var $144=(($ord+$143)|0);
 HEAP8[($144)]=$142;
 label=32;break;
 case 30: 
 label=31;break;
 case 31: 
 var $147=$j;
 var $148=((($147)+(1))|0);
 $j=$148;
 label=21;break;
 case 32: 
 var $150=$status;
 var $151=($150&255);
 var $152=($151|0)==0;
 if($152){label=33;break;}else{label=34;break;}
 case 33: 
 var $154=$npat;
 var $155=((($154)+(1))|0);
 $npat=$155;
 var $156=(($154)&255);
 var $157=$i;
 var $158=(($ord+$157)|0);
 HEAP8[($158)]=$156;
 label=34;break;
 case 34: 
 $status=1;
 label=35;break;
 case 35: 
 var $161=$i;
 var $162=((($161)+(1))|0);
 $i=$162;
 label=17;break;
 case 36: 
 $c1=0;
 $i=0;
 label=37;break;
 case 37: 
 var $165=$i;
 var $166=$len;
 var $167=($165|0)<($166|0);
 if($167){label=38;break;}else{label=50;break;}
 case 38: 
 var $169=$i;
 var $170=($169|0)==0;
 if($170){label=39;break;}else{label=40;break;}
 case 39: 
 var $172=$i;
 var $173=(($tidx+($172<<4))|0);
 var $174=(($173)|0);
 var $175=HEAP8[($174)];
 var $176=$c1;
 var $177=($176&255);
 var $178=(($tidx_real+($177<<2))|0);
 var $179=(($178)|0);
 HEAP8[($179)]=$175;
 var $180=$i;
 var $181=(($tidx+($180<<4))|0);
 var $182=(($181+4)|0);
 var $183=HEAP8[($182)];
 var $184=$c1;
 var $185=($184&255);
 var $186=(($tidx_real+($185<<2))|0);
 var $187=(($186+1)|0);
 HEAP8[($187)]=$183;
 var $188=$i;
 var $189=(($tidx+($188<<4))|0);
 var $190=(($189+8)|0);
 var $191=HEAP8[($190)];
 var $192=$c1;
 var $193=($192&255);
 var $194=(($tidx_real+($193<<2))|0);
 var $195=(($194+2)|0);
 HEAP8[($195)]=$191;
 var $196=$i;
 var $197=(($tidx+($196<<4))|0);
 var $198=(($197+12)|0);
 var $199=HEAP8[($198)];
 var $200=$c1;
 var $201=($200&255);
 var $202=(($tidx_real+($201<<2))|0);
 var $203=(($202+3)|0);
 HEAP8[($203)]=$199;
 var $204=$c1;
 var $205=((($204)+(1))&255);
 $c1=$205;
 label=49;break;
 case 40: 
 $j=0;
 label=41;break;
 case 41: 
 var $208=$j;
 var $209=$i;
 var $210=($208|0)<($209|0);
 if($210){label=42;break;}else{label=46;break;}
 case 42: 
 $status=1;
 var $212=$i;
 var $213=(($ord+$212)|0);
 var $214=HEAP8[($213)];
 var $215=($214&255);
 var $216=$j;
 var $217=(($ord+$216)|0);
 var $218=HEAP8[($217)];
 var $219=($218&255);
 var $220=($215|0)==($219|0);
 if($220){label=43;break;}else{label=44;break;}
 case 43: 
 $status=0;
 label=46;break;
 case 44: 
 label=45;break;
 case 45: 
 var $224=$j;
 var $225=((($224)+(1))|0);
 $j=$225;
 label=41;break;
 case 46: 
 var $227=$status;
 var $228=($227&255);
 var $229=($228|0)==0;
 if($229){label=47;break;}else{label=48;break;}
 case 47: 
 label=49;break;
 case 48: 
 var $232=$i;
 var $233=(($tidx+($232<<4))|0);
 var $234=(($233)|0);
 var $235=HEAP8[($234)];
 var $236=$c1;
 var $237=($236&255);
 var $238=(($tidx_real+($237<<2))|0);
 var $239=(($238)|0);
 HEAP8[($239)]=$235;
 var $240=$i;
 var $241=(($tidx+($240<<4))|0);
 var $242=(($241+4)|0);
 var $243=HEAP8[($242)];
 var $244=$c1;
 var $245=($244&255);
 var $246=(($tidx_real+($245<<2))|0);
 var $247=(($246+1)|0);
 HEAP8[($247)]=$243;
 var $248=$i;
 var $249=(($tidx+($248<<4))|0);
 var $250=(($249+8)|0);
 var $251=HEAP8[($250)];
 var $252=$c1;
 var $253=($252&255);
 var $254=(($tidx_real+($253<<2))|0);
 var $255=(($254+2)|0);
 HEAP8[($255)]=$251;
 var $256=$i;
 var $257=(($tidx+($256<<4))|0);
 var $258=(($257+12)|0);
 var $259=HEAP8[($258)];
 var $260=$c1;
 var $261=($260&255);
 var $262=(($tidx_real+($261<<2))|0);
 var $263=(($262+3)|0);
 HEAP8[($263)]=$259;
 var $264=$c1;
 var $265=((($264)+(1))&255);
 $c1=$265;
 $status=1;
 label=49;break;
 case 49: 
 var $267=$i;
 var $268=((($267)+(1))|0);
 $i=$268;
 label=37;break;
 case 50: 
 var $270=(($ord)|0);
 var $271=$2;
 var $272=_fwrite($270,128,1,$271);
 var $273=$2;
 _write32b($273,1294879534);
 var $274=$len;
 var $275=($274<<4);
 var $276=((($275)+(2118))|0);
 $l=$276;
 $i=0;
 label=51;break;
 case 51: 
 var $278=$i;
 var $279=$npat;
 var $280=($278|0)<($279|0);
 if($280){label=52;break;}else{label=58;break;}
 case 52: 
 var $282=$data;
 _memset($282, 0, 1024)|0;
 var $283=$track;
 _memset($283, 0, 1024)|0;
 var $284=$1;
 var $285=$l;
 var $286=$i;
 var $287=(($tidx_real+($286<<2))|0);
 var $288=(($287)|0);
 var $289=HEAP8[($288)];
 var $290=($289&255);
 var $291=$290<<8;
 var $292=((($285)+($291))|0);
 var $293=_fseek($284,$292,0);
 var $294=(($track)|0);
 var $295=(($294)|0);
 var $296=$1;
 var $297=_fread($295,256,1,$296);
 var $298=$1;
 var $299=$l;
 var $300=$i;
 var $301=(($tidx_real+($300<<2))|0);
 var $302=(($301+1)|0);
 var $303=HEAP8[($302)];
 var $304=($303&255);
 var $305=$304<<8;
 var $306=((($299)+($305))|0);
 var $307=_fseek($298,$306,0);
 var $308=(($track+256)|0);
 var $309=(($308)|0);
 var $310=$1;
 var $311=_fread($309,256,1,$310);
 var $312=$1;
 var $313=$l;
 var $314=$i;
 var $315=(($tidx_real+($314<<2))|0);
 var $316=(($315+2)|0);
 var $317=HEAP8[($316)];
 var $318=($317&255);
 var $319=$318<<8;
 var $320=((($313)+($319))|0);
 var $321=_fseek($312,$320,0);
 var $322=(($track+512)|0);
 var $323=(($322)|0);
 var $324=$1;
 var $325=_fread($323,256,1,$324);
 var $326=$1;
 var $327=$l;
 var $328=$i;
 var $329=(($tidx_real+($328<<2))|0);
 var $330=(($329+3)|0);
 var $331=HEAP8[($330)];
 var $332=($331&255);
 var $333=$332<<8;
 var $334=((($327)+($333))|0);
 var $335=_fseek($326,$334,0);
 var $336=(($track+768)|0);
 var $337=(($336)|0);
 var $338=$1;
 var $339=_fread($337,256,1,$338);
 $j=0;
 label=53;break;
 case 53: 
 var $341=$j;
 var $342=($341|0)<64;
 if($342){label=54;break;}else{label=56;break;}
 case 54: 
 var $344=$j;
 var $345=($344<<4);
 var $346=(($data+$345)|0);
 var $347=$j;
 var $348=($347<<2);
 var $349=(($track)|0);
 var $350=(($349+$348)|0);
 assert(4 % 1 === 0);HEAP8[($346)]=HEAP8[($350)];HEAP8[((($346)+(1))|0)]=HEAP8[((($350)+(1))|0)];HEAP8[((($346)+(2))|0)]=HEAP8[((($350)+(2))|0)];HEAP8[((($346)+(3))|0)]=HEAP8[((($350)+(3))|0)];
 var $351=$j;
 var $352=($351<<4);
 var $353=((($352)+(4))|0);
 var $354=(($data+$353)|0);
 var $355=$j;
 var $356=($355<<2);
 var $357=(($track+256)|0);
 var $358=(($357+$356)|0);
 assert(4 % 1 === 0);HEAP8[($354)]=HEAP8[($358)];HEAP8[((($354)+(1))|0)]=HEAP8[((($358)+(1))|0)];HEAP8[((($354)+(2))|0)]=HEAP8[((($358)+(2))|0)];HEAP8[((($354)+(3))|0)]=HEAP8[((($358)+(3))|0)];
 var $359=$j;
 var $360=($359<<4);
 var $361=((($360)+(8))|0);
 var $362=(($data+$361)|0);
 var $363=$j;
 var $364=($363<<2);
 var $365=(($track+512)|0);
 var $366=(($365+$364)|0);
 assert(4 % 1 === 0);HEAP8[($362)]=HEAP8[($366)];HEAP8[((($362)+(1))|0)]=HEAP8[((($366)+(1))|0)];HEAP8[((($362)+(2))|0)]=HEAP8[((($366)+(2))|0)];HEAP8[((($362)+(3))|0)]=HEAP8[((($366)+(3))|0)];
 var $367=$j;
 var $368=($367<<4);
 var $369=((($368)+(12))|0);
 var $370=(($data+$369)|0);
 var $371=$j;
 var $372=($371<<2);
 var $373=(($track+768)|0);
 var $374=(($373+$372)|0);
 assert(4 % 1 === 0);HEAP8[($370)]=HEAP8[($374)];HEAP8[((($370)+(1))|0)]=HEAP8[((($374)+(1))|0)];HEAP8[((($370)+(2))|0)]=HEAP8[((($374)+(2))|0)];HEAP8[((($370)+(3))|0)]=HEAP8[((($374)+(3))|0)];
 var $375=$j;
 var $376=($375<<2);
 var $377=((($376)+(3))|0);
 var $378=(($track+768)|0);
 var $379=(($378+$377)|0);
 var $380=HEAP8[($379)];
 var $381=$j;
 var $382=($381<<4);
 var $383=((($382)+(15))|0);
 var $384=(($data+$383)|0);
 HEAP8[($384)]=$380;
 label=55;break;
 case 55: 
 var $386=$j;
 var $387=((($386)+(1))|0);
 $j=$387;
 label=53;break;
 case 56: 
 var $389=(($data)|0);
 var $390=$2;
 var $391=_fwrite($389,1024,1,$390);
 label=57;break;
 case 57: 
 var $393=$i;
 var $394=((($393)+(1))|0);
 $i=$394;
 label=51;break;
 case 58: 
 var $396=$1;
 var $397=$l;
 var $398=$ntrk;
 var $399=$398<<8;
 var $400=((($397)+($399))|0);
 var $401=((($400)+(4))|0);
 var $402=_fseek($396,$401,0);
 var $403=$2;
 var $404=$1;
 var $405=$ssize;
 var $406=_pw_move_data($403,$404,$405);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_GMC($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $offset;
 var $d;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1024;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1024)-($9))|0);
 $1=$10;
 label=66;break;
 case 4: 
 label=5;break;
 case 5: 
 $m=0;
 $j=0;
 $k=0;
 label=6;break;
 case 6: 
 var $14=$k;
 var $15=($14|0)<15;
 if($15){label=7;break;}else{label=17;break;}
 case 7: 
 var $17=$start;
 var $18=$k;
 var $19=($18<<4);
 var $20=((($17)+($19))|0);
 var $21=((($20)+(4))|0);
 var $22=$2;
 var $23=(($22+$21)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=$25<<8;
 var $27=$start;
 var $28=$k;
 var $29=($28<<4);
 var $30=((($27)+($29))|0);
 var $31=((($30)+(5))|0);
 var $32=$2;
 var $33=(($32+$31)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=((($26)+($35))|0);
 $o=$36;
 var $37=$start;
 var $38=$k;
 var $39=($38<<4);
 var $40=((($37)+($39))|0);
 var $41=((($40)+(12))|0);
 var $42=$2;
 var $43=(($42+$41)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=$45<<8;
 var $47=$start;
 var $48=$k;
 var $49=($48<<4);
 var $50=((($47)+($49))|0);
 var $51=((($50)+(13))|0);
 var $52=$2;
 var $53=(($52+$51)|0);
 var $54=HEAP8[($53)];
 var $55=($54&255);
 var $56=((($46)+($55))|0);
 $n=$56;
 var $57=$o;
 var $58=($57<<1);
 $o=$58;
 var $59=$start;
 var $60=((($59)+(7))|0);
 var $61=$k;
 var $62=($61<<4);
 var $63=((($60)+($62))|0);
 var $64=$2;
 var $65=(($64+$63)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=($67|0)>64;
 if($68){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=66;break;
 case 9: 
 var $71=$o;
 var $72=($71|0)>65535;
 if($72){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=66;break;
 case 11: 
 var $75=$n;
 var $76=$o;
 var $77=($75|0)>($76|0);
 if($77){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=66;break;
 case 13: 
 var $80=$o;
 var $81=$m;
 var $82=((($81)+($80))|0);
 $m=$82;
 var $83=$o;
 var $84=($83|0)!=0;
 if($84){label=14;break;}else{label=15;break;}
 case 14: 
 var $86=$k;
 var $87=((($86)+(1))|0);
 $j=$87;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $90=$k;
 var $91=((($90)+(1))|0);
 $k=$91;
 label=6;break;
 case 17: 
 var $93=$m;
 var $94=($93|0)<=4;
 if($94){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=66;break;
 case 19: 
 var $97=$start;
 var $98=((($97)+(243))|0);
 var $99=$2;
 var $100=(($99+$98)|0);
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=($102|0)>100;
 if($103){label=21;break;}else{label=20;break;}
 case 20: 
 var $105=$start;
 var $106=((($105)+(243))|0);
 var $107=$2;
 var $108=(($107+$106)|0);
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=($110|0)==0;
 if($111){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=66;break;
 case 22: 
 $l=0;
 $n=0;
 label=23;break;
 case 23: 
 var $115=$n;
 var $116=($115|0)<100;
 if($116){label=24;break;}else{label=31;break;}
 case 24: 
 var $118=$2;
 var $119=$start;
 var $120=(($118+$119)|0);
 var $121=(($120+244)|0);
 var $122=$n;
 var $123=($122<<1);
 var $124=(($121+$123)|0);
 var $125=_readmem16b($124);
 var $126=($125&65535);
 $k=$126;
 var $127=$k;
 var $128=$127&1023;
 var $129=($128|0)!=0;
 if($129){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=66;break;
 case 26: 
 var $132=$k;
 var $133=$132>>10;
 var $134=$l;
 var $135=($133|0)>($134|0);
 if($135){label=27;break;}else{label=28;break;}
 case 27: 
 var $137=$k;
 var $138=$137>>10;
 var $142=$138;label=29;break;
 case 28: 
 var $140=$l;
 var $142=$140;label=29;break;
 case 29: 
 var $142;
 $l=$142;
 label=30;break;
 case 30: 
 var $144=$n;
 var $145=((($144)+(1))|0);
 $n=$145;
 label=23;break;
 case 31: 
 var $147=$l;
 var $148=((($147)+(1))|0);
 $l=$148;
 var $149=$l;
 var $150=($149|0)==1;
 if($150){label=33;break;}else{label=32;break;}
 case 32: 
 var $152=$l;
 var $153=($152|0)>100;
 if($153){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=66;break;
 case 34: 
 label=35;break;
 case 35: 
 var $157=$4;
 var $158=$k;
 var $159=($158<<10);
 var $160=((($159)+(444))|0);
 var $161=$n;
 var $162=($161<<2);
 var $163=((($160)+($162))|0);
 var $164=((($163)+(3))|0);
 var $165=($157|0)<($164|0);
 if($165){label=36;break;}else{label=37;break;}
 case 36: 
 var $167=$k;
 var $168=($167<<10);
 var $169=((($168)+(444))|0);
 var $170=$n;
 var $171=($170<<2);
 var $172=((($169)+($171))|0);
 var $173=((($172)+(3))|0);
 var $174=$4;
 var $175=((($173)-($174))|0);
 $1=$175;
 label=66;break;
 case 37: 
 label=38;break;
 case 38: 
 var $178=$start;
 var $179=((($178)+(243))|0);
 var $180=$2;
 var $181=(($180+$179)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 $o=$183;
 $k=0;
 label=39;break;
 case 39: 
 var $185=$k;
 var $186=$l;
 var $187=($185|0)<($186|0);
 if($187){label=40;break;}else{label=65;break;}
 case 40: 
 $n=0;
 label=41;break;
 case 41: 
 var $190=$n;
 var $191=($190|0)<256;
 if($191){label=42;break;}else{label=63;break;}
 case 42: 
 var $193=$start;
 var $194=((($193)+(444))|0);
 var $195=$k;
 var $196=($195<<10);
 var $197=((($194)+($196))|0);
 var $198=$n;
 var $199=($198<<2);
 var $200=((($197)+($199))|0);
 $offset=$200;
 var $201=$offset;
 var $202=$2;
 var $203=(($202+$201)|0);
 $d=$203;
 var $204=$offset;
 var $205=($204|0)>65532;
 if($205){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=66;break;
 case 44: 
 var $208=$d;
 var $209=(($208+2)|0);
 var $210=HEAP8[($209)];
 var $211=($210&255);
 var $212=$211&15;
 var $213=($212|0)>=144;
 if($213){label=45;break;}else{label=46;break;}
 case 45: 
 $1=-1;
 label=66;break;
 case 46: 
 var $216=$d;
 var $217=(($216+2)|0);
 var $218=HEAP8[($217)];
 var $219=($218&255);
 var $220=$219&15;
 var $221=($220|0)==3;
 if($221){label=47;break;}else{label=49;break;}
 case 47: 
 var $223=$d;
 var $224=(($223+3)|0);
 var $225=HEAP8[($224)];
 var $226=($225&255);
 var $227=($226|0)>64;
 if($227){label=48;break;}else{label=49;break;}
 case 48: 
 $1=-1;
 label=66;break;
 case 49: 
 var $230=$d;
 var $231=(($230+2)|0);
 var $232=HEAP8[($231)];
 var $233=($232&255);
 var $234=$233&15;
 var $235=($234|0)==4;
 if($235){label=50;break;}else{label=52;break;}
 case 50: 
 var $237=$d;
 var $238=(($237+3)|0);
 var $239=HEAP8[($238)];
 var $240=($239&255);
 var $241=($240|0)>99;
 if($241){label=51;break;}else{label=52;break;}
 case 51: 
 $1=-1;
 label=66;break;
 case 52: 
 var $244=$d;
 var $245=(($244+2)|0);
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=$247&15;
 var $249=($248|0)==5;
 if($249){label=53;break;}else{label=55;break;}
 case 53: 
 var $251=$d;
 var $252=(($251+3)|0);
 var $253=HEAP8[($252)];
 var $254=($253&255);
 var $255=$o;
 var $256=((($255)+(1))|0);
 var $257=($254|0)>($256|0);
 if($257){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=66;break;
 case 55: 
 var $260=$d;
 var $261=(($260+2)|0);
 var $262=HEAP8[($261)];
 var $263=($262&255);
 var $264=$263&15;
 var $265=($264|0)==6;
 if($265){label=56;break;}else{label=58;break;}
 case 56: 
 var $267=$d;
 var $268=(($267+3)|0);
 var $269=HEAP8[($268)];
 var $270=($269&255);
 var $271=($270|0)>=2;
 if($271){label=57;break;}else{label=58;break;}
 case 57: 
 $1=-1;
 label=66;break;
 case 58: 
 var $274=$d;
 var $275=(($274+2)|0);
 var $276=HEAP8[($275)];
 var $277=($276&255);
 var $278=$277&15;
 var $279=($278|0)==7;
 if($279){label=59;break;}else{label=61;break;}
 case 59: 
 var $281=$d;
 var $282=(($281+3)|0);
 var $283=HEAP8[($282)];
 var $284=($283&255);
 var $285=($284|0)>=2;
 if($285){label=60;break;}else{label=61;break;}
 case 60: 
 $1=-1;
 label=66;break;
 case 61: 
 label=62;break;
 case 62: 
 var $289=$n;
 var $290=((($289)+(1))|0);
 $n=$290;
 label=41;break;
 case 63: 
 label=64;break;
 case 64: 
 var $293=$k;
 var $294=((($293)+(1))|0);
 $k=$294;
 label=39;break;
 case 65: 
 var $296=$3;
 _pw_read_title(0,$296,0);
 $1=0;
 label=66;break;
 case 66: 
 var $298=$1;
 STACKTOP=sp;return $298;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_GMC($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $ptable=(sp)+(1024);
 var $max;
 var $PatPos;
 var $len;
 var $looplen;
 var $ssize;
 var $i;
 var $j;
 $1=$in;
 $2=$out;
 $ssize=0;
 $i=0;
 $j=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$2;
 var $5=_pw_write_zero($4,20);
 $i=0;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=($7|0)<15;
 if($8){label=3;break;}else{label=11;break;}
 case 3: 
 var $10=$2;
 var $11=_pw_write_zero($10,22);
 var $12=$1;
 var $13=_read32b($12);
 var $14=$2;
 var $15=$1;
 var $16=_read16b($15);
 $len=$16;
 _write16b($14,$16);
 var $17=$len;
 var $18=($17&65535);
 var $19=($18<<1);
 var $20=$ssize;
 var $21=((($20)+($19))|0);
 $ssize=$21;
 var $22=$1;
 var $23=_read8($22);
 var $24=$2;
 _write8($24,0);
 var $25=$2;
 var $26=$1;
 var $27=_read8($26);
 _write8($25,$27);
 var $28=$1;
 var $29=_read32b($28);
 var $30=$1;
 var $31=_read16b($30);
 $looplen=$31;
 var $32=$2;
 var $33=$looplen;
 var $34=($33&65535);
 var $35=($34|0)>2;
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $37=$len;
 var $38=($37&65535);
 var $39=$looplen;
 var $40=($39&65535);
 var $41=((($38)-($40))|0);
 var $44=$41;label=6;break;
 case 5: 
 var $44=0;label=6;break;
 case 6: 
 var $44;
 var $45=(($44)&65535);
 _write16b($32,$45);
 var $46=$2;
 var $47=$looplen;
 var $48=($47&65535);
 var $49=($48|0)<=2;
 if($49){label=7;break;}else{label=8;break;}
 case 7: 
 var $55=1;label=9;break;
 case 8: 
 var $52=$looplen;
 var $53=($52&65535);
 var $55=$53;label=9;break;
 case 9: 
 var $55;
 var $56=(($55)&65535);
 _write16b($46,$56);
 var $57=$1;
 var $58=_read16b($57);
 label=10;break;
 case 10: 
 var $60=$i;
 var $61=((($60)+(1))|0);
 $i=$61;
 label=2;break;
 case 11: 
 var $63=$tmp;
 _memset($63, 0, 30)|0;
 var $64=(($tmp+29)|0);
 HEAP8[($64)]=1;
 $i=0;
 label=12;break;
 case 12: 
 var $66=$i;
 var $67=($66|0)<16;
 if($67){label=13;break;}else{label=15;break;}
 case 13: 
 var $69=(($tmp)|0);
 var $70=$2;
 var $71=_fwrite($69,30,1,$70);
 label=14;break;
 case 14: 
 var $73=$i;
 var $74=((($73)+(1))|0);
 $i=$74;
 label=12;break;
 case 15: 
 var $76=$1;
 var $77=_fseek($76,243,0);
 var $78=$2;
 var $79=$1;
 var $80=_read8($79);
 $PatPos=$80;
 _write8($78,$80);
 var $81=$2;
 _write8($81,127);
 $i=0;
 label=16;break;
 case 16: 
 var $83=$i;
 var $84=($83|0)<100;
 if($84){label=17;break;}else{label=19;break;}
 case 17: 
 var $86=$1;
 var $87=_read16b($86);
 var $88=($87&65535);
 var $89=(((($88|0))/(1024))&-1);
 var $90=(($89)&255);
 var $91=$i;
 var $92=(($ptable+$91)|0);
 HEAP8[($92)]=$90;
 label=18;break;
 case 18: 
 var $94=$i;
 var $95=((($94)+(1))|0);
 $i=$95;
 label=16;break;
 case 19: 
 var $97=(($ptable)|0);
 var $98=$2;
 var $99=_fwrite($97,128,1,$98);
 $i=0;
 $max=0;
 label=20;break;
 case 20: 
 var $101=$i;
 var $102=($101|0)<128;
 if($102){label=21;break;}else{label=25;break;}
 case 21: 
 var $104=$i;
 var $105=(($ptable+$104)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$max;
 var $109=($108&255);
 var $110=($107|0)>($109|0);
 if($110){label=22;break;}else{label=23;break;}
 case 22: 
 var $112=$i;
 var $113=(($ptable+$112)|0);
 var $114=HEAP8[($113)];
 $max=$114;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $117=$i;
 var $118=((($117)+(1))|0);
 $i=$118;
 label=20;break;
 case 25: 
 var $120=$2;
 _write32b($120,1294879534);
 var $121=$1;
 var $122=_fseek($121,444,0);
 $i=0;
 label=26;break;
 case 26: 
 var $124=$i;
 var $125=$max;
 var $126=($125&255);
 var $127=($124|0)<=($126|0);
 if($127){label=27;break;}else{label=41;break;}
 case 27: 
 var $129=$tmp;
 _memset($129, 0, 1024)|0;
 var $130=(($tmp)|0);
 var $131=$1;
 var $132=_fread($130,1024,1,$131);
 $j=0;
 label=28;break;
 case 28: 
 var $134=$j;
 var $135=($134|0)<256;
 if($135){label=29;break;}else{label=39;break;}
 case 29: 
 var $137=$j;
 var $138=($137<<2);
 var $139=((($138)+(2))|0);
 var $140=(($tmp+$139)|0);
 var $141=HEAP8[($140)];
 var $142=($141&255);
 var $143=$142&15;
 switch(($143|0)){case 3:{ label=30;break;}case 4:{ label=31;break;}case 5:{ label=32;break;}case 6:{ label=33;break;}case 7:{ label=34;break;}case 8:{ label=35;break;}default:{label=36;break;}}break;
 case 30: 
 var $145=$j;
 var $146=($145<<2);
 var $147=((($146)+(2))|0);
 var $148=(($tmp+$147)|0);
 var $149=HEAP8[($148)];
 var $150=($149&255);
 var $151=((($150)+(9))|0);
 var $152=(($151)&255);
 HEAP8[($148)]=$152;
 label=37;break;
 case 31: 
 var $154=$j;
 var $155=($154<<2);
 var $156=((($155)+(2))|0);
 var $157=(($tmp+$156)|0);
 var $158=HEAP8[($157)];
 var $159=($158&255);
 var $160=((($159)+(9))|0);
 var $161=(($160)&255);
 HEAP8[($157)]=$161;
 label=37;break;
 case 32: 
 var $163=$j;
 var $164=($163<<2);
 var $165=((($164)+(2))|0);
 var $166=(($tmp+$165)|0);
 var $167=HEAP8[($166)];
 var $168=($167&255);
 var $169=((($168)+(6))|0);
 var $170=(($169)&255);
 HEAP8[($166)]=$170;
 label=37;break;
 case 33: 
 var $172=$j;
 var $173=($172<<2);
 var $174=((($173)+(2))|0);
 var $175=(($tmp+$174)|0);
 var $176=HEAP8[($175)];
 var $177=($176&255);
 var $178=((($177)+(8))|0);
 var $179=(($178)&255);
 HEAP8[($175)]=$179;
 label=37;break;
 case 34: 
 var $181=$j;
 var $182=($181<<2);
 var $183=((($182)+(2))|0);
 var $184=(($tmp+$183)|0);
 var $185=HEAP8[($184)];
 var $186=($185&255);
 var $187=((($186)+(7))|0);
 var $188=(($187)&255);
 HEAP8[($184)]=$188;
 label=37;break;
 case 35: 
 var $190=$j;
 var $191=($190<<2);
 var $192=((($191)+(2))|0);
 var $193=(($tmp+$192)|0);
 var $194=HEAP8[($193)];
 var $195=($194&255);
 var $196=((($195)+(7))|0);
 var $197=(($196)&255);
 HEAP8[($193)]=$197;
 label=37;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 var $201=$j;
 var $202=((($201)+(1))|0);
 $j=$202;
 label=28;break;
 case 39: 
 var $204=(($tmp)|0);
 var $205=$2;
 var $206=_fwrite($204,1024,1,$205);
 label=40;break;
 case 40: 
 var $208=$i;
 var $209=((($208)+(1))|0);
 $i=$209;
 label=26;break;
 case 41: 
 var $211=$2;
 var $212=$1;
 var $213=$ssize;
 var $214=_pw_move_data($211,$212,$213);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_crb($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<378;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((378)-($9))|0);
 $1=$10;
 label=67;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$start;
 var $14=((($13)+(248))|0);
 var $15=$2;
 var $16=(($15+$14)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=($18|0)>127;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=$start;
 var $22=((($21)+(248))|0);
 var $23=$2;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=($26|0)==0;
 if($27){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=67;break;
 case 8: 
 var $30=$start;
 var $31=((($30)+(249))|0);
 var $32=$2;
 var $33=(($32+$31)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=($35|0)!=127;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=67;break;
 case 10: 
 $ssize=0;
 $k=0;
 label=11;break;
 case 11: 
 var $40=$k;
 var $41=($40|0)<31;
 if($41){label=12;break;}else{label=29;break;}
 case 12: 
 var $43=$start;
 var $44=((($43)+(2))|0);
 var $45=$k;
 var $46=($45<<3);
 var $47=((($44)+($46))|0);
 var $48=$2;
 var $49=(($48+$47)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=($51|0)>15;
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=67;break;
 case 14: 
 var $55=$start;
 var $56=((($55)+(3))|0);
 var $57=$k;
 var $58=($57<<3);
 var $59=((($56)+($58))|0);
 var $60=$2;
 var $61=(($60+$59)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=($63|0)>64;
 if($64){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=67;break;
 case 16: 
 var $67=$2;
 var $68=$start;
 var $69=(($67+$68)|0);
 var $70=$k;
 var $71=($70<<3);
 var $72=(($69+$71)|0);
 var $73=_readmem16b($72);
 var $74=($73&65535);
 var $75=($74<<1);
 $j=$75;
 var $76=$2;
 var $77=$start;
 var $78=(($76+$77)|0);
 var $79=$k;
 var $80=($79<<3);
 var $81=(($78+$80)|0);
 var $82=(($81+4)|0);
 var $83=_readmem16b($82);
 var $84=($83&65535);
 var $85=($84<<1);
 $m=$85;
 var $86=$2;
 var $87=$start;
 var $88=(($86+$87)|0);
 var $89=$k;
 var $90=($89<<3);
 var $91=(($88+$90)|0);
 var $92=(($91+6)|0);
 var $93=_readmem16b($92);
 var $94=($93&65535);
 var $95=($94<<1);
 $n=$95;
 var $96=$j;
 var $97=($96|0)>65535;
 if($97){label=19;break;}else{label=17;break;}
 case 17: 
 var $99=$m;
 var $100=($99|0)>65535;
 if($100){label=19;break;}else{label=18;break;}
 case 18: 
 var $102=$n;
 var $103=($102|0)>65535;
 if($103){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=67;break;
 case 20: 
 var $106=$n;
 var $107=($106|0)!=0;
 if($107){label=21;break;}else{label=24;break;}
 case 21: 
 var $109=$n;
 var $110=($109|0)!=2;
 if($110){label=22;break;}else{label=24;break;}
 case 22: 
 var $112=$m;
 var $113=$n;
 var $114=((($112)+($113))|0);
 var $115=$j;
 var $116=($114|0)>($115|0);
 if($116){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=67;break;
 case 24: 
 var $119=$m;
 var $120=($119|0)!=0;
 if($120){label=25;break;}else{label=27;break;}
 case 25: 
 var $122=$n;
 var $123=($122|0)<=2;
 if($123){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=67;break;
 case 27: 
 var $126=$j;
 var $127=$ssize;
 var $128=((($127)+($126))|0);
 $ssize=$128;
 label=28;break;
 case 28: 
 var $130=$k;
 var $131=((($130)+(1))|0);
 $k=$131;
 label=11;break;
 case 29: 
 var $133=$ssize;
 var $134=($133|0)<=4;
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 $1=-1;
 label=67;break;
 case 31: 
 $l=0;
 $j=0;
 label=32;break;
 case 32: 
 var $138=$j;
 var $139=($138|0)<128;
 if($139){label=33;break;}else{label=39;break;}
 case 33: 
 var $141=$start;
 var $142=((($141)+(250))|0);
 var $143=$j;
 var $144=((($142)+($143))|0);
 var $145=$2;
 var $146=(($145+$144)|0);
 var $147=HEAP8[($146)];
 var $148=($147&255);
 var $149=($148|0)>127;
 if($149){label=34;break;}else{label=35;break;}
 case 34: 
 $1=-1;
 label=67;break;
 case 35: 
 var $152=$start;
 var $153=((($152)+(250))|0);
 var $154=$j;
 var $155=((($153)+($154))|0);
 var $156=$2;
 var $157=(($156+$155)|0);
 var $158=HEAP8[($157)];
 var $159=($158&255);
 var $160=$l;
 var $161=($159|0)>($160|0);
 if($161){label=36;break;}else{label=37;break;}
 case 36: 
 var $163=$start;
 var $164=((($163)+(250))|0);
 var $165=$j;
 var $166=((($164)+($165))|0);
 var $167=$2;
 var $168=(($167+$166)|0);
 var $169=HEAP8[($168)];
 var $170=($169&255);
 $l=$170;
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 var $173=$j;
 var $174=((($173)+(1))|0);
 $j=$174;
 label=32;break;
 case 39: 
 label=40;break;
 case 40: 
 var $177=$4;
 var $178=$l;
 var $179=($178<<2);
 var $180=($179<<2);
 var $181=($180<<6);
 var $182=((($181)+(379))|0);
 var $183=($177|0)<($182|0);
 if($183){label=41;break;}else{label=42;break;}
 case 41: 
 var $185=$l;
 var $186=($185<<2);
 var $187=($186<<2);
 var $188=($187<<6);
 var $189=((($188)+(379))|0);
 var $190=$4;
 var $191=((($189)-($190))|0);
 $1=$191;
 label=67;break;
 case 42: 
 label=43;break;
 case 43: 
 $k=0;
 $j=0;
 $m=0;
 label=44;break;
 case 44: 
 var $195=$m;
 var $196=$l;
 var $197=($195|0)<=($196|0);
 if($197){label=45;break;}else{label=66;break;}
 case 45: 
 $n=0;
 label=46;break;
 case 46: 
 var $200=$n;
 var $201=($200|0)<4;
 if($201){label=47;break;}else{label=64;break;}
 case 47: 
 $o=0;
 label=48;break;
 case 48: 
 var $204=$o;
 var $205=($204|0)<64;
 if($205){label=49;break;}else{label=62;break;}
 case 49: 
 var $207=$start;
 var $208=((($207)+(378))|0);
 var $209=$j;
 var $210=((($208)+($209))|0);
 var $211=$2;
 var $212=(($211+$210)|0);
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=$214&192;
 if(($215|0)==0){ label=50;break;}else if(($215|0)==128){ label=53;break;}else if(($215|0)==192){ label=56;break;}else{label=59;break;}
 case 50: 
 var $217=$start;
 var $218=((($217)+(378))|0);
 var $219=$j;
 var $220=((($218)+($219))|0);
 var $221=$2;
 var $222=(($221+$220)|0);
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=$224&15;
 var $226=($225|0)>3;
 if($226){label=51;break;}else{label=52;break;}
 case 51: 
 $1=-1;
 label=67;break;
 case 52: 
 var $229=$k;
 var $230=((($229)+(4))|0);
 $k=$230;
 var $231=$j;
 var $232=((($231)+(4))|0);
 $j=$232;
 label=60;break;
 case 53: 
 var $234=$start;
 var $235=((($234)+(379))|0);
 var $236=$j;
 var $237=((($235)+($236))|0);
 var $238=$2;
 var $239=(($238+$237)|0);
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=($241|0)!=0;
 if($242){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=67;break;
 case 55: 
 var $245=$start;
 var $246=((($245)+(381))|0);
 var $247=$j;
 var $248=((($246)+($247))|0);
 var $249=$2;
 var $250=(($249+$248)|0);
 var $251=HEAP8[($250)];
 var $252=($251&255);
 var $253=$o;
 var $254=((($253)+($252))|0);
 $o=$254;
 var $255=$j;
 var $256=((($255)+(4))|0);
 $j=$256;
 var $257=$k;
 var $258=((($257)+(4))|0);
 $k=$258;
 label=60;break;
 case 56: 
 var $260=$start;
 var $261=((($260)+(379))|0);
 var $262=$j;
 var $263=((($261)+($262))|0);
 var $264=$2;
 var $265=(($264+$263)|0);
 var $266=HEAP8[($265)];
 var $267=($266&255);
 var $268=($267|0)!=0;
 if($268){label=57;break;}else{label=58;break;}
 case 57: 
 $1=-1;
 label=67;break;
 case 58: 
 $o=100;
 var $271=$j;
 var $272=((($271)+(4))|0);
 $j=$272;
 var $273=$k;
 var $274=((($273)+(4))|0);
 $k=$274;
 label=60;break;
 case 59: 
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 var $278=$o;
 var $279=((($278)+(1))|0);
 $o=$279;
 label=48;break;
 case 62: 
 label=63;break;
 case 63: 
 var $282=$n;
 var $283=((($282)+(1))|0);
 $n=$283;
 label=46;break;
 case 64: 
 label=65;break;
 case 65: 
 var $286=$m;
 var $287=((($286)+(1))|0);
 $m=$287;
 label=44;break;
 case 66: 
 var $289=$3;
 _pw_read_title(0,$289,0);
 $1=0;
 label=67;break;
 case 67: 
 var $291=$1;
 STACKTOP=sp;return $291;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_crb($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $ptable=sp;
 var $pat_pos;
 var $pat_max;
 var $pat=(sp)+(128);
 var $taddr=(sp)+(1152);
 var $i;
 var $j;
 var $k;
 var $l;
 var $m;
 var $size;
 var $ssize;
 var $y;
 var $x;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$taddr;
 _memset($4, 0, 2048)|0;
 var $5=$2;
 var $6=_pw_write_zero($5,20);
 $i=0;
 label=2;break;
 case 2: 
 var $8=$i;
 var $9=($8|0)<31;
 if($9){label=3;break;}else{label=8;break;}
 case 3: 
 var $11=$2;
 var $12=_pw_write_zero($11,22);
 var $13=$2;
 var $14=$1;
 var $15=_read16b($14);
 var $16=($15&65535);
 $size=$16;
 var $17=(($16)&65535);
 _write16b($13,$17);
 var $18=$size;
 var $19=($18<<1);
 var $20=$ssize;
 var $21=((($20)+($19))|0);
 $ssize=$21;
 var $22=$2;
 var $23=$1;
 var $24=_read8($23);
 _write8($22,$24);
 var $25=$2;
 var $26=$1;
 var $27=_read8($26);
 _write8($25,$27);
 var $28=$2;
 var $29=$1;
 var $30=_read16b($29);
 _write16b($28,$30);
 var $31=$1;
 var $32=_read16b($31);
 var $33=($32&65535);
 $size=$33;
 var $34=$2;
 var $35=$size;
 var $36=($35|0)!=0;
 if($36){label=4;break;}else{label=5;break;}
 case 4: 
 var $38=$size;
 var $41=$38;label=6;break;
 case 5: 
 var $41=1;label=6;break;
 case 6: 
 var $41;
 var $42=(($41)&65535);
 _write16b($34,$42);
 label=7;break;
 case 7: 
 var $44=$i;
 var $45=((($44)+(1))|0);
 $i=$45;
 label=2;break;
 case 8: 
 var $47=$2;
 var $48=$1;
 var $49=_read8($48);
 $pat_pos=$49;
 _write8($47,$49);
 var $50=$2;
 var $51=$1;
 var $52=_read8($51);
 _write8($50,$52);
 $i=0;
 $pat_max=0;
 label=9;break;
 case 9: 
 var $54=$i;
 var $55=($54|0)<128;
 if($55){label=10;break;}else{label=14;break;}
 case 10: 
 var $57=$2;
 var $58=$1;
 var $59=_read8($58);
 $c1=$59;
 _write8($57,$59);
 var $60=$c1;
 var $61=($60&255);
 var $62=$pat_max;
 var $63=($62&255);
 var $64=($61|0)>($63|0);
 if($64){label=11;break;}else{label=12;break;}
 case 11: 
 var $66=$c1;
 $pat_max=$66;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $69=$i;
 var $70=((($69)+(1))|0);
 $i=$70;
 label=9;break;
 case 14: 
 var $72=$pat_max;
 var $73=((($72)+(1))&255);
 $pat_max=$73;
 var $74=$2;
 _write32b($74,1294879534);
 $i=0;
 label=15;break;
 case 15: 
 var $76=$i;
 var $77=$pat_max;
 var $78=($77&255);
 var $79=($76|0)<($78|0);
 if($79){label=16;break;}else{label=36;break;}
 case 16: 
 var $81=$pat;
 _memset($81, 0, 1024)|0;
 $j=0;
 label=17;break;
 case 17: 
 var $83=$j;
 var $84=($83|0)<4;
 if($84){label=18;break;}else{label=34;break;}
 case 18: 
 var $86=$1;
 var $87=_ftell($86);
 var $88=$i;
 var $89=($88<<2);
 var $90=$j;
 var $91=((($89)+($90))|0);
 var $92=(($taddr+($91<<2))|0);
 HEAP32[(($92)>>2)]=$87;
 $k=0;
 label=19;break;
 case 19: 
 var $94=$k;
 var $95=($94|0)<64;
 if($95){label=20;break;}else{label=32;break;}
 case 20: 
 var $97=$k;
 var $98=($97<<4);
 var $99=$j;
 var $100=($99<<2);
 var $101=((($98)+($100))|0);
 $y=$101;
 var $102=$1;
 var $103=_read8($102);
 $c1=$103;
 var $104=$c1;
 var $105=($104&255);
 var $106=($105|0)==128;
 if($106){label=21;break;}else{label=22;break;}
 case 21: 
 var $108=$1;
 var $109=_read8($108);
 $c2=$109;
 var $110=$1;
 var $111=_read8($110);
 $c3=$111;
 var $112=$1;
 var $113=_read8($112);
 $c4=$113;
 var $114=$c4;
 var $115=($114&255);
 var $116=$k;
 var $117=((($116)+($115))|0);
 $k=$117;
 label=31;break;
 case 22: 
 var $119=$c1;
 var $120=($119&255);
 var $121=($120|0)==192;
 if($121){label=23;break;}else{label=30;break;}
 case 23: 
 var $123=$1;
 var $124=_read8($123);
 $c2=$124;
 var $125=$1;
 var $126=_read8($125);
 $c3=$126;
 var $127=$1;
 var $128=_read8($127);
 $c4=$128;
 var $129=$1;
 var $130=_ftell($129);
 $l=$130;
 var $131=$1;
 var $132=$c3;
 var $133=($132&255);
 var $134=$133<<8;
 var $135=$c4;
 var $136=($135&255);
 var $137=((($134)+($136))|0);
 var $138=(((($137|0))/(4))&-1);
 var $139=(($taddr+($138<<2))|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=_fseek($131,$140,0);
 $m=0;
 label=24;break;
 case 24: 
 var $143=$m;
 var $144=($143|0)<64;
 if($144){label=25;break;}else{label=29;break;}
 case 25: 
 var $146=$m;
 var $147=($146<<4);
 var $148=$j;
 var $149=($148<<2);
 var $150=((($147)+($149))|0);
 $x=$150;
 var $151=$1;
 var $152=_read8($151);
 $c1=$152;
 var $153=$c1;
 var $154=($153&255);
 var $155=($154|0)==128;
 if($155){label=26;break;}else{label=27;break;}
 case 26: 
 var $157=$1;
 var $158=_read8($157);
 $c2=$158;
 var $159=$1;
 var $160=_read8($159);
 $c3=$160;
 var $161=$1;
 var $162=_read8($161);
 $c4=$162;
 var $163=$c4;
 var $164=($163&255);
 var $165=$m;
 var $166=((($165)+($164))|0);
 $m=$166;
 label=28;break;
 case 27: 
 var $168=$c1;
 var $169=$x;
 var $170=(($pat+$169)|0);
 HEAP8[($170)]=$168;
 var $171=$1;
 var $172=_read8($171);
 var $173=$x;
 var $174=((($173)+(1))|0);
 var $175=(($pat+$174)|0);
 HEAP8[($175)]=$172;
 var $176=$1;
 var $177=_read8($176);
 var $178=$x;
 var $179=((($178)+(2))|0);
 var $180=(($pat+$179)|0);
 HEAP8[($180)]=$177;
 var $181=$1;
 var $182=_read8($181);
 var $183=$x;
 var $184=((($183)+(3))|0);
 var $185=(($pat+$184)|0);
 HEAP8[($185)]=$182;
 label=28;break;
 case 28: 
 var $187=$m;
 var $188=((($187)+(1))|0);
 $m=$188;
 label=24;break;
 case 29: 
 var $190=$1;
 var $191=$l;
 var $192=_fseek($190,$191,0);
 var $193=$k;
 var $194=((($193)+(100))|0);
 $k=$194;
 label=31;break;
 case 30: 
 var $196=$c1;
 var $197=$y;
 var $198=(($pat+$197)|0);
 HEAP8[($198)]=$196;
 var $199=$1;
 var $200=_read8($199);
 var $201=$y;
 var $202=((($201)+(1))|0);
 var $203=(($pat+$202)|0);
 HEAP8[($203)]=$200;
 var $204=$1;
 var $205=_read8($204);
 var $206=$y;
 var $207=((($206)+(2))|0);
 var $208=(($pat+$207)|0);
 HEAP8[($208)]=$205;
 var $209=$1;
 var $210=_read8($209);
 var $211=$y;
 var $212=((($211)+(3))|0);
 var $213=(($pat+$212)|0);
 HEAP8[($213)]=$210;
 label=31;break;
 case 31: 
 var $215=$k;
 var $216=((($215)+(1))|0);
 $k=$216;
 label=19;break;
 case 32: 
 label=33;break;
 case 33: 
 var $219=$j;
 var $220=((($219)+(1))|0);
 $j=$220;
 label=17;break;
 case 34: 
 var $222=(($pat)|0);
 var $223=$2;
 var $224=_fwrite($222,1024,1,$223);
 label=35;break;
 case 35: 
 var $226=$i;
 var $227=((($226)+(1))|0);
 $i=$227;
 label=15;break;
 case 36: 
 var $229=$2;
 var $230=$1;
 var $231=$ssize;
 var $232=_pw_move_data($229,$230,$231);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_hrt($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1084;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1084)-($9))|0);
 $1=$10;
 label=16;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13+1080)|0);
 var $15=_readmem32b($14);
 var $16=($15|0)!=1213355041;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=16;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $20=$i;
 var $21=($20|0)<31;
 if($21){label=9;break;}else{label=15;break;}
 case 9: 
 var $23=$start;
 var $24=((($23)+(20))|0);
 var $25=$i;
 var $26=((($25)*(30))&-1);
 var $27=((($24)+($26))|0);
 var $28=((($27)+(24))|0);
 var $29=$2;
 var $30=(($29+$28)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=($32|0)>15;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=16;break;
 case 11: 
 var $36=$start;
 var $37=((($36)+(20))|0);
 var $38=$i;
 var $39=((($38)*(30))&-1);
 var $40=((($37)+($39))|0);
 var $41=((($40)+(25))|0);
 var $42=$2;
 var $43=(($42+$41)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=($45|0)>64;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=16;break;
 case 13: 
 label=14;break;
 case 14: 
 var $50=$i;
 var $51=((($50)+(1))|0);
 $i=$51;
 label=8;break;
 case 15: 
 var $53=$2;
 var $54=$3;
 _pw_read_title($53,$54,20);
 $1=0;
 label=16;break;
 case 16: 
 var $56=$1;
 STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_hrt($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $buf=sp;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $len;
 var $npat;
 var $ssize;
 var $i;
 var $j;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$buf;
 _memset($3, 0, 950)|0;
 var $4=(($buf)|0);
 var $5=$1;
 var $6=_fread($4,950,1,$5);
 $i=0;
 label=2;break;
 case 2: 
 var $8=$i;
 var $9=($8|0)<31;
 if($9){label=3;break;}else{label=5;break;}
 case 3: 
 var $11=(($buf)|0);
 var $12=(($11+38)|0);
 var $13=$i;
 var $14=((($13)*(30))&-1);
 var $15=(($12+$14)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=0;
 label=4;break;
 case 4: 
 var $18=$i;
 var $19=((($18)+(1))|0);
 $i=$19;
 label=2;break;
 case 5: 
 var $21=(($buf)|0);
 var $22=$2;
 var $23=_fwrite($21,950,1,$22);
 $i=0;
 label=6;break;
 case 6: 
 var $25=$i;
 var $26=($25|0)<31;
 if($26){label=7;break;}else{label=9;break;}
 case 7: 
 var $28=(($buf)|0);
 var $29=(($28+42)|0);
 var $30=$i;
 var $31=((($30)*(30))&-1);
 var $32=(($29+$31)|0);
 var $33=_readmem16b($32);
 var $34=($33&65535);
 var $35=($34<<1);
 var $36=$ssize;
 var $37=((($36)+($35))|0);
 $ssize=$37;
 label=8;break;
 case 8: 
 var $39=$i;
 var $40=((($39)+(1))|0);
 $i=$40;
 label=6;break;
 case 9: 
 var $42=$2;
 var $43=$1;
 var $44=_read8($43);
 var $45=($44&255);
 $len=$45;
 var $46=(($45)&255);
 _write8($42,$46);
 var $47=$2;
 var $48=$1;
 var $49=_read8($48);
 _write8($47,$49);
 var $50=(($buf)|0);
 var $51=$1;
 var $52=_fread($50,1,128,$51);
 $npat=0;
 $i=0;
 label=10;break;
 case 10: 
 var $54=$i;
 var $55=($54|0)<128;
 if($55){label=11;break;}else{label=15;break;}
 case 11: 
 var $57=$i;
 var $58=(($buf+$57)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=$npat;
 var $62=($60|0)>($61|0);
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 var $64=$i;
 var $65=(($buf+$64)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 $npat=$67;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $70=$i;
 var $71=((($70)+(1))|0);
 $i=$71;
 label=10;break;
 case 15: 
 var $73=$npat;
 var $74=((($73)+(1))|0);
 $npat=$74;
 var $75=$2;
 _write32b($75,1294879534);
 var $76=$1;
 var $77=_fseek($76,1084,0);
 $i=0;
 label=16;break;
 case 16: 
 var $79=$i;
 var $80=$npat;
 var $81=($79|0)<($80|0);
 if($81){label=17;break;}else{label=26;break;}
 case 17: 
 $j=0;
 label=18;break;
 case 18: 
 var $84=$j;
 var $85=($84|0)<256;
 if($85){label=19;break;}else{label=24;break;}
 case 19: 
 var $87=$1;
 var $88=_read8($87);
 var $89=(($buf)|0);
 HEAP8[($89)]=$88;
 var $90=$1;
 var $91=_read8($90);
 var $92=(($buf+1)|0);
 HEAP8[($92)]=$91;
 var $93=$1;
 var $94=_read8($93);
 var $95=(($buf+2)|0);
 HEAP8[($95)]=$94;
 var $96=$1;
 var $97=_read8($96);
 var $98=(($buf+3)|0);
 HEAP8[($98)]=$97;
 var $99=(($buf)|0);
 var $100=HEAP8[($99)];
 var $101=($100&255);
 var $102=(((($101|0))/(2))&-1);
 var $103=(($102)&255);
 HEAP8[($99)]=$103;
 var $104=(($buf)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 var $107=$106&240;
 var $108=(($107)&255);
 $c1=$108;
 var $109=(($buf+1)|0);
 var $110=HEAP8[($109)];
 var $111=($110&255);
 var $112=($111|0)==0;
 if($112){label=20;break;}else{label=21;break;}
 case 20: 
 $c2=0;
 label=22;break;
 case 21: 
 var $115=(($buf+1)|0);
 var $116=HEAP8[($115)];
 var $117=($116&255);
 var $118=(((($117|0))/(2))&-1);
 var $119=((4504+($118<<1))|0);
 var $120=(($119)|0);
 var $121=HEAP8[($120)];
 var $122=($121&255);
 var $123=$c1;
 var $124=($123&255);
 var $125=$124|$122;
 var $126=(($125)&255);
 $c1=$126;
 var $127=(($buf+1)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=(((($129|0))/(2))&-1);
 var $131=((4504+($130<<1))|0);
 var $132=(($131+1)|0);
 var $133=HEAP8[($132)];
 $c2=$133;
 label=22;break;
 case 22: 
 var $135=(($buf)|0);
 var $136=HEAP8[($135)];
 var $137=($136&255);
 var $138=$137<<4;
 var $139=$138&240;
 var $140=(($buf+2)|0);
 var $141=HEAP8[($140)];
 var $142=($141&255);
 var $143=$139|$142;
 var $144=(($143)&255);
 $c3=$144;
 var $145=(($buf+3)|0);
 var $146=HEAP8[($145)];
 $c4=$146;
 var $147=$2;
 var $148=$c1;
 _write8($147,$148);
 var $149=$2;
 var $150=$c2;
 _write8($149,$150);
 var $151=$2;
 var $152=$c3;
 _write8($151,$152);
 var $153=$2;
 var $154=$c4;
 _write8($153,$154);
 label=23;break;
 case 23: 
 var $156=$j;
 var $157=((($156)+(1))|0);
 $j=$157;
 label=18;break;
 case 24: 
 label=25;break;
 case 25: 
 var $160=$i;
 var $161=((($160)+(1))|0);
 $i=$161;
 label=16;break;
 case 26: 
 var $163=$2;
 var $164=$1;
 var $165=$ssize;
 var $166=_pw_move_data($163,$164,$165);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_kris($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1024;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1024)-($9))|0);
 $1=$10;
 label=22;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13+952)|0);
 var $15=_readmem32b($14);
 var $16=($15|0)!=1263683923;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=22;break;
 case 7: 
 $j=0;
 label=8;break;
 case 8: 
 var $20=$j;
 var $21=($20|0)<31;
 if($21){label=9;break;}else{label=15;break;}
 case 9: 
 var $23=$j;
 var $24=((($23)*(30))&-1);
 var $25=((($24)+(47))|0);
 var $26=$2;
 var $27=(($26+$25)|0);
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=($29|0)>64;
 if($30){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=22;break;
 case 11: 
 var $33=$j;
 var $34=((($33)*(30))&-1);
 var $35=((($34)+(46))|0);
 var $36=$2;
 var $37=(($36+$35)|0);
 var $38=HEAP8[($37)];
 var $39=($38&255);
 var $40=($39|0)>15;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=22;break;
 case 13: 
 label=14;break;
 case 14: 
 var $44=$j;
 var $45=((($44)+(1))|0);
 $j=$45;
 label=8;break;
 case 15: 
 $j=0;
 label=16;break;
 case 16: 
 var $48=$j;
 var $49=($48|0)<31;
 if($49){label=17;break;}else{label=21;break;}
 case 17: 
 var $51=$start;
 var $52=$j;
 var $53=((($52)*(30))&-1);
 var $54=((($51)+($53))|0);
 var $55=((($54)+(47))|0);
 var $56=$2;
 var $57=(($56+$55)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=($59|0)>64;
 if($60){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=22;break;
 case 19: 
 label=20;break;
 case 20: 
 var $64=$j;
 var $65=((($64)+(1))|0);
 $j=$65;
 label=16;break;
 case 21: 
 var $67=$2;
 var $68=$3;
 _pw_read_title($67,$68,20);
 $1=0;
 label=22;break;
 case 22: 
 var $70=$1;
 STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_kris($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+133248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $c3;
 var $npat;
 var $max;
 var $ptable=(sp)+(1024);
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $tdata=(sp)+(1152);
 var $taddr=(sp)+(132224);
 var $maxtaddr;
 var $i;
 var $j;
 var $k;
 var $size;
 var $ssize;
 var $p;
 $1=$in;
 $2=$out;
 $maxtaddr=0;
 $ssize=0;
 var $3=$tmp;
 _memset($3, 0, 1024)|0;
 var $4=$ptable;
 _memset($4, 0, 128)|0;
 var $5=$taddr;
 _memset($5, 0, 1024)|0;
 var $6=$tdata;
 _memset($6, 0, 131072)|0;
 var $7=$2;
 var $8=$1;
 var $9=_pw_move_data($7,$8,20);
 var $10=$1;
 var $11=_fseek($10,2,1);
 $i=0;
 label=2;break;
 case 2: 
 var $13=$i;
 var $14=($13|0)<31;
 if($14){label=3;break;}else{label=7;break;}
 case 3: 
 var $16=(($tmp)|0);
 var $17=$1;
 var $18=_fread($16,22,1,$17);
 var $19=(($tmp)|0);
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=($21|0)==1;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=(($tmp)|0);
 HEAP8[($24)]=0;
 label=5;break;
 case 5: 
 var $26=(($tmp)|0);
 var $27=$2;
 var $28=_fwrite($26,22,1,$27);
 var $29=$2;
 var $30=$1;
 var $31=_read16b($30);
 var $32=($31&65535);
 $size=$32;
 var $33=(($32)&65535);
 _write16b($29,$33);
 var $34=$size;
 var $35=($34<<1);
 var $36=$ssize;
 var $37=((($36)+($35))|0);
 $ssize=$37;
 var $38=$2;
 var $39=$1;
 var $40=_read8($39);
 _write8($38,$40);
 var $41=$2;
 var $42=$1;
 var $43=_read8($42);
 _write8($41,$43);
 var $44=$2;
 var $45=$1;
 var $46=_read16b($45);
 var $47=($46&65535);
 var $48=(((($47|0))/(2))&-1);
 var $49=(($48)&65535);
 _write16b($44,$49);
 var $50=$2;
 var $51=$1;
 var $52=_read16b($51);
 _write16b($50,$52);
 label=6;break;
 case 6: 
 var $54=$i;
 var $55=((($54)+(1))|0);
 $i=$55;
 label=2;break;
 case 7: 
 var $57=$1;
 var $58=_read32b($57);
 var $59=$2;
 var $60=$1;
 var $61=_read8($60);
 $npat=$61;
 _write8($59,$61);
 var $62=$2;
 var $63=$1;
 var $64=_read8($63);
 _write8($62,$64);
 $c3=0;
 $k=0;
 $i=0;
 label=8;break;
 case 8: 
 var $66=$i;
 var $67=($66|0)<128;
 if($67){label=9;break;}else{label=25;break;}
 case 9: 
 $j=0;
 label=10;break;
 case 10: 
 var $70=$j;
 var $71=($70|0)<4;
 if($71){label=11;break;}else{label=15;break;}
 case 11: 
 var $73=$1;
 var $74=_read16b($73);
 var $75=$j;
 var $76=$k;
 var $77=(($taddr+($76<<3))|0);
 var $78=(($77+($75<<1))|0);
 HEAP16[(($78)>>1)]=$74;
 var $79=$j;
 var $80=$k;
 var $81=(($taddr+($80<<3))|0);
 var $82=(($81+($79<<1))|0);
 var $83=HEAP16[(($82)>>1)];
 var $84=(($83<<16)>>16);
 var $85=$maxtaddr;
 var $86=(($85<<16)>>16);
 var $87=($84|0)>($86|0);
 if($87){label=12;break;}else{label=13;break;}
 case 12: 
 var $89=$j;
 var $90=$k;
 var $91=(($taddr+($90<<3))|0);
 var $92=(($91+($89<<1))|0);
 var $93=HEAP16[(($92)>>1)];
 $maxtaddr=$93;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $96=$j;
 var $97=((($96)+(1))|0);
 $j=$97;
 label=10;break;
 case 15: 
 $j=0;
 label=16;break;
 case 16: 
 var $100=$j;
 var $101=$k;
 var $102=($100|0)<($101|0);
 if($102){label=17;break;}else{label=21;break;}
 case 17: 
 var $104=$j;
 var $105=(($taddr+($104<<3))|0);
 var $106=(($105)|0);
 var $107=$106;
 var $108=$k;
 var $109=(($taddr+($108<<3))|0);
 var $110=(($109)|0);
 var $111=$110;
 var $112=_memcmp($107,$111,4);
 var $113=($112|0)!=0;
 if($113){label=19;break;}else{label=18;break;}
 case 18: 
 var $115=$j;
 var $116=(($ptable+$115)|0);
 var $117=HEAP8[($116)];
 var $118=$i;
 var $119=(($ptable+$118)|0);
 HEAP8[($119)]=$117;
 var $120=$k;
 var $121=((($120)-(1))|0);
 $k=$121;
 label=21;break;
 case 19: 
 label=20;break;
 case 20: 
 var $124=$j;
 var $125=((($124)+(1))|0);
 $j=$125;
 label=16;break;
 case 21: 
 var $127=$k;
 var $128=$j;
 var $129=($127|0)==($128|0);
 if($129){label=22;break;}else{label=23;break;}
 case 22: 
 var $131=$c3;
 var $132=((($131)+(1))&255);
 $c3=$132;
 var $133=$i;
 var $134=(($ptable+$133)|0);
 HEAP8[($134)]=$131;
 label=23;break;
 case 23: 
 var $136=$2;
 var $137=$i;
 var $138=(($ptable+$137)|0);
 var $139=HEAP8[($138)];
 _write8($136,$139);
 label=24;break;
 case 24: 
 var $141=$i;
 var $142=((($141)+(1))|0);
 $i=$142;
 var $143=$k;
 var $144=((($143)+(1))|0);
 $k=$144;
 label=8;break;
 case 25: 
 var $146=$c3;
 var $147=($146&255);
 var $148=((($147)-(1))|0);
 var $149=(($148)&255);
 $max=$149;
 var $150=$2;
 _write32b($150,1294879534);
 var $151=$1;
 var $152=_read16b($151);
 $i=0;
 label=26;break;
 case 26: 
 var $154=$i;
 var $155=$maxtaddr;
 var $156=(($155<<16)>>16);
 var $157=(((($156|0))/(256))&-1);
 var $158=($154|0)<=($157|0);
 if($158){label=27;break;}else{label=35;break;}
 case 27: 
 var $160=$tmp;
 _memset($160, 0, 1024)|0;
 var $161=(($tmp)|0);
 var $162=$1;
 var $163=_fread($161,256,1,$162);
 $j=0;
 label=28;break;
 case 28: 
 var $165=$j;
 var $166=($165|0)<256;
 if($166){label=29;break;}else{label=33;break;}
 case 29: 
 var $168=$j;
 var $169=(($tmp+$168)|0);
 var $170=HEAP8[($169)];
 $note=$170;
 var $171=$j;
 var $172=((($171)+(1))|0);
 var $173=(($tmp+$172)|0);
 var $174=HEAP8[($173)];
 $ins=$174;
 var $175=$j;
 var $176=((($175)+(2))|0);
 var $177=(($tmp+$176)|0);
 var $178=HEAP8[($177)];
 var $179=($178&255);
 var $180=$179&15;
 var $181=(($180)&255);
 $fxt=$181;
 var $182=$j;
 var $183=((($182)+(3))|0);
 var $184=(($tmp+$183)|0);
 var $185=HEAP8[($184)];
 $fxp=$185;
 var $186=$ins;
 var $187=($186&255);
 var $188=$187&240;
 var $189=(($188)&255);
 var $190=$j;
 var $191=$i;
 var $192=(($tdata+($191<<8))|0);
 var $193=(($192+$190)|0);
 HEAP8[($193)]=$189;
 var $194=$note;
 var $195=($194&255);
 var $196=($195|0)!=168;
 if($196){label=30;break;}else{label=31;break;}
 case 30: 
 var $198=$note;
 var $199=($198&255);
 var $200=(((($199|0))/(2))&-1);
 var $201=((($200)-(35))|0);
 var $202=((4504+($201<<1))|0);
 var $203=(($202)|0);
 var $204=HEAP8[($203)];
 var $205=($204&255);
 var $206=$j;
 var $207=$i;
 var $208=(($tdata+($207<<8))|0);
 var $209=(($208+$206)|0);
 var $210=HEAP8[($209)];
 var $211=($210&255);
 var $212=$211|$205;
 var $213=(($212)&255);
 HEAP8[($209)]=$213;
 var $214=$note;
 var $215=($214&255);
 var $216=(((($215|0))/(2))&-1);
 var $217=((($216)-(35))|0);
 var $218=((4504+($217<<1))|0);
 var $219=(($218+1)|0);
 var $220=HEAP8[($219)];
 var $221=$j;
 var $222=((($221)+(1))|0);
 var $223=$i;
 var $224=(($tdata+($223<<8))|0);
 var $225=(($224+$222)|0);
 HEAP8[($225)]=$220;
 label=31;break;
 case 31: 
 var $227=$ins;
 var $228=($227&255);
 var $229=$228<<4;
 var $230=$229&240;
 var $231=$fxt;
 var $232=($231&255);
 var $233=$232&15;
 var $234=$230|$233;
 var $235=(($234)&255);
 var $236=$j;
 var $237=((($236)+(2))|0);
 var $238=$i;
 var $239=(($tdata+($238<<8))|0);
 var $240=(($239+$237)|0);
 HEAP8[($240)]=$235;
 var $241=$fxp;
 var $242=$j;
 var $243=((($242)+(3))|0);
 var $244=$i;
 var $245=(($tdata+($244<<8))|0);
 var $246=(($245+$243)|0);
 HEAP8[($246)]=$241;
 label=32;break;
 case 32: 
 var $248=$j;
 var $249=((($248)+(4))|0);
 $j=$249;
 label=28;break;
 case 33: 
 label=34;break;
 case 34: 
 var $252=$i;
 var $253=((($252)+(1))|0);
 $i=$253;
 label=26;break;
 case 35: 
 $i=0;
 label=36;break;
 case 36: 
 var $256=$i;
 var $257=$max;
 var $258=($257&255);
 var $259=($256|0)<=($258|0);
 if($259){label=37;break;}else{label=43;break;}
 case 37: 
 var $261=$tmp;
 _memset($261, 0, 1024)|0;
 $j=0;
 label=38;break;
 case 38: 
 var $263=$j;
 var $264=($263|0)<256;
 if($264){label=39;break;}else{label=41;break;}
 case 39: 
 var $266=$j;
 var $267=($266<<2);
 var $268=(($tmp+$267)|0);
 $p=$268;
 var $269=$p;
 var $270=$j;
 var $271=$i;
 var $272=(($taddr+($271<<3))|0);
 var $273=(($272)|0);
 var $274=HEAP16[(($273)>>1)];
 var $275=(($274<<16)>>16);
 var $276=(((($275|0))/(256))&-1);
 var $277=(($tdata+($276<<8))|0);
 var $278=(($277+$270)|0);
 assert(4 % 1 === 0);HEAP8[($269)]=HEAP8[($278)];HEAP8[((($269)+(1))|0)]=HEAP8[((($278)+(1))|0)];HEAP8[((($269)+(2))|0)]=HEAP8[((($278)+(2))|0)];HEAP8[((($269)+(3))|0)]=HEAP8[((($278)+(3))|0)];
 var $279=$p;
 var $280=(($279+4)|0);
 var $281=$j;
 var $282=$i;
 var $283=(($taddr+($282<<3))|0);
 var $284=(($283+2)|0);
 var $285=HEAP16[(($284)>>1)];
 var $286=(($285<<16)>>16);
 var $287=(((($286|0))/(256))&-1);
 var $288=(($tdata+($287<<8))|0);
 var $289=(($288+$281)|0);
 assert(4 % 1 === 0);HEAP8[($280)]=HEAP8[($289)];HEAP8[((($280)+(1))|0)]=HEAP8[((($289)+(1))|0)];HEAP8[((($280)+(2))|0)]=HEAP8[((($289)+(2))|0)];HEAP8[((($280)+(3))|0)]=HEAP8[((($289)+(3))|0)];
 var $290=$p;
 var $291=(($290+8)|0);
 var $292=$j;
 var $293=$i;
 var $294=(($taddr+($293<<3))|0);
 var $295=(($294+4)|0);
 var $296=HEAP16[(($295)>>1)];
 var $297=(($296<<16)>>16);
 var $298=(((($297|0))/(256))&-1);
 var $299=(($tdata+($298<<8))|0);
 var $300=(($299+$292)|0);
 assert(4 % 1 === 0);HEAP8[($291)]=HEAP8[($300)];HEAP8[((($291)+(1))|0)]=HEAP8[((($300)+(1))|0)];HEAP8[((($291)+(2))|0)]=HEAP8[((($300)+(2))|0)];HEAP8[((($291)+(3))|0)]=HEAP8[((($300)+(3))|0)];
 var $301=$p;
 var $302=(($301+12)|0);
 var $303=$j;
 var $304=$i;
 var $305=(($taddr+($304<<3))|0);
 var $306=(($305+6)|0);
 var $307=HEAP16[(($306)>>1)];
 var $308=(($307<<16)>>16);
 var $309=(((($308|0))/(256))&-1);
 var $310=(($tdata+($309<<8))|0);
 var $311=(($310+$303)|0);
 assert(4 % 1 === 0);HEAP8[($302)]=HEAP8[($311)];HEAP8[((($302)+(1))|0)]=HEAP8[((($311)+(1))|0)];HEAP8[((($302)+(2))|0)]=HEAP8[((($311)+(2))|0)];HEAP8[((($302)+(3))|0)]=HEAP8[((($311)+(3))|0)];
 label=40;break;
 case 40: 
 var $313=$j;
 var $314=((($313)+(4))|0);
 $j=$314;
 label=38;break;
 case 41: 
 var $316=(($tmp)|0);
 var $317=$2;
 var $318=_fwrite($316,1024,1,$317);
 label=42;break;
 case 42: 
 var $320=$i;
 var $321=((($320)+(1))|0);
 $i=$321;
 label=36;break;
 case 43: 
 var $323=$2;
 var $324=$1;
 var $325=$ssize;
 var $326=_pw_move_data($323,$324,$325);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_ksm($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1536;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1536)-($9))|0);
 $1=$10;
 label=43;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$start;
 var $14=$2;
 var $15=(($14+$13)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=($17|0)!=77;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=$start;
 var $21=((($20)+(1))|0);
 var $22=$2;
 var $23=(($22+$21)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=($25|0)!=46;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=43;break;
 case 8: 
 var $29=$start;
 var $30=((($29)+(15))|0);
 var $31=$2;
 var $32=(($31+$30)|0);
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=($34|0)!=97;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=43;break;
 case 10: 
 $k=0;
 label=11;break;
 case 11: 
 var $39=$k;
 var $40=($39|0)<15;
 if($40){label=12;break;}else{label=16;break;}
 case 12: 
 var $42=$start;
 var $43=((($42)+(54))|0);
 var $44=$k;
 var $45=($44<<5);
 var $46=((($43)+($45))|0);
 var $47=$2;
 var $48=(($47+$46)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=($50|0)>64;
 if($51){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=43;break;
 case 14: 
 label=15;break;
 case 15: 
 var $55=$k;
 var $56=((($55)+(1))|0);
 $k=$56;
 label=11;break;
 case 16: 
 $j=0;
 $k=0;
 label=17;break;
 case 17: 
 var $59=$k;
 var $60=($59|0)<1024;
 if($60){label=18;break;}else{label=24;break;}
 case 18: 
 var $62=$start;
 var $63=$k;
 var $64=((($62)+($63))|0);
 var $65=((($64)+(512))|0);
 var $66=$2;
 var $67=(($66+$65)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=($69|0)==255;
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 label=24;break;
 case 20: 
 var $73=$start;
 var $74=$k;
 var $75=((($73)+($74))|0);
 var $76=((($75)+(512))|0);
 var $77=$2;
 var $78=(($77+$76)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=$j;
 var $82=($80|0)>($81|0);
 if($82){label=21;break;}else{label=22;break;}
 case 21: 
 var $84=$start;
 var $85=$k;
 var $86=((($84)+($85))|0);
 var $87=((($86)+(512))|0);
 var $88=$2;
 var $89=(($88+$87)|0);
 var $90=HEAP8[($89)];
 var $91=($90&255);
 $j=$91;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $94=$k;
 var $95=((($94)+(1))|0);
 $k=$95;
 label=17;break;
 case 24: 
 var $97=$k;
 var $98=($97|0)==1024;
 if($98){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=43;break;
 case 26: 
 var $101=$j;
 var $102=($101|0)==0;
 if($102){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-1;
 label=43;break;
 case 28: 
 label=29;break;
 case 29: 
 var $106=$4;
 var $107=$start;
 var $108=((($107)+(1536))|0);
 var $109=$j;
 var $110=((($109)*(192))&-1);
 var $111=((($108)+($110))|0);
 var $112=((($111)+(189))|0);
 var $113=($106|0)<($112|0);
 if($113){label=30;break;}else{label=31;break;}
 case 30: 
 var $115=$start;
 var $116=((($115)+(1536))|0);
 var $117=$j;
 var $118=((($117)*(192))&-1);
 var $119=((($116)+($118))|0);
 var $120=((($119)+(189))|0);
 var $121=$4;
 var $122=((($120)-($121))|0);
 $1=$122;
 label=43;break;
 case 31: 
 label=32;break;
 case 32: 
 $k=0;
 label=33;break;
 case 33: 
 var $126=$k;
 var $127=$j;
 var $128=($126|0)<=($127|0);
 if($128){label=34;break;}else{label=42;break;}
 case 34: 
 $l=0;
 label=35;break;
 case 35: 
 var $131=$l;
 var $132=($131|0)<64;
 if($132){label=36;break;}else{label=40;break;}
 case 36: 
 var $134=$start;
 var $135=((($134)+(1536))|0);
 var $136=$k;
 var $137=((($136)*(192))&-1);
 var $138=((($135)+($137))|0);
 var $139=$l;
 var $140=((($139)*(3))&-1);
 var $141=((($138)+($140))|0);
 var $142=$2;
 var $143=(($142+$141)|0);
 var $144=HEAP8[($143)];
 var $145=($144&255);
 var $146=($145|0)>36;
 if($146){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=43;break;
 case 38: 
 label=39;break;
 case 39: 
 var $150=$l;
 var $151=((($150)+(1))|0);
 $l=$151;
 label=35;break;
 case 40: 
 label=41;break;
 case 41: 
 var $154=$k;
 var $155=((($154)+(1))|0);
 $k=$155;
 label=33;break;
 case 42: 
 var $157=$2;
 var $158=(($157+2)|0);
 var $159=$3;
 _pw_read_title($158,$159,13);
 $1=0;
 label=43;break;
 case 43: 
 var $161=$1;
 STACKTOP=sp;return $161;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_ksm($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2944)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $c1;
 var $c5;
 var $plist=(sp)+(1024);
 var $trknum=(sp)+(1152);
 var $real_tnum=(sp)+(1664);
 var $tdata=(sp)+(2176);
 var $Max;
 var $PatPos;
 var $Status;
 var $ssize;
 var $i;
 var $j;
 var $k;
 var $x;
 $1=$in;
 $2=$out;
 $Status=1;
 $ssize=0;
 var $3=$plist;
 _memset($3, 0, 128)|0;
 var $4=$trknum;
 _memset($4, 0, 512)|0;
 var $5=$real_tnum;
 _memset($5, 0, 512)|0;
 var $6=$1;
 var $7=_fseek($6,2,0);
 var $8=$2;
 var $9=$1;
 var $10=_pw_move_data($8,$9,13);
 var $11=$2;
 var $12=_pw_write_zero($11,7);
 var $13=$1;
 var $14=_fseek($13,32,0);
 $i=0;
 label=2;break;
 case 2: 
 var $16=$i;
 var $17=($16|0)<15;
 if($17){label=3;break;}else{label=8;break;}
 case 3: 
 var $19=$2;
 var $20=_pw_write_zero($19,22);
 var $21=$1;
 var $22=_fseek($21,20,1);
 var $23=$2;
 var $24=$1;
 var $25=_read16b($24);
 var $26=($25&65535);
 $k=$26;
 var $27=(((($26|0))/(2))&-1);
 var $28=(($27)&65535);
 _write16b($23,$28);
 var $29=$k;
 var $30=$ssize;
 var $31=((($30)+($29))|0);
 $ssize=$31;
 var $32=$2;
 _write8($32,0);
 var $33=$2;
 var $34=$1;
 var $35=_read8($34);
 _write8($33,$35);
 var $36=$1;
 var $37=_read8($36);
 var $38=$2;
 var $39=$1;
 var $40=_read16b($39);
 var $41=($40&65535);
 $j=$41;
 var $42=(((($41|0))/(2))&-1);
 var $43=(($42)&65535);
 _write16b($38,$43);
 var $44=$k;
 var $45=$j;
 var $46=((($44)-($45))|0);
 $j=$46;
 var $47=$2;
 var $48=$j;
 var $49=$k;
 var $50=($48|0)!=($49|0);
 if($50){label=4;break;}else{label=5;break;}
 case 4: 
 var $52=$j;
 var $53=(((($52|0))/(2))&-1);
 var $56=$53;label=6;break;
 case 5: 
 var $56=1;label=6;break;
 case 6: 
 var $56;
 var $57=(($56)&65535);
 _write16b($47,$57);
 var $58=$1;
 var $59=_fseek($58,6,1);
 label=7;break;
 case 7: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=2;break;
 case 8: 
 var $64=$tmp;
 _memset($64, 0, 30)|0;
 var $65=(($tmp+29)|0);
 HEAP8[($65)]=1;
 $i=0;
 label=9;break;
 case 9: 
 var $67=$i;
 var $68=($67|0)<16;
 if($68){label=10;break;}else{label=12;break;}
 case 10: 
 var $70=(($tmp)|0);
 var $71=$2;
 var $72=_fwrite($70,30,1,$71);
 label=11;break;
 case 11: 
 var $74=$i;
 var $75=((($74)+(1))|0);
 $i=$75;
 label=9;break;
 case 12: 
 var $77=$1;
 var $78=_fseek($77,512,0);
 $PatPos=0;
 $Max=0;
 label=13;break;
 case 13: 
 var $80=$PatPos;
 var $81=($80&255);
 var $82=($81|0)<128;
 if($82){label=14;break;}else{label=26;break;}
 case 14: 
 var $84=$PatPos;
 var $85=($84&255);
 var $86=(($trknum+($85<<2))|0);
 var $87=(($86)|0);
 var $88=$1;
 var $89=_fread($87,1,1,$88);
 var $90=$PatPos;
 var $91=($90&255);
 var $92=(($trknum+($91<<2))|0);
 var $93=(($92+1)|0);
 var $94=$1;
 var $95=_fread($93,1,1,$94);
 var $96=$PatPos;
 var $97=($96&255);
 var $98=(($trknum+($97<<2))|0);
 var $99=(($98+2)|0);
 var $100=$1;
 var $101=_fread($99,1,1,$100);
 var $102=$PatPos;
 var $103=($102&255);
 var $104=(($trknum+($103<<2))|0);
 var $105=(($104+3)|0);
 var $106=$1;
 var $107=_fread($105,1,1,$106);
 var $108=$PatPos;
 var $109=($108&255);
 var $110=(($trknum+($109<<2))|0);
 var $111=(($110)|0);
 var $112=HEAP8[($111)];
 var $113=($112&255);
 var $114=($113|0)==255;
 if($114){label=15;break;}else{label=16;break;}
 case 15: 
 label=26;break;
 case 16: 
 var $117=$PatPos;
 var $118=($117&255);
 var $119=(($trknum+($118<<2))|0);
 var $120=(($119)|0);
 var $121=HEAP8[($120)];
 var $122=($121&255);
 var $123=$Max;
 var $124=($123&255);
 var $125=($122|0)>($124|0);
 if($125){label=17;break;}else{label=18;break;}
 case 17: 
 var $127=$PatPos;
 var $128=($127&255);
 var $129=(($trknum+($128<<2))|0);
 var $130=(($129)|0);
 var $131=HEAP8[($130)];
 $Max=$131;
 label=18;break;
 case 18: 
 var $133=$PatPos;
 var $134=($133&255);
 var $135=(($trknum+($134<<2))|0);
 var $136=(($135+1)|0);
 var $137=HEAP8[($136)];
 var $138=($137&255);
 var $139=$Max;
 var $140=($139&255);
 var $141=($138|0)>($140|0);
 if($141){label=19;break;}else{label=20;break;}
 case 19: 
 var $143=$PatPos;
 var $144=($143&255);
 var $145=(($trknum+($144<<2))|0);
 var $146=(($145+1)|0);
 var $147=HEAP8[($146)];
 $Max=$147;
 label=20;break;
 case 20: 
 var $149=$PatPos;
 var $150=($149&255);
 var $151=(($trknum+($150<<2))|0);
 var $152=(($151+2)|0);
 var $153=HEAP8[($152)];
 var $154=($153&255);
 var $155=$Max;
 var $156=($155&255);
 var $157=($154|0)>($156|0);
 if($157){label=21;break;}else{label=22;break;}
 case 21: 
 var $159=$PatPos;
 var $160=($159&255);
 var $161=(($trknum+($160<<2))|0);
 var $162=(($161+2)|0);
 var $163=HEAP8[($162)];
 $Max=$163;
 label=22;break;
 case 22: 
 var $165=$PatPos;
 var $166=($165&255);
 var $167=(($trknum+($166<<2))|0);
 var $168=(($167+3)|0);
 var $169=HEAP8[($168)];
 var $170=($169&255);
 var $171=$Max;
 var $172=($171&255);
 var $173=($170|0)>($172|0);
 if($173){label=23;break;}else{label=24;break;}
 case 23: 
 var $175=$PatPos;
 var $176=($175&255);
 var $177=(($trknum+($176<<2))|0);
 var $178=(($177+3)|0);
 var $179=HEAP8[($178)];
 $Max=$179;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $182=$PatPos;
 var $183=((($182)+(1))&255);
 $PatPos=$183;
 label=13;break;
 case 26: 
 var $185=$2;
 var $186=$PatPos;
 _write8($185,$186);
 var $187=$2;
 _write8($187,127);
 $c5=0;
 $i=0;
 label=27;break;
 case 27: 
 var $189=$i;
 var $190=$PatPos;
 var $191=($190&255);
 var $192=($189|0)<($191|0);
 if($192){label=28;break;}else{label=46;break;}
 case 28: 
 var $194=$i;
 var $195=($194|0)==0;
 if($195){label=29;break;}else{label=30;break;}
 case 29: 
 var $197=$c5;
 var $198=(($plist)|0);
 HEAP8[($198)]=$197;
 var $199=$c5;
 var $200=($199&255);
 var $201=((($200)+(1))|0);
 var $202=(($201)&255);
 $c5=$202;
 label=45;break;
 case 30: 
 $j=0;
 label=31;break;
 case 31: 
 var $205=$j;
 var $206=$i;
 var $207=($205|0)<($206|0);
 if($207){label=32;break;}else{label=42;break;}
 case 32: 
 $Status=1;
 $k=0;
 label=33;break;
 case 33: 
 var $210=$k;
 var $211=($210|0)<4;
 if($211){label=34;break;}else{label=38;break;}
 case 34: 
 var $213=$k;
 var $214=$j;
 var $215=(($trknum+($214<<2))|0);
 var $216=(($215+$213)|0);
 var $217=HEAP8[($216)];
 var $218=($217&255);
 var $219=$k;
 var $220=$i;
 var $221=(($trknum+($220<<2))|0);
 var $222=(($221+$219)|0);
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=($218|0)!=($224|0);
 if($225){label=35;break;}else{label=36;break;}
 case 35: 
 $Status=2;
 label=38;break;
 case 36: 
 label=37;break;
 case 37: 
 var $229=$k;
 var $230=((($229)+(1))|0);
 $k=$230;
 label=33;break;
 case 38: 
 var $232=$Status;
 var $233=($232&255);
 var $234=($233|0)==1;
 if($234){label=39;break;}else{label=40;break;}
 case 39: 
 var $236=$j;
 var $237=(($plist+$236)|0);
 var $238=HEAP8[($237)];
 var $239=$i;
 var $240=(($plist+$239)|0);
 HEAP8[($240)]=$238;
 label=42;break;
 case 40: 
 label=41;break;
 case 41: 
 var $243=$j;
 var $244=((($243)+(1))|0);
 $j=$244;
 label=31;break;
 case 42: 
 var $246=$Status;
 var $247=($246&255);
 var $248=($247|0)==2;
 if($248){label=43;break;}else{label=44;break;}
 case 43: 
 var $250=$c5;
 var $251=$i;
 var $252=(($plist+$251)|0);
 HEAP8[($252)]=$250;
 var $253=$c5;
 var $254=($253&255);
 var $255=((($254)+(1))|0);
 var $256=(($255)&255);
 $c5=$256;
 label=44;break;
 case 44: 
 $Status=1;
 label=45;break;
 case 45: 
 var $259=$i;
 var $260=((($259)+(1))|0);
 $i=$260;
 label=27;break;
 case 46: 
 $c1=0;
 $i=0;
 label=47;break;
 case 47: 
 var $263=$i;
 var $264=$PatPos;
 var $265=($264&255);
 var $266=($263|0)<($265|0);
 if($266){label=48;break;}else{label=60;break;}
 case 48: 
 var $268=$i;
 var $269=($268|0)==0;
 if($269){label=49;break;}else{label=50;break;}
 case 49: 
 var $271=$i;
 var $272=(($trknum+($271<<2))|0);
 var $273=(($272)|0);
 var $274=HEAP8[($273)];
 var $275=$c1;
 var $276=($275&255);
 var $277=(($real_tnum+($276<<2))|0);
 var $278=(($277)|0);
 HEAP8[($278)]=$274;
 var $279=$i;
 var $280=(($trknum+($279<<2))|0);
 var $281=(($280+1)|0);
 var $282=HEAP8[($281)];
 var $283=$c1;
 var $284=($283&255);
 var $285=(($real_tnum+($284<<2))|0);
 var $286=(($285+1)|0);
 HEAP8[($286)]=$282;
 var $287=$i;
 var $288=(($trknum+($287<<2))|0);
 var $289=(($288+2)|0);
 var $290=HEAP8[($289)];
 var $291=$c1;
 var $292=($291&255);
 var $293=(($real_tnum+($292<<2))|0);
 var $294=(($293+2)|0);
 HEAP8[($294)]=$290;
 var $295=$i;
 var $296=(($trknum+($295<<2))|0);
 var $297=(($296+3)|0);
 var $298=HEAP8[($297)];
 var $299=$c1;
 var $300=($299&255);
 var $301=(($real_tnum+($300<<2))|0);
 var $302=(($301+3)|0);
 HEAP8[($302)]=$298;
 var $303=$c1;
 var $304=($303&255);
 var $305=((($304)+(1))|0);
 var $306=(($305)&255);
 $c1=$306;
 label=59;break;
 case 50: 
 $j=0;
 label=51;break;
 case 51: 
 var $309=$j;
 var $310=$i;
 var $311=($309|0)<($310|0);
 if($311){label=52;break;}else{label=56;break;}
 case 52: 
 $Status=1;
 var $313=$i;
 var $314=(($plist+$313)|0);
 var $315=HEAP8[($314)];
 var $316=($315&255);
 var $317=$j;
 var $318=(($plist+$317)|0);
 var $319=HEAP8[($318)];
 var $320=($319&255);
 var $321=($316|0)==($320|0);
 if($321){label=53;break;}else{label=54;break;}
 case 53: 
 $Status=2;
 label=56;break;
 case 54: 
 label=55;break;
 case 55: 
 var $325=$j;
 var $326=((($325)+(1))|0);
 $j=$326;
 label=51;break;
 case 56: 
 var $328=$Status;
 var $329=($328&255);
 var $330=($329|0)==2;
 if($330){label=57;break;}else{label=58;break;}
 case 57: 
 label=59;break;
 case 58: 
 var $333=$i;
 var $334=(($trknum+($333<<2))|0);
 var $335=(($334)|0);
 var $336=HEAP8[($335)];
 var $337=$c1;
 var $338=($337&255);
 var $339=(($real_tnum+($338<<2))|0);
 var $340=(($339)|0);
 HEAP8[($340)]=$336;
 var $341=$i;
 var $342=(($trknum+($341<<2))|0);
 var $343=(($342+1)|0);
 var $344=HEAP8[($343)];
 var $345=$c1;
 var $346=($345&255);
 var $347=(($real_tnum+($346<<2))|0);
 var $348=(($347+1)|0);
 HEAP8[($348)]=$344;
 var $349=$i;
 var $350=(($trknum+($349<<2))|0);
 var $351=(($350+2)|0);
 var $352=HEAP8[($351)];
 var $353=$c1;
 var $354=($353&255);
 var $355=(($real_tnum+($354<<2))|0);
 var $356=(($355+2)|0);
 HEAP8[($356)]=$352;
 var $357=$i;
 var $358=(($trknum+($357<<2))|0);
 var $359=(($358+3)|0);
 var $360=HEAP8[($359)];
 var $361=$c1;
 var $362=($361&255);
 var $363=(($real_tnum+($362<<2))|0);
 var $364=(($363+3)|0);
 HEAP8[($364)]=$360;
 var $365=$c1;
 var $366=($365&255);
 var $367=((($366)+(1))|0);
 var $368=(($367)&255);
 $c1=$368;
 $Status=1;
 label=59;break;
 case 59: 
 var $370=$i;
 var $371=((($370)+(1))|0);
 $i=$371;
 label=47;break;
 case 60: 
 var $373=(($plist)|0);
 var $374=$2;
 var $375=_fwrite($373,128,1,$374);
 var $376=$2;
 _write32b($376,1294879534);
 $i=0;
 label=61;break;
 case 61: 
 var $378=$i;
 var $379=$c5;
 var $380=($379&255);
 var $381=($378|0)<($380|0);
 if($381){label=62;break;}else{label=76;break;}
 case 62: 
 var $383=$tmp;
 _memset($383, 0, 1024)|0;
 var $384=$tdata;
 _memset($384, 0, 768)|0;
 var $385=$1;
 var $386=$i;
 var $387=(($real_tnum+($386<<2))|0);
 var $388=(($387)|0);
 var $389=HEAP8[($388)];
 var $390=($389&255);
 var $391=((($390)*(192))&-1);
 var $392=((($391)+(1536))|0);
 var $393=_fseek($385,$392,0);
 var $394=(($tdata)|0);
 var $395=(($394)|0);
 var $396=$1;
 var $397=_fread($395,192,1,$396);
 var $398=$1;
 var $399=$i;
 var $400=(($real_tnum+($399<<2))|0);
 var $401=(($400+1)|0);
 var $402=HEAP8[($401)];
 var $403=($402&255);
 var $404=((($403)*(192))&-1);
 var $405=((($404)+(1536))|0);
 var $406=_fseek($398,$405,0);
 var $407=(($tdata+192)|0);
 var $408=(($407)|0);
 var $409=$1;
 var $410=_fread($408,192,1,$409);
 var $411=$1;
 var $412=$i;
 var $413=(($real_tnum+($412<<2))|0);
 var $414=(($413+2)|0);
 var $415=HEAP8[($414)];
 var $416=($415&255);
 var $417=((($416)*(192))&-1);
 var $418=((($417)+(1536))|0);
 var $419=_fseek($411,$418,0);
 var $420=(($tdata+384)|0);
 var $421=(($420)|0);
 var $422=$1;
 var $423=_fread($421,192,1,$422);
 var $424=$1;
 var $425=$i;
 var $426=(($real_tnum+($425<<2))|0);
 var $427=(($426+3)|0);
 var $428=HEAP8[($427)];
 var $429=($428&255);
 var $430=((($429)*(192))&-1);
 var $431=((($430)+(1536))|0);
 var $432=_fseek($424,$431,0);
 var $433=(($tdata+576)|0);
 var $434=(($433)|0);
 var $435=$1;
 var $436=_fread($434,192,1,$435);
 $j=0;
 label=63;break;
 case 63: 
 var $438=$j;
 var $439=($438|0)<64;
 if($439){label=64;break;}else{label=74;break;}
 case 64: 
 var $441=$j;
 var $442=($441<<4);
 $x=$442;
 var $443=$j;
 var $444=((($443)*(3))&-1);
 var $445=(($tdata)|0);
 var $446=(($445+$444)|0);
 var $447=HEAP8[($446)];
 var $448=($447&255);
 var $449=((4504+($448<<1))|0);
 var $450=(($449)|0);
 var $451=HEAP8[($450)];
 var $452=$x;
 var $453=(($tmp+$452)|0);
 HEAP8[($453)]=$451;
 var $454=$j;
 var $455=((($454)*(3))&-1);
 var $456=(($tdata)|0);
 var $457=(($456+$455)|0);
 var $458=HEAP8[($457)];
 var $459=($458&255);
 var $460=((4504+($459<<1))|0);
 var $461=(($460+1)|0);
 var $462=HEAP8[($461)];
 var $463=$x;
 var $464=((($463)+(1))|0);
 var $465=(($tmp+$464)|0);
 HEAP8[($465)]=$462;
 var $466=$j;
 var $467=((($466)*(3))&-1);
 var $468=((($467)+(1))|0);
 var $469=(($tdata)|0);
 var $470=(($469+$468)|0);
 var $471=HEAP8[($470)];
 var $472=($471&255);
 var $473=$472&15;
 var $474=($473|0)==13;
 if($474){label=65;break;}else{label=66;break;}
 case 65: 
 var $476=$j;
 var $477=((($476)*(3))&-1);
 var $478=((($477)+(1))|0);
 var $479=(($tdata)|0);
 var $480=(($479+$478)|0);
 var $481=HEAP8[($480)];
 var $482=($481&255);
 var $483=((($482)-(3))|0);
 var $484=(($483)&255);
 HEAP8[($480)]=$484;
 label=66;break;
 case 66: 
 var $486=$j;
 var $487=((($486)*(3))&-1);
 var $488=((($487)+(1))|0);
 var $489=(($tdata)|0);
 var $490=(($489+$488)|0);
 var $491=HEAP8[($490)];
 var $492=$x;
 var $493=((($492)+(2))|0);
 var $494=(($tmp+$493)|0);
 HEAP8[($494)]=$491;
 var $495=$j;
 var $496=((($495)*(3))&-1);
 var $497=((($496)+(2))|0);
 var $498=(($tdata)|0);
 var $499=(($498+$497)|0);
 var $500=HEAP8[($499)];
 var $501=$x;
 var $502=((($501)+(3))|0);
 var $503=(($tmp+$502)|0);
 HEAP8[($503)]=$500;
 var $504=$j;
 var $505=((($504)*(3))&-1);
 var $506=(($tdata+192)|0);
 var $507=(($506+$505)|0);
 var $508=HEAP8[($507)];
 var $509=($508&255);
 var $510=((4504+($509<<1))|0);
 var $511=(($510)|0);
 var $512=HEAP8[($511)];
 var $513=$x;
 var $514=((($513)+(4))|0);
 var $515=(($tmp+$514)|0);
 HEAP8[($515)]=$512;
 var $516=$j;
 var $517=((($516)*(3))&-1);
 var $518=(($tdata+192)|0);
 var $519=(($518+$517)|0);
 var $520=HEAP8[($519)];
 var $521=($520&255);
 var $522=((4504+($521<<1))|0);
 var $523=(($522+1)|0);
 var $524=HEAP8[($523)];
 var $525=$x;
 var $526=((($525)+(5))|0);
 var $527=(($tmp+$526)|0);
 HEAP8[($527)]=$524;
 var $528=$j;
 var $529=((($528)*(3))&-1);
 var $530=((($529)+(1))|0);
 var $531=(($tdata+192)|0);
 var $532=(($531+$530)|0);
 var $533=HEAP8[($532)];
 var $534=($533&255);
 var $535=$534&15;
 var $536=($535|0)==13;
 if($536){label=67;break;}else{label=68;break;}
 case 67: 
 var $538=$j;
 var $539=((($538)*(3))&-1);
 var $540=((($539)+(1))|0);
 var $541=(($tdata+192)|0);
 var $542=(($541+$540)|0);
 var $543=HEAP8[($542)];
 var $544=($543&255);
 var $545=((($544)-(3))|0);
 var $546=(($545)&255);
 HEAP8[($542)]=$546;
 label=68;break;
 case 68: 
 var $548=$j;
 var $549=((($548)*(3))&-1);
 var $550=((($549)+(1))|0);
 var $551=(($tdata+192)|0);
 var $552=(($551+$550)|0);
 var $553=HEAP8[($552)];
 var $554=$x;
 var $555=((($554)+(6))|0);
 var $556=(($tmp+$555)|0);
 HEAP8[($556)]=$553;
 var $557=$j;
 var $558=((($557)*(3))&-1);
 var $559=((($558)+(2))|0);
 var $560=(($tdata+192)|0);
 var $561=(($560+$559)|0);
 var $562=HEAP8[($561)];
 var $563=$x;
 var $564=((($563)+(7))|0);
 var $565=(($tmp+$564)|0);
 HEAP8[($565)]=$562;
 var $566=$j;
 var $567=((($566)*(3))&-1);
 var $568=(($tdata+384)|0);
 var $569=(($568+$567)|0);
 var $570=HEAP8[($569)];
 var $571=($570&255);
 var $572=((4504+($571<<1))|0);
 var $573=(($572)|0);
 var $574=HEAP8[($573)];
 var $575=$x;
 var $576=((($575)+(8))|0);
 var $577=(($tmp+$576)|0);
 HEAP8[($577)]=$574;
 var $578=$j;
 var $579=((($578)*(3))&-1);
 var $580=(($tdata+384)|0);
 var $581=(($580+$579)|0);
 var $582=HEAP8[($581)];
 var $583=($582&255);
 var $584=((4504+($583<<1))|0);
 var $585=(($584+1)|0);
 var $586=HEAP8[($585)];
 var $587=$x;
 var $588=((($587)+(9))|0);
 var $589=(($tmp+$588)|0);
 HEAP8[($589)]=$586;
 var $590=$j;
 var $591=((($590)*(3))&-1);
 var $592=((($591)+(1))|0);
 var $593=(($tdata+384)|0);
 var $594=(($593+$592)|0);
 var $595=HEAP8[($594)];
 var $596=($595&255);
 var $597=$596&15;
 var $598=($597|0)==13;
 if($598){label=69;break;}else{label=70;break;}
 case 69: 
 var $600=$j;
 var $601=((($600)*(3))&-1);
 var $602=((($601)+(1))|0);
 var $603=(($tdata+384)|0);
 var $604=(($603+$602)|0);
 var $605=HEAP8[($604)];
 var $606=($605&255);
 var $607=((($606)-(3))|0);
 var $608=(($607)&255);
 HEAP8[($604)]=$608;
 label=70;break;
 case 70: 
 var $610=$j;
 var $611=((($610)*(3))&-1);
 var $612=((($611)+(1))|0);
 var $613=(($tdata+384)|0);
 var $614=(($613+$612)|0);
 var $615=HEAP8[($614)];
 var $616=$x;
 var $617=((($616)+(10))|0);
 var $618=(($tmp+$617)|0);
 HEAP8[($618)]=$615;
 var $619=$j;
 var $620=((($619)*(3))&-1);
 var $621=((($620)+(2))|0);
 var $622=(($tdata+384)|0);
 var $623=(($622+$621)|0);
 var $624=HEAP8[($623)];
 var $625=$x;
 var $626=((($625)+(11))|0);
 var $627=(($tmp+$626)|0);
 HEAP8[($627)]=$624;
 var $628=$j;
 var $629=((($628)*(3))&-1);
 var $630=(($tdata+576)|0);
 var $631=(($630+$629)|0);
 var $632=HEAP8[($631)];
 var $633=($632&255);
 var $634=((4504+($633<<1))|0);
 var $635=(($634)|0);
 var $636=HEAP8[($635)];
 var $637=$x;
 var $638=((($637)+(12))|0);
 var $639=(($tmp+$638)|0);
 HEAP8[($639)]=$636;
 var $640=$j;
 var $641=((($640)*(3))&-1);
 var $642=(($tdata+576)|0);
 var $643=(($642+$641)|0);
 var $644=HEAP8[($643)];
 var $645=($644&255);
 var $646=((4504+($645<<1))|0);
 var $647=(($646+1)|0);
 var $648=HEAP8[($647)];
 var $649=$x;
 var $650=((($649)+(13))|0);
 var $651=(($tmp+$650)|0);
 HEAP8[($651)]=$648;
 var $652=$j;
 var $653=((($652)*(3))&-1);
 var $654=((($653)+(1))|0);
 var $655=(($tdata+576)|0);
 var $656=(($655+$654)|0);
 var $657=HEAP8[($656)];
 var $658=($657&255);
 var $659=$658&15;
 var $660=($659|0)==13;
 if($660){label=71;break;}else{label=72;break;}
 case 71: 
 var $662=$j;
 var $663=((($662)*(3))&-1);
 var $664=((($663)+(1))|0);
 var $665=(($tdata+576)|0);
 var $666=(($665+$664)|0);
 var $667=HEAP8[($666)];
 var $668=($667&255);
 var $669=((($668)-(3))|0);
 var $670=(($669)&255);
 HEAP8[($666)]=$670;
 label=72;break;
 case 72: 
 var $672=$j;
 var $673=((($672)*(3))&-1);
 var $674=((($673)+(1))|0);
 var $675=(($tdata+576)|0);
 var $676=(($675+$674)|0);
 var $677=HEAP8[($676)];
 var $678=$x;
 var $679=((($678)+(14))|0);
 var $680=(($tmp+$679)|0);
 HEAP8[($680)]=$677;
 var $681=$j;
 var $682=((($681)*(3))&-1);
 var $683=((($682)+(2))|0);
 var $684=(($tdata+576)|0);
 var $685=(($684+$683)|0);
 var $686=HEAP8[($685)];
 var $687=$x;
 var $688=((($687)+(15))|0);
 var $689=(($tmp+$688)|0);
 HEAP8[($689)]=$686;
 label=73;break;
 case 73: 
 var $691=$j;
 var $692=((($691)+(1))|0);
 $j=$692;
 label=63;break;
 case 74: 
 var $694=(($tmp)|0);
 var $695=$2;
 var $696=_fwrite($694,1024,1,$695);
 label=75;break;
 case 75: 
 var $698=$i;
 var $699=((($698)+(1))|0);
 $i=$699;
 label=61;break;
 case 76: 
 var $701=$1;
 var $702=$Max;
 var $703=($702&255);
 var $704=((($703)+(1))|0);
 var $705=((($704)*(192))&-1);
 var $706=((($705)+(1536))|0);
 var $707=_fseek($701,$706,0);
 var $708=$2;
 var $709=$1;
 var $710=$ssize;
 var $711=_pw_move_data($708,$709,$710);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_mp_id($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $l;
 var $k;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 var $5=$2;
 var $6=_readmem32b($5);
 var $7=($6|0)!=1414679345;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=27;break;
 case 3: 
 $j=0;
 label=4;break;
 case 4: 
 var $11=$j;
 var $12=($11|0)<31;
 if($12){label=5;break;}else{label=9;break;}
 case 5: 
 var $14=$start;
 var $15=((($14)+(6))|0);
 var $16=$j;
 var $17=($16<<3);
 var $18=((($15)+($17))|0);
 var $19=$2;
 var $20=(($19+$18)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)>15;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=27;break;
 case 7: 
 label=8;break;
 case 8: 
 var $27=$j;
 var $28=((($27)+(1))|0);
 $j=$28;
 label=4;break;
 case 9: 
 var $30=$start;
 var $31=((($30)+(252))|0);
 var $32=$2;
 var $33=(($32+$31)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 $l=$35;
 var $36=$l;
 var $37=($36|0)>127;
 if($37){label=11;break;}else{label=10;break;}
 case 10: 
 var $39=$l;
 var $40=($39|0)==0;
 if($40){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=27;break;
 case 12: 
 $k=0;
 $j=0;
 label=13;break;
 case 13: 
 var $44=$j;
 var $45=($44|0)<128;
 if($45){label=14;break;}else{label=20;break;}
 case 14: 
 var $47=$start;
 var $48=((($47)+(254))|0);
 var $49=$j;
 var $50=((($48)+($49))|0);
 var $51=$2;
 var $52=(($51+$50)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=$k;
 var $56=($54|0)>($55|0);
 if($56){label=15;break;}else{label=16;break;}
 case 15: 
 var $58=$start;
 var $59=((($58)+(254))|0);
 var $60=$j;
 var $61=((($59)+($60))|0);
 var $62=$2;
 var $63=(($62+$61)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 $k=$65;
 label=16;break;
 case 16: 
 var $67=$start;
 var $68=((($67)+(254))|0);
 var $69=$j;
 var $70=((($68)+($69))|0);
 var $71=$2;
 var $72=(($71+$70)|0);
 var $73=HEAP8[($72)];
 var $74=($73&255);
 var $75=($74|0)>127;
 if($75){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=27;break;
 case 18: 
 label=19;break;
 case 19: 
 var $79=$j;
 var $80=((($79)+(1))|0);
 $j=$80;
 label=13;break;
 case 20: 
 var $82=$k;
 var $83=((($82)+(1))|0);
 $k=$83;
 $j=0;
 label=21;break;
 case 21: 
 var $85=$j;
 var $86=$k;
 var $87=($86<<8);
 var $88=($85|0)<($87|0);
 if($88){label=22;break;}else{label=26;break;}
 case 22: 
 var $90=$start;
 var $91=((($90)+(382))|0);
 var $92=$j;
 var $93=($92<<2);
 var $94=((($91)+($93))|0);
 var $95=$2;
 var $96=(($95+$94)|0);
 var $97=HEAP8[($96)];
 var $98=($97&255);
 $l=$98;
 var $99=$l;
 var $100=($99|0)>19;
 if($100){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=27;break;
 case 24: 
 label=25;break;
 case 25: 
 var $104=$j;
 var $105=((($104)+(1))|0);
 $j=$105;
 label=21;break;
 case 26: 
 var $107=$3;
 _pw_read_title(0,$107,0);
 $1=0;
 label=27;break;
 case 27: 
 var $109=$1;
 STACKTOP=sp;return $109;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_mp($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $ptable=sp;
 var $max;
 var $i;
 var $size;
 var $ssize;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$2;
 var $5=_pw_write_zero($4,20);
 var $6=$1;
 var $7=_read32b($6);
 var $8=($7|0)!=1414679345;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=_fseek($10,-4,1);
 label=3;break;
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 var $14=$i;
 var $15=($14|0)<31;
 if($15){label=5;break;}else{label=7;break;}
 case 5: 
 var $17=$2;
 var $18=_pw_write_zero($17,22);
 var $19=$2;
 var $20=$1;
 var $21=_read16b($20);
 var $22=($21&65535);
 $size=$22;
 var $23=(($22)&65535);
 _write16b($19,$23);
 var $24=$size;
 var $25=($24<<1);
 var $26=$ssize;
 var $27=((($26)+($25))|0);
 $ssize=$27;
 var $28=$2;
 var $29=$1;
 var $30=_read8($29);
 _write8($28,$30);
 var $31=$2;
 var $32=$1;
 var $33=_read8($32);
 _write8($31,$33);
 var $34=$2;
 var $35=$1;
 var $36=_read16b($35);
 _write16b($34,$36);
 var $37=$2;
 var $38=$1;
 var $39=_read16b($38);
 _write16b($37,$39);
 label=6;break;
 case 6: 
 var $41=$i;
 var $42=((($41)+(1))|0);
 $i=$42;
 label=4;break;
 case 7: 
 var $44=$2;
 var $45=$1;
 var $46=_read8($45);
 _write8($44,$46);
 var $47=$2;
 var $48=$1;
 var $49=_read8($48);
 _write8($47,$49);
 $i=0;
 $max=0;
 label=8;break;
 case 8: 
 var $51=$i;
 var $52=($51|0)<128;
 if($52){label=9;break;}else{label=13;break;}
 case 9: 
 var $54=$2;
 var $55=$1;
 var $56=_read8($55);
 $c1=$56;
 _write8($54,$56);
 var $57=$c1;
 var $58=($57&255);
 var $59=$max;
 var $60=($59&255);
 var $61=($58|0)>($60|0);
 if($61){label=10;break;}else{label=11;break;}
 case 10: 
 var $63=$c1;
 $max=$63;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $66=$i;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=8;break;
 case 13: 
 var $69=$max;
 var $70=((($69)+(1))&255);
 $max=$70;
 var $71=$2;
 _write32b($71,1294879534);
 var $72=$1;
 var $73=_read32b($72);
 var $74=($73|0)!=0;
 if($74){label=14;break;}else{label=15;break;}
 case 14: 
 var $76=$1;
 var $77=_fseek($76,-4,1);
 label=15;break;
 case 15: 
 var $79=$2;
 var $80=$1;
 var $81=$max;
 var $82=($81&255);
 var $83=($82<<10);
 var $84=_pw_move_data($79,$80,$83);
 var $85=$2;
 var $86=$1;
 var $87=$ssize;
 var $88=_pw_move_data($85,$86,$87);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_mp_noid($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 var $ssize;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $x;
 var $x1;
 var $x2;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 $l=0;
 $j=0;
 label=2;break;
 case 2: 
 var $6=$j;
 var $7=($6|0)<31;
 if($7){label=3;break;}else{label=18;break;}
 case 3: 
 var $9=$start;
 var $10=$j;
 var $11=($10<<3);
 var $12=((($9)+($11))|0);
 $x=$12;
 var $13=$2;
 var $14=$x;
 var $15=(($13+$14)|0);
 var $16=_readmem16b($15);
 var $17=($16&65535);
 var $18=($17<<1);
 $k=$18;
 var $19=$2;
 var $20=$x;
 var $21=(($19+$20)|0);
 var $22=(($21+4)|0);
 var $23=_readmem16b($22);
 var $24=($23&65535);
 var $25=($24<<1);
 $m=$25;
 var $26=$2;
 var $27=$x;
 var $28=(($26+$27)|0);
 var $29=(($28+6)|0);
 var $30=_readmem16b($29);
 var $31=($30&65535);
 var $32=($31<<1);
 $n=$32;
 var $33=$k;
 var $34=$l;
 var $35=((($34)+($33))|0);
 $l=$35;
 var $36=$x;
 var $37=((($36)+(2))|0);
 var $38=$2;
 var $39=(($38+$37)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=($41|0)>15;
 if($42){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=52;break;
 case 5: 
 var $45=$n;
 var $46=($45|0)!=2;
 if($46){label=6;break;}else{label=8;break;}
 case 6: 
 var $48=$m;
 var $49=$n;
 var $50=((($48)+($49))|0);
 var $51=$k;
 var $52=($50|0)>($51|0);
 if($52){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=52;break;
 case 8: 
 var $55=$n;
 var $56=$k;
 var $57=((($56)+(2))|0);
 var $58=($55|0)>($57|0);
 if($58){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=52;break;
 case 10: 
 var $61=$m;
 var $62=($61|0)!=0;
 if($62){label=11;break;}else{label=13;break;}
 case 11: 
 var $64=$n;
 var $65=($64|0)<=2;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=52;break;
 case 13: 
 var $68=$k;
 var $69=($68|0)!=0;
 if($69){label=14;break;}else{label=16;break;}
 case 14: 
 var $71=$n;
 var $72=($71|0)==0;
 if($72){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=52;break;
 case 16: 
 label=17;break;
 case 17: 
 var $76=$j;
 var $77=((($76)+(1))|0);
 $j=$77;
 label=2;break;
 case 18: 
 var $79=$l;
 var $80=($79|0)<=2;
 if($80){label=19;break;}else{label=20;break;}
 case 19: 
 $1=-1;
 label=52;break;
 case 20: 
 var $83=$start;
 var $84=((($83)+(248))|0);
 var $85=$2;
 var $86=(($85+$84)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 $l=$88;
 var $89=$l;
 var $90=($89|0)>127;
 if($90){label=22;break;}else{label=21;break;}
 case 21: 
 var $92=$l;
 var $93=($92|0)==0;
 if($93){label=22;break;}else{label=23;break;}
 case 22: 
 $1=-1;
 label=52;break;
 case 23: 
 $k=0;
 $j=0;
 label=24;break;
 case 24: 
 var $97=$j;
 var $98=($97|0)<128;
 if($98){label=25;break;}else{label=35;break;}
 case 25: 
 var $100=$start;
 var $101=((($100)+(250))|0);
 var $102=$j;
 var $103=((($101)+($102))|0);
 var $104=$2;
 var $105=(($104+$103)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$k;
 var $109=($107|0)>($108|0);
 if($109){label=26;break;}else{label=27;break;}
 case 26: 
 var $111=$start;
 var $112=((($111)+(250))|0);
 var $113=$j;
 var $114=((($112)+($113))|0);
 var $115=$2;
 var $116=(($115+$114)|0);
 var $117=HEAP8[($116)];
 var $118=($117&255);
 $k=$118;
 label=27;break;
 case 27: 
 var $120=$start;
 var $121=((($120)+(250))|0);
 var $122=$j;
 var $123=((($121)+($122))|0);
 var $124=$2;
 var $125=(($124+$123)|0);
 var $126=HEAP8[($125)];
 var $127=($126&255);
 var $128=($127|0)>127;
 if($128){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=52;break;
 case 29: 
 var $131=$j;
 var $132=$l;
 var $133=((($132)+(3))|0);
 var $134=($131|0)>($133|0);
 if($134){label=30;break;}else{label=33;break;}
 case 30: 
 var $136=$start;
 var $137=((($136)+(250))|0);
 var $138=$j;
 var $139=((($137)+($138))|0);
 var $140=$2;
 var $141=(($140+$139)|0);
 var $142=HEAP8[($141)];
 var $143=($142&255);
 var $144=($143|0)!=0;
 if($144){label=31;break;}else{label=32;break;}
 case 31: 
 $1=-1;
 label=52;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $149=$j;
 var $150=((($149)+(1))|0);
 $j=$150;
 label=24;break;
 case 35: 
 var $152=$k;
 var $153=((($152)+(1))|0);
 $k=$153;
 $j=0;
 label=36;break;
 case 36: 
 var $155=$j;
 var $156=$k;
 var $157=($156<<8);
 var $158=($155|0)<($157|0);
 if($158){label=37;break;}else{label=45;break;}
 case 37: 
 var $160=$start;
 var $161=$j;
 var $162=($161<<2);
 var $163=((($160)+($162))|0);
 $x1=$163;
 var $164=$x1;
 var $165=((($164)+(378))|0);
 var $166=$2;
 var $167=(($166+$165)|0);
 var $168=HEAP8[($167)];
 var $169=($168&255);
 $l=$169;
 var $170=$l;
 var $171=($170|0)>19;
 if($171){label=38;break;}else{label=40;break;}
 case 38: 
 var $173=$l;
 var $174=($173|0)!=74;
 if($174){label=39;break;}else{label=40;break;}
 case 39: 
 $1=-1;
 label=52;break;
 case 40: 
 var $177=$x1;
 var $178=((($177)+(378))|0);
 var $179=$2;
 var $180=(($179+$178)|0);
 var $181=HEAP8[($180)];
 var $182=($181&255);
 var $183=$182&15;
 $ssize=$183;
 var $184=$ssize;
 var $185=($184<<8);
 $ssize=$185;
 var $186=$x1;
 var $187=((($186)+(379))|0);
 var $188=$2;
 var $189=(($188+$187)|0);
 var $190=HEAP8[($189)];
 var $191=($190&255);
 var $192=$ssize;
 var $193=((($192)+($191))|0);
 $ssize=$193;
 var $194=$ssize;
 var $195=($194|0)>0;
 if($195){label=41;break;}else{label=43;break;}
 case 41: 
 var $197=$ssize;
 var $198=($197|0)<113;
 if($198){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=52;break;
 case 43: 
 label=44;break;
 case 44: 
 var $202=$j;
 var $203=((($202)+(1))|0);
 $j=$203;
 label=36;break;
 case 45: 
 $j=0;
 label=46;break;
 case 46: 
 var $206=$j;
 var $207=($206|0)<31;
 if($207){label=47;break;}else{label=51;break;}
 case 47: 
 var $209=$start;
 var $210=$j;
 var $211=($210<<3);
 var $212=((($209)+($211))|0);
 $x2=$212;
 var $213=$2;
 var $214=$x2;
 var $215=(($213+$214)|0);
 var $216=_readmem16b($215);
 var $217=($216&65535);
 var $218=($217<<1);
 $k=$218;
 var $219=$2;
 var $220=$x2;
 var $221=(($219+$220)|0);
 var $222=(($221+4)|0);
 var $223=_readmem16b($222);
 var $224=($223&65535);
 var $225=$2;
 var $226=$x2;
 var $227=(($225+$226)|0);
 var $228=(($227+6)|0);
 var $229=_readmem16b($228);
 var $230=($229&65535);
 var $231=((($224)+($230))|0);
 var $232=($231<<1);
 $l=$232;
 var $233=$l;
 var $234=$k;
 var $235=((($234)+(2))|0);
 var $236=($233|0)>($235|0);
 if($236){label=48;break;}else{label=49;break;}
 case 48: 
 $1=-1;
 label=52;break;
 case 49: 
 label=50;break;
 case 50: 
 var $240=$j;
 var $241=((($240)+(1))|0);
 $j=$241;
 label=46;break;
 case 51: 
 var $243=$3;
 _pw_read_title(0,$243,0);
 $1=0;
 label=52;break;
 case 52: 
 var $245=$1;
 STACKTOP=sp;return $245;
  default: assert(0, "bad label: " + label);
 }
}
function _test_nru($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $l;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1500;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1500)-($9))|0);
 $1=$10;
 label=46;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=(($15+1080)|0);
 var $17=_readmem32b($16);
 var $18=($17|0)!=1294879534;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=46;break;
 case 7: 
 $ssize=0;
 $i=0;
 label=8;break;
 case 8: 
 var $22=$i;
 var $23=($22|0)<31;
 if($23){label=9;break;}else{label=11;break;}
 case 9: 
 var $25=$2;
 var $26=$start;
 var $27=(($25+$26)|0);
 var $28=(($27+6)|0);
 var $29=$i;
 var $30=($29<<4);
 var $31=(($28+$30)|0);
 var $32=_readmem16b($31);
 var $33=($32&65535);
 var $34=($33<<1);
 var $35=$ssize;
 var $36=((($35)+($34))|0);
 $ssize=$36;
 label=10;break;
 case 10: 
 var $38=$i;
 var $39=((($38)+(1))|0);
 $i=$39;
 label=8;break;
 case 11: 
 var $41=$ssize;
 var $42=($41|0)==0;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=46;break;
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 var $46=$i;
 var $47=($46|0)<31;
 if($47){label=15;break;}else{label=19;break;}
 case 15: 
 var $49=$start;
 var $50=((($49)+(1))|0);
 var $51=$i;
 var $52=($51<<4);
 var $53=((($50)+($52))|0);
 var $54=$2;
 var $55=(($54+$53)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=($57|0)>64;
 if($58){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=46;break;
 case 17: 
 label=18;break;
 case 18: 
 var $62=$i;
 var $63=((($62)+(1))|0);
 $i=$63;
 label=14;break;
 case 19: 
 var $65=$start;
 var $66=((($65)+(950))|0);
 var $67=$2;
 var $68=(($67+$66)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 $l=$70;
 var $71=$l;
 var $72=($71|0)>127;
 if($72){label=21;break;}else{label=20;break;}
 case 20: 
 var $74=$l;
 var $75=($74|0)==0;
 if($75){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=46;break;
 case 22: 
 $k=0;
 $j=0;
 label=23;break;
 case 23: 
 var $79=$j;
 var $80=$l;
 var $81=($79|0)<($80|0);
 if($81){label=24;break;}else{label=30;break;}
 case 24: 
 var $83=$start;
 var $84=((($83)+(952))|0);
 var $85=$j;
 var $86=((($84)+($85))|0);
 var $87=$2;
 var $88=(($87+$86)|0);
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=$k;
 var $92=($90|0)>($91|0);
 if($92){label=25;break;}else{label=26;break;}
 case 25: 
 var $94=$start;
 var $95=((($94)+(952))|0);
 var $96=$j;
 var $97=((($95)+($96))|0);
 var $98=$2;
 var $99=(($98+$97)|0);
 var $100=HEAP8[($99)];
 var $101=($100&255);
 $k=$101;
 label=26;break;
 case 26: 
 var $103=$start;
 var $104=((($103)+(952))|0);
 var $105=$j;
 var $106=((($104)+($105))|0);
 var $107=$2;
 var $108=(($107+$106)|0);
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=($110|0)>127;
 if($111){label=27;break;}else{label=28;break;}
 case 27: 
 $1=-1;
 label=46;break;
 case 28: 
 label=29;break;
 case 29: 
 var $115=$j;
 var $116=((($115)+(1))|0);
 $j=$116;
 label=23;break;
 case 30: 
 label=31;break;
 case 31: 
 var $119=$j;
 var $120=($119|0)!=128;
 if($120){label=32;break;}else{label=35;break;}
 case 32: 
 var $122=$start;
 var $123=((($122)+(952))|0);
 var $124=$j;
 var $125=((($123)+($124))|0);
 var $126=$2;
 var $127=(($126+$125)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=($129|0)!=0;
 if($130){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=46;break;
 case 34: 
 var $133=$j;
 var $134=((($133)+(1))|0);
 $j=$134;
 label=31;break;
 case 35: 
 var $136=$k;
 var $137=((($136)+(1))|0);
 $k=$137;
 $j=0;
 label=36;break;
 case 36: 
 var $139=$j;
 var $140=$k;
 var $141=$140<<8;
 var $142=($139|0)<($141|0);
 if($142){label=37;break;}else{label=45;break;}
 case 37: 
 var $144=$start;
 var $145=((($144)+(1086))|0);
 var $146=$j;
 var $147=($146<<2);
 var $148=((($145)+($147))|0);
 var $149=$2;
 var $150=(($149+$148)|0);
 var $151=HEAP8[($150)];
 var $152=($151&255);
 var $153=($152|0)>72;
 if($153){label=38;break;}else{label=39;break;}
 case 38: 
 $1=-1;
 label=46;break;
 case 39: 
 var $156=$start;
 var $157=((($156)+(1087))|0);
 var $158=$j;
 var $159=($158<<2);
 var $160=((($157)+($159))|0);
 var $161=$2;
 var $162=(($161+$160)|0);
 var $163=HEAP8[($162)];
 var $164=($163&255);
 $l=$164;
 var $165=$l;
 var $166=$165&7;
 var $167=($166|0)!=0;
 if($167){label=40;break;}else{label=41;break;}
 case 40: 
 $1=-1;
 label=46;break;
 case 41: 
 var $170=$start;
 var $171=((($170)+(1084))|0);
 var $172=$j;
 var $173=($172<<2);
 var $174=((($171)+($173))|0);
 var $175=$2;
 var $176=(($175+$174)|0);
 var $177=HEAP8[($176)];
 var $178=($177&255);
 $l=$178;
 var $179=$l;
 var $180=$179&3;
 var $181=($180|0)!=0;
 if($181){label=42;break;}else{label=43;break;}
 case 42: 
 $1=-1;
 label=46;break;
 case 43: 
 label=44;break;
 case 44: 
 var $185=$j;
 var $186=((($185)+(1))|0);
 $j=$186;
 label=36;break;
 case 45: 
 var $188=$3;
 _pw_read_title(0,$188,0);
 $1=0;
 label=46;break;
 case 46: 
 var $190=$1;
 STACKTOP=sp;return $190;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_nru($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $ptable=(sp)+(1032);
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $pat_data=(sp)+(1160);
 var $fine;
 var $i;
 var $j;
 var $max_pat;
 var $ssize;
 var $vol;
 var $size;
 var $addr;
 var $start;
 var $lsize;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$2;
 var $4=_pw_write_zero($3,20);
 $i=0;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=($6|0)<31;
 if($7){label=3;break;}else{label=13;break;}
 case 3: 
 var $9=$2;
 var $10=_pw_write_zero($9,22);
 var $11=$1;
 var $12=_read8($11);
 var $13=$1;
 var $14=_read8($13);
 var $15=($14&255);
 $vol=$15;
 var $16=$1;
 var $17=_read32b($16);
 $addr=$17;
 var $18=$2;
 var $19=$1;
 var $20=_read16b($19);
 var $21=($20&65535);
 $size=$21;
 var $22=(($21)&65535);
 _write16b($18,$22);
 var $23=$size;
 var $24=($23<<1);
 var $25=$ssize;
 var $26=((($25)+($24))|0);
 $ssize=$26;
 var $27=$1;
 var $28=_read32b($27);
 $start=$28;
 var $29=$1;
 var $30=_read16b($29);
 var $31=($30&65535);
 $lsize=$31;
 var $32=$1;
 var $33=_read16b($32);
 var $34=($33&65535);
 $fine=$34;
 $j=0;
 label=4;break;
 case 4: 
 var $36=$j;
 var $37=($36|0)<16;
 if($37){label=5;break;}else{label=9;break;}
 case 5: 
 var $39=$fine;
 var $40=$j;
 var $41=((8200+($40<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($39|0)==($42|0);
 if($43){label=6;break;}else{label=7;break;}
 case 6: 
 var $45=$j;
 $fine=$45;
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $48=$j;
 var $49=((($48)+(1))|0);
 $j=$49;
 label=4;break;
 case 9: 
 var $51=$j;
 var $52=($51|0)==16;
 if($52){label=10;break;}else{label=11;break;}
 case 10: 
 $fine=0;
 label=11;break;
 case 11: 
 var $55=$2;
 var $56=$fine;
 var $57=(($56)&255);
 _write8($55,$57);
 var $58=$2;
 var $59=$vol;
 var $60=(($59)&255);
 _write8($58,$60);
 var $61=$2;
 var $62=$start;
 var $63=$addr;
 var $64=((($62)-($63))|0);
 var $65=(((($64|0))/(2))&-1);
 var $66=(($65)&65535);
 _write16b($61,$66);
 var $67=$2;
 var $68=$lsize;
 var $69=(($68)&65535);
 _write16b($67,$69);
 label=12;break;
 case 12: 
 var $71=$i;
 var $72=((($71)+(1))|0);
 $i=$72;
 label=2;break;
 case 13: 
 var $74=$1;
 var $75=_fseek($74,950,0);
 var $76=$2;
 var $77=$1;
 var $78=_read8($77);
 _write8($76,$78);
 var $79=$2;
 var $80=$1;
 var $81=_read8($80);
 _write8($79,$81);
 $max_pat=0;
 var $82=(($ptable)|0);
 var $83=$1;
 var $84=_fread($82,128,1,$83);
 var $85=(($ptable)|0);
 var $86=$2;
 var $87=_fwrite($85,128,1,$86);
 $i=0;
 label=14;break;
 case 14: 
 var $89=$i;
 var $90=($89|0)<128;
 if($90){label=15;break;}else{label=19;break;}
 case 15: 
 var $92=$i;
 var $93=(($ptable+$92)|0);
 var $94=HEAP8[($93)];
 var $95=($94&255);
 var $96=$max_pat;
 var $97=($95|0)>($96|0);
 if($97){label=16;break;}else{label=17;break;}
 case 16: 
 var $99=$i;
 var $100=(($ptable+$99)|0);
 var $101=HEAP8[($100)];
 var $102=($101&255);
 $max_pat=$102;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $105=$i;
 var $106=((($105)+(1))|0);
 $i=$106;
 label=14;break;
 case 19: 
 var $108=$max_pat;
 var $109=((($108)+(1))|0);
 $max_pat=$109;
 var $110=$2;
 _write32b($110,1294879534);
 var $111=$1;
 var $112=_fseek($111,1084,0);
 $i=0;
 label=20;break;
 case 20: 
 var $114=$i;
 var $115=$max_pat;
 var $116=($114|0)<($115|0);
 if($116){label=21;break;}else{label=31;break;}
 case 21: 
 var $118=$pat_data;
 _memset($118, 0, 1025)|0;
 var $119=(($tmp)|0);
 var $120=$1;
 var $121=_fread($119,1024,1,$120);
 $j=0;
 label=22;break;
 case 22: 
 var $123=$j;
 var $124=($123|0)<256;
 if($124){label=23;break;}else{label=29;break;}
 case 23: 
 var $126=$j;
 var $127=($126<<2);
 var $128=((($127)+(3))|0);
 var $129=(($tmp+$128)|0);
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$131>>3;
 var $133=$132&31;
 var $134=(($133)&255);
 $ins=$134;
 var $135=$j;
 var $136=($135<<2);
 var $137=((($136)+(2))|0);
 var $138=(($tmp+$137)|0);
 var $139=HEAP8[($138)];
 $note=$139;
 var $140=$j;
 var $141=($140<<2);
 var $142=(($tmp+$141)|0);
 var $143=HEAP8[($142)];
 $fxt=$143;
 var $144=$j;
 var $145=($144<<2);
 var $146=((($145)+(1))|0);
 var $147=(($tmp+$146)|0);
 var $148=HEAP8[($147)];
 $fxp=$148;
 var $149=$fxt;
 var $150=($149&255);
 if(($150|0)==0){ label=24;break;}else if(($150|0)==12){ label=25;break;}else{label=26;break;}
 case 24: 
 $fxt=3;
 label=27;break;
 case 25: 
 $fxt=0;
 label=27;break;
 case 26: 
 var $154=$fxt;
 var $155=($154&255);
 var $156=$155>>2;
 var $157=(($156)&255);
 $fxt=$157;
 label=27;break;
 case 27: 
 var $159=$ins;
 var $160=($159&255);
 var $161=$160&240;
 var $162=(($161)&255);
 var $163=$j;
 var $164=($163<<2);
 var $165=(($pat_data+$164)|0);
 HEAP8[($165)]=$162;
 var $166=$note;
 var $167=($166&255);
 var $168=(((($167|0))/(2))&-1);
 var $169=((4504+($168<<1))|0);
 var $170=(($169)|0);
 var $171=HEAP8[($170)];
 var $172=($171&255);
 var $173=$j;
 var $174=($173<<2);
 var $175=(($pat_data+$174)|0);
 var $176=HEAP8[($175)];
 var $177=($176&255);
 var $178=$177|$172;
 var $179=(($178)&255);
 HEAP8[($175)]=$179;
 var $180=$note;
 var $181=($180&255);
 var $182=(((($181|0))/(2))&-1);
 var $183=((4504+($182<<1))|0);
 var $184=(($183+1)|0);
 var $185=HEAP8[($184)];
 var $186=$j;
 var $187=($186<<2);
 var $188=((($187)+(1))|0);
 var $189=(($pat_data+$188)|0);
 HEAP8[($189)]=$185;
 var $190=$ins;
 var $191=($190&255);
 var $192=$191<<4;
 var $193=$192&240;
 var $194=(($193)&255);
 var $195=$j;
 var $196=($195<<2);
 var $197=((($196)+(2))|0);
 var $198=(($pat_data+$197)|0);
 HEAP8[($198)]=$194;
 var $199=$fxt;
 var $200=($199&255);
 var $201=$j;
 var $202=($201<<2);
 var $203=((($202)+(2))|0);
 var $204=(($pat_data+$203)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$206|$200;
 var $208=(($207)&255);
 HEAP8[($204)]=$208;
 var $209=$fxp;
 var $210=$j;
 var $211=($210<<2);
 var $212=((($211)+(3))|0);
 var $213=(($pat_data+$212)|0);
 HEAP8[($213)]=$209;
 label=28;break;
 case 28: 
 var $215=$j;
 var $216=((($215)+(1))|0);
 $j=$216;
 label=22;break;
 case 29: 
 var $218=(($pat_data)|0);
 var $219=$2;
 var $220=_fwrite($218,1024,1,$219);
 label=30;break;
 case 30: 
 var $222=$i;
 var $223=((($222)+(1))|0);
 $i=$223;
 label=20;break;
 case 31: 
 var $225=$2;
 var $226=$1;
 var $227=$ssize;
 var $228=_pw_move_data($225,$226,$227);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_ntp($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<64;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((64)-($9))|0);
 $1=$10;
 label=20;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=_readmem32b($15);
 var $17=($16|0)!=1297040469;
 if($17){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=20;break;
 case 7: 
 var $20=$2;
 var $21=$start;
 var $22=(($20+$21)|0);
 var $23=(($22+20)|0);
 var $24=_readmem16b($23);
 var $25=($24&65535);
 var $26=((($25)+(4))|0);
 $j=$26;
 var $27=$2;
 var $28=$start;
 var $29=(($27+$28)|0);
 var $30=(($29+28)|0);
 var $31=_readmem16b($30);
 var $32=($31&65535);
 var $33=$j;
 var $34=((($32)+($33))|0);
 var $35=((($34)+(4))|0);
 $k=$35;
 label=8;break;
 case 8: 
 var $37=$4;
 var $38=$j;
 var $39=((($38)+(4))|0);
 var $40=($37|0)<($39|0);
 if($40){label=9;break;}else{label=10;break;}
 case 9: 
 var $42=$j;
 var $43=((($42)+(4))|0);
 var $44=$4;
 var $45=((($43)-($44))|0);
 $1=$45;
 label=20;break;
 case 10: 
 label=11;break;
 case 11: 
 var $48=$2;
 var $49=$start;
 var $50=(($48+$49)|0);
 var $51=$j;
 var $52=(($50+$51)|0);
 var $53=_readmem32b($52);
 var $54=($53|0)!=1112491097;
 if($54){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=20;break;
 case 13: 
 label=14;break;
 case 14: 
 var $58=$4;
 var $59=$k;
 var $60=((($59)+(4))|0);
 var $61=($58|0)<($60|0);
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=$k;
 var $64=((($63)+(4))|0);
 var $65=$4;
 var $66=((($64)-($65))|0);
 $1=$66;
 label=20;break;
 case 16: 
 label=17;break;
 case 17: 
 var $69=$2;
 var $70=$start;
 var $71=(($69+$70)|0);
 var $72=$k;
 var $73=(($71+$72)|0);
 var $74=_readmem32b($73);
 var $75=($74|0)!=1396788560;
 if($75){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=20;break;
 case 19: 
 var $78=$2;
 var $79=(($78+4)|0);
 var $80=$3;
 _pw_read_title($79,$80,16);
 $1=0;
 label=20;break;
 case 20: 
 var $82=$1;
 STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_ntp($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $buf=sp;
 var $i;
 var $j;
 var $pat_addr=(sp)+(1024);
 var $body_addr;
 var $smp_addr;
 var $nins;
 var $len;
 var $npat;
 var $size;
 var $ssize;
 var $x;
 var $x1;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$1;
 var $4=_read32b($3);
 var $5=$2;
 var $6=$1;
 var $7=_pw_move_data($5,$6,16);
 var $8=$2;
 _write32b($8,0);
 var $9=$1;
 var $10=_read16b($9);
 var $11=($10&65535);
 var $12=((($11)+(4))|0);
 var $13=(($12)&65535);
 $body_addr=$13;
 var $14=$1;
 var $15=_read16b($14);
 $nins=$15;
 var $16=$1;
 var $17=_read16b($16);
 $len=$17;
 var $18=$1;
 var $19=_read16b($18);
 $npat=$19;
 var $20=$1;
 var $21=_read16b($20);
 var $22=($21&65535);
 var $23=$body_addr;
 var $24=(($23<<16)>>16);
 var $25=((($22)+($24))|0);
 var $26=((($25)+(4))|0);
 var $27=(($26)&65535);
 $smp_addr=$27;
 var $28=$buf;
 _memset($28, 0, 930)|0;
 $i=0;
 label=2;break;
 case 2: 
 var $30=$i;
 var $31=$nins;
 var $32=(($31<<16)>>16);
 var $33=($30|0)<($32|0);
 if($33){label=3;break;}else{label=7;break;}
 case 3: 
 var $35=$1;
 var $36=_read8($35);
 var $37=($36&255);
 $x=$37;
 var $38=$x;
 var $39=($38|0)>30;
 if($39){label=4;break;}else{label=5;break;}
 case 4: 
 var $41=$1;
 var $42=_fseek($41,7,1);
 label=6;break;
 case 5: 
 var $44=$x;
 var $45=((($44)*(30))&-1);
 $x=$45;
 var $46=$1;
 var $47=_read8($46);
 var $48=$x;
 var $49=((($48)+(25))|0);
 var $50=(($buf+$49)|0);
 HEAP8[($50)]=$47;
 var $51=$1;
 var $52=_read16b($51);
 var $53=($52&65535);
 $size=$53;
 var $54=$size;
 var $55=$54>>8;
 var $56=(($55)&255);
 var $57=$x;
 var $58=((($57)+(22))|0);
 var $59=(($buf+$58)|0);
 HEAP8[($59)]=$56;
 var $60=$size;
 var $61=$60&255;
 var $62=(($61)&255);
 var $63=$x;
 var $64=((($63)+(23))|0);
 var $65=(($buf+$64)|0);
 HEAP8[($65)]=$62;
 var $66=$size;
 var $67=($66<<1);
 var $68=$ssize;
 var $69=((($68)+($67))|0);
 $ssize=$69;
 var $70=$1;
 var $71=_read8($70);
 var $72=$x;
 var $73=((($72)+(26))|0);
 var $74=(($buf+$73)|0);
 HEAP8[($74)]=$71;
 var $75=$1;
 var $76=_read8($75);
 var $77=$x;
 var $78=((($77)+(27))|0);
 var $79=(($buf+$78)|0);
 HEAP8[($79)]=$76;
 var $80=$1;
 var $81=_read8($80);
 var $82=$x;
 var $83=((($82)+(28))|0);
 var $84=(($buf+$83)|0);
 HEAP8[($84)]=$81;
 var $85=$1;
 var $86=_read8($85);
 var $87=$x;
 var $88=((($87)+(29))|0);
 var $89=(($buf+$88)|0);
 HEAP8[($89)]=$86;
 label=6;break;
 case 6: 
 var $91=$i;
 var $92=((($91)+(1))|0);
 $i=$92;
 label=2;break;
 case 7: 
 var $94=(($buf)|0);
 var $95=$2;
 var $96=_fwrite($94,930,1,$95);
 var $97=$2;
 var $98=$len;
 var $99=(($98)&255);
 _write8($97,$99);
 var $100=$2;
 _write8($100,127);
 var $101=$buf;
 _memset($101, 0, 128)|0;
 $i=0;
 label=8;break;
 case 8: 
 var $103=$i;
 var $104=$len;
 var $105=(($104<<16)>>16);
 var $106=($103|0)<($105|0);
 if($106){label=9;break;}else{label=11;break;}
 case 9: 
 var $108=$1;
 var $109=_read16b($108);
 var $110=(($109)&255);
 var $111=$i;
 var $112=(($buf+$111)|0);
 HEAP8[($112)]=$110;
 label=10;break;
 case 10: 
 var $114=$i;
 var $115=((($114)+(1))|0);
 $i=$115;
 label=8;break;
 case 11: 
 var $117=(($buf)|0);
 var $118=$2;
 var $119=_fwrite($117,128,1,$118);
 var $120=$pat_addr;
 _memset($120, 0, 256)|0;
 $i=0;
 label=12;break;
 case 12: 
 var $122=$i;
 var $123=$npat;
 var $124=(($123<<16)>>16);
 var $125=($122|0)<($124|0);
 if($125){label=13;break;}else{label=15;break;}
 case 13: 
 var $127=$1;
 var $128=_read16b($127);
 var $129=($128&65535);
 var $130=$i;
 var $131=(($pat_addr+($130<<2))|0);
 HEAP32[(($131)>>2)]=$129;
 label=14;break;
 case 14: 
 var $133=$i;
 var $134=((($133)+(1))|0);
 $i=$134;
 label=12;break;
 case 15: 
 var $136=$2;
 _write32b($136,1294879534);
 $i=0;
 label=16;break;
 case 16: 
 var $138=$i;
 var $139=$npat;
 var $140=(($139<<16)>>16);
 var $141=($138|0)<($140|0);
 if($141){label=17;break;}else{label=31;break;}
 case 17: 
 var $143=$1;
 var $144=$body_addr;
 var $145=(($144<<16)>>16);
 var $146=((($145)+(4))|0);
 var $147=$i;
 var $148=(($pat_addr+($147<<2))|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=((($146)+($149))|0);
 var $151=_fseek($143,$150,0);
 var $152=$buf;
 _memset($152, 0, 1024)|0;
 $j=0;
 label=18;break;
 case 18: 
 var $154=$j;
 var $155=($154|0)<64;
 if($155){label=19;break;}else{label=29;break;}
 case 19: 
 var $157=$1;
 var $158=_read16b($157);
 var $159=($158&65535);
 $x1=$159;
 var $160=$x1;
 var $161=$160&1;
 var $162=($161|0)!=0;
 if($162){label=20;break;}else{label=21;break;}
 case 20: 
 var $164=(($buf)|0);
 var $165=$j;
 var $166=($165<<4);
 var $167=(($164+$166)|0);
 var $168=$1;
 var $169=_fread($167,1,4,$168);
 label=21;break;
 case 21: 
 var $171=$x1;
 var $172=$171&2;
 var $173=($172|0)!=0;
 if($173){label=22;break;}else{label=23;break;}
 case 22: 
 var $175=(($buf)|0);
 var $176=$j;
 var $177=($176<<4);
 var $178=(($175+$177)|0);
 var $179=(($178+4)|0);
 var $180=$1;
 var $181=_fread($179,1,4,$180);
 label=23;break;
 case 23: 
 var $183=$x1;
 var $184=$183&4;
 var $185=($184|0)!=0;
 if($185){label=24;break;}else{label=25;break;}
 case 24: 
 var $187=(($buf)|0);
 var $188=$j;
 var $189=($188<<4);
 var $190=(($187+$189)|0);
 var $191=(($190+8)|0);
 var $192=$1;
 var $193=_fread($191,1,4,$192);
 label=25;break;
 case 25: 
 var $195=$x1;
 var $196=$195&8;
 var $197=($196|0)!=0;
 if($197){label=26;break;}else{label=27;break;}
 case 26: 
 var $199=(($buf)|0);
 var $200=$j;
 var $201=($200<<4);
 var $202=(($199+$201)|0);
 var $203=(($202+12)|0);
 var $204=$1;
 var $205=_fread($203,1,4,$204);
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $208=$j;
 var $209=((($208)+(1))|0);
 $j=$209;
 label=18;break;
 case 29: 
 var $211=(($buf)|0);
 var $212=$2;
 var $213=_fwrite($211,1024,1,$212);
 label=30;break;
 case 30: 
 var $215=$i;
 var $216=((($215)+(1))|0);
 $i=$216;
 label=16;break;
 case 31: 
 var $218=$1;
 var $219=$smp_addr;
 var $220=(($219<<16)>>16);
 var $221=_fseek($218,$220,0);
 var $222=$2;
 var $223=$1;
 var $224=$ssize;
 var $225=_pw_move_data($222,$223,$224);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_np1($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 var $5=$2;
 var $6=$start;
 var $7=(($5+$6)|0);
 var $8=(($7+2)|0);
 var $9=_readmem16b($8);
 var $10=($9&65535);
 $j=$10;
 var $11=$j;
 var $12=(((($11|0))%(2))&-1);
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $15=$j;
 var $16=($15|0)==0;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=56;break;
 case 4: 
 var $19=$start;
 var $20=((($19)+(1))|0);
 var $21=$2;
 var $22=(($21+$20)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=$24&15;
 var $26=($25|0)!=12;
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-1;
 label=56;break;
 case 6: 
 var $29=$start;
 var $30=$2;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=$33<<4;
 var $35=$34&240;
 var $36=$start;
 var $37=((($36)+(1))|0);
 var $38=$2;
 var $39=(($38+$37)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$41>>4;
 var $43=$42&15;
 var $44=$35|$43;
 $l=$44;
 var $45=$l;
 var $46=($45|0)>31;
 if($46){label=8;break;}else{label=7;break;}
 case 7: 
 var $48=$l;
 var $49=($48|0)==0;
 if($49){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=56;break;
 case 9: 
 label=10;break;
 case 10: 
 var $53=$4;
 var $54=$start;
 var $55=((($54)+(15))|0);
 var $56=$l;
 var $57=($56<<4);
 var $58=((($55)+($57))|0);
 var $59=($53|0)<($58|0);
 if($59){label=11;break;}else{label=12;break;}
 case 11: 
 var $61=$start;
 var $62=((($61)+(15))|0);
 var $63=$l;
 var $64=($63<<4);
 var $65=((($62)+($64))|0);
 var $66=$4;
 var $67=((($65)-($66))|0);
 $1=$67;
 label=56;break;
 case 12: 
 label=13;break;
 case 13: 
 $k=0;
 label=14;break;
 case 14: 
 var $71=$k;
 var $72=$l;
 var $73=($71|0)<($72|0);
 if($73){label=15;break;}else{label=19;break;}
 case 15: 
 var $75=$start;
 var $76=((($75)+(15))|0);
 var $77=$k;
 var $78=($77<<4);
 var $79=((($76)+($78))|0);
 var $80=$2;
 var $81=(($80+$79)|0);
 var $82=HEAP8[($81)];
 var $83=($82&255);
 var $84=($83|0)>64;
 if($84){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=56;break;
 case 17: 
 label=18;break;
 case 18: 
 var $88=$k;
 var $89=((($88)+(1))|0);
 $k=$89;
 label=14;break;
 case 19: 
 $ssize=0;
 $k=0;
 label=20;break;
 case 20: 
 var $92=$k;
 var $93=$l;
 var $94=($92|0)<($93|0);
 if($94){label=21;break;}else{label=32;break;}
 case 21: 
 var $96=$2;
 var $97=$start;
 var $98=(($96+$97)|0);
 var $99=$k;
 var $100=($99<<4);
 var $101=(($98+$100)|0);
 var $102=(($101+12)|0);
 var $103=_readmem16b($102);
 var $104=($103&65535);
 var $105=($104<<1);
 $o=$105;
 var $106=$2;
 var $107=$start;
 var $108=(($106+$107)|0);
 var $109=$k;
 var $110=($109<<4);
 var $111=(($108+$110)|0);
 var $112=(($111+20)|0);
 var $113=_readmem16b($112);
 var $114=($113&65535);
 var $115=($114<<1);
 $m=$115;
 var $116=$2;
 var $117=$start;
 var $118=(($116+$117)|0);
 var $119=$k;
 var $120=($119<<4);
 var $121=(($118+$120)|0);
 var $122=(($121+22)|0);
 var $123=_readmem16b($122);
 var $124=($123&65535);
 $n=$124;
 var $125=$o;
 var $126=($125|0)>65535;
 if($126){label=24;break;}else{label=22;break;}
 case 22: 
 var $128=$m;
 var $129=($128|0)>65535;
 if($129){label=24;break;}else{label=23;break;}
 case 23: 
 var $131=$n;
 var $132=($131|0)>65535;
 if($132){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=56;break;
 case 25: 
 var $135=$m;
 var $136=$n;
 var $137=((($135)+($136))|0);
 var $138=$o;
 var $139=((($138)+(2))|0);
 var $140=($137|0)>($139|0);
 if($140){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=56;break;
 case 27: 
 var $143=$n;
 var $144=($143|0)!=0;
 if($144){label=28;break;}else{label=30;break;}
 case 28: 
 var $146=$m;
 var $147=($146|0)==0;
 if($147){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=56;break;
 case 30: 
 var $150=$o;
 var $151=$ssize;
 var $152=((($151)+($150))|0);
 $ssize=$152;
 label=31;break;
 case 31: 
 var $154=$k;
 var $155=((($154)+(1))|0);
 $k=$155;
 label=20;break;
 case 32: 
 var $157=$ssize;
 var $158=($157|0)<=4;
 if($158){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=56;break;
 case 34: 
 var $161=$l;
 var $162=($161<<4);
 var $163=((($162)+(8))|0);
 var $164=((($163)+(4))|0);
 $l=$164;
 $n=0;
 $k=0;
 label=35;break;
 case 35: 
 var $166=$k;
 var $167=$j;
 var $168=($166|0)<($167|0);
 if($168){label=36;break;}else{label=42;break;}
 case 36: 
 var $170=$2;
 var $171=$start;
 var $172=(($170+$171)|0);
 var $173=$l;
 var $174=(($172+$173)|0);
 var $175=$k;
 var $176=(($174+$175)|0);
 var $177=_readmem16b($176);
 var $178=($177&65535);
 $m=$178;
 var $179=$m;
 var $180=(((($179|0))%(8))&-1);
 var $181=($180|0)!=0;
 if($181){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=56;break;
 case 38: 
 var $184=$m;
 var $185=$n;
 var $186=($184|0)>($185|0);
 if($186){label=39;break;}else{label=40;break;}
 case 39: 
 var $188=$m;
 $n=$188;
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $191=$k;
 var $192=((($191)+(2))|0);
 $k=$192;
 label=35;break;
 case 42: 
 var $194=$j;
 var $195=$n;
 var $196=((($194)+($195))|0);
 var $197=((($196)+(8))|0);
 var $198=$l;
 var $199=((($198)+($197))|0);
 $l=$199;
 var $200=$2;
 var $201=$start;
 var $202=(($200+$201)|0);
 var $203=(($202+6)|0);
 var $204=_readmem16b($203);
 var $205=($204&65535);
 $k=$205;
 var $206=$k;
 var $207=($206|0)<192;
 if($207){label=44;break;}else{label=43;break;}
 case 43: 
 var $209=$k;
 var $210=(((($209|0))%(192))&-1);
 var $211=($210|0)!=0;
 if($211){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=56;break;
 case 45: 
 label=46;break;
 case 46: 
 var $215=$4;
 var $216=$start;
 var $217=$l;
 var $218=((($216)+($217))|0);
 var $219=$k;
 var $220=((($218)+($219))|0);
 var $221=($215|0)<($220|0);
 if($221){label=47;break;}else{label=48;break;}
 case 47: 
 var $223=$start;
 var $224=$l;
 var $225=((($223)+($224))|0);
 var $226=$k;
 var $227=((($225)+($226))|0);
 var $228=$4;
 var $229=((($227)-($228))|0);
 $1=$229;
 label=56;break;
 case 48: 
 label=49;break;
 case 49: 
 $m=0;
 label=50;break;
 case 50: 
 var $233=$m;
 var $234=$k;
 var $235=($233|0)<($234|0);
 if($235){label=51;break;}else{label=55;break;}
 case 51: 
 var $237=$start;
 var $238=$l;
 var $239=((($237)+($238))|0);
 var $240=$m;
 var $241=((($239)+($240))|0);
 var $242=$2;
 var $243=(($242+$241)|0);
 var $244=HEAP8[($243)];
 var $245=($244&255);
 var $246=($245|0)>73;
 if($246){label=52;break;}else{label=53;break;}
 case 52: 
 $1=-1;
 label=56;break;
 case 53: 
 label=54;break;
 case 54: 
 var $250=$m;
 var $251=((($250)+(3))|0);
 $m=$251;
 label=50;break;
 case 55: 
 var $253=$3;
 _pw_read_title(0,$253,0);
 $1=0;
 label=56;break;
 case 56: 
 var $255=$1;
 STACKTOP=sp;return $255;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_np1($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $len;
 var $nins;
 var $ptable=(sp)+(1024);
 var $npat;
 var $max_addr;
 var $size;
 var $ssize;
 var $tsize;
 var $taddr=(sp)+(1152);
 var $i;
 var $j;
 var $k;
 var $tdata;
 var $x;
 $1=$in;
 $2=$out;
 $npat=0;
 $ssize=0;
 $i=0;
 $j=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$taddr;
 _memset($4, 0, 2048)|0;
 var $5=$1;
 var $6=_read8($5);
 $c1=$6;
 var $7=$1;
 var $8=_read8($7);
 $c2=$8;
 var $9=$c1;
 var $10=($9&255);
 var $11=$10<<4;
 var $12=$11&240;
 var $13=$c2;
 var $14=($13&255);
 var $15=$14>>4;
 var $16=$15&15;
 var $17=$12|$16;
 var $18=(($17)&255);
 $nins=$18;
 var $19=$2;
 var $20=_pw_write_zero($19,20);
 var $21=$1;
 var $22=_read16b($21);
 var $23=($22&65535);
 var $24=(((($23|0))/(2))&-1);
 var $25=(($24)&255);
 $len=$25;
 var $26=$1;
 var $27=_read16b($26);
 var $28=$1;
 var $29=_read16b($28);
 var $30=($29&65535);
 $tsize=$30;
 $i=0;
 label=2;break;
 case 2: 
 var $32=$i;
 var $33=$nins;
 var $34=($33&255);
 var $35=($32|0)<($34|0);
 if($35){label=3;break;}else{label=5;break;}
 case 3: 
 var $37=$1;
 var $38=_read32b($37);
 var $39=$2;
 var $40=_pw_write_zero($39,22);
 var $41=$2;
 var $42=$1;
 var $43=_read16b($42);
 var $44=($43&65535);
 $size=$44;
 var $45=(($44)&65535);
 _write16b($41,$45);
 var $46=$size;
 var $47=($46<<1);
 var $48=$ssize;
 var $49=((($48)+($47))|0);
 $ssize=$49;
 var $50=$2;
 var $51=$1;
 var $52=_read8($51);
 _write8($50,$52);
 var $53=$2;
 var $54=$1;
 var $55=_read8($54);
 _write8($53,$55);
 var $56=$1;
 var $57=_read32b($56);
 var $58=$1;
 var $59=_read16b($58);
 var $60=($59&65535);
 $size=$60;
 var $61=$2;
 var $62=$1;
 var $63=_read16b($62);
 var $64=($63&65535);
 var $65=(((($64|0))/(2))&-1);
 var $66=(($65)&65535);
 _write16b($61,$66);
 var $67=$2;
 var $68=$size;
 var $69=(($68)&65535);
 _write16b($67,$69);
 label=4;break;
 case 4: 
 var $71=$i;
 var $72=((($71)+(1))|0);
 $i=$72;
 label=2;break;
 case 5: 
 var $74=$tmp;
 _memset($74, 0, 30)|0;
 var $75=(($tmp+29)|0);
 HEAP8[($75)]=1;
 label=6;break;
 case 6: 
 var $77=$i;
 var $78=($77|0)<31;
 if($78){label=7;break;}else{label=9;break;}
 case 7: 
 var $80=(($tmp)|0);
 var $81=$2;
 var $82=_fwrite($80,30,1,$81);
 label=8;break;
 case 8: 
 var $84=$i;
 var $85=((($84)+(1))|0);
 $i=$85;
 label=6;break;
 case 9: 
 var $87=$2;
 var $88=$len;
 _write8($87,$88);
 var $89=$2;
 _write8($89,127);
 var $90=$1;
 var $91=_read16b($90);
 var $92=$1;
 var $93=_read16b($92);
 $npat=0;
 $i=0;
 label=10;break;
 case 10: 
 var $95=$i;
 var $96=$len;
 var $97=($96&255);
 var $98=($95|0)<($97|0);
 if($98){label=11;break;}else{label=15;break;}
 case 11: 
 var $100=$1;
 var $101=_read16b($100);
 var $102=(($101)&255);
 var $103=$i;
 var $104=(($ptable+$103)|0);
 HEAP8[($104)]=$102;
 var $105=$i;
 var $106=(($ptable+$105)|0);
 var $107=HEAP8[($106)];
 var $108=($107&255);
 var $109=$npat;
 var $110=($109&255);
 var $111=($108|0)>($110|0);
 if($111){label=12;break;}else{label=13;break;}
 case 12: 
 var $113=$i;
 var $114=(($ptable+$113)|0);
 var $115=HEAP8[($114)];
 $npat=$115;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $118=$i;
 var $119=((($118)+(1))|0);
 $i=$119;
 label=10;break;
 case 15: 
 var $121=$npat;
 var $122=((($121)+(1))&255);
 $npat=$122;
 var $123=(($ptable)|0);
 var $124=$2;
 var $125=_fwrite($123,128,1,$124);
 var $126=$2;
 _write32b($126,1294879534);
 $max_addr=0;
 $i=0;
 label=16;break;
 case 16: 
 var $128=$i;
 var $129=$npat;
 var $130=($129&255);
 var $131=($128|0)<($130|0);
 if($131){label=17;break;}else{label=27;break;}
 case 17: 
 var $133=$1;
 var $134=_read16b($133);
 var $135=($134&65535);
 var $136=$i;
 var $137=(($taddr+($136<<4))|0);
 var $138=(($137)|0);
 HEAP32[(($138)>>2)]=$135;
 var $139=$max_addr;
 var $140=($135|0)>($139|0);
 if($140){label=18;break;}else{label=19;break;}
 case 18: 
 var $142=$i;
 var $143=(($taddr+($142<<4))|0);
 var $144=(($143)|0);
 var $145=HEAP32[(($144)>>2)];
 $max_addr=$145;
 label=19;break;
 case 19: 
 var $147=$1;
 var $148=_read16b($147);
 var $149=($148&65535);
 var $150=$i;
 var $151=(($taddr+($150<<4))|0);
 var $152=(($151+4)|0);
 HEAP32[(($152)>>2)]=$149;
 var $153=$max_addr;
 var $154=($149|0)>($153|0);
 if($154){label=20;break;}else{label=21;break;}
 case 20: 
 var $156=$i;
 var $157=(($taddr+($156<<4))|0);
 var $158=(($157+4)|0);
 var $159=HEAP32[(($158)>>2)];
 $max_addr=$159;
 label=21;break;
 case 21: 
 var $161=$1;
 var $162=_read16b($161);
 var $163=($162&65535);
 var $164=$i;
 var $165=(($taddr+($164<<4))|0);
 var $166=(($165+8)|0);
 HEAP32[(($166)>>2)]=$163;
 var $167=$max_addr;
 var $168=($163|0)>($167|0);
 if($168){label=22;break;}else{label=23;break;}
 case 22: 
 var $170=$i;
 var $171=(($taddr+($170<<4))|0);
 var $172=(($171+8)|0);
 var $173=HEAP32[(($172)>>2)];
 $max_addr=$173;
 label=23;break;
 case 23: 
 var $175=$1;
 var $176=_read16b($175);
 var $177=($176&65535);
 var $178=$i;
 var $179=(($taddr+($178<<4))|0);
 var $180=(($179+12)|0);
 HEAP32[(($180)>>2)]=$177;
 var $181=$max_addr;
 var $182=($177|0)>($181|0);
 if($182){label=24;break;}else{label=25;break;}
 case 24: 
 var $184=$i;
 var $185=(($taddr+($184<<4))|0);
 var $186=(($185+12)|0);
 var $187=HEAP32[(($186)>>2)];
 $max_addr=$187;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $190=$i;
 var $191=((($190)+(1))|0);
 $i=$191;
 label=16;break;
 case 27: 
 var $193=$1;
 var $194=_ftell($193);
 $tdata=$194;
 $i=0;
 label=28;break;
 case 28: 
 var $196=$i;
 var $197=$npat;
 var $198=($197&255);
 var $199=($196|0)<($198|0);
 if($199){label=29;break;}else{label=47;break;}
 case 29: 
 var $201=$tmp;
 _memset($201, 0, 1024)|0;
 $j=0;
 label=30;break;
 case 30: 
 var $203=$j;
 var $204=($203|0)<4;
 if($204){label=31;break;}else{label=45;break;}
 case 31: 
 var $206=$1;
 var $207=$tdata;
 var $208=$j;
 var $209=(((3)-($208))|0);
 var $210=$i;
 var $211=(($taddr+($210<<4))|0);
 var $212=(($211+($209<<2))|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=((($207)+($213))|0);
 var $215=_fseek($206,$214,0);
 $k=0;
 label=32;break;
 case 32: 
 var $217=$k;
 var $218=($217|0)<64;
 if($218){label=33;break;}else{label=43;break;}
 case 33: 
 var $220=$k;
 var $221=($220<<4);
 var $222=$j;
 var $223=($222<<2);
 var $224=((($221)+($223))|0);
 $x=$224;
 var $225=$1;
 var $226=_read8($225);
 $c1=$226;
 var $227=$1;
 var $228=_read8($227);
 $c2=$228;
 var $229=$1;
 var $230=_read8($229);
 $c3=$230;
 var $231=$c1;
 var $232=($231&255);
 var $233=$232&254;
 var $234=(((($233|0))/(2))&-1);
 var $235=(($234)&255);
 $c4=$235;
 var $236=$c1;
 var $237=($236&255);
 var $238=$237<<4;
 var $239=$238&16;
 var $240=$c4;
 var $241=($240&255);
 var $242=((4504+($241<<1))|0);
 var $243=(($242)|0);
 var $244=HEAP8[($243)];
 var $245=($244&255);
 var $246=$239|$245;
 var $247=(($246)&255);
 var $248=$x;
 var $249=(($tmp+$248)|0);
 HEAP8[($249)]=$247;
 var $250=$c4;
 var $251=($250&255);
 var $252=((4504+($251<<1))|0);
 var $253=(($252+1)|0);
 var $254=HEAP8[($253)];
 var $255=$x;
 var $256=((($255)+(1))|0);
 var $257=(($tmp+$256)|0);
 HEAP8[($257)]=$254;
 var $258=$c2;
 var $259=($258&255);
 var $260=$259&15;
 switch(($260|0)){case 8:{ label=34;break;}case 7:{ label=35;break;}case 6:case 5:{ label=36;break;}case 11:{ label=40;break;}default:{label=41;break;}}break;
 case 34: 
 var $262=$c2;
 var $263=($262&255);
 var $264=$263&240;
 var $265=(($264)&255);
 $c2=$265;
 label=41;break;
 case 35: 
 var $267=$c2;
 var $268=($267&255);
 var $269=$268&240;
 var $270=((($269)+(10))|0);
 var $271=(($270)&255);
 $c2=$271;
 label=36;break;
 case 36: 
 var $273=$c3;
 var $274=($273&255);
 var $275=($274|0)>128;
 if($275){label=37;break;}else{label=38;break;}
 case 37: 
 var $277=$c3;
 var $278=($277&255);
 var $279=(((256)-($278))|0);
 var $286=$279;label=39;break;
 case 38: 
 var $281=$c3;
 var $282=($281&255);
 var $283=$282<<4;
 var $284=$283&240;
 var $286=$284;label=39;break;
 case 39: 
 var $286;
 var $287=(($286)&255);
 $c3=$287;
 label=41;break;
 case 40: 
 var $289=$c3;
 var $290=($289&255);
 var $291=((($290)+(4))|0);
 var $292=(((($291|0))/(2))&-1);
 var $293=(($292)&255);
 $c3=$293;
 label=41;break;
 case 41: 
 var $295=$c2;
 var $296=$x;
 var $297=((($296)+(2))|0);
 var $298=(($tmp+$297)|0);
 HEAP8[($298)]=$295;
 var $299=$c3;
 var $300=$x;
 var $301=((($300)+(3))|0);
 var $302=(($tmp+$301)|0);
 HEAP8[($302)]=$299;
 label=42;break;
 case 42: 
 var $304=$k;
 var $305=((($304)+(1))|0);
 $k=$305;
 label=32;break;
 case 43: 
 label=44;break;
 case 44: 
 var $308=$j;
 var $309=((($308)+(1))|0);
 $j=$309;
 label=30;break;
 case 45: 
 var $311=(($tmp)|0);
 var $312=$2;
 var $313=_fwrite($311,1024,1,$312);
 label=46;break;
 case 46: 
 var $315=$i;
 var $316=((($315)+(1))|0);
 $i=$316;
 label=28;break;
 case 47: 
 var $318=$1;
 var $319=$max_addr;
 var $320=((($319)+(192))|0);
 var $321=$tdata;
 var $322=((($320)+($321))|0);
 var $323=_fseek($318,$322,0);
 var $324=$2;
 var $325=$1;
 var $326=$ssize;
 var $327=_pw_move_data($324,$325,$326);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_np2($data,$t,$s){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $o;
 var $m;
 var $n;
 var $start;
 var $ssize;
 var $x;
 $2=$data;
 $3=$t;
 $4=$s;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<1024;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((1024)-($9))|0);
 $1=$10;
 label=61;break;
 case 4: 
 label=5;break;
 case 5: 
 $start=0;
 var $13=$start;
 var $14=((($13)+(2))|0);
 var $15=$2;
 var $16=(($15+$14)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=$18<<8;
 var $20=$start;
 var $21=((($20)+(3))|0);
 var $22=$2;
 var $23=(($22+$21)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=((($19)+($25))|0);
 $j=$26;
 var $27=$j;
 var $28=$27&1;
 var $29=($28|0)!=0;
 if($29){label=7;break;}else{label=6;break;}
 case 6: 
 var $31=$j;
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=61;break;
 case 8: 
 var $35=$start;
 var $36=((($35)+(1))|0);
 var $37=$2;
 var $38=(($37+$36)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=$40&15;
 var $42=($41|0)!=12;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=61;break;
 case 10: 
 var $45=$start;
 var $46=$2;
 var $47=(($46+$45)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=$49<<4;
 var $51=$50&240;
 var $52=$start;
 var $53=((($52)+(1))|0);
 var $54=$2;
 var $55=(($54+$53)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=$57>>4;
 var $59=$58&15;
 var $60=$51|$59;
 $l=$60;
 var $61=$l;
 var $62=($61|0)>31;
 if($62){label=12;break;}else{label=11;break;}
 case 11: 
 var $64=$l;
 var $65=($64|0)==0;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=61;break;
 case 13: 
 $k=0;
 label=14;break;
 case 14: 
 var $69=$k;
 var $70=$l;
 var $71=($69|0)<($70|0);
 if($71){label=15;break;}else{label=19;break;}
 case 15: 
 var $73=$start;
 var $74=((($73)+(15))|0);
 var $75=$k;
 var $76=($75<<4);
 var $77=((($74)+($76))|0);
 var $78=$2;
 var $79=(($78+$77)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=($81|0)>64;
 if($82){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=61;break;
 case 17: 
 label=18;break;
 case 18: 
 var $86=$k;
 var $87=((($86)+(1))|0);
 $k=$87;
 label=14;break;
 case 19: 
 $ssize=0;
 $k=0;
 label=20;break;
 case 20: 
 var $90=$k;
 var $91=$l;
 var $92=($90|0)<($91|0);
 if($92){label=21;break;}else{label=32;break;}
 case 21: 
 var $94=$start;
 var $95=$k;
 var $96=($95<<4);
 var $97=((($94)+($96))|0);
 $x=$97;
 var $98=$x;
 var $99=((($98)+(12))|0);
 var $100=$2;
 var $101=(($100+$99)|0);
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103<<8;
 var $105=$x;
 var $106=((($105)+(13))|0);
 var $107=$2;
 var $108=(($107+$106)|0);
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=((($104)+($110))|0);
 var $112=($111<<1);
 $o=$112;
 var $113=$x;
 var $114=((($113)+(20))|0);
 var $115=$2;
 var $116=(($115+$114)|0);
 var $117=HEAP8[($116)];
 var $118=($117&255);
 var $119=$118<<8;
 var $120=$x;
 var $121=((($120)+(21))|0);
 var $122=$2;
 var $123=(($122+$121)|0);
 var $124=HEAP8[($123)];
 var $125=($124&255);
 var $126=((($119)+($125))|0);
 var $127=($126<<1);
 $m=$127;
 var $128=$x;
 var $129=((($128)+(22))|0);
 var $130=$2;
 var $131=(($130+$129)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=$133<<8;
 var $135=$x;
 var $136=((($135)+(23))|0);
 var $137=$2;
 var $138=(($137+$136)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 var $141=((($134)+($140))|0);
 var $142=($141<<1);
 $n=$142;
 var $143=$o;
 var $144=($143|0)>65535;
 if($144){label=24;break;}else{label=22;break;}
 case 22: 
 var $146=$m;
 var $147=($146|0)>65535;
 if($147){label=24;break;}else{label=23;break;}
 case 23: 
 var $149=$n;
 var $150=($149|0)>65535;
 if($150){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=61;break;
 case 25: 
 var $153=$m;
 var $154=$n;
 var $155=((($153)+($154))|0);
 var $156=$o;
 var $157=((($156)+(2))|0);
 var $158=($155|0)>($157|0);
 if($158){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=61;break;
 case 27: 
 var $161=$n;
 var $162=($161|0)!=0;
 if($162){label=28;break;}else{label=30;break;}
 case 28: 
 var $164=$m;
 var $165=($164|0)==0;
 if($165){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=61;break;
 case 30: 
 var $168=$o;
 var $169=$ssize;
 var $170=((($169)+($168))|0);
 $ssize=$170;
 label=31;break;
 case 31: 
 var $172=$k;
 var $173=((($172)+(1))|0);
 $k=$173;
 label=20;break;
 case 32: 
 var $175=$ssize;
 var $176=($175|0)<=4;
 if($176){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=61;break;
 case 34: 
 var $179=$l;
 var $180=($179<<4);
 $l=$180;
 var $181=$l;
 var $182=((($181)+(12))|0);
 $l=$182;
 $n=0;
 $k=0;
 label=35;break;
 case 35: 
 var $184=$k;
 var $185=$j;
 var $186=($184|0)<($185|0);
 if($186){label=36;break;}else{label=42;break;}
 case 36: 
 var $188=$start;
 var $189=$l;
 var $190=((($188)+($189))|0);
 var $191=$k;
 var $192=((($190)+($191))|0);
 var $193=$2;
 var $194=(($193+$192)|0);
 var $195=HEAP8[($194)];
 var $196=($195&255);
 var $197=$196<<8;
 var $198=$start;
 var $199=$l;
 var $200=((($198)+($199))|0);
 var $201=$k;
 var $202=((($200)+($201))|0);
 var $203=((($202)+(1))|0);
 var $204=$2;
 var $205=(($204+$203)|0);
 var $206=HEAP8[($205)];
 var $207=($206&255);
 var $208=((($197)+($207))|0);
 $m=$208;
 var $209=$m;
 var $210=(((($209|0))/(8))&-1);
 var $211=($210<<3);
 var $212=$m;
 var $213=($211|0)!=($212|0);
 if($213){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=61;break;
 case 38: 
 var $216=$m;
 var $217=$n;
 var $218=($216|0)>($217|0);
 if($218){label=39;break;}else{label=40;break;}
 case 39: 
 var $220=$m;
 $n=$220;
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $223=$k;
 var $224=((($223)+(2))|0);
 $k=$224;
 label=35;break;
 case 42: 
 var $226=$j;
 var $227=$n;
 var $228=((($226)+($227))|0);
 var $229=((($228)+(8))|0);
 var $230=$l;
 var $231=((($230)+($229))|0);
 $l=$231;
 var $232=$start;
 var $233=((($232)+(6))|0);
 var $234=$2;
 var $235=(($234+$233)|0);
 var $236=HEAP8[($235)];
 var $237=($236&255);
 var $238=$237<<8;
 var $239=$start;
 var $240=((($239)+(7))|0);
 var $241=$2;
 var $242=(($241+$240)|0);
 var $243=HEAP8[($242)];
 var $244=($243&255);
 var $245=((($238)+($244))|0);
 $k=$245;
 var $246=$k;
 var $247=($246|0)<192;
 if($247){label=44;break;}else{label=43;break;}
 case 43: 
 var $249=$k;
 var $250=(((($249|0))/(192))&-1);
 var $251=((($250)*(192))&-1);
 var $252=$k;
 var $253=($251|0)!=($252|0);
 if($253){label=44;break;}else{label=45;break;}
 case 44: 
 $1=-1;
 label=61;break;
 case 45: 
 label=46;break;
 case 46: 
 var $257=$4;
 var $258=$k;
 var $259=$l;
 var $260=((($258)+($259))|0);
 var $261=((($260)+(16))|0);
 var $262=($257|0)<($261|0);
 if($262){label=47;break;}else{label=48;break;}
 case 47: 
 var $264=$k;
 var $265=$l;
 var $266=((($264)+($265))|0);
 var $267=((($266)+(16))|0);
 var $268=$4;
 var $269=((($267)-($268))|0);
 $1=$269;
 label=61;break;
 case 48: 
 label=49;break;
 case 49: 
 var $272=$start;
 var $273=$2;
 var $274=(($273+$272)|0);
 var $275=HEAP8[($274)];
 var $276=($275&255);
 var $277=$276<<4;
 var $278=$277&240;
 var $279=$start;
 var $280=((($279)+(1))|0);
 var $281=$2;
 var $282=(($281+$280)|0);
 var $283=HEAP8[($282)];
 var $284=($283&255);
 var $285=$284>>4;
 var $286=$285&15;
 var $287=$278|$286;
 $j=$287;
 $m=0;
 label=50;break;
 case 50: 
 var $289=$m;
 var $290=$k;
 var $291=($289|0)<($290|0);
 if($291){label=51;break;}else{label=60;break;}
 case 51: 
 var $293=$start;
 var $294=$l;
 var $295=((($293)+($294))|0);
 var $296=$m;
 var $297=((($295)+($296))|0);
 var $298=$2;
 var $299=(($298+$297)|0);
 var $300=HEAP8[($299)];
 var $301=($300&255);
 var $302=($301|0)>73;
 if($302){label=52;break;}else{label=53;break;}
 case 52: 
 var $304=$m;
 var $305=_printf(25336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$304,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=-1;
 label=61;break;
 case 53: 
 var $307=$start;
 var $308=$l;
 var $309=((($307)+($308))|0);
 var $310=$m;
 var $311=((($309)+($310))|0);
 var $312=$2;
 var $313=(($312+$311)|0);
 var $314=HEAP8[($313)];
 var $315=($314&255);
 var $316=$315<<4;
 var $317=$316&16;
 var $318=$start;
 var $319=$l;
 var $320=((($318)+($319))|0);
 var $321=$m;
 var $322=((($320)+($321))|0);
 var $323=((($322)+(1))|0);
 var $324=$2;
 var $325=(($324+$323)|0);
 var $326=HEAP8[($325)];
 var $327=($326&255);
 var $328=$327>>4;
 var $329=$328&15;
 var $330=$317|$329;
 var $331=$j;
 var $332=($330|0)>($331|0);
 if($332){label=54;break;}else{label=55;break;}
 case 54: 
 var $334=$m;
 var $335=_printf(23928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$334,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=-1;
 label=61;break;
 case 55: 
 var $337=$start;
 var $338=$l;
 var $339=((($337)+($338))|0);
 var $340=$m;
 var $341=((($339)+($340))|0);
 var $342=((($341)+(1))|0);
 var $343=$2;
 var $344=(($343+$342)|0);
 var $345=HEAP8[($344)];
 var $346=($345&255);
 var $347=$346&15;
 $n=$347;
 var $348=$n;
 var $349=($348|0)==0;
 if($349){label=56;break;}else{label=58;break;}
 case 56: 
 var $351=$start;
 var $352=$l;
 var $353=((($351)+($352))|0);
 var $354=$m;
 var $355=((($353)+($354))|0);
 var $356=((($355)+(2))|0);
 var $357=$2;
 var $358=(($357+$356)|0);
 var $359=HEAP8[($358)];
 var $360=($359&255);
 var $361=($360|0)!=0;
 if($361){label=57;break;}else{label=58;break;}
 case 57: 
 var $363=$m;
 var $364=_printf(23136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$363,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=-1;
 label=61;break;
 case 58: 
 label=59;break;
 case 59: 
 var $367=$m;
 var $368=((($367)+(3))|0);
 $m=$368;
 label=50;break;
 case 60: 
 var $370=$3;
 _pw_read_title(0,$370,0);
 $1=0;
 label=61;break;
 case 61: 
 var $372=$1;
 STACKTOP=sp;return $372;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_np2($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $ptable=(sp)+(1024);
 var $len;
 var $nins;
 var $npat;
 var $max_addr;
 var $size;
 var $ssize;
 var $tsize;
 var $trk_addr=(sp)+(1152);
 var $i;
 var $j;
 var $k;
 var $trk_start;
 var $x;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$trk_addr;
 _memset($4, 0, 2048)|0;
 var $5=$1;
 var $6=_read8($5);
 $c1=$6;
 var $7=$1;
 var $8=_read8($7);
 $c2=$8;
 var $9=$c1;
 var $10=($9&255);
 var $11=$10<<4;
 var $12=$11&240;
 var $13=$c2;
 var $14=($13&255);
 var $15=$14>>4;
 var $16=$15&15;
 var $17=$12|$16;
 $nins=$17;
 var $18=$2;
 var $19=_pw_write_zero($18,20);
 var $20=$1;
 var $21=_read8($20);
 var $22=$1;
 var $23=_read8($22);
 var $24=($23&255);
 var $25=(((($24|0))/(2))&-1);
 $len=$25;
 var $26=$1;
 var $27=_read16b($26);
 var $28=$1;
 var $29=_read16b($28);
 var $30=($29&65535);
 $tsize=$30;
 $i=0;
 label=2;break;
 case 2: 
 var $32=$i;
 var $33=$nins;
 var $34=($32|0)<($33|0);
 if($34){label=3;break;}else{label=5;break;}
 case 3: 
 var $36=$1;
 var $37=_read32b($36);
 var $38=$2;
 var $39=_pw_write_zero($38,22);
 var $40=$2;
 var $41=$1;
 var $42=_read16b($41);
 var $43=($42&65535);
 $size=$43;
 var $44=(($43)&65535);
 _write16b($40,$44);
 var $45=$size;
 var $46=($45<<1);
 var $47=$ssize;
 var $48=((($47)+($46))|0);
 $ssize=$48;
 var $49=$2;
 var $50=$1;
 var $51=_read8($50);
 _write8($49,$51);
 var $52=$2;
 var $53=$1;
 var $54=_read8($53);
 _write8($52,$54);
 var $55=$1;
 var $56=_read32b($55);
 var $57=$1;
 var $58=_read16b($57);
 var $59=($58&65535);
 $size=$59;
 var $60=$2;
 var $61=$1;
 var $62=_read16b($61);
 _write16b($60,$62);
 var $63=$2;
 var $64=$size;
 var $65=(($64)&65535);
 _write16b($63,$65);
 label=4;break;
 case 4: 
 var $67=$i;
 var $68=((($67)+(1))|0);
 $i=$68;
 label=2;break;
 case 5: 
 var $70=$tmp;
 _memset($70, 0, 30)|0;
 var $71=(($tmp+29)|0);
 HEAP8[($71)]=1;
 label=6;break;
 case 6: 
 var $73=$i;
 var $74=($73|0)<31;
 if($74){label=7;break;}else{label=9;break;}
 case 7: 
 var $76=(($tmp)|0);
 var $77=$2;
 var $78=_fwrite($76,30,1,$77);
 label=8;break;
 case 8: 
 var $80=$i;
 var $81=((($80)+(1))|0);
 $i=$81;
 label=6;break;
 case 9: 
 var $83=$2;
 var $84=$len;
 var $85=(($84)&255);
 _write8($83,$85);
 var $86=$2;
 _write8($86,127);
 var $87=$1;
 var $88=_fseek($87,2,1);
 var $89=$1;
 var $90=_fseek($89,2,1);
 $i=0;
 $npat=0;
 label=10;break;
 case 10: 
 var $92=$i;
 var $93=$len;
 var $94=($92|0)<($93|0);
 if($94){label=11;break;}else{label=15;break;}
 case 11: 
 var $96=$1;
 var $97=_read16b($96);
 var $98=($97&65535);
 var $99=(((($98|0))/(8))&-1);
 var $100=(($99)&255);
 var $101=$i;
 var $102=(($ptable+$101)|0);
 HEAP8[($102)]=$100;
 var $103=$i;
 var $104=(($ptable+$103)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 var $107=$npat;
 var $108=($106|0)>($107|0);
 if($108){label=12;break;}else{label=13;break;}
 case 12: 
 var $110=$i;
 var $111=(($ptable+$110)|0);
 var $112=HEAP8[($111)];
 var $113=($112&255);
 $npat=$113;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $116=$i;
 var $117=((($116)+(1))|0);
 $i=$117;
 label=10;break;
 case 15: 
 var $119=$npat;
 var $120=((($119)+(1))|0);
 $npat=$120;
 var $121=(($ptable)|0);
 var $122=$2;
 var $123=_fwrite($121,128,1,$122);
 var $124=$2;
 _write32b($124,1294879534);
 $i=0;
 $max_addr=0;
 label=16;break;
 case 16: 
 var $126=$i;
 var $127=$npat;
 var $128=($126|0)<($127|0);
 if($128){label=17;break;}else{label=27;break;}
 case 17: 
 var $130=$1;
 var $131=_read16b($130);
 var $132=($131&65535);
 var $133=$i;
 var $134=(($trk_addr+($133<<4))|0);
 var $135=(($134)|0);
 HEAP32[(($135)>>2)]=$132;
 var $136=$max_addr;
 var $137=($132|0)>($136|0);
 if($137){label=18;break;}else{label=19;break;}
 case 18: 
 var $139=$i;
 var $140=(($trk_addr+($139<<4))|0);
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 $max_addr=$142;
 label=19;break;
 case 19: 
 var $144=$1;
 var $145=_read16b($144);
 var $146=($145&65535);
 var $147=$i;
 var $148=(($trk_addr+($147<<4))|0);
 var $149=(($148+4)|0);
 HEAP32[(($149)>>2)]=$146;
 var $150=$max_addr;
 var $151=($146|0)>($150|0);
 if($151){label=20;break;}else{label=21;break;}
 case 20: 
 var $153=$i;
 var $154=(($trk_addr+($153<<4))|0);
 var $155=(($154+4)|0);
 var $156=HEAP32[(($155)>>2)];
 $max_addr=$156;
 label=21;break;
 case 21: 
 var $158=$1;
 var $159=_read16b($158);
 var $160=($159&65535);
 var $161=$i;
 var $162=(($trk_addr+($161<<4))|0);
 var $163=(($162+8)|0);
 HEAP32[(($163)>>2)]=$160;
 var $164=$max_addr;
 var $165=($160|0)>($164|0);
 if($165){label=22;break;}else{label=23;break;}
 case 22: 
 var $167=$i;
 var $168=(($trk_addr+($167<<4))|0);
 var $169=(($168+8)|0);
 var $170=HEAP32[(($169)>>2)];
 $max_addr=$170;
 label=23;break;
 case 23: 
 var $172=$1;
 var $173=_read16b($172);
 var $174=($173&65535);
 var $175=$i;
 var $176=(($trk_addr+($175<<4))|0);
 var $177=(($176+12)|0);
 HEAP32[(($177)>>2)]=$174;
 var $178=$max_addr;
 var $179=($174|0)>($178|0);
 if($179){label=24;break;}else{label=25;break;}
 case 24: 
 var $181=$i;
 var $182=(($trk_addr+($181<<4))|0);
 var $183=(($182+12)|0);
 var $184=HEAP32[(($183)>>2)];
 $max_addr=$184;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $187=$i;
 var $188=((($187)+(1))|0);
 $i=$188;
 label=16;break;
 case 27: 
 var $190=$1;
 var $191=_ftell($190);
 $trk_start=$191;
 $i=0;
 label=28;break;
 case 28: 
 var $193=$i;
 var $194=$npat;
 var $195=($193|0)<($194|0);
 if($195){label=29;break;}else{label=48;break;}
 case 29: 
 var $197=$tmp;
 _memset($197, 0, 1024)|0;
 $j=0;
 label=30;break;
 case 30: 
 var $199=$j;
 var $200=($199|0)<4;
 if($200){label=31;break;}else{label=46;break;}
 case 31: 
 var $202=$1;
 var $203=$trk_start;
 var $204=$j;
 var $205=(((3)-($204))|0);
 var $206=$i;
 var $207=(($trk_addr+($206<<4))|0);
 var $208=(($207+($205<<2))|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=((($203)+($209))|0);
 var $211=_fseek($202,$210,0);
 $k=0;
 label=32;break;
 case 32: 
 var $213=$k;
 var $214=($213|0)<64;
 if($214){label=33;break;}else{label=44;break;}
 case 33: 
 var $216=$k;
 var $217=($216<<4);
 var $218=$j;
 var $219=($218<<2);
 var $220=((($217)+($219))|0);
 $x=$220;
 var $221=$1;
 var $222=_read8($221);
 $c1=$222;
 var $223=$1;
 var $224=_read8($223);
 $c2=$224;
 var $225=$1;
 var $226=_read8($225);
 $c3=$226;
 var $227=$c1;
 var $228=($227&255);
 var $229=$228&254;
 var $230=(((($229|0))/(2))&-1);
 var $231=(($230)&255);
 $c4=$231;
 var $232=$c1;
 var $233=($232&255);
 var $234=$233<<4;
 var $235=$234&16;
 var $236=$c4;
 var $237=($236&255);
 var $238=((4504+($237<<1))|0);
 var $239=(($238)|0);
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=$235|$241;
 var $243=(($242)&255);
 var $244=$x;
 var $245=(($tmp+$244)|0);
 HEAP8[($245)]=$243;
 var $246=$c4;
 var $247=($246&255);
 var $248=((4504+($247<<1))|0);
 var $249=(($248+1)|0);
 var $250=HEAP8[($249)];
 var $251=$x;
 var $252=((($251)+(1))|0);
 var $253=(($tmp+$252)|0);
 HEAP8[($253)]=$250;
 var $254=$c2;
 var $255=($254&255);
 var $256=$255&15;
 switch(($256|0)){case 8:{ label=34;break;}case 7:{ label=35;break;}case 6:case 5:{ label=36;break;}case 14:{ label=40;break;}case 11:{ label=41;break;}default:{label=42;break;}}break;
 case 34: 
 var $258=$c2;
 var $259=($258&255);
 var $260=$259&240;
 var $261=(($260)&255);
 $c2=$261;
 label=42;break;
 case 35: 
 var $263=$c2;
 var $264=($263&255);
 var $265=$264&240;
 var $266=((($265)+(10))|0);
 var $267=(($266)&255);
 $c2=$267;
 label=36;break;
 case 36: 
 var $269=$c3;
 var $270=($269&255);
 var $271=($270|0)>128;
 if($271){label=37;break;}else{label=38;break;}
 case 37: 
 var $273=$c3;
 var $274=($273&255);
 var $275=(((256)-($274))|0);
 var $282=$275;label=39;break;
 case 38: 
 var $277=$c3;
 var $278=($277&255);
 var $279=$278<<4;
 var $280=$279&240;
 var $282=$280;label=39;break;
 case 39: 
 var $282;
 var $283=(($282)&255);
 $c3=$283;
 label=42;break;
 case 40: 
 var $285=$c3;
 var $286=((($285)-(1))&255);
 $c3=$286;
 label=42;break;
 case 41: 
 var $288=$c3;
 var $289=($288&255);
 var $290=((($289)+(4))|0);
 var $291=(((($290|0))/(2))&-1);
 var $292=(($291)&255);
 $c3=$292;
 label=42;break;
 case 42: 
 var $294=$c2;
 var $295=$x;
 var $296=((($295)+(2))|0);
 var $297=(($tmp+$296)|0);
 HEAP8[($297)]=$294;
 var $298=$c3;
 var $299=$x;
 var $300=((($299)+(3))|0);
 var $301=(($tmp+$300)|0);
 HEAP8[($301)]=$298;
 label=43;break;
 case 43: 
 var $303=$k;
 var $304=((($303)+(1))|0);
 $k=$304;
 label=32;break;
 case 44: 
 label=45;break;
 case 45: 
 var $307=$j;
 var $308=((($307)+(1))|0);
 $j=$308;
 label=30;break;
 case 46: 
 var $310=(($tmp)|0);
 var $311=$2;
 var $312=_fwrite($310,1024,1,$311);
 label=47;break;
 case 47: 
 var $314=$i;
 var $315=((($314)+(1))|0);
 $i=$315;
 label=28;break;
 case 48: 
 var $317=$1;
 var $318=$max_addr;
 var $319=((($318)+(192))|0);
 var $320=$trk_start;
 var $321=((($319)+($320))|0);
 var $322=_fseek($317,$321,0);
 var $323=$2;
 var $324=$1;
 var $325=$ssize;
 var $326=_pw_move_data($323,$324,$325);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_np3($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<10;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((10)-($9))|0);
 $1=$10;
 label=68;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=$start;
 var $15=(($13+$14)|0);
 var $16=(($15+2)|0);
 var $17=_readmem16b($16);
 var $18=($17&65535);
 $j=$18;
 var $19=$j;
 var $20=$19&1;
 var $21=($20|0)!=0;
 if($21){label=7;break;}else{label=6;break;}
 case 6: 
 var $23=$j;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=68;break;
 case 8: 
 var $27=$start;
 var $28=((($27)+(1))|0);
 var $29=$2;
 var $30=(($29+$28)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=$32&15;
 var $34=($33|0)!=12;
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=68;break;
 case 10: 
 var $37=$start;
 var $38=$2;
 var $39=(($38+$37)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$41<<4;
 var $43=$42&240;
 var $44=$start;
 var $45=((($44)+(1))|0);
 var $46=$2;
 var $47=(($46+$45)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=$49>>4;
 var $51=$50&15;
 var $52=$43|$51;
 $l=$52;
 var $53=$l;
 var $54=($53|0)>31;
 if($54){label=12;break;}else{label=11;break;}
 case 11: 
 var $56=$l;
 var $57=($56|0)==0;
 if($57){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=68;break;
 case 13: 
 $k=0;
 label=14;break;
 case 14: 
 var $61=$k;
 var $62=$l;
 var $63=($61|0)<($62|0);
 if($63){label=15;break;}else{label=19;break;}
 case 15: 
 var $65=$start;
 var $66=((($65)+(9))|0);
 var $67=$k;
 var $68=($67<<4);
 var $69=((($66)+($68))|0);
 var $70=$2;
 var $71=(($70+$69)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=($73|0)>64;
 if($74){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=68;break;
 case 17: 
 label=18;break;
 case 18: 
 var $78=$k;
 var $79=((($78)+(1))|0);
 $k=$79;
 label=14;break;
 case 19: 
 $ssize=0;
 $k=0;
 label=20;break;
 case 20: 
 var $82=$k;
 var $83=$l;
 var $84=($82|0)<($83|0);
 if($84){label=21;break;}else{label=32;break;}
 case 21: 
 var $86=$2;
 var $87=$start;
 var $88=(($86+$87)|0);
 var $89=$k;
 var $90=($89<<4);
 var $91=(($88+$90)|0);
 var $92=(($91+14)|0);
 var $93=_readmem16b($92);
 var $94=($93&65535);
 var $95=($94<<1);
 $o=$95;
 var $96=$2;
 var $97=$start;
 var $98=(($96+$97)|0);
 var $99=$k;
 var $100=($99<<4);
 var $101=(($98+$100)|0);
 var $102=(($101+20)|0);
 var $103=_readmem16b($102);
 var $104=($103&65535);
 var $105=($104<<1);
 $m=$105;
 var $106=$2;
 var $107=$start;
 var $108=(($106+$107)|0);
 var $109=$k;
 var $110=($109<<4);
 var $111=(($108+$110)|0);
 var $112=(($111+22)|0);
 var $113=_readmem16b($112);
 var $114=($113&65535);
 var $115=($114<<1);
 $n=$115;
 var $116=$o;
 var $117=($116|0)>65535;
 if($117){label=24;break;}else{label=22;break;}
 case 22: 
 var $119=$m;
 var $120=($119|0)>65535;
 if($120){label=24;break;}else{label=23;break;}
 case 23: 
 var $122=$n;
 var $123=($122|0)>65535;
 if($123){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=68;break;
 case 25: 
 var $126=$m;
 var $127=$n;
 var $128=((($126)+($127))|0);
 var $129=$o;
 var $130=((($129)+(2))|0);
 var $131=($128|0)>($130|0);
 if($131){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=68;break;
 case 27: 
 var $134=$n;
 var $135=($134|0)!=0;
 if($135){label=28;break;}else{label=30;break;}
 case 28: 
 var $137=$m;
 var $138=($137|0)==0;
 if($138){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=68;break;
 case 30: 
 var $141=$o;
 var $142=$ssize;
 var $143=((($142)+($141))|0);
 $ssize=$143;
 label=31;break;
 case 31: 
 var $145=$k;
 var $146=((($145)+(1))|0);
 $k=$146;
 label=20;break;
 case 32: 
 var $148=$ssize;
 var $149=($148|0)<=4;
 if($149){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=68;break;
 case 34: 
 var $152=$l;
 var $153=($152<<4);
 var $154=((($153)+(8))|0);
 var $155=((($154)+(4))|0);
 $l=$155;
 $n=0;
 $k=0;
 label=35;break;
 case 35: 
 var $157=$k;
 var $158=$j;
 var $159=($157|0)<($158|0);
 if($159){label=36;break;}else{label=42;break;}
 case 36: 
 var $161=$2;
 var $162=$start;
 var $163=(($161+$162)|0);
 var $164=$l;
 var $165=(($163+$164)|0);
 var $166=$k;
 var $167=(($165+$166)|0);
 var $168=_readmem16b($167);
 var $169=($168&65535);
 $m=$169;
 var $170=$m;
 var $171=$170&7;
 var $172=($171|0)!=0;
 if($172){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=68;break;
 case 38: 
 var $175=$m;
 var $176=$n;
 var $177=($175|0)>($176|0);
 if($177){label=39;break;}else{label=40;break;}
 case 39: 
 var $179=$m;
 $n=$179;
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $182=$k;
 var $183=((($182)+(2))|0);
 $k=$183;
 label=35;break;
 case 42: 
 var $185=$j;
 var $186=$n;
 var $187=((($185)+($186))|0);
 var $188=((($187)+(8))|0);
 var $189=$l;
 var $190=((($189)+($188))|0);
 $l=$190;
 var $191=$2;
 var $192=$start;
 var $193=(($191+$192)|0);
 var $194=(($193+6)|0);
 var $195=_readmem16b($194);
 var $196=($195&65535);
 $k=$196;
 var $197=$k;
 var $198=($197|0)<=63;
 if($198){label=43;break;}else{label=44;break;}
 case 43: 
 $1=-1;
 label=68;break;
 case 44: 
 label=45;break;
 case 45: 
 var $202=$4;
 var $203=$start;
 var $204=$l;
 var $205=((($203)+($204))|0);
 var $206=$k;
 var $207=((($205)+($206))|0);
 var $208=($202|0)<($207|0);
 if($208){label=46;break;}else{label=47;break;}
 case 46: 
 var $210=$start;
 var $211=$l;
 var $212=((($210)+($211))|0);
 var $213=$k;
 var $214=((($212)+($213))|0);
 var $215=$4;
 var $216=((($214)-($215))|0);
 $1=$216;
 label=68;break;
 case 47: 
 label=48;break;
 case 48: 
 var $219=$start;
 var $220=$2;
 var $221=(($220+$219)|0);
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223<<4;
 var $225=$224&240;
 var $226=$start;
 var $227=((($226)+(1))|0);
 var $228=$2;
 var $229=(($228+$227)|0);
 var $230=HEAP8[($229)];
 var $231=($230&255);
 var $232=$231>>4;
 var $233=$232&15;
 var $234=$225|$233;
 $j=$234;
 $m=0;
 label=49;break;
 case 49: 
 var $236=$m;
 var $237=$k;
 var $238=($236|0)<($237|0);
 if($238){label=50;break;}else{label=67;break;}
 case 50: 
 var $240=$start;
 var $241=$l;
 var $242=((($240)+($241))|0);
 var $243=$m;
 var $244=((($242)+($243))|0);
 var $245=$2;
 var $246=(($245+$244)|0);
 var $247=HEAP8[($246)];
 var $248=($247&255);
 var $249=$248&128;
 var $250=($249|0)!=0;
 if($250){label=51;break;}else{label=52;break;}
 case 51: 
 label=66;break;
 case 52: 
 var $253=$start;
 var $254=$l;
 var $255=((($253)+($254))|0);
 var $256=$m;
 var $257=((($255)+($256))|0);
 var $258=$2;
 var $259=(($258+$257)|0);
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=($261|0)>73;
 if($262){label=54;break;}else{label=53;break;}
 case 53: 
 var $264=$start;
 var $265=$l;
 var $266=((($264)+($265))|0);
 var $267=$m;
 var $268=((($266)+($267))|0);
 var $269=((($268)+(1))|0);
 var $270=$2;
 var $271=(($270+$269)|0);
 var $272=HEAP8[($271)];
 var $273=($272&255);
 var $274=$273&15;
 var $275=($274|0)==10;
 if($275){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=68;break;
 case 55: 
 var $278=$start;
 var $279=$l;
 var $280=((($278)+($279))|0);
 var $281=$m;
 var $282=((($280)+($281))|0);
 var $283=((($282)+(1))|0);
 var $284=$2;
 var $285=(($284+$283)|0);
 var $286=HEAP8[($285)];
 var $287=($286&255);
 var $288=$287&15;
 var $289=($288|0)==13;
 if($289){label=56;break;}else{label=58;break;}
 case 56: 
 var $291=$start;
 var $292=$l;
 var $293=((($291)+($292))|0);
 var $294=$m;
 var $295=((($293)+($294))|0);
 var $296=((($295)+(2))|0);
 var $297=$2;
 var $298=(($297+$296)|0);
 var $299=HEAP8[($298)];
 var $300=($299&255);
 var $301=($300|0)>64;
 if($301){label=57;break;}else{label=58;break;}
 case 57: 
 $1=-1;
 label=68;break;
 case 58: 
 var $304=$start;
 var $305=$l;
 var $306=((($304)+($305))|0);
 var $307=$m;
 var $308=((($306)+($307))|0);
 var $309=$2;
 var $310=(($309+$308)|0);
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=$312<<4;
 var $314=$313&16;
 var $315=$start;
 var $316=$l;
 var $317=((($315)+($316))|0);
 var $318=$m;
 var $319=((($317)+($318))|0);
 var $320=((($319)+(1))|0);
 var $321=$2;
 var $322=(($321+$320)|0);
 var $323=HEAP8[($322)];
 var $324=($323&255);
 var $325=$324>>4;
 var $326=$325&15;
 var $327=$314|$326;
 var $328=$j;
 var $329=($327|0)>($328|0);
 if($329){label=59;break;}else{label=60;break;}
 case 59: 
 $1=-1;
 label=68;break;
 case 60: 
 var $332=$start;
 var $333=$l;
 var $334=((($332)+($333))|0);
 var $335=$m;
 var $336=((($334)+($335))|0);
 var $337=$2;
 var $338=(($337+$336)|0);
 var $339=HEAP8[($338)];
 var $340=($339&255);
 var $341=($340|0)==0;
 if($341){label=61;break;}else{label=65;break;}
 case 61: 
 var $343=$start;
 var $344=$l;
 var $345=((($343)+($344))|0);
 var $346=$m;
 var $347=((($345)+($346))|0);
 var $348=((($347)+(1))|0);
 var $349=$2;
 var $350=(($349+$348)|0);
 var $351=HEAP8[($350)];
 var $352=($351&255);
 var $353=($352|0)==0;
 if($353){label=62;break;}else{label=65;break;}
 case 62: 
 var $355=$start;
 var $356=$l;
 var $357=((($355)+($356))|0);
 var $358=$m;
 var $359=((($357)+($358))|0);
 var $360=((($359)+(2))|0);
 var $361=$2;
 var $362=(($361+$360)|0);
 var $363=HEAP8[($362)];
 var $364=($363&255);
 var $365=($364|0)==0;
 if($365){label=63;break;}else{label=65;break;}
 case 63: 
 var $367=$m;
 var $368=$k;
 var $369=((($368)-(3))|0);
 var $370=($367|0)<($369|0);
 if($370){label=64;break;}else{label=65;break;}
 case 64: 
 $1=-1;
 label=68;break;
 case 65: 
 var $373=$m;
 var $374=((($373)+(2))|0);
 $m=$374;
 label=66;break;
 case 66: 
 var $376=$m;
 var $377=((($376)+(1))|0);
 $m=$377;
 label=49;break;
 case 67: 
 var $379=$3;
 _pw_read_title(0,$379,0);
 $1=0;
 label=68;break;
 case 68: 
 var $381=$1;
 STACKTOP=sp;return $381;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_np3($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp=sp;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $ptable=(sp)+(1024);
 var $len;
 var $nins;
 var $npat;
 var $max_addr;
 var $smp_addr;
 var $size;
 var $ssize;
 var $tsize;
 var $trk_addr=(sp)+(1152);
 var $i;
 var $j;
 var $k;
 var $trk_start;
 var $x;
 $1=$in;
 $2=$out;
 $smp_addr=0;
 $ssize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$trk_addr;
 _memset($4, 0, 2048)|0;
 var $5=$1;
 var $6=_read8($5);
 $c1=$6;
 var $7=$1;
 var $8=_read8($7);
 $c2=$8;
 var $9=$c1;
 var $10=($9&255);
 var $11=$10<<4;
 var $12=$11&240;
 var $13=$c2;
 var $14=($13&255);
 var $15=$14>>4;
 var $16=$15&15;
 var $17=$12|$16;
 $nins=$17;
 var $18=$2;
 var $19=_pw_write_zero($18,20);
 var $20=$1;
 var $21=_read8($20);
 var $22=$1;
 var $23=_read8($22);
 var $24=($23&255);
 var $25=(((($24|0))/(2))&-1);
 $len=$25;
 var $26=$1;
 var $27=_read16b($26);
 var $28=$1;
 var $29=_read16b($28);
 var $30=($29&65535);
 $tsize=$30;
 $i=0;
 label=2;break;
 case 2: 
 var $32=$i;
 var $33=$nins;
 var $34=($32|0)<($33|0);
 if($34){label=3;break;}else{label=5;break;}
 case 3: 
 var $36=(($tmp)|0);
 var $37=$1;
 var $38=_fread($36,1,16,$37);
 var $39=$2;
 var $40=_pw_write_zero($39,22);
 var $41=$2;
 var $42=(($tmp)|0);
 var $43=(($42+6)|0);
 var $44=_readmem16b($43);
 var $45=($44&65535);
 $size=$45;
 var $46=(($45)&65535);
 _write16b($41,$46);
 var $47=$size;
 var $48=($47<<1);
 var $49=$ssize;
 var $50=((($49)+($48))|0);
 $ssize=$50;
 var $51=$2;
 var $52=(($tmp)|0);
 var $53=HEAP8[($52)];
 _write8($51,$53);
 var $54=$2;
 var $55=(($tmp+1)|0);
 var $56=HEAP8[($55)];
 _write8($54,$56);
 var $57=(($tmp)|0);
 var $58=(($57+14)|0);
 var $59=$2;
 var $60=_fwrite($58,2,1,$59);
 var $61=(($tmp)|0);
 var $62=(($61+12)|0);
 var $63=$2;
 var $64=_fwrite($62,2,1,$63);
 label=4;break;
 case 4: 
 var $66=$i;
 var $67=((($66)+(1))|0);
 $i=$67;
 label=2;break;
 case 5: 
 var $69=$tmp;
 _memset($69, 0, 30)|0;
 var $70=(($tmp+29)|0);
 HEAP8[($70)]=1;
 label=6;break;
 case 6: 
 var $72=$i;
 var $73=($72|0)<31;
 if($73){label=7;break;}else{label=9;break;}
 case 7: 
 var $75=(($tmp)|0);
 var $76=$2;
 var $77=_fwrite($75,30,1,$76);
 label=8;break;
 case 8: 
 var $79=$i;
 var $80=((($79)+(1))|0);
 $i=$80;
 label=6;break;
 case 9: 
 var $82=$2;
 var $83=$len;
 var $84=(($83)&255);
 _write8($82,$84);
 var $85=$2;
 _write8($85,127);
 var $86=$1;
 var $87=_read16b($86);
 var $88=$1;
 var $89=_read16b($88);
 $i=0;
 $npat=0;
 label=10;break;
 case 10: 
 var $91=$i;
 var $92=$len;
 var $93=($91|0)<($92|0);
 if($93){label=11;break;}else{label=15;break;}
 case 11: 
 var $95=$1;
 var $96=_read16b($95);
 var $97=($96&65535);
 var $98=(((($97|0))/(8))&-1);
 var $99=(($98)&255);
 var $100=$i;
 var $101=(($ptable+$100)|0);
 HEAP8[($101)]=$99;
 var $102=$i;
 var $103=(($ptable+$102)|0);
 var $104=HEAP8[($103)];
 var $105=($104&255);
 var $106=$npat;
 var $107=($105|0)>($106|0);
 if($107){label=12;break;}else{label=13;break;}
 case 12: 
 var $109=$i;
 var $110=(($ptable+$109)|0);
 var $111=HEAP8[($110)];
 var $112=($111&255);
 $npat=$112;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $115=$i;
 var $116=((($115)+(1))|0);
 $i=$116;
 label=10;break;
 case 15: 
 var $118=$npat;
 var $119=((($118)+(1))|0);
 $npat=$119;
 var $120=(($ptable)|0);
 var $121=$2;
 var $122=_fwrite($120,128,1,$121);
 var $123=$2;
 _write32b($123,1294879534);
 $i=0;
 $max_addr=0;
 label=16;break;
 case 16: 
 var $125=$i;
 var $126=$npat;
 var $127=($125|0)<($126|0);
 if($127){label=17;break;}else{label=27;break;}
 case 17: 
 var $129=$1;
 var $130=_read16b($129);
 var $131=($130&65535);
 var $132=$i;
 var $133=(($trk_addr+($132<<4))|0);
 var $134=(($133)|0);
 HEAP32[(($134)>>2)]=$131;
 var $135=$max_addr;
 var $136=($131|0)>($135|0);
 if($136){label=18;break;}else{label=19;break;}
 case 18: 
 var $138=$i;
 var $139=(($trk_addr+($138<<4))|0);
 var $140=(($139)|0);
 var $141=HEAP32[(($140)>>2)];
 $max_addr=$141;
 label=19;break;
 case 19: 
 var $143=$1;
 var $144=_read16b($143);
 var $145=($144&65535);
 var $146=$i;
 var $147=(($trk_addr+($146<<4))|0);
 var $148=(($147+4)|0);
 HEAP32[(($148)>>2)]=$145;
 var $149=$max_addr;
 var $150=($145|0)>($149|0);
 if($150){label=20;break;}else{label=21;break;}
 case 20: 
 var $152=$i;
 var $153=(($trk_addr+($152<<4))|0);
 var $154=(($153+4)|0);
 var $155=HEAP32[(($154)>>2)];
 $max_addr=$155;
 label=21;break;
 case 21: 
 var $157=$1;
 var $158=_read16b($157);
 var $159=($158&65535);
 var $160=$i;
 var $161=(($trk_addr+($160<<4))|0);
 var $162=(($161+8)|0);
 HEAP32[(($162)>>2)]=$159;
 var $163=$max_addr;
 var $164=($159|0)>($163|0);
 if($164){label=22;break;}else{label=23;break;}
 case 22: 
 var $166=$i;
 var $167=(($trk_addr+($166<<4))|0);
 var $168=(($167+8)|0);
 var $169=HEAP32[(($168)>>2)];
 $max_addr=$169;
 label=23;break;
 case 23: 
 var $171=$1;
 var $172=_read16b($171);
 var $173=($172&65535);
 var $174=$i;
 var $175=(($trk_addr+($174<<4))|0);
 var $176=(($175+12)|0);
 HEAP32[(($176)>>2)]=$173;
 var $177=$max_addr;
 var $178=($173|0)>($177|0);
 if($178){label=24;break;}else{label=25;break;}
 case 24: 
 var $180=$i;
 var $181=(($trk_addr+($180<<4))|0);
 var $182=(($181+12)|0);
 var $183=HEAP32[(($182)>>2)];
 $max_addr=$183;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $186=$i;
 var $187=((($186)+(1))|0);
 $i=$187;
 label=16;break;
 case 27: 
 var $189=$1;
 var $190=_ftell($189);
 $trk_start=$190;
 $i=0;
 label=28;break;
 case 28: 
 var $192=$i;
 var $193=$npat;
 var $194=($192|0)<($193|0);
 if($194){label=29;break;}else{label=54;break;}
 case 29: 
 var $196=$tmp;
 _memset($196, 0, 1024)|0;
 $j=0;
 label=30;break;
 case 30: 
 var $198=$j;
 var $199=($198|0)<4;
 if($199){label=31;break;}else{label=52;break;}
 case 31: 
 var $201=$1;
 var $202=$trk_start;
 var $203=$j;
 var $204=(((3)-($203))|0);
 var $205=$i;
 var $206=(($trk_addr+($205<<4))|0);
 var $207=(($206+($204<<2))|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=((($202)+($208))|0);
 var $210=_fseek($201,$209,0);
 $k=0;
 label=32;break;
 case 32: 
 var $212=$k;
 var $213=($212|0)<64;
 if($213){label=33;break;}else{label=48;break;}
 case 33: 
 var $215=$k;
 var $216=($215<<4);
 var $217=$j;
 var $218=($217<<2);
 var $219=((($216)+($218))|0);
 $x=$219;
 var $220=$1;
 var $221=_read8($220);
 $c1=$221;
 var $222=($221&255);
 var $223=($222|0)>=128;
 if($223){label=34;break;}else{label=35;break;}
 case 34: 
 var $225=$c1;
 var $226=($225&255);
 var $227=(((256)-($226))|0);
 var $228=((($227)-(1))|0);
 var $229=$k;
 var $230=((($229)+($228))|0);
 $k=$230;
 label=47;break;
 case 35: 
 var $232=$1;
 var $233=_read8($232);
 $c2=$233;
 var $234=$1;
 var $235=_read8($234);
 $c3=$235;
 var $236=$c1;
 var $237=($236&255);
 var $238=$237&254;
 var $239=(((($238|0))/(2))&-1);
 var $240=(($239)&255);
 $c4=$240;
 var $241=$c1;
 var $242=($241&255);
 var $243=$242<<4;
 var $244=$243&16;
 var $245=$c4;
 var $246=($245&255);
 var $247=((4504+($246<<1))|0);
 var $248=(($247)|0);
 var $249=HEAP8[($248)];
 var $250=($249&255);
 var $251=$244|$250;
 var $252=(($251)&255);
 var $253=$x;
 var $254=(($tmp+$253)|0);
 HEAP8[($254)]=$252;
 var $255=$c4;
 var $256=($255&255);
 var $257=((4504+($256<<1))|0);
 var $258=(($257+1)|0);
 var $259=HEAP8[($258)];
 var $260=$x;
 var $261=((($260)+(1))|0);
 var $262=(($tmp+$261)|0);
 HEAP8[($262)]=$259;
 var $263=$c2;
 var $264=($263&255);
 var $265=$264&15;
 switch(($265|0)){case 8:{ label=36;break;}case 7:{ label=37;break;}case 6:case 5:{ label=38;break;}case 14:{ label=42;break;}case 11:{ label=43;break;}default:{label=44;break;}}break;
 case 36: 
 var $267=$c2;
 var $268=($267&255);
 var $269=$268&240;
 var $270=(($269)&255);
 $c2=$270;
 label=44;break;
 case 37: 
 var $272=$c2;
 var $273=($272&255);
 var $274=$273&240;
 var $275=((($274)+(10))|0);
 var $276=(($275)&255);
 $c2=$276;
 label=38;break;
 case 38: 
 var $278=$c3;
 var $279=($278&255);
 var $280=($279|0)>128;
 if($280){label=39;break;}else{label=40;break;}
 case 39: 
 var $282=$c3;
 var $283=($282&255);
 var $284=(((256)-($283))|0);
 var $291=$284;label=41;break;
 case 40: 
 var $286=$c3;
 var $287=($286&255);
 var $288=$287<<4;
 var $289=$288&240;
 var $291=$289;label=41;break;
 case 41: 
 var $291;
 var $292=(($291)&255);
 $c3=$292;
 label=44;break;
 case 42: 
 $c3=1;
 label=44;break;
 case 43: 
 var $295=$c3;
 var $296=($295&255);
 var $297=((($296)+(4))|0);
 var $298=(((($297|0))/(2))&-1);
 var $299=(($298)&255);
 $c3=$299;
 label=44;break;
 case 44: 
 var $301=$c2;
 var $302=$x;
 var $303=((($302)+(2))|0);
 var $304=(($tmp+$303)|0);
 HEAP8[($304)]=$301;
 var $305=$c3;
 var $306=$x;
 var $307=((($306)+(3))|0);
 var $308=(($tmp+$307)|0);
 HEAP8[($308)]=$305;
 var $309=$c2;
 var $310=($309&255);
 var $311=$310&15;
 var $312=($311|0)==13;
 if($312){label=45;break;}else{label=46;break;}
 case 45: 
 label=48;break;
 case 46: 
 label=47;break;
 case 47: 
 var $316=$k;
 var $317=((($316)+(1))|0);
 $k=$317;
 label=32;break;
 case 48: 
 var $319=$1;
 var $320=_ftell($319);
 var $321=$smp_addr;
 var $322=($320|0)>($321|0);
 if($322){label=49;break;}else{label=50;break;}
 case 49: 
 var $324=$1;
 var $325=_ftell($324);
 $smp_addr=$325;
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $328=$j;
 var $329=((($328)+(1))|0);
 $j=$329;
 label=30;break;
 case 52: 
 var $331=(($tmp)|0);
 var $332=$2;
 var $333=_fwrite($331,1024,1,$332);
 label=53;break;
 case 53: 
 var $335=$i;
 var $336=((($335)+(1))|0);
 $i=$336;
 label=28;break;
 case 54: 
 var $338=$smp_addr;
 var $339=$338&1;
 var $340=($339|0)!=0;
 if($340){label=55;break;}else{label=56;break;}
 case 55: 
 var $342=$smp_addr;
 var $343=((($342)+(1))|0);
 $smp_addr=$343;
 label=56;break;
 case 56: 
 var $345=$1;
 var $346=$smp_addr;
 var $347=_fseek($345,$346,0);
 var $348=$2;
 var $349=$1;
 var $350=$ssize;
 var $351=_pw_move_data($348,$349,$350);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_p4x($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $id;
 $2=$data;
 $3=$t;
 $4=$s;
 var $5=$2;
 var $6=_readmem32b($5);
 $id=$6;
 var $7=$id;
 var $8=($7|0)!=1345597505;
 if($8){label=2;break;}else{label=5;break;}
 case 2: 
 var $10=$id;
 var $11=($10|0)!=1345597506;
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$id;
 var $14=($13|0)!=1345597761;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=6;break;
 case 5: 
 var $17=$3;
 _pw_read_title(0,$17,0);
 $1=0;
 label=6;break;
 case 6: 
 var $19=$1;
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_p4x($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+133432)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $c5;
 var $tmp=sp;
 var $len;
 var $npat;
 var $nsmp;
 var $sample;
 var $mynote;
 var $note=(sp)+(1024);
 var $tr=(sp)+(1032);
 var $track_addr=(sp)+(132104);
 var $trkdat_ofs;
 var $trktab_ofs;
 var $smp_ofs;
 var $ssize;
 var $SampleAddress=(sp)+(133128);
 var $SampleSize=(sp)+(133256);
 var $i;
 var $j;
 var $k;
 var $l;
 var $a;
 var $b;
 var $c;
 var $ins=(sp)+(133384);
 var $id;
 var $y;
 var $x;
 var $x1;
 var $y2;
 $1=$in;
 $2=$out;
 $ssize=0;
 var $3=$track_addr;
 _memset($3, 0, 1024)|0;
 var $4=$tr;
 _memset($4, 0, 131072)|0;
 var $5=$SampleAddress;
 _memset($5, 0, 124)|0;
 var $6=$SampleSize;
 _memset($6, 0, 124)|0;
 var $7=$1;
 var $8=_read32b($7);
 $id=$8;
 var $9=$1;
 var $10=_read8($9);
 $npat=$10;
 var $11=$1;
 var $12=_read8($11);
 $len=$12;
 var $13=$1;
 var $14=_read8($13);
 $nsmp=$14;
 var $15=$1;
 var $16=_read8($15);
 var $17=$1;
 var $18=_read32b($17);
 $trkdat_ofs=$18;
 var $19=$1;
 var $20=_read32b($19);
 $trktab_ofs=$20;
 var $21=$1;
 var $22=_read32b($21);
 $smp_ofs=$22;
 var $23=$2;
 var $24=_pw_write_zero($23,20);
 $i=0;
 label=2;break;
 case 2: 
 var $26=$i;
 var $27=$nsmp;
 var $28=($27&255);
 var $29=($26|0)<($28|0);
 if($29){label=3;break;}else{label=10;break;}
 case 3: 
 var $31=$1;
 var $32=_read32b($31);
 var $33=(($ins+24)|0);
 HEAP32[(($33)>>2)]=$32;
 var $34=(($ins+24)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$i;
 var $37=(($SampleAddress+($36<<2))|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=$1;
 var $39=_read16b($38);
 var $40=(($ins+28)|0);
 HEAP16[(($40)>>1)]=$39;
 var $41=(($ins+28)|0);
 var $42=HEAP16[(($41)>>1)];
 var $43=($42&65535);
 var $44=($43<<1);
 var $45=$i;
 var $46=(($SampleSize+($45<<2))|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$i;
 var $48=(($SampleSize+($47<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$ssize;
 var $51=((($50)+($49))|0);
 $ssize=$51;
 var $52=$1;
 var $53=_read32b($52);
 var $54=(($ins+32)|0);
 HEAP32[(($54)>>2)]=$53;
 var $55=$1;
 var $56=_read16b($55);
 var $57=(($ins+36)|0);
 HEAP16[(($57)>>1)]=$56;
 var $58=(($ins+38)|0);
 HEAP16[(($58)>>1)]=0;
 var $59=$id;
 var $60=($59|0)==1345597505;
 if($60){label=5;break;}else{label=4;break;}
 case 4: 
 var $62=$id;
 var $63=($62|0)==1345597506;
 if($63){label=5;break;}else{label=6;break;}
 case 5: 
 var $65=$1;
 var $66=_read16b($65);
 var $67=(($ins+38)|0);
 HEAP16[(($67)>>1)]=$66;
 label=6;break;
 case 6: 
 var $69=$1;
 var $70=_read8($69);
 var $71=$1;
 var $72=_read8($71);
 var $73=(($ins+40)|0);
 HEAP8[($73)]=$72;
 var $74=$id;
 var $75=($74|0)==1345597761;
 if($75){label=7;break;}else{label=8;break;}
 case 7: 
 var $77=$1;
 var $78=_read16b($77);
 var $79=(($ins+38)|0);
 HEAP16[(($79)>>1)]=$78;
 label=8;break;
 case 8: 
 var $81=$2;
 var $82=_pw_write_zero($81,22);
 var $83=$2;
 var $84=(($ins+28)|0);
 var $85=HEAP16[(($84)>>1)];
 _write16b($83,$85);
 var $86=$2;
 var $87=(($ins+38)|0);
 var $88=HEAP16[(($87)>>1)];
 var $89=(($88<<16)>>16);
 var $90=(((($89|0))/(74))&-1);
 var $91=(($90)&255);
 _write8($86,$91);
 var $92=$2;
 var $93=(($ins+40)|0);
 var $94=HEAP8[($93)];
 _write8($92,$94);
 var $95=$2;
 var $96=(($ins+32)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($ins+24)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=((($97)-($99))|0);
 var $101=(((($100|0))/(2))&-1);
 var $102=(($101)&65535);
 _write16b($95,$102);
 var $103=$2;
 var $104=(($ins+36)|0);
 var $105=HEAP16[(($104)>>1)];
 _write16b($103,$105);
 label=9;break;
 case 9: 
 var $107=$i;
 var $108=((($107)+(1))|0);
 $i=$108;
 label=2;break;
 case 10: 
 var $110=$tmp;
 _memset($110, 0, 30)|0;
 var $111=(($tmp+29)|0);
 HEAP8[($111)]=1;
 label=11;break;
 case 11: 
 var $113=$i;
 var $114=($113|0)<31;
 if($114){label=12;break;}else{label=14;break;}
 case 12: 
 var $116=(($tmp)|0);
 var $117=$2;
 var $118=_fwrite($116,30,1,$117);
 label=13;break;
 case 13: 
 var $120=$i;
 var $121=((($120)+(1))|0);
 $i=$121;
 label=11;break;
 case 14: 
 var $123=$2;
 var $124=$len;
 _write8($123,$124);
 var $125=$2;
 _write8($125,127);
 var $126=$1;
 var $127=$trktab_ofs;
 var $128=((($127)+(4))|0);
 var $129=_fseek($126,$128,0);
 $c1=0;
 label=15;break;
 case 15: 
 var $131=$c1;
 var $132=($131&255);
 var $133=$len;
 var $134=($133&255);
 var $135=($132|0)<($134|0);
 if($135){label=16;break;}else{label=18;break;}
 case 16: 
 var $137=$2;
 var $138=$c1;
 _write8($137,$138);
 label=17;break;
 case 17: 
 var $140=$c1;
 var $141=((($140)+(1))&255);
 $c1=$141;
 label=15;break;
 case 18: 
 label=19;break;
 case 19: 
 var $144=$c1;
 var $145=($144&255);
 var $146=($145|0)<128;
 if($146){label=20;break;}else{label=22;break;}
 case 20: 
 var $148=$2;
 _write8($148,0);
 label=21;break;
 case 21: 
 var $150=$c1;
 var $151=((($150)+(1))&255);
 $c1=$151;
 label=19;break;
 case 22: 
 var $153=$2;
 _write32b($153,1294879534);
 $i=0;
 label=23;break;
 case 23: 
 var $155=$i;
 var $156=$len;
 var $157=($156&255);
 var $158=($155|0)<($157|0);
 if($158){label=24;break;}else{label=30;break;}
 case 24: 
 $j=0;
 label=25;break;
 case 25: 
 var $161=$j;
 var $162=($161|0)<4;
 if($162){label=26;break;}else{label=28;break;}
 case 26: 
 var $164=$1;
 var $165=_read16b($164);
 var $166=($165&65535);
 var $167=$trkdat_ofs;
 var $168=((($166)+($167))|0);
 var $169=((($168)+(4))|0);
 var $170=(($169)&65535);
 var $171=$j;
 var $172=$i;
 var $173=(($track_addr+($172<<3))|0);
 var $174=(($173+($171<<1))|0);
 HEAP16[(($174)>>1)]=$170;
 label=27;break;
 case 27: 
 var $176=$j;
 var $177=((($176)+(1))|0);
 $j=$177;
 label=25;break;
 case 28: 
 label=29;break;
 case 29: 
 var $180=$i;
 var $181=((($180)+(1))|0);
 $i=$181;
 label=23;break;
 case 30: 
 var $183=$1;
 var $184=$trkdat_ofs;
 var $185=((($184)+(4))|0);
 var $186=_fseek($183,$185,0);
 $i=0;
 label=31;break;
 case 31: 
 var $188=$i;
 var $189=$len;
 var $190=($189&255);
 var $191=($188|0)<($190|0);
 if($191){label=32;break;}else{label=78;break;}
 case 32: 
 $j=0;
 label=33;break;
 case 33: 
 var $194=$j;
 var $195=($194|0)<4;
 if($195){label=34;break;}else{label=76;break;}
 case 34: 
 var $197=$i;
 var $198=($197<<2);
 var $199=$j;
 var $200=((($198)+($199))|0);
 $x=$200;
 var $201=$1;
 var $202=$j;
 var $203=$i;
 var $204=(($track_addr+($203<<3))|0);
 var $205=(($204+($202<<1))|0);
 var $206=HEAP16[(($205)>>1)];
 var $207=(($206<<16)>>16);
 var $208=_fseek($201,$207,0);
 $k=0;
 label=35;break;
 case 35: 
 var $210=$k;
 var $211=($210|0)<64;
 if($211){label=36;break;}else{label=74;break;}
 case 36: 
 var $213=$1;
 var $214=_read8($213);
 $c1=$214;
 var $215=$1;
 var $216=_read8($215);
 $c2=$216;
 var $217=$1;
 var $218=_read8($217);
 $c3=$218;
 var $219=$1;
 var $220=_read8($219);
 $c4=$220;
 var $221=$c1;
 var $222=($221&255);
 var $223=($222|0)!=128;
 if($223){label=37;break;}else{label=53;break;}
 case 37: 
 var $225=$c1;
 var $226=($225&255);
 var $227=$226<<4;
 var $228=$227&16;
 var $229=$c2;
 var $230=($229&255);
 var $231=$230>>4;
 var $232=$231&15;
 var $233=$228|$232;
 var $234=(($233)&255);
 $sample=$234;
 var $235=$note;
 HEAP8[($235)]=0; HEAP8[((($235)+(1))|0)]=0;
 var $236=$c1;
 var $237=($236&255);
 var $238=$237&127;
 var $239=(($238)&255);
 $mynote=$239;
 var $240=$mynote;
 var $241=($240&255);
 var $242=(((($241|0))/(2))&-1);
 var $243=((4504+($242<<1))|0);
 var $244=(($243)|0);
 var $245=HEAP8[($244)];
 var $246=(($note)|0);
 HEAP8[($246)]=$245;
 var $247=$mynote;
 var $248=($247&255);
 var $249=(((($248|0))/(2))&-1);
 var $250=((4504+($249<<1))|0);
 var $251=(($250+1)|0);
 var $252=HEAP8[($251)];
 var $253=(($note+1)|0);
 HEAP8[($253)]=$252;
 var $254=$c2;
 var $255=($254&255);
 var $256=$255&15;
 if(($256|0)==8){ label=38;break;}else if(($256|0)==5|($256|0)==6|($256|0)==10){ label=39;break;}else{label=42;break;}
 case 38: 
 var $258=$c2;
 var $259=($258&255);
 var $260=((($259)-(8))|0);
 var $261=(($260)&255);
 $c2=$261;
 label=43;break;
 case 39: 
 var $263=$c3;
 var $264=($263&255);
 var $265=($264|0)>=128;
 if($265){label=40;break;}else{label=41;break;}
 case 40: 
 var $267=$c3;
 var $268=($267&255);
 var $269=$268<<4;
 var $270=$269&240;
 var $271=(($270)&255);
 $c3=$271;
 label=41;break;
 case 41: 
 label=43;break;
 case 42: 
 label=43;break;
 case 43: 
 var $275=$k;
 var $276=($275<<2);
 $y=$276;
 var $277=$sample;
 var $278=($277&255);
 var $279=$278&240;
 var $280=(($note)|0);
 var $281=HEAP8[($280)];
 var $282=($281&255);
 var $283=$282&15;
 var $284=$279|$283;
 var $285=(($284)&255);
 var $286=$y;
 var $287=$x;
 var $288=(($tr+($287<<8))|0);
 var $289=(($288+$286)|0);
 HEAP8[($289)]=$285;
 var $290=(($note+1)|0);
 var $291=HEAP8[($290)];
 var $292=$y;
 var $293=((($292)+(1))|0);
 var $294=$x;
 var $295=(($tr+($294<<8))|0);
 var $296=(($295+$293)|0);
 HEAP8[($296)]=$291;
 var $297=$c2;
 var $298=$y;
 var $299=((($298)+(2))|0);
 var $300=$x;
 var $301=(($tr+($300<<8))|0);
 var $302=(($301+$299)|0);
 HEAP8[($302)]=$297;
 var $303=$c3;
 var $304=$y;
 var $305=((($304)+(3))|0);
 var $306=$x;
 var $307=(($tr+($306<<8))|0);
 var $308=(($307+$305)|0);
 HEAP8[($308)]=$303;
 var $309=$c4;
 var $310=($309&255);
 var $311=($310|0)>0;
 if($311){label=44;break;}else{label=46;break;}
 case 44: 
 var $313=$c4;
 var $314=($313&255);
 var $315=($314|0)<128;
 if($315){label=45;break;}else{label=46;break;}
 case 45: 
 var $317=$c4;
 var $318=($317&255);
 var $319=$k;
 var $320=((($319)+($318))|0);
 $k=$320;
 label=46;break;
 case 46: 
 var $322=$c4;
 var $323=($322&255);
 var $324=($323|0)>127;
 if($324){label=47;break;}else{label=52;break;}
 case 47: 
 var $326=$k;
 var $327=((($326)+(1))|0);
 $k=$327;
 $l=256;
 label=48;break;
 case 48: 
 var $329=$l;
 var $330=$c4;
 var $331=($330&255);
 var $332=($329|0)>($331|0);
 if($332){label=49;break;}else{label=51;break;}
 case 49: 
 var $334=$k;
 var $335=($334<<2);
 $y=$335;
 var $336=$sample;
 var $337=($336&255);
 var $338=$337&240;
 var $339=(($note)|0);
 var $340=HEAP8[($339)];
 var $341=($340&255);
 var $342=$341&15;
 var $343=$338|$342;
 var $344=(($343)&255);
 var $345=$y;
 var $346=$x;
 var $347=(($tr+($346<<8))|0);
 var $348=(($347+$345)|0);
 HEAP8[($348)]=$344;
 var $349=(($note+1)|0);
 var $350=HEAP8[($349)];
 var $351=$y;
 var $352=((($351)+(1))|0);
 var $353=$x;
 var $354=(($tr+($353<<8))|0);
 var $355=(($354+$352)|0);
 HEAP8[($355)]=$350;
 var $356=$c2;
 var $357=$y;
 var $358=((($357)+(2))|0);
 var $359=$x;
 var $360=(($tr+($359<<8))|0);
 var $361=(($360+$358)|0);
 HEAP8[($361)]=$356;
 var $362=$c3;
 var $363=$y;
 var $364=((($363)+(3))|0);
 var $365=$x;
 var $366=(($tr+($365<<8))|0);
 var $367=(($366+$364)|0);
 HEAP8[($367)]=$362;
 var $368=$k;
 var $369=((($368)+(1))|0);
 $k=$369;
 label=50;break;
 case 50: 
 var $371=$l;
 var $372=((($371)-(1))|0);
 $l=$372;
 label=48;break;
 case 51: 
 var $374=$k;
 var $375=((($374)-(1))|0);
 $k=$375;
 label=52;break;
 case 52: 
 label=73;break;
 case 53: 
 var $378=$1;
 var $379=_ftell($378);
 $a=$379;
 var $380=$c2;
 $c5=$380;
 var $381=$c3;
 var $382=($381&255);
 var $383=$382<<8;
 var $384=$c4;
 var $385=($384&255);
 var $386=((($383)+($385))|0);
 var $387=$trkdat_ofs;
 var $388=((($386)+($387))|0);
 var $389=((($388)+(4))|0);
 $b=$389;
 var $390=$1;
 var $391=$b;
 var $392=_fseek($390,$391,0);
 $c=0;
 label=54;break;
 case 54: 
 var $394=$c;
 var $395=$c5;
 var $396=($395&255);
 var $397=($394|0)<=($396|0);
 if($397){label=55;break;}else{label=72;break;}
 case 55: 
 var $399=$1;
 var $400=_read8($399);
 $c1=$400;
 var $401=$1;
 var $402=_read8($401);
 $c2=$402;
 var $403=$1;
 var $404=_read8($403);
 $c3=$404;
 var $405=$1;
 var $406=_read8($405);
 $c4=$406;
 var $407=$c1;
 var $408=($407&255);
 var $409=$408<<4;
 var $410=$409&16;
 var $411=$c2;
 var $412=($411&255);
 var $413=$412>>4;
 var $414=$413&15;
 var $415=$410|$414;
 var $416=(($415)&255);
 $sample=$416;
 var $417=$note;
 HEAP8[($417)]=0; HEAP8[((($417)+(1))|0)]=0;
 var $418=$c1;
 var $419=($418&255);
 var $420=$419&127;
 var $421=(($420)&255);
 $mynote=$421;
 var $422=$mynote;
 var $423=($422&255);
 var $424=(((($423|0))/(2))&-1);
 var $425=((4504+($424<<1))|0);
 var $426=(($425)|0);
 var $427=HEAP8[($426)];
 var $428=(($note)|0);
 HEAP8[($428)]=$427;
 var $429=$mynote;
 var $430=($429&255);
 var $431=(((($430|0))/(2))&-1);
 var $432=((4504+($431<<1))|0);
 var $433=(($432+1)|0);
 var $434=HEAP8[($433)];
 var $435=(($note+1)|0);
 HEAP8[($435)]=$434;
 var $436=$c2;
 var $437=($436&255);
 var $438=$437&15;
 if(($438|0)==8){ label=56;break;}else if(($438|0)==5|($438|0)==6|($438|0)==10){ label=57;break;}else{label=60;break;}
 case 56: 
 var $440=$c2;
 var $441=($440&255);
 var $442=((($441)-(8))|0);
 var $443=(($442)&255);
 $c2=$443;
 label=61;break;
 case 57: 
 var $445=$c3;
 var $446=($445&255);
 var $447=($446|0)>=128;
 if($447){label=58;break;}else{label=59;break;}
 case 58: 
 var $449=$c3;
 var $450=($449&255);
 var $451=$450<<4;
 var $452=$451&240;
 var $453=(($452)&255);
 $c3=$453;
 label=59;break;
 case 59: 
 label=61;break;
 case 60: 
 label=61;break;
 case 61: 
 var $457=$sample;
 var $458=($457&255);
 var $459=$458&240;
 var $460=(($note)|0);
 var $461=HEAP8[($460)];
 var $462=($461&255);
 var $463=$462&15;
 var $464=$459|$463;
 var $465=(($464)&255);
 var $466=$k;
 var $467=($466<<2);
 var $468=$x;
 var $469=(($tr+($468<<8))|0);
 var $470=(($469+$467)|0);
 HEAP8[($470)]=$465;
 var $471=(($note+1)|0);
 var $472=HEAP8[($471)];
 var $473=$k;
 var $474=($473<<2);
 var $475=((($474)+(1))|0);
 var $476=$x;
 var $477=(($tr+($476<<8))|0);
 var $478=(($477+$475)|0);
 HEAP8[($478)]=$472;
 var $479=$c2;
 var $480=$k;
 var $481=($480<<2);
 var $482=((($481)+(2))|0);
 var $483=$x;
 var $484=(($tr+($483<<8))|0);
 var $485=(($484+$482)|0);
 HEAP8[($485)]=$479;
 var $486=$c3;
 var $487=$k;
 var $488=($487<<2);
 var $489=((($488)+(3))|0);
 var $490=$x;
 var $491=(($tr+($490<<8))|0);
 var $492=(($491+$489)|0);
 HEAP8[($492)]=$486;
 var $493=$c4;
 var $494=($493&255);
 var $495=($494|0)>0;
 if($495){label=62;break;}else{label=64;break;}
 case 62: 
 var $497=$c4;
 var $498=($497&255);
 var $499=($498|0)<128;
 if($499){label=63;break;}else{label=64;break;}
 case 63: 
 var $501=$c4;
 var $502=($501&255);
 var $503=$k;
 var $504=((($503)+($502))|0);
 $k=$504;
 label=64;break;
 case 64: 
 var $506=$c4;
 var $507=($506&255);
 var $508=($507|0)>127;
 if($508){label=65;break;}else{label=70;break;}
 case 65: 
 var $510=$k;
 var $511=((($510)+(1))|0);
 $k=$511;
 $l=256;
 label=66;break;
 case 66: 
 var $513=$l;
 var $514=$c4;
 var $515=($514&255);
 var $516=($513|0)>($515|0);
 if($516){label=67;break;}else{label=69;break;}
 case 67: 
 var $518=$k;
 var $519=($518<<2);
 $y=$519;
 var $520=$sample;
 var $521=($520&255);
 var $522=$521&240;
 var $523=(($note)|0);
 var $524=HEAP8[($523)];
 var $525=($524&255);
 var $526=$525&15;
 var $527=$522|$526;
 var $528=(($527)&255);
 var $529=$y;
 var $530=$x;
 var $531=(($tr+($530<<8))|0);
 var $532=(($531+$529)|0);
 HEAP8[($532)]=$528;
 var $533=(($note+1)|0);
 var $534=HEAP8[($533)];
 var $535=$y;
 var $536=((($535)+(1))|0);
 var $537=$x;
 var $538=(($tr+($537<<8))|0);
 var $539=(($538+$536)|0);
 HEAP8[($539)]=$534;
 var $540=$c2;
 var $541=$y;
 var $542=((($541)+(2))|0);
 var $543=$x;
 var $544=(($tr+($543<<8))|0);
 var $545=(($544+$542)|0);
 HEAP8[($545)]=$540;
 var $546=$c3;
 var $547=$y;
 var $548=((($547)+(3))|0);
 var $549=$x;
 var $550=(($tr+($549<<8))|0);
 var $551=(($550+$548)|0);
 HEAP8[($551)]=$546;
 var $552=$k;
 var $553=((($552)+(1))|0);
 $k=$553;
 label=68;break;
 case 68: 
 var $555=$l;
 var $556=((($555)-(1))|0);
 $l=$556;
 label=66;break;
 case 69: 
 var $558=$k;
 var $559=((($558)-(1))|0);
 $k=$559;
 label=70;break;
 case 70: 
 var $561=$k;
 var $562=((($561)+(1))|0);
 $k=$562;
 label=71;break;
 case 71: 
 var $564=$c;
 var $565=((($564)+(1))|0);
 $c=$565;
 label=54;break;
 case 72: 
 var $567=$k;
 var $568=((($567)-(1))|0);
 $k=$568;
 var $569=$1;
 var $570=$a;
 var $571=_fseek($569,$570,0);
 label=73;break;
 case 73: 
 var $573=$k;
 var $574=((($573)+(1))|0);
 $k=$574;
 label=35;break;
 case 74: 
 label=75;break;
 case 75: 
 var $577=$j;
 var $578=((($577)+(1))|0);
 $j=$578;
 label=33;break;
 case 76: 
 label=77;break;
 case 77: 
 var $581=$i;
 var $582=((($581)+(1))|0);
 $i=$582;
 label=31;break;
 case 78: 
 $i=0;
 label=79;break;
 case 79: 
 var $585=$i;
 var $586=$len;
 var $587=($586&255);
 var $588=($585|0)<($587|0);
 if($588){label=80;break;}else{label=90;break;}
 case 80: 
 var $590=$tmp;
 _memset($590, 0, 1024)|0;
 $j=0;
 label=81;break;
 case 81: 
 var $592=$j;
 var $593=($592|0)<64;
 if($593){label=82;break;}else{label=88;break;}
 case 82: 
 $k=0;
 label=83;break;
 case 83: 
 var $596=$k;
 var $597=($596|0)<4;
 if($597){label=84;break;}else{label=86;break;}
 case 84: 
 var $599=$j;
 var $600=($599<<4);
 var $601=$k;
 var $602=($601<<2);
 var $603=((($600)+($602))|0);
 $x1=$603;
 var $604=$k;
 var $605=$i;
 var $606=($605<<2);
 var $607=((($604)+($606))|0);
 $y2=$607;
 var $608=$j;
 var $609=($608<<2);
 var $610=$y2;
 var $611=(($tr+($610<<8))|0);
 var $612=(($611+$609)|0);
 var $613=HEAP8[($612)];
 var $614=$x1;
 var $615=(($614)|0);
 var $616=(($tmp+$615)|0);
 HEAP8[($616)]=$613;
 var $617=$j;
 var $618=($617<<2);
 var $619=((($618)+(1))|0);
 var $620=$y2;
 var $621=(($tr+($620<<8))|0);
 var $622=(($621+$619)|0);
 var $623=HEAP8[($622)];
 var $624=$x1;
 var $625=((($624)+(1))|0);
 var $626=(($tmp+$625)|0);
 HEAP8[($626)]=$623;
 var $627=$j;
 var $628=($627<<2);
 var $629=((($628)+(2))|0);
 var $630=$y2;
 var $631=(($tr+($630<<8))|0);
 var $632=(($631+$629)|0);
 var $633=HEAP8[($632)];
 var $634=$x1;
 var $635=((($634)+(2))|0);
 var $636=(($tmp+$635)|0);
 HEAP8[($636)]=$633;
 var $637=$j;
 var $638=($637<<2);
 var $639=((($638)+(3))|0);
 var $640=$y2;
 var $641=(($tr+($640<<8))|0);
 var $642=(($641+$639)|0);
 var $643=HEAP8[($642)];
 var $644=$x1;
 var $645=((($644)+(3))|0);
 var $646=(($tmp+$645)|0);
 HEAP8[($646)]=$643;
 label=85;break;
 case 85: 
 var $648=$k;
 var $649=((($648)+(1))|0);
 $k=$649;
 label=83;break;
 case 86: 
 label=87;break;
 case 87: 
 var $652=$j;
 var $653=((($652)+(1))|0);
 $j=$653;
 label=81;break;
 case 88: 
 var $655=(($tmp)|0);
 var $656=$2;
 var $657=_fwrite($655,1024,1,$656);
 label=89;break;
 case 89: 
 var $659=$i;
 var $660=((($659)+(1))|0);
 $i=$660;
 label=79;break;
 case 90: 
 $i=0;
 label=91;break;
 case 91: 
 var $663=$i;
 var $664=$nsmp;
 var $665=($664&255);
 var $666=($663|0)<($665|0);
 if($666){label=92;break;}else{label=94;break;}
 case 92: 
 var $668=$1;
 var $669=$i;
 var $670=(($SampleAddress+($669<<2))|0);
 var $671=HEAP32[(($670)>>2)];
 var $672=$smp_ofs;
 var $673=((($671)+($672))|0);
 var $674=_fseek($668,$673,0);
 var $675=$2;
 var $676=$1;
 var $677=$i;
 var $678=(($SampleSize+($677<<2))|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=_pw_move_data($675,$676,$679);
 label=93;break;
 case 93: 
 var $682=$i;
 var $683=((($682)+(1))|0);
 $i=$683;
 label=91;break;
 case 94: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_p61a($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $o;
 var $start;
 var $ssize;
 var $x;
 var $d;
 var $e;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 var $5=$start;
 var $6=((($5)+(2))|0);
 var $7=$2;
 var $8=(($7+$6)|0);
 var $9=HEAP8[($8)];
 var $10=($9&255);
 $m=$10;
 var $11=$m;
 var $12=($11|0)>127;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=$m;
 var $15=($14|0)==0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=95;break;
 case 4: 
 var $18=$start;
 var $19=((($18)+(3))|0);
 var $20=$2;
 var $21=(($20+$19)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23&63;
 $k=$24;
 var $25=$k;
 var $26=($25|0)>31;
 if($26){label=6;break;}else{label=5;break;}
 case 5: 
 var $28=$k;
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=95;break;
 case 7: 
 $l=0;
 label=8;break;
 case 8: 
 var $33=$l;
 var $34=$k;
 var $35=($33|0)<($34|0);
 if($35){label=9;break;}else{label=15;break;}
 case 9: 
 var $37=$start;
 var $38=((($37)+(7))|0);
 var $39=$l;
 var $40=((($39)*(6))&-1);
 var $41=((($38)+($40))|0);
 var $42=$2;
 var $43=(($42+$41)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=($45|0)>64;
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=95;break;
 case 11: 
 var $49=$start;
 var $50=((($49)+(6))|0);
 var $51=$l;
 var $52=((($51)*(6))&-1);
 var $53=((($50)+($52))|0);
 var $54=$2;
 var $55=(($54+$53)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=($57|0)>15;
 if($58){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=95;break;
 case 13: 
 label=14;break;
 case 14: 
 var $62=$l;
 var $63=((($62)+(1))|0);
 $l=$63;
 label=8;break;
 case 15: 
 $ssize=0;
 $n=0;
 label=16;break;
 case 16: 
 var $66=$n;
 var $67=$k;
 var $68=($66|0)<($67|0);
 if($68){label=17;break;}else{label=32;break;}
 case 17: 
 var $70=$2;
 var $71=$start;
 var $72=(($70+$71)|0);
 var $73=$n;
 var $74=((($73)*(6))&-1);
 var $75=(($72+$74)|0);
 var $76=(($75+4)|0);
 var $77=_readmem16b($76);
 var $78=($77&65535);
 $o=$78;
 var $79=$o;
 var $80=($79|0)<65503;
 if($80){label=18;break;}else{label=19;break;}
 case 18: 
 var $82=$o;
 var $83=($82|0)>32768;
 if($83){label=20;break;}else{label=19;break;}
 case 19: 
 var $85=$o;
 var $86=($85|0)==0;
 if($86){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=95;break;
 case 21: 
 var $89=$o;
 var $90=($89|0)<65280;
 if($90){label=22;break;}else{label=23;break;}
 case 22: 
 var $92=$o;
 var $93=($92<<1);
 var $94=$ssize;
 var $95=((($94)+($93))|0);
 $ssize=$95;
 label=23;break;
 case 23: 
 var $97=$2;
 var $98=$start;
 var $99=(($97+$98)|0);
 var $100=$n;
 var $101=((($100)*(6))&-1);
 var $102=(($99+$101)|0);
 var $103=(($102+8)|0);
 var $104=_readmem16b($103);
 var $105=($104&65535);
 $j=$105;
 var $106=$j;
 var $107=($106|0)!=65535;
 if($107){label=24;break;}else{label=26;break;}
 case 24: 
 var $109=$j;
 var $110=$o;
 var $111=($109|0)>=($110|0);
 if($111){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=95;break;
 case 26: 
 var $114=$o;
 var $115=($114|0)>65503;
 if($115){label=27;break;}else{label=30;break;}
 case 27: 
 var $117=$o;
 var $118=(((65535)-($117))|0);
 var $119=$k;
 var $120=($118|0)>($119|0);
 if($120){label=28;break;}else{label=29;break;}
 case 28: 
 $1=-1;
 label=95;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $125=$n;
 var $126=((($125)+(1))|0);
 $n=$126;
 label=16;break;
 case 32: 
 var $128=$2;
 var $129=$start;
 var $130=(($128+$129)|0);
 var $131=_readmem16b($130);
 var $132=($131&65535);
 $j=$132;
 var $133=$j;
 var $134=$k;
 var $135=((($134)*(6))&-1);
 var $136=((($135)+(4))|0);
 var $137=$m;
 var $138=($137<<3);
 var $139=((($136)+($138))|0);
 var $140=($133|0)<($139|0);
 if($140){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=95;break;
 case 34: 
 $l=0;
 label=35;break;
 case 35: 
 var $144=$l;
 var $145=$m;
 var $146=($145<<2);
 var $147=($144|0)<($146|0);
 if($147){label=36;break;}else{label=40;break;}
 case 36: 
 var $149=$2;
 var $150=$start;
 var $151=(($149+$150)|0);
 var $152=(($151+4)|0);
 var $153=$k;
 var $154=((($153)*(6))&-1);
 var $155=(($152+$154)|0);
 var $156=$l;
 var $157=($156<<1);
 var $158=(($155+$157)|0);
 var $159=_readmem16b($158);
 var $160=($159&65535);
 $o=$160;
 var $161=$o;
 var $162=$k;
 var $163=((($162)*(6))&-1);
 var $164=((($161)+($163))|0);
 var $165=((($164)+(4))|0);
 var $166=$m;
 var $167=($166<<3);
 var $168=((($165)+($167))|0);
 var $169=$j;
 var $170=($168|0)>($169|0);
 if($170){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=95;break;
 case 38: 
 label=39;break;
 case 39: 
 var $174=$l;
 var $175=((($174)+(1))|0);
 $l=$175;
 label=35;break;
 case 40: 
 $l=0;
 $o=0;
 var $177=$k;
 var $178=((($177)*(6))&-1);
 var $179=((($178)+(4))|0);
 var $180=$m;
 var $181=($180<<3);
 var $182=((($179)+($181))|0);
 $x=$182;
 label=41;break;
 case 41: 
 var $184=$4;
 var $185=$start;
 var $186=$x;
 var $187=((($185)+($186))|0);
 var $188=($184|0)<($187|0);
 if($188){label=42;break;}else{label=43;break;}
 case 42: 
 var $190=$start;
 var $191=$x;
 var $192=((($190)+($191))|0);
 var $193=$4;
 var $194=((($192)-($193))|0);
 $1=$194;
 label=95;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $198=$start;
 var $199=$x;
 var $200=((($198)+($199))|0);
 var $201=$l;
 var $202=((($200)+($201))|0);
 var $203=$2;
 var $204=(($203+$202)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=($206|0)!=255;
 if($207){label=46;break;}else{var $212=0;label=47;break;}
 case 46: 
 var $209=$l;
 var $210=($209|0)<128;
 var $212=$210;label=47;break;
 case 47: 
 var $212;
 if($212){label=48;break;}else{label=53;break;}
 case 48: 
 var $214=$start;
 var $215=$x;
 var $216=((($214)+($215))|0);
 var $217=$l;
 var $218=((($216)+($217))|0);
 var $219=$2;
 var $220=(($219+$218)|0);
 var $221=HEAP8[($220)];
 var $222=($221&255);
 var $223=$m;
 var $224=((($223)-(1))|0);
 var $225=($222|0)>($224|0);
 if($225){label=49;break;}else{label=50;break;}
 case 49: 
 $1=-1;
 label=95;break;
 case 50: 
 var $228=$start;
 var $229=$x;
 var $230=((($228)+($229))|0);
 var $231=$l;
 var $232=((($230)+($231))|0);
 var $233=$2;
 var $234=(($233+$232)|0);
 var $235=HEAP8[($234)];
 var $236=($235&255);
 var $237=$o;
 var $238=($236|0)>($237|0);
 if($238){label=51;break;}else{label=52;break;}
 case 51: 
 var $240=$start;
 var $241=$x;
 var $242=((($240)+($241))|0);
 var $243=$l;
 var $244=((($242)+($243))|0);
 var $245=$2;
 var $246=(($245+$244)|0);
 var $247=HEAP8[($246)];
 var $248=($247&255);
 $o=$248;
 label=52;break;
 case 52: 
 var $250=$l;
 var $251=((($250)+(1))|0);
 $l=$251;
 label=45;break;
 case 53: 
 var $253=$x;
 var $254=$l;
 var $255=((($253)+($254))|0);
 var $256=$j;
 var $257=($255|0)>($256|0);
 if($257){label=54;break;}else{label=55;break;}
 case 54: 
 $1=-1;
 label=95;break;
 case 55: 
 var $260=$l;
 var $261=($260|0)==0;
 if($261){label=57;break;}else{label=56;break;}
 case 56: 
 var $263=$l;
 var $264=($263|0)==128;
 if($264){label=57;break;}else{label=58;break;}
 case 57: 
 $1=-1;
 label=95;break;
 case 58: 
 var $267=$o;
 var $268=((($267)+(1))|0);
 $o=$268;
 label=59;break;
 case 59: 
 var $270=$4;
 var $271=$start;
 var $272=$j;
 var $273=((($271)+($272))|0);
 var $274=((($273)+(1))|0);
 var $275=($270|0)<($274|0);
 if($275){label=60;break;}else{label=61;break;}
 case 60: 
 var $277=$start;
 var $278=$j;
 var $279=((($277)+($278))|0);
 var $280=((($279)+(1))|0);
 var $281=$4;
 var $282=((($280)-($281))|0);
 $1=$282;
 label=95;break;
 case 61: 
 label=62;break;
 case 62: 
 var $285=$l;
 var $286=((($285)+(1))|0);
 $l=$286;
 var $287=$x;
 var $288=$l;
 var $289=((($287)+($288))|0);
 $n=$289;
 label=63;break;
 case 63: 
 var $291=$n;
 var $292=$j;
 var $293=($291|0)<($292|0);
 if($293){label=64;break;}else{label=94;break;}
 case 64: 
 var $295=$start;
 var $296=$n;
 var $297=((($295)+($296))|0);
 var $298=$2;
 var $299=(($298+$297)|0);
 var $300=HEAP8[($299)];
 $d=$300;
 var $301=$start;
 var $302=$n;
 var $303=((($301)+($302))|0);
 var $304=((($303)+(1))|0);
 var $305=$2;
 var $306=(($305+$304)|0);
 var $307=HEAP8[($306)];
 $e=$307;
 var $308=$d;
 var $309=($308&255);
 var $310=$309&255;
 var $311=($310|0)==255;
 if($311){label=65;break;}else{label=72;break;}
 case 65: 
 var $313=$e;
 var $314=($313&255);
 var $315=$314&192;
 var $316=($315|0)==0;
 if($316){label=66;break;}else{label=67;break;}
 case 66: 
 var $318=$n;
 var $319=((($318)+(1))|0);
 $n=$319;
 label=93;break;
 case 67: 
 var $321=$e;
 var $322=($321&255);
 var $323=$322&192;
 var $324=($323|0)==64;
 if($324){label=68;break;}else{label=69;break;}
 case 68: 
 var $326=$n;
 var $327=((($326)+(2))|0);
 $n=$327;
 label=93;break;
 case 69: 
 var $329=$e;
 var $330=($329&255);
 var $331=$330&192;
 var $332=($331|0)==192;
 if($332){label=70;break;}else{label=71;break;}
 case 70: 
 var $334=$n;
 var $335=((($334)+(3))|0);
 $n=$335;
 label=93;break;
 case 71: 
 label=72;break;
 case 72: 
 var $338=$d;
 var $339=($338&255);
 var $340=$339&255;
 var $341=($340|0)==127;
 if($341){label=73;break;}else{label=74;break;}
 case 73: 
 label=93;break;
 case 74: 
 var $344=$d;
 var $345=($344&255);
 var $346=$345&240;
 var $347=($346|0)==240;
 if($347){label=75;break;}else{label=78;break;}
 case 75: 
 var $349=$e;
 var $350=($349&255);
 var $351=$350&31;
 var $352=$k;
 var $353=($351|0)>($352|0);
 if($353){label=76;break;}else{label=77;break;}
 case 76: 
 $1=-1;
 label=95;break;
 case 77: 
 var $356=$n;
 var $357=((($356)+(2))|0);
 $n=$357;
 label=93;break;
 case 78: 
 var $359=$d;
 var $360=($359&255);
 var $361=$360&240;
 var $362=($361|0)==112;
 if($362){label=79;break;}else{label=82;break;}
 case 79: 
 var $364=$e;
 var $365=($364&255);
 var $366=$365&31;
 var $367=$k;
 var $368=($366|0)>($367|0);
 if($368){label=80;break;}else{label=81;break;}
 case 80: 
 $1=-1;
 label=95;break;
 case 81: 
 var $371=$n;
 var $372=((($371)+(1))|0);
 $n=$372;
 label=93;break;
 case 82: 
 var $374=$d;
 var $375=($374&255);
 var $376=$375&240;
 var $377=($376|0)==224;
 if($377){label=83;break;}else{label=84;break;}
 case 83: 
 var $379=$n;
 var $380=((($379)+(2))|0);
 $n=$380;
 label=93;break;
 case 84: 
 var $382=$d;
 var $383=($382&255);
 var $384=$383&240;
 var $385=($384|0)==96;
 if($385){label=85;break;}else{label=86;break;}
 case 85: 
 var $387=$n;
 var $388=((($387)+(1))|0);
 $n=$388;
 label=93;break;
 case 86: 
 var $390=$d;
 var $391=($390&255);
 var $392=$391&128;
 var $393=($392|0)==128;
 if($393){label=87;break;}else{label=90;break;}
 case 87: 
 var $395=$d;
 var $396=($395&255);
 var $397=$396<<4;
 var $398=$397&16;
 var $399=$e;
 var $400=($399&255);
 var $401=$400>>4;
 var $402=$401&15;
 var $403=$398|$402;
 var $404=$k;
 var $405=($403|0)>($404|0);
 if($405){label=88;break;}else{label=89;break;}
 case 88: 
 $1=-1;
 label=95;break;
 case 89: 
 var $408=$n;
 var $409=((($408)+(3))|0);
 $n=$409;
 label=93;break;
 case 90: 
 var $411=$d;
 var $412=($411&255);
 var $413=$412<<4;
 var $414=$413&16;
 var $415=$e;
 var $416=($415&255);
 var $417=$416>>4;
 var $418=$417&15;
 var $419=$414|$418;
 var $420=$k;
 var $421=($419|0)>($420|0);
 if($421){label=91;break;}else{label=92;break;}
 case 91: 
 $1=-1;
 label=95;break;
 case 92: 
 var $424=$n;
 var $425=((($424)+(2))|0);
 $n=$425;
 label=93;break;
 case 93: 
 var $427=$n;
 var $428=((($427)+(1))|0);
 $n=$428;
 label=63;break;
 case 94: 
 $1=0;
 label=95;break;
 case 95: 
 var $431=$1;
 STACKTOP=sp;return $431;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_p61a($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+134688)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $c1;
 var $c2;
 var $c3;
 var $c4;
 var $c5;
 var $c6;
 var $max_row;
 var $tmp=sp;
 var $smp_buffer;
 var $len;
 var $npat;
 var $nins;
 var $tdata=(sp)+(1024);
 var $ptable=(sp)+(132096);
 var $isize=(sp)+(132224);
 var $PACK=(sp)+(132352);
 var $use_delta;
 var $use_packed;
 var $taddr=(sp)+(132384);
 var $tdata_addr;
 var $sdata_addr;
 var $ssize;
 var $i;
 var $j;
 var $k;
 var $l;
 var $a;
 var $b;
 var $z;
 var $smp_size=(sp)+(134432);
 var $saddr=(sp)+(134560);
 var $Unpacked_Sample_Data_Size;
 var $x;
 var $x1;
 $2=$in;
 $3=$out;
 $len=0;
 $npat=0;
 $nins=0;
 $use_delta=0;
 $use_packed=0;
 $tdata_addr=0;
 $sdata_addr=0;
 $ssize=0;
 $i=0;
 var $4=$taddr;
 _memset($4, 0, 2048)|0;
 var $5=$tdata;
 _memset($5, 0, 131072)|0;
 var $6=$ptable;
 _memset($6, 0, 128)|0;
 var $7=$smp_size;
 _memset($7, 0, 124)|0;
 var $8=$isize;
 _memset($8, 0, 62)|0;
 $i=0;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=($10|0)<31;
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$i;
 var $14=(($PACK+$13)|0);
 HEAP8[($14)]=0;
 label=4;break;
 case 4: 
 var $16=$i;
 var $17=((($16)+(1))|0);
 $i=$17;
 label=2;break;
 case 5: 
 var $19=(($saddr)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=$2;
 var $21=_read16b($20);
 var $22=($21&65535);
 $sdata_addr=$22;
 var $23=$2;
 var $24=_read8($23);
 var $25=($24&255);
 $npat=$25;
 var $26=$2;
 var $27=_read8($26);
 var $28=($27&255);
 $nins=$28;
 var $29=$nins;
 var $30=$29&128;
 var $31=($30|0)!=0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 $use_delta=1;
 label=7;break;
 case 7: 
 var $34=$nins;
 var $35=$34&64;
 var $36=($35|0)!=0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 $use_packed=1;
 $1=-1;
 label=256;break;
 case 9: 
 var $39=$nins;
 var $40=$39&63;
 $nins=$40;
 var $41=$use_packed;
 var $42=($41&255);
 var $43=($42|0)==1;
 if($43){label=10;break;}else{label=11;break;}
 case 10: 
 var $45=$2;
 var $46=_read32b($45);
 $Unpacked_Sample_Data_Size=$46;
 label=11;break;
 case 11: 
 var $48=$3;
 var $49=_pw_write_zero($48,20);
 $i=0;
 label=12;break;
 case 12: 
 var $51=$i;
 var $52=$nins;
 var $53=($51|0)<($52|0);
 if($53){label=13;break;}else{label=24;break;}
 case 13: 
 var $55=$3;
 var $56=_pw_write_zero($55,22);
 var $57=$2;
 var $58=_read16b($57);
 var $59=($58&65535);
 var $60=$i;
 var $61=(($isize+($60<<2))|0);
 HEAP32[(($61)>>2)]=$59;
 $j=$59;
 var $62=$j;
 var $63=($62|0)>65280;
 if($63){label=14;break;}else{label=15;break;}
 case 14: 
 var $65=$j;
 var $66=(((65535)-($65))|0);
 var $67=(($smp_size+($66<<2))|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$i;
 var $70=(($smp_size+($69<<2))|0);
 HEAP32[(($70)>>2)]=$68;
 var $71=$j;
 var $72=(((65535)-($71))|0);
 var $73=(($isize+($72<<2))|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$i;
 var $76=(($isize+($75<<2))|0);
 HEAP32[(($76)>>2)]=$74;
 var $77=$j;
 var $78=(((65535)-($77))|0);
 var $79=(($saddr+($78<<2))|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$i;
 var $82=(($saddr+($81<<2))|0);
 HEAP32[(($82)>>2)]=$80;
 label=18;break;
 case 15: 
 var $84=$i;
 var $85=($84|0)>0;
 if($85){label=16;break;}else{label=17;break;}
 case 16: 
 var $87=$i;
 var $88=((($87)-(1))|0);
 var $89=(($saddr+($88<<2))|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$i;
 var $92=((($91)-(1))|0);
 var $93=(($smp_size+($92<<2))|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=((($90)+($94))|0);
 var $96=$i;
 var $97=(($saddr+($96<<2))|0);
 HEAP32[(($97)>>2)]=$95;
 label=17;break;
 case 17: 
 var $99=$j;
 var $100=($99<<1);
 var $101=$i;
 var $102=(($smp_size+($101<<2))|0);
 HEAP32[(($102)>>2)]=$100;
 var $103=$i;
 var $104=(($smp_size+($103<<2))|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$ssize;
 var $107=((($106)+($105))|0);
 $ssize=$107;
 label=18;break;
 case 18: 
 var $109=$i;
 var $110=(($smp_size+($109<<2))|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(((($111|0))/(2))&-1);
 $j=$112;
 var $113=$3;
 var $114=$i;
 var $115=(($isize+($114<<2))|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116)&65535);
 _write16b($113,$117);
 var $118=$2;
 var $119=_read8($118);
 $c1=$119;
 var $120=$c1;
 var $121=($120&255);
 var $122=$121&64;
 var $123=($122|0)!=0;
 if($123){label=19;break;}else{label=20;break;}
 case 19: 
 var $125=$i;
 var $126=(($PACK+$125)|0);
 HEAP8[($126)]=1;
 label=20;break;
 case 20: 
 var $128=$c1;
 var $129=($128&255);
 var $130=$129&63;
 var $131=(($130)&255);
 $c1=$131;
 var $132=$3;
 var $133=$c1;
 _write8($132,$133);
 var $134=$3;
 var $135=$2;
 var $136=_read8($135);
 _write8($134,$136);
 var $137=$2;
 var $138=_read16b($137);
 var $139=($138&65535);
 $x=$139;
 var $140=$x;
 var $141=($140|0)==65535;
 if($141){label=21;break;}else{label=22;break;}
 case 21: 
 var $143=$3;
 _write16b($143,0);
 var $144=$3;
 _write16b($144,1);
 label=23;break;
 case 22: 
 var $146=$3;
 var $147=$x;
 var $148=(($147)&65535);
 _write16b($146,$148);
 var $149=$3;
 var $150=$j;
 var $151=$x;
 var $152=((($150)-($151))|0);
 var $153=(($152)&65535);
 _write16b($149,$153);
 label=23;break;
 case 23: 
 var $155=$i;
 var $156=((($155)+(1))|0);
 $i=$156;
 label=12;break;
 case 24: 
 var $158=$tmp;
 _memset($158, 0, 30)|0;
 var $159=(($tmp+29)|0);
 HEAP8[($159)]=1;
 label=25;break;
 case 25: 
 var $161=$i;
 var $162=($161|0)<31;
 if($162){label=26;break;}else{label=28;break;}
 case 26: 
 var $164=(($tmp)|0);
 var $165=$3;
 var $166=_fwrite($164,30,1,$165);
 label=27;break;
 case 27: 
 var $168=$i;
 var $169=((($168)+(1))|0);
 $i=$169;
 label=25;break;
 case 28: 
 $i=0;
 label=29;break;
 case 29: 
 var $172=$i;
 var $173=$npat;
 var $174=($172|0)<($173|0);
 if($174){label=30;break;}else{label=36;break;}
 case 30: 
 $j=0;
 label=31;break;
 case 31: 
 var $177=$j;
 var $178=($177|0)<4;
 if($178){label=32;break;}else{label=34;break;}
 case 32: 
 var $180=$2;
 var $181=_read16b($180);
 var $182=($181&65535);
 var $183=$j;
 var $184=$i;
 var $185=(($taddr+($184<<4))|0);
 var $186=(($185+($183<<2))|0);
 HEAP32[(($186)>>2)]=$182;
 label=33;break;
 case 33: 
 var $188=$j;
 var $189=((($188)+(1))|0);
 $j=$189;
 label=31;break;
 case 34: 
 label=35;break;
 case 35: 
 var $192=$i;
 var $193=((($192)+(1))|0);
 $i=$193;
 label=29;break;
 case 36: 
 $len=0;
 label=37;break;
 case 37: 
 var $196=$len;
 var $197=($196|0)<128;
 if($197){label=38;break;}else{label=42;break;}
 case 38: 
 var $199=$2;
 var $200=_read8($199);
 $c1=$200;
 var $201=$c1;
 var $202=($201&255);
 var $203=($202|0)==255;
 if($203){label=39;break;}else{label=40;break;}
 case 39: 
 label=42;break;
 case 40: 
 var $206=$c1;
 var $207=$len;
 var $208=(($ptable+$207)|0);
 HEAP8[($208)]=$206;
 label=41;break;
 case 41: 
 var $210=$len;
 var $211=((($210)+(1))|0);
 $len=$211;
 label=37;break;
 case 42: 
 var $213=$3;
 var $214=$len;
 var $215=(($214)&255);
 _write8($213,$215);
 var $216=$3;
 _write8($216,127);
 var $217=(($ptable)|0);
 var $218=$3;
 var $219=_fwrite($217,128,1,$218);
 var $220=$3;
 _write32b($220,1294879534);
 var $221=$2;
 var $222=_ftell($221);
 $tdata_addr=$222;
 $i=0;
 label=43;break;
 case 43: 
 var $224=$i;
 var $225=$npat;
 var $226=($224|0)<($225|0);
 if($226){label=44;break;}else{label=233;break;}
 case 44: 
 $max_row=63;
 $j=0;
 label=45;break;
 case 45: 
 var $229=$j;
 var $230=($229|0)<4;
 if($230){label=46;break;}else{label=231;break;}
 case 46: 
 var $232=$2;
 var $233=$j;
 var $234=$i;
 var $235=(($taddr+($234<<4))|0);
 var $236=(($235+($233<<2))|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$tdata_addr;
 var $239=((($237)+($238))|0);
 var $240=_fseek($232,$239,0);
 $k=0;
 label=47;break;
 case 47: 
 var $242=$k;
 var $243=$max_row;
 var $244=($242|0)<=($243|0);
 if($244){label=48;break;}else{label=228;break;}
 case 48: 
 var $246=$k;
 var $247=($246<<2);
 var $248=$i;
 var $249=($248<<2);
 var $250=$j;
 var $251=((($249)+($250))|0);
 var $252=(($tdata+($251<<8))|0);
 var $253=(($252+$247)|0);
 $x1=$253;
 var $254=$2;
 var $255=_read8($254);
 $c1=$255;
 var $256=$c1;
 var $257=($256&255);
 var $258=$257&112;
 var $259=($258|0)==112;
 if($259){label=49;break;}else{label=60;break;}
 case 49: 
 var $261=$c1;
 var $262=($261&255);
 var $263=($262|0)!=255;
 if($263){label=50;break;}else{label=60;break;}
 case 50: 
 var $265=$c1;
 var $266=($265&255);
 var $267=($266|0)!=127;
 if($267){label=51;break;}else{label=60;break;}
 case 51: 
 var $269=$2;
 var $270=_read8($269);
 $c2=$270;
 var $271=$c1;
 var $272=($271&255);
 var $273=$272<<4;
 var $274=$273&240;
 var $275=$c2;
 var $276=($275&255);
 var $277=$276>>4;
 var $278=$277&14;
 var $279=$274|$278;
 var $280=(($279)&255);
 $c6=$280;
 var $281=$c2;
 var $282=($281&255);
 var $283=$282&16;
 var $284=$c6;
 var $285=($284&255);
 var $286=(((($285|0))/(2))&-1);
 var $287=((4504+($286<<1))|0);
 var $288=(($287)|0);
 var $289=HEAP8[($288)];
 var $290=($289&255);
 var $291=$283|$290;
 var $292=(($291)&255);
 var $293=$x1;
 var $294=(($293+1)|0);
 $x1=$294;
 HEAP8[($293)]=$292;
 var $295=$c6;
 var $296=($295&255);
 var $297=(((($296|0))/(2))&-1);
 var $298=((4504+($297<<1))|0);
 var $299=(($298+1)|0);
 var $300=HEAP8[($299)];
 var $301=$x1;
 var $302=(($301+1)|0);
 $x1=$302;
 HEAP8[($301)]=$300;
 var $303=$c2;
 var $304=($303&255);
 var $305=$304<<4;
 var $306=$305&240;
 var $307=(($306)&255);
 var $308=$x1;
 var $309=(($308+1)|0);
 $x1=$309;
 HEAP8[($308)]=$307;
 var $310=$c1;
 var $311=($310&255);
 var $312=$311&128;
 var $313=($312|0)!=0;
 if($313){label=52;break;}else{label=59;break;}
 case 52: 
 var $315=$2;
 var $316=_read8($315);
 $c3=$316;
 var $317=$c3;
 var $318=($317&255);
 var $319=($318|0)<128;
 if($319){label=53;break;}else{label=54;break;}
 case 53: 
 var $321=$c3;
 var $322=($321&255);
 var $323=$k;
 var $324=((($323)+($322))|0);
 $k=$324;
 label=227;break;
 case 54: 
 var $326=$c3;
 var $327=($326&255);
 var $328=((($327)-(128))|0);
 var $329=(($328)&255);
 $c4=$329;
 $l=0;
 label=55;break;
 case 55: 
 var $331=$l;
 var $332=$c4;
 var $333=($332&255);
 var $334=($331|0)<($333|0);
 if($334){label=56;break;}else{label=58;break;}
 case 56: 
 var $336=$k;
 var $337=((($336)+(1))|0);
 $k=$337;
 var $338=$k;
 var $339=($338<<2);
 var $340=$i;
 var $341=($340<<2);
 var $342=$j;
 var $343=((($341)+($342))|0);
 var $344=(($tdata+($343<<8))|0);
 var $345=(($344+$339)|0);
 $x1=$345;
 var $346=$c2;
 var $347=($346&255);
 var $348=$347&16;
 var $349=$c6;
 var $350=($349&255);
 var $351=(((($350|0))/(2))&-1);
 var $352=((4504+($351<<1))|0);
 var $353=(($352)|0);
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$348|$355;
 var $357=(($356)&255);
 var $358=$x1;
 var $359=(($358+1)|0);
 $x1=$359;
 HEAP8[($358)]=$357;
 var $360=$c6;
 var $361=($360&255);
 var $362=(((($361|0))/(2))&-1);
 var $363=((4504+($362<<1))|0);
 var $364=(($363+1)|0);
 var $365=HEAP8[($364)];
 var $366=$x1;
 var $367=(($366+1)|0);
 $x1=$367;
 HEAP8[($366)]=$365;
 var $368=$c2;
 var $369=($368&255);
 var $370=$369<<4;
 var $371=$370&240;
 var $372=(($371)&255);
 var $373=$x1;
 var $374=(($373+1)|0);
 $x1=$374;
 HEAP8[($373)]=$372;
 label=57;break;
 case 57: 
 var $376=$l;
 var $377=((($376)+(1))|0);
 $l=$377;
 label=55;break;
 case 58: 
 label=59;break;
 case 59: 
 label=227;break;
 case 60: 
 var $381=$c1;
 var $382=($381&255);
 var $383=$382&112;
 var $384=($383|0)==96;
 if($384){label=61;break;}else{label=84;break;}
 case 61: 
 var $386=$c1;
 var $387=($386&255);
 var $388=($387|0)!=255;
 if($388){label=62;break;}else{label=84;break;}
 case 62: 
 var $390=$2;
 var $391=_read8($390);
 $c2=$391;
 var $392=$c1;
 var $393=($392&255);
 var $394=$393&15;
 var $395=(($394)&255);
 $c6=$395;
 var $396=$c6;
 var $397=($396&255);
 var $398=($397|0)==8;
 if($398){label=63;break;}else{label=64;break;}
 case 63: 
 var $400=$c1;
 var $401=($400&255);
 var $402=((($401)-(8))|0);
 var $403=(($402)&255);
 $c1=$403;
 label=64;break;
 case 64: 
 var $405=$x1;
 var $406=(($405+2)|0);
 $x1=$406;
 var $407=$c1;
 var $408=($407&255);
 var $409=$408&15;
 var $410=(($409)&255);
 var $411=$x1;
 var $412=(($411+1)|0);
 $x1=$412;
 HEAP8[($411)]=$410;
 var $413=$c6;
 var $414=($413&255);
 var $415=($414|0)==5;
 if($415){label=67;break;}else{label=65;break;}
 case 65: 
 var $417=$c6;
 var $418=($417&255);
 var $419=($418|0)==6;
 if($419){label=67;break;}else{label=66;break;}
 case 66: 
 var $421=$c6;
 var $422=($421&255);
 var $423=($422|0)==10;
 if($423){label=67;break;}else{label=71;break;}
 case 67: 
 var $425=$c2;
 var $426=($425&255);
 var $427=($426|0)>127;
 if($427){label=68;break;}else{label=69;break;}
 case 68: 
 var $429=$c2;
 var $430=($429&255);
 var $431=(((256)-($430))|0);
 var $432=$431<<4;
 var $437=$432;label=70;break;
 case 69: 
 var $434=$c2;
 var $435=($434&255);
 var $437=$435;label=70;break;
 case 70: 
 var $437;
 var $438=(($437)&255);
 $c2=$438;
 label=71;break;
 case 71: 
 var $440=$c2;
 var $441=$x1;
 var $442=(($441+1)|0);
 $x1=$442;
 HEAP8[($441)]=$440;
 var $443=$c6;
 var $444=($443&255);
 var $445=($444|0)==13;
 if($445){label=72;break;}else{label=73;break;}
 case 72: 
 var $447=$k;
 $max_row=$447;
 label=228;break;
 case 73: 
 var $449=$c6;
 var $450=($449&255);
 var $451=($450|0)==11;
 if($451){label=74;break;}else{label=75;break;}
 case 74: 
 var $453=$k;
 $max_row=$453;
 label=228;break;
 case 75: 
 var $455=$c1;
 var $456=($455&255);
 var $457=$456&128;
 var $458=($457|0)!=0;
 if($458){label=76;break;}else{label=83;break;}
 case 76: 
 var $460=$2;
 var $461=_read8($460);
 $c3=$461;
 var $462=$c3;
 var $463=($462&255);
 var $464=($463|0)<128;
 if($464){label=77;break;}else{label=78;break;}
 case 77: 
 var $466=$c3;
 var $467=($466&255);
 var $468=$k;
 var $469=((($468)+($467))|0);
 $k=$469;
 label=227;break;
 case 78: 
 var $471=$c3;
 var $472=($471&255);
 var $473=((($472)-(128))|0);
 var $474=(($473)&255);
 $c4=$474;
 $l=0;
 label=79;break;
 case 79: 
 var $476=$l;
 var $477=$c4;
 var $478=($477&255);
 var $479=($476|0)<($478|0);
 if($479){label=80;break;}else{label=82;break;}
 case 80: 
 var $481=$k;
 var $482=((($481)+(1))|0);
 $k=$482;
 var $483=$k;
 var $484=($483<<2);
 var $485=$i;
 var $486=($485<<2);
 var $487=$j;
 var $488=((($486)+($487))|0);
 var $489=(($tdata+($488<<8))|0);
 var $490=(($489+$484)|0);
 var $491=(($490+2)|0);
 $x1=$491;
 var $492=$c1;
 var $493=($492&255);
 var $494=$493&15;
 var $495=(($494)&255);
 var $496=$x1;
 var $497=(($496+1)|0);
 $x1=$497;
 HEAP8[($496)]=$495;
 var $498=$c2;
 var $499=$x1;
 var $500=(($499+1)|0);
 $x1=$500;
 HEAP8[($499)]=$498;
 label=81;break;
 case 81: 
 var $502=$l;
 var $503=((($502)+(1))|0);
 $l=$503;
 label=79;break;
 case 82: 
 label=83;break;
 case 83: 
 label=227;break;
 case 84: 
 var $507=$c1;
 var $508=($507&255);
 var $509=$508&128;
 var $510=($509|0)==128;
 if($510){label=85;break;}else{label=115;break;}
 case 85: 
 var $512=$c1;
 var $513=($512&255);
 var $514=($513|0)!=255;
 if($514){label=86;break;}else{label=115;break;}
 case 86: 
 var $516=$2;
 var $517=_read8($516);
 $c2=$517;
 var $518=$2;
 var $519=_read8($518);
 $c3=$519;
 var $520=$2;
 var $521=_read8($520);
 $c4=$521;
 var $522=$c1;
 var $523=($522&255);
 var $524=$523&127;
 var $525=(($524)&255);
 $c1=$525;
 var $526=$c1;
 var $527=($526&255);
 var $528=$527<<4;
 var $529=$528&16;
 var $530=$c1;
 var $531=($530&255);
 var $532=(((($531|0))/(2))&-1);
 var $533=((4504+($532<<1))|0);
 var $534=(($533)|0);
 var $535=HEAP8[($534)];
 var $536=($535&255);
 var $537=$529|$536;
 var $538=(($537)&255);
 var $539=$x1;
 var $540=(($539+1)|0);
 $x1=$540;
 HEAP8[($539)]=$538;
 var $541=$c1;
 var $542=($541&255);
 var $543=(((($542|0))/(2))&-1);
 var $544=((4504+($543<<1))|0);
 var $545=(($544+1)|0);
 var $546=HEAP8[($545)];
 var $547=$x1;
 var $548=(($547+1)|0);
 $x1=$548;
 HEAP8[($547)]=$546;
 var $549=$c2;
 var $550=($549&255);
 var $551=$550&15;
 var $552=(($551)&255);
 $c6=$552;
 var $553=$c6;
 var $554=($553&255);
 var $555=($554|0)==8;
 if($555){label=87;break;}else{label=88;break;}
 case 87: 
 var $557=$c2;
 var $558=($557&255);
 var $559=((($558)-(8))|0);
 var $560=(($559)&255);
 $c2=$560;
 label=88;break;
 case 88: 
 var $562=$c2;
 var $563=$x1;
 var $564=(($563+1)|0);
 $x1=$564;
 HEAP8[($563)]=$562;
 var $565=$c6;
 var $566=($565&255);
 var $567=($566|0)==5;
 if($567){label=91;break;}else{label=89;break;}
 case 89: 
 var $569=$c6;
 var $570=($569&255);
 var $571=($570|0)==6;
 if($571){label=91;break;}else{label=90;break;}
 case 90: 
 var $573=$c6;
 var $574=($573&255);
 var $575=($574|0)==10;
 if($575){label=91;break;}else{label=95;break;}
 case 91: 
 var $577=$c3;
 var $578=($577&255);
 var $579=($578|0)>127;
 if($579){label=92;break;}else{label=93;break;}
 case 92: 
 var $581=$c3;
 var $582=($581&255);
 var $583=(((256)-($582))|0);
 var $584=$583<<4;
 var $589=$584;label=94;break;
 case 93: 
 var $586=$c3;
 var $587=($586&255);
 var $589=$587;label=94;break;
 case 94: 
 var $589;
 var $590=(($589)&255);
 $c3=$590;
 label=95;break;
 case 95: 
 var $592=$c3;
 var $593=$x1;
 var $594=(($593+1)|0);
 $x1=$594;
 HEAP8[($593)]=$592;
 var $595=$c6;
 var $596=($595&255);
 var $597=($596|0)==13;
 if($597){label=96;break;}else{label=97;break;}
 case 96: 
 var $599=$k;
 $max_row=$599;
 label=228;break;
 case 97: 
 var $601=$c6;
 var $602=($601&255);
 var $603=($602|0)==11;
 if($603){label=98;break;}else{label=99;break;}
 case 98: 
 var $605=$k;
 $max_row=$605;
 label=228;break;
 case 99: 
 var $607=$c4;
 var $608=($607&255);
 var $609=($608|0)<128;
 if($609){label=100;break;}else{label=101;break;}
 case 100: 
 var $611=$c4;
 var $612=($611&255);
 var $613=$k;
 var $614=((($613)+($612))|0);
 $k=$614;
 label=227;break;
 case 101: 
 var $616=$c4;
 var $617=($616&255);
 var $618=((($617)-(128))|0);
 var $619=(($618)&255);
 $c4=$619;
 $l=0;
 label=102;break;
 case 102: 
 var $621=$l;
 var $622=$c4;
 var $623=($622&255);
 var $624=($621|0)<($623|0);
 if($624){label=103;break;}else{label=114;break;}
 case 103: 
 var $626=$k;
 var $627=((($626)+(1))|0);
 $k=$627;
 var $628=$k;
 var $629=($628<<2);
 var $630=$i;
 var $631=($630<<2);
 var $632=$j;
 var $633=((($631)+($632))|0);
 var $634=(($tdata+($633<<8))|0);
 var $635=(($634+$629)|0);
 $x1=$635;
 var $636=$c1;
 var $637=($636&255);
 var $638=$637<<4;
 var $639=$638&16;
 var $640=$c1;
 var $641=($640&255);
 var $642=(((($641|0))/(2))&-1);
 var $643=((4504+($642<<1))|0);
 var $644=(($643)|0);
 var $645=HEAP8[($644)];
 var $646=($645&255);
 var $647=$639|$646;
 var $648=(($647)&255);
 var $649=$x1;
 var $650=(($649+1)|0);
 $x1=$650;
 HEAP8[($649)]=$648;
 var $651=$c1;
 var $652=($651&255);
 var $653=(((($652|0))/(2))&-1);
 var $654=((4504+($653<<1))|0);
 var $655=(($654+1)|0);
 var $656=HEAP8[($655)];
 var $657=$x1;
 var $658=(($657+1)|0);
 $x1=$658;
 HEAP8[($657)]=$656;
 var $659=$c2;
 var $660=($659&255);
 var $661=$660&15;
 var $662=(($661)&255);
 $c6=$662;
 var $663=$c6;
 var $664=($663&255);
 var $665=($664|0)==8;
 if($665){label=104;break;}else{label=105;break;}
 case 104: 
 var $667=$c2;
 var $668=($667&255);
 var $669=((($668)-(8))|0);
 var $670=(($669)&255);
 $c2=$670;
 label=105;break;
 case 105: 
 var $672=$c2;
 var $673=$x1;
 var $674=(($673+1)|0);
 $x1=$674;
 HEAP8[($673)]=$672;
 var $675=$c6;
 var $676=($675&255);
 var $677=($676|0)==5;
 if($677){label=108;break;}else{label=106;break;}
 case 106: 
 var $679=$c6;
 var $680=($679&255);
 var $681=($680|0)==6;
 if($681){label=108;break;}else{label=107;break;}
 case 107: 
 var $683=$c6;
 var $684=($683&255);
 var $685=($684|0)==10;
 if($685){label=108;break;}else{label=112;break;}
 case 108: 
 var $687=$c3;
 var $688=($687&255);
 var $689=($688|0)>127;
 if($689){label=109;break;}else{label=110;break;}
 case 109: 
 var $691=$c3;
 var $692=($691&255);
 var $693=(((256)-($692))|0);
 var $694=$693<<4;
 var $699=$694;label=111;break;
 case 110: 
 var $696=$c3;
 var $697=($696&255);
 var $699=$697;label=111;break;
 case 111: 
 var $699;
 var $700=(($699)&255);
 $c3=$700;
 label=112;break;
 case 112: 
 var $702=$c3;
 var $703=$x1;
 var $704=(($703+1)|0);
 $x1=$704;
 HEAP8[($703)]=$702;
 label=113;break;
 case 113: 
 var $706=$l;
 var $707=((($706)+(1))|0);
 $l=$707;
 label=102;break;
 case 114: 
 label=227;break;
 case 115: 
 var $710=$c1;
 var $711=($710&255);
 var $712=$711&127;
 var $713=($712|0)==127;
 if($713){label=116;break;}else{label=213;break;}
 case 116: 
 var $715=$c1;
 var $716=($715&255);
 var $717=$716^-1;
 var $718=$717&128;
 var $719=($718|0)!=0;
 if($719){label=117;break;}else{label=118;break;}
 case 117: 
 label=227;break;
 case 118: 
 var $722=$2;
 var $723=_read8($722);
 $c2=$723;
 var $724=$c2;
 var $725=($724&255);
 var $726=($725|0)<64;
 if($726){label=119;break;}else{label=120;break;}
 case 119: 
 var $728=$c2;
 var $729=($728&255);
 var $730=$k;
 var $731=((($730)+($729))|0);
 $k=$731;
 label=227;break;
 case 120: 
 var $733=$c2;
 var $734=($733&255);
 var $735=((($734)-(64))|0);
 var $736=(($735)&255);
 $c2=$736;
 var $737=$2;
 var $738=_read8($737);
 $c3=$738;
 var $739=$c3;
 var $740=($739&255);
 $z=$740;
 var $741=$c2;
 var $742=($741&255);
 var $743=($742|0)>=128;
 if($743){label=121;break;}else{label=122;break;}
 case 121: 
 var $745=$c2;
 var $746=($745&255);
 var $747=((($746)-(128))|0);
 var $748=(($747)&255);
 $c2=$748;
 var $749=$2;
 var $750=_read8($749);
 $c4=$750;
 var $751=$c3;
 var $752=($751&255);
 var $753=$752<<8;
 var $754=$c4;
 var $755=($754&255);
 var $756=((($753)+($755))|0);
 $z=$756;
 label=122;break;
 case 122: 
 var $758=$2;
 var $759=_ftell($758);
 $a=$759;
 var $760=$c2;
 $c5=$760;
 var $761=$2;
 var $762=$z;
 var $763=(((-$762))|0);
 var $764=_fseek($761,$763,1);
 $l=0;
 label=123;break;
 case 123: 
 var $766=$l;
 var $767=$c5;
 var $768=($767&255);
 var $769=($766|0)<=($768|0);
 if($769){label=124;break;}else{var $775=0;label=125;break;}
 case 124: 
 var $771=$k;
 var $772=$max_row;
 var $773=($771|0)<=($772|0);
 var $775=$773;label=125;break;
 case 125: 
 var $775;
 if($775){label=126;break;}else{label=212;break;}
 case 126: 
 var $777=$2;
 var $778=_read8($777);
 $c1=$778;
 var $779=$k;
 var $780=($779<<2);
 var $781=$i;
 var $782=($781<<2);
 var $783=$j;
 var $784=((($782)+($783))|0);
 var $785=(($tdata+($784<<8))|0);
 var $786=(($785+$780)|0);
 $x1=$786;
 var $787=$c1;
 var $788=($787&255);
 var $789=$788&112;
 var $790=($789|0)==112;
 if($790){label=127;break;}else{label=138;break;}
 case 127: 
 var $792=$c1;
 var $793=($792&255);
 var $794=($793|0)!=255;
 if($794){label=128;break;}else{label=138;break;}
 case 128: 
 var $796=$c1;
 var $797=($796&255);
 var $798=($797|0)!=127;
 if($798){label=129;break;}else{label=138;break;}
 case 129: 
 var $800=$2;
 var $801=_read8($800);
 $c2=$801;
 var $802=$c1;
 var $803=($802&255);
 var $804=$803<<4;
 var $805=$804&240;
 var $806=$c2;
 var $807=($806&255);
 var $808=$807>>4;
 var $809=$808&14;
 var $810=$805|$809;
 var $811=(($810)&255);
 $c6=$811;
 var $812=$c2;
 var $813=($812&255);
 var $814=$813&16;
 var $815=$c6;
 var $816=($815&255);
 var $817=(((($816|0))/(2))&-1);
 var $818=((4504+($817<<1))|0);
 var $819=(($818)|0);
 var $820=HEAP8[($819)];
 var $821=($820&255);
 var $822=$814|$821;
 var $823=(($822)&255);
 var $824=$x1;
 var $825=(($824+1)|0);
 $x1=$825;
 HEAP8[($824)]=$823;
 var $826=$c6;
 var $827=($826&255);
 var $828=(((($827|0))/(2))&-1);
 var $829=((4504+($828<<1))|0);
 var $830=(($829+1)|0);
 var $831=HEAP8[($830)];
 var $832=$x1;
 var $833=(($832+1)|0);
 $x1=$833;
 HEAP8[($832)]=$831;
 var $834=$c2;
 var $835=($834&255);
 var $836=$835<<4;
 var $837=$836&240;
 var $838=(($837)&255);
 var $839=$x1;
 var $840=(($839+1)|0);
 $x1=$840;
 HEAP8[($839)]=$838;
 var $841=$c1;
 var $842=($841&255);
 var $843=$842&128;
 var $844=($843|0)!=0;
 if($844){label=130;break;}else{label=137;break;}
 case 130: 
 var $846=$2;
 var $847=_read8($846);
 $c3=$847;
 var $848=$c3;
 var $849=($848&255);
 var $850=($849|0)<128;
 if($850){label=131;break;}else{label=132;break;}
 case 131: 
 var $852=$c3;
 var $853=($852&255);
 var $854=$k;
 var $855=((($854)+($853))|0);
 $k=$855;
 label=211;break;
 case 132: 
 var $857=$c3;
 var $858=($857&255);
 var $859=((($858)-(128))|0);
 var $860=(($859)&255);
 $c4=$860;
 $b=0;
 label=133;break;
 case 133: 
 var $862=$b;
 var $863=$c4;
 var $864=($863&255);
 var $865=($862|0)<($864|0);
 if($865){label=134;break;}else{label=136;break;}
 case 134: 
 var $867=$k;
 var $868=((($867)+(1))|0);
 $k=$868;
 var $869=$k;
 var $870=($869<<2);
 var $871=$i;
 var $872=($871<<2);
 var $873=$j;
 var $874=((($872)+($873))|0);
 var $875=(($tdata+($874<<8))|0);
 var $876=(($875+$870)|0);
 $x1=$876;
 var $877=$c2;
 var $878=($877&255);
 var $879=$878&16;
 var $880=$c6;
 var $881=($880&255);
 var $882=(((($881|0))/(2))&-1);
 var $883=((4504+($882<<1))|0);
 var $884=(($883)|0);
 var $885=HEAP8[($884)];
 var $886=($885&255);
 var $887=$879|$886;
 var $888=(($887)&255);
 var $889=$x1;
 var $890=(($889+1)|0);
 $x1=$890;
 HEAP8[($889)]=$888;
 var $891=$c6;
 var $892=($891&255);
 var $893=(((($892|0))/(2))&-1);
 var $894=((4504+($893<<1))|0);
 var $895=(($894+1)|0);
 var $896=HEAP8[($895)];
 var $897=$x1;
 var $898=(($897+1)|0);
 $x1=$898;
 HEAP8[($897)]=$896;
 var $899=$c2;
 var $900=($899&255);
 var $901=$900<<4;
 var $902=$901&240;
 var $903=(($902)&255);
 var $904=$x1;
 var $905=(($904+1)|0);
 $x1=$905;
 HEAP8[($904)]=$903;
 label=135;break;
 case 135: 
 var $907=$b;
 var $908=((($907)+(1))|0);
 $b=$908;
 label=133;break;
 case 136: 
 label=137;break;
 case 137: 
 label=211;break;
 case 138: 
 var $912=$c1;
 var $913=($912&255);
 var $914=$913&96;
 var $915=($914|0)==96;
 if($915){label=139;break;}else{label=163;break;}
 case 139: 
 var $917=$c1;
 var $918=($917&255);
 var $919=($918|0)!=255;
 if($919){label=140;break;}else{label=163;break;}
 case 140: 
 var $921=$c1;
 var $922=($921&255);
 var $923=($922|0)!=127;
 if($923){label=141;break;}else{label=163;break;}
 case 141: 
 var $925=$2;
 var $926=_read8($925);
 $c2=$926;
 var $927=$c1;
 var $928=($927&255);
 var $929=$928&15;
 var $930=(($929)&255);
 $c6=$930;
 var $931=$c6;
 var $932=($931&255);
 var $933=($932|0)==8;
 if($933){label=142;break;}else{label=143;break;}
 case 142: 
 var $935=$c1;
 var $936=($935&255);
 var $937=((($936)-(8))|0);
 var $938=(($937)&255);
 $c1=$938;
 label=143;break;
 case 143: 
 var $940=$x1;
 var $941=(($940+2)|0);
 $x1=$941;
 var $942=$c1;
 var $943=($942&255);
 var $944=$943&15;
 var $945=(($944)&255);
 var $946=$x1;
 var $947=(($946+1)|0);
 $x1=$947;
 HEAP8[($946)]=$945;
 var $948=$c6;
 var $949=($948&255);
 var $950=($949|0)==5;
 if($950){label=146;break;}else{label=144;break;}
 case 144: 
 var $952=$c6;
 var $953=($952&255);
 var $954=($953|0)==6;
 if($954){label=146;break;}else{label=145;break;}
 case 145: 
 var $956=$c6;
 var $957=($956&255);
 var $958=($957|0)==10;
 if($958){label=146;break;}else{label=150;break;}
 case 146: 
 var $960=$c2;
 var $961=($960&255);
 var $962=($961|0)>127;
 if($962){label=147;break;}else{label=148;break;}
 case 147: 
 var $964=$c2;
 var $965=($964&255);
 var $966=(((256)-($965))|0);
 var $967=$966<<4;
 var $972=$967;label=149;break;
 case 148: 
 var $969=$c2;
 var $970=($969&255);
 var $972=$970;label=149;break;
 case 149: 
 var $972;
 var $973=(($972)&255);
 $c2=$973;
 label=150;break;
 case 150: 
 var $975=$c2;
 var $976=$x1;
 var $977=(($976+1)|0);
 $x1=$977;
 HEAP8[($976)]=$975;
 var $978=$c6;
 var $979=($978&255);
 var $980=($979|0)==13;
 if($980){label=151;break;}else{label=152;break;}
 case 151: 
 var $982=$k;
 $max_row=$982;
 label=229;break;
 case 152: 
 var $984=$c6;
 var $985=($984&255);
 var $986=($985|0)==11;
 if($986){label=153;break;}else{label=154;break;}
 case 153: 
 var $988=$k;
 $max_row=$988;
 label=229;break;
 case 154: 
 var $990=$c1;
 var $991=($990&255);
 var $992=$991&128;
 var $993=($992|0)!=0;
 if($993){label=155;break;}else{label=162;break;}
 case 155: 
 var $995=$2;
 var $996=_read8($995);
 $c3=$996;
 var $997=$c3;
 var $998=($997&255);
 var $999=($998|0)<128;
 if($999){label=156;break;}else{label=157;break;}
 case 156: 
 var $1001=$c3;
 var $1002=($1001&255);
 var $1003=$k;
 var $1004=((($1003)+($1002))|0);
 $k=$1004;
 label=211;break;
 case 157: 
 var $1006=$c3;
 var $1007=($1006&255);
 var $1008=((($1007)-(128))|0);
 var $1009=(($1008)&255);
 $c4=$1009;
 $b=0;
 label=158;break;
 case 158: 
 var $1011=$b;
 var $1012=$c4;
 var $1013=($1012&255);
 var $1014=($1011|0)<($1013|0);
 if($1014){label=159;break;}else{label=161;break;}
 case 159: 
 var $1016=$k;
 var $1017=((($1016)+(1))|0);
 $k=$1017;
 var $1018=$k;
 var $1019=($1018<<2);
 var $1020=$i;
 var $1021=($1020<<2);
 var $1022=$j;
 var $1023=((($1021)+($1022))|0);
 var $1024=(($tdata+($1023<<8))|0);
 var $1025=(($1024+$1019)|0);
 var $1026=(($1025+2)|0);
 $x1=$1026;
 var $1027=$c1;
 var $1028=($1027&255);
 var $1029=$1028&15;
 var $1030=(($1029)&255);
 var $1031=$x1;
 var $1032=(($1031+1)|0);
 $x1=$1032;
 HEAP8[($1031)]=$1030;
 var $1033=$c2;
 var $1034=$x1;
 var $1035=(($1034+1)|0);
 $x1=$1035;
 HEAP8[($1034)]=$1033;
 label=160;break;
 case 160: 
 var $1037=$b;
 var $1038=((($1037)+(1))|0);
 $b=$1038;
 label=158;break;
 case 161: 
 label=162;break;
 case 162: 
 label=211;break;
 case 163: 
 var $1042=$c1;
 var $1043=($1042&255);
 var $1044=$1043&128;
 var $1045=($1044|0)!=0;
 if($1045){label=164;break;}else{label=195;break;}
 case 164: 
 var $1047=$c1;
 var $1048=($1047&255);
 var $1049=($1048|0)!=255;
 if($1049){label=165;break;}else{label=195;break;}
 case 165: 
 var $1051=$c1;
 var $1052=($1051&255);
 var $1053=($1052|0)!=127;
 if($1053){label=166;break;}else{label=195;break;}
 case 166: 
 var $1055=$2;
 var $1056=_read8($1055);
 $c2=$1056;
 var $1057=$2;
 var $1058=_read8($1057);
 $c3=$1058;
 var $1059=$2;
 var $1060=_read8($1059);
 $c4=$1060;
 var $1061=$c1;
 var $1062=($1061&255);
 var $1063=$1062&127;
 var $1064=(($1063)&255);
 $c1=$1064;
 var $1065=$c1;
 var $1066=($1065&255);
 var $1067=$1066<<4;
 var $1068=$1067&16;
 var $1069=$c1;
 var $1070=($1069&255);
 var $1071=(((($1070|0))/(2))&-1);
 var $1072=((4504+($1071<<1))|0);
 var $1073=(($1072)|0);
 var $1074=HEAP8[($1073)];
 var $1075=($1074&255);
 var $1076=$1068|$1075;
 var $1077=(($1076)&255);
 var $1078=$x1;
 var $1079=(($1078+1)|0);
 $x1=$1079;
 HEAP8[($1078)]=$1077;
 var $1080=$c1;
 var $1081=($1080&255);
 var $1082=(((($1081|0))/(2))&-1);
 var $1083=((4504+($1082<<1))|0);
 var $1084=(($1083+1)|0);
 var $1085=HEAP8[($1084)];
 var $1086=$x1;
 var $1087=(($1086+1)|0);
 $x1=$1087;
 HEAP8[($1086)]=$1085;
 var $1088=$c2;
 var $1089=($1088&255);
 var $1090=$1089&15;
 var $1091=(($1090)&255);
 $c6=$1091;
 var $1092=$c6;
 var $1093=($1092&255);
 var $1094=($1093|0)==8;
 if($1094){label=167;break;}else{label=168;break;}
 case 167: 
 var $1096=$c2;
 var $1097=($1096&255);
 var $1098=((($1097)-(8))|0);
 var $1099=(($1098)&255);
 $c2=$1099;
 label=168;break;
 case 168: 
 var $1101=$c2;
 var $1102=$x1;
 var $1103=(($1102+1)|0);
 $x1=$1103;
 HEAP8[($1102)]=$1101;
 var $1104=$c6;
 var $1105=($1104&255);
 var $1106=($1105|0)==5;
 if($1106){label=171;break;}else{label=169;break;}
 case 169: 
 var $1108=$c6;
 var $1109=($1108&255);
 var $1110=($1109|0)==6;
 if($1110){label=171;break;}else{label=170;break;}
 case 170: 
 var $1112=$c6;
 var $1113=($1112&255);
 var $1114=($1113|0)==10;
 if($1114){label=171;break;}else{label=175;break;}
 case 171: 
 var $1116=$c3;
 var $1117=($1116&255);
 var $1118=($1117|0)>127;
 if($1118){label=172;break;}else{label=173;break;}
 case 172: 
 var $1120=$c3;
 var $1121=($1120&255);
 var $1122=(((256)-($1121))|0);
 var $1123=$1122<<4;
 var $1128=$1123;label=174;break;
 case 173: 
 var $1125=$c3;
 var $1126=($1125&255);
 var $1128=$1126;label=174;break;
 case 174: 
 var $1128;
 var $1129=(($1128)&255);
 $c3=$1129;
 label=175;break;
 case 175: 
 var $1131=$c3;
 var $1132=$x1;
 var $1133=(($1132+1)|0);
 $x1=$1133;
 HEAP8[($1132)]=$1131;
 var $1134=$c6;
 var $1135=($1134&255);
 var $1136=($1135|0)==13;
 if($1136){label=176;break;}else{label=177;break;}
 case 176: 
 var $1138=$k;
 $max_row=$1138;
 label=229;break;
 case 177: 
 var $1140=$c6;
 var $1141=($1140&255);
 var $1142=($1141|0)==11;
 if($1142){label=178;break;}else{label=179;break;}
 case 178: 
 var $1144=$k;
 $max_row=$1144;
 label=229;break;
 case 179: 
 var $1146=$c4;
 var $1147=($1146&255);
 var $1148=($1147|0)<128;
 if($1148){label=180;break;}else{label=181;break;}
 case 180: 
 var $1150=$c4;
 var $1151=($1150&255);
 var $1152=$k;
 var $1153=((($1152)+($1151))|0);
 $k=$1153;
 label=211;break;
 case 181: 
 var $1155=$c4;
 var $1156=($1155&255);
 var $1157=((($1156)-(128))|0);
 var $1158=(($1157)&255);
 $c4=$1158;
 $b=0;
 label=182;break;
 case 182: 
 var $1160=$b;
 var $1161=$c4;
 var $1162=($1161&255);
 var $1163=($1160|0)<($1162|0);
 if($1163){label=183;break;}else{label=194;break;}
 case 183: 
 var $1165=$k;
 var $1166=((($1165)+(1))|0);
 $k=$1166;
 var $1167=$k;
 var $1168=($1167<<2);
 var $1169=$i;
 var $1170=($1169<<2);
 var $1171=$j;
 var $1172=((($1170)+($1171))|0);
 var $1173=(($tdata+($1172<<8))|0);
 var $1174=(($1173+$1168)|0);
 $x1=$1174;
 var $1175=$c1;
 var $1176=($1175&255);
 var $1177=$1176<<4;
 var $1178=$1177&16;
 var $1179=$c1;
 var $1180=($1179&255);
 var $1181=(((($1180|0))/(2))&-1);
 var $1182=((4504+($1181<<1))|0);
 var $1183=(($1182)|0);
 var $1184=HEAP8[($1183)];
 var $1185=($1184&255);
 var $1186=$1178|$1185;
 var $1187=(($1186)&255);
 var $1188=$x1;
 var $1189=(($1188+1)|0);
 $x1=$1189;
 HEAP8[($1188)]=$1187;
 var $1190=$c1;
 var $1191=($1190&255);
 var $1192=(((($1191|0))/(2))&-1);
 var $1193=((4504+($1192<<1))|0);
 var $1194=(($1193+1)|0);
 var $1195=HEAP8[($1194)];
 var $1196=$x1;
 var $1197=(($1196+1)|0);
 $x1=$1197;
 HEAP8[($1196)]=$1195;
 var $1198=$c2;
 var $1199=($1198&255);
 var $1200=$1199&15;
 var $1201=(($1200)&255);
 $c6=$1201;
 var $1202=$c6;
 var $1203=($1202&255);
 var $1204=($1203|0)==8;
 if($1204){label=184;break;}else{label=185;break;}
 case 184: 
 var $1206=$c2;
 var $1207=($1206&255);
 var $1208=((($1207)-(8))|0);
 var $1209=(($1208)&255);
 $c2=$1209;
 label=185;break;
 case 185: 
 var $1211=$c2;
 var $1212=$x1;
 var $1213=(($1212+1)|0);
 $x1=$1213;
 HEAP8[($1212)]=$1211;
 var $1214=$c6;
 var $1215=($1214&255);
 var $1216=($1215|0)==5;
 if($1216){label=188;break;}else{label=186;break;}
 case 186: 
 var $1218=$c6;
 var $1219=($1218&255);
 var $1220=($1219|0)==6;
 if($1220){label=188;break;}else{label=187;break;}
 case 187: 
 var $1222=$c6;
 var $1223=($1222&255);
 var $1224=($1223|0)==10;
 if($1224){label=188;break;}else{label=192;break;}
 case 188: 
 var $1226=$c3;
 var $1227=($1226&255);
 var $1228=($1227|0)>127;
 if($1228){label=189;break;}else{label=190;break;}
 case 189: 
 var $1230=$c3;
 var $1231=($1230&255);
 var $1232=(((256)-($1231))|0);
 var $1233=$1232<<4;
 var $1238=$1233;label=191;break;
 case 190: 
 var $1235=$c3;
 var $1236=($1235&255);
 var $1238=$1236;label=191;break;
 case 191: 
 var $1238;
 var $1239=(($1238)&255);
 $c3=$1239;
 label=192;break;
 case 192: 
 var $1241=$c3;
 var $1242=$x1;
 var $1243=(($1242+1)|0);
 $x1=$1243;
 HEAP8[($1242)]=$1241;
 label=193;break;
 case 193: 
 var $1245=$b;
 var $1246=((($1245)+(1))|0);
 $b=$1246;
 label=182;break;
 case 194: 
 label=211;break;
 case 195: 
 var $1249=$c1;
 var $1250=($1249&255);
 var $1251=$1250&127;
 var $1252=($1251|0)==127;
 if($1252){label=196;break;}else{label=201;break;}
 case 196: 
 var $1254=$c1;
 var $1255=($1254&255);
 var $1256=$1255&128;
 var $1257=($1256|0)==0;
 if($1257){label=197;break;}else{label=198;break;}
 case 197: 
 label=211;break;
 case 198: 
 var $1260=$2;
 var $1261=_read8($1260);
 $c2=$1261;
 var $1262=$c2;
 var $1263=($1262&255);
 var $1264=($1263|0)<64;
 if($1264){label=199;break;}else{label=200;break;}
 case 199: 
 var $1266=$c2;
 var $1267=($1266&255);
 var $1268=$k;
 var $1269=((($1268)+($1267))|0);
 $k=$1269;
 label=211;break;
 case 200: 
 label=211;break;
 case 201: 
 var $1272=$2;
 var $1273=_read8($1272);
 $c2=$1273;
 var $1274=$2;
 var $1275=_read8($1274);
 $c3=$1275;
 var $1276=$c1;
 var $1277=($1276&255);
 var $1278=$1277<<4;
 var $1279=$1278&16;
 var $1280=$c1;
 var $1281=($1280&255);
 var $1282=(((($1281|0))/(2))&-1);
 var $1283=((4504+($1282<<1))|0);
 var $1284=(($1283)|0);
 var $1285=HEAP8[($1284)];
 var $1286=($1285&255);
 var $1287=$1279|$1286;
 var $1288=(($1287)&255);
 var $1289=$x1;
 var $1290=(($1289+1)|0);
 $x1=$1290;
 HEAP8[($1289)]=$1288;
 var $1291=$c1;
 var $1292=($1291&255);
 var $1293=(((($1292|0))/(2))&-1);
 var $1294=((4504+($1293<<1))|0);
 var $1295=(($1294+1)|0);
 var $1296=HEAP8[($1295)];
 var $1297=$x1;
 var $1298=(($1297+1)|0);
 $x1=$1298;
 HEAP8[($1297)]=$1296;
 var $1299=$c2;
 var $1300=($1299&255);
 var $1301=$1300&15;
 var $1302=(($1301)&255);
 $c6=$1302;
 var $1303=$c6;
 var $1304=($1303&255);
 var $1305=($1304|0)==8;
 if($1305){label=202;break;}else{label=203;break;}
 case 202: 
 var $1307=$c2;
 var $1308=($1307&255);
 var $1309=((($1308)-(8))|0);
 var $1310=(($1309)&255);
 $c2=$1310;
 label=203;break;
 case 203: 
 var $1312=$c2;
 var $1313=$x1;
 var $1314=(($1313+1)|0);
 $x1=$1314;
 HEAP8[($1313)]=$1312;
 var $1315=$c6;
 var $1316=($1315&255);
 var $1317=($1316|0)==5;
 if($1317){label=206;break;}else{label=204;break;}
 case 204: 
 var $1319=$c6;
 var $1320=($1319&255);
 var $1321=($1320|0)==6;
 if($1321){label=206;break;}else{label=205;break;}
 case 205: 
 var $1323=$c6;
 var $1324=($1323&255);
 var $1325=($1324|0)==10;
 if($1325){label=206;break;}else{label=210;break;}
 case 206: 
 var $1327=$c3;
 var $1328=($1327&255);
 var $1329=($1328|0)>127;
 if($1329){label=207;break;}else{label=208;break;}
 case 207: 
 var $1331=$c3;
 var $1332=($1331&255);
 var $1333=(((256)-($1332))|0);
 var $1334=$1333<<4;
 var $1339=$1334;label=209;break;
 case 208: 
 var $1336=$c3;
 var $1337=($1336&255);
 var $1339=$1337;label=209;break;
 case 209: 
 var $1339;
 var $1340=(($1339)&255);
 $c3=$1340;
 label=210;break;
 case 210: 
 var $1342=$c3;
 var $1343=$x1;
 var $1344=(($1343+1)|0);
 $x1=$1344;
 HEAP8[($1343)]=$1342;
 label=211;break;
 case 211: 
 var $1346=$l;
 var $1347=((($1346)+(1))|0);
 $l=$1347;
 var $1348=$k;
 var $1349=((($1348)+(1))|0);
 $k=$1349;
 label=123;break;
 case 212: 
 var $1351=$2;
 var $1352=$a;
 var $1353=_fseek($1351,$1352,0);
 var $1354=$k;
 var $1355=((($1354)-(1))|0);
 $k=$1355;
 label=227;break;
 case 213: 
 var $1357=$2;
 var $1358=_read8($1357);
 $c2=$1358;
 var $1359=$2;
 var $1360=_read8($1359);
 $c3=$1360;
 var $1361=$c1;
 var $1362=($1361&255);
 var $1363=$1362<<4;
 var $1364=$1363&16;
 var $1365=$c1;
 var $1366=($1365&255);
 var $1367=(((($1366|0))/(2))&-1);
 var $1368=((4504+($1367<<1))|0);
 var $1369=(($1368)|0);
 var $1370=HEAP8[($1369)];
 var $1371=($1370&255);
 var $1372=$1364|$1371;
 var $1373=(($1372)&255);
 var $1374=$x1;
 var $1375=(($1374+1)|0);
 $x1=$1375;
 HEAP8[($1374)]=$1373;
 var $1376=$c1;
 var $1377=($1376&255);
 var $1378=(((($1377|0))/(2))&-1);
 var $1379=((4504+($1378<<1))|0);
 var $1380=(($1379+1)|0);
 var $1381=HEAP8[($1380)];
 var $1382=$x1;
 var $1383=(($1382+1)|0);
 $x1=$1383;
 HEAP8[($1382)]=$1381;
 var $1384=$c2;
 var $1385=($1384&255);
 var $1386=$1385&15;
 var $1387=(($1386)&255);
 $c6=$1387;
 var $1388=$c6;
 var $1389=($1388&255);
 var $1390=($1389|0)==8;
 if($1390){label=214;break;}else{label=215;break;}
 case 214: 
 var $1392=$c2;
 var $1393=($1392&255);
 var $1394=((($1393)-(8))|0);
 var $1395=(($1394)&255);
 $c2=$1395;
 label=215;break;
 case 215: 
 var $1397=$c2;
 var $1398=$x1;
 var $1399=(($1398+1)|0);
 $x1=$1399;
 HEAP8[($1398)]=$1397;
 var $1400=$c6;
 var $1401=($1400&255);
 var $1402=($1401|0)==5;
 if($1402){label=218;break;}else{label=216;break;}
 case 216: 
 var $1404=$c6;
 var $1405=($1404&255);
 var $1406=($1405|0)==6;
 if($1406){label=218;break;}else{label=217;break;}
 case 217: 
 var $1408=$c6;
 var $1409=($1408&255);
 var $1410=($1409|0)==10;
 if($1410){label=218;break;}else{label=222;break;}
 case 218: 
 var $1412=$c3;
 var $1413=($1412&255);
 var $1414=($1413|0)>127;
 if($1414){label=219;break;}else{label=220;break;}
 case 219: 
 var $1416=$c3;
 var $1417=($1416&255);
 var $1418=(((256)-($1417))|0);
 var $1419=$1418<<4;
 var $1424=$1419;label=221;break;
 case 220: 
 var $1421=$c3;
 var $1422=($1421&255);
 var $1424=$1422;label=221;break;
 case 221: 
 var $1424;
 var $1425=(($1424)&255);
 $c3=$1425;
 label=222;break;
 case 222: 
 var $1427=$c3;
 var $1428=$x1;
 var $1429=(($1428+1)|0);
 $x1=$1429;
 HEAP8[($1428)]=$1427;
 var $1430=$c6;
 var $1431=($1430&255);
 var $1432=($1431|0)==13;
 if($1432){label=223;break;}else{label=224;break;}
 case 223: 
 var $1434=$k;
 $max_row=$1434;
 label=228;break;
 case 224: 
 var $1436=$c6;
 var $1437=($1436&255);
 var $1438=($1437|0)==11;
 if($1438){label=225;break;}else{label=226;break;}
 case 225: 
 var $1440=$k;
 $max_row=$1440;
 label=228;break;
 case 226: 
 label=227;break;
 case 227: 
 var $1443=$k;
 var $1444=((($1443)+(1))|0);
 $k=$1444;
 label=47;break;
 case 228: 
 label=229;break;
 case 229: 
 label=230;break;
 case 230: 
 var $1448=$j;
 var $1449=((($1448)+(1))|0);
 $j=$1449;
 label=45;break;
 case 231: 
 label=232;break;
 case 232: 
 var $1452=$i;
 var $1453=((($1452)+(1))|0);
 $i=$1453;
 label=43;break;
 case 233: 
 $i=0;
 label=234;break;
 case 234: 
 var $1456=$i;
 var $1457=$npat;
 var $1458=($1456|0)<($1457|0);
 if($1458){label=235;break;}else{label=245;break;}
 case 235: 
 var $1460=$tmp;
 _memset($1460, 0, 1024)|0;
 $j=0;
 label=236;break;
 case 236: 
 var $1462=$j;
 var $1463=($1462|0)<64;
 if($1463){label=237;break;}else{label=243;break;}
 case 237: 
 $k=0;
 label=238;break;
 case 238: 
 var $1466=$k;
 var $1467=($1466|0)<4;
 if($1467){label=239;break;}else{label=241;break;}
 case 239: 
 var $1469=$j;
 var $1470=($1469<<4);
 var $1471=$k;
 var $1472=($1471<<2);
 var $1473=((($1470)+($1472))|0);
 var $1474=(($tmp+$1473)|0);
 var $1475=$j;
 var $1476=($1475<<2);
 var $1477=$k;
 var $1478=$i;
 var $1479=($1478<<2);
 var $1480=((($1477)+($1479))|0);
 var $1481=(($tdata+($1480<<8))|0);
 var $1482=(($1481+$1476)|0);
 assert(4 % 1 === 0);HEAP8[($1474)]=HEAP8[($1482)];HEAP8[((($1474)+(1))|0)]=HEAP8[((($1482)+(1))|0)];HEAP8[((($1474)+(2))|0)]=HEAP8[((($1482)+(2))|0)];HEAP8[((($1474)+(3))|0)]=HEAP8[((($1482)+(3))|0)];
 label=240;break;
 case 240: 
 var $1484=$k;
 var $1485=((($1484)+(1))|0);
 $k=$1485;
 label=238;break;
 case 241: 
 label=242;break;
 case 242: 
 var $1488=$j;
 var $1489=((($1488)+(1))|0);
 $j=$1489;
 label=236;break;
 case 243: 
 var $1491=(($tmp)|0);
 var $1492=$3;
 var $1493=_fwrite($1491,1024,1,$1492);
 label=244;break;
 case 244: 
 var $1495=$i;
 var $1496=((($1495)+(1))|0);
 $i=$1496;
 label=234;break;
 case 245: 
 var $1498=$2;
 var $1499=$sdata_addr;
 var $1500=_fseek($1498,$1499,0);
 $i=0;
 label=246;break;
 case 246: 
 var $1502=$i;
 var $1503=$nins;
 var $1504=($1502|0)<($1503|0);
 if($1504){label=247;break;}else{label=255;break;}
 case 247: 
 var $1506=$2;
 var $1507=$sdata_addr;
 var $1508=$i;
 var $1509=(($saddr+($1508<<2))|0);
 var $1510=HEAP32[(($1509)>>2)];
 var $1511=((($1507)+($1510))|0);
 var $1512=_fseek($1506,$1511,0);
 var $1513=$i;
 var $1514=(($smp_size+($1513<<2))|0);
 var $1515=HEAP32[(($1514)>>2)];
 var $1516=_malloc($1515);
 $smp_buffer=$1516;
 var $1517=$smp_buffer;
 var $1518=$i;
 var $1519=(($smp_size+($1518<<2))|0);
 var $1520=HEAP32[(($1519)>>2)];
 _memset($1517, 0, $1520)|0;
 var $1521=$smp_buffer;
 var $1522=$i;
 var $1523=(($smp_size+($1522<<2))|0);
 var $1524=HEAP32[(($1523)>>2)];
 var $1525=$2;
 var $1526=_fread($1521,$1524,1,$1525);
 var $1527=$use_delta;
 var $1528=($1527&255);
 var $1529=($1528|0)==1;
 if($1529){label=248;break;}else{label=253;break;}
 case 248: 
 $c1=0;
 $j=1;
 label=249;break;
 case 249: 
 var $1532=$j;
 var $1533=$i;
 var $1534=(($smp_size+($1533<<2))|0);
 var $1535=HEAP32[(($1534)>>2)];
 var $1536=($1532|0)<($1535|0);
 if($1536){label=250;break;}else{label=252;break;}
 case 250: 
 var $1538=$j;
 var $1539=$smp_buffer;
 var $1540=(($1539+$1538)|0);
 var $1541=HEAP8[($1540)];
 $c2=$1541;
 var $1542=$c2;
 var $1543=($1542&255);
 var $1544=(((256)-($1543))|0);
 var $1545=(($1544)&255);
 $c2=$1545;
 var $1546=$c2;
 var $1547=($1546&255);
 var $1548=$c1;
 var $1549=($1548&255);
 var $1550=((($1547)+($1549))|0);
 var $1551=(($1550)&255);
 $c3=$1551;
 var $1552=$c3;
 var $1553=$j;
 var $1554=$smp_buffer;
 var $1555=(($1554+$1553)|0);
 HEAP8[($1555)]=$1552;
 var $1556=$c3;
 $c1=$1556;
 label=251;break;
 case 251: 
 var $1558=$j;
 var $1559=((($1558)+(1))|0);
 $j=$1559;
 label=249;break;
 case 252: 
 label=253;break;
 case 253: 
 var $1562=$smp_buffer;
 var $1563=$i;
 var $1564=(($smp_size+($1563<<2))|0);
 var $1565=HEAP32[(($1564)>>2)];
 var $1566=$3;
 var $1567=_fwrite($1562,$1565,1,$1566);
 var $1568=$smp_buffer;
 _free($1568);
 label=254;break;
 case 254: 
 var $1570=$i;
 var $1571=((($1570)+(1))|0);
 $i=$1571;
 label=246;break;
 case 255: 
 $1=0;
 label=256;break;
 case 256: 
 var $1574=$1;
 STACKTOP=sp;return $1574;
  default: assert(0, "bad label: " + label);
 }
}
function _test_pha($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<963;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((963)-($9))|0);
 $1=$10;
 label=30;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$2;
 var $14=(($13+10)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=3;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=$2;
 var $20=(($19+11)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)!=192;
 if($23){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=30;break;
 case 8: 
 $l=0;
 $j=0;
 label=9;break;
 case 9: 
 var $27=$j;
 var $28=($27|0)<31;
 if($28){label=10;break;}else{label=18;break;}
 case 10: 
 var $30=$2;
 var $31=$start;
 var $32=(($30+$31)|0);
 var $33=$j;
 var $34=((($33)*(14))&-1);
 var $35=(($32+$34)|0);
 var $36=_readmem16b($35);
 var $37=($36&65535);
 var $38=($37<<1);
 $n=$38;
 var $39=$n;
 var $40=$l;
 var $41=((($40)+($39))|0);
 $l=$41;
 var $42=$start;
 var $43=$j;
 var $44=((($43)*(14))&-1);
 var $45=((($42)+($44))|0);
 var $46=((($45)+(3))|0);
 var $47=$2;
 var $48=(($47+$46)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=($50|0)>64;
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 $1=-1;
 label=30;break;
 case 12: 
 var $54=$2;
 var $55=$start;
 var $56=(($54+$55)|0);
 var $57=$j;
 var $58=((($57)*(14))&-1);
 var $59=(($56+$58)|0);
 var $60=(($59+4)|0);
 var $61=_readmem16b($60);
 var $62=($61&65535);
 var $63=($62<<1);
 $m=$63;
 var $64=$m;
 var $65=$l;
 var $66=($64|0)>($65|0);
 if($66){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=30;break;
 case 14: 
 var $69=$2;
 var $70=$start;
 var $71=(($69+$70)|0);
 var $72=$j;
 var $73=((($72)*(14))&-1);
 var $74=(($71+$73)|0);
 var $75=(($74+8)|0);
 var $76=_readmem32b($75);
 $k=$76;
 var $77=$k;
 var $78=($77|0)<960;
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=30;break;
 case 16: 
 label=17;break;
 case 17: 
 var $82=$j;
 var $83=((($82)+(1))|0);
 $j=$83;
 label=9;break;
 case 18: 
 var $85=$l;
 var $86=($85|0)<=2;
 if($86){label=20;break;}else{label=19;break;}
 case 19: 
 var $88=$l;
 var $89=($88|0)>2031585;
 if($89){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-1;
 label=30;break;
 case 21: 
 var $92=$l;
 var $93=((($92)+(960))|0);
 $l=$93;
 $k=0;
 $j=0;
 label=22;break;
 case 22: 
 var $95=$j;
 var $96=($95|0)<128;
 if($96){label=23;break;}else{label=29;break;}
 case 23: 
 var $98=$2;
 var $99=$start;
 var $100=(($98+$99)|0);
 var $101=(($100+448)|0);
 var $102=$j;
 var $103=($102<<2);
 var $104=(($101+$103)|0);
 var $105=_readmem32b($104);
 $ssize=$105;
 var $106=$ssize;
 var $107=$k;
 var $108=($106|0)>($107|0);
 if($108){label=24;break;}else{label=25;break;}
 case 24: 
 var $110=$ssize;
 $k=$110;
 label=25;break;
 case 25: 
 var $112=$ssize;
 var $113=((($112)+(2))|0);
 var $114=$l;
 var $115=($113|0)<($114|0);
 if($115){label=26;break;}else{label=27;break;}
 case 26: 
 $1=-1;
 label=30;break;
 case 27: 
 label=28;break;
 case 28: 
 var $119=$j;
 var $120=((($119)+(1))|0);
 $j=$120;
 label=22;break;
 case 29: 
 $ssize=0;
 var $122=$3;
 _pw_read_title(0,$122,0);
 $1=0;
 label=30;break;
 case 30: 
 var $124=$1;
 STACKTOP=sp;return $124;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_pha($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1816)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $pnum=sp;
 var $pnum1=(sp)+(128);
 var $nop;
 var $pdata;
 var $pat;
 var $onote=(sp)+(256);
 var $note;
 var $ins;
 var $fxt;
 var $fxp;
 var $npat;
 var $paddr=(sp)+(272);
 var $i;
 var $j;
 var $k;
 var $paddr1=(sp)+(784);
 var $paddr2=(sp)+(1296);
 var $tmp_ptr;
 var $tmp1;
 var $tmp2;
 var $pat_addr;
 var $psize;
 var $size;
 var $ssize;
 var $smp_addr;
 var $ocpt=(sp)+(1808);
 $1=$in;
 $2=$out;
 $npat=0;
 $ssize=0;
 var $3=$paddr;
 _memset($3, 0, 512)|0;
 var $4=$paddr1;
 _memset($4, 0, 512)|0;
 var $5=$paddr2;
 _memset($5, 0, 512)|0;
 var $6=$pnum;
 _memset($6, 0, 128)|0;
 var $7=$pnum1;
 _memset($7, 0, 128)|0;
 var $8=$onote;
 _memset($8, 0, 16)|0;
 var $9=$ocpt;
 HEAP16[(($9)>>1)]=0; HEAP16[((($9)+(2))>>1)]=0; HEAP16[((($9)+(4))>>1)]=0; HEAP16[((($9)+(6))>>1)]=0;
 var $10=$2;
 var $11=_pw_write_zero($10,20);
 $i=0;
 label=2;break;
 case 2: 
 var $13=$i;
 var $14=($13|0)<31;
 if($14){label=3;break;}else{label=7;break;}
 case 3: 
 var $16=$2;
 var $17=_pw_write_zero($16,22);
 var $18=$2;
 var $19=$1;
 var $20=_read16b($19);
 var $21=($20&65535);
 $size=$21;
 var $22=(($21)&65535);
 _write16b($18,$22);
 var $23=$size;
 var $24=($23<<1);
 var $25=$ssize;
 var $26=((($25)+($24))|0);
 $ssize=$26;
 var $27=$1;
 var $28=_read8($27);
 var $29=$2;
 _write8($29,0);
 var $30=$2;
 var $31=$1;
 var $32=_read8($31);
 _write8($30,$32);
 var $33=$2;
 var $34=$1;
 var $35=_read16b($34);
 _write16b($33,$35);
 var $36=$2;
 var $37=$1;
 var $38=_read16b($37);
 _write16b($36,$38);
 var $39=$1;
 var $40=_read32b($39);
 var $41=$1;
 var $42=_read8($41);
 $c1=$42;
 var $43=$c1;
 var $44=($43&255);
 var $45=($44|0)!=0;
 if($45){label=4;break;}else{label=5;break;}
 case 4: 
 var $47=$c1;
 var $48=($47&255);
 var $49=((($48)+(11))|0);
 var $50=(($49)&255);
 $c1=$50;
 label=5;break;
 case 5: 
 var $52=$2;
 var $53=_fseek($52,-6,2);
 var $54=$2;
 var $55=$c1;
 _write8($54,$55);
 var $56=$2;
 var $57=_fseek($56,0,2);
 var $58=$1;
 var $59=_fseek($58,1,1);
 label=6;break;
 case 6: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=2;break;
 case 7: 
 var $64=$1;
 var $65=_fseek($64,14,1);
 $i=0;
 label=8;break;
 case 8: 
 var $67=$i;
 var $68=($67|0)<128;
 if($68){label=9;break;}else{label=11;break;}
 case 9: 
 var $70=$1;
 var $71=_read32b($70);
 var $72=$i;
 var $73=(($paddr+($72<<2))|0);
 HEAP32[(($73)>>2)]=$71;
 label=10;break;
 case 10: 
 var $75=$i;
 var $76=((($75)+(1))|0);
 $i=$76;
 label=8;break;
 case 11: 
 $tmp_ptr=0;
 $i=0;
 label=12;break;
 case 12: 
 var $79=$i;
 var $80=($79|0)<128;
 if($80){label=13;break;}else{label=25;break;}
 case 13: 
 var $82=$i;
 var $83=($82|0)==0;
 if($83){label=14;break;}else{label=15;break;}
 case 14: 
 var $85=(($pnum)|0);
 HEAP8[($85)]=0;
 var $86=$tmp_ptr;
 var $87=((($86)+(1))|0);
 $tmp_ptr=$87;
 label=24;break;
 case 15: 
 $j=0;
 label=16;break;
 case 16: 
 var $90=$j;
 var $91=$i;
 var $92=($90|0)<($91|0);
 if($92){label=17;break;}else{label=21;break;}
 case 17: 
 var $94=$i;
 var $95=(($paddr+($94<<2))|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$j;
 var $98=(($paddr+($97<<2))|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($96|0)==($99|0);
 if($100){label=18;break;}else{label=19;break;}
 case 18: 
 var $102=$j;
 var $103=(($pnum+$102)|0);
 var $104=HEAP8[($103)];
 var $105=$i;
 var $106=(($pnum+$105)|0);
 HEAP8[($106)]=$104;
 label=21;break;
 case 19: 
 label=20;break;
 case 20: 
 var $109=$j;
 var $110=((($109)+(1))|0);
 $j=$110;
 label=16;break;
 case 21: 
 var $112=$j;
 var $113=$i;
 var $114=($112|0)==($113|0);
 if($114){label=22;break;}else{label=23;break;}
 case 22: 
 var $116=$tmp_ptr;
 var $117=((($116)+(1))|0);
 $tmp_ptr=$117;
 var $118=(($116)&255);
 var $119=$i;
 var $120=(($pnum+$119)|0);
 HEAP8[($120)]=$118;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $123=$i;
 var $124=((($123)+(1))|0);
 $i=$124;
 label=12;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 var $127=$i;
 var $128=($127|0)<128;
 if($128){label=27;break;}else{label=29;break;}
 case 27: 
 var $130=$i;
 var $131=(($paddr+($130<<2))|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$i;
 var $134=(($paddr1+($133<<2))|0);
 HEAP32[(($134)>>2)]=$132;
 label=28;break;
 case 28: 
 var $136=$i;
 var $137=((($136)+(1))|0);
 $i=$137;
 label=26;break;
 case 29: 
 label=30;break;
 case 30: 
 $i=0;
 label=31;break;
 case 31: 
 var $141=$i;
 var $142=($141|0)<128;
 if($142){label=32;break;}else{label=40;break;}
 case 32: 
 $j=0;
 label=33;break;
 case 33: 
 var $145=$j;
 var $146=$i;
 var $147=($145|0)<($146|0);
 if($147){label=34;break;}else{label=38;break;}
 case 34: 
 var $149=$i;
 var $150=(($paddr1+($149<<2))|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$j;
 var $153=(($paddr1+($152<<2))|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($151|0)<($154|0);
 if($155){label=35;break;}else{label=36;break;}
 case 35: 
 var $157=$j;
 var $158=(($pnum+$157)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 $tmp2=$160;
 var $161=$i;
 var $162=(($pnum+$161)|0);
 var $163=HEAP8[($162)];
 var $164=$j;
 var $165=(($pnum+$164)|0);
 HEAP8[($165)]=$163;
 var $166=$tmp2;
 var $167=(($166)&255);
 var $168=$i;
 var $169=(($pnum+$168)|0);
 HEAP8[($169)]=$167;
 var $170=$j;
 var $171=(($paddr1+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 $tmp1=$172;
 var $173=$i;
 var $174=(($paddr1+($173<<2))|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=$j;
 var $177=(($paddr1+($176<<2))|0);
 HEAP32[(($177)>>2)]=$175;
 var $178=$tmp1;
 var $179=$i;
 var $180=(($paddr1+($179<<2))|0);
 HEAP32[(($180)>>2)]=$178;
 label=30;break;
 case 36: 
 label=37;break;
 case 37: 
 var $183=$j;
 var $184=((($183)+(1))|0);
 $j=$184;
 label=33;break;
 case 38: 
 label=39;break;
 case 39: 
 var $187=$i;
 var $188=((($187)+(1))|0);
 $i=$188;
 label=31;break;
 case 40: 
 $j=0;
 $i=0;
 label=41;break;
 case 41: 
 var $191=$i;
 var $192=($191|0)<128;
 if($192){label=42;break;}else{label=48;break;}
 case 42: 
 var $194=$i;
 var $195=($194|0)==0;
 if($195){label=43;break;}else{label=44;break;}
 case 43: 
 var $197=$i;
 var $198=(($paddr1+($197<<2))|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$j;
 var $201=(($paddr2+($200<<2))|0);
 HEAP32[(($201)>>2)]=$199;
 label=47;break;
 case 44: 
 var $203=$i;
 var $204=(($paddr1+($203<<2))|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=$j;
 var $207=(($paddr2+($206<<2))|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($205|0)==($208|0);
 if($209){label=45;break;}else{label=46;break;}
 case 45: 
 label=47;break;
 case 46: 
 var $212=$i;
 var $213=(($paddr1+($212<<2))|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=$j;
 var $216=((($215)+(1))|0);
 $j=$216;
 var $217=(($paddr2+($216<<2))|0);
 HEAP32[(($217)>>2)]=$214;
 label=47;break;
 case 47: 
 var $219=$i;
 var $220=((($219)+(1))|0);
 $i=$220;
 label=41;break;
 case 48: 
 var $222=$paddr1;
 _memset($222, 0, 512)|0;
 $j=0;
 var $223=(($paddr)|0);
 var $224=HEAP32[(($223)>>2)];
 $k=$224;
 $i=0;
 label=49;break;
 case 49: 
 var $226=$i;
 var $227=($226|0)<120;
 if($227){label=50;break;}else{label=54;break;}
 case 50: 
 var $229=$i;
 var $230=(($paddr2+($229<<2))|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=$j;
 var $233=(($paddr1+($232<<2))|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=$j;
 var $235=((($234)+(1))|0);
 $j=$235;
 var $236=$i;
 var $237=((($236)+(1))|0);
 var $238=(($paddr2+($237<<2))|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=$i;
 var $241=(($paddr2+($240<<2))|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=((($239)-($242))|0);
 var $244=($243|0)>1024;
 if($244){label=51;break;}else{label=52;break;}
 case 51: 
 var $246=$i;
 var $247=(($paddr2+($246<<2))|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=((($248)+(1024))|0);
 var $250=$j;
 var $251=(($paddr1+($250<<2))|0);
 HEAP32[(($251)>>2)]=$249;
 var $252=$j;
 var $253=((($252)+(1))|0);
 $j=$253;
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 var $256=$i;
 var $257=((($256)+(1))|0);
 $i=$257;
 label=49;break;
 case 54: 
 $c1=0;
 label=55;break;
 case 55: 
 var $260=$c1;
 var $261=($260&255);
 var $262=($261|0)<128;
 if($262){label=56;break;}else{label=64;break;}
 case 56: 
 $c2=0;
 label=57;break;
 case 57: 
 var $265=$c2;
 var $266=($265&255);
 var $267=($266|0)<128;
 if($267){label=58;break;}else{label=62;break;}
 case 58: 
 var $269=$c1;
 var $270=($269&255);
 var $271=(($paddr+($270<<2))|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=$c2;
 var $274=($273&255);
 var $275=(($paddr1+($274<<2))|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=($272|0)==($276|0);
 if($277){label=59;break;}else{label=60;break;}
 case 59: 
 var $279=$c2;
 var $280=$c1;
 var $281=($280&255);
 var $282=(($pnum1+$281)|0);
 HEAP8[($282)]=$279;
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 var $285=$c2;
 var $286=((($285)+(1))&255);
 $c2=$286;
 label=57;break;
 case 62: 
 label=63;break;
 case 63: 
 var $289=$c1;
 var $290=((($289)+(1))&255);
 $c1=$290;
 label=55;break;
 case 64: 
 var $292=$pnum;
 _memset($292, 0, 128)|0;
 $pat_addr=999999;
 $i=0;
 label=65;break;
 case 65: 
 var $294=$i;
 var $295=($294|0)<128;
 if($295){label=66;break;}else{label=70;break;}
 case 66: 
 var $297=$i;
 var $298=(($pnum1+$297)|0);
 var $299=HEAP8[($298)];
 var $300=$i;
 var $301=(($pnum+$300)|0);
 HEAP8[($301)]=$299;
 var $302=$i;
 var $303=(($paddr+($302<<2))|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=$pat_addr;
 var $306=($304|0)<($305|0);
 if($306){label=67;break;}else{label=68;break;}
 case 67: 
 var $308=$i;
 var $309=(($paddr+($308<<2))|0);
 var $310=HEAP32[(($309)>>2)];
 $pat_addr=$310;
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 var $313=$i;
 var $314=((($313)+(1))|0);
 $i=$314;
 label=65;break;
 case 70: 
 $nop=-128;
 label=71;break;
 case 71: 
 var $317=$nop;
 var $318=($317&255);
 var $319=($318|0)>0;
 if($319){label=72;break;}else{label=76;break;}
 case 72: 
 var $321=$nop;
 var $322=($321&255);
 var $323=((($322)-(1))|0);
 var $324=(($pnum+$323)|0);
 var $325=HEAP8[($324)];
 var $326=($325&255);
 var $327=($326|0)!=0;
 if($327){label=73;break;}else{label=74;break;}
 case 73: 
 label=76;break;
 case 74: 
 label=75;break;
 case 75: 
 var $331=$nop;
 var $332=((($331)-(1))&255);
 $nop=$332;
 label=71;break;
 case 76: 
 var $334=$2;
 var $335=$nop;
 _write8($334,$335);
 $i=0;
 label=77;break;
 case 77: 
 var $337=$i;
 var $338=$nop;
 var $339=($338&255);
 var $340=($337|0)<($339|0);
 if($340){label=78;break;}else{label=82;break;}
 case 78: 
 var $342=$i;
 var $343=(($pnum+$342)|0);
 var $344=HEAP8[($343)];
 var $345=($344&255);
 var $346=$npat;
 var $347=($346&255);
 var $348=($345|0)>($347|0);
 if($348){label=79;break;}else{label=80;break;}
 case 79: 
 var $350=$i;
 var $351=(($pnum+$350)|0);
 var $352=HEAP8[($351)];
 $npat=$352;
 label=80;break;
 case 80: 
 label=81;break;
 case 81: 
 var $355=$i;
 var $356=((($355)+(1))|0);
 $i=$356;
 label=77;break;
 case 82: 
 var $358=$2;
 _write8($358,127);
 $i=0;
 label=83;break;
 case 83: 
 var $360=$i;
 var $361=($360|0)<128;
 if($361){label=84;break;}else{label=86;break;}
 case 84: 
 var $363=$2;
 var $364=$i;
 var $365=(($pnum+$364)|0);
 var $366=HEAP8[($365)];
 _write8($363,$366);
 label=85;break;
 case 85: 
 var $368=$i;
 var $369=((($368)+(1))|0);
 $i=$369;
 label=83;break;
 case 86: 
 var $371=$2;
 _write32b($371,1294879534);
 var $372=$1;
 var $373=_ftell($372);
 $smp_addr=$373;
 var $374=$1;
 var $375=$pat_addr;
 var $376=_fseek($374,$375,0);
 var $377=$npat;
 var $378=($377&255);
 var $379=($378<<10);
 $psize=$379;
 var $380=$psize;
 var $381=_malloc($380);
 $pdata=$381;
 var $382=$pdata;
 var $383=$psize;
 var $384=$1;
 var $385=_fread($382,1,$383,$384);
 $psize=$385;
 var $386=$npat;
 var $387=($386&255);
 var $388=((($387)+(1))|0);
 var $389=(($388)&255);
 $npat=$389;
 var $390=$npat;
 var $391=($390&255);
 var $392=($391<<10);
 var $393=_malloc($392);
 $pat=$393;
 var $394=$pat;
 var $395=$npat;
 var $396=($395&255);
 var $397=($396<<10);
 _memset($394, 0, $397)|0;
 $j=0;
 $i=0;
 label=87;break;
 case 87: 
 var $399=$j;
 var $400=$psize;
 var $401=($399|0)<($400|0);
 if($401){label=88;break;}else{label=94;break;}
 case 88: 
 var $403=$i;
 var $404=$pdata;
 var $405=(($404+$403)|0);
 var $406=HEAP8[($405)];
 var $407=($406&255);
 var $408=($407|0)==255;
 if($408){label=89;break;}else{label=90;break;}
 case 89: 
 var $410=$i;
 var $411=((($410)+(1))|0);
 $i=$411;
 var $412=$i;
 var $413=$pdata;
 var $414=(($413+$412)|0);
 var $415=HEAP8[($414)];
 var $416=($415&255);
 var $417=(((255)-($416))|0);
 var $418=(($417)&65535);
 var $419=$k;
 var $420=((($419)+(3))|0);
 var $421=(((($420|0))%(4))&-1);
 var $422=(($ocpt+($421<<1))|0);
 HEAP16[(($422)>>1)]=$418;
 label=93;break;
 case 90: 
 var $424=$k;
 var $425=(((($424|0))%(4))&-1);
 var $426=(($ocpt+($425<<1))|0);
 var $427=HEAP16[(($426)>>1)];
 var $428=(($427<<16)>>16);
 var $429=($428|0)!=0;
 if($429){label=91;break;}else{label=92;break;}
 case 91: 
 var $431=$k;
 var $432=(((($431|0))%(4))&-1);
 var $433=(($onote+($432<<2))|0);
 var $434=(($433)|0);
 var $435=HEAP8[($434)];
 $ins=$435;
 var $436=$k;
 var $437=(((($436|0))%(4))&-1);
 var $438=(($onote+($437<<2))|0);
 var $439=(($438+1)|0);
 var $440=HEAP8[($439)];
 $note=$440;
 var $441=$k;
 var $442=(((($441|0))%(4))&-1);
 var $443=(($onote+($442<<2))|0);
 var $444=(($443+2)|0);
 var $445=HEAP8[($444)];
 $fxt=$445;
 var $446=$k;
 var $447=(((($446|0))%(4))&-1);
 var $448=(($onote+($447<<2))|0);
 var $449=(($448+3)|0);
 var $450=HEAP8[($449)];
 $fxp=$450;
 var $451=$k;
 var $452=(((($451|0))%(4))&-1);
 var $453=(($ocpt+($452<<1))|0);
 var $454=HEAP16[(($453)>>1)];
 var $455=(($454<<16)>>16);
 var $456=((($455)-(1))|0);
 var $457=(($456)&65535);
 HEAP16[(($453)>>1)]=$457;
 var $458=$ins;
 var $459=($458&255);
 var $460=$459&240;
 var $461=(($460)&255);
 var $462=$j;
 var $463=$pat;
 var $464=(($463+$462)|0);
 HEAP8[($464)]=$461;
 var $465=$note;
 var $466=($465&255);
 var $467=(((($466|0))/(2))&-1);
 var $468=((4504+($467<<1))|0);
 var $469=(($468)|0);
 var $470=HEAP8[($469)];
 var $471=($470&255);
 var $472=$j;
 var $473=$pat;
 var $474=(($473+$472)|0);
 var $475=HEAP8[($474)];
 var $476=($475&255);
 var $477=$476|$471;
 var $478=(($477)&255);
 HEAP8[($474)]=$478;
 var $479=$note;
 var $480=($479&255);
 var $481=(((($480|0))/(2))&-1);
 var $482=((4504+($481<<1))|0);
 var $483=(($482+1)|0);
 var $484=HEAP8[($483)];
 var $485=$j;
 var $486=((($485)+(1))|0);
 var $487=$pat;
 var $488=(($487+$486)|0);
 HEAP8[($488)]=$484;
 var $489=$ins;
 var $490=($489&255);
 var $491=$490<<4;
 var $492=$491&240;
 var $493=(($492)&255);
 var $494=$j;
 var $495=((($494)+(2))|0);
 var $496=$pat;
 var $497=(($496+$495)|0);
 HEAP8[($497)]=$493;
 var $498=$fxt;
 var $499=($498&255);
 var $500=$j;
 var $501=((($500)+(2))|0);
 var $502=$pat;
 var $503=(($502+$501)|0);
 var $504=HEAP8[($503)];
 var $505=($504&255);
 var $506=$505|$499;
 var $507=(($506)&255);
 HEAP8[($503)]=$507;
 var $508=$fxp;
 var $509=$j;
 var $510=((($509)+(3))|0);
 var $511=$pat;
 var $512=(($511+$510)|0);
 HEAP8[($512)]=$508;
 var $513=$k;
 var $514=((($513)+(1))|0);
 $k=$514;
 var $515=$j;
 var $516=((($515)+(4))|0);
 $j=$516;
 var $517=$i;
 var $518=((($517)-(1))|0);
 $i=$518;
 label=93;break;
 case 92: 
 var $520=$i;
 var $521=$pdata;
 var $522=(($521+$520)|0);
 var $523=HEAP8[($522)];
 $ins=$523;
 var $524=$i;
 var $525=((($524)+(1))|0);
 var $526=$pdata;
 var $527=(($526+$525)|0);
 var $528=HEAP8[($527)];
 $note=$528;
 var $529=$i;
 var $530=((($529)+(2))|0);
 var $531=$pdata;
 var $532=(($531+$530)|0);
 var $533=HEAP8[($532)];
 $fxt=$533;
 var $534=$i;
 var $535=((($534)+(3))|0);
 var $536=$pdata;
 var $537=(($536+$535)|0);
 var $538=HEAP8[($537)];
 $fxp=$538;
 var $539=$ins;
 var $540=$k;
 var $541=(((($540|0))%(4))&-1);
 var $542=(($onote+($541<<2))|0);
 var $543=(($542)|0);
 HEAP8[($543)]=$539;
 var $544=$note;
 var $545=$k;
 var $546=(((($545|0))%(4))&-1);
 var $547=(($onote+($546<<2))|0);
 var $548=(($547+1)|0);
 HEAP8[($548)]=$544;
 var $549=$fxt;
 var $550=$k;
 var $551=(((($550|0))%(4))&-1);
 var $552=(($onote+($551<<2))|0);
 var $553=(($552+2)|0);
 HEAP8[($553)]=$549;
 var $554=$fxp;
 var $555=$k;
 var $556=(((($555|0))%(4))&-1);
 var $557=(($onote+($556<<2))|0);
 var $558=(($557+3)|0);
 HEAP8[($558)]=$554;
 var $559=$i;
 var $560=((($559)+(3))|0);
 $i=$560;
 var $561=$ins;
 var $562=($561&255);
 var $563=$562&240;
 var $564=(($563)&255);
 var $565=$j;
 var $566=$pat;
 var $567=(($566+$565)|0);
 HEAP8[($567)]=$564;
 var $568=$note;
 var $569=($568&255);
 var $570=(((($569|0))/(2))&-1);
 var $571=((4504+($570<<1))|0);
 var $572=(($571)|0);
 var $573=HEAP8[($572)];
 var $574=($573&255);
 var $575=$j;
 var $576=$pat;
 var $577=(($576+$575)|0);
 var $578=HEAP8[($577)];
 var $579=($578&255);
 var $580=$579|$574;
 var $581=(($580)&255);
 HEAP8[($577)]=$581;
 var $582=$note;
 var $583=($582&255);
 var $584=(((($583|0))/(2))&-1);
 var $585=((4504+($584<<1))|0);
 var $586=(($585+1)|0);
 var $587=HEAP8[($586)];
 var $588=$j;
 var $589=((($588)+(1))|0);
 var $590=$pat;
 var $591=(($590+$589)|0);
 HEAP8[($591)]=$587;
 var $592=$ins;
 var $593=($592&255);
 var $594=$593<<4;
 var $595=$594&240;
 var $596=(($595)&255);
 var $597=$j;
 var $598=((($597)+(2))|0);
 var $599=$pat;
 var $600=(($599+$598)|0);
 HEAP8[($600)]=$596;
 var $601=$fxt;
 var $602=($601&255);
 var $603=$j;
 var $604=((($603)+(2))|0);
 var $605=$pat;
 var $606=(($605+$604)|0);
 var $607=HEAP8[($606)];
 var $608=($607&255);
 var $609=$608|$602;
 var $610=(($609)&255);
 HEAP8[($606)]=$610;
 var $611=$fxp;
 var $612=$j;
 var $613=((($612)+(3))|0);
 var $614=$pat;
 var $615=(($614+$613)|0);
 HEAP8[($615)]=$611;
 var $616=$k;
 var $617=((($616)+(1))|0);
 $k=$617;
 var $618=$j;
 var $619=((($618)+(4))|0);
 $j=$619;
 label=93;break;
 case 93: 
 var $621=$i;
 var $622=((($621)+(1))|0);
 $i=$622;
 label=87;break;
 case 94: 
 var $624=$pat;
 var $625=$npat;
 var $626=($625&255);
 var $627=($626<<10);
 var $628=$2;
 var $629=_fwrite($624,$627,1,$628);
 var $630=$pdata;
 _free($630);
 var $631=$pat;
 _free($631);
 var $632=$1;
 var $633=$smp_addr;
 var $634=_fseek($632,$633,0);
 var $635=$2;
 var $636=$1;
 var $637=$ssize;
 var $638=_pw_move_data($635,$636,$637);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_p10c($data,$t,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $start;
 var $magic=sp;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 var $5=$magic;
 assert(16 % 1 === 0);(_memcpy($5, 1432, 16)|0);
 label=2;break;
 case 2: 
 var $7=$4;
 var $8=($7|0)<22;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$4;
 var $11=(((22)-($10))|0);
 $1=$11;
 label=20;break;
 case 4: 
 label=5;break;
 case 5: 
 var $14=$2;
 var $15=$start;
 var $16=(($14+$15)|0);
 var $17=(($magic)|0);
 var $18=_memcmp($16,$17,16);
 var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=20;break;
 case 7: 
 var $22=$start;
 var $23=((($22)+(21))|0);
 var $24=$2;
 var $25=(($24+$23)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=($27|0)!=206;
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=20;break;
 case 9: 
 label=10;break;
 case 10: 
 var $32=$4;
 var $33=($32|0)<4714;
 if($33){label=11;break;}else{label=12;break;}
 case 11: 
 var $35=$4;
 var $36=(((4714)-($35))|0);
 $1=$36;
 label=20;break;
 case 12: 
 label=13;break;
 case 13: 
 var $39=$2;
 var $40=$start;
 var $41=(($39+$40)|0);
 var $42=(($41+4712)|0);
 var $43=_readmem16b($42);
 var $44=($43&65535);
 var $45=$44&3;
 var $46=($45|0)!=0;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 $1=-1;
 label=20;break;
 case 15: 
 var $49=$start;
 var $50=((($49)+(36))|0);
 var $51=$2;
 var $52=(($51+$50)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=($54|0)!=16;
 if($55){label=16;break;}else{label=17;break;}
 case 16: 
 $1=-1;
 label=20;break;
 case 17: 
 var $58=$start;
 var $59=((($58)+(37))|0);
 var $60=$2;
 var $61=(($60+$59)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=($63|0)!=252;
 if($64){label=18;break;}else{label=19;break;}
 case 18: 
 $1=-1;
 label=20;break;
 case 19: 
 var $67=$3;
 _pw_read_title(0,$67,0);
 $1=0;
 label=20;break;
 case 20: 
 var $69=$1;
 STACKTOP=sp;return $69;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_p10c($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+165672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c1;
 var $c2;
 var $c3;
 var $pat_max;
 var $tmp_ptr;
 var $tmp1;
 var $tmp2;
 var $refmax;
 var $pnum=sp;
 var $pnum1=(sp)+(128);
 var $paddr=(sp)+(256);
 var $paddr1=(sp)+(768);
 var $paddr2=(sp)+(1280);
 var $pptr=(sp)+(1792);
 var $NOP;
 var $reftab;
 var $pat=(sp)+(34560);
 var $i;
 var $j;
 var $k;
 var $l;
 var $size;
 var $ssize;
 var $psize;
 var $SDAV;
 var $FLAG;
 var $fin=(sp)+(165632);
 var $oldins=(sp)+(165664);
 var $per;
 var $x;
 var $x1;
 var $y;
 $1=$in;
 $2=$out;
 $pat_max=0;
 $refmax=0;
 $NOP=0;
 $ssize=0;
 $FLAG=1;
 var $3=$pnum;
 _memset($3, 0, 128)|0;
 var $4=$pnum1;
 _memset($4, 0, 128)|0;
 var $5=$pptr;
 _memset($5, 0, 16384)|0;
 var $6=$pat;
 _memset($6, 0, 131072)|0;
 var $7=$fin;
 _memset($7, 0, 31)|0;
 var $8=$oldins;
 HEAP8[($8)]=0; HEAP8[((($8)+(1))|0)]=0; HEAP8[((($8)+(2))|0)]=0; HEAP8[((($8)+(3))|0)]=0;
 var $9=$paddr;
 _memset($9, 0, 512)|0;
 var $10=$paddr1;
 _memset($10, 0, 512)|0;
 $i=0;
 label=2;break;
 case 2: 
 var $12=$i;
 var $13=($12|0)<128;
 if($13){label=3;break;}else{label=5;break;}
 case 3: 
 var $15=$i;
 var $16=(($paddr2+($15<<2))|0);
 HEAP32[(($16)>>2)]=9999;
 label=4;break;
 case 4: 
 var $18=$i;
 var $19=((($18)+(1))|0);
 $i=$19;
 label=2;break;
 case 5: 
 var $21=$2;
 var $22=_pw_write_zero($21,20);
 var $23=$1;
 var $24=_fseek($23,4460,0);
 $i=0;
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=($26|0)<31;
 if($27){label=7;break;}else{label=9;break;}
 case 7: 
 var $29=$2;
 var $30=_pw_write_zero($29,22);
 var $31=$2;
 var $32=$1;
 var $33=_read16b($32);
 var $34=($33&65535);
 $size=$34;
 var $35=(($34)&65535);
 _write16b($31,$35);
 var $36=$size;
 var $37=($36<<1);
 var $38=$ssize;
 var $39=((($38)+($37))|0);
 $ssize=$39;
 var $40=$2;
 var $41=$1;
 var $42=_read8($41);
 var $43=$i;
 var $44=(($fin+$43)|0);
 HEAP8[($44)]=$42;
 _write8($40,$42);
 var $45=$2;
 var $46=$1;
 var $47=_read8($46);
 _write8($45,$47);
 var $48=$2;
 var $49=$1;
 var $50=_read16b($49);
 _write16b($48,$50);
 var $51=$2;
 var $52=$1;
 var $53=_read16b($52);
 _write16b($51,$53);
 label=8;break;
 case 8: 
 var $55=$i;
 var $56=((($55)+(1))|0);
 $i=$56;
 label=6;break;
 case 9: 
 var $58=$2;
 var $59=$1;
 var $60=_read16b($59);
 var $61=($60&65535);
 var $62=(((($61|0))/(4))&-1);
 var $63=(($62)&255);
 $NOP=$63;
 _write8($58,$63);
 var $64=$2;
 _write8($64,127);
 $i=0;
 label=10;break;
 case 10: 
 var $66=$i;
 var $67=($66|0)<128;
 if($67){label=11;break;}else{label=13;break;}
 case 11: 
 var $69=$1;
 var $70=_read32b($69);
 var $71=$i;
 var $72=(($paddr+($71<<2))|0);
 HEAP32[(($72)>>2)]=$70;
 label=12;break;
 case 12: 
 var $74=$i;
 var $75=((($74)+(1))|0);
 $i=$75;
 label=10;break;
 case 13: 
 $tmp_ptr=0;
 $i=0;
 label=14;break;
 case 14: 
 var $78=$i;
 var $79=$NOP;
 var $80=($79&255);
 var $81=($78|0)<($80|0);
 if($81){label=15;break;}else{label=27;break;}
 case 15: 
 var $83=$i;
 var $84=($83|0)==0;
 if($84){label=16;break;}else{label=17;break;}
 case 16: 
 var $86=(($pnum)|0);
 HEAP8[($86)]=0;
 var $87=$tmp_ptr;
 var $88=((($87)+(1))|0);
 $tmp_ptr=$88;
 label=26;break;
 case 17: 
 $j=0;
 label=18;break;
 case 18: 
 var $91=$j;
 var $92=$i;
 var $93=($91|0)<($92|0);
 if($93){label=19;break;}else{label=23;break;}
 case 19: 
 var $95=$i;
 var $96=(($paddr+($95<<2))|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=$j;
 var $99=(($paddr+($98<<2))|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($97|0)==($100|0);
 if($101){label=20;break;}else{label=21;break;}
 case 20: 
 var $103=$j;
 var $104=(($pnum+$103)|0);
 var $105=HEAP8[($104)];
 var $106=$i;
 var $107=(($pnum+$106)|0);
 HEAP8[($107)]=$105;
 label=23;break;
 case 21: 
 label=22;break;
 case 22: 
 var $110=$j;
 var $111=((($110)+(1))|0);
 $j=$111;
 label=18;break;
 case 23: 
 var $113=$j;
 var $114=$i;
 var $115=($113|0)==($114|0);
 if($115){label=24;break;}else{label=25;break;}
 case 24: 
 var $117=$tmp_ptr;
 var $118=((($117)+(1))|0);
 $tmp_ptr=$118;
 var $119=(($117)&255);
 var $120=$i;
 var $121=(($pnum+$120)|0);
 HEAP8[($121)]=$119;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $124=$i;
 var $125=((($124)+(1))|0);
 $i=$125;
 label=14;break;
 case 27: 
 var $127=$tmp_ptr;
 var $128=((($127)-(1))|0);
 var $129=(($128)&65535);
 $pat_max=$129;
 $i=0;
 label=28;break;
 case 28: 
 var $131=$i;
 var $132=$NOP;
 var $133=($132&255);
 var $134=($131|0)<($133|0);
 if($134){label=29;break;}else{label=31;break;}
 case 29: 
 var $136=$i;
 var $137=(($paddr+($136<<2))|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$i;
 var $140=(($paddr1+($139<<2))|0);
 HEAP32[(($140)>>2)]=$138;
 label=30;break;
 case 30: 
 var $142=$i;
 var $143=((($142)+(1))|0);
 $i=$143;
 label=28;break;
 case 31: 
 label=32;break;
 case 32: 
 $i=0;
 label=33;break;
 case 33: 
 var $147=$i;
 var $148=$NOP;
 var $149=($148&255);
 var $150=($147|0)<($149|0);
 if($150){label=34;break;}else{label=42;break;}
 case 34: 
 $j=0;
 label=35;break;
 case 35: 
 var $153=$j;
 var $154=$i;
 var $155=($153|0)<($154|0);
 if($155){label=36;break;}else{label=40;break;}
 case 36: 
 var $157=$i;
 var $158=(($paddr1+($157<<2))|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$j;
 var $161=(($paddr1+($160<<2))|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($159|0)<($162|0);
 if($163){label=37;break;}else{label=38;break;}
 case 37: 
 var $165=$j;
 var $166=(($pnum+$165)|0);
 var $167=HEAP8[($166)];
 var $168=($167&255);
 $tmp2=$168;
 var $169=$i;
 var $170=(($pnum+$169)|0);
 var $171=HEAP8[($170)];
 var $172=$j;
 var $173=(($pnum+$172)|0);
 HEAP8[($173)]=$171;
 var $174=$tmp2;
 var $175=(($174)&255);
 var $176=$i;
 var $177=(($pnum+$176)|0);
 HEAP8[($177)]=$175;
 var $178=$j;
 var $179=(($paddr1+($178<<2))|0);
 var $180=HEAP32[(($179)>>2)];
 $tmp1=$180;
 var $181=$i;
 var $182=(($paddr1+($181<<2))|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=$j;
 var $185=(($paddr1+($184<<2))|0);
 HEAP32[(($185)>>2)]=$183;
 var $186=$tmp1;
 var $187=$i;
 var $188=(($paddr1+($187<<2))|0);
 HEAP32[(($188)>>2)]=$186;
 label=32;break;
 case 38: 
 label=39;break;
 case 39: 
 var $191=$j;
 var $192=((($191)+(1))|0);
 $j=$192;
 label=35;break;
 case 40: 
 label=41;break;
 case 41: 
 var $195=$i;
 var $196=((($195)+(1))|0);
 $i=$196;
 label=33;break;
 case 42: 
 $i=0;
 $j=0;
 label=43;break;
 case 43: 
 var $199=$i;
 var $200=$NOP;
 var $201=($200&255);
 var $202=($199|0)<($201|0);
 if($202){label=44;break;}else{label=50;break;}
 case 44: 
 var $204=$i;
 var $205=($204|0)==0;
 if($205){label=45;break;}else{label=46;break;}
 case 45: 
 var $207=$i;
 var $208=(($paddr1+($207<<2))|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=$j;
 var $211=(($paddr2+($210<<2))|0);
 HEAP32[(($211)>>2)]=$209;
 label=49;break;
 case 46: 
 var $213=$i;
 var $214=(($paddr1+($213<<2))|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=$j;
 var $217=(($paddr2+($216<<2))|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($215|0)==($218|0);
 if($219){label=47;break;}else{label=48;break;}
 case 47: 
 label=49;break;
 case 48: 
 var $222=$i;
 var $223=(($paddr1+($222<<2))|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$j;
 var $226=((($225)+(1))|0);
 $j=$226;
 var $227=(($paddr2+($226<<2))|0);
 HEAP32[(($227)>>2)]=$224;
 label=49;break;
 case 49: 
 var $229=$i;
 var $230=((($229)+(1))|0);
 $i=$230;
 label=43;break;
 case 50: 
 $c1=0;
 label=51;break;
 case 51: 
 var $233=$c1;
 var $234=($233&255);
 var $235=$NOP;
 var $236=($235&255);
 var $237=($234|0)<($236|0);
 if($237){label=52;break;}else{label=60;break;}
 case 52: 
 $c2=0;
 label=53;break;
 case 53: 
 var $240=$c2;
 var $241=($240&255);
 var $242=$NOP;
 var $243=($242&255);
 var $244=($241|0)<($243|0);
 if($244){label=54;break;}else{label=58;break;}
 case 54: 
 var $246=$c1;
 var $247=($246&255);
 var $248=(($paddr+($247<<2))|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=$c2;
 var $251=($250&255);
 var $252=(($paddr2+($251<<2))|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=($249|0)==($253|0);
 if($254){label=55;break;}else{label=56;break;}
 case 55: 
 var $256=$c2;
 var $257=$c1;
 var $258=($257&255);
 var $259=(($pnum1+$258)|0);
 HEAP8[($259)]=$256;
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $262=$c2;
 var $263=((($262)+(1))&255);
 $c2=$263;
 label=53;break;
 case 58: 
 label=59;break;
 case 59: 
 var $266=$c1;
 var $267=((($266)+(1))&255);
 $c1=$267;
 label=51;break;
 case 60: 
 $i=0;
 label=61;break;
 case 61: 
 var $270=$i;
 var $271=$NOP;
 var $272=($271&255);
 var $273=($270|0)<($272|0);
 if($273){label=62;break;}else{label=64;break;}
 case 62: 
 var $275=$i;
 var $276=(($pnum1+$275)|0);
 var $277=HEAP8[($276)];
 var $278=$i;
 var $279=(($pnum+$278)|0);
 HEAP8[($279)]=$277;
 label=63;break;
 case 63: 
 var $281=$i;
 var $282=((($281)+(1))|0);
 $i=$282;
 label=61;break;
 case 64: 
 $c1=0;
 label=65;break;
 case 65: 
 var $285=$c1;
 var $286=($285&255);
 var $287=($286|0)<128;
 if($287){label=66;break;}else{label=68;break;}
 case 66: 
 var $289=$c1;
 var $290=($289&255);
 var $291=(($pnum+$290)|0);
 var $292=$2;
 var $293=_fwrite($291,1,1,$292);
 label=67;break;
 case 67: 
 var $295=$c1;
 var $296=((($295)+(1))&255);
 $c1=$296;
 label=65;break;
 case 68: 
 var $298=$2;
 _write32b($298,1294879534);
 var $299=$1;
 var $300=_fseek($299,4456,0);
 var $301=$1;
 var $302=_read32b($301);
 $psize=$302;
 var $303=$1;
 var $304=_fseek($303,5222,0);
 $j=0;
 label=69;break;
 case 69: 
 var $306=$j;
 var $307=$psize;
 var $308=($306|0)<($307|0);
 if($308){label=70;break;}else{label=74;break;}
 case 70: 
 var $310=$1;
 var $311=_read16b($310);
 var $312=($311&65535);
 $x=$312;
 var $313=$refmax;
 var $314=(($313<<16)>>16);
 var $315=($312|0)>($314|0);
 if($315){label=71;break;}else{label=72;break;}
 case 71: 
 var $317=$x;
 var $318=(($317)&65535);
 $refmax=$318;
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 var $321=$j;
 var $322=((($321)+(2))|0);
 $j=$322;
 label=69;break;
 case 74: 
 var $324=$refmax;
 var $325=(($324<<16)>>16);
 var $326=((($325)+(1))|0);
 var $327=(($326)&65535);
 $refmax=$327;
 var $328=$refmax;
 var $329=(($328<<16)>>16);
 var $330=($329<<2);
 $i=$330;
 var $331=$i;
 var $332=_malloc($331);
 $reftab=$332;
 var $333=$reftab;
 var $334=$i;
 var $335=$1;
 var $336=_fread($333,$334,1,$335);
 var $337=$1;
 var $338=_fseek($337,5222,0);
 $j=0;
 $k=0;
 label=75;break;
 case 75: 
 var $340=$j;
 var $341=$pat_max;
 var $342=(($341<<16)>>16);
 var $343=($340|0)<=($342|0);
 if($343){label=76;break;}else{label=140;break;}
 case 76: 
 $i=0;
 label=77;break;
 case 77: 
 var $346=$i;
 var $347=($346|0)<64;
 if($347){label=78;break;}else{label=138;break;}
 case 78: 
 var $349=$i;
 var $350=($349<<4);
 $y=$350;
 var $351=$1;
 var $352=_read16b($351);
 var $353=($352&65535);
 $x1=$353;
 var $354=$k;
 var $355=((($354)+(2))|0);
 $k=$355;
 var $356=$x1;
 var $357=($356<<2);
 var $358=$reftab;
 var $359=(($358+$357)|0);
 var $360=HEAP8[($359)];
 var $361=$y;
 var $362=(($361)|0);
 var $363=$j;
 var $364=(($pat+($363<<10))|0);
 var $365=(($364+$362)|0);
 HEAP8[($365)]=$360;
 var $366=$x1;
 var $367=($366<<2);
 var $368=((($367)+(1))|0);
 var $369=$reftab;
 var $370=(($369+$368)|0);
 var $371=HEAP8[($370)];
 var $372=$y;
 var $373=((($372)+(1))|0);
 var $374=$j;
 var $375=(($pat+($374<<10))|0);
 var $376=(($375+$373)|0);
 HEAP8[($376)]=$371;
 var $377=$x1;
 var $378=($377<<2);
 var $379=((($378)+(2))|0);
 var $380=$reftab;
 var $381=(($380+$379)|0);
 var $382=HEAP8[($381)];
 var $383=$y;
 var $384=((($383)+(2))|0);
 var $385=$j;
 var $386=(($pat+($385<<10))|0);
 var $387=(($386+$384)|0);
 HEAP8[($387)]=$382;
 var $388=$x1;
 var $389=($388<<2);
 var $390=((($389)+(3))|0);
 var $391=$reftab;
 var $392=(($391+$390)|0);
 var $393=HEAP8[($392)];
 var $394=$y;
 var $395=((($394)+(3))|0);
 var $396=$j;
 var $397=(($pat+($396<<10))|0);
 var $398=(($397+$395)|0);
 HEAP8[($398)]=$393;
 var $399=$y;
 var $400=((($399)+(2))|0);
 var $401=$j;
 var $402=(($pat+($401<<10))|0);
 var $403=(($402+$400)|0);
 var $404=HEAP8[($403)];
 var $405=($404&255);
 var $406=$405>>4;
 var $407=$406&15;
 var $408=$y;
 var $409=$j;
 var $410=(($pat+($409<<10))|0);
 var $411=(($410+$408)|0);
 var $412=HEAP8[($411)];
 var $413=($412&255);
 var $414=$413&240;
 var $415=$407|$414;
 var $416=(($415)&255);
 $c3=$416;
 var $417=$c3;
 var $418=($417&255);
 var $419=($418|0)!=0;
 if($419){label=79;break;}else{label=80;break;}
 case 79: 
 var $421=$c3;
 var $422=(($oldins)|0);
 HEAP8[($422)]=$421;
 label=80;break;
 case 80: 
 var $424=$y;
 var $425=$j;
 var $426=(($pat+($425<<10))|0);
 var $427=(($426+$424)|0);
 var $428=HEAP8[($427)];
 var $429=($428&255);
 var $430=$429&15;
 var $431=$430<<8;
 var $432=$y;
 var $433=((($432)+(1))|0);
 var $434=$j;
 var $435=(($pat+($434<<10))|0);
 var $436=(($435+$433)|0);
 var $437=HEAP8[($436)];
 var $438=($437&255);
 var $439=((($431)+($438))|0);
 var $440=(($439)&65535);
 $per=$440;
 var $441=$per;
 var $442=(($441<<16)>>16);
 var $443=($442|0)!=0;
 if($443){label=81;break;}else{label=89;break;}
 case 81: 
 var $445=(($oldins)|0);
 var $446=HEAP8[($445)];
 var $447=($446&255);
 var $448=((($447)-(1))|0);
 var $449=(($fin+$448)|0);
 var $450=HEAP8[($449)];
 var $451=($450&255);
 var $452=($451|0)!=0;
 if($452){label=82;break;}else{label=89;break;}
 case 82: 
 $l=0;
 label=83;break;
 case 83: 
 var $455=$l;
 var $456=($455|0)<36;
 if($456){label=84;break;}else{label=88;break;}
 case 84: 
 var $458=$l;
 var $459=(($oldins)|0);
 var $460=HEAP8[($459)];
 var $461=($460&255);
 var $462=((($461)-(1))|0);
 var $463=(($fin+$462)|0);
 var $464=HEAP8[($463)];
 var $465=($464&255);
 var $466=((280+((($465)*(72))&-1))|0);
 var $467=(($466+($458<<1))|0);
 var $468=HEAP16[(($467)>>1)];
 var $469=(($468<<16)>>16);
 var $470=$per;
 var $471=(($470<<16)>>16);
 var $472=($469|0)==($471|0);
 if($472){label=85;break;}else{label=86;break;}
 case 85: 
 var $474=$y;
 var $475=$j;
 var $476=(($pat+($475<<10))|0);
 var $477=(($476+$474)|0);
 var $478=HEAP8[($477)];
 var $479=($478&255);
 var $480=$479&240;
 var $481=(($480)&255);
 HEAP8[($477)]=$481;
 var $482=$l;
 var $483=((($482)+(1))|0);
 var $484=((4504+($483<<1))|0);
 var $485=(($484)|0);
 var $486=HEAP8[($485)];
 var $487=($486&255);
 var $488=$y;
 var $489=$j;
 var $490=(($pat+($489<<10))|0);
 var $491=(($490+$488)|0);
 var $492=HEAP8[($491)];
 var $493=($492&255);
 var $494=$493|$487;
 var $495=(($494)&255);
 HEAP8[($491)]=$495;
 var $496=$l;
 var $497=((($496)+(1))|0);
 var $498=((4504+($497<<1))|0);
 var $499=(($498+1)|0);
 var $500=HEAP8[($499)];
 var $501=$y;
 var $502=((($501)+(1))|0);
 var $503=$j;
 var $504=(($pat+($503<<10))|0);
 var $505=(($504+$502)|0);
 HEAP8[($505)]=$500;
 label=88;break;
 case 86: 
 label=87;break;
 case 87: 
 var $508=$l;
 var $509=((($508)+(1))|0);
 $l=$509;
 label=83;break;
 case 88: 
 label=89;break;
 case 89: 
 var $512=$y;
 var $513=((($512)+(2))|0);
 var $514=$j;
 var $515=(($pat+($514<<10))|0);
 var $516=(($515+$513)|0);
 var $517=HEAP8[($516)];
 var $518=($517&255);
 var $519=$518&15;
 var $520=($519|0)==13;
 if($520){label=91;break;}else{label=90;break;}
 case 90: 
 var $522=$y;
 var $523=((($522)+(2))|0);
 var $524=$j;
 var $525=(($pat+($524<<10))|0);
 var $526=(($525+$523)|0);
 var $527=HEAP8[($526)];
 var $528=($527&255);
 var $529=$528&15;
 var $530=($529|0)==11;
 if($530){label=91;break;}else{label=92;break;}
 case 91: 
 $FLAG=0;
 label=92;break;
 case 92: 
 var $533=$1;
 var $534=_read16b($533);
 var $535=($534&65535);
 $x1=$535;
 var $536=$k;
 var $537=((($536)+(2))|0);
 $k=$537;
 var $538=$x1;
 var $539=($538<<2);
 var $540=$reftab;
 var $541=(($540+$539)|0);
 var $542=HEAP8[($541)];
 var $543=$y;
 var $544=((($543)+(4))|0);
 var $545=$j;
 var $546=(($pat+($545<<10))|0);
 var $547=(($546+$544)|0);
 HEAP8[($547)]=$542;
 var $548=$x1;
 var $549=($548<<2);
 var $550=((($549)+(1))|0);
 var $551=$reftab;
 var $552=(($551+$550)|0);
 var $553=HEAP8[($552)];
 var $554=$y;
 var $555=((($554)+(5))|0);
 var $556=$j;
 var $557=(($pat+($556<<10))|0);
 var $558=(($557+$555)|0);
 HEAP8[($558)]=$553;
 var $559=$x1;
 var $560=($559<<2);
 var $561=((($560)+(2))|0);
 var $562=$reftab;
 var $563=(($562+$561)|0);
 var $564=HEAP8[($563)];
 var $565=$y;
 var $566=((($565)+(6))|0);
 var $567=$j;
 var $568=(($pat+($567<<10))|0);
 var $569=(($568+$566)|0);
 HEAP8[($569)]=$564;
 var $570=$x1;
 var $571=($570<<2);
 var $572=((($571)+(3))|0);
 var $573=$reftab;
 var $574=(($573+$572)|0);
 var $575=HEAP8[($574)];
 var $576=$y;
 var $577=((($576)+(7))|0);
 var $578=$j;
 var $579=(($pat+($578<<10))|0);
 var $580=(($579+$577)|0);
 HEAP8[($580)]=$575;
 var $581=$y;
 var $582=((($581)+(6))|0);
 var $583=$j;
 var $584=(($pat+($583<<10))|0);
 var $585=(($584+$582)|0);
 var $586=HEAP8[($585)];
 var $587=($586&255);
 var $588=$587>>4;
 var $589=$588&15;
 var $590=$y;
 var $591=((($590)+(4))|0);
 var $592=$j;
 var $593=(($pat+($592<<10))|0);
 var $594=(($593+$591)|0);
 var $595=HEAP8[($594)];
 var $596=($595&255);
 var $597=$596&240;
 var $598=$589|$597;
 var $599=(($598)&255);
 $c3=$599;
 var $600=$c3;
 var $601=($600&255);
 var $602=($601|0)!=0;
 if($602){label=93;break;}else{label=94;break;}
 case 93: 
 var $604=$c3;
 var $605=(($oldins+1)|0);
 HEAP8[($605)]=$604;
 label=94;break;
 case 94: 
 var $607=$y;
 var $608=((($607)+(4))|0);
 var $609=$j;
 var $610=(($pat+($609<<10))|0);
 var $611=(($610+$608)|0);
 var $612=HEAP8[($611)];
 var $613=($612&255);
 var $614=$613&15;
 var $615=$614<<8;
 var $616=$y;
 var $617=((($616)+(5))|0);
 var $618=$j;
 var $619=(($pat+($618<<10))|0);
 var $620=(($619+$617)|0);
 var $621=HEAP8[($620)];
 var $622=($621&255);
 var $623=((($615)+($622))|0);
 var $624=(($623)&65535);
 $per=$624;
 var $625=$per;
 var $626=(($625<<16)>>16);
 var $627=($626|0)!=0;
 if($627){label=95;break;}else{label=103;break;}
 case 95: 
 var $629=(($oldins+1)|0);
 var $630=HEAP8[($629)];
 var $631=($630&255);
 var $632=((($631)-(1))|0);
 var $633=(($fin+$632)|0);
 var $634=HEAP8[($633)];
 var $635=($634&255);
 var $636=($635|0)!=0;
 if($636){label=96;break;}else{label=103;break;}
 case 96: 
 $l=0;
 label=97;break;
 case 97: 
 var $639=$l;
 var $640=($639|0)<36;
 if($640){label=98;break;}else{label=102;break;}
 case 98: 
 var $642=$l;
 var $643=(($oldins+1)|0);
 var $644=HEAP8[($643)];
 var $645=($644&255);
 var $646=((($645)-(1))|0);
 var $647=(($fin+$646)|0);
 var $648=HEAP8[($647)];
 var $649=($648&255);
 var $650=((280+((($649)*(72))&-1))|0);
 var $651=(($650+($642<<1))|0);
 var $652=HEAP16[(($651)>>1)];
 var $653=(($652<<16)>>16);
 var $654=$per;
 var $655=(($654<<16)>>16);
 var $656=($653|0)==($655|0);
 if($656){label=99;break;}else{label=100;break;}
 case 99: 
 var $658=$y;
 var $659=((($658)+(4))|0);
 var $660=$j;
 var $661=(($pat+($660<<10))|0);
 var $662=(($661+$659)|0);
 var $663=HEAP8[($662)];
 var $664=($663&255);
 var $665=$664&240;
 var $666=(($665)&255);
 HEAP8[($662)]=$666;
 var $667=$l;
 var $668=((($667)+(1))|0);
 var $669=((4504+($668<<1))|0);
 var $670=(($669)|0);
 var $671=HEAP8[($670)];
 var $672=($671&255);
 var $673=$y;
 var $674=((($673)+(4))|0);
 var $675=$j;
 var $676=(($pat+($675<<10))|0);
 var $677=(($676+$674)|0);
 var $678=HEAP8[($677)];
 var $679=($678&255);
 var $680=$679|$672;
 var $681=(($680)&255);
 HEAP8[($677)]=$681;
 var $682=$l;
 var $683=((($682)+(1))|0);
 var $684=((4504+($683<<1))|0);
 var $685=(($684+1)|0);
 var $686=HEAP8[($685)];
 var $687=$y;
 var $688=((($687)+(5))|0);
 var $689=$j;
 var $690=(($pat+($689<<10))|0);
 var $691=(($690+$688)|0);
 HEAP8[($691)]=$686;
 label=102;break;
 case 100: 
 label=101;break;
 case 101: 
 var $694=$l;
 var $695=((($694)+(1))|0);
 $l=$695;
 label=97;break;
 case 102: 
 label=103;break;
 case 103: 
 var $698=$y;
 var $699=((($698)+(6))|0);
 var $700=$j;
 var $701=(($pat+($700<<10))|0);
 var $702=(($701+$699)|0);
 var $703=HEAP8[($702)];
 var $704=($703&255);
 var $705=$704&15;
 var $706=($705|0)==13;
 if($706){label=105;break;}else{label=104;break;}
 case 104: 
 var $708=$y;
 var $709=((($708)+(6))|0);
 var $710=$j;
 var $711=(($pat+($710<<10))|0);
 var $712=(($711+$709)|0);
 var $713=HEAP8[($712)];
 var $714=($713&255);
 var $715=$714&15;
 var $716=($715|0)==11;
 if($716){label=105;break;}else{label=106;break;}
 case 105: 
 $FLAG=0;
 label=106;break;
 case 106: 
 var $719=$1;
 var $720=_read16b($719);
 var $721=($720&65535);
 $x1=$721;
 var $722=$k;
 var $723=((($722)+(2))|0);
 $k=$723;
 var $724=$x1;
 var $725=($724<<2);
 var $726=$reftab;
 var $727=(($726+$725)|0);
 var $728=HEAP8[($727)];
 var $729=$y;
 var $730=((($729)+(8))|0);
 var $731=$j;
 var $732=(($pat+($731<<10))|0);
 var $733=(($732+$730)|0);
 HEAP8[($733)]=$728;
 var $734=$x1;
 var $735=($734<<2);
 var $736=((($735)+(1))|0);
 var $737=$reftab;
 var $738=(($737+$736)|0);
 var $739=HEAP8[($738)];
 var $740=$y;
 var $741=((($740)+(9))|0);
 var $742=$j;
 var $743=(($pat+($742<<10))|0);
 var $744=(($743+$741)|0);
 HEAP8[($744)]=$739;
 var $745=$x1;
 var $746=($745<<2);
 var $747=((($746)+(2))|0);
 var $748=$reftab;
 var $749=(($748+$747)|0);
 var $750=HEAP8[($749)];
 var $751=$y;
 var $752=((($751)+(10))|0);
 var $753=$j;
 var $754=(($pat+($753<<10))|0);
 var $755=(($754+$752)|0);
 HEAP8[($755)]=$750;
 var $756=$x1;
 var $757=($756<<2);
 var $758=((($757)+(3))|0);
 var $759=$reftab;
 var $760=(($759+$758)|0);
 var $761=HEAP8[($760)];
 var $762=$y;
 var $763=((($762)+(11))|0);
 var $764=$j;
 var $765=(($pat+($764<<10))|0);
 var $766=(($765+$763)|0);
 HEAP8[($766)]=$761;
 var $767=$y;
 var $768=((($767)+(10))|0);
 var $769=$j;
 var $770=(($pat+($769<<10))|0);
 var $771=(($770+$768)|0);
 var $772=HEAP8[($771)];
 var $773=($772&255);
 var $774=$773>>4;
 var $775=$774&15;
 var $776=$y;
 var $777=((($776)+(8))|0);
 var $778=$j;
 var $779=(($pat+($778<<10))|0);
 var $780=(($779+$777)|0);
 var $781=HEAP8[($780)];
 var $782=($781&255);
 var $783=$782&240;
 var $784=$775|$783;
 var $785=(($784)&255);
 $c3=$785;
 var $786=$c3;
 var $787=($786&255);
 var $788=($787|0)!=0;
 if($788){label=107;break;}else{label=108;break;}
 case 107: 
 var $790=$c3;
 var $791=(($oldins+2)|0);
 HEAP8[($791)]=$790;
 label=108;break;
 case 108: 
 var $793=$y;
 var $794=((($793)+(8))|0);
 var $795=$j;
 var $796=(($pat+($795<<10))|0);
 var $797=(($796+$794)|0);
 var $798=HEAP8[($797)];
 var $799=($798&255);
 var $800=$799&15;
 var $801=$800<<8;
 var $802=$y;
 var $803=((($802)+(9))|0);
 var $804=$j;
 var $805=(($pat+($804<<10))|0);
 var $806=(($805+$803)|0);
 var $807=HEAP8[($806)];
 var $808=($807&255);
 var $809=((($801)+($808))|0);
 var $810=(($809)&65535);
 $per=$810;
 var $811=$per;
 var $812=(($811<<16)>>16);
 var $813=($812|0)!=0;
 if($813){label=109;break;}else{label=117;break;}
 case 109: 
 var $815=(($oldins+2)|0);
 var $816=HEAP8[($815)];
 var $817=($816&255);
 var $818=((($817)-(1))|0);
 var $819=(($fin+$818)|0);
 var $820=HEAP8[($819)];
 var $821=($820&255);
 var $822=($821|0)!=0;
 if($822){label=110;break;}else{label=117;break;}
 case 110: 
 $l=0;
 label=111;break;
 case 111: 
 var $825=$l;
 var $826=($825|0)<36;
 if($826){label=112;break;}else{label=116;break;}
 case 112: 
 var $828=$l;
 var $829=(($oldins+2)|0);
 var $830=HEAP8[($829)];
 var $831=($830&255);
 var $832=((($831)-(1))|0);
 var $833=(($fin+$832)|0);
 var $834=HEAP8[($833)];
 var $835=($834&255);
 var $836=((280+((($835)*(72))&-1))|0);
 var $837=(($836+($828<<1))|0);
 var $838=HEAP16[(($837)>>1)];
 var $839=(($838<<16)>>16);
 var $840=$per;
 var $841=(($840<<16)>>16);
 var $842=($839|0)==($841|0);
 if($842){label=113;break;}else{label=114;break;}
 case 113: 
 var $844=$y;
 var $845=((($844)+(8))|0);
 var $846=$j;
 var $847=(($pat+($846<<10))|0);
 var $848=(($847+$845)|0);
 var $849=HEAP8[($848)];
 var $850=($849&255);
 var $851=$850&240;
 var $852=(($851)&255);
 HEAP8[($848)]=$852;
 var $853=$l;
 var $854=((($853)+(1))|0);
 var $855=((4504+($854<<1))|0);
 var $856=(($855)|0);
 var $857=HEAP8[($856)];
 var $858=($857&255);
 var $859=$y;
 var $860=((($859)+(8))|0);
 var $861=$j;
 var $862=(($pat+($861<<10))|0);
 var $863=(($862+$860)|0);
 var $864=HEAP8[($863)];
 var $865=($864&255);
 var $866=$865|$858;
 var $867=(($866)&255);
 HEAP8[($863)]=$867;
 var $868=$l;
 var $869=((($868)+(1))|0);
 var $870=((4504+($869<<1))|0);
 var $871=(($870+1)|0);
 var $872=HEAP8[($871)];
 var $873=$y;
 var $874=((($873)+(9))|0);
 var $875=$j;
 var $876=(($pat+($875<<10))|0);
 var $877=(($876+$874)|0);
 HEAP8[($877)]=$872;
 label=116;break;
 case 114: 
 label=115;break;
 case 115: 
 var $880=$l;
 var $881=((($880)+(1))|0);
 $l=$881;
 label=111;break;
 case 116: 
 label=117;break;
 case 117: 
 var $884=$y;
 var $885=((($884)+(10))|0);
 var $886=$j;
 var $887=(($pat+($886<<10))|0);
 var $888=(($887+$885)|0);
 var $889=HEAP8[($888)];
 var $890=($889&255);
 var $891=$890&15;
 var $892=($891|0)==13;
 if($892){label=119;break;}else{label=118;break;}
 case 118: 
 var $894=$y;
 var $895=((($894)+(10))|0);
 var $896=$j;
 var $897=(($pat+($896<<10))|0);
 var $898=(($897+$895)|0);
 var $899=HEAP8[($898)];
 var $900=($899&255);
 var $901=$900&15;
 var $902=($901|0)==11;
 if($902){label=119;break;}else{label=120;break;}
 case 119: 
 $FLAG=0;
 label=120;break;
 case 120: 
 var $905=$1;
 var $906=_read16b($905);
 var $907=($906&65535);
 $x1=$907;
 var $908=$k;
 var $909=((($908)+(2))|0);
 $k=$909;
 var $910=$x1;
 var $911=($910<<2);
 var $912=$reftab;
 var $913=(($912+$911)|0);
 var $914=HEAP8[($913)];
 var $915=$y;
 var $916=((($915)+(12))|0);
 var $917=$j;
 var $918=(($pat+($917<<10))|0);
 var $919=(($918+$916)|0);
 HEAP8[($919)]=$914;
 var $920=$x1;
 var $921=($920<<2);
 var $922=((($921)+(1))|0);
 var $923=$reftab;
 var $924=(($923+$922)|0);
 var $925=HEAP8[($924)];
 var $926=$y;
 var $927=((($926)+(13))|0);
 var $928=$j;
 var $929=(($pat+($928<<10))|0);
 var $930=(($929+$927)|0);
 HEAP8[($930)]=$925;
 var $931=$x1;
 var $932=($931<<2);
 var $933=((($932)+(2))|0);
 var $934=$reftab;
 var $935=(($934+$933)|0);
 var $936=HEAP8[($935)];
 var $937=$y;
 var $938=((($937)+(14))|0);
 var $939=$j;
 var $940=(($pat+($939<<10))|0);
 var $941=(($940+$938)|0);
 HEAP8[($941)]=$936;
 var $942=$x1;
 var $943=($942<<2);
 var $944=((($943)+(3))|0);
 var $945=$reftab;
 var $946=(($945+$944)|0);
 var $947=HEAP8[($946)];
 var $948=$y;
 var $949=((($948)+(15))|0);
 var $950=$j;
 var $951=(($pat+($950<<10))|0);
 var $952=(($951+$949)|0);
 HEAP8[($952)]=$947;
 var $953=$y;
 var $954=((($953)+(14))|0);
 var $955=$j;
 var $956=(($pat+($955<<10))|0);
 var $957=(($956+$954)|0);
 var $958=HEAP8[($957)];
 var $959=($958&255);
 var $960=$959>>4;
 var $961=$960&15;
 var $962=$y;
 var $963=((($962)+(12))|0);
 var $964=$j;
 var $965=(($pat+($964<<10))|0);
 var $966=(($965+$963)|0);
 var $967=HEAP8[($966)];
 var $968=($967&255);
 var $969=$968&240;
 var $970=$961|$969;
 var $971=(($970)&255);
 $c3=$971;
 var $972=$c3;
 var $973=($972&255);
 var $974=($973|0)!=0;
 if($974){label=121;break;}else{label=122;break;}
 case 121: 
 var $976=$c3;
 var $977=(($oldins+3)|0);
 HEAP8[($977)]=$976;
 label=122;break;
 case 122: 
 var $979=$y;
 var $980=((($979)+(12))|0);
 var $981=$j;
 var $982=(($pat+($981<<10))|0);
 var $983=(($982+$980)|0);
 var $984=HEAP8[($983)];
 var $985=($984&255);
 var $986=$985&15;
 var $987=$986<<8;
 var $988=$y;
 var $989=((($988)+(13))|0);
 var $990=$j;
 var $991=(($pat+($990<<10))|0);
 var $992=(($991+$989)|0);
 var $993=HEAP8[($992)];
 var $994=($993&255);
 var $995=((($987)+($994))|0);
 var $996=(($995)&65535);
 $per=$996;
 var $997=$per;
 var $998=(($997<<16)>>16);
 var $999=($998|0)!=0;
 if($999){label=123;break;}else{label=131;break;}
 case 123: 
 var $1001=(($oldins+3)|0);
 var $1002=HEAP8[($1001)];
 var $1003=($1002&255);
 var $1004=((($1003)-(1))|0);
 var $1005=(($fin+$1004)|0);
 var $1006=HEAP8[($1005)];
 var $1007=($1006&255);
 var $1008=($1007|0)!=0;
 if($1008){label=124;break;}else{label=131;break;}
 case 124: 
 $l=0;
 label=125;break;
 case 125: 
 var $1011=$l;
 var $1012=($1011|0)<36;
 if($1012){label=126;break;}else{label=130;break;}
 case 126: 
 var $1014=$l;
 var $1015=(($oldins+3)|0);
 var $1016=HEAP8[($1015)];
 var $1017=($1016&255);
 var $1018=((($1017)-(1))|0);
 var $1019=(($fin+$1018)|0);
 var $1020=HEAP8[($1019)];
 var $1021=($1020&255);
 var $1022=((280+((($1021)*(72))&-1))|0);
 var $1023=(($1022+($1014<<1))|0);
 var $1024=HEAP16[(($1023)>>1)];
 var $1025=(($1024<<16)>>16);
 var $1026=$per;
 var $1027=(($1026<<16)>>16);
 var $1028=($1025|0)==($1027|0);
 if($1028){label=127;break;}else{label=128;break;}
 case 127: 
 var $1030=$y;
 var $1031=((($1030)+(12))|0);
 var $1032=$j;
 var $1033=(($pat+($1032<<10))|0);
 var $1034=(($1033+$1031)|0);
 var $1035=HEAP8[($1034)];
 var $1036=($1035&255);
 var $1037=$1036&240;
 var $1038=(($1037)&255);
 HEAP8[($1034)]=$1038;
 var $1039=$l;
 var $1040=((($1039)+(1))|0);
 var $1041=((4504+($1040<<1))|0);
 var $1042=(($1041)|0);
 var $1043=HEAP8[($1042)];
 var $1044=($1043&255);
 var $1045=$y;
 var $1046=((($1045)+(12))|0);
 var $1047=$j;
 var $1048=(($pat+($1047<<10))|0);
 var $1049=(($1048+$1046)|0);
 var $1050=HEAP8[($1049)];
 var $1051=($1050&255);
 var $1052=$1051|$1044;
 var $1053=(($1052)&255);
 HEAP8[($1049)]=$1053;
 var $1054=$l;
 var $1055=((($1054)+(1))|0);
 var $1056=((4504+($1055<<1))|0);
 var $1057=(($1056+1)|0);
 var $1058=HEAP8[($1057)];
 var $1059=$y;
 var $1060=((($1059)+(13))|0);
 var $1061=$j;
 var $1062=(($pat+($1061<<10))|0);
 var $1063=(($1062+$1060)|0);
 HEAP8[($1063)]=$1058;
 label=130;break;
 case 128: 
 label=129;break;
 case 129: 
 var $1066=$l;
 var $1067=((($1066)+(1))|0);
 $l=$1067;
 label=125;break;
 case 130: 
 label=131;break;
 case 131: 
 var $1070=$y;
 var $1071=((($1070)+(14))|0);
 var $1072=$j;
 var $1073=(($pat+($1072<<10))|0);
 var $1074=(($1073+$1071)|0);
 var $1075=HEAP8[($1074)];
 var $1076=($1075&255);
 var $1077=$1076&15;
 var $1078=($1077|0)==13;
 if($1078){label=133;break;}else{label=132;break;}
 case 132: 
 var $1080=$y;
 var $1081=((($1080)+(14))|0);
 var $1082=$j;
 var $1083=(($pat+($1082<<10))|0);
 var $1084=(($1083+$1081)|0);
 var $1085=HEAP8[($1084)];
 var $1086=($1085&255);
 var $1087=$1086&15;
 var $1088=($1087|0)==11;
 if($1088){label=133;break;}else{label=134;break;}
 case 133: 
 $FLAG=0;
 label=134;break;
 case 134: 
 var $1091=$FLAG;
 var $1092=($1091&255);
 var $1093=($1092|0)==0;
 if($1093){label=135;break;}else{label=136;break;}
 case 135: 
 $FLAG=1;
 label=138;break;
 case 136: 
 label=137;break;
 case 137: 
 var $1097=$i;
 var $1098=((($1097)+(1))|0);
 $i=$1098;
 label=77;break;
 case 138: 
 var $1100=$j;
 var $1101=(($pat+($1100<<10))|0);
 var $1102=(($1101)|0);
 var $1103=$2;
 var $1104=_fwrite($1102,1024,1,$1103);
 label=139;break;
 case 139: 
 var $1106=$j;
 var $1107=((($1106)+(1))|0);
 $j=$1107;
 label=75;break;
 case 140: 
 var $1109=$reftab;
 _free($1109);
 var $1110=$1;
 var $1111=_fseek($1110,4452,0);
 var $1112=$1;
 var $1113=_read32b($1112);
 $SDAV=$1113;
 var $1114=$1;
 var $1115=$SDAV;
 var $1116=((($1115)+(4456))|0);
 var $1117=_fseek($1114,$1116,0);
 var $1118=$2;
 var $1119=$1;
 var $1120=$ssize;
 var $1121=_pw_move_data($1118,$1119,$1120);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_p18a($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $start;
 $2=$data;
 $3=$t;
 $4=$s;
 $i=0;
 $start=0;
 label=2;break;
 case 2: 
 var $6=$4;
 var $7=($6|0)<22;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$4;
 var $10=(((22)-($9))|0);
 $1=$10;
 label=39;break;
 case 4: 
 label=5;break;
 case 5: 
 var $13=$i;
 var $14=$2;
 var $15=(($14+$13)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=($17|0)!=96;
 if($18){label=21;break;}else{label=6;break;}
 case 6: 
 var $20=$i;
 var $21=((($20)+(1))|0);
 var $22=$2;
 var $23=(($22+$21)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=($25|0)!=56;
 if($26){label=21;break;}else{label=7;break;}
 case 7: 
 var $28=$i;
 var $29=((($28)+(2))|0);
 var $30=$2;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=($33|0)!=96;
 if($34){label=21;break;}else{label=8;break;}
 case 8: 
 var $36=$i;
 var $37=((($36)+(3))|0);
 var $38=$2;
 var $39=(($38+$37)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=($41|0)!=0;
 if($42){label=21;break;}else{label=9;break;}
 case 9: 
 var $44=$i;
 var $45=((($44)+(4))|0);
 var $46=$2;
 var $47=(($46+$45)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=($49|0)!=0;
 if($50){label=21;break;}else{label=10;break;}
 case 10: 
 var $52=$i;
 var $53=((($52)+(5))|0);
 var $54=$2;
 var $55=(($54+$53)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=($57|0)!=160;
 if($58){label=21;break;}else{label=11;break;}
 case 11: 
 var $60=$i;
 var $61=((($60)+(6))|0);
 var $62=$2;
 var $63=(($62+$61)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=($65|0)!=96;
 if($66){label=21;break;}else{label=12;break;}
 case 12: 
 var $68=$i;
 var $69=((($68)+(7))|0);
 var $70=$2;
 var $71=(($70+$69)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=($73|0)!=0;
 if($74){label=21;break;}else{label=13;break;}
 case 13: 
 var $76=$i;
 var $77=((($76)+(8))|0);
 var $78=$2;
 var $79=(($78+$77)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=($81|0)!=1;
 if($82){label=21;break;}else{label=14;break;}
 case 14: 
 var $84=$i;
 var $85=((($84)+(9))|0);
 var $86=$2;
 var $87=(($86+$85)|0);
 var $88=HEAP8[($87)];
 var $89=($88&255);
 var $90=($89|0)!=62;
 if($90){label=21;break;}else{label=15;break;}
 case 15: 
 var $92=$i;
 var $93=((($92)+(10))|0);
 var $94=$2;
 var $95=(($94+$93)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=($97|0)!=96;
 if($98){label=21;break;}else{label=16;break;}
 case 16: 
 var $100=$i;
 var $101=((($100)+(11))|0);
 var $102=$2;
 var $103=(($102+$101)|0);
 var $104=HEAP8[($103)];
 var $105=($104&255);
 var $106=($105|0)!=0;
 if($106){label=21;break;}else{label=17;break;}
 case 17: 
 var $108=$i;
 var $109=((($108)+(12))|0);
 var $110=$2;
 var $111=(($110+$109)|0);
 var $112=HEAP8[($111)];
 var $113=($112&255);
 var $114=($113|0)!=1;
 if($114){label=21;break;}else{label=18;break;}
 case 18: 
 var $116=$i;
 var $117=((($116)+(13))|0);
 var $118=$2;
 var $119=(($118+$117)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=($121|0)!=12;
 if($122){label=21;break;}else{label=19;break;}
 case 19: 
 var $124=$i;
 var $125=((($124)+(14))|0);
 var $126=$2;
 var $127=(($126+$125)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=($129|0)!=72;
 if($130){label=21;break;}else{label=20;break;}
 case 20: 
 var $132=$i;
 var $133=((($132)+(15))|0);
 var $134=$2;
 var $135=(($134+$133)|0);
 var $136=HEAP8[($135)];
 var $137=($136&255);
 var $138=($137|0)!=231;
 if($138){label=21;break;}else{label=22;break;}
 case 21: 
 $1=-1;
 label=39;break;
 case 22: 
 var $141=$start;
 var $142=((($141)+(21))|0);
 var $143=$2;
 var $144=(($143+$142)|0);
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=($146|0)!=210;
 if($147){label=23;break;}else{label=24;break;}
 case 23: 
 $1=-1;
 label=39;break;
 case 24: 
 label=25;break;
 case 25: 
 var $151=$4;
 var $152=($151|0)<4460;
 if($152){label=26;break;}else{label=27;break;}
 case 26: 
 var $154=$4;
 var $155=(((4460)-($154))|0);
 $1=$155;
 label=39;break;
 case 27: 
 label=28;break;
 case 28: 
 var $158=$2;
 var $159=$start;
 var $160=(($158+$159)|0);
 var $161=(($160+4456)|0);
 var $162=_readmem32b($161);
 $j=$162;
 label=29;break;
 case 29: 
 var $164=$4;
 var $165=($164|0)<4714;
 if($165){label=30;break;}else{label=31;break;}
 case 30: 
 var $167=$4;
 var $168=(((4714)-($167))|0);
 $1=$168;
 label=39;break;
 case 31: 
 label=32;break;
 case 32: 
 var $171=$2;
 var $172=$start;
 var $173=(($171+$172)|0);
 var $174=(($173+4712)|0);
 var $175=_readmem16b($174);
 var $176=($175&65535);
 $k=$176;
 var $177=$k;
 var $178=$177&3;
 var $179=($178|0)!=0;
 if($179){label=33;break;}else{label=34;break;}
 case 33: 
 $1=-1;
 label=39;break;
 case 34: 
 var $182=$start;
 var $183=((($182)+(36))|0);
 var $184=$2;
 var $185=(($184+$183)|0);
 var $186=HEAP8[($185)];
 var $187=($186&255);
 var $188=($187|0)!=17;
 if($188){label=35;break;}else{label=36;break;}
 case 35: 
 $1=-1;
 label=39;break;
 case 36: 
 var $191=$start;
 var $192=((($191)+(37))|0);
 var $193=$2;
 var $194=(($193+$192)|0);
 var $195=HEAP8[($194)];
 var $196=($195&255);
 var $197=($196|0)!=0;
 if($197){label=37;break;}else{label=38;break;}
 case 37: 
 $1=-1;
 label=39;break;
 case 38: 
 var $200=$3;
 _pw_read_title(0,$200,0);
 $1=0;
 label=39;break;
 case 39: 
 var $202=$1;
 STACKTOP=sp;return $202;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_p18a($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+164520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c3;
 var $pat_max;
 var $tmp_ptr;
 var $refmax;
 var $pnum=sp;
 var $paddr=(sp)+(128);
 var $pptr=(sp)+(640);
 var $NOP;
 var $reftab;
 var $pat=(sp)+(33408);
 var $i;
 var $j;
 var $k;
 var $l;
 var $size;
 var $ssize;
 var $psize;
 var $SDAV;
 var $FLAG;
 var $fin=(sp)+(164480);
 var $oins=(sp)+(164512);
 var $per;
 var $x;
 var $x1;
 var $y;
 $1=$in;
 $2=$out;
 $NOP=0;
 $i=0;
 $j=0;
 $k=0;
 $l=0;
 $FLAG=1;
 var $3=$pnum;
 _memset($3, 0, 128)|0;
 var $4=$pptr;
 _memset($4, 0, 16384)|0;
 var $5=$pat;
 _memset($5, 0, 131072)|0;
 var $6=$fin;
 _memset($6, 0, 31)|0;
 var $7=$oins;
 HEAP8[($7)]=0; HEAP8[((($7)+(1))|0)]=0; HEAP8[((($7)+(2))|0)]=0; HEAP8[((($7)+(3))|0)]=0;
 var $8=$paddr;
 _memset($8, 0, 512)|0;
 var $9=$2;
 var $10=_pw_write_zero($9,20);
 var $11=$1;
 var $12=_fseek($11,4464,0);
 $ssize=0;
 $i=0;
 label=2;break;
 case 2: 
 var $14=$i;
 var $15=($14|0)<31;
 if($15){label=3;break;}else{label=5;break;}
 case 3: 
 var $17=$2;
 var $18=_pw_write_zero($17,22);
 var $19=$2;
 var $20=$1;
 var $21=_read16b($20);
 var $22=($21&65535);
 $size=$22;
 var $23=(($22)&65535);
 _write16b($19,$23);
 var $24=$size;
 var $25=($24<<1);
 var $26=$ssize;
 var $27=((($26)+($25))|0);
 $ssize=$27;
 var $28=$2;
 var $29=$1;
 var $30=_read8($29);
 var $31=$i;
 var $32=(($fin+$31)|0);
 HEAP8[($32)]=$30;
 _write8($28,$30);
 var $33=$2;
 var $34=$1;
 var $35=_read8($34);
 _write8($33,$35);
 var $36=$2;
 var $37=$1;
 var $38=_read16b($37);
 _write16b($36,$38);
 var $39=$2;
 var $40=$1;
 var $41=_read16b($40);
 _write16b($39,$41);
 label=4;break;
 case 4: 
 var $43=$i;
 var $44=((($43)+(1))|0);
 $i=$44;
 label=2;break;
 case 5: 
 var $46=$2;
 var $47=$1;
 var $48=_read16b($47);
 var $49=($48&65535);
 var $50=(((($49|0))/(4))&-1);
 var $51=(($50)&255);
 $NOP=$51;
 _write8($46,$51);
 var $52=$2;
 _write8($52,127);
 $i=0;
 label=6;break;
 case 6: 
 var $54=$i;
 var $55=($54|0)<128;
 if($55){label=7;break;}else{label=9;break;}
 case 7: 
 var $57=$1;
 var $58=_read32b($57);
 var $59=$i;
 var $60=(($paddr+($59<<2))|0);
 HEAP32[(($60)>>2)]=$58;
 label=8;break;
 case 8: 
 var $62=$i;
 var $63=((($62)+(1))|0);
 $i=$63;
 label=6;break;
 case 9: 
 $tmp_ptr=0;
 $i=0;
 label=10;break;
 case 10: 
 var $66=$i;
 var $67=$NOP;
 var $68=($67&255);
 var $69=($66|0)<($68|0);
 if($69){label=11;break;}else{label=23;break;}
 case 11: 
 var $71=$i;
 var $72=($71|0)==0;
 if($72){label=12;break;}else{label=13;break;}
 case 12: 
 var $74=(($pnum)|0);
 HEAP8[($74)]=0;
 var $75=$tmp_ptr;
 var $76=((($75)+(1))|0);
 $tmp_ptr=$76;
 label=22;break;
 case 13: 
 $j=0;
 label=14;break;
 case 14: 
 var $79=$j;
 var $80=$i;
 var $81=($79|0)<($80|0);
 if($81){label=15;break;}else{label=19;break;}
 case 15: 
 var $83=$i;
 var $84=(($paddr+($83<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$j;
 var $87=(($paddr+($86<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($85|0)==($88|0);
 if($89){label=16;break;}else{label=17;break;}
 case 16: 
 var $91=$j;
 var $92=(($pnum+$91)|0);
 var $93=HEAP8[($92)];
 var $94=$i;
 var $95=(($pnum+$94)|0);
 HEAP8[($95)]=$93;
 label=19;break;
 case 17: 
 label=18;break;
 case 18: 
 var $98=$j;
 var $99=((($98)+(1))|0);
 $j=$99;
 label=14;break;
 case 19: 
 var $101=$j;
 var $102=$i;
 var $103=($101|0)==($102|0);
 if($103){label=20;break;}else{label=21;break;}
 case 20: 
 var $105=$tmp_ptr;
 var $106=((($105)+(1))|0);
 $tmp_ptr=$106;
 var $107=(($105)&255);
 var $108=$i;
 var $109=(($pnum+$108)|0);
 HEAP8[($109)]=$107;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $112=$i;
 var $113=((($112)+(1))|0);
 $i=$113;
 label=10;break;
 case 23: 
 var $115=$tmp_ptr;
 var $116=((($115)-(1))|0);
 var $117=(($116)&65535);
 $pat_max=$117;
 var $118=(($pnum)|0);
 var $119=$2;
 var $120=_fwrite($118,128,1,$119);
 var $121=$2;
 _write32b($121,1294879534);
 var $122=$1;
 var $123=_fseek($122,4460,0);
 var $124=$1;
 var $125=_read32b($124);
 $psize=$125;
 var $126=$1;
 var $127=_fseek($126,5226,0);
 $refmax=0;
 $j=0;
 label=24;break;
 case 24: 
 var $129=$j;
 var $130=$psize;
 var $131=($129|0)<($130|0);
 if($131){label=25;break;}else{label=29;break;}
 case 25: 
 var $133=$1;
 var $134=_read16b($133);
 var $135=($134&65535);
 $x=$135;
 var $136=$x;
 var $137=$refmax;
 var $138=($136|0)>($137|0);
 if($138){label=26;break;}else{label=27;break;}
 case 26: 
 var $140=$x;
 $refmax=$140;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $143=$j;
 var $144=((($143)+(2))|0);
 $j=$144;
 label=24;break;
 case 29: 
 var $146=$refmax;
 var $147=((($146)+(1))|0);
 $refmax=$147;
 var $148=$refmax;
 var $149=($148<<2);
 $i=$149;
 var $150=$i;
 var $151=_malloc($150);
 $reftab=$151;
 var $152=$reftab;
 var $153=$i;
 var $154=$1;
 var $155=_fread($152,$153,1,$154);
 var $156=$1;
 var $157=_fseek($156,5226,0);
 $k=0;
 $j=0;
 label=30;break;
 case 30: 
 var $159=$j;
 var $160=$pat_max;
 var $161=(($160<<16)>>16);
 var $162=($159|0)<=($161|0);
 if($162){label=31;break;}else{label=95;break;}
 case 31: 
 var $164=$1;
 var $165=$j;
 var $166=(($paddr+($165<<2))|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=((($167)+(5226))|0);
 var $169=_fseek($164,$168,0);
 $i=0;
 label=32;break;
 case 32: 
 var $171=$i;
 var $172=($171|0)<64;
 if($172){label=33;break;}else{label=93;break;}
 case 33: 
 var $174=$1;
 var $175=_read16b($174);
 var $176=($175&65535);
 var $177=($176<<2);
 $x1=$177;
 var $178=$i;
 var $179=($178<<4);
 $y=$179;
 var $180=$k;
 var $181=((($180)+(2))|0);
 $k=$181;
 var $182=$x1;
 var $183=$reftab;
 var $184=(($183+$182)|0);
 var $185=HEAP8[($184)];
 var $186=$y;
 var $187=$j;
 var $188=(($pat+($187<<10))|0);
 var $189=(($188+$186)|0);
 HEAP8[($189)]=$185;
 var $190=$x1;
 var $191=((($190)+(1))|0);
 var $192=$reftab;
 var $193=(($192+$191)|0);
 var $194=HEAP8[($193)];
 var $195=$y;
 var $196=((($195)+(1))|0);
 var $197=$j;
 var $198=(($pat+($197<<10))|0);
 var $199=(($198+$196)|0);
 HEAP8[($199)]=$194;
 var $200=$x1;
 var $201=((($200)+(2))|0);
 var $202=$reftab;
 var $203=(($202+$201)|0);
 var $204=HEAP8[($203)];
 var $205=$y;
 var $206=((($205)+(2))|0);
 var $207=$j;
 var $208=(($pat+($207<<10))|0);
 var $209=(($208+$206)|0);
 HEAP8[($209)]=$204;
 var $210=$x1;
 var $211=((($210)+(3))|0);
 var $212=$reftab;
 var $213=(($212+$211)|0);
 var $214=HEAP8[($213)];
 var $215=$y;
 var $216=((($215)+(3))|0);
 var $217=$j;
 var $218=(($pat+($217<<10))|0);
 var $219=(($218+$216)|0);
 HEAP8[($219)]=$214;
 var $220=$y;
 var $221=((($220)+(2))|0);
 var $222=$j;
 var $223=(($pat+($222<<10))|0);
 var $224=(($223+$221)|0);
 var $225=HEAP8[($224)];
 var $226=($225&255);
 var $227=$226>>4;
 var $228=$227&15;
 var $229=$y;
 var $230=$j;
 var $231=(($pat+($230<<10))|0);
 var $232=(($231+$229)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=$234&240;
 var $236=$228|$235;
 var $237=(($236)&255);
 $c3=$237;
 var $238=$c3;
 var $239=(($238<<24)>>24)!=0;
 if($239){label=34;break;}else{label=35;break;}
 case 34: 
 var $241=$c3;
 var $242=(($oins)|0);
 HEAP8[($242)]=$241;
 label=35;break;
 case 35: 
 var $244=$y;
 var $245=$j;
 var $246=(($pat+($245<<10))|0);
 var $247=(($246+$244)|0);
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=$249&15;
 var $251=$250<<8;
 var $252=$y;
 var $253=((($252)+(1))|0);
 var $254=$j;
 var $255=(($pat+($254<<10))|0);
 var $256=(($255+$253)|0);
 var $257=HEAP8[($256)];
 var $258=($257&255);
 var $259=((($251)+($258))|0);
 var $260=(($259)&65535);
 $per=$260;
 var $261=$per;
 var $262=(($261<<16)>>16);
 var $263=($262|0)!=0;
 if($263){label=36;break;}else{label=44;break;}
 case 36: 
 var $265=(($oins)|0);
 var $266=HEAP8[($265)];
 var $267=($266&255);
 var $268=((($267)-(1))|0);
 var $269=(($fin+$268)|0);
 var $270=HEAP8[($269)];
 var $271=($270&255);
 var $272=($271|0)!=0;
 if($272){label=37;break;}else{label=44;break;}
 case 37: 
 $l=0;
 label=38;break;
 case 38: 
 var $275=$l;
 var $276=($275|0)<36;
 if($276){label=39;break;}else{label=43;break;}
 case 39: 
 var $278=$l;
 var $279=(($oins)|0);
 var $280=HEAP8[($279)];
 var $281=($280&255);
 var $282=((($281)-(1))|0);
 var $283=(($fin+$282)|0);
 var $284=HEAP8[($283)];
 var $285=($284&255);
 var $286=((280+((($285)*(72))&-1))|0);
 var $287=(($286+($278<<1))|0);
 var $288=HEAP16[(($287)>>1)];
 var $289=(($288<<16)>>16);
 var $290=$per;
 var $291=(($290<<16)>>16);
 var $292=($289|0)==($291|0);
 if($292){label=40;break;}else{label=41;break;}
 case 40: 
 var $294=$y;
 var $295=$j;
 var $296=(($pat+($295<<10))|0);
 var $297=(($296+$294)|0);
 var $298=HEAP8[($297)];
 var $299=($298&255);
 var $300=$299&240;
 var $301=(($300)&255);
 HEAP8[($297)]=$301;
 var $302=$l;
 var $303=((($302)+(1))|0);
 var $304=((4504+($303<<1))|0);
 var $305=(($304)|0);
 var $306=HEAP8[($305)];
 var $307=($306&255);
 var $308=$y;
 var $309=$j;
 var $310=(($pat+($309<<10))|0);
 var $311=(($310+$308)|0);
 var $312=HEAP8[($311)];
 var $313=($312&255);
 var $314=$313|$307;
 var $315=(($314)&255);
 HEAP8[($311)]=$315;
 var $316=$l;
 var $317=((($316)+(1))|0);
 var $318=((4504+($317<<1))|0);
 var $319=(($318+1)|0);
 var $320=HEAP8[($319)];
 var $321=$y;
 var $322=((($321)+(1))|0);
 var $323=$j;
 var $324=(($pat+($323<<10))|0);
 var $325=(($324+$322)|0);
 HEAP8[($325)]=$320;
 label=43;break;
 case 41: 
 label=42;break;
 case 42: 
 var $328=$l;
 var $329=((($328)+(1))|0);
 $l=$329;
 label=38;break;
 case 43: 
 label=44;break;
 case 44: 
 var $332=$y;
 var $333=((($332)+(2))|0);
 var $334=$j;
 var $335=(($pat+($334<<10))|0);
 var $336=(($335+$333)|0);
 var $337=HEAP8[($336)];
 var $338=($337&255);
 var $339=$338&15;
 var $340=($339|0)==13;
 if($340){label=46;break;}else{label=45;break;}
 case 45: 
 var $342=$y;
 var $343=((($342)+(2))|0);
 var $344=$j;
 var $345=(($pat+($344<<10))|0);
 var $346=(($345+$343)|0);
 var $347=HEAP8[($346)];
 var $348=($347&255);
 var $349=$348&15;
 var $350=($349|0)==11;
 if($350){label=46;break;}else{label=47;break;}
 case 46: 
 $FLAG=0;
 label=47;break;
 case 47: 
 var $353=$1;
 var $354=_read16b($353);
 var $355=($354&65535);
 var $356=($355<<2);
 $x1=$356;
 var $357=$k;
 var $358=((($357)+(2))|0);
 $k=$358;
 var $359=$x1;
 var $360=$reftab;
 var $361=(($360+$359)|0);
 var $362=HEAP8[($361)];
 var $363=$y;
 var $364=((($363)+(4))|0);
 var $365=$j;
 var $366=(($pat+($365<<10))|0);
 var $367=(($366+$364)|0);
 HEAP8[($367)]=$362;
 var $368=$x1;
 var $369=((($368)+(1))|0);
 var $370=$reftab;
 var $371=(($370+$369)|0);
 var $372=HEAP8[($371)];
 var $373=$y;
 var $374=((($373)+(5))|0);
 var $375=$j;
 var $376=(($pat+($375<<10))|0);
 var $377=(($376+$374)|0);
 HEAP8[($377)]=$372;
 var $378=$x1;
 var $379=((($378)+(2))|0);
 var $380=$reftab;
 var $381=(($380+$379)|0);
 var $382=HEAP8[($381)];
 var $383=$y;
 var $384=((($383)+(6))|0);
 var $385=$j;
 var $386=(($pat+($385<<10))|0);
 var $387=(($386+$384)|0);
 HEAP8[($387)]=$382;
 var $388=$x1;
 var $389=((($388)+(3))|0);
 var $390=$reftab;
 var $391=(($390+$389)|0);
 var $392=HEAP8[($391)];
 var $393=$y;
 var $394=((($393)+(7))|0);
 var $395=$j;
 var $396=(($pat+($395<<10))|0);
 var $397=(($396+$394)|0);
 HEAP8[($397)]=$392;
 var $398=$y;
 var $399=((($398)+(6))|0);
 var $400=$j;
 var $401=(($pat+($400<<10))|0);
 var $402=(($401+$399)|0);
 var $403=HEAP8[($402)];
 var $404=($403&255);
 var $405=$404>>4;
 var $406=$405&15;
 var $407=$y;
 var $408=((($407)+(4))|0);
 var $409=$j;
 var $410=(($pat+($409<<10))|0);
 var $411=(($410+$408)|0);
 var $412=HEAP8[($411)];
 var $413=($412&255);
 var $414=$413&240;
 var $415=$406|$414;
 var $416=(($415)&255);
 $c3=$416;
 var $417=$c3;
 var $418=(($417<<24)>>24)!=0;
 if($418){label=48;break;}else{label=49;break;}
 case 48: 
 var $420=$c3;
 var $421=(($oins+1)|0);
 HEAP8[($421)]=$420;
 label=49;break;
 case 49: 
 var $423=$y;
 var $424=((($423)+(4))|0);
 var $425=$j;
 var $426=(($pat+($425<<10))|0);
 var $427=(($426+$424)|0);
 var $428=HEAP8[($427)];
 var $429=($428&255);
 var $430=$429&15;
 var $431=$430<<8;
 var $432=$y;
 var $433=((($432)+(5))|0);
 var $434=$j;
 var $435=(($pat+($434<<10))|0);
 var $436=(($435+$433)|0);
 var $437=HEAP8[($436)];
 var $438=($437&255);
 var $439=((($431)+($438))|0);
 var $440=(($439)&65535);
 $per=$440;
 var $441=$per;
 var $442=(($441<<16)>>16);
 var $443=($442|0)!=0;
 if($443){label=50;break;}else{label=58;break;}
 case 50: 
 var $445=(($oins+1)|0);
 var $446=HEAP8[($445)];
 var $447=($446&255);
 var $448=((($447)-(1))|0);
 var $449=(($fin+$448)|0);
 var $450=HEAP8[($449)];
 var $451=($450&255);
 var $452=($451|0)!=0;
 if($452){label=51;break;}else{label=58;break;}
 case 51: 
 $l=0;
 label=52;break;
 case 52: 
 var $455=$l;
 var $456=($455|0)<36;
 if($456){label=53;break;}else{label=57;break;}
 case 53: 
 var $458=$l;
 var $459=(($oins+1)|0);
 var $460=HEAP8[($459)];
 var $461=($460&255);
 var $462=((($461)-(1))|0);
 var $463=(($fin+$462)|0);
 var $464=HEAP8[($463)];
 var $465=($464&255);
 var $466=((280+((($465)*(72))&-1))|0);
 var $467=(($466+($458<<1))|0);
 var $468=HEAP16[(($467)>>1)];
 var $469=(($468<<16)>>16);
 var $470=$per;
 var $471=(($470<<16)>>16);
 var $472=($469|0)==($471|0);
 if($472){label=54;break;}else{label=55;break;}
 case 54: 
 var $474=$y;
 var $475=((($474)+(4))|0);
 var $476=$j;
 var $477=(($pat+($476<<10))|0);
 var $478=(($477+$475)|0);
 var $479=HEAP8[($478)];
 var $480=($479&255);
 var $481=$480&240;
 var $482=(($481)&255);
 HEAP8[($478)]=$482;
 var $483=$l;
 var $484=((($483)+(1))|0);
 var $485=((4504+($484<<1))|0);
 var $486=(($485)|0);
 var $487=HEAP8[($486)];
 var $488=($487&255);
 var $489=$y;
 var $490=((($489)+(4))|0);
 var $491=$j;
 var $492=(($pat+($491<<10))|0);
 var $493=(($492+$490)|0);
 var $494=HEAP8[($493)];
 var $495=($494&255);
 var $496=$495|$488;
 var $497=(($496)&255);
 HEAP8[($493)]=$497;
 var $498=$l;
 var $499=((($498)+(1))|0);
 var $500=((4504+($499<<1))|0);
 var $501=(($500+1)|0);
 var $502=HEAP8[($501)];
 var $503=$y;
 var $504=((($503)+(5))|0);
 var $505=$j;
 var $506=(($pat+($505<<10))|0);
 var $507=(($506+$504)|0);
 HEAP8[($507)]=$502;
 label=57;break;
 case 55: 
 label=56;break;
 case 56: 
 var $510=$l;
 var $511=((($510)+(1))|0);
 $l=$511;
 label=52;break;
 case 57: 
 label=58;break;
 case 58: 
 var $514=$y;
 var $515=((($514)+(6))|0);
 var $516=$j;
 var $517=(($pat+($516<<10))|0);
 var $518=(($517+$515)|0);
 var $519=HEAP8[($518)];
 var $520=($519&255);
 var $521=$520&15;
 var $522=($521|0)==13;
 if($522){label=60;break;}else{label=59;break;}
 case 59: 
 var $524=$y;
 var $525=((($524)+(6))|0);
 var $526=$j;
 var $527=(($pat+($526<<10))|0);
 var $528=(($527+$525)|0);
 var $529=HEAP8[($528)];
 var $530=($529&255);
 var $531=$530&15;
 var $532=($531|0)==11;
 if($532){label=60;break;}else{label=61;break;}
 case 60: 
 $FLAG=0;
 label=61;break;
 case 61: 
 var $535=$1;
 var $536=_read16b($535);
 var $537=($536&65535);
 var $538=($537<<2);
 $x1=$538;
 var $539=$k;
 var $540=((($539)+(2))|0);
 $k=$540;
 var $541=$x1;
 var $542=$reftab;
 var $543=(($542+$541)|0);
 var $544=HEAP8[($543)];
 var $545=$y;
 var $546=((($545)+(8))|0);
 var $547=$j;
 var $548=(($pat+($547<<10))|0);
 var $549=(($548+$546)|0);
 HEAP8[($549)]=$544;
 var $550=$x1;
 var $551=((($550)+(1))|0);
 var $552=$reftab;
 var $553=(($552+$551)|0);
 var $554=HEAP8[($553)];
 var $555=$y;
 var $556=((($555)+(9))|0);
 var $557=$j;
 var $558=(($pat+($557<<10))|0);
 var $559=(($558+$556)|0);
 HEAP8[($559)]=$554;
 var $560=$x1;
 var $561=((($560)+(2))|0);
 var $562=$reftab;
 var $563=(($562+$561)|0);
 var $564=HEAP8[($563)];
 var $565=$y;
 var $566=((($565)+(10))|0);
 var $567=$j;
 var $568=(($pat+($567<<10))|0);
 var $569=(($568+$566)|0);
 HEAP8[($569)]=$564;
 var $570=$x1;
 var $571=((($570)+(3))|0);
 var $572=$reftab;
 var $573=(($572+$571)|0);
 var $574=HEAP8[($573)];
 var $575=$y;
 var $576=((($575)+(11))|0);
 var $577=$j;
 var $578=(($pat+($577<<10))|0);
 var $579=(($578+$576)|0);
 HEAP8[($579)]=$574;
 var $580=$y;
 var $581=((($580)+(10))|0);
 var $582=$j;
 var $583=(($pat+($582<<10))|0);
 var $584=(($583+$581)|0);
 var $585=HEAP8[($584)];
 var $586=($585&255);
 var $587=$586>>4;
 var $588=$587&15;
 var $589=$y;
 var $590=((($589)+(8))|0);
 var $591=$j;
 var $592=(($pat+($591<<10))|0);
 var $593=(($592+$590)|0);
 var $594=HEAP8[($593)];
 var $595=($594&255);
 var $596=$595&240;
 var $597=$588|$596;
 var $598=(($597)&255);
 $c3=$598;
 var $599=$c3;
 var $600=(($599<<24)>>24)!=0;
 if($600){label=62;break;}else{label=63;break;}
 case 62: 
 var $602=$c3;
 var $603=(($oins+2)|0);
 HEAP8[($603)]=$602;
 label=63;break;
 case 63: 
 var $605=$y;
 var $606=((($605)+(8))|0);
 var $607=$j;
 var $608=(($pat+($607<<10))|0);
 var $609=(($608+$606)|0);
 var $610=HEAP8[($609)];
 var $611=($610&255);
 var $612=$611&15;
 var $613=$612<<8;
 var $614=$y;
 var $615=((($614)+(9))|0);
 var $616=$j;
 var $617=(($pat+($616<<10))|0);
 var $618=(($617+$615)|0);
 var $619=HEAP8[($618)];
 var $620=($619&255);
 var $621=((($613)+($620))|0);
 var $622=(($621)&65535);
 $per=$622;
 var $623=$per;
 var $624=(($623<<16)>>16);
 var $625=($624|0)!=0;
 if($625){label=64;break;}else{label=72;break;}
 case 64: 
 var $627=(($oins+2)|0);
 var $628=HEAP8[($627)];
 var $629=($628&255);
 var $630=((($629)-(1))|0);
 var $631=(($fin+$630)|0);
 var $632=HEAP8[($631)];
 var $633=($632&255);
 var $634=($633|0)!=0;
 if($634){label=65;break;}else{label=72;break;}
 case 65: 
 $l=0;
 label=66;break;
 case 66: 
 var $637=$l;
 var $638=($637|0)<36;
 if($638){label=67;break;}else{label=71;break;}
 case 67: 
 var $640=$l;
 var $641=(($oins+2)|0);
 var $642=HEAP8[($641)];
 var $643=($642&255);
 var $644=((($643)-(1))|0);
 var $645=(($fin+$644)|0);
 var $646=HEAP8[($645)];
 var $647=($646&255);
 var $648=((280+((($647)*(72))&-1))|0);
 var $649=(($648+($640<<1))|0);
 var $650=HEAP16[(($649)>>1)];
 var $651=(($650<<16)>>16);
 var $652=$per;
 var $653=(($652<<16)>>16);
 var $654=($651|0)==($653|0);
 if($654){label=68;break;}else{label=69;break;}
 case 68: 
 var $656=$y;
 var $657=((($656)+(8))|0);
 var $658=$j;
 var $659=(($pat+($658<<10))|0);
 var $660=(($659+$657)|0);
 var $661=HEAP8[($660)];
 var $662=($661&255);
 var $663=$662&240;
 var $664=(($663)&255);
 HEAP8[($660)]=$664;
 var $665=$l;
 var $666=((($665)+(1))|0);
 var $667=((4504+($666<<1))|0);
 var $668=(($667)|0);
 var $669=HEAP8[($668)];
 var $670=($669&255);
 var $671=$y;
 var $672=((($671)+(8))|0);
 var $673=$j;
 var $674=(($pat+($673<<10))|0);
 var $675=(($674+$672)|0);
 var $676=HEAP8[($675)];
 var $677=($676&255);
 var $678=$677|$670;
 var $679=(($678)&255);
 HEAP8[($675)]=$679;
 var $680=$l;
 var $681=((($680)+(1))|0);
 var $682=((4504+($681<<1))|0);
 var $683=(($682+1)|0);
 var $684=HEAP8[($683)];
 var $685=$y;
 var $686=((($685)+(9))|0);
 var $687=$j;
 var $688=(($pat+($687<<10))|0);
 var $689=(($688+$686)|0);
 HEAP8[($689)]=$684;
 label=71;break;
 case 69: 
 label=70;break;
 case 70: 
 var $692=$l;
 var $693=((($692)+(1))|0);
 $l=$693;
 label=66;break;
 case 71: 
 label=72;break;
 case 72: 
 var $696=$y;
 var $697=((($696)+(10))|0);
 var $698=$j;
 var $699=(($pat+($698<<10))|0);
 var $700=(($699+$697)|0);
 var $701=HEAP8[($700)];
 var $702=($701&255);
 var $703=$702&15;
 var $704=($703|0)==13;
 if($704){label=74;break;}else{label=73;break;}
 case 73: 
 var $706=$y;
 var $707=((($706)+(10))|0);
 var $708=$j;
 var $709=(($pat+($708<<10))|0);
 var $710=(($709+$707)|0);
 var $711=HEAP8[($710)];
 var $712=($711&255);
 var $713=$712&15;
 var $714=($713|0)==11;
 if($714){label=74;break;}else{label=75;break;}
 case 74: 
 $FLAG=0;
 label=75;break;
 case 75: 
 var $717=$1;
 var $718=_read16b($717);
 var $719=($718&65535);
 var $720=($719<<2);
 $x1=$720;
 var $721=$k;
 var $722=((($721)+(2))|0);
 $k=$722;
 var $723=$x1;
 var $724=$reftab;
 var $725=(($724+$723)|0);
 var $726=HEAP8[($725)];
 var $727=$y;
 var $728=((($727)+(12))|0);
 var $729=$j;
 var $730=(($pat+($729<<10))|0);
 var $731=(($730+$728)|0);
 HEAP8[($731)]=$726;
 var $732=$x1;
 var $733=((($732)+(1))|0);
 var $734=$reftab;
 var $735=(($734+$733)|0);
 var $736=HEAP8[($735)];
 var $737=$y;
 var $738=((($737)+(13))|0);
 var $739=$j;
 var $740=(($pat+($739<<10))|0);
 var $741=(($740+$738)|0);
 HEAP8[($741)]=$736;
 var $742=$x1;
 var $743=((($742)+(2))|0);
 var $744=$reftab;
 var $745=(($744+$743)|0);
 var $746=HEAP8[($745)];
 var $747=$y;
 var $748=((($747)+(14))|0);
 var $749=$j;
 var $750=(($pat+($749<<10))|0);
 var $751=(($750+$748)|0);
 HEAP8[($751)]=$746;
 var $752=$x1;
 var $753=((($752)+(3))|0);
 var $754=$reftab;
 var $755=(($754+$753)|0);
 var $756=HEAP8[($755)];
 var $757=$y;
 var $758=((($757)+(15))|0);
 var $759=$j;
 var $760=(($pat+($759<<10))|0);
 var $761=(($760+$758)|0);
 HEAP8[($761)]=$756;
 var $762=$y;
 var $763=((($762)+(14))|0);
 var $764=$j;
 var $765=(($pat+($764<<10))|0);
 var $766=(($765+$763)|0);
 var $767=HEAP8[($766)];
 var $768=($767&255);
 var $769=$768>>4;
 var $770=$769&15;
 var $771=$y;
 var $772=((($771)+(12))|0);
 var $773=$j;
 var $774=(($pat+($773<<10))|0);
 var $775=(($774+$772)|0);
 var $776=HEAP8[($775)];
 var $777=($776&255);
 var $778=$777&240;
 var $779=$770|$778;
 var $780=(($779)&255);
 $c3=$780;
 var $781=$c3;
 var $782=($781&255);
 var $783=($782|0)!=0;
 if($783){label=76;break;}else{label=77;break;}
 case 76: 
 var $785=$c3;
 var $786=(($oins+3)|0);
 HEAP8[($786)]=$785;
 label=77;break;
 case 77: 
 var $788=$y;
 var $789=((($788)+(12))|0);
 var $790=$j;
 var $791=(($pat+($790<<10))|0);
 var $792=(($791+$789)|0);
 var $793=HEAP8[($792)];
 var $794=($793&255);
 var $795=$794&15;
 var $796=$795<<8;
 var $797=$y;
 var $798=((($797)+(13))|0);
 var $799=$j;
 var $800=(($pat+($799<<10))|0);
 var $801=(($800+$798)|0);
 var $802=HEAP8[($801)];
 var $803=($802&255);
 var $804=((($796)+($803))|0);
 var $805=(($804)&65535);
 $per=$805;
 var $806=$per;
 var $807=(($806<<16)>>16);
 var $808=($807|0)!=0;
 if($808){label=78;break;}else{label=86;break;}
 case 78: 
 var $810=(($oins+3)|0);
 var $811=HEAP8[($810)];
 var $812=($811&255);
 var $813=((($812)-(1))|0);
 var $814=(($fin+$813)|0);
 var $815=HEAP8[($814)];
 var $816=($815&255);
 var $817=($816|0)!=0;
 if($817){label=79;break;}else{label=86;break;}
 case 79: 
 $l=0;
 label=80;break;
 case 80: 
 var $820=$l;
 var $821=($820|0)<36;
 if($821){label=81;break;}else{label=85;break;}
 case 81: 
 var $823=$l;
 var $824=(($oins+3)|0);
 var $825=HEAP8[($824)];
 var $826=($825&255);
 var $827=((($826)-(1))|0);
 var $828=(($fin+$827)|0);
 var $829=HEAP8[($828)];
 var $830=($829&255);
 var $831=((280+((($830)*(72))&-1))|0);
 var $832=(($831+($823<<1))|0);
 var $833=HEAP16[(($832)>>1)];
 var $834=(($833<<16)>>16);
 var $835=$per;
 var $836=(($835<<16)>>16);
 var $837=($834|0)==($836|0);
 if($837){label=82;break;}else{label=83;break;}
 case 82: 
 var $839=$y;
 var $840=((($839)+(12))|0);
 var $841=$j;
 var $842=(($pat+($841<<10))|0);
 var $843=(($842+$840)|0);
 var $844=HEAP8[($843)];
 var $845=($844&255);
 var $846=$845&240;
 var $847=(($846)&255);
 HEAP8[($843)]=$847;
 var $848=$l;
 var $849=((($848)+(1))|0);
 var $850=((4504+($849<<1))|0);
 var $851=(($850)|0);
 var $852=HEAP8[($851)];
 var $853=($852&255);
 var $854=$y;
 var $855=((($854)+(12))|0);
 var $856=$j;
 var $857=(($pat+($856<<10))|0);
 var $858=(($857+$855)|0);
 var $859=HEAP8[($858)];
 var $860=($859&255);
 var $861=$860|$853;
 var $862=(($861)&255);
 HEAP8[($858)]=$862;
 var $863=$l;
 var $864=((($863)+(1))|0);
 var $865=((4504+($864<<1))|0);
 var $866=(($865+1)|0);
 var $867=HEAP8[($866)];
 var $868=$y;
 var $869=((($868)+(13))|0);
 var $870=$j;
 var $871=(($pat+($870<<10))|0);
 var $872=(($871+$869)|0);
 HEAP8[($872)]=$867;
 label=85;break;
 case 83: 
 label=84;break;
 case 84: 
 var $875=$l;
 var $876=((($875)+(1))|0);
 $l=$876;
 label=80;break;
 case 85: 
 label=86;break;
 case 86: 
 var $879=$y;
 var $880=((($879)+(14))|0);
 var $881=$j;
 var $882=(($pat+($881<<10))|0);
 var $883=(($882+$880)|0);
 var $884=HEAP8[($883)];
 var $885=($884&255);
 var $886=$885&15;
 var $887=($886|0)==13;
 if($887){label=88;break;}else{label=87;break;}
 case 87: 
 var $889=$y;
 var $890=((($889)+(14))|0);
 var $891=$j;
 var $892=(($pat+($891<<10))|0);
 var $893=(($892+$890)|0);
 var $894=HEAP8[($893)];
 var $895=($894&255);
 var $896=$895&15;
 var $897=($896|0)==11;
 if($897){label=88;break;}else{label=89;break;}
 case 88: 
 $FLAG=0;
 label=89;break;
 case 89: 
 var $900=$FLAG;
 var $901=($900&255);
 var $902=($901|0)==0;
 if($902){label=90;break;}else{label=91;break;}
 case 90: 
 $FLAG=1;
 label=93;break;
 case 91: 
 label=92;break;
 case 92: 
 var $906=$i;
 var $907=((($906)+(1))|0);
 $i=$907;
 label=32;break;
 case 93: 
 var $909=$j;
 var $910=(($pat+($909<<10))|0);
 var $911=(($910)|0);
 var $912=$2;
 var $913=_fwrite($911,1024,1,$912);
 label=94;break;
 case 94: 
 var $915=$j;
 var $916=((($915)+(1))|0);
 $j=$916;
 label=30;break;
 case 95: 
 var $918=$reftab;
 _free($918);
 var $919=$1;
 var $920=_fseek($919,4456,0);
 var $921=$1;
 var $922=_read32b($921);
 $SDAV=$922;
 var $923=$1;
 var $924=$SDAV;
 var $925=((($924)+(4460))|0);
 var $926=_fseek($923,$925,0);
 var $927=$2;
 var $928=$1;
 var $929=$ssize;
 var $930=_pw_move_data($927,$928,$929);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _test_pp21($data,$t,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $k;
 var $l;
 var $start;
 var $ssize;
 $2=$data;
 $3=$t;
 $4=$s;
 $start=0;
 $l=0;
 $j=0;
 label=2;break;
 case 2: 
 var $6=$j;
 var $7=($6|0)<31;
 if($7){label=3;break;}else{label=9;break;}
 case 3: 
 var $9=$start;
 var $10=$j;
 var $11=($10<<3);
 var $12=((($9)+($11))|0);
 var $13=$2;
 var $14=(($13+$12)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=$16<<8;
 var $18=$start;
 var $19=((($18)+(1))|0);
 var $20=$j;
 var $21=($20<<3);
 var $22=((($19)+($21))|0);
 var $23=$2;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=((($17)+($26))|0);
 var $28=($27<<1);
 $k=$28;
 var $29=$k;
 var $30=$l;
 var $31=((($30)+($29))|0);
 $l=$31;
 var $32=$start;
 var $33=((($32)+(2))|0);
 var $34=$j;
 var $35=($34<<3);
 var $36=((($33)+($35))|0);
 var $37=$2;
 var $38=(($37+$36)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=($40|0)>15;
 if($41){label=4;break;}else{label=5;break;}
 case 4: 
 $1=-1;
 label=31;break;
 case 5: 
 var $44=$start;
 var $45=((($44)+(4))|0);
 var $46=$j;
 var $47=($46<<3);
 var $48=((($45)+($47))|0);
 var $49=$2;
 var $50=(($49+$48)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=$52<<8;
 var $54=$start;
 var $55=((($54)+(5))|0);
 var $56=$j;
 var $57=($56<<3);
 var $58=((($55)+($57))|0);
 var $59=$2;
 var $60=(($59+$58)|0);
 var $61=HEAP8[($60)];
 var $62=($61&255);
 var $63=((($53)+($62))|0);
 var $64=($63<<1);
 var $65=$k;
 var $66=($64|0)>($65|0);
 if($66){label=6;break;}else{label=7;break;}
 case 6: 
 $1=-1;
 label=31;break;
 case 7: 
 label=8;break;
 case 8: 
 var $70=$j;
 var $71=((($70)+(1))|0);
 $j=$71;
 label=2;break;
 case 9: 
 var $73=$l;
 var $74=($73|0)<=2;
 if($74){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=31;break;
 case 11: 
 var $77=$start;
 var $78=((($77)+(248))|0);
 var $79=$2;
 var $80=(($79+$78)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 $l=$82;
 var $83=$l;
 var $84=($83|0)>127;
 if($84){label=13;break;}else{label=12;break;}
 case 12: 
 var $86=$l;
 var $87=($86|0)==0;
 if($87){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-1;
 label=31;break;
 case 14: 
 $k=0;
 $j=0;
 label=15;break;
 case 15: 
 var $91=$j;
 var $92=($91|0)<512;
 if($92){label=16;break;}else{label=20;break;}
 case 16: 
 var $94=$start;
 var $95=((($94)+(250))|0);
 var $96=$j;
 var $97=((($95)+($96))|0);
 var $98=$2;
 var $99=(($98+$97)|0);
 var $100=HEAP8[($99)];
 var $101=($100&255);
 $l=$101;
 var $102=$l;
 var $103=$k;
 var $104=($102|0)>($103|0);
 if($104){label=17;break;}else{label=18;break;}
 case 17: 
 var $106=$l;
 $k=$106;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $109=$j;
 var $110=((($109)+(1))|0);
 $j=$110;
 label=15;break;
 case 20: 
 var $112=$k;
 var $113=((($112)+(1))|0);
 $k=$113;
 var $114=$k;
 var $115=($114<<6);
 $k=$115;
 $ssize=0;
 $j=0;
 label=21;break;
 case 21: 
 var $117=$j;
 var $118=$k;
 var $119=($117|0)<($118|0);
 if($119){label=22;break;}else{label=28;break;}
 case 22: 
 var $121=$start;
 var $122=((($121)+(762))|0);
 var $123=$j;
 var $124=($123<<1);
 var $125=((($122)+($124))|0);
 var $126=$2;
 var $127=(($126+$125)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=$129<<8;
 var $131=$start;
 var $132=((($131)+(763))|0);
 var $133=$j;
 var $134=($133<<1);
 var $135=((($132)+($134))|0);
 var $136=$2;
 var $137=(($136+$135)|0);
 var $138=HEAP8[($137)];
 var $139=($138&255);
 var $140=((($130)+($139))|0);
 $l=$140;
 var $141=$l;
 var $142=$ssize;
 var $143=($141|0)>($142|0);
 if($143){label=23;break;}else{label=24;break;}
 case 23: 
 var $145=$l;
 $ssize=$145;
 label=24;break;
 case 24: 
 var $147=$l;
 var $148=($147|0)>16384;
 if($148){label=25;break;}else{label=26;break;}
 case 25: 
 $1=-1;
 label=31;break;
 case 26: 
 label=27;break;
 case 27: 
 var $152=$j;
 var $153=((($152)+(1))|0);
 $j=$153;
 label=21;break;
 case 28: 
 var $155=$k;
 var $156=($155<<1);
 $k=$156;
 var $157=$start;
 var $158=$k;
 var $159=((($157)+($158))|0);
 var $160=((($159)+(762))|0);
 var $161=$2;
 var $162=(($161+$160)|0);
 var $163=HEAP8[($162)];
 var $164=($163&255);
 var $165=$164<<24;
 var $166=$start;
 var $167=$k;
 var $168=((($166)+($167))|0);
 var $169=((($168)+(763))|0);
 var $170=$2;
 var $171=(($170+$169)|0);
 var $172=HEAP8[($171)];
 var $173=($172&255);
 var $174=$173<<16;
 var $175=((($165)+($174))|0);
 var $176=$start;
 var $177=$k;
 var $178=((($176)+($177))|0);
 var $179=((($178)+(764))|0);
 var $180=$2;
 var $181=(($180+$179)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=$183<<8;
 var $185=((($175)+($184))|0);
 var $186=$start;
 var $187=$k;
 var $188=((($186)+($187))|0);
 var $189=((($188)+(765))|0);
 var $190=$2;
 var $191=(($190+$189)|0);
 var $192=HEAP8[($191)];
 var $193=($192&255);
 var $194=((($185)+($193))|0);
 $l=$194;
 var $195=$l;
 var $196=$ssize;
 var $197=((($196)+(1))|0);
 var $198=($197<<2);
 var $199=($195|0)!=($198|0);
 if($199){label=29;break;}else{label=30;break;}
 case 29: 
 $1=-1;
 label=31;break;
 case 30: 
 var $202=$3;
 _pw_read_title(0,$202,0);
 $1=0;
 label=31;break;
 case 31: 
 var $204=$1;
 STACKTOP=sp;return $204;
  default: assert(0, "bad label: " + label);
 }
}
function _depack_pp21($in,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+132736)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ptable=sp;
 var $max;
 var $trk=(sp)+(128);
 var $tptr=(sp)+(640);
 var $numpat;
 var $tab;
 var $buf=(sp)+(131712);
 var $i;
 var $j;
 var $size;
 var $ssize;
 var $tabsize;
 var $b;
 $1=$in;
 $2=$out;
 $max=0;
 $ssize=0;
 $tabsize=0;
 var $3=$ptable;
 _memset($3, 0, 128)|0;
 var $4=$trk;
 _memset($4, 0, 512)|0;
 var $5=$tptr;
 _memset($5, 0, 65536)|0;
 var $6=$2;
 var $7=_pw_write_zero($6,20);
 $i=0;
 label=2;break;
 case 2: 
 var $9=$i;
 var $10=($9|0)<31;
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 var $12=$2;
 var $13=_pw_write_zero($12,22);
 var $14=$2;
 var $15=$1;
 var $16=_read16b($15);
 var $17=($16&65535);
 $size=$17;
 var $18=(($17)&65535);
 _write16b($14,$18);
 var $19=$size;
 var $20=($19<<1);
 var $21=$ssize;
 var $22=((($21)+($20))|0);
 $ssize=$22;
 var $23=$2;
 var $24=$1;
 var $25=_read8($24);
 _write8($23,$25);
 var $26=$2;
 var $27=$1;
 var $28=_read8($27);
 _write8($26,$28);
 var $29=$2;
 var $30=$1;
 var $31=_read16b($30);
 _write16b($29,$31);
 var $32=$2;
 var $33=$1;
 var $34=_read16b($33);
 _write16b($32,$34);
 label=4;break;
 case 4: 
 var $36=$i;
 var $37=((($36)+(1))|0);
 $i=$37;
 label=2;break;
 case 5: 
 var $39=$2;
 var $40=$1;
 var $41=_read8($40);
 $numpat=$41;
 _write8($39,$41);
 var $42=$2;
 var $43=$1;
 var $44=_read8($43);
 _write8($42,$44);
 $max=0;
 $j=0;
 label=6;break;
 case 6: 
 var $46=$j;
 var $47=($46|0)<4;
 if($47){label=7;break;}else{label=15;break;}
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $50=$i;
 var $51=($50|0)<128;
 if($51){label=9;break;}else{label=13;break;}
 case 9: 
 var $53=$1;
 var $54=_read8($53);
 var $55=$i;
 var $56=$j;
 var $57=(($trk+($56<<7))|0);
 var $58=(($57+$55)|0);
 HEAP8[($58)]=$54;
 var $59=$i;
 var $60=$j;
 var $61=(($trk+($60<<7))|0);
 var $62=(($61+$59)|0);
 var $63=HEAP8[($62)];
 var $64=($63&255);
 var $65=$max;
 var $66=($64|0)>($65|0);
 if($66){label=10;break;}else{label=11;break;}
 case 10: 
 var $68=$i;
 var $69=$j;
 var $70=(($trk+($69<<7))|0);
 var $71=(($70+$68)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 $max=$73;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $76=$i;
 var $77=((($76)+(1))|0);
 $i=$77;
 label=8;break;
 case 13: 
 label=14;break;
 case 14: 
 var $80=$j;
 var $81=((($80)+(1))|0);
 $j=$81;
 label=6;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $84=$i;
 var $85=$numpat;
 var $86=($85&255);
 var $87=($84|0)<($86|0);
 if($87){label=17;break;}else{label=19;break;}
 case 17: 
 var $89=$2;
 var $90=$i;
 var $91=(($90)&255);
 _write8($89,$91);
 label=18;break;
 case 18: 
 var $93=$i;
 var $94=((($93)+(1))|0);
 $i=$94;
 label=16;break;
 case 19: 
 var $96=$2;
 var $97=$i;
 var $98=(((128)-($97))|0);
 var $99=_pw_write_zero($96,$98);
 var $100=$2;
 _write32b($100,1294879534);
 $j=0;
 label=20;break;
 case 20: 
 var $102=$j;
 var $103=$max;
 var $104=($102|0)<=($103|0);
 if($104){label=21;break;}else{label=27;break;}
 case 21: 
 $i=0;
 label=22;break;
 case 22: 
 var $107=$i;
 var $108=($107|0)<64;
 if($108){label=23;break;}else{label=25;break;}
 case 23: 
 var $110=$1;
 var $111=_read16b($110);
 var $112=($111&65535);
 var $113=$i;
 var $114=$j;
 var $115=(($tptr+($114<<8))|0);
 var $116=(($115+($113<<2))|0);
 HEAP32[(($116)>>2)]=$112;
 label=24;break;
 case 24: 
 var $118=$i;
 var $119=((($118)+(1))|0);
 $i=$119;
 label=22;break;
 case 25: 
 label=26;break;
 case 26: 
 var $122=$j;
 var $123=((($122)+(1))|0);
 $j=$123;
 label=20;break;
 case 27: 
 var $125=$1;
 var $126=_read32b($125);
 $tabsize=$126;
 var $127=$tabsize;
 var $128=_malloc($127);
 $tab=$128;
 var $129=$tab;
 var $130=$tabsize;
 var $131=$1;
 var $132=_fread($129,$130,1,$131);
 $i=0;
 label=28;break;
 case 28: 
 var $134=$i;
 var $135=$numpat;
 var $136=($135&255);
 var $137=($134|0)<($136|0);
 if($137){label=29;break;}else{label=35;break;}
 case 29: 
 var $139=$buf;
 _memset($139, 0, 1024)|0;
 $j=0;
 label=30;break;
 case 30: 
 var $141=$j;
 var $142=($141|0)<64;
 if($142){label=31;break;}else{label=33;break;}
 case 31: 
 var $144=(($buf)|0);
 var $145=$j;
 var $146=($145<<4);
 var $147=(($144+$146)|0);
 $b=$147;
 var $148=$b;
 var $149=$tab;
 var $150=$j;
 var $151=$i;
 var $152=(($trk)|0);
 var $153=(($152+$151)|0);
 var $154=HEAP8[($153)];
 var $155=($154&255);
 var $156=(($tptr+($155<<8))|0);
 var $157=(($156+($150<<2))|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($158<<2);
 var $160=(($149+$159)|0);
 assert(4 % 1 === 0);HEAP8[($148)]=HEAP8[($160)];HEAP8[((($148)+(1))|0)]=HEAP8[((($160)+(1))|0)];HEAP8[((($148)+(2))|0)]=HEAP8[((($160)+(2))|0)];HEAP8[((($148)+(3))|0)]=HEAP8[((($160)+(3))|0)];
 var $161=$b;
 var $162=(($161+4)|0);
 var $163=$tab;
 var $164=$j;
 var $165=$i;
 var $166=(($trk+128)|0);
 var $167=(($166+$165)|0);
 var $168=HEAP8[($167)];
 var $169=($168&255);
 var $170=(($tptr+($169<<8))|0);
 var $171=(($170+($164<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=($172<<2);
 var $174=(($163+$173)|0);
 assert(4 % 1 === 0);HEAP8[($162)]=HEAP8[($174)];HEAP8[((($162)+(1))|0)]=HEAP8[((($174)+(1))|0)];HEAP8[((($162)+(2))|0)]=HEAP8[((($174)+(2))|0)];HEAP8[((($162)+(3))|0)]=HEAP8[((($174)+(3))|0)];
 var $175=$b;
 var $176=(($175+8)|0);
 var $177=$tab;
 var $178=$j;
 var $179=$i;
 var $180=(($trk+256)|0);
 var $181=(($180+$179)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=(($tptr+($183<<8))|0);
 var $185=(($184+($178<<2))|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($186<<2);
 var $188=(($177+$187)|0);
 assert(4 % 1 === 0);HEAP8[($176)]=HEAP8[($188)];HEAP8[((($176)+(1))|0)]=HEAP8[((($188)+(1))|0)];HEAP8[((($176)+(2))|0)]=HEAP8[((($188)+(2))|0)];HEAP8[((($176)+(3))|0)]=HEAP8[((($188)+(3))|0)];
 var $189=$b;
 var $190=(($189+12)|0);
 var $191=$tab;
 var $192=$j;
 var $193=$i;
 var $194=(($trk+384)|0);
 var $195=(($194+$193)|0);
 var $196=HEAP8[($195)];
 var $197=($196&255);
 var $198=(($tptr+($197<<8))|0);
 var $199=(($198+($192<<2))|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($200<<2);
 var $202=(($191+$201)|0);
 assert(4 % 1 === 0);HEAP8[($190)]=HEAP8[($202)];HEAP8[((($190)+(1))|0)]=HEAP8[((($202)+(1))|0)];HEAP8[((($190)+(2))|0)]=HEAP8[((($202)+(2))|0)];HEAP8[((($190)+(3))|0)]=HEAP8[((($202)+(3))|0)];
 label=32;break;
 case 32: 
 var $204=$j;
 var $205=((($204)+(1))|0);
 $j=$205;
 label=30;break;
 case 33: 
 var $207=(($buf)|0);
 var $208=$2;
 var $209=_fwrite($207,1024,1,$208);
 label=34;break;
 case 34: 
 var $211=$i;
 var $212=((($211)+(1))|0);
 $i=$212;
 label=28;break;
 case 35: 
 var $214=$tab;
 _free($214);
 var $215=$2;
 var $216=$1;
 var $217=$ssize;
 var $218=_pw_move_data($215,$216,$217);
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_prepare($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $m;
 var $s;
 var $bytelen;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$1;
 var $5=(($4+1552)|0);
 $m=$5;
 var $6=$1;
 var $7=(($6+1496)|0);
 $s=$7;
 var $8=$s;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0);
 var $12=$m;
 var $13=(($12+1256)|0);
 var $14=HEAPF64[(($13)>>3)];
 var $15=($11)*($14);
 var $16=$m;
 var $17=(($16+1248)|0);
 var $18=HEAPF64[(($17)>>3)];
 var $19=($15)*($18);
 var $20=$p;
 var $21=(($20+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0);
 var $24=($19)/($23);
 var $25=($24)/(1000);
 var $26=(($25)&-1);
 var $27=$s;
 var $28=(($27+36)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$s;
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31<<2);
 $bytelen=$32;
 var $33=$s;
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$35^-1;
 var $37=$36&4;
 var $38=($37|0)!=0;
 if($38){label=2;break;}else{label=3;break;}
 case 2: 
 var $40=$bytelen;
 var $41=($40<<1);
 $bytelen=$41;
 label=3;break;
 case 3: 
 var $43=$s;
 var $44=(($43+28)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$45;
 var $47=$bytelen;
 _memset($46, 0, $47)|0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_softmixer($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $s;
 var $m;
 var $mod;
 var $xxs;
 var $vi;
 var $samples;
 var $size;
 var $vol_l;
 var $vol_r;
 var $step;
 var $voc;
 var $prev_l;
 var $prev_r;
 var $lps;
 var $lpe;
 var $synth;
 var $buf_pos;
 var $mix_fn;
 var $mixers;
 var $idx;
 var $mix_size;
 var $mixer;
 $1=$ctx;
 var $2=$1;
 var $3=(($2)|0);
 $p=$3;
 var $4=$1;
 var $5=(($4+1496)|0);
 $s=$5;
 var $6=$1;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$m;
 var $9=(($8)|0);
 $mod=$9;
 $synth=1;
 var $10=$s;
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 if(($12|0)==0){ label=2;break;}else if(($12|0)==1){ label=3;break;}else if(($12|0)==2){ label=4;break;}else{label=5;break;}
 case 2: 
 $mixers=5216;
 label=6;break;
 case 3: 
 $mixers=5768;
 label=6;break;
 case 4: 
 $mixers=1888;
 label=6;break;
 case 5: 
 $mixers=5768;
 label=6;break;
 case 6: 
 var $18=$1;
 _mixer_prepare($18);
 var $19=$1;
 _rampdown($19,-1,0,0);
 $voc=0;
 label=7;break;
 case 7: 
 var $21=$voc;
 var $22=$p;
 var $23=(($22+948)|0);
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($21|0)<($25|0);
 if($26){label=8;break;}else{label=52;break;}
 case 8: 
 var $28=$voc;
 var $29=$p;
 var $30=(($29+948)|0);
 var $31=(($30+20)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+((($28)*(116))&-1))|0);
 $vi=$33;
 var $34=$vi;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)<0;
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 label=51;break;
 case 10: 
 var $40=$vi;
 var $41=(($40+24)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)<1;
 if($43){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=$1;
 var $46=$voc;
 _virt_resetvoice($45,$46,1);
 label=51;break;
 case 12: 
 var $48=$vi;
 var $49=(($48+28)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$vi;
 var $52=(($51+32)|0);
 HEAP32[(($52)>>2)]=$50;
 var $53=$s;
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 $buf_pos=$55;
 var $56=$vi;
 var $57=(($56+20)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$vi;
 var $60=(($59+16)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(((128)-($61))|0);
 var $63=(Math_imul($58,$62)|0);
 $vol_r=$63;
 var $64=$vi;
 var $65=(($64+20)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$vi;
 var $68=(($67+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=((($69)+(128))|0);
 var $71=(Math_imul($66,$70)|0);
 $vol_l=$71;
 var $72=$vi;
 var $73=(($72+40)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$74&32;
 var $76=($75|0)!=0;
 if($76){label=13;break;}else{label=16;break;}
 case 13: 
 var $78=$synth;
 var $79=($78|0)!=0;
 if($79){label=14;break;}else{label=15;break;}
 case 14: 
 var $81=$m;
 var $82=(($81+6552)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+24)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$1;
 var $87=$buf_pos;
 var $88=$s;
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$vol_l;
 var $92=$91>>7;
 var $93=$vol_r;
 var $94=$93>>7;
 var $95=$vi;
 var $96=(($95+40)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=$97&2;
 FUNCTION_TABLE[$85]($86,$87,$90,$92,$94,$98);
 $synth=0;
 label=15;break;
 case 15: 
 label=51;break;
 case 16: 
 var $101=$s;
 var $102=(($101+48)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104$0=$103;
 var $104$1=((((($103|0)<0))|0)?-1:0);
 var $105$0=($104$0<<24)|(0>>>8);
 var $105$1=($104$1<<24)|($104$0>>>8);
 var $106=$vi;
 var $107=(($106+24)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109$0=$108;
 var $109$1=((((($108|0)<0))|0)?-1:0);
 var $110$0=___divdi3($105$0,$105$1,$109$0,$109$1);var $110$1=tempRet0;
 var $111$0=$110$0;
 var $111=$111$0;
 $step=$111;
 var $112=$step;
 var $113=($112|0)==0;
 if($113){label=17;break;}else{label=18;break;}
 case 17: 
 label=51;break;
 case 18: 
 var $116=$vi;
 var $117=(($116+48)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$mod;
 var $120=(($119+144)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($118|0)<($121|0);
 if($122){label=19;break;}else{label=20;break;}
 case 19: 
 var $124=$vi;
 var $125=(($124+48)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=$mod;
 var $128=(($127+180)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+((($126)*(52))&-1))|0);
 $xxs=$130;
 label=21;break;
 case 20: 
 var $132=$vi;
 var $133=(($132+48)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=$mod;
 var $136=(($135+144)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=((($134)-($137))|0);
 var $139=$1;
 var $140=(($139+8120)|0);
 var $141=(($140+16)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+((($138)*(52))&-1))|0);
 $xxs=$143;
 label=21;break;
 case 21: 
 var $145=$xxs;
 var $146=(($145+36)|0);
 var $147=HEAP32[(($146)>>2)];
 $lps=$147;
 var $148=$xxs;
 var $149=(($148+40)|0);
 var $150=HEAP32[(($149)>>2)];
 $lpe=$150;
 var $151=$p;
 var $152=(($151+28)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153&4;
 var $155=($154|0)!=0;
 if($155){label=22;break;}else{label=23;break;}
 case 22: 
 var $157=$lps;
 var $158=$157>>1;
 $lps=$158;
 label=23;break;
 case 23: 
 var $160=$s;
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 $size=$162;
 label=24;break;
 case 24: 
 var $164=$size;
 var $165=($164|0)>0;
 if($165){label=25;break;}else{label=50;break;}
 case 25: 
 var $167=$vi;
 var $168=(($167+28)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=$vi;
 var $171=(($170+52)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=($169|0)>=($172|0);
 if($173){label=26;break;}else{label=27;break;}
 case 26: 
 $samples=0;
 label=28;break;
 case 27: 
 var $176=$vi;
 var $177=(($176+52)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$vi;
 var $180=(($179+28)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=((($178)-($181))|0);
 var $183$0=$182;
 var $183$1=((((($182|0)<0))|0)?-1:0);
 var $184$0=($183$0<<16)|(0>>>16);
 var $184$1=($183$1<<16)|($183$0>>>16);
 var $185=$vi;
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188$0=$187;
 var $188$1=((((($187|0)<0))|0)?-1:0);
 var $189$0=_i64Subtract($184$0,$184$1,$188$0,$188$1);var $189$1=tempRet0;
 var $190=$step;
 var $191$0=$190;
 var $191$1=((((($190|0)<0))|0)?-1:0);
 var $192$0=___divdi3($189$0,$189$1,$191$0,$191$1);var $192$1=tempRet0;
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;
 var $193$0=_i64Add($$etemp$0$0,$$etemp$0$1,$192$0,$192$1);var $193$1=tempRet0;
 var $194$0=$193$0;
 var $194=$194$0;
 $samples=$194;
 label=28;break;
 case 28: 
 var $196=$samples;
 var $197=$size;
 var $198=($196|0)>($197|0);
 if($198){label=29;break;}else{label=30;break;}
 case 29: 
 var $200=$size;
 $samples=$200;
 label=30;break;
 case 30: 
 var $202=$vi;
 var $203=(($202+20)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($204|0)!=0;
 if($205){label=31;break;}else{label=43;break;}
 case 31: 
 var $207=$samples;
 $mix_size=$207;
 var $208=$vi;
 var $209=(($208+40)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=$210&7;
 $mixer=$211;
 var $212=$s;
 var $213=(($212+4)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=$214^-1;
 var $216=$215&4;
 var $217=($216|0)!=0;
 if($217){label=32;break;}else{label=33;break;}
 case 32: 
 var $219=$mix_size;
 var $220=($219<<1);
 $mix_size=$220;
 label=33;break;
 case 33: 
 var $222=$mix_size;
 $idx=$222;
 var $223=$mix_size;
 var $224=($223|0)>=2;
 if($224){label=34;break;}else{label=35;break;}
 case 34: 
 var $226=$idx;
 var $227=((($226)-(2))|0);
 var $228=$buf_pos;
 var $229=(($228+($227<<2))|0);
 var $230=HEAP32[(($229)>>2)];
 $prev_r=$230;
 var $231=$idx;
 var $232=((($231)-(1))|0);
 var $233=$buf_pos;
 var $234=(($233+($232<<2))|0);
 var $235=HEAP32[(($234)>>2)];
 $prev_l=$235;
 label=36;break;
 case 35: 
 $prev_l=0;
 $prev_r=0;
 label=36;break;
 case 36: 
 var $238=$vi;
 var $239=(($238+72)|0);
 var $240=(($239+28)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=($241|0)>=254;
 if($242){label=37;break;}else{label=38;break;}
 case 37: 
 var $244=$mixer;
 var $245=$244&-5;
 $mixer=$245;
 label=38;break;
 case 38: 
 var $247=$mixer;
 var $248=$mixers;
 var $249=(($248+($247<<2))|0);
 var $250=HEAP32[(($249)>>2)];
 $mix_fn=$250;
 var $251=$samples;
 var $252=($251|0)>=0;
 if($252){label=39;break;}else{label=40;break;}
 case 39: 
 var $254=$mix_fn;
 var $255=$vi;
 var $256=$buf_pos;
 var $257=$samples;
 var $258=$vol_l;
 var $259=$vol_r;
 var $260=$step;
 var $261=$254;
 FUNCTION_TABLE[$261]($255,$256,$257,$258,$259,$260);
 var $262=$mix_size;
 var $263=$buf_pos;
 var $264=(($263+($262<<2))|0);
 $buf_pos=$264;
 label=40;break;
 case 40: 
 $idx=0;
 var $266=$mix_size;
 var $267=($266|0)>=2;
 if($267){label=41;break;}else{label=42;break;}
 case 41: 
 var $269=$idx;
 var $270=((($269)-(2))|0);
 var $271=$buf_pos;
 var $272=(($271+($270<<2))|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=$prev_r;
 var $275=((($273)-($274))|0);
 var $276=$vi;
 var $277=(($276+64)|0);
 HEAP32[(($277)>>2)]=$275;
 var $278=$idx;
 var $279=((($278)-(1))|0);
 var $280=$buf_pos;
 var $281=(($280+($279<<2))|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=$prev_l;
 var $284=((($282)-($283))|0);
 var $285=$vi;
 var $286=(($285+60)|0);
 HEAP32[(($286)>>2)]=$284;
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $289=$step;
 var $290=$samples;
 var $291=(Math_imul($289,$290)|0);
 var $292=$vi;
 var $293=(($292+36)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=((($294)+($291))|0);
 HEAP32[(($293)>>2)]=$295;
 var $296=$vi;
 var $297=(($296+36)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=$298>>16;
 var $300=$vi;
 var $301=(($300+28)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=((($302)+($299))|0);
 HEAP32[(($301)>>2)]=$303;
 var $304=$vi;
 var $305=(($304+36)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=$306&65535;
 HEAP32[(($305)>>2)]=$307;
 var $308=$samples;
 var $309=$size;
 var $310=((($309)-($308))|0);
 $size=$310;
 var $311=$size;
 var $312=($311|0)<=0;
 if($312){label=44;break;}else{label=45;break;}
 case 44: 
 label=24;break;
 case 45: 
 var $315=$xxs;
 var $316=(($315+44)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=$317^-1;
 var $319=$318&2;
 var $320=($319|0)!=0;
 if($320){label=46;break;}else{label=47;break;}
 case 46: 
 var $322=$1;
 var $323=$voc;
 var $324=$buf_pos;
 var $325=$size;
 _anticlick($322,$323,0,0,$324,$325);
 var $326=$1;
 var $327=$voc;
 _virt_resetvoice($326,$327,0);
 $size=0;
 label=24;break;
 case 47: 
 var $329=$lpe;
 var $330=$lps;
 var $331=((($329)-($330))|0);
 var $332=$vi;
 var $333=(($332+28)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=((($334)-($331))|0);
 HEAP32[(($333)>>2)]=$335;
 var $336=$lpe;
 var $337=$vi;
 var $338=(($337+52)|0);
 HEAP32[(($338)>>2)]=$336;
 var $339=$vi;
 var $340=(($339+112)|0);
 HEAP32[(($340)>>2)]=1;
 var $341=$xxs;
 var $342=(($341+44)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=$343&4;
 var $345=($344|0)!=0;
 if($345){label=48;break;}else{label=49;break;}
 case 48: 
 var $347=$lpe;
 var $348=$lps;
 var $349=((($347)-($348))|0);
 var $350=$vi;
 var $351=(($350+52)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=((($352)+($349))|0);
 HEAP32[(($351)>>2)]=$353;
 var $354=$lpe;
 var $355=$lps;
 var $356=((($354)-($355))|0);
 var $357=$vi;
 var $358=(($357+28)|0);
 var $359=HEAP32[(($358)>>2)];
 var $360=((($359)-($356))|0);
 HEAP32[(($358)>>2)]=$360;
 label=49;break;
 case 49: 
 label=24;break;
 case 50: 
 label=51;break;
 case 51: 
 var $364=$voc;
 var $365=((($364)+(1))|0);
 $voc=$365;
 label=7;break;
 case 52: 
 var $367=$s;
 var $368=(($367+36)|0);
 var $369=HEAP32[(($368)>>2)];
 $size=$369;
 var $370=$s;
 var $371=(($370+4)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=$372^-1;
 var $374=$373&4;
 var $375=($374|0)!=0;
 if($375){label=53;break;}else{label=54;break;}
 case 53: 
 var $377=$size;
 var $378=($377<<1);
 $size=$378;
 label=54;break;
 case 54: 
 var $380=$size;
 var $381=($380|0)>24585;
 if($381){label=55;break;}else{label=56;break;}
 case 55: 
 $size=24585;
 label=56;break;
 case 56: 
 var $384=$s;
 var $385=(($384+4)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=$386&1;
 var $388=($387|0)!=0;
 if($388){label=57;break;}else{label=58;break;}
 case 57: 
 var $390=$s;
 var $391=(($390+24)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$s;
 var $394=(($393+28)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=$size;
 var $397=$s;
 var $398=(($397+8)|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$s;
 var $401=(($400+4)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=$402&2;
 var $404=($403|0)!=0;
 var $405=($404?128:0);
 _downmix_int_8bit($392,$395,$396,$399,$405);
 label=59;break;
 case 58: 
 var $407=$s;
 var $408=(($407+24)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=$409;
 var $411=$s;
 var $412=(($411+28)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=$size;
 var $415=$s;
 var $416=(($415+8)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=$s;
 var $419=(($418+4)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=$420&2;
 var $422=($421|0)!=0;
 var $423=($422?32768:0);
 _downmix_int_16bit($410,$413,$414,$417,$423);
 label=59;break;
 case 59: 
 var $425=$s;
 var $426=(($425+44)|0);
 HEAP32[(($426)>>2)]=0;
 var $427=$s;
 var $428=(($427+40)|0);
 HEAP32[(($428)>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _rampdown($ctx,$voc,$buf,$count){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $s;
 var $smp_l;
 var $smp_r;
 var $dec_l;
 var $dec_r;
 var $vi;
 $1=$ctx;
 $2=$voc;
 $3=$buf;
 $4=$count;
 var $5=$1;
 var $6=(($5)|0);
 $p=$6;
 var $7=$1;
 var $8=(($7+1496)|0);
 $s=$8;
 var $9=$2;
 var $10=($9|0)<0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$s;
 var $13=(($12+40)|0);
 var $14=HEAP32[(($13)>>2)];
 $smp_r=$14;
 var $15=$s;
 var $16=(($15+44)|0);
 var $17=HEAP32[(($16)>>2)];
 $smp_l=$17;
 label=4;break;
 case 3: 
 var $19=$2;
 var $20=$p;
 var $21=(($20+948)|0);
 var $22=(($21+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+((($19)*(116))&-1))|0);
 $vi=$24;
 var $25=$vi;
 var $26=(($25+64)|0);
 var $27=HEAP32[(($26)>>2)];
 $smp_r=$27;
 var $28=$vi;
 var $29=(($28+60)|0);
 var $30=HEAP32[(($29)>>2)];
 $smp_l=$30;
 var $31=$vi;
 var $32=(($31+60)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=$vi;
 var $34=(($33+64)|0);
 HEAP32[(($34)>>2)]=0;
 label=4;break;
 case 4: 
 var $36=$smp_l;
 var $37=($36|0)==0;
 if($37){label=5;break;}else{label=7;break;}
 case 5: 
 var $39=$smp_r;
 var $40=($39|0)==0;
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 label=37;break;
 case 7: 
 var $43=$3;
 var $44=($43|0)==0;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=$s;
 var $47=(($46+28)|0);
 var $48=HEAP32[(($47)>>2)];
 $3=$48;
 $4=16;
 label=9;break;
 case 9: 
 var $50=$4;
 var $51=($50|0)<=0;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 label=37;break;
 case 11: 
 var $54=$smp_r;
 var $55=$4;
 var $56=(((($54|0))/(($55|0)))&-1);
 $dec_r=$56;
 var $57=$smp_l;
 var $58=$4;
 var $59=(((($57|0))/(($58|0)))&-1);
 $dec_l=$59;
 label=12;break;
 case 12: 
 var $61=$smp_r;
 var $62=($61|0)!=0;
 if($62){label=14;break;}else{label=13;break;}
 case 13: 
 var $64=$smp_l;
 var $65=($64|0)!=0;
 if($65){label=14;break;}else{var $71=0;label=15;break;}
 case 14: 
 var $67=$4;
 var $68=((($67)-(1))|0);
 $4=$68;
 var $69=($67|0)!=0;
 var $71=$69;label=15;break;
 case 15: 
 var $71;
 if($71){label=16;break;}else{label=37;break;}
 case 16: 
 var $73=$s;
 var $74=(($73+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$75^-1;
 var $77=$76&4;
 var $78=($77|0)!=0;
 if($78){label=17;break;}else{label=27;break;}
 case 17: 
 var $80=$dec_r;
 var $81=($80|0)>0;
 if($81){label=18;break;}else{label=22;break;}
 case 18: 
 var $83=$smp_r;
 var $84=$dec_r;
 var $85=($83|0)>($84|0);
 if($85){label=19;break;}else{label=20;break;}
 case 19: 
 var $87=$dec_r;
 var $88=$smp_r;
 var $89=((($88)-($87))|0);
 $smp_r=$89;
 var $90=$smp_r;
 var $91=$3;
 var $92=HEAP32[(($91)>>2)];
 var $93=((($92)+($90))|0);
 HEAP32[(($91)>>2)]=$93;
 label=21;break;
 case 20: 
 $smp_r=0;
 label=21;break;
 case 21: 
 label=26;break;
 case 22: 
 var $97=$smp_r;
 var $98=$dec_r;
 var $99=($97|0)<($98|0);
 if($99){label=23;break;}else{label=24;break;}
 case 23: 
 var $101=$dec_r;
 var $102=$smp_r;
 var $103=((($102)-($101))|0);
 $smp_r=$103;
 var $104=$smp_r;
 var $105=$3;
 var $106=HEAP32[(($105)>>2)];
 var $107=((($106)+($104))|0);
 HEAP32[(($105)>>2)]=$107;
 label=25;break;
 case 24: 
 $smp_r=0;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $111=$3;
 var $112=(($111+4)|0);
 $3=$112;
 label=27;break;
 case 27: 
 var $114=$dec_l;
 var $115=($114|0)>0;
 if($115){label=28;break;}else{label=32;break;}
 case 28: 
 var $117=$smp_l;
 var $118=$dec_l;
 var $119=($117|0)>($118|0);
 if($119){label=29;break;}else{label=30;break;}
 case 29: 
 var $121=$dec_l;
 var $122=$smp_l;
 var $123=((($122)-($121))|0);
 $smp_l=$123;
 var $124=$smp_l;
 var $125=$3;
 var $126=HEAP32[(($125)>>2)];
 var $127=((($126)+($124))|0);
 HEAP32[(($125)>>2)]=$127;
 label=31;break;
 case 30: 
 $smp_l=0;
 label=31;break;
 case 31: 
 label=36;break;
 case 32: 
 var $131=$smp_l;
 var $132=$dec_l;
 var $133=($131|0)<($132|0);
 if($133){label=33;break;}else{label=34;break;}
 case 33: 
 var $135=$dec_l;
 var $136=$smp_l;
 var $137=((($136)-($135))|0);
 $smp_l=$137;
 var $138=$smp_l;
 var $139=$3;
 var $140=HEAP32[(($139)>>2)];
 var $141=((($140)+($138))|0);
 HEAP32[(($139)>>2)]=$141;
 label=35;break;
 case 34: 
 $smp_l=0;
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $145=$3;
 var $146=(($145+4)|0);
 $3=$146;
 label=12;break;
 case 37: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _anticlick($ctx,$voc,$vol,$pan,$buf,$count){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $oldvol;
 var $newvol;
 var $pan0;
 var $p;
 var $s;
 var $vi;
 $1=$ctx;
 $2=$voc;
 $3=$vol;
 $4=$pan;
 $5=$buf;
 $6=$count;
 var $7=$1;
 var $8=(($7)|0);
 $p=$8;
 var $9=$1;
 var $10=(($9+1496)|0);
 $s=$10;
 var $11=$2;
 var $12=$p;
 var $13=(($12+948)|0);
 var $14=(($13+20)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+((($11)*(116))&-1))|0);
 $vi=$16;
 var $17=$vi;
 var $18=(($17+16)|0);
 var $19=HEAP32[(($18)>>2)];
 $pan0=$19;
 var $20=$pan0;
 var $21=($20|0)<-127;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $pan0=-127;
 label=3;break;
 case 3: 
 var $24=$vi;
 var $25=(($24+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $29=$vi;
 var $30=(($29+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$pan0;
 var $33=(((128)-($32))|0);
 var $34=(Math_imul($31,$33)|0);
 $oldvol=$34;
 var $35=$3;
 var $36=$4;
 var $37=(((128)-($36))|0);
 var $38=(Math_imul($35,$37)|0);
 $newvol=$38;
 var $39=$vi;
 var $40=(($39+64)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42$0=$41;
 var $42$1=((((($41|0)<0))|0)?-1:0);
 var $43=$newvol;
 var $44$0=$43;
 var $44$1=((((($43|0)<0))|0)?-1:0);
 var $45$0=___muldi3($42$0,$42$1,$44$0,$44$1);var $45$1=tempRet0;
 var $46=$oldvol;
 var $47$0=$46;
 var $47$1=((((($46|0)<0))|0)?-1:0);
 var $48$0=___divdi3($45$0,$45$1,$47$0,$47$1);var $48$1=tempRet0;
 var $49=$vi;
 var $50=(($49+64)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52$0=$51;
 var $52$1=((((($51|0)<0))|0)?-1:0);
 var $53$0=_i64Subtract($52$0,$52$1,$48$0,$48$1);var $53$1=tempRet0;
 var $54$0=$53$0;
 var $54=$54$0;
 HEAP32[(($50)>>2)]=$54;
 var $55=$vi;
 var $56=(($55+20)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$pan0;
 var $59=((($58)+(128))|0);
 var $60=(Math_imul($57,$59)|0);
 $oldvol=$60;
 var $61=$3;
 var $62=$4;
 var $63=((($62)+(128))|0);
 var $64=(Math_imul($61,$63)|0);
 $newvol=$64;
 var $65=$vi;
 var $66=(($65+60)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68$0=$67;
 var $68$1=((((($67|0)<0))|0)?-1:0);
 var $69=$newvol;
 var $70$0=$69;
 var $70$1=((((($69|0)<0))|0)?-1:0);
 var $71$0=___muldi3($68$0,$68$1,$70$0,$70$1);var $71$1=tempRet0;
 var $72=$oldvol;
 var $73$0=$72;
 var $73$1=((((($72|0)<0))|0)?-1:0);
 var $74$0=___divdi3($71$0,$71$1,$73$0,$73$1);var $74$1=tempRet0;
 var $75=$vi;
 var $76=(($75+60)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78$0=$77;
 var $78$1=((((($77|0)<0))|0)?-1:0);
 var $79$0=_i64Subtract($78$0,$78$1,$74$0,$74$1);var $79$1=tempRet0;
 var $80$0=$79$0;
 var $80=$80$0;
 HEAP32[(($76)>>2)]=$80;
 label=5;break;
 case 5: 
 var $82=$5;
 var $83=($82|0)!=0;
 if($83){label=7;break;}else{label=6;break;}
 case 6: 
 var $85=$vi;
 var $86=(($85+64)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$s;
 var $89=(($88+40)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=((($90)+($87))|0);
 HEAP32[(($89)>>2)]=$91;
 var $92=$vi;
 var $93=(($92+60)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$s;
 var $96=(($95+44)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=((($97)+($94))|0);
 HEAP32[(($96)>>2)]=$98;
 var $99=$vi;
 var $100=(($99+60)|0);
 HEAP32[(($100)>>2)]=0;
 var $101=$vi;
 var $102=(($101+64)|0);
 HEAP32[(($102)>>2)]=0;
 label=8;break;
 case 7: 
 var $104=$1;
 var $105=$2;
 var $106=$5;
 var $107=$6;
 _rampdown($104,$105,$106,$107);
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _downmix_int_8bit($dest,$src,$num,$amp,$offs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $smp;
 var $shift;
 $1=$dest;
 $2=$src;
 $3=$num;
 $4=$amp;
 $5=$offs;
 var $6=$4;
 var $7=(((20)-($6))|0);
 $shift=$7;
 label=2;break;
 case 2: 
 var $9=$3;
 var $10=((($9)-(1))|0);
 $3=$10;
 var $11=($9|0)!=0;
 if($11){label=3;break;}else{label=13;break;}
 case 3: 
 var $13=$2;
 var $14=HEAP32[(($13)>>2)];
 var $15=$shift;
 var $16=$14>>($15|0);
 $smp=$16;
 var $17=$smp;
 var $18=($17|0)>127;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$1;
 HEAP8[($20)]=127;
 label=9;break;
 case 5: 
 var $22=$smp;
 var $23=($22|0)<-128;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$1;
 HEAP8[($25)]=-128;
 label=8;break;
 case 7: 
 var $27=$smp;
 var $28=(($27)&255);
 var $29=$1;
 HEAP8[($29)]=$28;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $32=$5;
 var $33=($32|0)!=0;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 var $35=$5;
 var $36=$1;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=((($38)+($35))|0);
 var $40=(($39)&255);
 HEAP8[($36)]=$40;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $43=$2;
 var $44=(($43+4)|0);
 $2=$44;
 var $45=$1;
 var $46=(($45+1)|0);
 $1=$46;
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _downmix_int_16bit($dest,$src,$num,$amp,$offs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $smp;
 var $shift;
 $1=$dest;
 $2=$src;
 $3=$num;
 $4=$amp;
 $5=$offs;
 var $6=$4;
 var $7=(((12)-($6))|0);
 $shift=$7;
 label=2;break;
 case 2: 
 var $9=$3;
 var $10=((($9)-(1))|0);
 $3=$10;
 var $11=($9|0)!=0;
 if($11){label=3;break;}else{label=13;break;}
 case 3: 
 var $13=$2;
 var $14=HEAP32[(($13)>>2)];
 var $15=$shift;
 var $16=$14>>($15|0);
 $smp=$16;
 var $17=$smp;
 var $18=($17|0)>32767;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$1;
 HEAP16[(($20)>>1)]=32767;
 label=9;break;
 case 5: 
 var $22=$smp;
 var $23=($22|0)<-32768;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$1;
 HEAP16[(($25)>>1)]=-32768;
 label=8;break;
 case 7: 
 var $27=$smp;
 var $28=(($27)&65535);
 var $29=$1;
 HEAP16[(($29)>>1)]=$28;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $32=$5;
 var $33=($32|0)!=0;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 var $35=$5;
 var $36=$1;
 var $37=HEAP16[(($36)>>1)];
 var $38=(($37<<16)>>16);
 var $39=((($38)+($35))|0);
 var $40=(($39)&65535);
 HEAP16[(($36)>>1)]=$40;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $43=$2;
 var $44=(($43+4)|0);
 $2=$44;
 var $45=$1;
 var $46=(($45+2)|0);
 $1=$46;
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_voicepos($ctx,$voc,$pos,$frac){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $m;
 var $vi;
 var $xxs;
 var $lps;
 $1=$ctx;
 $2=$voc;
 $3=$pos;
 $4=$frac;
 var $5=$1;
 var $6=(($5)|0);
 $p=$6;
 var $7=$1;
 var $8=(($7+1552)|0);
 $m=$8;
 var $9=$2;
 var $10=$p;
 var $11=(($10+948)|0);
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+((($9)*(116))&-1))|0);
 $vi=$14;
 var $15=$vi;
 var $16=(($15+48)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$m;
 var $19=(($18)|0);
 var $20=(($19+144)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($17|0)<($21|0);
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=$vi;
 var $25=(($24+48)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$m;
 var $28=(($27)|0);
 var $29=(($28+180)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+((($26)*(52))&-1))|0);
 $xxs=$31;
 label=4;break;
 case 3: 
 var $33=$vi;
 var $34=(($33+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$m;
 var $37=(($36)|0);
 var $38=(($37+144)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=((($35)-($39))|0);
 var $41=$1;
 var $42=(($41+8120)|0);
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+((($40)*(52))&-1))|0);
 $xxs=$45;
 label=4;break;
 case 4: 
 var $47=$xxs;
 var $48=(($47+44)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$49&32768;
 var $51=($50|0)!=0;
 if($51){label=5;break;}else{label=6;break;}
 case 5: 
 label=20;break;
 case 6: 
 var $54=$xxs;
 var $55=(($54+44)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56&2;
 var $58=($57|0)!=0;
 if($58){label=7;break;}else{label=12;break;}
 case 7: 
 var $60=$xxs;
 var $61=(($60+44)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$62&16;
 var $64=($63|0)!=0;
 if($64){label=8;break;}else{label=10;break;}
 case 8: 
 var $66=$vi;
 var $67=(($66+112)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){label=9;break;}else{label=10;break;}
 case 9: 
 var $71=$xxs;
 var $72=(($71+32)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$vi;
 var $75=(($74+52)|0);
 HEAP32[(($75)>>2)]=$73;
 label=11;break;
 case 10: 
 var $77=$xxs;
 var $78=(($77+40)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$vi;
 var $81=(($80+52)|0);
 HEAP32[(($81)>>2)]=$79;
 label=11;break;
 case 11: 
 label=13;break;
 case 12: 
 var $84=$xxs;
 var $85=(($84+32)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=$vi;
 var $88=(($87+52)|0);
 HEAP32[(($88)>>2)]=$86;
 label=13;break;
 case 13: 
 var $90=$3;
 var $91=$vi;
 var $92=(($91+52)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=($90|0)>=($93|0);
 if($94){label=14;break;}else{label=15;break;}
 case 14: 
 $3=0;
 label=15;break;
 case 15: 
 var $97=$3;
 var $98=$vi;
 var $99=(($98+28)|0);
 HEAP32[(($99)>>2)]=$97;
 var $100=$4;
 var $101=$vi;
 var $102=(($101+36)|0);
 HEAP32[(($102)>>2)]=$100;
 var $103=$xxs;
 var $104=(($103+36)|0);
 var $105=HEAP32[(($104)>>2)];
 $lps=$105;
 var $106=$p;
 var $107=(($106+28)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$108&4;
 var $110=($109|0)!=0;
 if($110){label=16;break;}else{label=17;break;}
 case 16: 
 var $112=$lps;
 var $113=$112>>1;
 $lps=$113;
 label=17;break;
 case 17: 
 var $115=$xxs;
 var $116=(($115+44)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117&4;
 var $119=($118|0)!=0;
 if($119){label=18;break;}else{label=19;break;}
 case 18: 
 var $121=$xxs;
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$xxs;
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=((($123)-($126))|0);
 var $128=$vi;
 var $129=(($128+52)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=((($130)+($127))|0);
 HEAP32[(($129)>>2)]=$131;
 label=19;break;
 case 19: 
 var $133=$vi;
 var $134=(($133+108)|0);
 HEAP32[(($134)>>2)]=16;
 label=20;break;
 case 20: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_getvoicepos($ctx,$voc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $vi;
 var $xxs;
 $2=$ctx;
 $3=$voc;
 var $4=$2;
 var $5=(($4)|0);
 $p=$5;
 var $6=$3;
 var $7=$p;
 var $8=(($7+948)|0);
 var $9=(($8+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+((($6)*(116))&-1))|0);
 $vi=$11;
 var $12=$2;
 var $13=$vi;
 var $14=(($13+48)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=_get_sample($12,$15);
 $xxs=$16;
 var $17=$xxs;
 var $18=(($17+44)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&32768;
 var $21=($20|0)!=0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 var $24=$xxs;
 var $25=(($24+44)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$26&4;
 var $28=($27|0)!=0;
 if($28){label=4;break;}else{label=7;break;}
 case 4: 
 var $30=$vi;
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$xxs;
 var $34=(($33+40)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($32|0)>=($35|0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $38=$xxs;
 var $39=(($38+40)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$vi;
 var $42=(($41+28)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$xxs;
 var $45=(($44+40)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=((($43)-($46))|0);
 var $48=((($40)-($47))|0);
 var $49=((($48)-(1))|0);
 $1=$49;
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 var $52=$vi;
 var $53=(($52+28)|0);
 var $54=HEAP32[(($53)>>2)];
 $1=$54;
 label=8;break;
 case 8: 
 var $56=$1;
 STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_setpatch($ctx,$voc,$smp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $m;
 var $s;
 var $vi;
 var $xxs;
 $1=$ctx;
 $2=$voc;
 $3=$smp;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$1;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$1;
 var $9=(($8+1496)|0);
 $s=$9;
 var $10=$2;
 var $11=$p;
 var $12=(($11+948)|0);
 var $13=(($12+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+((($10)*(116))&-1))|0);
 $vi=$15;
 var $16=$1;
 var $17=$3;
 var $18=_get_sample($16,$17);
 $xxs=$18;
 var $19=$3;
 var $20=$vi;
 var $21=(($20+48)|0);
 HEAP32[(($21)>>2)]=$19;
 var $22=$vi;
 var $23=(($22+20)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=$vi;
 var $25=(($24+16)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=$vi;
 var $27=(($26+112)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=$vi;
 var $29=(($28+40)|0);
 HEAP32[(($29)>>2)]=0;
 var $30=$s;
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32^-1;
 var $34=$33&4;
 var $35=($34|0)!=0;
 if($35){label=2;break;}else{label=3;break;}
 case 2: 
 var $37=$vi;
 var $38=(($37+40)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$39|2;
 HEAP32[(($38)>>2)]=$40;
 label=3;break;
 case 3: 
 var $42=$xxs;
 var $43=(($42+44)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$44&32768;
 var $46=($45|0)!=0;
 if($46){label=4;break;}else{label=5;break;}
 case 4: 
 var $48=$vi;
 var $49=(($48+40)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$50|32;
 HEAP32[(($49)>>2)]=$51;
 var $52=$m;
 var $53=(($52+6552)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+12)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$1;
 var $58=$2;
 var $59=$xxs;
 var $60=(($59+48)|0);
 var $61=HEAP32[(($60)>>2)];
 FUNCTION_TABLE[$56]($57,$58,$61);
 label=11;break;
 case 5: 
 var $63=$1;
 var $64=$2;
 _mixer_setvol($63,$64,0);
 var $65=$xxs;
 var $66=(($65+48)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$vi;
 var $69=(($68+68)|0);
 HEAP32[(($69)>>2)]=$67;
 var $70=$vi;
 var $71=(($70+40)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$72|16;
 HEAP32[(($71)>>2)]=$73;
 var $74=$m;
 var $75=(($74+1280)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$76&65536;
 var $78=($77|0)!=0;
 if($78){label=6;break;}else{label=8;break;}
 case 6: 
 var $80=$s;
 var $81=(($80+20)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$82&1;
 var $84=($83|0)!=0;
 if($84){label=7;break;}else{label=8;break;}
 case 7: 
 var $86=$vi;
 var $87=(($86+40)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$88|4;
 HEAP32[(($87)>>2)]=$89;
 label=8;break;
 case 8: 
 var $91=$xxs;
 var $92=(($91+44)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$93&1;
 var $95=($94|0)!=0;
 if($95){label=9;break;}else{label=10;break;}
 case 9: 
 var $97=$vi;
 var $98=(($97+40)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$99|1;
 HEAP32[(($98)>>2)]=$100;
 label=10;break;
 case 10: 
 var $102=$1;
 var $103=$2;
 _mixer_voicepos($102,$103,0,0);
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_setvol($ctx,$voc,$vol){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $s;
 var $m;
 var $vi;
 $1=$ctx;
 $2=$voc;
 $3=$vol;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$1;
 var $7=(($6+1496)|0);
 $s=$7;
 var $8=$1;
 var $9=(($8+1552)|0);
 $m=$9;
 var $10=$2;
 var $11=$p;
 var $12=(($11+948)|0);
 var $13=(($12+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+((($10)*(116))&-1))|0);
 $vi=$15;
 var $16=$s;
 var $17=(($16+16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)>0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 var $21=$1;
 var $22=$2;
 var $23=$3;
 var $24=$vi;
 var $25=(($24+16)|0);
 var $26=HEAP32[(($25)>>2)];
 _anticlick($21,$22,$23,$26,0,0);
 label=3;break;
 case 3: 
 var $28=$3;
 var $29=$vi;
 var $30=(($29+20)|0);
 HEAP32[(($30)>>2)]=$28;
 var $31=$vi;
 var $32=(($31+40)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33&32;
 var $35=($34|0)!=0;
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $37=$m;
 var $38=(($37+6552)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+20)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$1;
 var $43=$2;
 var $44=$3;
 var $45=$44>>4;
 FUNCTION_TABLE[$41]($42,$43,$45);
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_setbend($ctx,$voc,$bend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $m;
 var $vi;
 $1=$ctx;
 $2=$voc;
 $3=$bend;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$1;
 var $7=(($6+1552)|0);
 $m=$7;
 var $8=$2;
 var $9=$p;
 var $10=(($9+948)|0);
 var $11=(($10+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+((($8)*(116))&-1))|0);
 $vi=$13;
 var $14=$vi;
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$3;
 var $18=_note_to_period_mix($16,$17);
 var $19=$vi;
 var $20=(($19+24)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$vi;
 var $22=(($21+40)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23&32;
 var $25=($24|0)!=0;
 if($25){label=2;break;}else{label=3;break;}
 case 2: 
 var $27=$m;
 var $28=(($27+6552)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$1;
 var $33=$2;
 var $34=$vi;
 var $35=(($34+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$3;
 var $38=$37>>7;
 FUNCTION_TABLE[$31]($32,$33,$36,$38);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_seteffect($ctx,$voc,$type,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $vi;
 $1=$ctx;
 $2=$voc;
 $3=$type;
 $4=$val;
 var $5=$1;
 var $6=(($5)|0);
 $p=$6;
 var $7=$2;
 var $8=$p;
 var $9=(($8+948)|0);
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+((($7)*(116))&-1))|0);
 $vi=$12;
 var $13=$3;
 switch(($13|0)){case 2:{ label=2;break;}case 3:{ label=3;break;}case 176:{ label=4;break;}case 177:{ label=5;break;}case 178:{ label=6;break;}default:{label=7;break;}}break;
 case 2: 
 var $15=$4;
 var $16=$vi;
 var $17=(($16+72)|0);
 var $18=(($17+28)|0);
 HEAP32[(($18)>>2)]=$15;
 label=7;break;
 case 3: 
 var $20=$4;
 var $21=$vi;
 var $22=(($21+72)|0);
 var $23=(($22+32)|0);
 HEAP32[(($23)>>2)]=$20;
 label=7;break;
 case 4: 
 var $25=$4;
 var $26=$vi;
 var $27=(($26+72)|0);
 var $28=(($27+16)|0);
 HEAP32[(($28)>>2)]=$25;
 label=7;break;
 case 5: 
 var $30=$4;
 var $31=$vi;
 var $32=(($31+72)|0);
 var $33=(($32+20)|0);
 HEAP32[(($33)>>2)]=$30;
 label=7;break;
 case 6: 
 var $35=$4;
 var $36=$vi;
 var $37=(($36+72)|0);
 var $38=(($37+24)|0);
 HEAP32[(($38)>>2)]=$35;
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_setpan($ctx,$voc,$pan){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $p;
 var $vi;
 $1=$ctx;
 $2=$voc;
 $3=$pan;
 var $4=$1;
 var $5=(($4)|0);
 $p=$5;
 var $6=$2;
 var $7=$p;
 var $8=(($7+948)|0);
 var $9=(($8+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+((($6)*(116))&-1))|0);
 $vi=$11;
 var $12=$3;
 var $13=$vi;
 var $14=(($13+16)|0);
 HEAP32[(($14)>>2)]=$12;
 STACKTOP=sp;return;
}
function _mixer_numvoices($ctx,$num){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 $2=$ctx;
 $3=$num;
 var $4=$2;
 var $5=(($4+1496)|0);
 $s=$5;
 var $6=$3;
 var $7=$s;
 var $8=(($7+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($6|0)>($9|0);
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $12=$3;
 var $13=($12|0)<0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$s;
 var $16=(($15+32)|0);
 var $17=HEAP32[(($16)>>2)];
 $1=$17;
 label=5;break;
 case 4: 
 var $19=$3;
 $1=$19;
 label=5;break;
 case 5: 
 var $21=$1;
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_on($ctx,$rate,$format,$c4rate){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $s;
 $2=$ctx;
 $3=$rate;
 $4=$format;
 $5=$c4rate;
 var $6=$2;
 var $7=(($6+1496)|0);
 $s=$7;
 var $8=_calloc(2,24585);
 var $9=$s;
 var $10=(($9+24)|0);
 HEAP32[(($10)>>2)]=$8;
 var $11=$s;
 var $12=(($11+24)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 label=7;break;
 case 3: 
 var $17=_calloc(4,24585);
 var $18=$17;
 var $19=$s;
 var $20=(($19+28)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$s;
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $27=$3;
 var $28=$s;
 var $29=(($28)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$4;
 var $31=$s;
 var $32=(($31+4)|0);
 HEAP32[(($32)>>2)]=$30;
 var $33=$s;
 var $34=(($33+8)|0);
 HEAP32[(($34)>>2)]=1;
 var $35=$s;
 var $36=(($35+12)|0);
 HEAP32[(($36)>>2)]=70;
 var $37=$5;
 var $38=((($37)*(6864))&-1);
 var $39=$s;
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(((($38|0))/(($41|0)))&-1);
 var $43=$s;
 var $44=(($43+48)|0);
 HEAP32[(($44)>>2)]=$42;
 var $45=$s;
 var $46=(($45+16)|0);
 HEAP32[(($46)>>2)]=1;
 var $47=$s;
 var $48=(($47+20)|0);
 HEAP32[(($48)>>2)]=1;
 var $49=$s;
 var $50=(($49+32)|0);
 HEAP32[(($50)>>2)]=128;
 var $51=$s;
 var $52=(($51+44)|0);
 HEAP32[(($52)>>2)]=0;
 var $53=$s;
 var $54=(($53+40)|0);
 HEAP32[(($54)>>2)]=0;
 $1=0;
 label=8;break;
 case 6: 
 var $56=$s;
 var $57=(($56+24)|0);
 var $58=HEAP32[(($57)>>2)];
 _free($58);
 label=7;break;
 case 7: 
 $1=-1;
 label=8;break;
 case 8: 
 var $61=$1;
 STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }
}
function _mixer_off($ctx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $s;
 $1=$ctx;
 var $2=$1;
 var $3=(($2+1496)|0);
 $s=$3;
 var $4=$s;
 var $5=(($4+24)|0);
 var $6=HEAP32[(($5)>>2)];
 _free($6);
 var $7=$s;
 var $8=(($7+28)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 _free($10);
 var $11=$s;
 var $12=(($11+28)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$s;
 var $14=(($13+24)|0);
 HEAP32[(($14)>>2)]=0;
 STACKTOP=sp;return;
}
function _xz_dec_lzma2_run($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tmp;
 $2=$s;
 $3=$b;
 label=2;break;
 case 2: 
 var $5=$3;
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$3;
 var $9=(($8+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($7>>>0)<($10>>>0);
 if($11){var $19=1;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=$2;
 var $14=(($13+64)|0);
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==7;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 if($19){label=5;break;}else{label=61;break;}
 case 5: 
 var $21=$2;
 var $22=(($21+64)|0);
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 switch(($24|0)){case 1:{ label=28;break;}case 2:{ label=29;break;}case 3:{ label=30;break;}case 4:{ label=31;break;}case 5:{ label=32;break;}case 6:{ label=35;break;}case 7:{ label=40;break;}case 8:{ label=57;break;}case 0:{ label=6;break;}default:{label=60;break;}}break;
 case 6: 
 var $26=$3;
 var $27=(($26+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)+(1))|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=$3;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+$28)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 $tmp=$35;
 var $36=$tmp;
 var $37=($36|0)==0;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 $1=1;
 label=62;break;
 case 8: 
 var $40=$tmp;
 var $41=($40>>>0)>=224;
 if($41){label=10;break;}else{label=9;break;}
 case 9: 
 var $43=$tmp;
 var $44=($43|0)==1;
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=$2;
 var $47=(($46+64)|0);
 var $48=(($47+20)|0);
 HEAP32[(($48)>>2)]=1;
 var $49=$2;
 var $50=(($49+64)|0);
 var $51=(($50+16)|0);
 HEAP32[(($51)>>2)]=0;
 var $52=$2;
 var $53=(($52+24)|0);
 var $54=$3;
 _dict_reset($53,$54);
 label=14;break;
 case 11: 
 var $56=$2;
 var $57=(($56+64)|0);
 var $58=(($57+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)!=0;
 if($60){label=12;break;}else{label=13;break;}
 case 12: 
 $1=7;
 label=62;break;
 case 13: 
 label=14;break;
 case 14: 
 var $64=$tmp;
 var $65=($64>>>0)>=128;
 if($65){label=15;break;}else{label=24;break;}
 case 15: 
 var $67=$tmp;
 var $68=$67&31;
 var $69=$68<<16;
 var $70=$2;
 var $71=(($70+64)|0);
 var $72=(($71+8)|0);
 HEAP32[(($72)>>2)]=$69;
 var $73=$2;
 var $74=(($73+64)|0);
 var $75=(($74)|0);
 HEAP32[(($75)>>2)]=1;
 var $76=$tmp;
 var $77=($76>>>0)>=192;
 if($77){label=16;break;}else{label=17;break;}
 case 16: 
 var $79=$2;
 var $80=(($79+64)|0);
 var $81=(($80+20)|0);
 HEAP32[(($81)>>2)]=0;
 var $82=$2;
 var $83=(($82+64)|0);
 var $84=(($83+4)|0);
 HEAP32[(($84)>>2)]=5;
 label=23;break;
 case 17: 
 var $86=$2;
 var $87=(($86+64)|0);
 var $88=(($87+20)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)!=0;
 if($90){label=18;break;}else{label=19;break;}
 case 18: 
 $1=7;
 label=62;break;
 case 19: 
 var $93=$2;
 var $94=(($93+64)|0);
 var $95=(($94+4)|0);
 HEAP32[(($95)>>2)]=6;
 var $96=$tmp;
 var $97=($96>>>0)>=160;
 if($97){label=20;break;}else{label=21;break;}
 case 20: 
 var $99=$2;
 _lzma_reset($99);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=27;break;
 case 24: 
 var $104=$tmp;
 var $105=($104>>>0)>2;
 if($105){label=25;break;}else{label=26;break;}
 case 25: 
 $1=7;
 label=62;break;
 case 26: 
 var $108=$2;
 var $109=(($108+64)|0);
 var $110=(($109)|0);
 HEAP32[(($110)>>2)]=3;
 var $111=$2;
 var $112=(($111+64)|0);
 var $113=(($112+4)|0);
 HEAP32[(($113)>>2)]=8;
 label=27;break;
 case 27: 
 label=60;break;
 case 28: 
 var $116=$3;
 var $117=(($116+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=((($118)+(1))|0);
 HEAP32[(($117)>>2)]=$119;
 var $120=$3;
 var $121=(($120)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($122+$118)|0);
 var $124=HEAP8[($123)];
 var $125=($124&255);
 var $126=$125<<8;
 var $127=$2;
 var $128=(($127+64)|0);
 var $129=(($128+8)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=((($130)+($126))|0);
 HEAP32[(($129)>>2)]=$131;
 var $132=$2;
 var $133=(($132+64)|0);
 var $134=(($133)|0);
 HEAP32[(($134)>>2)]=2;
 label=60;break;
 case 29: 
 var $136=$3;
 var $137=(($136+4)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=((($138)+(1))|0);
 HEAP32[(($137)>>2)]=$139;
 var $140=$3;
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+$138)|0);
 var $144=HEAP8[($143)];
 var $145=($144&255);
 var $146=((($145)+(1))|0);
 var $147=$2;
 var $148=(($147+64)|0);
 var $149=(($148+8)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=((($150)+($146))|0);
 HEAP32[(($149)>>2)]=$151;
 var $152=$2;
 var $153=(($152+64)|0);
 var $154=(($153)|0);
 HEAP32[(($154)>>2)]=3;
 label=60;break;
 case 30: 
 var $156=$3;
 var $157=(($156+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=((($158)+(1))|0);
 HEAP32[(($157)>>2)]=$159;
 var $160=$3;
 var $161=(($160)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+$158)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=$165<<8;
 var $167=$2;
 var $168=(($167+64)|0);
 var $169=(($168+12)|0);
 HEAP32[(($169)>>2)]=$166;
 var $170=$2;
 var $171=(($170+64)|0);
 var $172=(($171)|0);
 HEAP32[(($172)>>2)]=4;
 label=60;break;
 case 31: 
 var $174=$3;
 var $175=(($174+4)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=((($176)+(1))|0);
 HEAP32[(($175)>>2)]=$177;
 var $178=$3;
 var $179=(($178)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+$176)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=((($183)+(1))|0);
 var $185=$2;
 var $186=(($185+64)|0);
 var $187=(($186+12)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=((($188)+($184))|0);
 HEAP32[(($187)>>2)]=$189;
 var $190=$2;
 var $191=(($190+64)|0);
 var $192=(($191+4)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=$2;
 var $195=(($194+64)|0);
 var $196=(($195)|0);
 HEAP32[(($196)>>2)]=$193;
 label=60;break;
 case 32: 
 var $198=$2;
 var $199=$3;
 var $200=(($199+4)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=((($201)+(1))|0);
 HEAP32[(($200)>>2)]=$202;
 var $203=$3;
 var $204=(($203)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+$201)|0);
 var $207=HEAP8[($206)];
 var $208=_lzma_props($198,$207);
 var $209=($208|0)!=0;
 if($209){label=34;break;}else{label=33;break;}
 case 33: 
 $1=7;
 label=62;break;
 case 34: 
 var $212=$2;
 var $213=(($212+64)|0);
 var $214=(($213)|0);
 HEAP32[(($214)>>2)]=6;
 label=35;break;
 case 35: 
 var $216=$2;
 var $217=(($216+64)|0);
 var $218=(($217+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219>>>0)<5;
 if($220){label=36;break;}else{label=37;break;}
 case 36: 
 $1=7;
 label=62;break;
 case 37: 
 var $223=$2;
 var $224=(($223)|0);
 var $225=$3;
 var $226=_rc_read_init($224,$225);
 var $227=($226|0)!=0;
 if($227){label=39;break;}else{label=38;break;}
 case 38: 
 $1=0;
 label=62;break;
 case 39: 
 var $230=$2;
 var $231=(($230+64)|0);
 var $232=(($231+12)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=((($233)-(5))|0);
 HEAP32[(($232)>>2)]=$234;
 var $235=$2;
 var $236=(($235+64)|0);
 var $237=(($236)|0);
 HEAP32[(($237)>>2)]=7;
 label=40;break;
 case 40: 
 var $239=$2;
 var $240=(($239+24)|0);
 var $241=$3;
 var $242=(($241+20)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$3;
 var $245=(($244+16)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=((($243)-($246))|0);
 var $248=$2;
 var $249=(($248+64)|0);
 var $250=(($249+8)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($247>>>0)<($251>>>0);
 if($252){label=41;break;}else{label=42;break;}
 case 41: 
 var $254=$3;
 var $255=(($254+20)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=$3;
 var $258=(($257+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=((($256)-($259))|0);
 var $267=$260;label=43;break;
 case 42: 
 var $262=$2;
 var $263=(($262+64)|0);
 var $264=(($263+8)|0);
 var $265=HEAP32[(($264)>>2)];
 var $267=$265;label=43;break;
 case 43: 
 var $267;
 _dict_limit($240,$267);
 var $268=$2;
 var $269=$3;
 var $270=_lzma2_lzma($268,$269);
 var $271=($270|0)!=0;
 if($271){label=45;break;}else{label=44;break;}
 case 44: 
 $1=7;
 label=62;break;
 case 45: 
 var $274=$2;
 var $275=(($274+24)|0);
 var $276=$3;
 var $277=_dict_flush($275,$276);
 var $278=$2;
 var $279=(($278+64)|0);
 var $280=(($279+8)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=((($281)-($277))|0);
 HEAP32[(($280)>>2)]=$282;
 var $283=$2;
 var $284=(($283+64)|0);
 var $285=(($284+8)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=46;break;}else{label=51;break;}
 case 46: 
 var $289=$2;
 var $290=(($289+64)|0);
 var $291=(($290+12)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=($292>>>0)>0;
 if($293){label=49;break;}else{label=47;break;}
 case 47: 
 var $295=$2;
 var $296=(($295+88)|0);
 var $297=(($296+20)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=($298>>>0)>0;
 if($299){label=49;break;}else{label=48;break;}
 case 48: 
 var $301=$2;
 var $302=(($301)|0);
 var $303=_rc_is_finished($302);
 var $304=($303|0)!=0;
 if($304){label=50;break;}else{label=49;break;}
 case 49: 
 $1=7;
 label=62;break;
 case 50: 
 var $307=$2;
 var $308=(($307)|0);
 _rc_reset($308);
 var $309=$2;
 var $310=(($309+64)|0);
 var $311=(($310)|0);
 HEAP32[(($311)>>2)]=0;
 label=56;break;
 case 51: 
 var $313=$3;
 var $314=(($313+16)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=$3;
 var $317=(($316+20)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($315|0)==($318|0);
 if($319){label=54;break;}else{label=52;break;}
 case 52: 
 var $321=$3;
 var $322=(($321+4)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=$3;
 var $325=(($324+8)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=($323|0)==($326|0);
 if($327){label=53;break;}else{label=55;break;}
 case 53: 
 var $329=$2;
 var $330=(($329+28392)|0);
 var $331=(($330)|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=$2;
 var $334=(($333+64)|0);
 var $335=(($334+12)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=($332>>>0)<($336>>>0);
 if($337){label=54;break;}else{label=55;break;}
 case 54: 
 $1=0;
 label=62;break;
 case 55: 
 label=56;break;
 case 56: 
 label=60;break;
 case 57: 
 var $342=$2;
 var $343=(($342+24)|0);
 var $344=$3;
 var $345=$2;
 var $346=(($345+64)|0);
 var $347=(($346+12)|0);
 _dict_uncompressed($343,$344,$347);
 var $348=$2;
 var $349=(($348+64)|0);
 var $350=(($349+12)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=($351>>>0)>0;
 if($352){label=58;break;}else{label=59;break;}
 case 58: 
 $1=0;
 label=62;break;
 case 59: 
 var $355=$2;
 var $356=(($355+64)|0);
 var $357=(($356)|0);
 HEAP32[(($357)>>2)]=0;
 label=60;break;
 case 60: 
 label=2;break;
 case 61: 
 $1=0;
 label=62;break;
 case 62: 
 var $361=$1;
 STACKTOP=sp;return $361;
  default: assert(0, "bad label: " + label);
 }
}
function _dict_reset($dict,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$dict;
 $2=$b;
 var $3=$1;
 var $4=(($3+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$2;
 var $12=(($11+16)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($10+$13)|0);
 var $15=$1;
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$2;
 var $18=(($17+20)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($19)-($22))|0);
 var $24=$1;
 var $25=(($24+20)|0);
 HEAP32[(($25)>>2)]=$23;
 label=3;break;
 case 3: 
 var $27=$1;
 var $28=(($27+4)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=$1;
 var $30=(($29+8)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=$1;
 var $32=(($31+16)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=$1;
 var $34=(($33+12)|0);
 HEAP32[(($34)>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_reset($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $probs;
 var $i;
 $1=$s;
 var $2=$1;
 var $3=(($2+88)|0);
 var $4=(($3+16)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=$1;
 var $6=(($5+88)|0);
 var $7=(($6)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=$1;
 var $9=(($8+88)|0);
 var $10=(($9+4)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=$1;
 var $12=(($11+88)|0);
 var $13=(($12+8)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=$1;
 var $15=(($14+88)|0);
 var $16=(($15+12)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$1;
 var $18=(($17+88)|0);
 var $19=(($18+36)|0);
 var $20=(($19)|0);
 var $21=(($20)|0);
 $probs=$21;
 $i=0;
 label=2;break;
 case 2: 
 var $23=$i;
 var $24=($23>>>0)<14134;
 if($24){label=3;break;}else{label=5;break;}
 case 3: 
 var $26=$i;
 var $27=$probs;
 var $28=(($27+($26<<1))|0);
 HEAP16[(($28)>>1)]=1024;
 label=4;break;
 case 4: 
 var $30=$i;
 var $31=((($30)+(1))|0);
 $i=$31;
 label=2;break;
 case 5: 
 var $33=$1;
 var $34=(($33)|0);
 _rc_reset($34);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_props($s,$props){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$s;
 $3=$props;
 var $4=$3;
 var $5=($4&255);
 var $6=($5|0)>224;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=12;break;
 case 3: 
 var $9=$2;
 var $10=(($9+88)|0);
 var $11=(($10+32)|0);
 HEAP32[(($11)>>2)]=0;
 label=4;break;
 case 4: 
 var $13=$3;
 var $14=($13&255);
 var $15=($14|0)>=45;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 var $17=$3;
 var $18=($17&255);
 var $19=((($18)-(45))|0);
 var $20=(($19)&255);
 $3=$20;
 var $21=$2;
 var $22=(($21+88)|0);
 var $23=(($22+32)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($24)+(1))|0);
 HEAP32[(($23)>>2)]=$25;
 label=4;break;
 case 6: 
 var $27=$2;
 var $28=(($27+88)|0);
 var $29=(($28+32)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=1<<$30;
 var $32=((($31)-(1))|0);
 var $33=$2;
 var $34=(($33+88)|0);
 var $35=(($34+32)|0);
 HEAP32[(($35)>>2)]=$32;
 var $36=$2;
 var $37=(($36+88)|0);
 var $38=(($37+28)|0);
 HEAP32[(($38)>>2)]=0;
 label=7;break;
 case 7: 
 var $40=$3;
 var $41=($40&255);
 var $42=($41|0)>=9;
 if($42){label=8;break;}else{label=9;break;}
 case 8: 
 var $44=$3;
 var $45=($44&255);
 var $46=((($45)-(9))|0);
 var $47=(($46)&255);
 $3=$47;
 var $48=$2;
 var $49=(($48+88)|0);
 var $50=(($49+28)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 label=7;break;
 case 9: 
 var $54=$3;
 var $55=($54&255);
 var $56=$2;
 var $57=(($56+88)|0);
 var $58=(($57+24)|0);
 HEAP32[(($58)>>2)]=$55;
 var $59=$2;
 var $60=(($59+88)|0);
 var $61=(($60+24)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$2;
 var $64=(($63+88)|0);
 var $65=(($64+28)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=((($62)+($66))|0);
 var $68=($67>>>0)>4;
 if($68){label=10;break;}else{label=11;break;}
 case 10: 
 $1=0;
 label=12;break;
 case 11: 
 var $71=$2;
 var $72=(($71+88)|0);
 var $73=(($72+28)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=1<<$74;
 var $76=((($75)-(1))|0);
 var $77=$2;
 var $78=(($77+88)|0);
 var $79=(($78+28)|0);
 HEAP32[(($79)>>2)]=$76;
 var $80=$2;
 _lzma_reset($80);
 $1=1;
 label=12;break;
 case 12: 
 var $82=$1;
 STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }
}
function _rc_read_init($rc,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$rc;
 $3=$b;
 label=2;break;
 case 2: 
 var $5=$2;
 var $6=(($5+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7>>>0)>0;
 if($8){label=3;break;}else{label=6;break;}
 case 3: 
 var $10=$3;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$3;
 var $14=(($13+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($12|0)==($15|0);
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=7;break;
 case 5: 
 var $19=$2;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$21<<8;
 var $23=$3;
 var $24=(($23+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($25)+(1))|0);
 HEAP32[(($24)>>2)]=$26;
 var $27=$3;
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+$25)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=((($22)+($32))|0);
 var $34=$2;
 var $35=(($34+4)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=$2;
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=((($38)-(1))|0);
 HEAP32[(($37)>>2)]=$39;
 label=2;break;
 case 6: 
 $1=1;
 label=7;break;
 case 7: 
 var $42=$1;
 STACKTOP=sp;return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _dict_limit($dict,$out_max){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$dict;
 $2=$out_max;
 var $3=$1;
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($5)-($8))|0);
 var $10=$2;
 var $11=($9>>>0)<=($10>>>0);
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$1;
 var $14=(($13+20)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$1;
 var $17=(($16+16)|0);
 HEAP32[(($17)>>2)]=$15;
 label=4;break;
 case 3: 
 var $19=$1;
 var $20=(($19+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$2;
 var $23=((($21)+($22))|0);
 var $24=$1;
 var $25=(($24+16)|0);
 HEAP32[(($25)>>2)]=$23;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma2_lzma($s,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $in_avail;
 var $tmp;
 $2=$s;
 $3=$b;
 var $4=$3;
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$3;
 var $8=(($7+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($6)-($9))|0);
 $in_avail=$10;
 var $11=$2;
 var $12=(($11+28392)|0);
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14>>>0)>0;
 if($15){label=3;break;}else{label=2;break;}
 case 2: 
 var $17=$2;
 var $18=(($17+64)|0);
 var $19=(($18+12)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=3;break;}else{label=19;break;}
 case 3: 
 var $23=$2;
 var $24=(($23+28392)|0);
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(((42)-($26))|0);
 $tmp=$27;
 var $28=$tmp;
 var $29=$2;
 var $30=(($29+64)|0);
 var $31=(($30+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$2;
 var $34=(($33+28392)|0);
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($32)-($36))|0);
 var $38=($28>>>0)>($37>>>0);
 if($38){label=4;break;}else{label=5;break;}
 case 4: 
 var $40=$2;
 var $41=(($40+64)|0);
 var $42=(($41+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$2;
 var $45=(($44+28392)|0);
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=((($43)-($47))|0);
 $tmp=$48;
 label=5;break;
 case 5: 
 var $50=$tmp;
 var $51=$in_avail;
 var $52=($50>>>0)>($51>>>0);
 if($52){label=6;break;}else{label=7;break;}
 case 6: 
 var $54=$in_avail;
 $tmp=$54;
 label=7;break;
 case 7: 
 var $56=$2;
 var $57=(($56+28392)|0);
 var $58=(($57+4)|0);
 var $59=(($58)|0);
 var $60=$2;
 var $61=(($60+28392)|0);
 var $62=(($61)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($59+$63)|0);
 var $65=$3;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$3;
 var $69=(($68+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($67+$70)|0);
 var $72=$tmp;
 assert($72 % 1 === 0);(_memcpy($64, $71, $72)|0);
 var $73=$2;
 var $74=(($73+28392)|0);
 var $75=(($74)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$tmp;
 var $78=((($76)+($77))|0);
 var $79=$2;
 var $80=(($79+64)|0);
 var $81=(($80+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($78|0)==($82|0);
 if($83){label=8;break;}else{label=9;break;}
 case 8: 
 var $85=$2;
 var $86=(($85+28392)|0);
 var $87=(($86+4)|0);
 var $88=(($87)|0);
 var $89=$2;
 var $90=(($89+28392)|0);
 var $91=(($90)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($88+$92)|0);
 var $94=$tmp;
 var $95=(($93+$94)|0);
 var $96=$2;
 var $97=(($96+28392)|0);
 var $98=(($97)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(((63)-($99))|0);
 var $101=$tmp;
 var $102=((($100)-($101))|0);
 _memset($95, 0, $102)|0;
 var $103=$2;
 var $104=(($103+28392)|0);
 var $105=(($104)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=$tmp;
 var $108=((($106)+($107))|0);
 var $109=$2;
 var $110=(($109)|0);
 var $111=(($110+20)|0);
 HEAP32[(($111)>>2)]=$108;
 label=13;break;
 case 9: 
 var $113=$2;
 var $114=(($113+28392)|0);
 var $115=(($114)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$tmp;
 var $118=((($116)+($117))|0);
 var $119=($118>>>0)<21;
 if($119){label=10;break;}else{label=11;break;}
 case 10: 
 var $121=$tmp;
 var $122=$2;
 var $123=(($122+28392)|0);
 var $124=(($123)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=((($125)+($121))|0);
 HEAP32[(($124)>>2)]=$126;
 var $127=$tmp;
 var $128=$3;
 var $129=(($128+4)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=((($130)+($127))|0);
 HEAP32[(($129)>>2)]=$131;
 $1=1;
 label=33;break;
 case 11: 
 var $133=$2;
 var $134=(($133+28392)|0);
 var $135=(($134)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$tmp;
 var $138=((($136)+($137))|0);
 var $139=((($138)-(21))|0);
 var $140=$2;
 var $141=(($140)|0);
 var $142=(($141+20)|0);
 HEAP32[(($142)>>2)]=$139;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $145=$2;
 var $146=(($145+28392)|0);
 var $147=(($146+4)|0);
 var $148=(($147)|0);
 var $149=$2;
 var $150=(($149)|0);
 var $151=(($150+12)|0);
 HEAP32[(($151)>>2)]=$148;
 var $152=$2;
 var $153=(($152)|0);
 var $154=(($153+16)|0);
 HEAP32[(($154)>>2)]=0;
 var $155=$2;
 var $156=_lzma_main($155);
 var $157=($156|0)!=0;
 if($157){label=14;break;}else{label=15;break;}
 case 14: 
 var $159=$2;
 var $160=(($159)|0);
 var $161=(($160+16)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=$2;
 var $164=(($163+28392)|0);
 var $165=(($164)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=$tmp;
 var $168=((($166)+($167))|0);
 var $169=($162>>>0)>($168>>>0);
 if($169){label=15;break;}else{label=16;break;}
 case 15: 
 $1=0;
 label=33;break;
 case 16: 
 var $172=$2;
 var $173=(($172)|0);
 var $174=(($173+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=$2;
 var $177=(($176+64)|0);
 var $178=(($177+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=((($179)-($175))|0);
 HEAP32[(($178)>>2)]=$180;
 var $181=$2;
 var $182=(($181)|0);
 var $183=(($182+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=$2;
 var $186=(($185+28392)|0);
 var $187=(($186)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($184>>>0)<($188>>>0);
 if($189){label=17;break;}else{label=18;break;}
 case 17: 
 var $191=$2;
 var $192=(($191)|0);
 var $193=(($192+16)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$2;
 var $196=(($195+28392)|0);
 var $197=(($196)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=((($198)-($194))|0);
 HEAP32[(($197)>>2)]=$199;
 var $200=$2;
 var $201=(($200+28392)|0);
 var $202=(($201+4)|0);
 var $203=$202;
 var $204=$2;
 var $205=(($204+28392)|0);
 var $206=(($205+4)|0);
 var $207=(($206)|0);
 var $208=$2;
 var $209=(($208)|0);
 var $210=(($209+16)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($207+$211)|0);
 var $213=$2;
 var $214=(($213+28392)|0);
 var $215=(($214)|0);
 var $216=HEAP32[(($215)>>2)];
 _memmove($203,$212,$216,1,0);
 $1=1;
 label=33;break;
 case 18: 
 var $218=$2;
 var $219=(($218)|0);
 var $220=(($219+16)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=$2;
 var $223=(($222+28392)|0);
 var $224=(($223)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=((($221)-($225))|0);
 var $227=$3;
 var $228=(($227+4)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=((($229)+($226))|0);
 HEAP32[(($228)>>2)]=$230;
 var $231=$2;
 var $232=(($231+28392)|0);
 var $233=(($232)|0);
 HEAP32[(($233)>>2)]=0;
 label=19;break;
 case 19: 
 var $235=$3;
 var $236=(($235+8)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$3;
 var $239=(($238+4)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=((($237)-($240))|0);
 $in_avail=$241;
 var $242=$in_avail;
 var $243=($242>>>0)>=21;
 if($243){label=20;break;}else{label=28;break;}
 case 20: 
 var $245=$3;
 var $246=(($245)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=$2;
 var $249=(($248)|0);
 var $250=(($249+12)|0);
 HEAP32[(($250)>>2)]=$247;
 var $251=$3;
 var $252=(($251+4)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=$2;
 var $255=(($254)|0);
 var $256=(($255+16)|0);
 HEAP32[(($256)>>2)]=$253;
 var $257=$in_avail;
 var $258=$2;
 var $259=(($258+64)|0);
 var $260=(($259+12)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=((($261)+(21))|0);
 var $263=($257>>>0)>=($262>>>0);
 if($263){label=21;break;}else{label=22;break;}
 case 21: 
 var $265=$3;
 var $266=(($265+4)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=$2;
 var $269=(($268+64)|0);
 var $270=(($269+12)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=((($267)+($271))|0);
 var $273=$2;
 var $274=(($273)|0);
 var $275=(($274+20)|0);
 HEAP32[(($275)>>2)]=$272;
 label=23;break;
 case 22: 
 var $277=$3;
 var $278=(($277+8)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=((($279)-(21))|0);
 var $281=$2;
 var $282=(($281)|0);
 var $283=(($282+20)|0);
 HEAP32[(($283)>>2)]=$280;
 label=23;break;
 case 23: 
 var $285=$2;
 var $286=_lzma_main($285);
 var $287=($286|0)!=0;
 if($287){label=25;break;}else{label=24;break;}
 case 24: 
 $1=0;
 label=33;break;
 case 25: 
 var $290=$2;
 var $291=(($290)|0);
 var $292=(($291+16)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=$3;
 var $295=(($294+4)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=((($293)-($296))|0);
 $in_avail=$297;
 var $298=$in_avail;
 var $299=$2;
 var $300=(($299+64)|0);
 var $301=(($300+12)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($298>>>0)>($302>>>0);
 if($303){label=26;break;}else{label=27;break;}
 case 26: 
 $1=0;
 label=33;break;
 case 27: 
 var $306=$in_avail;
 var $307=$2;
 var $308=(($307+64)|0);
 var $309=(($308+12)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=((($310)-($306))|0);
 HEAP32[(($309)>>2)]=$311;
 var $312=$2;
 var $313=(($312)|0);
 var $314=(($313+16)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=$3;
 var $317=(($316+4)|0);
 HEAP32[(($317)>>2)]=$315;
 label=28;break;
 case 28: 
 var $319=$3;
 var $320=(($319+8)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=$3;
 var $323=(($322+4)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=((($321)-($324))|0);
 $in_avail=$325;
 var $326=$in_avail;
 var $327=($326>>>0)<21;
 if($327){label=29;break;}else{label=32;break;}
 case 29: 
 var $329=$in_avail;
 var $330=$2;
 var $331=(($330+64)|0);
 var $332=(($331+12)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=($329>>>0)>($333>>>0);
 if($334){label=30;break;}else{label=31;break;}
 case 30: 
 var $336=$2;
 var $337=(($336+64)|0);
 var $338=(($337+12)|0);
 var $339=HEAP32[(($338)>>2)];
 $in_avail=$339;
 label=31;break;
 case 31: 
 var $341=$2;
 var $342=(($341+28392)|0);
 var $343=(($342+4)|0);
 var $344=$343;
 var $345=$3;
 var $346=(($345)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=$3;
 var $349=(($348+4)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=(($347+$350)|0);
 var $352=$in_avail;
 assert($352 % 1 === 0);(_memcpy($344, $351, $352)|0);
 var $353=$in_avail;
 var $354=$2;
 var $355=(($354+28392)|0);
 var $356=(($355)|0);
 HEAP32[(($356)>>2)]=$353;
 var $357=$in_avail;
 var $358=$3;
 var $359=(($358+4)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=((($360)+($357))|0);
 HEAP32[(($359)>>2)]=$361;
 label=32;break;
 case 32: 
 $1=1;
 label=33;break;
 case 33: 
 var $364=$1;
 STACKTOP=sp;return $364;
  default: assert(0, "bad label: " + label);
 }
}
function _dict_flush($dict,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $copy_size;
 $1=$dict;
 $2=$b;
 var $3=$1;
 var $4=(($3+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($5)-($8))|0);
 $copy_size=$9;
 var $10=$1;
 var $11=(($10+36)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=5;break;}
 case 2: 
 var $15=$1;
 var $16=(($15+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$1;
 var $19=(($18+20)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($17|0)==($20|0);
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 var $23=$1;
 var $24=(($23+8)|0);
 HEAP32[(($24)>>2)]=0;
 label=4;break;
 case 4: 
 var $26=$2;
 var $27=(($26+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$2;
 var $30=(($29+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($28+$31)|0);
 var $33=$1;
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$1;
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($35+$38)|0);
 var $40=$copy_size;
 assert($40 % 1 === 0);(_memcpy($32, $39, $40)|0);
 label=5;break;
 case 5: 
 var $42=$1;
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$1;
 var $46=(($45+4)|0);
 HEAP32[(($46)>>2)]=$44;
 var $47=$copy_size;
 var $48=$2;
 var $49=(($48+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=((($50)+($47))|0);
 HEAP32[(($49)>>2)]=$51;
 var $52=$copy_size;
 STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }
}
function _rc_is_finished($rc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$rc;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 var $6=($5&1);
 STACKTOP=sp;return $6;
}
function _rc_reset($rc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$rc;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=$1;
 var $5=(($4+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$1;
 var $7=(($6+8)|0);
 HEAP32[(($7)>>2)]=5;
 STACKTOP=sp;return;
}
function _dict_uncompressed($dict,$b,$left){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $copy_size;
 $1=$dict;
 $2=$b;
 $3=$left;
 label=2;break;
 case 2: 
 var $5=$3;
 var $6=HEAP32[(($5)>>2)];
 var $7=($6>>>0)>0;
 if($7){label=3;break;}else{var $25=0;label=5;break;}
 case 3: 
 var $9=$2;
 var $10=(($9+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=(($12+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11>>>0)<($14>>>0);
 if($15){label=4;break;}else{var $25=0;label=5;break;}
 case 4: 
 var $17=$2;
 var $18=(($17+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$2;
 var $21=(($20+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($19>>>0)<($22>>>0);
 var $25=$23;label=5;break;
 case 5: 
 var $25;
 if($25){label=6;break;}else{label=20;break;}
 case 6: 
 var $27=$2;
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$2;
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($29)-($32))|0);
 var $34=$2;
 var $35=(($34+20)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$2;
 var $38=(($37+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=((($36)-($39))|0);
 var $41=($33>>>0)<($40>>>0);
 if($41){label=7;break;}else{label=8;break;}
 case 7: 
 var $43=$2;
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$2;
 var $47=(($46+4)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=((($45)-($48))|0);
 var $59=$49;label=9;break;
 case 8: 
 var $51=$2;
 var $52=(($51+20)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$2;
 var $55=(($54+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=((($53)-($56))|0);
 var $59=$57;label=9;break;
 case 9: 
 var $59;
 $copy_size=$59;
 var $60=$copy_size;
 var $61=$1;
 var $62=(($61+20)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$1;
 var $65=(($64+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=((($63)-($66))|0);
 var $68=($60>>>0)>($67>>>0);
 if($68){label=10;break;}else{label=11;break;}
 case 10: 
 var $70=$1;
 var $71=(($70+20)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$1;
 var $74=(($73+8)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=((($72)-($75))|0);
 $copy_size=$76;
 label=11;break;
 case 11: 
 var $78=$copy_size;
 var $79=$3;
 var $80=HEAP32[(($79)>>2)];
 var $81=($78>>>0)>($80>>>0);
 if($81){label=12;break;}else{label=13;break;}
 case 12: 
 var $83=$3;
 var $84=HEAP32[(($83)>>2)];
 $copy_size=$84;
 label=13;break;
 case 13: 
 var $86=$copy_size;
 var $87=$3;
 var $88=HEAP32[(($87)>>2)];
 var $89=((($88)-($86))|0);
 HEAP32[(($87)>>2)]=$89;
 var $90=$1;
 var $91=(($90)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$1;
 var $94=(($93+8)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($92+$95)|0);
 var $97=$2;
 var $98=(($97)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$2;
 var $101=(($100+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($99+$102)|0);
 var $104=$copy_size;
 assert($104 % 1 === 0);(_memcpy($96, $103, $104)|0);
 var $105=$copy_size;
 var $106=$1;
 var $107=(($106+8)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=((($108)+($105))|0);
 HEAP32[(($107)>>2)]=$109;
 var $110=$1;
 var $111=(($110+12)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$1;
 var $114=(($113+8)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($112>>>0)<($115>>>0);
 if($116){label=14;break;}else{label=15;break;}
 case 14: 
 var $118=$1;
 var $119=(($118+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$1;
 var $122=(($121+12)|0);
 HEAP32[(($122)>>2)]=$120;
 label=15;break;
 case 15: 
 var $124=$1;
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)!=0;
 if($127){label=16;break;}else{label=19;break;}
 case 16: 
 var $129=$1;
 var $130=(($129+8)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=$1;
 var $133=(($132+20)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($131|0)==($134|0);
 if($135){label=17;break;}else{label=18;break;}
 case 17: 
 var $137=$1;
 var $138=(($137+8)|0);
 HEAP32[(($138)>>2)]=0;
 label=18;break;
 case 18: 
 var $140=$2;
 var $141=(($140+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$2;
 var $144=(($143+16)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($142+$145)|0);
 var $147=$2;
 var $148=(($147)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$2;
 var $151=(($150+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($149+$152)|0);
 var $154=$copy_size;
 assert($154 % 1 === 0);(_memcpy($146, $153, $154)|0);
 label=19;break;
 case 19: 
 var $156=$1;
 var $157=(($156+8)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$1;
 var $160=(($159+4)|0);
 HEAP32[(($160)>>2)]=$158;
 var $161=$copy_size;
 var $162=$2;
 var $163=(($162+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=((($164)+($161))|0);
 HEAP32[(($163)>>2)]=$165;
 var $166=$copy_size;
 var $167=$2;
 var $168=(($167+4)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=((($169)+($166))|0);
 HEAP32[(($168)>>2)]=$170;
 label=2;break;
 case 20: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _xz_dec_lzma2_create($mode,$dict_max){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 $2=$mode;
 $3=$dict_max;
 var $4=_malloc(28460);
 var $5=$4;
 $s=$5;
 var $6=$s;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=11;break;
 case 3: 
 var $10=$2;
 var $11=$s;
 var $12=(($11+24)|0);
 var $13=(($12+36)|0);
 HEAP32[(($13)>>2)]=$10;
 var $14=$3;
 var $15=$s;
 var $16=(($15+24)|0);
 var $17=(($16+28)|0);
 HEAP32[(($17)>>2)]=$14;
 var $18=$2;
 var $19=($18|0)==1;
 if($19){label=4;break;}else{label=7;break;}
 case 4: 
 var $21=$3;
 var $22=_malloc($21);
 var $23=$s;
 var $24=(($23+24)|0);
 var $25=(($24)|0);
 HEAP32[(($25)>>2)]=$22;
 var $26=$s;
 var $27=(($26+24)|0);
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=$s;
 var $33=$32;
 _free($33);
 $1=0;
 label=11;break;
 case 6: 
 label=10;break;
 case 7: 
 var $36=$2;
 var $37=($36|0)==2;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=$s;
 var $40=(($39+24)|0);
 var $41=(($40)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=$s;
 var $43=(($42+24)|0);
 var $44=(($43+32)|0);
 HEAP32[(($44)>>2)]=0;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $47=$s;
 $1=$47;
 label=11;break;
 case 11: 
 var $49=$1;
 STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }
}
function _xz_dec_lzma2_reset($s,$props){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$s;
 $3=$props;
 var $4=$3;
 var $5=($4&255);
 var $6=($5|0)>39;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=6;
 label=14;break;
 case 3: 
 var $9=$3;
 var $10=($9&255);
 var $11=$10&1;
 var $12=((($11)+(2))|0);
 var $13=$2;
 var $14=(($13+24)|0);
 var $15=(($14+24)|0);
 HEAP32[(($15)>>2)]=$12;
 var $16=$3;
 var $17=($16&255);
 var $18=$17>>1;
 var $19=((($18)+(11))|0);
 var $20=$2;
 var $21=(($20+24)|0);
 var $22=(($21+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23<<$19;
 HEAP32[(($22)>>2)]=$24;
 var $25=$2;
 var $26=(($25+24)|0);
 var $27=(($26+36)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)!=0;
 if($29){label=4;break;}else{label=13;break;}
 case 4: 
 var $31=$2;
 var $32=(($31+24)|0);
 var $33=(($32+24)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$2;
 var $36=(($35+24)|0);
 var $37=(($36+28)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($34>>>0)>($38>>>0);
 if($39){label=5;break;}else{label=6;break;}
 case 5: 
 $1=4;
 label=14;break;
 case 6: 
 var $42=$2;
 var $43=(($42+24)|0);
 var $44=(($43+24)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$2;
 var $47=(($46+24)|0);
 var $48=(($47+20)|0);
 HEAP32[(($48)>>2)]=$45;
 var $49=$2;
 var $50=(($49+24)|0);
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==2;
 if($53){label=7;break;}else{label=12;break;}
 case 7: 
 var $55=$2;
 var $56=(($55+24)|0);
 var $57=(($56+32)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$2;
 var $60=(($59+24)|0);
 var $61=(($60+24)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($58>>>0)<($62>>>0);
 if($63){label=8;break;}else{label=11;break;}
 case 8: 
 var $65=$2;
 var $66=(($65+24)|0);
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 _free($68);
 var $69=$2;
 var $70=(($69+24)|0);
 var $71=(($70+24)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=_malloc($72);
 var $74=$2;
 var $75=(($74+24)|0);
 var $76=(($75)|0);
 HEAP32[(($76)>>2)]=$73;
 var $77=$2;
 var $78=(($77+24)|0);
 var $79=(($78)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($80|0)==0;
 if($81){label=9;break;}else{label=10;break;}
 case 9: 
 var $83=$2;
 var $84=(($83+24)|0);
 var $85=(($84+32)|0);
 HEAP32[(($85)>>2)]=0;
 $1=3;
 label=14;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $90=$2;
 var $91=(($90+88)|0);
 var $92=(($91+20)|0);
 HEAP32[(($92)>>2)]=0;
 var $93=$2;
 var $94=(($93+64)|0);
 var $95=(($94)|0);
 HEAP32[(($95)>>2)]=0;
 var $96=$2;
 var $97=(($96+64)|0);
 var $98=(($97+16)|0);
 HEAP32[(($98)>>2)]=1;
 var $99=$2;
 var $100=(($99+28392)|0);
 var $101=(($100)|0);
 HEAP32[(($101)>>2)]=0;
 $1=0;
 label=14;break;
 case 14: 
 var $103=$1;
 STACKTOP=sp;return $103;
  default: assert(0, "bad label: " + label);
 }
}
function _xz_dec_lzma2_end($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$s;
 var $2=$1;
 var $3=(($2+24)|0);
 var $4=(($3+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=(($8+24)|0);
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 _free($11);
 label=3;break;
 case 3: 
 var $13=$1;
 var $14=$13;
 _free($14);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_main($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $pos_state;
 $2=$s;
 var $3=$2;
 var $4=(($3+24)|0);
 var $5=_dict_has_space($4);
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+88)|0);
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)>0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$2;
 var $15=(($14+24)|0);
 var $16=$2;
 var $17=(($16+88)|0);
 var $18=(($17+20)|0);
 var $19=$2;
 var $20=(($19+88)|0);
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=_dict_repeat($15,$18,$22);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $26=$2;
 var $27=(($26+24)|0);
 var $28=_dict_has_space($27);
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{var $37=0;label=7;break;}
 case 6: 
 var $31=$2;
 var $32=(($31)|0);
 var $33=_rc_limit_exceeded($32);
 var $34=($33|0)!=0;
 var $35=$34^1;
 var $37=$35;label=7;break;
 case 7: 
 var $37;
 if($37){label=8;break;}else{label=17;break;}
 case 8: 
 var $39=$2;
 var $40=(($39+24)|0);
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$2;
 var $44=(($43+88)|0);
 var $45=(($44+32)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$42&$46;
 $pos_state=$47;
 var $48=$2;
 var $49=(($48)|0);
 var $50=$pos_state;
 var $51=$2;
 var $52=(($51+88)|0);
 var $53=(($52+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$2;
 var $56=(($55+88)|0);
 var $57=(($56+36)|0);
 var $58=(($57+($54<<5))|0);
 var $59=(($58+($50<<1))|0);
 var $60=_rc_bit($49,$59);
 var $61=($60|0)!=0;
 if($61){label=10;break;}else{label=9;break;}
 case 9: 
 var $63=$2;
 _lzma_literal($63);
 label=16;break;
 case 10: 
 var $65=$2;
 var $66=(($65)|0);
 var $67=$2;
 var $68=(($67+88)|0);
 var $69=(($68+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=$2;
 var $72=(($71+88)|0);
 var $73=(($72+420)|0);
 var $74=(($73+($70<<1))|0);
 var $75=_rc_bit($66,$74);
 var $76=($75|0)!=0;
 if($76){label=11;break;}else{label=12;break;}
 case 11: 
 var $78=$2;
 var $79=$pos_state;
 _lzma_rep_match($78,$79);
 label=13;break;
 case 12: 
 var $81=$2;
 var $82=$pos_state;
 _lzma_match($81,$82);
 label=13;break;
 case 13: 
 var $84=$2;
 var $85=(($84+24)|0);
 var $86=$2;
 var $87=(($86+88)|0);
 var $88=(($87+20)|0);
 var $89=$2;
 var $90=(($89+88)|0);
 var $91=(($90)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=_dict_repeat($85,$88,$92);
 var $94=($93|0)!=0;
 if($94){label=15;break;}else{label=14;break;}
 case 14: 
 $1=0;
 label=18;break;
 case 15: 
 label=16;break;
 case 16: 
 label=5;break;
 case 17: 
 var $99=$2;
 var $100=(($99)|0);
 _rc_normalize($100);
 $1=1;
 label=18;break;
 case 18: 
 var $102=$1;
 STACKTOP=sp;return $102;
  default: assert(0, "bad label: " + label);
 }
}
function _dict_has_space($dict){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$dict;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($4>>>0)<($7>>>0);
 var $9=($8&1);
 STACKTOP=sp;return $9;
}
function _dict_repeat($dict,$len,$dist){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $back;
 var $left;
 $2=$dict;
 $3=$len;
 $4=$dist;
 var $5=$4;
 var $6=$2;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($5>>>0)>=($8>>>0);
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$4;
 var $12=$2;
 var $13=(($12+24)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($11>>>0)>=($14>>>0);
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=17;break;
 case 4: 
 var $18=$2;
 var $19=(($18+16)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$2;
 var $22=(($21+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($20)-($23))|0);
 var $25=$3;
 var $26=HEAP32[(($25)>>2)];
 var $27=($24>>>0)<($26>>>0);
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $29=$2;
 var $30=(($29+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$2;
 var $33=(($32+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=((($31)-($34))|0);
 var $40=$35;label=7;break;
 case 6: 
 var $37=$3;
 var $38=HEAP32[(($37)>>2)];
 var $40=$38;label=7;break;
 case 7: 
 var $40;
 $left=$40;
 var $41=$left;
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=((($43)-($41))|0);
 HEAP32[(($42)>>2)]=$44;
 var $45=$2;
 var $46=(($45+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$4;
 var $49=((($47)-($48))|0);
 var $50=((($49)-(1))|0);
 $back=$50;
 var $51=$4;
 var $52=$2;
 var $53=(($52+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($51>>>0)>=($54>>>0);
 if($55){label=8;break;}else{label=9;break;}
 case 8: 
 var $57=$2;
 var $58=(($57+20)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=$back;
 var $61=((($60)+($59))|0);
 $back=$61;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $64=$back;
 var $65=((($64)+(1))|0);
 $back=$65;
 var $66=$2;
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+$64)|0);
 var $70=HEAP8[($69)];
 var $71=$2;
 var $72=(($71+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($72)>>2)]=$74;
 var $75=$2;
 var $76=(($75)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+$73)|0);
 HEAP8[($78)]=$70;
 var $79=$back;
 var $80=$2;
 var $81=(($80+20)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($79|0)==($82|0);
 if($83){label=11;break;}else{label=12;break;}
 case 11: 
 $back=0;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $87=$left;
 var $88=((($87)-(1))|0);
 $left=$88;
 var $89=($88>>>0)>0;
 if($89){label=10;break;}else{label=14;break;}
 case 14: 
 var $91=$2;
 var $92=(($91+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$2;
 var $95=(($94+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($93>>>0)<($96>>>0);
 if($97){label=15;break;}else{label=16;break;}
 case 15: 
 var $99=$2;
 var $100=(($99+8)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=$2;
 var $103=(($102+12)|0);
 HEAP32[(($103)>>2)]=$101;
 label=16;break;
 case 16: 
 $1=1;
 label=17;break;
 case 17: 
 var $106=$1;
 STACKTOP=sp;return $106;
  default: assert(0, "bad label: " + label);
 }
}
function _rc_limit_exceeded($rc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$rc;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($4>>>0)>($7>>>0);
 var $9=($8&1);
 STACKTOP=sp;return $9;
}
function _rc_bit($rc,$prob){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $bound;
 var $bit;
 $1=$rc;
 $2=$prob;
 var $3=$1;
 _rc_normalize($3);
 var $4=$1;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6>>>11;
 var $8=$2;
 var $9=HEAP16[(($8)>>1)];
 var $10=($9&65535);
 var $11=(Math_imul($7,$10)|0);
 $bound=$11;
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$bound;
 var $16=($14>>>0)<($15>>>0);
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$bound;
 var $19=$1;
 var $20=(($19)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$2;
 var $22=HEAP16[(($21)>>1)];
 var $23=($22&65535);
 var $24=(((2048)-($23))|0);
 var $25=$24>>5;
 var $26=$2;
 var $27=HEAP16[(($26)>>1)];
 var $28=($27&65535);
 var $29=((($28)+($25))|0);
 var $30=(($29)&65535);
 HEAP16[(($26)>>1)]=$30;
 $bit=0;
 label=4;break;
 case 3: 
 var $32=$bound;
 var $33=$1;
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)-($32))|0);
 HEAP32[(($34)>>2)]=$36;
 var $37=$bound;
 var $38=$1;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)-($37))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=$2;
 var $43=HEAP16[(($42)>>1)];
 var $44=($43&65535);
 var $45=$44>>5;
 var $46=$2;
 var $47=HEAP16[(($46)>>1)];
 var $48=($47&65535);
 var $49=((($48)-($45))|0);
 var $50=(($49)&65535);
 HEAP16[(($46)>>1)]=$50;
 $bit=1;
 label=4;break;
 case 4: 
 var $52=$bit;
 STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_literal($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $probs;
 var $symbol;
 var $match_byte;
 var $match_bit;
 var $offset;
 var $i;
 $1=$s;
 var $2=$1;
 var $3=_lzma_literal_probs($2);
 $probs=$3;
 var $4=$1;
 var $5=(($4+88)|0);
 var $6=(($5+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=_lzma_state_is_literal($7);
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$1;
 var $12=(($11)|0);
 var $13=$probs;
 var $14=_rc_bittree($12,$13,256);
 $symbol=$14;
 label=10;break;
 case 3: 
 $symbol=1;
 var $16=$1;
 var $17=(($16+24)|0);
 var $18=$1;
 var $19=(($18+88)|0);
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=_dict_get($17,$21);
 var $23=$22<<1;
 $match_byte=$23;
 $offset=256;
 label=4;break;
 case 4: 
 var $25=$match_byte;
 var $26=$offset;
 var $27=$25&$26;
 $match_bit=$27;
 var $28=$match_byte;
 var $29=$28<<1;
 $match_byte=$29;
 var $30=$offset;
 var $31=$match_bit;
 var $32=((($30)+($31))|0);
 var $33=$symbol;
 var $34=((($32)+($33))|0);
 $i=$34;
 var $35=$1;
 var $36=(($35)|0);
 var $37=$i;
 var $38=$probs;
 var $39=(($38+($37<<1))|0);
 var $40=_rc_bit($36,$39);
 var $41=($40|0)!=0;
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=$symbol;
 var $44=$43<<1;
 var $45=((($44)+(1))|0);
 $symbol=$45;
 var $46=$match_bit;
 var $47=$offset;
 var $48=$47&$46;
 $offset=$48;
 label=7;break;
 case 6: 
 var $50=$symbol;
 var $51=$50<<1;
 $symbol=$51;
 var $52=$match_bit;
 var $53=$52^-1;
 var $54=$offset;
 var $55=$54&$53;
 $offset=$55;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $58=$symbol;
 var $59=($58>>>0)<256;
 if($59){label=4;break;}else{label=9;break;}
 case 9: 
 label=10;break;
 case 10: 
 var $62=$1;
 var $63=(($62+24)|0);
 var $64=$symbol;
 var $65=(($64)&255);
 _dict_put($63,$65);
 var $66=$1;
 var $67=(($66+88)|0);
 var $68=(($67+16)|0);
 _lzma_state_literal($68);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_rep_match($s,$pos_state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tmp;
 $1=$s;
 $2=$pos_state;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$1;
 var $6=(($5+88)|0);
 var $7=(($6+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$1;
 var $10=(($9+88)|0);
 var $11=(($10+444)|0);
 var $12=(($11+($8<<1))|0);
 var $13=_rc_bit($4,$12);
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=2;break;}
 case 2: 
 var $16=$1;
 var $17=(($16)|0);
 var $18=$2;
 var $19=$1;
 var $20=(($19+88)|0);
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$1;
 var $24=(($23+88)|0);
 var $25=(($24+516)|0);
 var $26=(($25+($22<<5))|0);
 var $27=(($26+($18<<1))|0);
 var $28=_rc_bit($17,$27);
 var $29=($28|0)!=0;
 if($29){label=4;break;}else{label=3;break;}
 case 3: 
 var $31=$1;
 var $32=(($31+88)|0);
 var $33=(($32+16)|0);
 _lzma_state_short_rep($33);
 var $34=$1;
 var $35=(($34+88)|0);
 var $36=(($35+20)|0);
 HEAP32[(($36)>>2)]=1;
 label=13;break;
 case 4: 
 label=12;break;
 case 5: 
 var $39=$1;
 var $40=(($39)|0);
 var $41=$1;
 var $42=(($41+88)|0);
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$1;
 var $46=(($45+88)|0);
 var $47=(($46+468)|0);
 var $48=(($47+($44<<1))|0);
 var $49=_rc_bit($40,$48);
 var $50=($49|0)!=0;
 if($50){label=7;break;}else{label=6;break;}
 case 6: 
 var $52=$1;
 var $53=(($52+88)|0);
 var $54=(($53+4)|0);
 var $55=HEAP32[(($54)>>2)];
 $tmp=$55;
 label=11;break;
 case 7: 
 var $57=$1;
 var $58=(($57)|0);
 var $59=$1;
 var $60=(($59+88)|0);
 var $61=(($60+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$1;
 var $64=(($63+88)|0);
 var $65=(($64+492)|0);
 var $66=(($65+($62<<1))|0);
 var $67=_rc_bit($58,$66);
 var $68=($67|0)!=0;
 if($68){label=9;break;}else{label=8;break;}
 case 8: 
 var $70=$1;
 var $71=(($70+88)|0);
 var $72=(($71+8)|0);
 var $73=HEAP32[(($72)>>2)];
 $tmp=$73;
 label=10;break;
 case 9: 
 var $75=$1;
 var $76=(($75+88)|0);
 var $77=(($76+12)|0);
 var $78=HEAP32[(($77)>>2)];
 $tmp=$78;
 var $79=$1;
 var $80=(($79+88)|0);
 var $81=(($80+8)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$1;
 var $84=(($83+88)|0);
 var $85=(($84+12)|0);
 HEAP32[(($85)>>2)]=$82;
 label=10;break;
 case 10: 
 var $87=$1;
 var $88=(($87+88)|0);
 var $89=(($88+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$1;
 var $92=(($91+88)|0);
 var $93=(($92+8)|0);
 HEAP32[(($93)>>2)]=$90;
 label=11;break;
 case 11: 
 var $95=$1;
 var $96=(($95+88)|0);
 var $97=(($96)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$1;
 var $100=(($99+88)|0);
 var $101=(($100+4)|0);
 HEAP32[(($101)>>2)]=$98;
 var $102=$tmp;
 var $103=$1;
 var $104=(($103+88)|0);
 var $105=(($104)|0);
 HEAP32[(($105)>>2)]=$102;
 label=12;break;
 case 12: 
 var $107=$1;
 var $108=(($107+88)|0);
 var $109=(($108+16)|0);
 _lzma_state_long_rep($109);
 var $110=$1;
 var $111=$1;
 var $112=(($111+88)|0);
 var $113=(($112+2700)|0);
 var $114=$2;
 _lzma_len($110,$113,$114);
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_match($s,$pos_state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $probs;
 var $dist_slot;
 var $limit;
 $1=$s;
 $2=$pos_state;
 var $3=$1;
 var $4=(($3+88)|0);
 var $5=(($4+16)|0);
 _lzma_state_match($5);
 var $6=$1;
 var $7=(($6+88)|0);
 var $8=(($7+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$1;
 var $11=(($10+88)|0);
 var $12=(($11+12)|0);
 HEAP32[(($12)>>2)]=$9;
 var $13=$1;
 var $14=(($13+88)|0);
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$1;
 var $18=(($17+88)|0);
 var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=$16;
 var $20=$1;
 var $21=(($20+88)|0);
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$1;
 var $25=(($24+88)|0);
 var $26=(($25+4)|0);
 HEAP32[(($26)>>2)]=$23;
 var $27=$1;
 var $28=$1;
 var $29=(($28+88)|0);
 var $30=(($29+1672)|0);
 var $31=$2;
 _lzma_len($27,$30,$31);
 var $32=$1;
 var $33=(($32+88)|0);
 var $34=(($33+20)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=_lzma_get_dist_state($35);
 var $37=$1;
 var $38=(($37+88)|0);
 var $39=(($38+900)|0);
 var $40=(($39+($36<<7))|0);
 var $41=(($40)|0);
 $probs=$41;
 var $42=$1;
 var $43=(($42)|0);
 var $44=$probs;
 var $45=_rc_bittree($43,$44,64);
 var $46=((($45)-(64))|0);
 $dist_slot=$46;
 var $47=$dist_slot;
 var $48=($47>>>0)<4;
 if($48){label=2;break;}else{label=3;break;}
 case 2: 
 var $50=$dist_slot;
 var $51=$1;
 var $52=(($51+88)|0);
 var $53=(($52)|0);
 HEAP32[(($53)>>2)]=$50;
 label=7;break;
 case 3: 
 var $55=$dist_slot;
 var $56=$55>>>1;
 var $57=((($56)-(1))|0);
 $limit=$57;
 var $58=$dist_slot;
 var $59=$58&1;
 var $60=((($59)+(2))|0);
 var $61=$1;
 var $62=(($61+88)|0);
 var $63=(($62)|0);
 HEAP32[(($63)>>2)]=$60;
 var $64=$dist_slot;
 var $65=($64>>>0)<14;
 if($65){label=4;break;}else{label=5;break;}
 case 4: 
 var $67=$limit;
 var $68=$1;
 var $69=(($68+88)|0);
 var $70=(($69)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$71<<$67;
 HEAP32[(($70)>>2)]=$72;
 var $73=$1;
 var $74=(($73+88)|0);
 var $75=(($74+1412)|0);
 var $76=(($75)|0);
 var $77=$1;
 var $78=(($77+88)|0);
 var $79=(($78)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($76+($80<<1))|0);
 var $82=$dist_slot;
 var $83=(((-$82))|0);
 var $84=(($81+($83<<1))|0);
 var $85=((($84)-(2))|0);
 $probs=$85;
 var $86=$1;
 var $87=(($86)|0);
 var $88=$probs;
 var $89=$1;
 var $90=(($89+88)|0);
 var $91=(($90)|0);
 var $92=$limit;
 _rc_bittree_reverse($87,$88,$91,$92);
 label=6;break;
 case 5: 
 var $94=$1;
 var $95=(($94)|0);
 var $96=$1;
 var $97=(($96+88)|0);
 var $98=(($97)|0);
 var $99=$limit;
 var $100=((($99)-(4))|0);
 _rc_direct($95,$98,$100);
 var $101=$1;
 var $102=(($101+88)|0);
 var $103=(($102)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=$104<<4;
 HEAP32[(($103)>>2)]=$105;
 var $106=$1;
 var $107=(($106)|0);
 var $108=$1;
 var $109=(($108+88)|0);
 var $110=(($109+1640)|0);
 var $111=(($110)|0);
 var $112=$1;
 var $113=(($112+88)|0);
 var $114=(($113)|0);
 _rc_bittree_reverse($107,$111,$114,4);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _rc_normalize($rc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$rc;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4>>>0)<16777216;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9<<8;
 HEAP32[(($8)>>2)]=$10;
 var $11=$1;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13<<8;
 var $15=$1;
 var $16=(($15+16)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=((($17)+(1))|0);
 HEAP32[(($16)>>2)]=$18;
 var $19=$1;
 var $20=(($19+12)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+$17)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=((($14)+($24))|0);
 var $26=$1;
 var $27=(($26+4)|0);
 HEAP32[(($27)>>2)]=$25;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_state_match($state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$state;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3>>>0)<7;
 var $5=($4?7:10);
 var $6=$1;
 HEAP32[(($6)>>2)]=$5;
 STACKTOP=sp;return;
}
function _lzma_len($s,$l,$pos_state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $probs;
 var $limit;
 $1=$s;
 $2=$l;
 $3=$pos_state;
 var $4=$1;
 var $5=(($4)|0);
 var $6=$2;
 var $7=(($6)|0);
 var $8=_rc_bit($5,$7);
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$3;
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=(($13+($11<<4))|0);
 var $15=(($14)|0);
 $probs=$15;
 $limit=8;
 var $16=$1;
 var $17=(($16+88)|0);
 var $18=(($17+20)|0);
 HEAP32[(($18)>>2)]=2;
 label=7;break;
 case 3: 
 var $20=$1;
 var $21=(($20)|0);
 var $22=$2;
 var $23=(($22+2)|0);
 var $24=_rc_bit($21,$23);
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=4;break;}
 case 4: 
 var $27=$3;
 var $28=$2;
 var $29=(($28+260)|0);
 var $30=(($29+($27<<4))|0);
 var $31=(($30)|0);
 $probs=$31;
 $limit=8;
 var $32=$1;
 var $33=(($32+88)|0);
 var $34=(($33+20)|0);
 HEAP32[(($34)>>2)]=10;
 label=6;break;
 case 5: 
 var $36=$2;
 var $37=(($36+516)|0);
 var $38=(($37)|0);
 $probs=$38;
 $limit=256;
 var $39=$1;
 var $40=(($39+88)|0);
 var $41=(($40+20)|0);
 HEAP32[(($41)>>2)]=18;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $44=$1;
 var $45=(($44)|0);
 var $46=$probs;
 var $47=$limit;
 var $48=_rc_bittree($45,$46,$47);
 var $49=$limit;
 var $50=((($48)-($49))|0);
 var $51=$1;
 var $52=(($51+88)|0);
 var $53=(($52+20)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=((($54)+($50))|0);
 HEAP32[(($53)>>2)]=$55;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_get_dist_state($len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$len;
 var $2=$1;
 var $3=($2>>>0)<6;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$1;
 var $6=((($5)-(2))|0);
 var $9=$6;label=4;break;
 case 3: 
 var $9=3;label=4;break;
 case 4: 
 var $9;
 STACKTOP=sp;return $9;
  default: assert(0, "bad label: " + label);
 }
}
function _rc_bittree($rc,$probs,$limit){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $symbol;
 $1=$rc;
 $2=$probs;
 $3=$limit;
 $symbol=1;
 label=2;break;
 case 2: 
 var $5=$1;
 var $6=$symbol;
 var $7=$2;
 var $8=(($7+($6<<1))|0);
 var $9=_rc_bit($5,$8);
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=$symbol;
 var $13=$12<<1;
 var $14=((($13)+(1))|0);
 $symbol=$14;
 label=5;break;
 case 4: 
 var $16=$symbol;
 var $17=$16<<1;
 $symbol=$17;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $20=$symbol;
 var $21=$3;
 var $22=($20>>>0)<($21>>>0);
 if($22){label=2;break;}else{label=7;break;}
 case 7: 
 var $24=$symbol;
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _rc_bittree_reverse($rc,$probs,$dest,$limit){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $symbol;
 var $i;
 $1=$rc;
 $2=$probs;
 $3=$dest;
 $4=$limit;
 $symbol=1;
 $i=0;
 label=2;break;
 case 2: 
 var $6=$1;
 var $7=$symbol;
 var $8=$2;
 var $9=(($8+($7<<1))|0);
 var $10=_rc_bit($6,$9);
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=$symbol;
 var $14=$13<<1;
 var $15=((($14)+(1))|0);
 $symbol=$15;
 var $16=$i;
 var $17=1<<$16;
 var $18=$3;
 var $19=HEAP32[(($18)>>2)];
 var $20=((($19)+($17))|0);
 HEAP32[(($18)>>2)]=$20;
 label=5;break;
 case 4: 
 var $22=$symbol;
 var $23=$22<<1;
 $symbol=$23;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $26=$i;
 var $27=((($26)+(1))|0);
 $i=$27;
 var $28=$4;
 var $29=($27>>>0)<($28>>>0);
 if($29){label=2;break;}else{label=7;break;}
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _rc_direct($rc,$dest,$limit){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $mask;
 $1=$rc;
 $2=$dest;
 $3=$limit;
 label=2;break;
 case 2: 
 var $5=$1;
 _rc_normalize($5);
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8>>>1;
 HEAP32[(($7)>>2)]=$9;
 var $10=$1;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$1;
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=((($15)-($12))|0);
 HEAP32[(($14)>>2)]=$16;
 var $17=$1;
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19>>>31;
 var $21=(((-$20))|0);
 $mask=$21;
 var $22=$1;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$mask;
 var $26=$24&$25;
 var $27=$1;
 var $28=(($27+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)+($26))|0);
 HEAP32[(($28)>>2)]=$30;
 var $31=$2;
 var $32=HEAP32[(($31)>>2)];
 var $33=$32<<1;
 var $34=$mask;
 var $35=((($34)+(1))|0);
 var $36=((($33)+($35))|0);
 var $37=$2;
 HEAP32[(($37)>>2)]=$36;
 label=3;break;
 case 3: 
 var $39=$3;
 var $40=((($39)-(1))|0);
 $3=$40;
 var $41=($40>>>0)>0;
 if($41){label=2;break;}else{label=4;break;}
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_state_short_rep($state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$state;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3>>>0)<7;
 var $5=($4?9:11);
 var $6=$1;
 HEAP32[(($6)>>2)]=$5;
 STACKTOP=sp;return;
}
function _lzma_state_long_rep($state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$state;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3>>>0)<7;
 var $5=($4?8:11);
 var $6=$1;
 HEAP32[(($6)>>2)]=$5;
 STACKTOP=sp;return;
}
function _lzma_literal_probs($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $prev_byte;
 var $low;
 var $high;
 $1=$s;
 var $2=$1;
 var $3=(($2+24)|0);
 var $4=_dict_get($3,0);
 $prev_byte=$4;
 var $5=$prev_byte;
 var $6=$1;
 var $7=(($6+88)|0);
 var $8=(($7+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(((8)-($9))|0);
 var $11=$5>>>($10>>>0);
 $low=$11;
 var $12=$1;
 var $13=(($12+24)|0);
 var $14=(($13+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$1;
 var $17=(($16+88)|0);
 var $18=(($17+28)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$15&$19;
 var $21=$1;
 var $22=(($21+88)|0);
 var $23=(($22+24)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$20<<$24;
 $high=$25;
 var $26=$low;
 var $27=$high;
 var $28=((($26)+($27))|0);
 var $29=$1;
 var $30=(($29+88)|0);
 var $31=(($30+3728)|0);
 var $32=(($31+((($28)*(1536))&-1))|0);
 var $33=(($32)|0);
 STACKTOP=sp;return $33;
}
function _lzma_state_is_literal($state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$state;
 var $2=$1;
 var $3=($2>>>0)<7;
 var $4=($3&1);
 STACKTOP=sp;return $4;
}
function _dict_get($dict,$dist){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $offset;
 $1=$dict;
 $2=$dist;
 var $3=$1;
 var $4=(($3+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=((($5)-($6))|0);
 var $8=((($7)-(1))|0);
 $offset=$8;
 var $9=$2;
 var $10=$1;
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9>>>0)>=($12>>>0);
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$1;
 var $16=(($15+20)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$offset;
 var $19=((($18)+($17))|0);
 $offset=$19;
 label=3;break;
 case 3: 
 var $21=$1;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23>>>0)>0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=$offset;
 var $27=$1;
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+$26)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $35=$32;label=6;break;
 case 5: 
 var $35=0;label=6;break;
 case 6: 
 var $35;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }
}
function _dict_put($dict,$byte){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$dict;
 $2=$byte;
 var $3=$2;
 var $4=$1;
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+(1))|0);
 HEAP32[(($5)>>2)]=$7;
 var $8=$1;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+$6)|0);
 HEAP8[($11)]=$3;
 var $12=$1;
 var $13=(($12+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$1;
 var $16=(($15+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($14>>>0)<($17>>>0);
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 var $20=$1;
 var $21=(($20+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$1;
 var $24=(($23+12)|0);
 HEAP32[(($24)>>2)]=$22;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _lzma_state_literal($state){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$state;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3>>>0)<=3;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 HEAP32[(($6)>>2)]=0;
 label=7;break;
 case 3: 
 var $8=$1;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9>>>0)<=9;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$1;
 var $13=HEAP32[(($12)>>2)];
 var $14=((($13)-(3))|0);
 HEAP32[(($12)>>2)]=$14;
 label=6;break;
 case 5: 
 var $16=$1;
 var $17=HEAP32[(($16)>>2)];
 var $18=((($17)-(6))|0);
 HEAP32[(($16)>>2)]=$18;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_8bit_linear($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 label=2;break;
 case 2: 
 var $17=$3;
 var $18=((($17)-(1))|0);
 $3=$18;
 var $19=($17|0)!=0;
 if($19){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $22=$pos;
 var $23=$sptr;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24);
 $smp_l1=$26;
 var $27=$pos;
 var $28=((($27)+(1))|0);
 var $29=$sptr;
 var $30=(($29+$28)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24);
 var $33=$smp_l1;
 var $34=((($32)-($33))|0);
 $smp_dt=$34;
 var $35=$smp_l1;
 var $36=$frac;
 var $37=$smp_dt;
 var $38=(Math_imul($36,$37)|0);
 var $39=$38>>16;
 var $40=((($35)+($39))|0);
 $smp_in=$40;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $43=$1;
 var $44=(($43+108)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)!=0;
 if($46){label=7;break;}else{label=8;break;}
 case 7: 
 var $48=$1;
 var $49=(($48+108)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(((16)-($50))|0);
 $a=$51;
 var $52=$smp_in;
 var $53=$5;
 var $54=(Math_imul($52,$53)|0);
 var $55=$a;
 var $56=(Math_imul($54,$55)|0);
 var $57=$56>>4;
 var $58=$2;
 var $59=(($58+4)|0);
 $2=$59;
 var $60=HEAP32[(($58)>>2)];
 var $61=((($60)+($57))|0);
 HEAP32[(($58)>>2)]=$61;
 var $62=$smp_in;
 var $63=$4;
 var $64=(Math_imul($62,$63)|0);
 var $65=$a;
 var $66=(Math_imul($64,$65)|0);
 var $67=$66>>4;
 var $68=$2;
 var $69=(($68+4)|0);
 $2=$69;
 var $70=HEAP32[(($68)>>2)];
 var $71=((($70)+($67))|0);
 HEAP32[(($68)>>2)]=$71;
 var $72=$1;
 var $73=(($72+108)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=((($74)-(1))|0);
 HEAP32[(($73)>>2)]=$75;
 label=9;break;
 case 8: 
 var $77=$smp_in;
 var $78=$5;
 var $79=(Math_imul($77,$78)|0);
 var $80=$2;
 var $81=(($80+4)|0);
 $2=$81;
 var $82=HEAP32[(($80)>>2)];
 var $83=((($82)+($79))|0);
 HEAP32[(($80)>>2)]=$83;
 var $84=$smp_in;
 var $85=$4;
 var $86=(Math_imul($84,$85)|0);
 var $87=$2;
 var $88=(($87+4)|0);
 $2=$88;
 var $89=HEAP32[(($87)>>2)];
 var $90=((($89)+($86))|0);
 HEAP32[(($87)>>2)]=$90;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $94=$6;
 var $95=$frac;
 var $96=((($95)+($94))|0);
 $frac=$96;
 var $97=$frac;
 var $98=$97>>16;
 var $99=$pos;
 var $100=((($99)+($98))|0);
 $pos=$100;
 var $101=$frac;
 var $102=$101&65535;
 $frac=$102;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_16bit_linear($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$4;
 var $18=$17>>8;
 $4=$18;
 var $19=$5;
 var $20=$19>>8;
 $5=$20;
 label=2;break;
 case 2: 
 var $22=$3;
 var $23=((($22)-(1))|0);
 $3=$23;
 var $24=($22|0)!=0;
 if($24){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $27=$pos;
 var $28=$sptr;
 var $29=(($28+($27<<1))|0);
 var $30=HEAP16[(($29)>>1)];
 var $31=(($30<<16)>>16);
 $smp_l1=$31;
 var $32=$pos;
 var $33=((($32)+(1))|0);
 var $34=$sptr;
 var $35=(($34+($33<<1))|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=(($36<<16)>>16);
 var $38=$smp_l1;
 var $39=((($37)-($38))|0);
 $smp_dt=$39;
 var $40=$smp_l1;
 var $41=$frac;
 var $42=$smp_dt;
 var $43=(Math_imul($41,$42)|0);
 var $44=$43>>16;
 var $45=((($40)+($44))|0);
 $smp_in=$45;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $48=$1;
 var $49=(($48+108)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)!=0;
 if($51){label=7;break;}else{label=8;break;}
 case 7: 
 var $53=$1;
 var $54=(($53+108)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(((16)-($55))|0);
 $a=$56;
 var $57=$smp_in;
 var $58=$5;
 var $59=(Math_imul($57,$58)|0);
 var $60=$a;
 var $61=(Math_imul($59,$60)|0);
 var $62=$61>>4;
 var $63=$2;
 var $64=(($63+4)|0);
 $2=$64;
 var $65=HEAP32[(($63)>>2)];
 var $66=((($65)+($62))|0);
 HEAP32[(($63)>>2)]=$66;
 var $67=$smp_in;
 var $68=$4;
 var $69=(Math_imul($67,$68)|0);
 var $70=$a;
 var $71=(Math_imul($69,$70)|0);
 var $72=$71>>4;
 var $73=$2;
 var $74=(($73+4)|0);
 $2=$74;
 var $75=HEAP32[(($73)>>2)];
 var $76=((($75)+($72))|0);
 HEAP32[(($73)>>2)]=$76;
 var $77=$1;
 var $78=(($77+108)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=((($79)-(1))|0);
 HEAP32[(($78)>>2)]=$80;
 label=9;break;
 case 8: 
 var $82=$smp_in;
 var $83=$5;
 var $84=(Math_imul($82,$83)|0);
 var $85=$2;
 var $86=(($85+4)|0);
 $2=$86;
 var $87=HEAP32[(($85)>>2)];
 var $88=((($87)+($84))|0);
 HEAP32[(($85)>>2)]=$88;
 var $89=$smp_in;
 var $90=$4;
 var $91=(Math_imul($89,$90)|0);
 var $92=$2;
 var $93=(($92+4)|0);
 $2=$93;
 var $94=HEAP32[(($92)>>2)];
 var $95=((($94)+($91))|0);
 HEAP32[(($92)>>2)]=$95;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $99=$6;
 var $100=$frac;
 var $101=((($100)+($99))|0);
 $frac=$101;
 var $102=$frac;
 var $103=$102>>16;
 var $104=$pos;
 var $105=((($104)+($103))|0);
 $pos=$105;
 var $106=$frac;
 var $107=$106&65535;
 $frac=$107;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_8bit_nearest($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 label=2;break;
 case 2: 
 var $17=$3;
 var $18=((($17)-(1))|0);
 $3=$18;
 var $19=($17|0)!=0;
 if($19){label=3;break;}else{label=10;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $22=$pos;
 var $23=$sptr;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24);
 $smp_in=$26;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $29=$smp_in;
 var $30=$5;
 var $31=(Math_imul($29,$30)|0);
 var $32=$2;
 var $33=(($32+4)|0);
 $2=$33;
 var $34=HEAP32[(($32)>>2)];
 var $35=((($34)+($31))|0);
 HEAP32[(($32)>>2)]=$35;
 var $36=$smp_in;
 var $37=$4;
 var $38=(Math_imul($36,$37)|0);
 var $39=$2;
 var $40=(($39+4)|0);
 $2=$40;
 var $41=HEAP32[(($39)>>2)];
 var $42=((($41)+($38))|0);
 HEAP32[(($39)>>2)]=$42;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $45=$6;
 var $46=$frac;
 var $47=((($46)+($45))|0);
 $frac=$47;
 var $48=$frac;
 var $49=$48>>16;
 var $50=$pos;
 var $51=((($50)+($49))|0);
 $pos=$51;
 var $52=$frac;
 var $53=$52&65535;
 $frac=$53;
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_16bit_nearest($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$4;
 var $18=$17>>8;
 $4=$18;
 var $19=$5;
 var $20=$19>>8;
 $5=$20;
 label=2;break;
 case 2: 
 var $22=$3;
 var $23=((($22)-(1))|0);
 $3=$23;
 var $24=($22|0)!=0;
 if($24){label=3;break;}else{label=10;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $27=$pos;
 var $28=$sptr;
 var $29=(($28+($27<<1))|0);
 var $30=HEAP16[(($29)>>1)];
 var $31=(($30<<16)>>16);
 $smp_in=$31;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $34=$smp_in;
 var $35=$5;
 var $36=(Math_imul($34,$35)|0);
 var $37=$2;
 var $38=(($37+4)|0);
 $2=$38;
 var $39=HEAP32[(($37)>>2)];
 var $40=((($39)+($36))|0);
 HEAP32[(($37)>>2)]=$40;
 var $41=$smp_in;
 var $42=$4;
 var $43=(Math_imul($41,$42)|0);
 var $44=$2;
 var $45=(($44+4)|0);
 $2=$45;
 var $46=HEAP32[(($44)>>2)];
 var $47=((($46)+($43))|0);
 HEAP32[(($44)>>2)]=$47;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $50=$6;
 var $51=$frac;
 var $52=((($51)+($50))|0);
 $frac=$52;
 var $53=$frac;
 var $54=$53>>16;
 var $55=$pos;
 var $56=((($55)+($54))|0);
 $pos=$56;
 var $57=$frac;
 var $58=$57&65535;
 $frac=$58;
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_8bit_linear($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 label=2;break;
 case 2: 
 var $17=$3;
 var $18=((($17)-(1))|0);
 $3=$18;
 var $19=($17|0)!=0;
 if($19){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $22=$pos;
 var $23=$sptr;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24);
 $smp_l1=$26;
 var $27=$pos;
 var $28=((($27)+(1))|0);
 var $29=$sptr;
 var $30=(($29+$28)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24);
 var $33=$smp_l1;
 var $34=((($32)-($33))|0);
 $smp_dt=$34;
 var $35=$smp_l1;
 var $36=$frac;
 var $37=$smp_dt;
 var $38=(Math_imul($36,$37)|0);
 var $39=$38>>16;
 var $40=((($35)+($39))|0);
 $smp_in=$40;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $43=$1;
 var $44=(($43+108)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)!=0;
 if($46){label=7;break;}else{label=8;break;}
 case 7: 
 var $48=$smp_in;
 var $49=$4;
 var $50=(Math_imul($48,$49)|0);
 var $51=$1;
 var $52=(($51+108)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(((16)-($53))|0);
 var $55=(Math_imul($50,$54)|0);
 var $56=$55>>4;
 var $57=$2;
 var $58=(($57+4)|0);
 $2=$58;
 var $59=HEAP32[(($57)>>2)];
 var $60=((($59)+($56))|0);
 HEAP32[(($57)>>2)]=$60;
 var $61=$1;
 var $62=(($61+108)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=((($63)-(1))|0);
 HEAP32[(($62)>>2)]=$64;
 label=9;break;
 case 8: 
 var $66=$smp_in;
 var $67=$4;
 var $68=(Math_imul($66,$67)|0);
 var $69=$2;
 var $70=(($69+4)|0);
 $2=$70;
 var $71=HEAP32[(($69)>>2)];
 var $72=((($71)+($68))|0);
 HEAP32[(($69)>>2)]=$72;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $76=$6;
 var $77=$frac;
 var $78=((($77)+($76))|0);
 $frac=$78;
 var $79=$frac;
 var $80=$79>>16;
 var $81=$pos;
 var $82=((($81)+($80))|0);
 $pos=$82;
 var $83=$frac;
 var $84=$83&65535;
 $frac=$84;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_16bit_linear($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$4;
 var $18=$17>>8;
 $4=$18;
 label=2;break;
 case 2: 
 var $20=$3;
 var $21=((($20)-(1))|0);
 $3=$21;
 var $22=($20|0)!=0;
 if($22){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $25=$pos;
 var $26=$sptr;
 var $27=(($26+($25<<1))|0);
 var $28=HEAP16[(($27)>>1)];
 var $29=(($28<<16)>>16);
 $smp_l1=$29;
 var $30=$pos;
 var $31=((($30)+(1))|0);
 var $32=$sptr;
 var $33=(($32+($31<<1))|0);
 var $34=HEAP16[(($33)>>1)];
 var $35=(($34<<16)>>16);
 var $36=$smp_l1;
 var $37=((($35)-($36))|0);
 $smp_dt=$37;
 var $38=$smp_l1;
 var $39=$frac;
 var $40=$smp_dt;
 var $41=(Math_imul($39,$40)|0);
 var $42=$41>>16;
 var $43=((($38)+($42))|0);
 $smp_in=$43;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $46=$1;
 var $47=(($46+108)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)!=0;
 if($49){label=7;break;}else{label=8;break;}
 case 7: 
 var $51=$smp_in;
 var $52=$4;
 var $53=(Math_imul($51,$52)|0);
 var $54=$1;
 var $55=(($54+108)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(((16)-($56))|0);
 var $58=(Math_imul($53,$57)|0);
 var $59=$58>>4;
 var $60=$2;
 var $61=(($60+4)|0);
 $2=$61;
 var $62=HEAP32[(($60)>>2)];
 var $63=((($62)+($59))|0);
 HEAP32[(($60)>>2)]=$63;
 var $64=$1;
 var $65=(($64+108)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=((($66)-(1))|0);
 HEAP32[(($65)>>2)]=$67;
 label=9;break;
 case 8: 
 var $69=$smp_in;
 var $70=$4;
 var $71=(Math_imul($69,$70)|0);
 var $72=$2;
 var $73=(($72+4)|0);
 $2=$73;
 var $74=HEAP32[(($72)>>2)];
 var $75=((($74)+($71))|0);
 HEAP32[(($72)>>2)]=$75;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $79=$6;
 var $80=$frac;
 var $81=((($80)+($79))|0);
 $frac=$81;
 var $82=$frac;
 var $83=$82>>16;
 var $84=$pos;
 var $85=((($84)+($83))|0);
 $pos=$85;
 var $86=$frac;
 var $87=$86&65535;
 $frac=$87;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_8bit_nearest($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 label=2;break;
 case 2: 
 var $17=$3;
 var $18=((($17)-(1))|0);
 $3=$18;
 var $19=($17|0)!=0;
 if($19){label=3;break;}else{label=10;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $22=$pos;
 var $23=$sptr;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24);
 $smp_in=$26;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $29=$smp_in;
 var $30=$4;
 var $31=(Math_imul($29,$30)|0);
 var $32=$2;
 var $33=(($32+4)|0);
 $2=$33;
 var $34=HEAP32[(($32)>>2)];
 var $35=((($34)+($31))|0);
 HEAP32[(($32)>>2)]=$35;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $38=$6;
 var $39=$frac;
 var $40=((($39)+($38))|0);
 $frac=$40;
 var $41=$frac;
 var $42=$41>>16;
 var $43=$pos;
 var $44=((($43)+($42))|0);
 $pos=$44;
 var $45=$frac;
 var $46=$45&65535;
 $frac=$46;
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_16bit_nearest($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$4;
 var $18=$17>>8;
 $4=$18;
 label=2;break;
 case 2: 
 var $20=$3;
 var $21=((($20)-(1))|0);
 $3=$21;
 var $22=($20|0)!=0;
 if($22){label=3;break;}else{label=10;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $25=$pos;
 var $26=$sptr;
 var $27=(($26+($25<<1))|0);
 var $28=HEAP16[(($27)>>1)];
 var $29=(($28<<16)>>16);
 $smp_in=$29;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $32=$smp_in;
 var $33=$4;
 var $34=(Math_imul($32,$33)|0);
 var $35=$2;
 var $36=(($35+4)|0);
 $2=$36;
 var $37=HEAP32[(($35)>>2)];
 var $38=((($37)+($34))|0);
 HEAP32[(($35)>>2)]=$38;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $41=$6;
 var $42=$frac;
 var $43=((($42)+($41))|0);
 $frac=$43;
 var $44=$frac;
 var $45=$44>>16;
 var $46=$pos;
 var $47=((($46)+($45))|0);
 $pos=$47;
 var $48=$frac;
 var $49=$48&65535;
 $frac=$49;
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_8bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 var $fr1;
 var $fr2;
 var $sr;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 var $16=$1;
 var $17=(($16+72)|0);
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 $fl1=$19;
 var $20=$1;
 var $21=(($20+72)|0);
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 $fl2=$23;
 var $24=$1;
 var $25=(($24+72)|0);
 var $26=(($25+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28$0=$27;
 var $28$1=((((($27|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$28$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$28$1;
 var $29=$1;
 var $30=(($29+72)|0);
 var $31=(($30+20)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33$0=$32;
 var $33$1=((((($32|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$33$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$33$1;
 var $34=$1;
 var $35=(($34+72)|0);
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38$0=$37;
 var $38$1=((((($37|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$38$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$38$1;
 var $39=$1;
 var $40=(($39+72)|0);
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 $fr1=$42;
 var $43=$1;
 var $44=(($43+72)|0);
 var $45=(($44+4)|0);
 var $46=HEAP32[(($45)>>2)];
 $fr2=$46;
 label=2;break;
 case 2: 
 var $48=$3;
 var $49=((($48)-(1))|0);
 $3=$49;
 var $50=($48|0)!=0;
 if($50){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $53=$pos;
 var $54=$sptr;
 var $55=(($54+$53)|0);
 var $56=HEAP8[($55)];
 var $57=(($56<<24)>>24);
 $smp_l1=$57;
 var $58=$pos;
 var $59=((($58)+(1))|0);
 var $60=$sptr;
 var $61=(($60+$59)|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24);
 var $64=$smp_l1;
 var $65=((($63)-($64))|0);
 $smp_dt=$65;
 var $66=$smp_l1;
 var $67=$frac;
 var $68=$smp_dt;
 var $69=(Math_imul($67,$68)|0);
 var $70=$69>>16;
 var $71=((($66)+($70))|0);
 $smp_in=$71;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $74$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $74$1=HEAP32[(($ld$7$1)>>2)];
 var $75=$smp_in;
 var $76$0=$75;
 var $76$1=((((($75|0)<0))|0)?-1:0);
 var $77$0=___muldi3($74$0,$74$1,$76$0,$76$1);var $77$1=tempRet0;
 var $78=$5;
 var $79$0=$78;
 var $79$1=((((($78|0)<0))|0)?-1:0);
 var $80$0=___muldi3($77$0,$77$1,$79$0,$79$1);var $80$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $81$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $81$1=HEAP32[(($ld$9$1)>>2)];
 var $82=$fr1;
 var $83$0=$82;
 var $83$1=((((($82|0)<0))|0)?-1:0);
 var $84$0=___muldi3($81$0,$81$1,$83$0,$83$1);var $84$1=tempRet0;
 var $85$0=_i64Add($80$0,$80$1,$84$0,$84$1);var $85$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $86$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $86$1=HEAP32[(($ld$11$1)>>2)];
 var $87=$fr2;
 var $88$0=$87;
 var $88$1=((((($87|0)<0))|0)?-1:0);
 var $89$0=___muldi3($86$0,$86$1,$88$0,$88$1);var $89$1=tempRet0;
 var $90$0=_i64Add($85$0,$85$1,$89$0,$89$1);var $90$1=tempRet0;
 var $91$0=($90$0>>>16)|($90$1<<16);
 var $91$1=($90$1>>16)|((((((($90$1|0)<0))|0)?-1:0))<<16);
 var $92$0=$91$0;
 var $92=$92$0;
 $sr=$92;
 var $93=$fr1;
 $fr2=$93;
 var $94=$sr;
 $fr1=$94;
 var $ld$12$0=(($a0)|0);
 var $95$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($a0+4)|0);
 var $95$1=HEAP32[(($ld$13$1)>>2)];
 var $96=$smp_in;
 var $97$0=$96;
 var $97$1=((((($96|0)<0))|0)?-1:0);
 var $98$0=___muldi3($95$0,$95$1,$97$0,$97$1);var $98$1=tempRet0;
 var $99=$4;
 var $100$0=$99;
 var $100$1=((((($99|0)<0))|0)?-1:0);
 var $101$0=___muldi3($98$0,$98$1,$100$0,$100$1);var $101$1=tempRet0;
 var $ld$14$0=(($b0)|0);
 var $102$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($b0+4)|0);
 var $102$1=HEAP32[(($ld$15$1)>>2)];
 var $103=$fl1;
 var $104$0=$103;
 var $104$1=((((($103|0)<0))|0)?-1:0);
 var $105$0=___muldi3($102$0,$102$1,$104$0,$104$1);var $105$1=tempRet0;
 var $106$0=_i64Add($101$0,$101$1,$105$0,$105$1);var $106$1=tempRet0;
 var $ld$16$0=(($b1)|0);
 var $107$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($b1+4)|0);
 var $107$1=HEAP32[(($ld$17$1)>>2)];
 var $108=$fl2;
 var $109$0=$108;
 var $109$1=((((($108|0)<0))|0)?-1:0);
 var $110$0=___muldi3($107$0,$107$1,$109$0,$109$1);var $110$1=tempRet0;
 var $111$0=_i64Add($106$0,$106$1,$110$0,$110$1);var $111$1=tempRet0;
 var $112$0=($111$0>>>16)|($111$1<<16);
 var $112$1=($111$1>>16)|((((((($111$1|0)<0))|0)?-1:0))<<16);
 var $113$0=$112$0;
 var $113=$113$0;
 $sl=$113;
 var $114=$fl1;
 $fl2=$114;
 var $115=$sl;
 $fl1=$115;
 var $116=$1;
 var $117=(($116+108)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=($118|0)!=0;
 if($119){label=7;break;}else{label=8;break;}
 case 7: 
 var $121=$1;
 var $122=(($121+108)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(((16)-($123))|0);
 $a=$124;
 var $125=$sr;
 var $126=$a;
 var $127=(Math_imul($125,$126)|0);
 var $128=$127>>4;
 var $129=$2;
 var $130=(($129+4)|0);
 $2=$130;
 var $131=HEAP32[(($129)>>2)];
 var $132=((($131)+($128))|0);
 HEAP32[(($129)>>2)]=$132;
 var $133=$sl;
 var $134=$a;
 var $135=(Math_imul($133,$134)|0);
 var $136=$135>>4;
 var $137=$2;
 var $138=(($137+4)|0);
 $2=$138;
 var $139=HEAP32[(($137)>>2)];
 var $140=((($139)+($136))|0);
 HEAP32[(($137)>>2)]=$140;
 var $141=$1;
 var $142=(($141+108)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=((($143)-(1))|0);
 HEAP32[(($142)>>2)]=$144;
 label=9;break;
 case 8: 
 var $146=$sr;
 var $147=$2;
 var $148=(($147+4)|0);
 $2=$148;
 var $149=HEAP32[(($147)>>2)];
 var $150=((($149)+($146))|0);
 HEAP32[(($147)>>2)]=$150;
 var $151=$sl;
 var $152=$2;
 var $153=(($152+4)|0);
 $2=$153;
 var $154=HEAP32[(($152)>>2)];
 var $155=((($154)+($151))|0);
 HEAP32[(($152)>>2)]=$155;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $159=$6;
 var $160=$frac;
 var $161=((($160)+($159))|0);
 $frac=$161;
 var $162=$frac;
 var $163=$162>>16;
 var $164=$pos;
 var $165=((($164)+($163))|0);
 $pos=$165;
 var $166=$frac;
 var $167=$166&65535;
 $frac=$167;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $172=$fl1;
 var $173=$1;
 var $174=(($173+72)|0);
 var $175=(($174+8)|0);
 HEAP32[(($175)>>2)]=$172;
 var $176=$fl2;
 var $177=$1;
 var $178=(($177+72)|0);
 var $179=(($178+12)|0);
 HEAP32[(($179)>>2)]=$176;
 label=16;break;
 case 16: 
 var $181=$fr1;
 var $182=$1;
 var $183=(($182+72)|0);
 var $184=(($183)|0);
 HEAP32[(($184)>>2)]=$181;
 var $185=$fr2;
 var $186=$1;
 var $187=(($186+72)|0);
 var $188=(($187+4)|0);
 HEAP32[(($188)>>2)]=$185;
 label=17;break;
 case 17: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_16bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 var $fr1;
 var $fr2;
 var $sr;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$1;
 var $18=(($17+72)|0);
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 $fl1=$20;
 var $21=$1;
 var $22=(($21+72)|0);
 var $23=(($22+12)|0);
 var $24=HEAP32[(($23)>>2)];
 $fl2=$24;
 var $25=$1;
 var $26=(($25+72)|0);
 var $27=(($26+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29$0=$28;
 var $29$1=((((($28|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$29$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$29$1;
 var $30=$1;
 var $31=(($30+72)|0);
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34$0=$33;
 var $34$1=((((($33|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$34$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$34$1;
 var $35=$1;
 var $36=(($35+72)|0);
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39$0=$38;
 var $39$1=((((($38|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$39$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$39$1;
 var $40=$1;
 var $41=(($40+72)|0);
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 $fr1=$43;
 var $44=$1;
 var $45=(($44+72)|0);
 var $46=(($45+4)|0);
 var $47=HEAP32[(($46)>>2)];
 $fr2=$47;
 var $48=$4;
 var $49=$48>>8;
 $4=$49;
 var $50=$5;
 var $51=$50>>8;
 $5=$51;
 label=2;break;
 case 2: 
 var $53=$3;
 var $54=((($53)-(1))|0);
 $3=$54;
 var $55=($53|0)!=0;
 if($55){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $58=$pos;
 var $59=$sptr;
 var $60=(($59+($58<<1))|0);
 var $61=HEAP16[(($60)>>1)];
 var $62=(($61<<16)>>16);
 $smp_l1=$62;
 var $63=$pos;
 var $64=((($63)+(1))|0);
 var $65=$sptr;
 var $66=(($65+($64<<1))|0);
 var $67=HEAP16[(($66)>>1)];
 var $68=(($67<<16)>>16);
 var $69=$smp_l1;
 var $70=((($68)-($69))|0);
 $smp_dt=$70;
 var $71=$smp_l1;
 var $72=$frac;
 var $73=$smp_dt;
 var $74=(Math_imul($72,$73)|0);
 var $75=$74>>16;
 var $76=((($71)+($75))|0);
 $smp_in=$76;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $79$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $79$1=HEAP32[(($ld$7$1)>>2)];
 var $80=$smp_in;
 var $81$0=$80;
 var $81$1=((((($80|0)<0))|0)?-1:0);
 var $82$0=___muldi3($79$0,$79$1,$81$0,$81$1);var $82$1=tempRet0;
 var $83=$5;
 var $84$0=$83;
 var $84$1=((((($83|0)<0))|0)?-1:0);
 var $85$0=___muldi3($82$0,$82$1,$84$0,$84$1);var $85$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $86$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $86$1=HEAP32[(($ld$9$1)>>2)];
 var $87=$fr1;
 var $88$0=$87;
 var $88$1=((((($87|0)<0))|0)?-1:0);
 var $89$0=___muldi3($86$0,$86$1,$88$0,$88$1);var $89$1=tempRet0;
 var $90$0=_i64Add($85$0,$85$1,$89$0,$89$1);var $90$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $91$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $91$1=HEAP32[(($ld$11$1)>>2)];
 var $92=$fr2;
 var $93$0=$92;
 var $93$1=((((($92|0)<0))|0)?-1:0);
 var $94$0=___muldi3($91$0,$91$1,$93$0,$93$1);var $94$1=tempRet0;
 var $95$0=_i64Add($90$0,$90$1,$94$0,$94$1);var $95$1=tempRet0;
 var $96$0=($95$0>>>16)|($95$1<<16);
 var $96$1=($95$1>>16)|((((((($95$1|0)<0))|0)?-1:0))<<16);
 var $97$0=$96$0;
 var $97=$97$0;
 $sr=$97;
 var $98=$fr1;
 $fr2=$98;
 var $99=$sr;
 $fr1=$99;
 var $ld$12$0=(($a0)|0);
 var $100$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($a0+4)|0);
 var $100$1=HEAP32[(($ld$13$1)>>2)];
 var $101=$smp_in;
 var $102$0=$101;
 var $102$1=((((($101|0)<0))|0)?-1:0);
 var $103$0=___muldi3($100$0,$100$1,$102$0,$102$1);var $103$1=tempRet0;
 var $104=$4;
 var $105$0=$104;
 var $105$1=((((($104|0)<0))|0)?-1:0);
 var $106$0=___muldi3($103$0,$103$1,$105$0,$105$1);var $106$1=tempRet0;
 var $ld$14$0=(($b0)|0);
 var $107$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($b0+4)|0);
 var $107$1=HEAP32[(($ld$15$1)>>2)];
 var $108=$fl1;
 var $109$0=$108;
 var $109$1=((((($108|0)<0))|0)?-1:0);
 var $110$0=___muldi3($107$0,$107$1,$109$0,$109$1);var $110$1=tempRet0;
 var $111$0=_i64Add($106$0,$106$1,$110$0,$110$1);var $111$1=tempRet0;
 var $ld$16$0=(($b1)|0);
 var $112$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($b1+4)|0);
 var $112$1=HEAP32[(($ld$17$1)>>2)];
 var $113=$fl2;
 var $114$0=$113;
 var $114$1=((((($113|0)<0))|0)?-1:0);
 var $115$0=___muldi3($112$0,$112$1,$114$0,$114$1);var $115$1=tempRet0;
 var $116$0=_i64Add($111$0,$111$1,$115$0,$115$1);var $116$1=tempRet0;
 var $117$0=($116$0>>>16)|($116$1<<16);
 var $117$1=($116$1>>16)|((((((($116$1|0)<0))|0)?-1:0))<<16);
 var $118$0=$117$0;
 var $118=$118$0;
 $sl=$118;
 var $119=$fl1;
 $fl2=$119;
 var $120=$sl;
 $fl1=$120;
 var $121=$1;
 var $122=(($121+108)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=($123|0)!=0;
 if($124){label=7;break;}else{label=8;break;}
 case 7: 
 var $126=$1;
 var $127=(($126+108)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(((16)-($128))|0);
 $a=$129;
 var $130=$sr;
 var $131=$a;
 var $132=(Math_imul($130,$131)|0);
 var $133=$132>>4;
 var $134=$2;
 var $135=(($134+4)|0);
 $2=$135;
 var $136=HEAP32[(($134)>>2)];
 var $137=((($136)+($133))|0);
 HEAP32[(($134)>>2)]=$137;
 var $138=$sl;
 var $139=$a;
 var $140=(Math_imul($138,$139)|0);
 var $141=$140>>4;
 var $142=$2;
 var $143=(($142+4)|0);
 $2=$143;
 var $144=HEAP32[(($142)>>2)];
 var $145=((($144)+($141))|0);
 HEAP32[(($142)>>2)]=$145;
 var $146=$1;
 var $147=(($146+108)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=((($148)-(1))|0);
 HEAP32[(($147)>>2)]=$149;
 label=9;break;
 case 8: 
 var $151=$sr;
 var $152=$2;
 var $153=(($152+4)|0);
 $2=$153;
 var $154=HEAP32[(($152)>>2)];
 var $155=((($154)+($151))|0);
 HEAP32[(($152)>>2)]=$155;
 var $156=$sl;
 var $157=$2;
 var $158=(($157+4)|0);
 $2=$158;
 var $159=HEAP32[(($157)>>2)];
 var $160=((($159)+($156))|0);
 HEAP32[(($157)>>2)]=$160;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $164=$6;
 var $165=$frac;
 var $166=((($165)+($164))|0);
 $frac=$166;
 var $167=$frac;
 var $168=$167>>16;
 var $169=$pos;
 var $170=((($169)+($168))|0);
 $pos=$170;
 var $171=$frac;
 var $172=$171&65535;
 $frac=$172;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $177=$fl1;
 var $178=$1;
 var $179=(($178+72)|0);
 var $180=(($179+8)|0);
 HEAP32[(($180)>>2)]=$177;
 var $181=$fl2;
 var $182=$1;
 var $183=(($182+72)|0);
 var $184=(($183+12)|0);
 HEAP32[(($184)>>2)]=$181;
 label=16;break;
 case 16: 
 var $186=$fr1;
 var $187=$1;
 var $188=(($187+72)|0);
 var $189=(($188)|0);
 HEAP32[(($189)>>2)]=$186;
 var $190=$fr2;
 var $191=$1;
 var $192=(($191+72)|0);
 var $193=(($192+4)|0);
 HEAP32[(($193)>>2)]=$190;
 label=17;break;
 case 17: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_8bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 var $16=$1;
 var $17=(($16+72)|0);
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 $fl1=$19;
 var $20=$1;
 var $21=(($20+72)|0);
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 $fl2=$23;
 var $24=$1;
 var $25=(($24+72)|0);
 var $26=(($25+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28$0=$27;
 var $28$1=((((($27|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$28$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$28$1;
 var $29=$1;
 var $30=(($29+72)|0);
 var $31=(($30+20)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33$0=$32;
 var $33$1=((((($32|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$33$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$33$1;
 var $34=$1;
 var $35=(($34+72)|0);
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38$0=$37;
 var $38$1=((((($37|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$38$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$38$1;
 label=2;break;
 case 2: 
 var $40=$3;
 var $41=((($40)-(1))|0);
 $3=$41;
 var $42=($40|0)!=0;
 if($42){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $45=$pos;
 var $46=$sptr;
 var $47=(($46+$45)|0);
 var $48=HEAP8[($47)];
 var $49=(($48<<24)>>24);
 $smp_l1=$49;
 var $50=$pos;
 var $51=((($50)+(1))|0);
 var $52=$sptr;
 var $53=(($52+$51)|0);
 var $54=HEAP8[($53)];
 var $55=(($54<<24)>>24);
 var $56=$smp_l1;
 var $57=((($55)-($56))|0);
 $smp_dt=$57;
 var $58=$smp_l1;
 var $59=$frac;
 var $60=$smp_dt;
 var $61=(Math_imul($59,$60)|0);
 var $62=$61>>16;
 var $63=((($58)+($62))|0);
 $smp_in=$63;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $66$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $66$1=HEAP32[(($ld$7$1)>>2)];
 var $67=$smp_in;
 var $68$0=$67;
 var $68$1=((((($67|0)<0))|0)?-1:0);
 var $69$0=___muldi3($66$0,$66$1,$68$0,$68$1);var $69$1=tempRet0;
 var $70=$4;
 var $71$0=$70;
 var $71$1=((((($70|0)<0))|0)?-1:0);
 var $72$0=___muldi3($69$0,$69$1,$71$0,$71$1);var $72$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $73$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $73$1=HEAP32[(($ld$9$1)>>2)];
 var $74=$fl1;
 var $75$0=$74;
 var $75$1=((((($74|0)<0))|0)?-1:0);
 var $76$0=___muldi3($73$0,$73$1,$75$0,$75$1);var $76$1=tempRet0;
 var $77$0=_i64Add($72$0,$72$1,$76$0,$76$1);var $77$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $78$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $78$1=HEAP32[(($ld$11$1)>>2)];
 var $79=$fl2;
 var $80$0=$79;
 var $80$1=((((($79|0)<0))|0)?-1:0);
 var $81$0=___muldi3($78$0,$78$1,$80$0,$80$1);var $81$1=tempRet0;
 var $82$0=_i64Add($77$0,$77$1,$81$0,$81$1);var $82$1=tempRet0;
 var $83$0=($82$0>>>16)|($82$1<<16);
 var $83$1=($82$1>>16)|((((((($82$1|0)<0))|0)?-1:0))<<16);
 var $84$0=$83$0;
 var $84=$84$0;
 $sl=$84;
 var $85=$fl1;
 $fl2=$85;
 var $86=$sl;
 $fl1=$86;
 var $87=$1;
 var $88=(($87+108)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)!=0;
 if($90){label=7;break;}else{label=8;break;}
 case 7: 
 var $92=$sl;
 var $93=$1;
 var $94=(($93+108)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(((16)-($95))|0);
 var $97=(Math_imul($92,$96)|0);
 var $98=$97>>4;
 var $99=$2;
 var $100=(($99+4)|0);
 $2=$100;
 var $101=HEAP32[(($99)>>2)];
 var $102=((($101)+($98))|0);
 HEAP32[(($99)>>2)]=$102;
 var $103=$1;
 var $104=(($103+108)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=((($105)-(1))|0);
 HEAP32[(($104)>>2)]=$106;
 label=9;break;
 case 8: 
 var $108=$sl;
 var $109=$2;
 var $110=(($109+4)|0);
 $2=$110;
 var $111=HEAP32[(($109)>>2)];
 var $112=((($111)+($108))|0);
 HEAP32[(($109)>>2)]=$112;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $116=$6;
 var $117=$frac;
 var $118=((($117)+($116))|0);
 $frac=$118;
 var $119=$frac;
 var $120=$119>>16;
 var $121=$pos;
 var $122=((($121)+($120))|0);
 $pos=$122;
 var $123=$frac;
 var $124=$123&65535;
 $frac=$124;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 var $128=$fl1;
 var $129=$1;
 var $130=(($129+72)|0);
 var $131=(($130+8)|0);
 HEAP32[(($131)>>2)]=$128;
 var $132=$fl2;
 var $133=$1;
 var $134=(($133+72)|0);
 var $135=(($134+12)|0);
 HEAP32[(($135)>>2)]=$132;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_16bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $smp_l1;
 var $smp_dt;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$1;
 var $18=(($17+72)|0);
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 $fl1=$20;
 var $21=$1;
 var $22=(($21+72)|0);
 var $23=(($22+12)|0);
 var $24=HEAP32[(($23)>>2)];
 $fl2=$24;
 var $25=$1;
 var $26=(($25+72)|0);
 var $27=(($26+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29$0=$28;
 var $29$1=((((($28|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$29$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$29$1;
 var $30=$1;
 var $31=(($30+72)|0);
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34$0=$33;
 var $34$1=((((($33|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$34$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$34$1;
 var $35=$1;
 var $36=(($35+72)|0);
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39$0=$38;
 var $39$1=((((($38|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$39$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$39$1;
 var $40=$4;
 var $41=$40>>8;
 $4=$41;
 label=2;break;
 case 2: 
 var $43=$3;
 var $44=((($43)-(1))|0);
 $3=$44;
 var $45=($43|0)!=0;
 if($45){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $48=$pos;
 var $49=$sptr;
 var $50=(($49+($48<<1))|0);
 var $51=HEAP16[(($50)>>1)];
 var $52=(($51<<16)>>16);
 $smp_l1=$52;
 var $53=$pos;
 var $54=((($53)+(1))|0);
 var $55=$sptr;
 var $56=(($55+($54<<1))|0);
 var $57=HEAP16[(($56)>>1)];
 var $58=(($57<<16)>>16);
 var $59=$smp_l1;
 var $60=((($58)-($59))|0);
 $smp_dt=$60;
 var $61=$smp_l1;
 var $62=$frac;
 var $63=$smp_dt;
 var $64=(Math_imul($62,$63)|0);
 var $65=$64>>16;
 var $66=((($61)+($65))|0);
 $smp_in=$66;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $69$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $69$1=HEAP32[(($ld$7$1)>>2)];
 var $70=$smp_in;
 var $71$0=$70;
 var $71$1=((((($70|0)<0))|0)?-1:0);
 var $72$0=___muldi3($69$0,$69$1,$71$0,$71$1);var $72$1=tempRet0;
 var $73=$4;
 var $74$0=$73;
 var $74$1=((((($73|0)<0))|0)?-1:0);
 var $75$0=___muldi3($72$0,$72$1,$74$0,$74$1);var $75$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $76$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $76$1=HEAP32[(($ld$9$1)>>2)];
 var $77=$fl1;
 var $78$0=$77;
 var $78$1=((((($77|0)<0))|0)?-1:0);
 var $79$0=___muldi3($76$0,$76$1,$78$0,$78$1);var $79$1=tempRet0;
 var $80$0=_i64Add($75$0,$75$1,$79$0,$79$1);var $80$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $81$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $81$1=HEAP32[(($ld$11$1)>>2)];
 var $82=$fl2;
 var $83$0=$82;
 var $83$1=((((($82|0)<0))|0)?-1:0);
 var $84$0=___muldi3($81$0,$81$1,$83$0,$83$1);var $84$1=tempRet0;
 var $85$0=_i64Add($80$0,$80$1,$84$0,$84$1);var $85$1=tempRet0;
 var $86$0=($85$0>>>16)|($85$1<<16);
 var $86$1=($85$1>>16)|((((((($85$1|0)<0))|0)?-1:0))<<16);
 var $87$0=$86$0;
 var $87=$87$0;
 $sl=$87;
 var $88=$fl1;
 $fl2=$88;
 var $89=$sl;
 $fl1=$89;
 var $90=$1;
 var $91=(($90+108)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)!=0;
 if($93){label=7;break;}else{label=8;break;}
 case 7: 
 var $95=$sl;
 var $96=$1;
 var $97=(($96+108)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(((16)-($98))|0);
 var $100=(Math_imul($95,$99)|0);
 var $101=$100>>4;
 var $102=$2;
 var $103=(($102+4)|0);
 $2=$103;
 var $104=HEAP32[(($102)>>2)];
 var $105=((($104)+($101))|0);
 HEAP32[(($102)>>2)]=$105;
 var $106=$1;
 var $107=(($106+108)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=((($108)-(1))|0);
 HEAP32[(($107)>>2)]=$109;
 label=9;break;
 case 8: 
 var $111=$sl;
 var $112=$2;
 var $113=(($112+4)|0);
 $2=$113;
 var $114=HEAP32[(($112)>>2)];
 var $115=((($114)+($111))|0);
 HEAP32[(($112)>>2)]=$115;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $119=$6;
 var $120=$frac;
 var $121=((($120)+($119))|0);
 $frac=$121;
 var $122=$frac;
 var $123=$122>>16;
 var $124=$pos;
 var $125=((($124)+($123))|0);
 $pos=$125;
 var $126=$frac;
 var $127=$126&65535;
 $frac=$127;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 var $131=$fl1;
 var $132=$1;
 var $133=(($132+72)|0);
 var $134=(($133+8)|0);
 HEAP32[(($134)>>2)]=$131;
 var $135=$fl2;
 var $136=$1;
 var $137=(($136+72)|0);
 var $138=(($137+12)|0);
 HEAP32[(($138)>>2)]=$135;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_8bit_spline($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $f;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 label=2;break;
 case 2: 
 var $17=$3;
 var $18=((($17)-(1))|0);
 $3=$18;
 var $19=($17|0)!=0;
 if($19){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $22=$frac;
 var $23=$22>>6;
 $f=$23;
 var $24=$f;
 var $25=((16568+($24<<1))|0);
 var $26=HEAP16[(($25)>>1)];
 var $27=(($26<<16)>>16);
 var $28=$pos;
 var $29=((($28)-(1))|0);
 var $30=$sptr;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=(($32<<24)>>24);
 var $34=(Math_imul($27,$33)|0);
 var $35=$f;
 var $36=((14520+($35<<1))|0);
 var $37=HEAP16[(($36)>>1)];
 var $38=(($37<<16)>>16);
 var $39=$pos;
 var $40=$sptr;
 var $41=(($40+$39)|0);
 var $42=HEAP8[($41)];
 var $43=(($42<<24)>>24);
 var $44=(Math_imul($38,$43)|0);
 var $45=((($34)+($44))|0);
 var $46=$f;
 var $47=((10424+($46<<1))|0);
 var $48=HEAP16[(($47)>>1)];
 var $49=(($48<<16)>>16);
 var $50=$pos;
 var $51=((($50)+(2))|0);
 var $52=$sptr;
 var $53=(($52+$51)|0);
 var $54=HEAP8[($53)];
 var $55=(($54<<24)>>24);
 var $56=(Math_imul($49,$55)|0);
 var $57=((($45)+($56))|0);
 var $58=$f;
 var $59=((12472+($58<<1))|0);
 var $60=HEAP16[(($59)>>1)];
 var $61=(($60<<16)>>16);
 var $62=$pos;
 var $63=((($62)+(1))|0);
 var $64=$sptr;
 var $65=(($64+$63)|0);
 var $66=HEAP8[($65)];
 var $67=(($66<<24)>>24);
 var $68=(Math_imul($61,$67)|0);
 var $69=((($57)+($68))|0);
 var $70=$69>>14;
 $smp_in=$70;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $73=$1;
 var $74=(($73+108)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)!=0;
 if($76){label=7;break;}else{label=8;break;}
 case 7: 
 var $78=$1;
 var $79=(($78+108)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(((16)-($80))|0);
 $a=$81;
 var $82=$smp_in;
 var $83=$5;
 var $84=(Math_imul($82,$83)|0);
 var $85=$a;
 var $86=(Math_imul($84,$85)|0);
 var $87=$86>>4;
 var $88=$2;
 var $89=(($88+4)|0);
 $2=$89;
 var $90=HEAP32[(($88)>>2)];
 var $91=((($90)+($87))|0);
 HEAP32[(($88)>>2)]=$91;
 var $92=$smp_in;
 var $93=$4;
 var $94=(Math_imul($92,$93)|0);
 var $95=$a;
 var $96=(Math_imul($94,$95)|0);
 var $97=$96>>4;
 var $98=$2;
 var $99=(($98+4)|0);
 $2=$99;
 var $100=HEAP32[(($98)>>2)];
 var $101=((($100)+($97))|0);
 HEAP32[(($98)>>2)]=$101;
 var $102=$1;
 var $103=(($102+108)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=((($104)-(1))|0);
 HEAP32[(($103)>>2)]=$105;
 label=9;break;
 case 8: 
 var $107=$smp_in;
 var $108=$5;
 var $109=(Math_imul($107,$108)|0);
 var $110=$2;
 var $111=(($110+4)|0);
 $2=$111;
 var $112=HEAP32[(($110)>>2)];
 var $113=((($112)+($109))|0);
 HEAP32[(($110)>>2)]=$113;
 var $114=$smp_in;
 var $115=$4;
 var $116=(Math_imul($114,$115)|0);
 var $117=$2;
 var $118=(($117+4)|0);
 $2=$118;
 var $119=HEAP32[(($117)>>2)];
 var $120=((($119)+($116))|0);
 HEAP32[(($117)>>2)]=$120;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $124=$6;
 var $125=$frac;
 var $126=((($125)+($124))|0);
 $frac=$126;
 var $127=$frac;
 var $128=$127>>16;
 var $129=$pos;
 var $130=((($129)+($128))|0);
 $pos=$130;
 var $131=$frac;
 var $132=$131&65535;
 $frac=$132;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_16bit_spline($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $f;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$4;
 var $18=$17>>8;
 $4=$18;
 var $19=$5;
 var $20=$19>>8;
 $5=$20;
 label=2;break;
 case 2: 
 var $22=$3;
 var $23=((($22)-(1))|0);
 $3=$23;
 var $24=($22|0)!=0;
 if($24){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $27=$frac;
 var $28=$27>>6;
 $f=$28;
 var $29=$f;
 var $30=((16568+($29<<1))|0);
 var $31=HEAP16[(($30)>>1)];
 var $32=(($31<<16)>>16);
 var $33=$pos;
 var $34=((($33)-(1))|0);
 var $35=$sptr;
 var $36=(($35+($34<<1))|0);
 var $37=HEAP16[(($36)>>1)];
 var $38=(($37<<16)>>16);
 var $39=(Math_imul($32,$38)|0);
 var $40=$f;
 var $41=((14520+($40<<1))|0);
 var $42=HEAP16[(($41)>>1)];
 var $43=(($42<<16)>>16);
 var $44=$pos;
 var $45=$sptr;
 var $46=(($45+($44<<1))|0);
 var $47=HEAP16[(($46)>>1)];
 var $48=(($47<<16)>>16);
 var $49=(Math_imul($43,$48)|0);
 var $50=((($39)+($49))|0);
 var $51=$f;
 var $52=((10424+($51<<1))|0);
 var $53=HEAP16[(($52)>>1)];
 var $54=(($53<<16)>>16);
 var $55=$pos;
 var $56=((($55)+(2))|0);
 var $57=$sptr;
 var $58=(($57+($56<<1))|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=(($59<<16)>>16);
 var $61=(Math_imul($54,$60)|0);
 var $62=((($50)+($61))|0);
 var $63=$f;
 var $64=((12472+($63<<1))|0);
 var $65=HEAP16[(($64)>>1)];
 var $66=(($65<<16)>>16);
 var $67=$pos;
 var $68=((($67)+(1))|0);
 var $69=$sptr;
 var $70=(($69+($68<<1))|0);
 var $71=HEAP16[(($70)>>1)];
 var $72=(($71<<16)>>16);
 var $73=(Math_imul($66,$72)|0);
 var $74=((($62)+($73))|0);
 var $75=$74>>14;
 $smp_in=$75;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $78=$1;
 var $79=(($78+108)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($80|0)!=0;
 if($81){label=7;break;}else{label=8;break;}
 case 7: 
 var $83=$1;
 var $84=(($83+108)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(((16)-($85))|0);
 $a=$86;
 var $87=$smp_in;
 var $88=$5;
 var $89=(Math_imul($87,$88)|0);
 var $90=$a;
 var $91=(Math_imul($89,$90)|0);
 var $92=$91>>4;
 var $93=$2;
 var $94=(($93+4)|0);
 $2=$94;
 var $95=HEAP32[(($93)>>2)];
 var $96=((($95)+($92))|0);
 HEAP32[(($93)>>2)]=$96;
 var $97=$smp_in;
 var $98=$4;
 var $99=(Math_imul($97,$98)|0);
 var $100=$a;
 var $101=(Math_imul($99,$100)|0);
 var $102=$101>>4;
 var $103=$2;
 var $104=(($103+4)|0);
 $2=$104;
 var $105=HEAP32[(($103)>>2)];
 var $106=((($105)+($102))|0);
 HEAP32[(($103)>>2)]=$106;
 var $107=$1;
 var $108=(($107+108)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=((($109)-(1))|0);
 HEAP32[(($108)>>2)]=$110;
 label=9;break;
 case 8: 
 var $112=$smp_in;
 var $113=$5;
 var $114=(Math_imul($112,$113)|0);
 var $115=$2;
 var $116=(($115+4)|0);
 $2=$116;
 var $117=HEAP32[(($115)>>2)];
 var $118=((($117)+($114))|0);
 HEAP32[(($115)>>2)]=$118;
 var $119=$smp_in;
 var $120=$4;
 var $121=(Math_imul($119,$120)|0);
 var $122=$2;
 var $123=(($122+4)|0);
 $2=$123;
 var $124=HEAP32[(($122)>>2)];
 var $125=((($124)+($121))|0);
 HEAP32[(($122)>>2)]=$125;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $129=$6;
 var $130=$frac;
 var $131=((($130)+($129))|0);
 $frac=$131;
 var $132=$frac;
 var $133=$132>>16;
 var $134=$pos;
 var $135=((($134)+($133))|0);
 $pos=$135;
 var $136=$frac;
 var $137=$136&65535;
 $frac=$137;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_8bit_spline($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $f;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 label=2;break;
 case 2: 
 var $17=$3;
 var $18=((($17)-(1))|0);
 $3=$18;
 var $19=($17|0)!=0;
 if($19){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $22=$frac;
 var $23=$22>>6;
 $f=$23;
 var $24=$f;
 var $25=((16568+($24<<1))|0);
 var $26=HEAP16[(($25)>>1)];
 var $27=(($26<<16)>>16);
 var $28=$pos;
 var $29=((($28)-(1))|0);
 var $30=$sptr;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=(($32<<24)>>24);
 var $34=(Math_imul($27,$33)|0);
 var $35=$f;
 var $36=((14520+($35<<1))|0);
 var $37=HEAP16[(($36)>>1)];
 var $38=(($37<<16)>>16);
 var $39=$pos;
 var $40=$sptr;
 var $41=(($40+$39)|0);
 var $42=HEAP8[($41)];
 var $43=(($42<<24)>>24);
 var $44=(Math_imul($38,$43)|0);
 var $45=((($34)+($44))|0);
 var $46=$f;
 var $47=((10424+($46<<1))|0);
 var $48=HEAP16[(($47)>>1)];
 var $49=(($48<<16)>>16);
 var $50=$pos;
 var $51=((($50)+(2))|0);
 var $52=$sptr;
 var $53=(($52+$51)|0);
 var $54=HEAP8[($53)];
 var $55=(($54<<24)>>24);
 var $56=(Math_imul($49,$55)|0);
 var $57=((($45)+($56))|0);
 var $58=$f;
 var $59=((12472+($58<<1))|0);
 var $60=HEAP16[(($59)>>1)];
 var $61=(($60<<16)>>16);
 var $62=$pos;
 var $63=((($62)+(1))|0);
 var $64=$sptr;
 var $65=(($64+$63)|0);
 var $66=HEAP8[($65)];
 var $67=(($66<<24)>>24);
 var $68=(Math_imul($61,$67)|0);
 var $69=((($57)+($68))|0);
 var $70=$69>>14;
 $smp_in=$70;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $73=$1;
 var $74=(($73+108)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)!=0;
 if($76){label=7;break;}else{label=8;break;}
 case 7: 
 var $78=$smp_in;
 var $79=$4;
 var $80=(Math_imul($78,$79)|0);
 var $81=$1;
 var $82=(($81+108)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(((16)-($83))|0);
 var $85=(Math_imul($80,$84)|0);
 var $86=$85>>4;
 var $87=$2;
 var $88=(($87+4)|0);
 $2=$88;
 var $89=HEAP32[(($87)>>2)];
 var $90=((($89)+($86))|0);
 HEAP32[(($87)>>2)]=$90;
 var $91=$1;
 var $92=(($91+108)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=((($93)-(1))|0);
 HEAP32[(($92)>>2)]=$94;
 label=9;break;
 case 8: 
 var $96=$smp_in;
 var $97=$4;
 var $98=(Math_imul($96,$97)|0);
 var $99=$2;
 var $100=(($99+4)|0);
 $2=$100;
 var $101=HEAP32[(($99)>>2)];
 var $102=((($101)+($98))|0);
 HEAP32[(($99)>>2)]=$102;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $106=$6;
 var $107=$frac;
 var $108=((($107)+($106))|0);
 $frac=$108;
 var $109=$frac;
 var $110=$109>>16;
 var $111=$pos;
 var $112=((($111)+($110))|0);
 $pos=$112;
 var $113=$frac;
 var $114=$113&65535;
 $frac=$114;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_16bit_spline($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $f;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$4;
 var $18=$17>>8;
 $4=$18;
 label=2;break;
 case 2: 
 var $20=$3;
 var $21=((($20)-(1))|0);
 $3=$21;
 var $22=($20|0)!=0;
 if($22){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $25=$frac;
 var $26=$25>>6;
 $f=$26;
 var $27=$f;
 var $28=((16568+($27<<1))|0);
 var $29=HEAP16[(($28)>>1)];
 var $30=(($29<<16)>>16);
 var $31=$pos;
 var $32=((($31)-(1))|0);
 var $33=$sptr;
 var $34=(($33+($32<<1))|0);
 var $35=HEAP16[(($34)>>1)];
 var $36=(($35<<16)>>16);
 var $37=(Math_imul($30,$36)|0);
 var $38=$f;
 var $39=((14520+($38<<1))|0);
 var $40=HEAP16[(($39)>>1)];
 var $41=(($40<<16)>>16);
 var $42=$pos;
 var $43=$sptr;
 var $44=(($43+($42<<1))|0);
 var $45=HEAP16[(($44)>>1)];
 var $46=(($45<<16)>>16);
 var $47=(Math_imul($41,$46)|0);
 var $48=((($37)+($47))|0);
 var $49=$f;
 var $50=((10424+($49<<1))|0);
 var $51=HEAP16[(($50)>>1)];
 var $52=(($51<<16)>>16);
 var $53=$pos;
 var $54=((($53)+(2))|0);
 var $55=$sptr;
 var $56=(($55+($54<<1))|0);
 var $57=HEAP16[(($56)>>1)];
 var $58=(($57<<16)>>16);
 var $59=(Math_imul($52,$58)|0);
 var $60=((($48)+($59))|0);
 var $61=$f;
 var $62=((12472+($61<<1))|0);
 var $63=HEAP16[(($62)>>1)];
 var $64=(($63<<16)>>16);
 var $65=$pos;
 var $66=((($65)+(1))|0);
 var $67=$sptr;
 var $68=(($67+($66<<1))|0);
 var $69=HEAP16[(($68)>>1)];
 var $70=(($69<<16)>>16);
 var $71=(Math_imul($64,$70)|0);
 var $72=((($60)+($71))|0);
 var $73=$72>>14;
 $smp_in=$73;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $76=$1;
 var $77=(($76+108)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($78|0)!=0;
 if($79){label=7;break;}else{label=8;break;}
 case 7: 
 var $81=$smp_in;
 var $82=$4;
 var $83=(Math_imul($81,$82)|0);
 var $84=$1;
 var $85=(($84+108)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(((16)-($86))|0);
 var $88=(Math_imul($83,$87)|0);
 var $89=$88>>4;
 var $90=$2;
 var $91=(($90+4)|0);
 $2=$91;
 var $92=HEAP32[(($90)>>2)];
 var $93=((($92)+($89))|0);
 HEAP32[(($90)>>2)]=$93;
 var $94=$1;
 var $95=(($94+108)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)-(1))|0);
 HEAP32[(($95)>>2)]=$97;
 label=9;break;
 case 8: 
 var $99=$smp_in;
 var $100=$4;
 var $101=(Math_imul($99,$100)|0);
 var $102=$2;
 var $103=(($102+4)|0);
 $2=$103;
 var $104=HEAP32[(($102)>>2)];
 var $105=((($104)+($101))|0);
 HEAP32[(($102)>>2)]=$105;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $109=$6;
 var $110=$frac;
 var $111=((($110)+($109))|0);
 $frac=$111;
 var $112=$frac;
 var $113=$112>>16;
 var $114=$pos;
 var $115=((($114)+($113))|0);
 $pos=$115;
 var $116=$frac;
 var $117=$116&65535;
 $frac=$117;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_8bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 var $fr1;
 var $fr2;
 var $sr;
 var $f;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 var $16=$1;
 var $17=(($16+72)|0);
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 $fl1=$19;
 var $20=$1;
 var $21=(($20+72)|0);
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 $fl2=$23;
 var $24=$1;
 var $25=(($24+72)|0);
 var $26=(($25+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28$0=$27;
 var $28$1=((((($27|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$28$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$28$1;
 var $29=$1;
 var $30=(($29+72)|0);
 var $31=(($30+20)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33$0=$32;
 var $33$1=((((($32|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$33$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$33$1;
 var $34=$1;
 var $35=(($34+72)|0);
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38$0=$37;
 var $38$1=((((($37|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$38$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$38$1;
 var $39=$1;
 var $40=(($39+72)|0);
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 $fr1=$42;
 var $43=$1;
 var $44=(($43+72)|0);
 var $45=(($44+4)|0);
 var $46=HEAP32[(($45)>>2)];
 $fr2=$46;
 label=2;break;
 case 2: 
 var $48=$3;
 var $49=((($48)-(1))|0);
 $3=$49;
 var $50=($48|0)!=0;
 if($50){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $53=$frac;
 var $54=$53>>6;
 $f=$54;
 var $55=$f;
 var $56=((16568+($55<<1))|0);
 var $57=HEAP16[(($56)>>1)];
 var $58=(($57<<16)>>16);
 var $59=$pos;
 var $60=((($59)-(1))|0);
 var $61=$sptr;
 var $62=(($61+$60)|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24);
 var $65=(Math_imul($58,$64)|0);
 var $66=$f;
 var $67=((14520+($66<<1))|0);
 var $68=HEAP16[(($67)>>1)];
 var $69=(($68<<16)>>16);
 var $70=$pos;
 var $71=$sptr;
 var $72=(($71+$70)|0);
 var $73=HEAP8[($72)];
 var $74=(($73<<24)>>24);
 var $75=(Math_imul($69,$74)|0);
 var $76=((($65)+($75))|0);
 var $77=$f;
 var $78=((10424+($77<<1))|0);
 var $79=HEAP16[(($78)>>1)];
 var $80=(($79<<16)>>16);
 var $81=$pos;
 var $82=((($81)+(2))|0);
 var $83=$sptr;
 var $84=(($83+$82)|0);
 var $85=HEAP8[($84)];
 var $86=(($85<<24)>>24);
 var $87=(Math_imul($80,$86)|0);
 var $88=((($76)+($87))|0);
 var $89=$f;
 var $90=((12472+($89<<1))|0);
 var $91=HEAP16[(($90)>>1)];
 var $92=(($91<<16)>>16);
 var $93=$pos;
 var $94=((($93)+(1))|0);
 var $95=$sptr;
 var $96=(($95+$94)|0);
 var $97=HEAP8[($96)];
 var $98=(($97<<24)>>24);
 var $99=(Math_imul($92,$98)|0);
 var $100=((($88)+($99))|0);
 var $101=$100>>14;
 $smp_in=$101;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $104$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $104$1=HEAP32[(($ld$7$1)>>2)];
 var $105=$smp_in;
 var $106$0=$105;
 var $106$1=((((($105|0)<0))|0)?-1:0);
 var $107$0=___muldi3($104$0,$104$1,$106$0,$106$1);var $107$1=tempRet0;
 var $108=$5;
 var $109$0=$108;
 var $109$1=((((($108|0)<0))|0)?-1:0);
 var $110$0=___muldi3($107$0,$107$1,$109$0,$109$1);var $110$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $111$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $111$1=HEAP32[(($ld$9$1)>>2)];
 var $112=$fr1;
 var $113$0=$112;
 var $113$1=((((($112|0)<0))|0)?-1:0);
 var $114$0=___muldi3($111$0,$111$1,$113$0,$113$1);var $114$1=tempRet0;
 var $115$0=_i64Add($110$0,$110$1,$114$0,$114$1);var $115$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $116$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $116$1=HEAP32[(($ld$11$1)>>2)];
 var $117=$fr2;
 var $118$0=$117;
 var $118$1=((((($117|0)<0))|0)?-1:0);
 var $119$0=___muldi3($116$0,$116$1,$118$0,$118$1);var $119$1=tempRet0;
 var $120$0=_i64Add($115$0,$115$1,$119$0,$119$1);var $120$1=tempRet0;
 var $121$0=($120$0>>>16)|($120$1<<16);
 var $121$1=($120$1>>16)|((((((($120$1|0)<0))|0)?-1:0))<<16);
 var $122$0=$121$0;
 var $122=$122$0;
 $sr=$122;
 var $123=$fr1;
 $fr2=$123;
 var $124=$sr;
 $fr1=$124;
 var $ld$12$0=(($a0)|0);
 var $125$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($a0+4)|0);
 var $125$1=HEAP32[(($ld$13$1)>>2)];
 var $126=$smp_in;
 var $127$0=$126;
 var $127$1=((((($126|0)<0))|0)?-1:0);
 var $128$0=___muldi3($125$0,$125$1,$127$0,$127$1);var $128$1=tempRet0;
 var $129=$4;
 var $130$0=$129;
 var $130$1=((((($129|0)<0))|0)?-1:0);
 var $131$0=___muldi3($128$0,$128$1,$130$0,$130$1);var $131$1=tempRet0;
 var $ld$14$0=(($b0)|0);
 var $132$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($b0+4)|0);
 var $132$1=HEAP32[(($ld$15$1)>>2)];
 var $133=$fl1;
 var $134$0=$133;
 var $134$1=((((($133|0)<0))|0)?-1:0);
 var $135$0=___muldi3($132$0,$132$1,$134$0,$134$1);var $135$1=tempRet0;
 var $136$0=_i64Add($131$0,$131$1,$135$0,$135$1);var $136$1=tempRet0;
 var $ld$16$0=(($b1)|0);
 var $137$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($b1+4)|0);
 var $137$1=HEAP32[(($ld$17$1)>>2)];
 var $138=$fl2;
 var $139$0=$138;
 var $139$1=((((($138|0)<0))|0)?-1:0);
 var $140$0=___muldi3($137$0,$137$1,$139$0,$139$1);var $140$1=tempRet0;
 var $141$0=_i64Add($136$0,$136$1,$140$0,$140$1);var $141$1=tempRet0;
 var $142$0=($141$0>>>16)|($141$1<<16);
 var $142$1=($141$1>>16)|((((((($141$1|0)<0))|0)?-1:0))<<16);
 var $143$0=$142$0;
 var $143=$143$0;
 $sl=$143;
 var $144=$fl1;
 $fl2=$144;
 var $145=$sl;
 $fl1=$145;
 var $146=$1;
 var $147=(($146+108)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)!=0;
 if($149){label=7;break;}else{label=8;break;}
 case 7: 
 var $151=$1;
 var $152=(($151+108)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(((16)-($153))|0);
 $a=$154;
 var $155=$sr;
 var $156=$a;
 var $157=(Math_imul($155,$156)|0);
 var $158=$157>>4;
 var $159=$2;
 var $160=(($159+4)|0);
 $2=$160;
 var $161=HEAP32[(($159)>>2)];
 var $162=((($161)+($158))|0);
 HEAP32[(($159)>>2)]=$162;
 var $163=$sl;
 var $164=$a;
 var $165=(Math_imul($163,$164)|0);
 var $166=$165>>4;
 var $167=$2;
 var $168=(($167+4)|0);
 $2=$168;
 var $169=HEAP32[(($167)>>2)];
 var $170=((($169)+($166))|0);
 HEAP32[(($167)>>2)]=$170;
 var $171=$1;
 var $172=(($171+108)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=((($173)-(1))|0);
 HEAP32[(($172)>>2)]=$174;
 label=9;break;
 case 8: 
 var $176=$sr;
 var $177=$2;
 var $178=(($177+4)|0);
 $2=$178;
 var $179=HEAP32[(($177)>>2)];
 var $180=((($179)+($176))|0);
 HEAP32[(($177)>>2)]=$180;
 var $181=$sl;
 var $182=$2;
 var $183=(($182+4)|0);
 $2=$183;
 var $184=HEAP32[(($182)>>2)];
 var $185=((($184)+($181))|0);
 HEAP32[(($182)>>2)]=$185;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $189=$6;
 var $190=$frac;
 var $191=((($190)+($189))|0);
 $frac=$191;
 var $192=$frac;
 var $193=$192>>16;
 var $194=$pos;
 var $195=((($194)+($193))|0);
 $pos=$195;
 var $196=$frac;
 var $197=$196&65535;
 $frac=$197;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $202=$fl1;
 var $203=$1;
 var $204=(($203+72)|0);
 var $205=(($204+8)|0);
 HEAP32[(($205)>>2)]=$202;
 var $206=$fl2;
 var $207=$1;
 var $208=(($207+72)|0);
 var $209=(($208+12)|0);
 HEAP32[(($209)>>2)]=$206;
 label=16;break;
 case 16: 
 var $211=$fr1;
 var $212=$1;
 var $213=(($212+72)|0);
 var $214=(($213)|0);
 HEAP32[(($214)>>2)]=$211;
 var $215=$fr2;
 var $216=$1;
 var $217=(($216+72)|0);
 var $218=(($217+4)|0);
 HEAP32[(($218)>>2)]=$215;
 label=17;break;
 case 17: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_stereo_16bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 var $fr1;
 var $fr2;
 var $sr;
 var $f;
 var $a;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$1;
 var $18=(($17+72)|0);
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 $fl1=$20;
 var $21=$1;
 var $22=(($21+72)|0);
 var $23=(($22+12)|0);
 var $24=HEAP32[(($23)>>2)];
 $fl2=$24;
 var $25=$1;
 var $26=(($25+72)|0);
 var $27=(($26+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29$0=$28;
 var $29$1=((((($28|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$29$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$29$1;
 var $30=$1;
 var $31=(($30+72)|0);
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34$0=$33;
 var $34$1=((((($33|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$34$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$34$1;
 var $35=$1;
 var $36=(($35+72)|0);
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39$0=$38;
 var $39$1=((((($38|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$39$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$39$1;
 var $40=$1;
 var $41=(($40+72)|0);
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 $fr1=$43;
 var $44=$1;
 var $45=(($44+72)|0);
 var $46=(($45+4)|0);
 var $47=HEAP32[(($46)>>2)];
 $fr2=$47;
 var $48=$4;
 var $49=$48>>8;
 $4=$49;
 var $50=$5;
 var $51=$50>>8;
 $5=$51;
 label=2;break;
 case 2: 
 var $53=$3;
 var $54=((($53)-(1))|0);
 $3=$54;
 var $55=($53|0)!=0;
 if($55){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $58=$frac;
 var $59=$58>>6;
 $f=$59;
 var $60=$f;
 var $61=((16568+($60<<1))|0);
 var $62=HEAP16[(($61)>>1)];
 var $63=(($62<<16)>>16);
 var $64=$pos;
 var $65=((($64)-(1))|0);
 var $66=$sptr;
 var $67=(($66+($65<<1))|0);
 var $68=HEAP16[(($67)>>1)];
 var $69=(($68<<16)>>16);
 var $70=(Math_imul($63,$69)|0);
 var $71=$f;
 var $72=((14520+($71<<1))|0);
 var $73=HEAP16[(($72)>>1)];
 var $74=(($73<<16)>>16);
 var $75=$pos;
 var $76=$sptr;
 var $77=(($76+($75<<1))|0);
 var $78=HEAP16[(($77)>>1)];
 var $79=(($78<<16)>>16);
 var $80=(Math_imul($74,$79)|0);
 var $81=((($70)+($80))|0);
 var $82=$f;
 var $83=((10424+($82<<1))|0);
 var $84=HEAP16[(($83)>>1)];
 var $85=(($84<<16)>>16);
 var $86=$pos;
 var $87=((($86)+(2))|0);
 var $88=$sptr;
 var $89=(($88+($87<<1))|0);
 var $90=HEAP16[(($89)>>1)];
 var $91=(($90<<16)>>16);
 var $92=(Math_imul($85,$91)|0);
 var $93=((($81)+($92))|0);
 var $94=$f;
 var $95=((12472+($94<<1))|0);
 var $96=HEAP16[(($95)>>1)];
 var $97=(($96<<16)>>16);
 var $98=$pos;
 var $99=((($98)+(1))|0);
 var $100=$sptr;
 var $101=(($100+($99<<1))|0);
 var $102=HEAP16[(($101)>>1)];
 var $103=(($102<<16)>>16);
 var $104=(Math_imul($97,$103)|0);
 var $105=((($93)+($104))|0);
 var $106=$105>>14;
 $smp_in=$106;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $109$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $109$1=HEAP32[(($ld$7$1)>>2)];
 var $110=$smp_in;
 var $111$0=$110;
 var $111$1=((((($110|0)<0))|0)?-1:0);
 var $112$0=___muldi3($109$0,$109$1,$111$0,$111$1);var $112$1=tempRet0;
 var $113=$5;
 var $114$0=$113;
 var $114$1=((((($113|0)<0))|0)?-1:0);
 var $115$0=___muldi3($112$0,$112$1,$114$0,$114$1);var $115$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $116$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $116$1=HEAP32[(($ld$9$1)>>2)];
 var $117=$fr1;
 var $118$0=$117;
 var $118$1=((((($117|0)<0))|0)?-1:0);
 var $119$0=___muldi3($116$0,$116$1,$118$0,$118$1);var $119$1=tempRet0;
 var $120$0=_i64Add($115$0,$115$1,$119$0,$119$1);var $120$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $121$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $121$1=HEAP32[(($ld$11$1)>>2)];
 var $122=$fr2;
 var $123$0=$122;
 var $123$1=((((($122|0)<0))|0)?-1:0);
 var $124$0=___muldi3($121$0,$121$1,$123$0,$123$1);var $124$1=tempRet0;
 var $125$0=_i64Add($120$0,$120$1,$124$0,$124$1);var $125$1=tempRet0;
 var $126$0=($125$0>>>16)|($125$1<<16);
 var $126$1=($125$1>>16)|((((((($125$1|0)<0))|0)?-1:0))<<16);
 var $127$0=$126$0;
 var $127=$127$0;
 $sr=$127;
 var $128=$fr1;
 $fr2=$128;
 var $129=$sr;
 $fr1=$129;
 var $ld$12$0=(($a0)|0);
 var $130$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($a0+4)|0);
 var $130$1=HEAP32[(($ld$13$1)>>2)];
 var $131=$smp_in;
 var $132$0=$131;
 var $132$1=((((($131|0)<0))|0)?-1:0);
 var $133$0=___muldi3($130$0,$130$1,$132$0,$132$1);var $133$1=tempRet0;
 var $134=$4;
 var $135$0=$134;
 var $135$1=((((($134|0)<0))|0)?-1:0);
 var $136$0=___muldi3($133$0,$133$1,$135$0,$135$1);var $136$1=tempRet0;
 var $ld$14$0=(($b0)|0);
 var $137$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($b0+4)|0);
 var $137$1=HEAP32[(($ld$15$1)>>2)];
 var $138=$fl1;
 var $139$0=$138;
 var $139$1=((((($138|0)<0))|0)?-1:0);
 var $140$0=___muldi3($137$0,$137$1,$139$0,$139$1);var $140$1=tempRet0;
 var $141$0=_i64Add($136$0,$136$1,$140$0,$140$1);var $141$1=tempRet0;
 var $ld$16$0=(($b1)|0);
 var $142$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($b1+4)|0);
 var $142$1=HEAP32[(($ld$17$1)>>2)];
 var $143=$fl2;
 var $144$0=$143;
 var $144$1=((((($143|0)<0))|0)?-1:0);
 var $145$0=___muldi3($142$0,$142$1,$144$0,$144$1);var $145$1=tempRet0;
 var $146$0=_i64Add($141$0,$141$1,$145$0,$145$1);var $146$1=tempRet0;
 var $147$0=($146$0>>>16)|($146$1<<16);
 var $147$1=($146$1>>16)|((((((($146$1|0)<0))|0)?-1:0))<<16);
 var $148$0=$147$0;
 var $148=$148$0;
 $sl=$148;
 var $149=$fl1;
 $fl2=$149;
 var $150=$sl;
 $fl1=$150;
 var $151=$1;
 var $152=(($151+108)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)!=0;
 if($154){label=7;break;}else{label=8;break;}
 case 7: 
 var $156=$1;
 var $157=(($156+108)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(((16)-($158))|0);
 $a=$159;
 var $160=$sr;
 var $161=$a;
 var $162=(Math_imul($160,$161)|0);
 var $163=$162>>4;
 var $164=$2;
 var $165=(($164+4)|0);
 $2=$165;
 var $166=HEAP32[(($164)>>2)];
 var $167=((($166)+($163))|0);
 HEAP32[(($164)>>2)]=$167;
 var $168=$sl;
 var $169=$a;
 var $170=(Math_imul($168,$169)|0);
 var $171=$170>>4;
 var $172=$2;
 var $173=(($172+4)|0);
 $2=$173;
 var $174=HEAP32[(($172)>>2)];
 var $175=((($174)+($171))|0);
 HEAP32[(($172)>>2)]=$175;
 var $176=$1;
 var $177=(($176+108)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=((($178)-(1))|0);
 HEAP32[(($177)>>2)]=$179;
 label=9;break;
 case 8: 
 var $181=$sr;
 var $182=$2;
 var $183=(($182+4)|0);
 $2=$183;
 var $184=HEAP32[(($182)>>2)];
 var $185=((($184)+($181))|0);
 HEAP32[(($182)>>2)]=$185;
 var $186=$sl;
 var $187=$2;
 var $188=(($187+4)|0);
 $2=$188;
 var $189=HEAP32[(($187)>>2)];
 var $190=((($189)+($186))|0);
 HEAP32[(($187)>>2)]=$190;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $194=$6;
 var $195=$frac;
 var $196=((($195)+($194))|0);
 $frac=$196;
 var $197=$frac;
 var $198=$197>>16;
 var $199=$pos;
 var $200=((($199)+($198))|0);
 $pos=$200;
 var $201=$frac;
 var $202=$201&65535;
 $frac=$202;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $207=$fl1;
 var $208=$1;
 var $209=(($208+72)|0);
 var $210=(($209+8)|0);
 HEAP32[(($210)>>2)]=$207;
 var $211=$fl2;
 var $212=$1;
 var $213=(($212+72)|0);
 var $214=(($213+12)|0);
 HEAP32[(($214)>>2)]=$211;
 label=16;break;
 case 16: 
 var $216=$fr1;
 var $217=$1;
 var $218=(($217+72)|0);
 var $219=(($218)|0);
 HEAP32[(($219)>>2)]=$216;
 var $220=$fr2;
 var $221=$1;
 var $222=(($221+72)|0);
 var $223=(($222+4)|0);
 HEAP32[(($223)>>2)]=$220;
 label=17;break;
 case 17: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_8bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 var $f;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 $sptr=$9;
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 $pos=$12;
 var $13=$1;
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 $frac=$15;
 var $16=$1;
 var $17=(($16+72)|0);
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 $fl1=$19;
 var $20=$1;
 var $21=(($20+72)|0);
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 $fl2=$23;
 var $24=$1;
 var $25=(($24+72)|0);
 var $26=(($25+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28$0=$27;
 var $28$1=((((($27|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$28$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$28$1;
 var $29=$1;
 var $30=(($29+72)|0);
 var $31=(($30+20)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33$0=$32;
 var $33$1=((((($32|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$33$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$33$1;
 var $34=$1;
 var $35=(($34+72)|0);
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38$0=$37;
 var $38$1=((((($37|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$38$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$38$1;
 label=2;break;
 case 2: 
 var $40=$3;
 var $41=((($40)-(1))|0);
 $3=$41;
 var $42=($40|0)!=0;
 if($42){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $45=$frac;
 var $46=$45>>6;
 $f=$46;
 var $47=$f;
 var $48=((16568+($47<<1))|0);
 var $49=HEAP16[(($48)>>1)];
 var $50=(($49<<16)>>16);
 var $51=$pos;
 var $52=((($51)-(1))|0);
 var $53=$sptr;
 var $54=(($53+$52)|0);
 var $55=HEAP8[($54)];
 var $56=(($55<<24)>>24);
 var $57=(Math_imul($50,$56)|0);
 var $58=$f;
 var $59=((14520+($58<<1))|0);
 var $60=HEAP16[(($59)>>1)];
 var $61=(($60<<16)>>16);
 var $62=$pos;
 var $63=$sptr;
 var $64=(($63+$62)|0);
 var $65=HEAP8[($64)];
 var $66=(($65<<24)>>24);
 var $67=(Math_imul($61,$66)|0);
 var $68=((($57)+($67))|0);
 var $69=$f;
 var $70=((10424+($69<<1))|0);
 var $71=HEAP16[(($70)>>1)];
 var $72=(($71<<16)>>16);
 var $73=$pos;
 var $74=((($73)+(2))|0);
 var $75=$sptr;
 var $76=(($75+$74)|0);
 var $77=HEAP8[($76)];
 var $78=(($77<<24)>>24);
 var $79=(Math_imul($72,$78)|0);
 var $80=((($68)+($79))|0);
 var $81=$f;
 var $82=((12472+($81<<1))|0);
 var $83=HEAP16[(($82)>>1)];
 var $84=(($83<<16)>>16);
 var $85=$pos;
 var $86=((($85)+(1))|0);
 var $87=$sptr;
 var $88=(($87+$86)|0);
 var $89=HEAP8[($88)];
 var $90=(($89<<24)>>24);
 var $91=(Math_imul($84,$90)|0);
 var $92=((($80)+($91))|0);
 var $93=$92>>14;
 $smp_in=$93;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $96$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $96$1=HEAP32[(($ld$7$1)>>2)];
 var $97=$smp_in;
 var $98$0=$97;
 var $98$1=((((($97|0)<0))|0)?-1:0);
 var $99$0=___muldi3($96$0,$96$1,$98$0,$98$1);var $99$1=tempRet0;
 var $100=$4;
 var $101$0=$100;
 var $101$1=((((($100|0)<0))|0)?-1:0);
 var $102$0=___muldi3($99$0,$99$1,$101$0,$101$1);var $102$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $103$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $103$1=HEAP32[(($ld$9$1)>>2)];
 var $104=$fl1;
 var $105$0=$104;
 var $105$1=((((($104|0)<0))|0)?-1:0);
 var $106$0=___muldi3($103$0,$103$1,$105$0,$105$1);var $106$1=tempRet0;
 var $107$0=_i64Add($102$0,$102$1,$106$0,$106$1);var $107$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $108$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $108$1=HEAP32[(($ld$11$1)>>2)];
 var $109=$fl2;
 var $110$0=$109;
 var $110$1=((((($109|0)<0))|0)?-1:0);
 var $111$0=___muldi3($108$0,$108$1,$110$0,$110$1);var $111$1=tempRet0;
 var $112$0=_i64Add($107$0,$107$1,$111$0,$111$1);var $112$1=tempRet0;
 var $113$0=($112$0>>>16)|($112$1<<16);
 var $113$1=($112$1>>16)|((((((($112$1|0)<0))|0)?-1:0))<<16);
 var $114$0=$113$0;
 var $114=$114$0;
 $sl=$114;
 var $115=$fl1;
 $fl2=$115;
 var $116=$sl;
 $fl1=$116;
 var $117=$1;
 var $118=(($117+108)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)!=0;
 if($120){label=7;break;}else{label=8;break;}
 case 7: 
 var $122=$sl;
 var $123=$1;
 var $124=(($123+108)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(((16)-($125))|0);
 var $127=(Math_imul($122,$126)|0);
 var $128=$127>>4;
 var $129=$2;
 var $130=(($129+4)|0);
 $2=$130;
 var $131=HEAP32[(($129)>>2)];
 var $132=((($131)+($128))|0);
 HEAP32[(($129)>>2)]=$132;
 var $133=$1;
 var $134=(($133+108)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=((($135)-(1))|0);
 HEAP32[(($134)>>2)]=$136;
 label=9;break;
 case 8: 
 var $138=$sl;
 var $139=$2;
 var $140=(($139+4)|0);
 $2=$140;
 var $141=HEAP32[(($139)>>2)];
 var $142=((($141)+($138))|0);
 HEAP32[(($139)>>2)]=$142;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $146=$6;
 var $147=$frac;
 var $148=((($147)+($146))|0);
 $frac=$148;
 var $149=$frac;
 var $150=$149>>16;
 var $151=$pos;
 var $152=((($151)+($150))|0);
 $pos=$152;
 var $153=$frac;
 var $154=$153&65535;
 $frac=$154;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 var $158=$fl1;
 var $159=$1;
 var $160=(($159+72)|0);
 var $161=(($160+8)|0);
 HEAP32[(($161)>>2)]=$158;
 var $162=$fl2;
 var $163=$1;
 var $164=(($163+72)|0);
 var $165=(($164+12)|0);
 HEAP32[(($165)>>2)]=$162;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _smix_mono_16bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $smp_in;
 var $sptr;
 var $pos;
 var $frac;
 var $fl1;
 var $fl2;
 var $a0=sp;
 var $b0=(sp)+(8);
 var $b1=(sp)+(16);
 var $sl;
 var $f;
 $1=$vi;
 $2=$buffer;
 $3=$count;
 $4=$vl;
 $5=$vr;
 $6=$step;
 var $7=$1;
 var $8=(($7+68)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $sptr=$10;
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 $pos=$13;
 var $14=$1;
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 $frac=$16;
 var $17=$1;
 var $18=(($17+72)|0);
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 $fl1=$20;
 var $21=$1;
 var $22=(($21+72)|0);
 var $23=(($22+12)|0);
 var $24=HEAP32[(($23)>>2)];
 $fl2=$24;
 var $25=$1;
 var $26=(($25+72)|0);
 var $27=(($26+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29$0=$28;
 var $29$1=((((($28|0)<0))|0)?-1:0);
 var $st$0$0=(($a0)|0);
 HEAP32[(($st$0$0)>>2)]=$29$0;
 var $st$1$1=(($a0+4)|0);
 HEAP32[(($st$1$1)>>2)]=$29$1;
 var $30=$1;
 var $31=(($30+72)|0);
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34$0=$33;
 var $34$1=((((($33|0)<0))|0)?-1:0);
 var $st$2$0=(($b0)|0);
 HEAP32[(($st$2$0)>>2)]=$34$0;
 var $st$3$1=(($b0+4)|0);
 HEAP32[(($st$3$1)>>2)]=$34$1;
 var $35=$1;
 var $36=(($35+72)|0);
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39$0=$38;
 var $39$1=((((($38|0)<0))|0)?-1:0);
 var $st$4$0=(($b1)|0);
 HEAP32[(($st$4$0)>>2)]=$39$0;
 var $st$5$1=(($b1+4)|0);
 HEAP32[(($st$5$1)>>2)]=$39$1;
 var $40=$4;
 var $41=$40>>8;
 $4=$41;
 label=2;break;
 case 2: 
 var $43=$3;
 var $44=((($43)-(1))|0);
 $3=$44;
 var $45=($43|0)!=0;
 if($45){label=3;break;}else{label=13;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $48=$frac;
 var $49=$48>>6;
 $f=$49;
 var $50=$f;
 var $51=((16568+($50<<1))|0);
 var $52=HEAP16[(($51)>>1)];
 var $53=(($52<<16)>>16);
 var $54=$pos;
 var $55=((($54)-(1))|0);
 var $56=$sptr;
 var $57=(($56+($55<<1))|0);
 var $58=HEAP16[(($57)>>1)];
 var $59=(($58<<16)>>16);
 var $60=(Math_imul($53,$59)|0);
 var $61=$f;
 var $62=((14520+($61<<1))|0);
 var $63=HEAP16[(($62)>>1)];
 var $64=(($63<<16)>>16);
 var $65=$pos;
 var $66=$sptr;
 var $67=(($66+($65<<1))|0);
 var $68=HEAP16[(($67)>>1)];
 var $69=(($68<<16)>>16);
 var $70=(Math_imul($64,$69)|0);
 var $71=((($60)+($70))|0);
 var $72=$f;
 var $73=((10424+($72<<1))|0);
 var $74=HEAP16[(($73)>>1)];
 var $75=(($74<<16)>>16);
 var $76=$pos;
 var $77=((($76)+(2))|0);
 var $78=$sptr;
 var $79=(($78+($77<<1))|0);
 var $80=HEAP16[(($79)>>1)];
 var $81=(($80<<16)>>16);
 var $82=(Math_imul($75,$81)|0);
 var $83=((($71)+($82))|0);
 var $84=$f;
 var $85=((12472+($84<<1))|0);
 var $86=HEAP16[(($85)>>1)];
 var $87=(($86<<16)>>16);
 var $88=$pos;
 var $89=((($88)+(1))|0);
 var $90=$sptr;
 var $91=(($90+($89<<1))|0);
 var $92=HEAP16[(($91)>>1)];
 var $93=(($92<<16)>>16);
 var $94=(Math_imul($87,$93)|0);
 var $95=((($83)+($94))|0);
 var $96=$95>>14;
 $smp_in=$96;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $ld$6$0=(($a0)|0);
 var $99$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($a0+4)|0);
 var $99$1=HEAP32[(($ld$7$1)>>2)];
 var $100=$smp_in;
 var $101$0=$100;
 var $101$1=((((($100|0)<0))|0)?-1:0);
 var $102$0=___muldi3($99$0,$99$1,$101$0,$101$1);var $102$1=tempRet0;
 var $103=$4;
 var $104$0=$103;
 var $104$1=((((($103|0)<0))|0)?-1:0);
 var $105$0=___muldi3($102$0,$102$1,$104$0,$104$1);var $105$1=tempRet0;
 var $ld$8$0=(($b0)|0);
 var $106$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($b0+4)|0);
 var $106$1=HEAP32[(($ld$9$1)>>2)];
 var $107=$fl1;
 var $108$0=$107;
 var $108$1=((((($107|0)<0))|0)?-1:0);
 var $109$0=___muldi3($106$0,$106$1,$108$0,$108$1);var $109$1=tempRet0;
 var $110$0=_i64Add($105$0,$105$1,$109$0,$109$1);var $110$1=tempRet0;
 var $ld$10$0=(($b1)|0);
 var $111$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b1+4)|0);
 var $111$1=HEAP32[(($ld$11$1)>>2)];
 var $112=$fl2;
 var $113$0=$112;
 var $113$1=((((($112|0)<0))|0)?-1:0);
 var $114$0=___muldi3($111$0,$111$1,$113$0,$113$1);var $114$1=tempRet0;
 var $115$0=_i64Add($110$0,$110$1,$114$0,$114$1);var $115$1=tempRet0;
 var $116$0=($115$0>>>16)|($115$1<<16);
 var $116$1=($115$1>>16)|((((((($115$1|0)<0))|0)?-1:0))<<16);
 var $117$0=$116$0;
 var $117=$117$0;
 $sl=$117;
 var $118=$fl1;
 $fl2=$118;
 var $119=$sl;
 $fl1=$119;
 var $120=$1;
 var $121=(($120+108)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($122|0)!=0;
 if($123){label=7;break;}else{label=8;break;}
 case 7: 
 var $125=$sl;
 var $126=$1;
 var $127=(($126+108)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(((16)-($128))|0);
 var $130=(Math_imul($125,$129)|0);
 var $131=$130>>4;
 var $132=$2;
 var $133=(($132+4)|0);
 $2=$133;
 var $134=HEAP32[(($132)>>2)];
 var $135=((($134)+($131))|0);
 HEAP32[(($132)>>2)]=$135;
 var $136=$1;
 var $137=(($136+108)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=((($138)-(1))|0);
 HEAP32[(($137)>>2)]=$139;
 label=9;break;
 case 8: 
 var $141=$sl;
 var $142=$2;
 var $143=(($142+4)|0);
 $2=$143;
 var $144=HEAP32[(($142)>>2)];
 var $145=((($144)+($141))|0);
 HEAP32[(($142)>>2)]=$145;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $149=$6;
 var $150=$frac;
 var $151=((($150)+($149))|0);
 $frac=$151;
 var $152=$frac;
 var $153=$152>>16;
 var $154=$pos;
 var $155=((($154)+($153))|0);
 $pos=$155;
 var $156=$frac;
 var $157=$156&65535;
 $frac=$157;
 label=12;break;
 case 12: 
 label=2;break;
 case 13: 
 label=14;break;
 case 14: 
 var $161=$fl1;
 var $162=$1;
 var $163=(($162+72)|0);
 var $164=(($163+8)|0);
 HEAP32[(($164)>>2)]=$161;
 var $165=$fl2;
 var $166=$1;
 var $167=(($166+72)|0);
 var $168=(($167+12)|0);
 HEAP32[(($168)>>2)]=$165;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((32112)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((32152+($18<<2))|0);
 var $20=$19;
 var $_sum111=((($18)+(2))|0);
 var $21=((32152+($_sum111<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((32112)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((32128)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum113114=$40|4;
 var $44=(($43+$_sum113114)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((32120)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((32152+($83<<2))|0);
 var $85=$84;
 var $_sum104=((($83)+(2))|0);
 var $86=((32152+($_sum104<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((32112)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((32128)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum106107=$8|4;
 var $113=(($109+$_sum106107)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((32120)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((32132)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((32152+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((32112)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((32112)>>2)]=$130;
 var $_sum109_pre=((($122)+(2))|0);
 var $_pre=((32152+($_sum109_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum110=((($122)+(2))|0);
 var $132=((32152+($_sum110<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((32128)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((32120)>>2)]=$106;
 HEAP32[((32132)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((32116)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((32416+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((32128)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((32416+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((32116)>>2)];
 var $252=$251&$250;
 HEAP32[((32116)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((32128)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((32128)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((32128)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((32128)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i137=$8|4;
 var $311=(($192+$_sum_i137)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((32120)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((32132)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((32152+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((32112)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((32112)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((32152+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((32152+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((32128)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((32120)>>2)]=$rsize_0_i;
 HEAP32[((32132)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $344=($342|0)==0;
 if($344){var $nb_0=$8;label=160;break;}else{var $mem_0=$343;label=341;break;}
 case 78: 
 var $346=($bytes>>>0)>4294967231;
 if($346){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $348=((($bytes)+(11))|0);
 var $349=$348&-8;
 var $350=HEAP32[((32116)>>2)];
 var $351=($350|0)==0;
 if($351){var $nb_0=$349;label=160;break;}else{label=80;break;}
 case 80: 
 var $353=(((-$349))|0);
 var $354=$348>>>8;
 var $355=($354|0)==0;
 if($355){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $357=($349>>>0)>16777215;
 if($357){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $359=((($354)+(1048320))|0);
 var $360=$359>>>16;
 var $361=$360&8;
 var $362=$354<<$361;
 var $363=((($362)+(520192))|0);
 var $364=$363>>>16;
 var $365=$364&4;
 var $366=$365|$361;
 var $367=$362<<$365;
 var $368=((($367)+(245760))|0);
 var $369=$368>>>16;
 var $370=$369&2;
 var $371=$366|$370;
 var $372=(((14)-($371))|0);
 var $373=$367<<$370;
 var $374=$373>>>15;
 var $375=((($372)+($374))|0);
 var $376=$375<<1;
 var $377=((($375)+(7))|0);
 var $378=$349>>>($377>>>0);
 var $379=$378&1;
 var $380=$379|$376;
 var $idx_0_i=$380;label=83;break;
 case 83: 
 var $idx_0_i;
 var $382=((32416+($idx_0_i<<2))|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($383|0)==0;
 if($384){var $v_2_i=0;var $rsize_2_i=$353;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $386=($idx_0_i|0)==31;
 if($386){var $391=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $388=$idx_0_i>>>1;
 var $389=(((25)-($388))|0);
 var $391=$389;label=86;break;
 case 86: 
 var $391;
 var $392=$349<<$391;
 var $v_0_i118=0;var $rsize_0_i117=$353;var $t_0_i116=$383;var $sizebits_0_i=$392;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i116;
 var $rsize_0_i117;
 var $v_0_i118;
 var $394=(($t_0_i116+4)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=$395&-8;
 var $397=((($396)-($349))|0);
 var $398=($397>>>0)<($rsize_0_i117>>>0);
 if($398){label=88;break;}else{var $v_1_i=$v_0_i118;var $rsize_1_i=$rsize_0_i117;label=89;break;}
 case 88: 
 var $400=($396|0)==($349|0);
 if($400){var $v_2_i=$t_0_i116;var $rsize_2_i=$397;var $t_1_i=$t_0_i116;label=90;break;}else{var $v_1_i=$t_0_i116;var $rsize_1_i=$397;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $402=(($t_0_i116+20)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=$sizebits_0_i>>>31;
 var $405=(($t_0_i116+16+($404<<2))|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=($403|0)==0;
 var $408=($403|0)==($406|0);
 var $or_cond_i=$407|$408;
 var $rst_1_i=($or_cond_i?$rst_0_i:$403);
 var $409=($406|0)==0;
 var $410=$sizebits_0_i<<1;
 if($409){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i118=$v_1_i;var $rsize_0_i117=$rsize_1_i;var $t_0_i116=$406;var $sizebits_0_i=$410;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $411=($t_1_i|0)==0;
 var $412=($v_2_i|0)==0;
 var $or_cond21_i=$411&$412;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $414=2<<$idx_0_i;
 var $415=(((-$414))|0);
 var $416=$414|$415;
 var $417=$350&$416;
 var $418=($417|0)==0;
 if($418){var $nb_0=$349;label=160;break;}else{label=92;break;}
 case 92: 
 var $420=(((-$417))|0);
 var $421=$417&$420;
 var $422=((($421)-(1))|0);
 var $423=$422>>>12;
 var $424=$423&16;
 var $425=$422>>>($424>>>0);
 var $426=$425>>>5;
 var $427=$426&8;
 var $428=$427|$424;
 var $429=$425>>>($427>>>0);
 var $430=$429>>>2;
 var $431=$430&4;
 var $432=$428|$431;
 var $433=$429>>>($431>>>0);
 var $434=$433>>>1;
 var $435=$434&2;
 var $436=$432|$435;
 var $437=$433>>>($435>>>0);
 var $438=$437>>>1;
 var $439=$438&1;
 var $440=$436|$439;
 var $441=$437>>>($439>>>0);
 var $442=((($440)+($441))|0);
 var $443=((32416+($442<<2))|0);
 var $444=HEAP32[(($443)>>2)];
 var $t_2_ph_i=$444;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $445=($t_2_ph_i|0)==0;
 if($445){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_228_i=$t_2_ph_i;var $rsize_329_i=$rsize_2_i;var $v_330_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_330_i;
 var $rsize_329_i;
 var $t_228_i;
 var $446=(($t_228_i+4)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=$447&-8;
 var $449=((($448)-($349))|0);
 var $450=($449>>>0)<($rsize_329_i>>>0);
 var $_rsize_3_i=($450?$449:$rsize_329_i);
 var $t_2_v_3_i=($450?$t_228_i:$v_330_i);
 var $451=(($t_228_i+16)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($452|0)==0;
 if($453){label=95;break;}else{var $t_228_i=$452;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $454=(($t_228_i+20)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=($455|0)==0;
 if($456){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_228_i=$455;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $457=($v_3_lcssa_i|0)==0;
 if($457){var $nb_0=$349;label=160;break;}else{label=97;break;}
 case 97: 
 var $459=HEAP32[((32120)>>2)];
 var $460=((($459)-($349))|0);
 var $461=($rsize_3_lcssa_i>>>0)<($460>>>0);
 if($461){label=98;break;}else{var $nb_0=$349;label=160;break;}
 case 98: 
 var $463=$v_3_lcssa_i;
 var $464=HEAP32[((32128)>>2)];
 var $465=($463>>>0)<($464>>>0);
 if($465){label=158;break;}else{label=99;break;}
 case 99: 
 var $467=(($463+$349)|0);
 var $468=$467;
 var $469=($463>>>0)<($467>>>0);
 if($469){label=100;break;}else{label=158;break;}
 case 100: 
 var $471=(($v_3_lcssa_i+24)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($v_3_lcssa_i+12)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=($474|0)==($v_3_lcssa_i|0);
 if($475){label=106;break;}else{label=101;break;}
 case 101: 
 var $477=(($v_3_lcssa_i+8)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=$478;
 var $480=($479>>>0)<($464>>>0);
 if($480){label=105;break;}else{label=102;break;}
 case 102: 
 var $482=(($478+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($483|0)==($v_3_lcssa_i|0);
 if($484){label=103;break;}else{label=105;break;}
 case 103: 
 var $486=(($474+8)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=($487|0)==($v_3_lcssa_i|0);
 if($488){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($482)>>2)]=$474;
 HEAP32[(($486)>>2)]=$478;
 var $R_1_i122=$474;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $491=(($v_3_lcssa_i+20)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($492|0)==0;
 if($493){label=107;break;}else{var $R_0_i120=$492;var $RP_0_i119=$491;label=108;break;}
 case 107: 
 var $495=(($v_3_lcssa_i+16)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($496|0)==0;
 if($497){var $R_1_i122=0;label=113;break;}else{var $R_0_i120=$496;var $RP_0_i119=$495;label=108;break;}
 case 108: 
 var $RP_0_i119;
 var $R_0_i120;
 var $498=(($R_0_i120+20)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)==0;
 if($500){label=109;break;}else{var $R_0_i120=$499;var $RP_0_i119=$498;label=108;break;}
 case 109: 
 var $502=(($R_0_i120+16)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($503|0)==0;
 if($504){label=110;break;}else{var $R_0_i120=$503;var $RP_0_i119=$502;label=108;break;}
 case 110: 
 var $506=$RP_0_i119;
 var $507=($506>>>0)<($464>>>0);
 if($507){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i119)>>2)]=0;
 var $R_1_i122=$R_0_i120;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i122;
 var $511=($472|0)==0;
 if($511){label=133;break;}else{label=114;break;}
 case 114: 
 var $513=(($v_3_lcssa_i+28)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=((32416+($514<<2))|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=($v_3_lcssa_i|0)==($516|0);
 if($517){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($515)>>2)]=$R_1_i122;
 var $cond_i123=($R_1_i122|0)==0;
 if($cond_i123){label=116;break;}else{label=123;break;}
 case 116: 
 var $519=HEAP32[(($513)>>2)];
 var $520=1<<$519;
 var $521=$520^-1;
 var $522=HEAP32[((32116)>>2)];
 var $523=$522&$521;
 HEAP32[((32116)>>2)]=$523;
 label=133;break;
 case 117: 
 var $525=$472;
 var $526=HEAP32[((32128)>>2)];
 var $527=($525>>>0)<($526>>>0);
 if($527){label=121;break;}else{label=118;break;}
 case 118: 
 var $529=(($472+16)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=($530|0)==($v_3_lcssa_i|0);
 if($531){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($529)>>2)]=$R_1_i122;
 label=122;break;
 case 120: 
 var $534=(($472+20)|0);
 HEAP32[(($534)>>2)]=$R_1_i122;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $537=($R_1_i122|0)==0;
 if($537){label=133;break;}else{label=123;break;}
 case 123: 
 var $539=$R_1_i122;
 var $540=HEAP32[((32128)>>2)];
 var $541=($539>>>0)<($540>>>0);
 if($541){label=132;break;}else{label=124;break;}
 case 124: 
 var $543=(($R_1_i122+24)|0);
 HEAP32[(($543)>>2)]=$472;
 var $544=(($v_3_lcssa_i+16)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=($545|0)==0;
 if($546){label=128;break;}else{label=125;break;}
 case 125: 
 var $548=$545;
 var $549=HEAP32[((32128)>>2)];
 var $550=($548>>>0)<($549>>>0);
 if($550){label=127;break;}else{label=126;break;}
 case 126: 
 var $552=(($R_1_i122+16)|0);
 HEAP32[(($552)>>2)]=$545;
 var $553=(($545+24)|0);
 HEAP32[(($553)>>2)]=$R_1_i122;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $556=(($v_3_lcssa_i+20)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=($557|0)==0;
 if($558){label=133;break;}else{label=129;break;}
 case 129: 
 var $560=$557;
 var $561=HEAP32[((32128)>>2)];
 var $562=($560>>>0)<($561>>>0);
 if($562){label=131;break;}else{label=130;break;}
 case 130: 
 var $564=(($R_1_i122+20)|0);
 HEAP32[(($564)>>2)]=$557;
 var $565=(($557+24)|0);
 HEAP32[(($565)>>2)]=$R_1_i122;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $569=($rsize_3_lcssa_i>>>0)<16;
 if($569){label=134;break;}else{label=135;break;}
 case 134: 
 var $571=((($rsize_3_lcssa_i)+($349))|0);
 var $572=$571|3;
 var $573=(($v_3_lcssa_i+4)|0);
 HEAP32[(($573)>>2)]=$572;
 var $_sum19_i=((($571)+(4))|0);
 var $574=(($463+$_sum19_i)|0);
 var $575=$574;
 var $576=HEAP32[(($575)>>2)];
 var $577=$576|1;
 HEAP32[(($575)>>2)]=$577;
 label=159;break;
 case 135: 
 var $579=$349|3;
 var $580=(($v_3_lcssa_i+4)|0);
 HEAP32[(($580)>>2)]=$579;
 var $581=$rsize_3_lcssa_i|1;
 var $_sum_i125136=$349|4;
 var $582=(($463+$_sum_i125136)|0);
 var $583=$582;
 HEAP32[(($583)>>2)]=$581;
 var $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
 var $584=(($463+$_sum1_i126)|0);
 var $585=$584;
 HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
 var $586=$rsize_3_lcssa_i>>>3;
 var $587=($rsize_3_lcssa_i>>>0)<256;
 if($587){label=136;break;}else{label=141;break;}
 case 136: 
 var $589=$586<<1;
 var $590=((32152+($589<<2))|0);
 var $591=$590;
 var $592=HEAP32[((32112)>>2)];
 var $593=1<<$586;
 var $594=$592&$593;
 var $595=($594|0)==0;
 if($595){label=137;break;}else{label=138;break;}
 case 137: 
 var $597=$592|$593;
 HEAP32[((32112)>>2)]=$597;
 var $_sum15_pre_i=((($589)+(2))|0);
 var $_pre_i127=((32152+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$591;var $_pre_phi_i128=$_pre_i127;label=140;break;
 case 138: 
 var $_sum18_i=((($589)+(2))|0);
 var $599=((32152+($_sum18_i<<2))|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=$600;
 var $602=HEAP32[((32128)>>2)];
 var $603=($601>>>0)<($602>>>0);
 if($603){label=139;break;}else{var $F5_0_i=$600;var $_pre_phi_i128=$599;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i128;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i128)>>2)]=$468;
 var $606=(($F5_0_i+12)|0);
 HEAP32[(($606)>>2)]=$468;
 var $_sum16_i=((($349)+(8))|0);
 var $607=(($463+$_sum16_i)|0);
 var $608=$607;
 HEAP32[(($608)>>2)]=$F5_0_i;
 var $_sum17_i=((($349)+(12))|0);
 var $609=(($463+$_sum17_i)|0);
 var $610=$609;
 HEAP32[(($610)>>2)]=$591;
 label=159;break;
 case 141: 
 var $612=$467;
 var $613=$rsize_3_lcssa_i>>>8;
 var $614=($613|0)==0;
 if($614){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $616=($rsize_3_lcssa_i>>>0)>16777215;
 if($616){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $618=((($613)+(1048320))|0);
 var $619=$618>>>16;
 var $620=$619&8;
 var $621=$613<<$620;
 var $622=((($621)+(520192))|0);
 var $623=$622>>>16;
 var $624=$623&4;
 var $625=$624|$620;
 var $626=$621<<$624;
 var $627=((($626)+(245760))|0);
 var $628=$627>>>16;
 var $629=$628&2;
 var $630=$625|$629;
 var $631=(((14)-($630))|0);
 var $632=$626<<$629;
 var $633=$632>>>15;
 var $634=((($631)+($633))|0);
 var $635=$634<<1;
 var $636=((($634)+(7))|0);
 var $637=$rsize_3_lcssa_i>>>($636>>>0);
 var $638=$637&1;
 var $639=$638|$635;
 var $I7_0_i=$639;label=144;break;
 case 144: 
 var $I7_0_i;
 var $641=((32416+($I7_0_i<<2))|0);
 var $_sum2_i=((($349)+(28))|0);
 var $642=(($463+$_sum2_i)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=$I7_0_i;
 var $_sum3_i129=((($349)+(16))|0);
 var $644=(($463+$_sum3_i129)|0);
 var $_sum4_i130=((($349)+(20))|0);
 var $645=(($463+$_sum4_i130)|0);
 var $646=$645;
 HEAP32[(($646)>>2)]=0;
 var $647=$644;
 HEAP32[(($647)>>2)]=0;
 var $648=HEAP32[((32116)>>2)];
 var $649=1<<$I7_0_i;
 var $650=$648&$649;
 var $651=($650|0)==0;
 if($651){label=145;break;}else{label=146;break;}
 case 145: 
 var $653=$648|$649;
 HEAP32[((32116)>>2)]=$653;
 HEAP32[(($641)>>2)]=$612;
 var $654=$641;
 var $_sum5_i=((($349)+(24))|0);
 var $655=(($463+$_sum5_i)|0);
 var $656=$655;
 HEAP32[(($656)>>2)]=$654;
 var $_sum6_i=((($349)+(12))|0);
 var $657=(($463+$_sum6_i)|0);
 var $658=$657;
 HEAP32[(($658)>>2)]=$612;
 var $_sum7_i=((($349)+(8))|0);
 var $659=(($463+$_sum7_i)|0);
 var $660=$659;
 HEAP32[(($660)>>2)]=$612;
 label=159;break;
 case 146: 
 var $662=HEAP32[(($641)>>2)];
 var $663=($I7_0_i|0)==31;
 if($663){var $668=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $665=$I7_0_i>>>1;
 var $666=(((25)-($665))|0);
 var $668=$666;label=148;break;
 case 148: 
 var $668;
 var $669=$rsize_3_lcssa_i<<$668;
 var $K12_0_i=$669;var $T_0_i=$662;label=149;break;
 case 149: 
 var $T_0_i;
 var $K12_0_i;
 var $671=(($T_0_i+4)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672&-8;
 var $674=($673|0)==($rsize_3_lcssa_i|0);
 if($674){label=154;break;}else{label=150;break;}
 case 150: 
 var $676=$K12_0_i>>>31;
 var $677=(($T_0_i+16+($676<<2))|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=($678|0)==0;
 var $680=$K12_0_i<<1;
 if($679){label=151;break;}else{var $K12_0_i=$680;var $T_0_i=$678;label=149;break;}
 case 151: 
 var $682=$677;
 var $683=HEAP32[((32128)>>2)];
 var $684=($682>>>0)<($683>>>0);
 if($684){label=153;break;}else{label=152;break;}
 case 152: 
 HEAP32[(($677)>>2)]=$612;
 var $_sum12_i=((($349)+(24))|0);
 var $686=(($463+$_sum12_i)|0);
 var $687=$686;
 HEAP32[(($687)>>2)]=$T_0_i;
 var $_sum13_i=((($349)+(12))|0);
 var $688=(($463+$_sum13_i)|0);
 var $689=$688;
 HEAP32[(($689)>>2)]=$612;
 var $_sum14_i=((($349)+(8))|0);
 var $690=(($463+$_sum14_i)|0);
 var $691=$690;
 HEAP32[(($691)>>2)]=$612;
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $694=(($T_0_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_i;
 var $697=HEAP32[((32128)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=157;break;}else{label=155;break;}
 case 155: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=157;break;}else{label=156;break;}
 case 156: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$612;
 HEAP32[(($694)>>2)]=$612;
 var $_sum9_i=((($349)+(8))|0);
 var $704=(($463+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($349)+(12))|0);
 var $706=(($463+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_i;
 var $_sum11_i=((($349)+(24))|0);
 var $708=(($463+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $713=($711|0)==0;
 if($713){var $nb_0=$349;label=160;break;}else{var $mem_0=$712;label=341;break;}
 case 160: 
 var $nb_0;
 var $714=HEAP32[((32120)>>2)];
 var $715=($nb_0>>>0)>($714>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 var $717=((($714)-($nb_0))|0);
 var $718=HEAP32[((32132)>>2)];
 var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 var $721=$718;
 var $722=(($721+$nb_0)|0);
 var $723=$722;
 HEAP32[((32132)>>2)]=$723;
 HEAP32[((32120)>>2)]=$717;
 var $724=$717|1;
 var $_sum102=((($nb_0)+(4))|0);
 var $725=(($721+$_sum102)|0);
 var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 var $727=(($721+$714)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 var $729=$nb_0|3;
 var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((32120)>>2)]=0;
 HEAP32[((32132)>>2)]=0;
 var $732=$714|3;
 var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 var $734=$718;
 var $_sum101=((($714)+(4))|0);
 var $735=(($734+$_sum101)|0);
 var $736=$735;
 var $737=HEAP32[(($736)>>2)];
 var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 var $740=(($718+8)|0);
 var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 var $743=HEAP32[((32124)>>2)];
 var $744=($nb_0>>>0)<($743>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 var $746=((($743)-($nb_0))|0);
 HEAP32[((32124)>>2)]=$746;
 var $747=HEAP32[((32136)>>2)];
 var $748=$747;
 var $749=(($748+$nb_0)|0);
 var $750=$749;
 HEAP32[((32136)>>2)]=$750;
 var $751=$746|1;
 var $_sum=((($nb_0)+(4))|0);
 var $752=(($748+$_sum)|0);
 var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 var $754=$nb_0|3;
 var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 var $756=(($747+8)|0);
 var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 var $759=HEAP32[((28832)>>2)];
 var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 var $762=_sysconf(30);
 var $763=((($762)-(1))|0);
 var $764=$763&$762;
 var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((28840)>>2)]=$762;
 HEAP32[((28836)>>2)]=$762;
 HEAP32[((28844)>>2)]=-1;
 HEAP32[((28848)>>2)]=-1;
 HEAP32[((28852)>>2)]=0;
 HEAP32[((32556)>>2)]=0;
 var $767=_time(0);
 var $768=$767&-16;
 var $769=$768^1431655768;
 HEAP32[((28832)>>2)]=$769;
 label=171;break;
 case 171: 
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((28840)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $779=HEAP32[((32552)>>2)];
 var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 var $782=HEAP32[((32544)>>2)];
 var $783=((($782)+($776))|0);
 var $784=($783>>>0)<=($782>>>0);
 var $785=($783>>>0)>($779>>>0);
 var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $787=HEAP32[((32556)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $791=HEAP32[((32136)>>2)];
 var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 var $794=$791;
 var $sp_0_i_i=32560;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $796=(($sp_0_i_i)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 var $800=(($sp_0_i_i+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($797+$801)|0);
 var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 var $805=(($sp_0_i_i+8)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 var $809=_sbrk(0);
 var $810=($809|0)==-1;
 if($810){var $tsize_0303639_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $812=$809;
 var $813=HEAP32[((28836)>>2)];
 var $814=((($813)-(1))|0);
 var $815=$814&$812;
 var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 var $818=((($814)+($812))|0);
 var $819=(((-$813))|0);
 var $820=$818&$819;
 var $821=((($776)-($812))|0);
 var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $824=HEAP32[((32544)>>2)];
 var $825=((($824)+($ssize_0_i))|0);
 var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 var $827=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i131=$826&$827;
 if($or_cond_i131){label=185;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 185: 
 var $829=HEAP32[((32552)>>2)];
 var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 var $832=($825>>>0)<=($824>>>0);
 var $833=($825>>>0)>($829>>>0);
 var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_0303639_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $835=_sbrk($ssize_0_i);
 var $836=($835|0)==($809|0);
 var $ssize_0__i=($836?$ssize_0_i:0);
 var $__i=($836?$809:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$835;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $838=HEAP32[((32124)>>2)];
 var $839=((($774)-($838))|0);
 var $840=$839&$775;
 var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 189: 
 var $843=_sbrk($840);
 var $844=HEAP32[(($796)>>2)];
 var $845=HEAP32[(($800)>>2)];
 var $846=(($844+$845)|0);
 var $847=($843|0)==($846|0);
 var $_3_i=($847?$840:0);
 var $_4_i=($847?$843:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $849=(((-$ssize_1_i))|0);
 var $850=($tbase_0_i|0)==-1;
 if($850){label=191;break;}else{var $tsize_244_i=$tsize_0_i;var $tbase_245_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $852=($br_0_i|0)!=-1;
 var $853=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$852&$853;
 var $854=($ssize_1_i>>>0)<($771>>>0);
 var $or_cond6_i=$or_cond5_i&$854;
 if($or_cond6_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $856=HEAP32[((28840)>>2)];
 var $857=((($773)-($ssize_1_i))|0);
 var $858=((($857)+($856))|0);
 var $859=(((-$856))|0);
 var $860=$858&$859;
 var $861=($860>>>0)<2147483647;
 if($861){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $863=_sbrk($860);
 var $864=($863|0)==-1;
 if($864){label=195;break;}else{label=194;break;}
 case 194: 
 var $866=((($860)+($ssize_1_i))|0);
 var $ssize_2_i=$866;label=196;break;
 case 195: 
 var $868=_sbrk($849);
 var $tsize_0303639_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $870=($br_0_i|0)==-1;
 if($870){var $tsize_0303639_i=$tsize_0_i;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0303639_i;
 var $871=HEAP32[((32556)>>2)];
 var $872=$871|4;
 HEAP32[((32556)>>2)]=$872;
 var $tsize_1_i=$tsize_0303639_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $874=($776>>>0)<2147483647;
 if($874){label=199;break;}else{label=340;break;}
 case 199: 
 var $876=_sbrk($776);
 var $877=_sbrk(0);
 var $notlhs_i=($876|0)!=-1;
 var $notrhs_i=($877|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $878=($876>>>0)<($877>>>0);
 var $or_cond9_i=$or_cond8_not_i&$878;
 if($or_cond9_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $879=$877;
 var $880=$876;
 var $881=((($879)-($880))|0);
 var $882=((($nb_0)+(40))|0);
 var $883=($881>>>0)>($882>>>0);
 var $_tsize_1_i=($883?$881:$tsize_1_i);
 var $_tbase_1_i=($883?$876:-1);
 var $884=($_tbase_1_i|0)==-1;
 if($884){label=340;break;}else{var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $885=HEAP32[((32544)>>2)];
 var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((32544)>>2)]=$886;
 var $887=HEAP32[((32548)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((32548)>>2)]=$886;
 label=203;break;
 case 203: 
 var $890=HEAP32[((32136)>>2)];
 var $891=($890|0)==0;
 if($891){label=204;break;}else{var $sp_067_i=32560;label=211;break;}
 case 204: 
 var $893=HEAP32[((32128)>>2)];
 var $894=($893|0)==0;
 var $895=($tbase_245_i>>>0)<($893>>>0);
 var $or_cond10_i=$894|$895;
 if($or_cond10_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((32128)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((32560)>>2)]=$tbase_245_i;
 HEAP32[((32564)>>2)]=$tsize_244_i;
 HEAP32[((32572)>>2)]=0;
 var $897=HEAP32[((28832)>>2)];
 HEAP32[((32148)>>2)]=$897;
 HEAP32[((32144)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $899=$i_02_i_i<<1;
 var $900=((32152+($899<<2))|0);
 var $901=$900;
 var $_sum_i_i=((($899)+(3))|0);
 var $902=((32152+($_sum_i_i<<2))|0);
 HEAP32[(($902)>>2)]=$901;
 var $_sum1_i_i=((($899)+(2))|0);
 var $903=((32152+($_sum1_i_i<<2))|0);
 HEAP32[(($903)>>2)]=$901;
 var $904=((($i_02_i_i)+(1))|0);
 var $905=($904>>>0)<32;
 if($905){var $i_02_i_i=$904;label=207;break;}else{label=208;break;}
 case 208: 
 var $906=((($tsize_244_i)-(40))|0);
 var $907=(($tbase_245_i+8)|0);
 var $908=$907;
 var $909=$908&7;
 var $910=($909|0)==0;
 if($910){var $914=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $912=(((-$908))|0);
 var $913=$912&7;
 var $914=$913;label=210;break;
 case 210: 
 var $914;
 var $915=(($tbase_245_i+$914)|0);
 var $916=$915;
 var $917=((($906)-($914))|0);
 HEAP32[((32136)>>2)]=$916;
 HEAP32[((32124)>>2)]=$917;
 var $918=$917|1;
 var $_sum_i14_i=((($914)+(4))|0);
 var $919=(($tbase_245_i+$_sum_i14_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=$918;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $921=(($tbase_245_i+$_sum2_i_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=40;
 var $923=HEAP32[((28848)>>2)];
 HEAP32[((32140)>>2)]=$923;
 label=338;break;
 case 211: 
 var $sp_067_i;
 var $924=(($sp_067_i)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($sp_067_i+4)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($925+$927)|0);
 var $929=($tbase_245_i|0)==($928|0);
 if($929){label=213;break;}else{label=212;break;}
 case 212: 
 var $931=(($sp_067_i+8)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($932|0)==0;
 if($933){label=218;break;}else{var $sp_067_i=$932;label=211;break;}
 case 213: 
 var $934=(($sp_067_i+12)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=$935&8;
 var $937=($936|0)==0;
 if($937){label=214;break;}else{label=218;break;}
 case 214: 
 var $939=$890;
 var $940=($939>>>0)>=($925>>>0);
 var $941=($939>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$940&$941;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $943=((($927)+($tsize_244_i))|0);
 HEAP32[(($926)>>2)]=$943;
 var $944=HEAP32[((32136)>>2)];
 var $945=HEAP32[((32124)>>2)];
 var $946=((($945)+($tsize_244_i))|0);
 var $947=$944;
 var $948=(($944+8)|0);
 var $949=$948;
 var $950=$949&7;
 var $951=($950|0)==0;
 if($951){var $955=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $953=(((-$949))|0);
 var $954=$953&7;
 var $955=$954;label=217;break;
 case 217: 
 var $955;
 var $956=(($947+$955)|0);
 var $957=$956;
 var $958=((($946)-($955))|0);
 HEAP32[((32136)>>2)]=$957;
 HEAP32[((32124)>>2)]=$958;
 var $959=$958|1;
 var $_sum_i18_i=((($955)+(4))|0);
 var $960=(($947+$_sum_i18_i)|0);
 var $961=$960;
 HEAP32[(($961)>>2)]=$959;
 var $_sum2_i19_i=((($946)+(4))|0);
 var $962=(($947+$_sum2_i19_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=40;
 var $964=HEAP32[((28848)>>2)];
 HEAP32[((32140)>>2)]=$964;
 label=338;break;
 case 218: 
 var $965=HEAP32[((32128)>>2)];
 var $966=($tbase_245_i>>>0)<($965>>>0);
 if($966){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((32128)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 var $968=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_160_i=32560;label=221;break;
 case 221: 
 var $sp_160_i;
 var $970=(($sp_160_i)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==($968|0);
 if($972){label=223;break;}else{label=222;break;}
 case 222: 
 var $974=(($sp_160_i+8)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($975|0)==0;
 if($976){label=304;break;}else{var $sp_160_i=$975;label=221;break;}
 case 223: 
 var $977=(($sp_160_i+12)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$978&8;
 var $980=($979|0)==0;
 if($980){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($970)>>2)]=$tbase_245_i;
 var $982=(($sp_160_i+4)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=((($983)+($tsize_244_i))|0);
 HEAP32[(($982)>>2)]=$984;
 var $985=(($tbase_245_i+8)|0);
 var $986=$985;
 var $987=$986&7;
 var $988=($987|0)==0;
 if($988){var $993=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $990=(((-$986))|0);
 var $991=$990&7;
 var $993=$991;label=226;break;
 case 226: 
 var $993;
 var $994=(($tbase_245_i+$993)|0);
 var $_sum93_i=((($tsize_244_i)+(8))|0);
 var $995=(($tbase_245_i+$_sum93_i)|0);
 var $996=$995;
 var $997=$996&7;
 var $998=($997|0)==0;
 if($998){var $1003=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $1000=(((-$996))|0);
 var $1001=$1000&7;
 var $1003=$1001;label=228;break;
 case 228: 
 var $1003;
 var $_sum94_i=((($1003)+($tsize_244_i))|0);
 var $1004=(($tbase_245_i+$_sum94_i)|0);
 var $1005=$1004;
 var $1006=$1004;
 var $1007=$994;
 var $1008=((($1006)-($1007))|0);
 var $_sum_i21_i=((($993)+($nb_0))|0);
 var $1009=(($tbase_245_i+$_sum_i21_i)|0);
 var $1010=$1009;
 var $1011=((($1008)-($nb_0))|0);
 var $1012=$nb_0|3;
 var $_sum1_i22_i=((($993)+(4))|0);
 var $1013=(($tbase_245_i+$_sum1_i22_i)|0);
 var $1014=$1013;
 HEAP32[(($1014)>>2)]=$1012;
 var $1015=HEAP32[((32136)>>2)];
 var $1016=($1005|0)==($1015|0);
 if($1016){label=229;break;}else{label=230;break;}
 case 229: 
 var $1018=HEAP32[((32124)>>2)];
 var $1019=((($1018)+($1011))|0);
 HEAP32[((32124)>>2)]=$1019;
 HEAP32[((32136)>>2)]=$1010;
 var $1020=$1019|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1021=(($tbase_245_i+$_sum46_i_i)|0);
 var $1022=$1021;
 HEAP32[(($1022)>>2)]=$1020;
 label=303;break;
 case 230: 
 var $1024=HEAP32[((32132)>>2)];
 var $1025=($1005|0)==($1024|0);
 if($1025){label=231;break;}else{label=232;break;}
 case 231: 
 var $1027=HEAP32[((32120)>>2)];
 var $1028=((($1027)+($1011))|0);
 HEAP32[((32120)>>2)]=$1028;
 HEAP32[((32132)>>2)]=$1010;
 var $1029=$1028|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1030=(($tbase_245_i+$_sum44_i_i)|0);
 var $1031=$1030;
 HEAP32[(($1031)>>2)]=$1029;
 var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
 var $1032=(($tbase_245_i+$_sum45_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1028;
 label=303;break;
 case 232: 
 var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
 var $_sum95_i=((($_sum2_i23_i)+($1003))|0);
 var $1035=(($tbase_245_i+$_sum95_i)|0);
 var $1036=$1035;
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=$1037&3;
 var $1039=($1038|0)==1;
 if($1039){label=233;break;}else{var $oldfirst_0_i_i=$1005;var $qsize_0_i_i=$1011;label=280;break;}
 case 233: 
 var $1041=$1037&-8;
 var $1042=$1037>>>3;
 var $1043=($1037>>>0)<256;
 if($1043){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1003|8;
 var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1045=(($tbase_245_i+$_sum105_i)|0);
 var $1046=$1045;
 var $1047=HEAP32[(($1046)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum41_i_i)+($1003))|0);
 var $1048=(($tbase_245_i+$_sum106_i)|0);
 var $1049=$1048;
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=$1042<<1;
 var $1052=((32152+($1051<<2))|0);
 var $1053=$1052;
 var $1054=($1047|0)==($1053|0);
 if($1054){label=237;break;}else{label=235;break;}
 case 235: 
 var $1056=$1047;
 var $1057=HEAP32[((32128)>>2)];
 var $1058=($1056>>>0)<($1057>>>0);
 if($1058){label=245;break;}else{label=236;break;}
 case 236: 
 var $1060=(($1047+12)|0);
 var $1061=HEAP32[(($1060)>>2)];
 var $1062=($1061|0)==($1005|0);
 if($1062){label=237;break;}else{label=245;break;}
 case 237: 
 var $1063=($1050|0)==($1047|0);
 if($1063){label=238;break;}else{label=239;break;}
 case 238: 
 var $1065=1<<$1042;
 var $1066=$1065^-1;
 var $1067=HEAP32[((32112)>>2)];
 var $1068=$1067&$1066;
 HEAP32[((32112)>>2)]=$1068;
 label=279;break;
 case 239: 
 var $1070=($1050|0)==($1053|0);
 if($1070){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre56_i_i=(($1050+8)|0);
 var $_pre_phi57_i_i=$_pre56_i_i;label=243;break;
 case 241: 
 var $1072=$1050;
 var $1073=HEAP32[((32128)>>2)];
 var $1074=($1072>>>0)<($1073>>>0);
 if($1074){label=244;break;}else{label=242;break;}
 case 242: 
 var $1076=(($1050+8)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=($1077|0)==($1005|0);
 if($1078){var $_pre_phi57_i_i=$1076;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi57_i_i;
 var $1079=(($1047+12)|0);
 HEAP32[(($1079)>>2)]=$1050;
 HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1081=$1004;
 var $_sum34_i_i=$1003|24;
 var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1082=(($tbase_245_i+$_sum96_i)|0);
 var $1083=$1082;
 var $1084=HEAP32[(($1083)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum97_i=((($_sum5_i_i)+($1003))|0);
 var $1085=(($tbase_245_i+$_sum97_i)|0);
 var $1086=$1085;
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=($1087|0)==($1081|0);
 if($1088){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1003|8;
 var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1090=(($tbase_245_i+$_sum98_i)|0);
 var $1091=$1090;
 var $1092=HEAP32[(($1091)>>2)];
 var $1093=$1092;
 var $1094=HEAP32[((32128)>>2)];
 var $1095=($1093>>>0)<($1094>>>0);
 if($1095){label=251;break;}else{label=248;break;}
 case 248: 
 var $1097=(($1092+12)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1081|0);
 if($1099){label=249;break;}else{label=251;break;}
 case 249: 
 var $1101=(($1087+8)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102|0)==($1081|0);
 if($1103){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1097)>>2)]=$1087;
 HEAP32[(($1101)>>2)]=$1092;
 var $R_1_i_i=$1087;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1003|16;
 var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1106=(($tbase_245_i+$_sum103_i)|0);
 var $1107=$1106;
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=($1108|0)==0;
 if($1109){label=253;break;}else{var $R_0_i_i=$1108;var $RP_0_i_i=$1107;label=254;break;}
 case 253: 
 var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1111=(($tbase_245_i+$_sum104_i)|0);
 var $1112=$1111;
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1115=(($R_0_i_i+20)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=255;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=254;break;}
 case 255: 
 var $1119=(($R_0_i_i+16)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=($1120|0)==0;
 if($1121){label=256;break;}else{var $R_0_i_i=$1120;var $RP_0_i_i=$1119;label=254;break;}
 case 256: 
 var $1123=$RP_0_i_i;
 var $1124=HEAP32[((32128)>>2)];
 var $1125=($1123>>>0)<($1124>>>0);
 if($1125){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1129=($1084|0)==0;
 if($1129){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum99_i=((($_sum31_i_i)+($1003))|0);
 var $1131=(($tbase_245_i+$_sum99_i)|0);
 var $1132=$1131;
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=((32416+($1133<<2))|0);
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=($1081|0)==($1135|0);
 if($1136){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1134)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1138=HEAP32[(($1132)>>2)];
 var $1139=1<<$1138;
 var $1140=$1139^-1;
 var $1141=HEAP32[((32116)>>2)];
 var $1142=$1141&$1140;
 HEAP32[((32116)>>2)]=$1142;
 label=279;break;
 case 263: 
 var $1144=$1084;
 var $1145=HEAP32[((32128)>>2)];
 var $1146=($1144>>>0)<($1145>>>0);
 if($1146){label=267;break;}else{label=264;break;}
 case 264: 
 var $1148=(($1084+16)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=($1149|0)==($1081|0);
 if($1150){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1153=(($1084+20)|0);
 HEAP32[(($1153)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1156=($R_1_i_i|0)==0;
 if($1156){label=279;break;}else{label=269;break;}
 case 269: 
 var $1158=$R_1_i_i;
 var $1159=HEAP32[((32128)>>2)];
 var $1160=($1158>>>0)<($1159>>>0);
 if($1160){label=278;break;}else{label=270;break;}
 case 270: 
 var $1162=(($R_1_i_i+24)|0);
 HEAP32[(($1162)>>2)]=$1084;
 var $_sum3233_i_i=$1003|16;
 var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1163=(($tbase_245_i+$_sum100_i)|0);
 var $1164=$1163;
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=($1165|0)==0;
 if($1166){label=274;break;}else{label=271;break;}
 case 271: 
 var $1168=$1165;
 var $1169=HEAP32[((32128)>>2)];
 var $1170=($1168>>>0)<($1169>>>0);
 if($1170){label=273;break;}else{label=272;break;}
 case 272: 
 var $1172=(($R_1_i_i+16)|0);
 HEAP32[(($1172)>>2)]=$1165;
 var $1173=(($1165+24)|0);
 HEAP32[(($1173)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1176=(($tbase_245_i+$_sum101_i)|0);
 var $1177=$1176;
 var $1178=HEAP32[(($1177)>>2)];
 var $1179=($1178|0)==0;
 if($1179){label=279;break;}else{label=275;break;}
 case 275: 
 var $1181=$1178;
 var $1182=HEAP32[((32128)>>2)];
 var $1183=($1181>>>0)<($1182>>>0);
 if($1183){label=277;break;}else{label=276;break;}
 case 276: 
 var $1185=(($R_1_i_i+20)|0);
 HEAP32[(($1185)>>2)]=$1178;
 var $1186=(($1178+24)|0);
 HEAP32[(($1186)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1041|$1003;
 var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1190=(($tbase_245_i+$_sum102_i)|0);
 var $1191=$1190;
 var $1192=((($1041)+($1011))|0);
 var $oldfirst_0_i_i=$1191;var $qsize_0_i_i=$1192;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1194=(($oldfirst_0_i_i+4)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=$1195&-2;
 HEAP32[(($1194)>>2)]=$1196;
 var $1197=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1198=(($tbase_245_i+$_sum10_i_i)|0);
 var $1199=$1198;
 HEAP32[(($1199)>>2)]=$1197;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1200=(($tbase_245_i+$_sum11_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$qsize_0_i_i;
 var $1202=$qsize_0_i_i>>>3;
 var $1203=($qsize_0_i_i>>>0)<256;
 if($1203){label=281;break;}else{label=286;break;}
 case 281: 
 var $1205=$1202<<1;
 var $1206=((32152+($1205<<2))|0);
 var $1207=$1206;
 var $1208=HEAP32[((32112)>>2)];
 var $1209=1<<$1202;
 var $1210=$1208&$1209;
 var $1211=($1210|0)==0;
 if($1211){label=282;break;}else{label=283;break;}
 case 282: 
 var $1213=$1208|$1209;
 HEAP32[((32112)>>2)]=$1213;
 var $_sum27_pre_i_i=((($1205)+(2))|0);
 var $_pre_i24_i=((32152+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1207;var $_pre_phi_i25_i=$_pre_i24_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1205)+(2))|0);
 var $1215=((32152+($_sum30_i_i<<2))|0);
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=$1216;
 var $1218=HEAP32[((32128)>>2)];
 var $1219=($1217>>>0)<($1218>>>0);
 if($1219){label=284;break;}else{var $F4_0_i_i=$1216;var $_pre_phi_i25_i=$1215;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
 var $1222=(($F4_0_i_i+12)|0);
 HEAP32[(($1222)>>2)]=$1010;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1223=(($tbase_245_i+$_sum28_i_i)|0);
 var $1224=$1223;
 HEAP32[(($1224)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1225=(($tbase_245_i+$_sum29_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$1207;
 label=303;break;
 case 286: 
 var $1228=$1009;
 var $1229=$qsize_0_i_i>>>8;
 var $1230=($1229|0)==0;
 if($1230){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1232=($qsize_0_i_i>>>0)>16777215;
 if($1232){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1234=((($1229)+(1048320))|0);
 var $1235=$1234>>>16;
 var $1236=$1235&8;
 var $1237=$1229<<$1236;
 var $1238=((($1237)+(520192))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&4;
 var $1241=$1240|$1236;
 var $1242=$1237<<$1240;
 var $1243=((($1242)+(245760))|0);
 var $1244=$1243>>>16;
 var $1245=$1244&2;
 var $1246=$1241|$1245;
 var $1247=(((14)-($1246))|0);
 var $1248=$1242<<$1245;
 var $1249=$1248>>>15;
 var $1250=((($1247)+($1249))|0);
 var $1251=$1250<<1;
 var $1252=((($1250)+(7))|0);
 var $1253=$qsize_0_i_i>>>($1252>>>0);
 var $1254=$1253&1;
 var $1255=$1254|$1251;
 var $I7_0_i_i=$1255;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1257=((32416+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1258=(($tbase_245_i+$_sum12_i26_i)|0);
 var $1259=$1258;
 HEAP32[(($1259)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1260=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1261=(($tbase_245_i+$_sum14_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=0;
 var $1263=$1260;
 HEAP32[(($1263)>>2)]=0;
 var $1264=HEAP32[((32116)>>2)];
 var $1265=1<<$I7_0_i_i;
 var $1266=$1264&$1265;
 var $1267=($1266|0)==0;
 if($1267){label=290;break;}else{label=291;break;}
 case 290: 
 var $1269=$1264|$1265;
 HEAP32[((32116)>>2)]=$1269;
 HEAP32[(($1257)>>2)]=$1228;
 var $1270=$1257;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1271=(($tbase_245_i+$_sum15_i_i)|0);
 var $1272=$1271;
 HEAP32[(($1272)>>2)]=$1270;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1273=(($tbase_245_i+$_sum16_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1228;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1275=(($tbase_245_i+$_sum17_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1228;
 label=303;break;
 case 291: 
 var $1278=HEAP32[(($1257)>>2)];
 var $1279=($I7_0_i_i|0)==31;
 if($1279){var $1284=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1281=$I7_0_i_i>>>1;
 var $1282=(((25)-($1281))|0);
 var $1284=$1282;label=293;break;
 case 293: 
 var $1284;
 var $1285=$qsize_0_i_i<<$1284;
 var $K8_0_i_i=$1285;var $T_0_i27_i=$1278;label=294;break;
 case 294: 
 var $T_0_i27_i;
 var $K8_0_i_i;
 var $1287=(($T_0_i27_i+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){label=299;break;}else{label=295;break;}
 case 295: 
 var $1292=$K8_0_i_i>>>31;
 var $1293=(($T_0_i27_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 var $1296=$K8_0_i_i<<1;
 if($1295){label=296;break;}else{var $K8_0_i_i=$1296;var $T_0_i27_i=$1294;label=294;break;}
 case 296: 
 var $1298=$1293;
 var $1299=HEAP32[((32128)>>2)];
 var $1300=($1298>>>0)<($1299>>>0);
 if($1300){label=298;break;}else{label=297;break;}
 case 297: 
 HEAP32[(($1293)>>2)]=$1228;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1302=(($tbase_245_i+$_sum24_i_i)|0);
 var $1303=$1302;
 HEAP32[(($1303)>>2)]=$T_0_i27_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1304=(($tbase_245_i+$_sum25_i_i)|0);
 var $1305=$1304;
 HEAP32[(($1305)>>2)]=$1228;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1306=(($tbase_245_i+$_sum26_i_i)|0);
 var $1307=$1306;
 HEAP32[(($1307)>>2)]=$1228;
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $1310=(($T_0_i27_i+8)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=$T_0_i27_i;
 var $1313=HEAP32[((32128)>>2)];
 var $1314=($1312>>>0)<($1313>>>0);
 if($1314){label=302;break;}else{label=300;break;}
 case 300: 
 var $1316=$1311;
 var $1317=($1316>>>0)<($1313>>>0);
 if($1317){label=302;break;}else{label=301;break;}
 case 301: 
 var $1319=(($1311+12)|0);
 HEAP32[(($1319)>>2)]=$1228;
 HEAP32[(($1310)>>2)]=$1228;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1320=(($tbase_245_i+$_sum21_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$1311;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1322=(($tbase_245_i+$_sum22_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=$T_0_i27_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1324=(($tbase_245_i+$_sum23_i_i)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$993|8;
 var $1326=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1326;label=341;break;
 case 304: 
 var $1327=$890;
 var $sp_0_i_i_i=32560;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1329=(($sp_0_i_i_i)|0);
 var $1330=HEAP32[(($1329)>>2)];
 var $1331=($1330>>>0)>($1327>>>0);
 if($1331){label=307;break;}else{label=306;break;}
 case 306: 
 var $1333=(($sp_0_i_i_i+4)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=(($1330+$1334)|0);
 var $1336=($1335>>>0)>($1327>>>0);
 if($1336){label=308;break;}else{label=307;break;}
 case 307: 
 var $1338=(($sp_0_i_i_i+8)|0);
 var $1339=HEAP32[(($1338)>>2)];
 var $sp_0_i_i_i=$1339;label=305;break;
 case 308: 
 var $_sum_i15_i=((($1334)-(47))|0);
 var $_sum1_i16_i=((($1334)-(39))|0);
 var $1340=(($1330+$_sum1_i16_i)|0);
 var $1341=$1340;
 var $1342=$1341&7;
 var $1343=($1342|0)==0;
 if($1343){var $1348=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1345=(((-$1341))|0);
 var $1346=$1345&7;
 var $1348=$1346;label=310;break;
 case 310: 
 var $1348;
 var $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
 var $1349=(($1330+$_sum2_i17_i)|0);
 var $1350=(($890+16)|0);
 var $1351=$1350;
 var $1352=($1349>>>0)<($1351>>>0);
 var $1353=($1352?$1327:$1349);
 var $1354=(($1353+8)|0);
 var $1355=$1354;
 var $1356=((($tsize_244_i)-(40))|0);
 var $1357=(($tbase_245_i+8)|0);
 var $1358=$1357;
 var $1359=$1358&7;
 var $1360=($1359|0)==0;
 if($1360){var $1364=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1362=(((-$1358))|0);
 var $1363=$1362&7;
 var $1364=$1363;label=312;break;
 case 312: 
 var $1364;
 var $1365=(($tbase_245_i+$1364)|0);
 var $1366=$1365;
 var $1367=((($1356)-($1364))|0);
 HEAP32[((32136)>>2)]=$1366;
 HEAP32[((32124)>>2)]=$1367;
 var $1368=$1367|1;
 var $_sum_i_i_i=((($1364)+(4))|0);
 var $1369=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=$1368;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1372=$1371;
 HEAP32[(($1372)>>2)]=40;
 var $1373=HEAP32[((28848)>>2)];
 HEAP32[((32140)>>2)]=$1373;
 var $1374=(($1353+4)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1354)>>2)]=HEAP32[((32560)>>2)];HEAP32[((($1354)+(4))>>2)]=HEAP32[((32564)>>2)];HEAP32[((($1354)+(8))>>2)]=HEAP32[((32568)>>2)];HEAP32[((($1354)+(12))>>2)]=HEAP32[((32572)>>2)];
 HEAP32[((32560)>>2)]=$tbase_245_i;
 HEAP32[((32564)>>2)]=$tsize_244_i;
 HEAP32[((32572)>>2)]=0;
 HEAP32[((32568)>>2)]=$1355;
 var $1376=(($1353+28)|0);
 var $1377=$1376;
 HEAP32[(($1377)>>2)]=7;
 var $1378=(($1353+32)|0);
 var $1379=($1378>>>0)<($1335>>>0);
 if($1379){var $1380=$1377;label=313;break;}else{label=314;break;}
 case 313: 
 var $1380;
 var $1381=(($1380+4)|0);
 HEAP32[(($1381)>>2)]=7;
 var $1382=(($1380+8)|0);
 var $1383=$1382;
 var $1384=($1383>>>0)<($1335>>>0);
 if($1384){var $1380=$1381;label=313;break;}else{label=314;break;}
 case 314: 
 var $1385=($1353|0)==($1327|0);
 if($1385){label=338;break;}else{label=315;break;}
 case 315: 
 var $1387=$1353;
 var $1388=$890;
 var $1389=((($1387)-($1388))|0);
 var $1390=(($1327+$1389)|0);
 var $_sum3_i_i=((($1389)+(4))|0);
 var $1391=(($1327+$_sum3_i_i)|0);
 var $1392=$1391;
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=$1393&-2;
 HEAP32[(($1392)>>2)]=$1394;
 var $1395=$1389|1;
 var $1396=(($890+4)|0);
 HEAP32[(($1396)>>2)]=$1395;
 var $1397=$1390;
 HEAP32[(($1397)>>2)]=$1389;
 var $1398=$1389>>>3;
 var $1399=($1389>>>0)<256;
 if($1399){label=316;break;}else{label=321;break;}
 case 316: 
 var $1401=$1398<<1;
 var $1402=((32152+($1401<<2))|0);
 var $1403=$1402;
 var $1404=HEAP32[((32112)>>2)];
 var $1405=1<<$1398;
 var $1406=$1404&$1405;
 var $1407=($1406|0)==0;
 if($1407){label=317;break;}else{label=318;break;}
 case 317: 
 var $1409=$1404|$1405;
 HEAP32[((32112)>>2)]=$1409;
 var $_sum11_pre_i_i=((($1401)+(2))|0);
 var $_pre_i_i=((32152+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1403;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1401)+(2))|0);
 var $1411=((32152+($_sum12_i_i<<2))|0);
 var $1412=HEAP32[(($1411)>>2)];
 var $1413=$1412;
 var $1414=HEAP32[((32128)>>2)];
 var $1415=($1413>>>0)<($1414>>>0);
 if($1415){label=319;break;}else{var $F_0_i_i=$1412;var $_pre_phi_i_i=$1411;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$890;
 var $1418=(($F_0_i_i+12)|0);
 HEAP32[(($1418)>>2)]=$890;
 var $1419=(($890+8)|0);
 HEAP32[(($1419)>>2)]=$F_0_i_i;
 var $1420=(($890+12)|0);
 HEAP32[(($1420)>>2)]=$1403;
 label=338;break;
 case 321: 
 var $1422=$890;
 var $1423=$1389>>>8;
 var $1424=($1423|0)==0;
 if($1424){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1426=($1389>>>0)>16777215;
 if($1426){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1428=((($1423)+(1048320))|0);
 var $1429=$1428>>>16;
 var $1430=$1429&8;
 var $1431=$1423<<$1430;
 var $1432=((($1431)+(520192))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&4;
 var $1435=$1434|$1430;
 var $1436=$1431<<$1434;
 var $1437=((($1436)+(245760))|0);
 var $1438=$1437>>>16;
 var $1439=$1438&2;
 var $1440=$1435|$1439;
 var $1441=(((14)-($1440))|0);
 var $1442=$1436<<$1439;
 var $1443=$1442>>>15;
 var $1444=((($1441)+($1443))|0);
 var $1445=$1444<<1;
 var $1446=((($1444)+(7))|0);
 var $1447=$1389>>>($1446>>>0);
 var $1448=$1447&1;
 var $1449=$1448|$1445;
 var $I1_0_i_i=$1449;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1451=((32416+($I1_0_i_i<<2))|0);
 var $1452=(($890+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
 var $1453=(($890+20)|0);
 HEAP32[(($1453)>>2)]=0;
 var $1454=(($890+16)|0);
 HEAP32[(($1454)>>2)]=0;
 var $1455=HEAP32[((32116)>>2)];
 var $1456=1<<$I1_0_i_i;
 var $1457=$1455&$1456;
 var $1458=($1457|0)==0;
 if($1458){label=325;break;}else{label=326;break;}
 case 325: 
 var $1460=$1455|$1456;
 HEAP32[((32116)>>2)]=$1460;
 HEAP32[(($1451)>>2)]=$1422;
 var $1461=(($890+24)|0);
 var $_c_i_i=$1451;
 HEAP32[(($1461)>>2)]=$_c_i_i;
 var $1462=(($890+12)|0);
 HEAP32[(($1462)>>2)]=$890;
 var $1463=(($890+8)|0);
 HEAP32[(($1463)>>2)]=$890;
 label=338;break;
 case 326: 
 var $1465=HEAP32[(($1451)>>2)];
 var $1466=($I1_0_i_i|0)==31;
 if($1466){var $1471=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1468=$I1_0_i_i>>>1;
 var $1469=(((25)-($1468))|0);
 var $1471=$1469;label=328;break;
 case 328: 
 var $1471;
 var $1472=$1389<<$1471;
 var $K2_0_i_i=$1472;var $T_0_i_i=$1465;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K2_0_i_i;
 var $1474=(($T_0_i_i+4)|0);
 var $1475=HEAP32[(($1474)>>2)];
 var $1476=$1475&-8;
 var $1477=($1476|0)==($1389|0);
 if($1477){label=334;break;}else{label=330;break;}
 case 330: 
 var $1479=$K2_0_i_i>>>31;
 var $1480=(($T_0_i_i+16+($1479<<2))|0);
 var $1481=HEAP32[(($1480)>>2)];
 var $1482=($1481|0)==0;
 var $1483=$K2_0_i_i<<1;
 if($1482){label=331;break;}else{var $K2_0_i_i=$1483;var $T_0_i_i=$1481;label=329;break;}
 case 331: 
 var $1485=$1480;
 var $1486=HEAP32[((32128)>>2)];
 var $1487=($1485>>>0)<($1486>>>0);
 if($1487){label=333;break;}else{label=332;break;}
 case 332: 
 HEAP32[(($1480)>>2)]=$1422;
 var $1489=(($890+24)|0);
 var $T_0_c8_i_i=$T_0_i_i;
 HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
 var $1490=(($890+12)|0);
 HEAP32[(($1490)>>2)]=$890;
 var $1491=(($890+8)|0);
 HEAP32[(($1491)>>2)]=$890;
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $1494=(($T_0_i_i+8)|0);
 var $1495=HEAP32[(($1494)>>2)];
 var $1496=$T_0_i_i;
 var $1497=HEAP32[((32128)>>2)];
 var $1498=($1496>>>0)<($1497>>>0);
 if($1498){label=337;break;}else{label=335;break;}
 case 335: 
 var $1500=$1495;
 var $1501=($1500>>>0)<($1497>>>0);
 if($1501){label=337;break;}else{label=336;break;}
 case 336: 
 var $1503=(($1495+12)|0);
 HEAP32[(($1503)>>2)]=$1422;
 HEAP32[(($1494)>>2)]=$1422;
 var $1504=(($890+8)|0);
 var $_c7_i_i=$1495;
 HEAP32[(($1504)>>2)]=$_c7_i_i;
 var $1505=(($890+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 HEAP32[(($1505)>>2)]=$T_0_c_i_i;
 var $1506=(($890+24)|0);
 HEAP32[(($1506)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1507=HEAP32[((32124)>>2)];
 var $1508=($1507>>>0)>($nb_0>>>0);
 if($1508){label=339;break;}else{label=340;break;}
 case 339: 
 var $1510=((($1507)-($nb_0))|0);
 HEAP32[((32124)>>2)]=$1510;
 var $1511=HEAP32[((32136)>>2)];
 var $1512=$1511;
 var $1513=(($1512+$nb_0)|0);
 var $1514=$1513;
 HEAP32[((32136)>>2)]=$1514;
 var $1515=$1510|1;
 var $_sum_i134=((($nb_0)+(4))|0);
 var $1516=(($1512+$_sum_i134)|0);
 var $1517=$1516;
 HEAP32[(($1517)>>2)]=$1515;
 var $1518=$nb_0|3;
 var $1519=(($1511+4)|0);
 HEAP32[(($1519)>>2)]=$1518;
 var $1520=(($1511+8)|0);
 var $1521=$1520;
 var $mem_0=$1521;label=341;break;
 case 340: 
 var $1522=___errno_location();
 HEAP32[(($1522)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((32128)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum232=(((-8)-($21))|0);
 var $24=(($mem+$_sum232)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((32132)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum276=((($_sum232)+(8))|0);
 var $35=(($mem+$_sum276)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum277=((($_sum232)+(12))|0);
 var $38=(($mem+$_sum277)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((32152+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((32112)>>2)];
 var $57=$56&$55;
 HEAP32[((32112)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre305=(($40+8)|0);
 var $_pre_phi306=$_pre305;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi306=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi306;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi306)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum266=((($_sum232)+(24))|0);
 var $70=(($mem+$_sum266)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum267=((($_sum232)+(12))|0);
 var $73=(($mem+$_sum267)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum273=((($_sum232)+(8))|0);
 var $78=(($mem+$_sum273)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum269=((($_sum232)+(20))|0);
 var $93=(($mem+$_sum269)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum268=((($_sum232)+(16))|0);
 var $98=(($mem+$_sum268)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum270=((($_sum232)+(28))|0);
 var $117=(($mem+$_sum270)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((32416+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((32116)>>2)];
 var $128=$127&$126;
 HEAP32[((32116)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((32128)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((32128)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum271=((($_sum232)+(16))|0);
 var $149=(($mem+$_sum271)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((32128)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum272=((($_sum232)+(20))|0);
 var $162=(($mem+$_sum272)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((32128)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum233=((($14)-(4))|0);
 var $176=(($mem+$_sum233)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((32120)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum264=((($_sum232)+(4))|0);
 var $185=(($mem+$_sum264)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum263=((($14)-(4))|0);
 var $192=(($mem+$_sum263)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((32136)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((32124)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((32124)>>2)]=$204;
 HEAP32[((32136)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((32132)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((32132)>>2)]=0;
 HEAP32[((32120)>>2)]=0;
 label=140;break;
 case 62: 
 var $211=HEAP32[((32132)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((32120)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((32120)>>2)]=$215;
 HEAP32[((32132)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum257258=$14|4;
 var $229=(($mem+$_sum257258)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((32152+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((32128)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((32112)>>2)];
 var $249=$248&$247;
 HEAP32[((32112)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre303=(($231+8)|0);
 var $_pre_phi304=$_pre303;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((32128)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi304=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi304;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi304)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum235=((($14)+(16))|0);
 var $263=(($mem+$_sum235)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum236237=$14|4;
 var $266=(($mem+$_sum236237)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((32128)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum239=((($14)+(12))|0);
 var $287=(($mem+$_sum239)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum238=((($14)+(8))|0);
 var $292=(($mem+$_sum238)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((32128)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum250=((($14)+(20))|0);
 var $312=(($mem+$_sum250)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((32416+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond298=($R7_1|0)==0;
 if($cond298){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((32116)>>2)];
 var $323=$322&$321;
 HEAP32[((32116)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((32128)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((32128)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum251=((($14)+(8))|0);
 var $344=(($mem+$_sum251)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((32128)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum252=((($14)+(12))|0);
 var $357=(($mem+$_sum252)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((32128)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((32132)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((32120)>>2)]=$222;
 label=140;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((32152+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((32112)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((32112)>>2)]=$396;
 var $_sum248_pre=((($388)+(2))|0);
 var $_pre=((32152+($_sum248_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum249=((($388)+(2))|0);
 var $398=((32152+($_sum249<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((32128)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((32416+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((32116)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((32116)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=$psize_1<<$458;
 var $K19_0=$459;var $T_0=$452;label=127;break;
 case 127: 
 var $T_0;
 var $K19_0;
 var $461=(($T_0+4)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=$462&-8;
 var $464=($463|0)==($psize_1|0);
 if($464){label=132;break;}else{label=128;break;}
 case 128: 
 var $466=$K19_0>>>31;
 var $467=(($T_0+16+($466<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 var $470=$K19_0<<1;
 if($469){label=129;break;}else{var $K19_0=$470;var $T_0=$468;label=127;break;}
 case 129: 
 var $472=$467;
 var $473=HEAP32[((32128)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=131;break;}else{label=130;break;}
 case 130: 
 HEAP32[(($467)>>2)]=$409;
 var $476=(($p_0+24)|0);
 var $T_0_c245=$T_0;
 HEAP32[(($476)>>2)]=$T_0_c245;
 var $477=(($p_0+12)|0);
 HEAP32[(($477)>>2)]=$p_0;
 var $478=(($p_0+8)|0);
 HEAP32[(($478)>>2)]=$p_0;
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $481=(($T_0+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0;
 var $484=HEAP32[((32128)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=135;break;}else{label=133;break;}
 case 133: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=135;break;}else{label=134;break;}
 case 134: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$409;
 HEAP32[(($481)>>2)]=$409;
 var $491=(($p_0+8)|0);
 var $_c244=$482;
 HEAP32[(($491)>>2)]=$_c244;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $495=HEAP32[((32144)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((32144)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=32568;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=138;break;}else{var $sp_0_in_i=$499;label=137;break;}
 case 138: 
 HEAP32[((32144)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _calloc($n_elements,$elem_size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n_elements|0)==0;
 if($1){var $req_0=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $3=(Math_imul($elem_size,$n_elements)|0);
 var $4=$elem_size|$n_elements;
 var $5=($4>>>0)>65535;
 if($5){label=3;break;}else{var $req_0=$3;label=4;break;}
 case 3: 
 var $7=(((($3>>>0))/(($n_elements>>>0)))&-1);
 var $8=($7|0)==($elem_size|0);
 var $_=($8?$3:-1);
 var $req_0=$_;label=4;break;
 case 4: 
 var $req_0;
 var $10=_malloc($req_0);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=((($10)-(4))|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&3;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 _memset($10, 0, $req_0)|0;
 label=7;break;
 case 7: 
 return $10;
  default: assert(0, "bad label: " + label);
 }
}
Module["_calloc"] = _calloc;
function _realloc($oldmem,$bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=($31?8:4);
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=($34?$33:$bytes);
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _try_realloc_chunk($p,$nb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((32128)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if($8){label=72;break;}else{label=2;break;}
 case 2: 
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $19=($10|0)==0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=($nb>>>0)<256;
 if($21){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $23=((($nb)+(4))|0);
 var $24=($3>>>0)<($23>>>0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $26=((($3)-($nb))|0);
 var $27=HEAP32[((28840)>>2)];
 var $28=$27<<1;
 var $29=($26>>>0)>($28>>>0);
 if($29){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $32=($3>>>0)<($nb>>>0);
 if($32){label=12;break;}else{label=10;break;}
 case 10: 
 var $34=((($3)-($nb))|0);
 var $35=($34>>>0)>15;
 if($35){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $37=(($4+$nb)|0);
 var $38=$37;
 var $39=$2&1;
 var $40=$39|$nb;
 var $41=$40|2;
 HEAP32[(($1)>>2)]=$41;
 var $_sum29=((($nb)+(4))|0);
 var $42=(($4+$_sum29)|0);
 var $43=$42;
 var $44=$34|3;
 HEAP32[(($43)>>2)]=$44;
 var $45=HEAP32[(($15)>>2)];
 var $46=$45|1;
 HEAP32[(($15)>>2)]=$46;
 _dispose_chunk($38,$34);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $48=HEAP32[((32136)>>2)];
 var $49=($6|0)==($48|0);
 if($49){label=13;break;}else{label=15;break;}
 case 13: 
 var $51=HEAP32[((32124)>>2)];
 var $52=((($51)+($3))|0);
 var $53=($52>>>0)>($nb>>>0);
 if($53){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $55=((($52)-($nb))|0);
 var $56=(($4+$nb)|0);
 var $57=$56;
 var $58=$2&1;
 var $59=$58|$nb;
 var $60=$59|2;
 HEAP32[(($1)>>2)]=$60;
 var $_sum28=((($nb)+(4))|0);
 var $61=(($4+$_sum28)|0);
 var $62=$61;
 var $63=$55|1;
 HEAP32[(($62)>>2)]=$63;
 HEAP32[((32136)>>2)]=$57;
 HEAP32[((32124)>>2)]=$55;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $65=HEAP32[((32132)>>2)];
 var $66=($6|0)==($65|0);
 if($66){label=16;break;}else{label=21;break;}
 case 16: 
 var $68=HEAP32[((32120)>>2)];
 var $69=((($68)+($3))|0);
 var $70=($69>>>0)<($nb>>>0);
 if($70){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $72=((($69)-($nb))|0);
 var $73=($72>>>0)>15;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=(($4+$nb)|0);
 var $76=$75;
 var $77=(($4+$69)|0);
 var $78=$2&1;
 var $79=$78|$nb;
 var $80=$79|2;
 HEAP32[(($1)>>2)]=$80;
 var $_sum25=((($nb)+(4))|0);
 var $81=(($4+$_sum25)|0);
 var $82=$81;
 var $83=$72|1;
 HEAP32[(($82)>>2)]=$83;
 var $84=$77;
 HEAP32[(($84)>>2)]=$72;
 var $_sum26=((($69)+(4))|0);
 var $85=(($4+$_sum26)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&-2;
 HEAP32[(($86)>>2)]=$88;
 var $storemerge=$76;var $storemerge27=$72;label=20;break;
 case 19: 
 var $90=$2&1;
 var $91=$90|$69;
 var $92=$91|2;
 HEAP32[(($1)>>2)]=$92;
 var $_sum23=((($69)+(4))|0);
 var $93=(($4+$_sum23)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|1;
 HEAP32[(($94)>>2)]=$96;
 var $storemerge=0;var $storemerge27=0;label=20;break;
 case 20: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((32120)>>2)]=$storemerge27;
 HEAP32[((32132)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $99=$16&2;
 var $100=($99|0)==0;
 if($100){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if($104){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 if($108){label=24;break;}else{label=36;break;}
 case 24: 
 var $_sum17=((($3)+(8))|0);
 var $110=(($4+$_sum17)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $113=(($4+$_sum18)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$107<<1;
 var $117=((32152+($116<<2))|0);
 var $118=$117;
 var $119=($112|0)==($118|0);
 if($119){label=27;break;}else{label=25;break;}
 case 25: 
 var $121=$112;
 var $122=($121>>>0)<($7>>>0);
 if($122){label=35;break;}else{label=26;break;}
 case 26: 
 var $124=(($112+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==($6|0);
 if($126){label=27;break;}else{label=35;break;}
 case 27: 
 var $127=($115|0)==($112|0);
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 var $129=1<<$107;
 var $130=$129^-1;
 var $131=HEAP32[((32112)>>2)];
 var $132=$131&$130;
 HEAP32[((32112)>>2)]=$132;
 label=69;break;
 case 29: 
 var $134=($115|0)==($118|0);
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=(($115+8)|0);
 var $_pre_phi=$_pre;label=33;break;
 case 31: 
 var $136=$115;
 var $137=($136>>>0)<($7>>>0);
 if($137){label=34;break;}else{label=32;break;}
 case 32: 
 var $139=(($115+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==($6|0);
 if($141){var $_pre_phi=$139;label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_phi;
 var $142=(($112+12)|0);
 HEAP32[(($142)>>2)]=$115;
 HEAP32[(($_pre_phi)>>2)]=$112;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $144=$5;
 var $_sum=((($3)+(24))|0);
 var $145=(($4+$_sum)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $148=(($4+$_sum2)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($144|0);
 if($151){label=42;break;}else{label=37;break;}
 case 37: 
 var $_sum14=((($3)+(8))|0);
 var $153=(($4+$_sum14)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155;
 var $157=($156>>>0)<($7>>>0);
 if($157){label=41;break;}else{label=38;break;}
 case 38: 
 var $159=(($155+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($144|0);
 if($161){label=39;break;}else{label=41;break;}
 case 39: 
 var $163=(($150+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($144|0);
 if($165){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($159)>>2)]=$150;
 HEAP32[(($163)>>2)]=$155;
 var $R_1=$150;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $_sum4=((($3)+(20))|0);
 var $168=(($4+$_sum4)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==0;
 if($171){label=43;break;}else{var $R_0=$170;var $RP_0=$169;label=44;break;}
 case 43: 
 var $_sum3=((($3)+(16))|0);
 var $173=(($4+$_sum3)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){var $R_1=0;label=49;break;}else{var $R_0=$175;var $RP_0=$174;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $177=(($R_0+20)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){label=45;break;}else{var $R_0=$178;var $RP_0=$177;label=44;break;}
 case 45: 
 var $181=(($R_0+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=46;break;}else{var $R_0=$182;var $RP_0=$181;label=44;break;}
 case 46: 
 var $185=$RP_0;
 var $186=($185>>>0)<($7>>>0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $190=($147|0)==0;
 if($190){label=69;break;}else{label=50;break;}
 case 50: 
 var $_sum11=((($3)+(28))|0);
 var $192=(($4+$_sum11)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=((32416+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($144|0)==($196|0);
 if($197){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($195)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $199=HEAP32[(($193)>>2)];
 var $200=1<<$199;
 var $201=$200^-1;
 var $202=HEAP32[((32116)>>2)];
 var $203=$202&$201;
 HEAP32[((32116)>>2)]=$203;
 label=69;break;
 case 53: 
 var $205=$147;
 var $206=HEAP32[((32128)>>2)];
 var $207=($205>>>0)<($206>>>0);
 if($207){label=57;break;}else{label=54;break;}
 case 54: 
 var $209=(($147+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==($144|0);
 if($211){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($209)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $214=(($147+20)|0);
 HEAP32[(($214)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $217=($R_1|0)==0;
 if($217){label=69;break;}else{label=59;break;}
 case 59: 
 var $219=$R_1;
 var $220=HEAP32[((32128)>>2)];
 var $221=($219>>>0)<($220>>>0);
 if($221){label=68;break;}else{label=60;break;}
 case 60: 
 var $223=(($R_1+24)|0);
 HEAP32[(($223)>>2)]=$147;
 var $_sum12=((($3)+(16))|0);
 var $224=(($4+$_sum12)|0);
 var $225=$224;
 var $226=HEAP32[(($225)>>2)];
 var $227=($226|0)==0;
 if($227){label=64;break;}else{label=61;break;}
 case 61: 
 var $229=$226;
 var $230=HEAP32[((32128)>>2)];
 var $231=($229>>>0)<($230>>>0);
 if($231){label=63;break;}else{label=62;break;}
 case 62: 
 var $233=(($R_1+16)|0);
 HEAP32[(($233)>>2)]=$226;
 var $234=(($226+24)|0);
 HEAP32[(($234)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $_sum13=((($3)+(20))|0);
 var $237=(($4+$_sum13)|0);
 var $238=$237;
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){label=69;break;}else{label=65;break;}
 case 65: 
 var $242=$239;
 var $243=HEAP32[((32128)>>2)];
 var $244=($242>>>0)<($243>>>0);
 if($244){label=67;break;}else{label=66;break;}
 case 66: 
 var $246=(($R_1+20)|0);
 HEAP32[(($246)>>2)]=$239;
 var $247=(($239+24)|0);
 HEAP32[(($247)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $251=($106>>>0)<16;
 if($251){label=70;break;}else{label=71;break;}
 case 70: 
 var $253=HEAP32[(($1)>>2)];
 var $254=$253&1;
 var $255=$103|$254;
 var $256=$255|2;
 HEAP32[(($1)>>2)]=$256;
 var $_sum910=$103|4;
 var $257=(($4+$_sum910)|0);
 var $258=$257;
 var $259=HEAP32[(($258)>>2)];
 var $260=$259|1;
 HEAP32[(($258)>>2)]=$260;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $262=(($4+$nb)|0);
 var $263=$262;
 var $264=HEAP32[(($1)>>2)];
 var $265=$264&1;
 var $266=$265|$nb;
 var $267=$266|2;
 HEAP32[(($1)>>2)]=$267;
 var $_sum5=((($nb)+(4))|0);
 var $268=(($4+$_sum5)|0);
 var $269=$268;
 var $270=$106|3;
 HEAP32[(($269)>>2)]=$270;
 var $_sum78=$103|4;
 var $271=(($4+$_sum78)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273|1;
 HEAP32[(($272)>>2)]=$274;
 _dispose_chunk($263,$106);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($p,$psize){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_0277=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=134;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((32128)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((32132)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((32152+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((32112)>>2)];
 var $49=$48&$47;
 HEAP32[((32112)>>2)]=$49;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre62=(($32+8)|0);
 var $_pre_phi63=$_pre62;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi63=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi63;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi63)>>2)]=$29;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_0277=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((32416+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=HEAP32[(($110)>>2)];
 var $117=1<<$116;
 var $118=$117^-1;
 var $119=HEAP32[((32116)>>2)];
 var $120=$119&$118;
 HEAP32[((32116)>>2)]=$120;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 35: 
 var $122=$64;
 var $123=HEAP32[((32128)>>2)];
 var $124=($122>>>0)<($123>>>0);
 if($124){label=39;break;}else{label=36;break;}
 case 36: 
 var $126=(($64+16)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==($61|0);
 if($128){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($126)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $131=(($64+20)|0);
 HEAP32[(($131)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $134=($R_1|0)==0;
 if($134){var $_0=$16;var $_0277=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $136=$R_1;
 var $137=HEAP32[((32128)>>2)];
 var $138=($136>>>0)<($137>>>0);
 if($138){label=50;break;}else{label=42;break;}
 case 42: 
 var $140=(($R_1+24)|0);
 HEAP32[(($140)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $141=(($1+$_sum31)|0);
 var $142=$141;
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==0;
 if($144){label=46;break;}else{label=43;break;}
 case 43: 
 var $146=$143;
 var $147=HEAP32[((32128)>>2)];
 var $148=($146>>>0)<($147>>>0);
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 var $150=(($R_1+16)|0);
 HEAP32[(($150)>>2)]=$143;
 var $151=(($143+24)|0);
 HEAP32[(($151)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $154=(($1+$_sum32)|0);
 var $155=$154;
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){var $_0=$16;var $_0277=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $159=$156;
 var $160=HEAP32[((32128)>>2)];
 var $161=($159>>>0)<($160>>>0);
 if($161){label=49;break;}else{label=48;break;}
 case 48: 
 var $163=(($R_1+20)|0);
 HEAP32[(($163)>>2)]=$156;
 var $164=(($156+24)|0);
 HEAP32[(($164)>>2)]=$R_1;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $168=(($1+$_sum)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=$170&3;
 var $172=($171|0)==3;
 if($172){label=52;break;}else{var $_0=$16;var $_0277=$17;label=54;break;}
 case 52: 
 HEAP32[((32120)>>2)]=$17;
 var $174=HEAP32[(($169)>>2)];
 var $175=$174&-2;
 HEAP32[(($169)>>2)]=$175;
 var $176=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $177=(($1+$_sum24)|0);
 var $178=$177;
 HEAP32[(($178)>>2)]=$176;
 var $179=$2;
 HEAP32[(($179)>>2)]=$17;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_0277;
 var $_0;
 var $181=HEAP32[((32128)>>2)];
 var $182=($2>>>0)<($181>>>0);
 if($182){label=133;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $184=(($1+$_sum1)|0);
 var $185=$184;
 var $186=HEAP32[(($185)>>2)];
 var $187=$186&2;
 var $188=($187|0)==0;
 if($188){label=56;break;}else{label=109;break;}
 case 56: 
 var $190=HEAP32[((32136)>>2)];
 var $191=($3|0)==($190|0);
 if($191){label=57;break;}else{label=59;break;}
 case 57: 
 var $193=HEAP32[((32124)>>2)];
 var $194=((($193)+($_0277))|0);
 HEAP32[((32124)>>2)]=$194;
 HEAP32[((32136)>>2)]=$_0;
 var $195=$194|1;
 var $196=(($_0+4)|0);
 HEAP32[(($196)>>2)]=$195;
 var $197=HEAP32[((32132)>>2)];
 var $198=($_0|0)==($197|0);
 if($198){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((32132)>>2)]=0;
 HEAP32[((32120)>>2)]=0;
 label=134;break;
 case 59: 
 var $201=HEAP32[((32132)>>2)];
 var $202=($3|0)==($201|0);
 if($202){label=60;break;}else{label=61;break;}
 case 60: 
 var $204=HEAP32[((32120)>>2)];
 var $205=((($204)+($_0277))|0);
 HEAP32[((32120)>>2)]=$205;
 HEAP32[((32132)>>2)]=$_0;
 var $206=$205|1;
 var $207=(($_0+4)|0);
 HEAP32[(($207)>>2)]=$206;
 var $208=$_0;
 var $209=(($208+$205)|0);
 var $210=$209;
 HEAP32[(($210)>>2)]=$205;
 label=134;break;
 case 61: 
 var $212=$186&-8;
 var $213=((($212)+($_0277))|0);
 var $214=$186>>>3;
 var $215=($186>>>0)<256;
 if($215){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $217=(($1+$_sum20)|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $220=(($1+$_sum21)|0);
 var $221=$220;
 var $222=HEAP32[(($221)>>2)];
 var $223=$214<<1;
 var $224=((32152+($223<<2))|0);
 var $225=$224;
 var $226=($219|0)==($225|0);
 if($226){label=65;break;}else{label=63;break;}
 case 63: 
 var $228=$219;
 var $229=($228>>>0)<($181>>>0);
 if($229){label=73;break;}else{label=64;break;}
 case 64: 
 var $231=(($219+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==($3|0);
 if($233){label=65;break;}else{label=73;break;}
 case 65: 
 var $234=($222|0)==($219|0);
 if($234){label=66;break;}else{label=67;break;}
 case 66: 
 var $236=1<<$214;
 var $237=$236^-1;
 var $238=HEAP32[((32112)>>2)];
 var $239=$238&$237;
 HEAP32[((32112)>>2)]=$239;
 label=107;break;
 case 67: 
 var $241=($222|0)==($225|0);
 if($241){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre60=(($222+8)|0);
 var $_pre_phi61=$_pre60;label=71;break;
 case 69: 
 var $243=$222;
 var $244=($243>>>0)<($181>>>0);
 if($244){label=72;break;}else{label=70;break;}
 case 70: 
 var $246=(($222+8)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==($3|0);
 if($248){var $_pre_phi61=$246;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi61;
 var $249=(($219+12)|0);
 HEAP32[(($249)>>2)]=$222;
 HEAP32[(($_pre_phi61)>>2)]=$219;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $251=$2;
 var $_sum2=((($psize)+(24))|0);
 var $252=(($1+$_sum2)|0);
 var $253=$252;
 var $254=HEAP32[(($253)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $255=(($1+$_sum3)|0);
 var $256=$255;
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($251|0);
 if($258){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $260=(($1+$_sum18)|0);
 var $261=$260;
 var $262=HEAP32[(($261)>>2)];
 var $263=$262;
 var $264=($263>>>0)<($181>>>0);
 if($264){label=79;break;}else{label=76;break;}
 case 76: 
 var $266=(($262+12)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($251|0);
 if($268){label=77;break;}else{label=79;break;}
 case 77: 
 var $270=(($257+8)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=($271|0)==($251|0);
 if($272){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($266)>>2)]=$257;
 HEAP32[(($270)>>2)]=$262;
 var $R7_1=$257;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $275=(($1+$_sum5)|0);
 var $276=$275;
 var $277=HEAP32[(($276)>>2)];
 var $278=($277|0)==0;
 if($278){label=81;break;}else{var $R7_0=$277;var $RP9_0=$276;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $280=(($1+$_sum4)|0);
 var $281=$280;
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==0;
 if($283){var $R7_1=0;label=87;break;}else{var $R7_0=$282;var $RP9_0=$281;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $284=(($R7_0+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=83;break;}else{var $R7_0=$285;var $RP9_0=$284;label=82;break;}
 case 83: 
 var $288=(($R7_0+16)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=82;break;}
 case 84: 
 var $292=$RP9_0;
 var $293=($292>>>0)<($181>>>0);
 if($293){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $297=($254|0)==0;
 if($297){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $299=(($1+$_sum15)|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $302=((32416+($301<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($251|0)==($303|0);
 if($304){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($302)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $306=HEAP32[(($300)>>2)];
 var $307=1<<$306;
 var $308=$307^-1;
 var $309=HEAP32[((32116)>>2)];
 var $310=$309&$308;
 HEAP32[((32116)>>2)]=$310;
 label=107;break;
 case 91: 
 var $312=$254;
 var $313=HEAP32[((32128)>>2)];
 var $314=($312>>>0)<($313>>>0);
 if($314){label=95;break;}else{label=92;break;}
 case 92: 
 var $316=(($254+16)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=($317|0)==($251|0);
 if($318){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($316)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $321=(($254+20)|0);
 HEAP32[(($321)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $324=($R7_1|0)==0;
 if($324){label=107;break;}else{label=97;break;}
 case 97: 
 var $326=$R7_1;
 var $327=HEAP32[((32128)>>2)];
 var $328=($326>>>0)<($327>>>0);
 if($328){label=106;break;}else{label=98;break;}
 case 98: 
 var $330=(($R7_1+24)|0);
 HEAP32[(($330)>>2)]=$254;
 var $_sum16=((($psize)+(16))|0);
 var $331=(($1+$_sum16)|0);
 var $332=$331;
 var $333=HEAP32[(($332)>>2)];
 var $334=($333|0)==0;
 if($334){label=102;break;}else{label=99;break;}
 case 99: 
 var $336=$333;
 var $337=HEAP32[((32128)>>2)];
 var $338=($336>>>0)<($337>>>0);
 if($338){label=101;break;}else{label=100;break;}
 case 100: 
 var $340=(($R7_1+16)|0);
 HEAP32[(($340)>>2)]=$333;
 var $341=(($333+24)|0);
 HEAP32[(($341)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $344=(($1+$_sum17)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=107;break;}else{label=103;break;}
 case 103: 
 var $349=$346;
 var $350=HEAP32[((32128)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=105;break;}else{label=104;break;}
 case 104: 
 var $353=(($R7_1+20)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $358=$213|1;
 var $359=(($_0+4)|0);
 HEAP32[(($359)>>2)]=$358;
 var $360=$_0;
 var $361=(($360+$213)|0);
 var $362=$361;
 HEAP32[(($362)>>2)]=$213;
 var $363=HEAP32[((32132)>>2)];
 var $364=($_0|0)==($363|0);
 if($364){label=108;break;}else{var $_1=$213;label=110;break;}
 case 108: 
 HEAP32[((32120)>>2)]=$213;
 label=134;break;
 case 109: 
 var $367=$186&-2;
 HEAP32[(($185)>>2)]=$367;
 var $368=$_0277|1;
 var $369=(($_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=$_0;
 var $371=(($370+$_0277)|0);
 var $372=$371;
 HEAP32[(($372)>>2)]=$_0277;
 var $_1=$_0277;label=110;break;
 case 110: 
 var $_1;
 var $374=$_1>>>3;
 var $375=($_1>>>0)<256;
 if($375){label=111;break;}else{label=116;break;}
 case 111: 
 var $377=$374<<1;
 var $378=((32152+($377<<2))|0);
 var $379=$378;
 var $380=HEAP32[((32112)>>2)];
 var $381=1<<$374;
 var $382=$380&$381;
 var $383=($382|0)==0;
 if($383){label=112;break;}else{label=113;break;}
 case 112: 
 var $385=$380|$381;
 HEAP32[((32112)>>2)]=$385;
 var $_sum13_pre=((($377)+(2))|0);
 var $_pre=((32152+($_sum13_pre<<2))|0);
 var $F16_0=$379;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($377)+(2))|0);
 var $387=((32152+($_sum14<<2))|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$388;
 var $390=HEAP32[((32128)>>2)];
 var $391=($389>>>0)<($390>>>0);
 if($391){label=114;break;}else{var $F16_0=$388;var $_pre_phi=$387;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $394=(($F16_0+12)|0);
 HEAP32[(($394)>>2)]=$_0;
 var $395=(($_0+8)|0);
 HEAP32[(($395)>>2)]=$F16_0;
 var $396=(($_0+12)|0);
 HEAP32[(($396)>>2)]=$379;
 label=134;break;
 case 116: 
 var $398=$_0;
 var $399=$_1>>>8;
 var $400=($399|0)==0;
 if($400){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $402=($_1>>>0)>16777215;
 if($402){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $404=((($399)+(1048320))|0);
 var $405=$404>>>16;
 var $406=$405&8;
 var $407=$399<<$406;
 var $408=((($407)+(520192))|0);
 var $409=$408>>>16;
 var $410=$409&4;
 var $411=$410|$406;
 var $412=$407<<$410;
 var $413=((($412)+(245760))|0);
 var $414=$413>>>16;
 var $415=$414&2;
 var $416=$411|$415;
 var $417=(((14)-($416))|0);
 var $418=$412<<$415;
 var $419=$418>>>15;
 var $420=((($417)+($419))|0);
 var $421=$420<<1;
 var $422=((($420)+(7))|0);
 var $423=$_1>>>($422>>>0);
 var $424=$423&1;
 var $425=$424|$421;
 var $I19_0=$425;label=119;break;
 case 119: 
 var $I19_0;
 var $427=((32416+($I19_0<<2))|0);
 var $428=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($428)>>2)]=$I19_0_c;
 var $429=(($_0+20)|0);
 HEAP32[(($429)>>2)]=0;
 var $430=(($_0+16)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=HEAP32[((32116)>>2)];
 var $432=1<<$I19_0;
 var $433=$431&$432;
 var $434=($433|0)==0;
 if($434){label=120;break;}else{label=121;break;}
 case 120: 
 var $436=$431|$432;
 HEAP32[((32116)>>2)]=$436;
 HEAP32[(($427)>>2)]=$398;
 var $437=(($_0+24)|0);
 var $_c=$427;
 HEAP32[(($437)>>2)]=$_c;
 var $438=(($_0+12)|0);
 HEAP32[(($438)>>2)]=$_0;
 var $439=(($_0+8)|0);
 HEAP32[(($439)>>2)]=$_0;
 label=134;break;
 case 121: 
 var $441=HEAP32[(($427)>>2)];
 var $442=($I19_0|0)==31;
 if($442){var $447=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $444=$I19_0>>>1;
 var $445=(((25)-($444))|0);
 var $447=$445;label=123;break;
 case 123: 
 var $447;
 var $448=$_1<<$447;
 var $K20_0=$448;var $T_0=$441;label=124;break;
 case 124: 
 var $T_0;
 var $K20_0;
 var $450=(($T_0+4)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=$451&-8;
 var $453=($452|0)==($_1|0);
 if($453){label=129;break;}else{label=125;break;}
 case 125: 
 var $455=$K20_0>>>31;
 var $456=(($T_0+16+($455<<2))|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=($457|0)==0;
 var $459=$K20_0<<1;
 if($458){label=126;break;}else{var $K20_0=$459;var $T_0=$457;label=124;break;}
 case 126: 
 var $461=$456;
 var $462=HEAP32[((32128)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=128;break;}else{label=127;break;}
 case 127: 
 HEAP32[(($456)>>2)]=$398;
 var $465=(($_0+24)|0);
 var $T_0_c10=$T_0;
 HEAP32[(($465)>>2)]=$T_0_c10;
 var $466=(($_0+12)|0);
 HEAP32[(($466)>>2)]=$_0;
 var $467=(($_0+8)|0);
 HEAP32[(($467)>>2)]=$_0;
 label=134;break;
 case 128: 
 _abort();
 throw "Reached an unreachable!";
 case 129: 
 var $470=(($T_0+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0;
 var $473=HEAP32[((32128)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=132;break;}else{label=130;break;}
 case 130: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=132;break;}else{label=131;break;}
 case 131: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$398;
 HEAP32[(($470)>>2)]=$398;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=test.html.map